webpackJsonp([0,2],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactDom = __webpack_require__(32);

	var _reactDom2 = _interopRequireDefault(_reactDom);

	var _reactRouter = __webpack_require__(178);

	var _Home = __webpack_require__(233);

	var _Home2 = _interopRequireDefault(_Home);

	var _Lesson = __webpack_require__(238);

	var _Lesson2 = _interopRequireDefault(_Lesson);

	var _Lesson3 = __webpack_require__(633);

	var _Lesson4 = _interopRequireDefault(_Lesson3);

	var _Lesson5 = __webpack_require__(634);

	var _Lesson6 = _interopRequireDefault(_Lesson5);

	var _Lesson7 = __webpack_require__(636);

	var _Lesson8 = _interopRequireDefault(_Lesson7);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	_reactDom2.default.render(_react2.default.createElement(
	    _reactRouter.Router,
	    { history: _reactRouter.hashHistory },
	    _react2.default.createElement(
	        _reactRouter.Route,
	        { path: '/', component: _Home2.default },
	        _react2.default.createElement(_reactRouter.IndexRoute, { component: _Lesson2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: '/lesson1', component: _Lesson2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: '/lesson2', component: _Lesson4.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: '/lesson3', component: _Lesson6.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: '/lesson4', component: _Lesson8.default })
	    )
	), document.getElementById('app'));

/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _reactRouter = __webpack_require__(178);

	var _home = __webpack_require__(234);

	var _home2 = _interopRequireDefault(_home);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Home = function (_Component) {
	    _inherits(Home, _Component);

	    function Home() {
	        _classCallCheck(this, Home);

	        return _possibleConstructorReturn(this, (Home.__proto__ || Object.getPrototypeOf(Home)).apply(this, arguments));
	    }

	    _createClass(Home, [{
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement(
	                'div',
	                { className: _home2.default.home },
	                _react2.default.createElement(
	                    'div',
	                    { className: _home2.default.menu },
	                    _react2.default.createElement(
	                        _reactRouter.Link,
	                        { to: '/lesson1' },
	                        'lesson 1'
	                    ),
	                    _react2.default.createElement(
	                        _reactRouter.Link,
	                        { to: '/lesson2' },
	                        'lesson 2'
	                    ),
	                    _react2.default.createElement(
	                        _reactRouter.Link,
	                        { to: '/lesson3' },
	                        'lesson 3'
	                    ),
	                    _react2.default.createElement(
	                        _reactRouter.Link,
	                        { to: '/lesson4' },
	                        'lesson 4'
	                    )
	                ),
	                this.props.children
	            );
	        }
	    }]);

	    return Home;
	}(_react.Component);

	exports.default = Home;

/***/ },
/* 234 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"home":"home__home-33oqz","menu":"home__menu-1-Orp","lesson":"home__lesson-2xcMI"};

/***/ },
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _echarts = __webpack_require__(239);

	var _echarts2 = _interopRequireDefault(_echarts);

	var _home = __webpack_require__(234);

	var _home2 = _interopRequireDefault(_home);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Lesson1 = function (_Component) {
	    _inherits(Lesson1, _Component);

	    function Lesson1() {
	        _classCallCheck(this, Lesson1);

	        return _possibleConstructorReturn(this, (Lesson1.__proto__ || Object.getPrototypeOf(Lesson1)).apply(this, arguments));
	    }

	    _createClass(Lesson1, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var myChart = _echarts2.default.init(this.refs.lesson1);
	            var option = {
	                title: {
	                    text: 'LESSON 1'
	                },
	                tooltip: {},
	                legend: {
	                    data: ['销量', '价格']
	                },
	                xAxis: {
	                    data: ["衬衫", "羊毛衫", "雪纺衫", "裤子", "高跟鞋", "袜子"]
	                },
	                yAxis: {},
	                series: [{
	                    name: '销量',
	                    type: 'line',
	                    data: [287, 144, 120, 366, 93, 200],
	                    itemStyle: {
	                        normal: {
	                            color: '#f66'
	                        }
	                    }
	                }, {
	                    name: '价格',
	                    type: 'bar',
	                    data: [92, 250, 310, 188, 324, 20],
	                    itemStyle: {
	                        normal: {
	                            color: '#9c6'
	                        }
	                    }
	                }]
	            };
	            myChart.setOption(option);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('div', { className: _home2.default.lesson, ref: 'lesson1' });
	        }
	    }]);

	    return Lesson1;
	}(_react.Component);

	exports.default = Lesson1;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Export echarts as CommonJS module
	 */
	module.exports = __webpack_require__(240);

	// Import all charts and components
	__webpack_require__(339);
	__webpack_require__(373);
	__webpack_require__(380);
	__webpack_require__(389);
	__webpack_require__(393);

	__webpack_require__(403);
	__webpack_require__(424);
	__webpack_require__(436);
	__webpack_require__(457);
	__webpack_require__(461);
	__webpack_require__(465);
	__webpack_require__(480);
	__webpack_require__(486);
	__webpack_require__(493);
	__webpack_require__(499);
	__webpack_require__(503);
	__webpack_require__(512);
	__webpack_require__(516);
	__webpack_require__(519);

	__webpack_require__(530);
	__webpack_require__(352);
	__webpack_require__(531);
	__webpack_require__(537);
	__webpack_require__(541);
	__webpack_require__(552);
	__webpack_require__(466);
	__webpack_require__(520);
	__webpack_require__(555);

	__webpack_require__(566);

	__webpack_require__(567);
	__webpack_require__(581);

	__webpack_require__(596);
	__webpack_require__(602);
	__webpack_require__(605);

	__webpack_require__(608);
	__webpack_require__(617);

	__webpack_require__(629);


/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {// Enable DEV mode when using source code without build. which has no __DEV__ variable
	// In build process 'typeof __DEV__' will be replace with 'boolean'
	// So this code will be removed or disabled anyway after built.
	if (typeof __DEV__ === 'undefined') {
	    // In browser
	    if (typeof window !== 'undefined') {
	        window.__DEV__ = true;
	    }
	    // In node
	    else if (typeof global !== 'undefined') {
	        global.__DEV__ = true;
	    }
	}

	/*!
	 * ECharts, a javascript interactive chart library.
	 *
	 * Copyright (c) 2015, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt
	 */

	/**
	 * @module echarts
	 */


	    var env = __webpack_require__(241);

	    var GlobalModel = __webpack_require__(242);
	    var ExtensionAPI = __webpack_require__(264);
	    var CoordinateSystemManager = __webpack_require__(265);
	    var OptionManager = __webpack_require__(266);

	    var ComponentModel = __webpack_require__(258);
	    var SeriesModel = __webpack_require__(267);

	    var ComponentView = __webpack_require__(268);
	    var ChartView = __webpack_require__(281);
	    var graphic = __webpack_require__(282);
	    var modelUtil = __webpack_require__(244);
	    var throttle = __webpack_require__(320);

	    var zrender = __webpack_require__(321);
	    var zrUtil = __webpack_require__(243);
	    var colorTool = __webpack_require__(278);
	    var Eventful = __webpack_require__(272);
	    var timsort = __webpack_require__(325);

	    var each = zrUtil.each;
	    var parseClassType = ComponentModel.parseClassType;

	    var PRIORITY_PROCESSOR_FILTER = 1000;
	    var PRIORITY_PROCESSOR_STATISTIC = 5000;


	    var PRIORITY_VISUAL_LAYOUT = 1000;
	    var PRIORITY_VISUAL_GLOBAL = 2000;
	    var PRIORITY_VISUAL_CHART = 3000;
	    var PRIORITY_VISUAL_COMPONENT = 4000;
	    // FIXME
	    // necessary?
	    var PRIORITY_VISUAL_BRUSH = 5000;

	    // Main process have three entries: `setOption`, `dispatchAction` and `resize`,
	    // where they must not be invoked nestedly, except the only case: invoke
	    // dispatchAction with updateMethod "none" in main process.
	    // This flag is used to carry out this rule.
	    // All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).
	    var IN_MAIN_PROCESS = '__flagInMainProcess';
	    var HAS_GRADIENT_OR_PATTERN_BG = '__hasGradientOrPatternBg';
	    var OPTION_UPDATED = '__optionUpdated';
	    var ACTION_REG = /^[a-zA-Z0-9_]+$/;

	    function createRegisterEventWithLowercaseName(method) {
	        return function (eventName, handler, context) {
	            // Event name is all lowercase
	            eventName = eventName && eventName.toLowerCase();
	            Eventful.prototype[method].call(this, eventName, handler, context);
	        };
	    }

	    /**
	     * @module echarts~MessageCenter
	     */
	    function MessageCenter() {
	        Eventful.call(this);
	    }
	    MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
	    MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
	    MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
	    zrUtil.mixin(MessageCenter, Eventful);

	    /**
	     * @module echarts~ECharts
	     */
	    function ECharts (dom, theme, opts) {
	        opts = opts || {};

	        // Get theme by name
	        if (typeof theme === 'string') {
	            theme = themeStorage[theme];
	        }

	        /**
	         * @type {string}
	         */
	        this.id;
	        /**
	         * Group id
	         * @type {string}
	         */
	        this.group;
	        /**
	         * @type {HTMLDomElement}
	         * @private
	         */
	        this._dom = dom;
	        /**
	         * @type {module:zrender/ZRender}
	         * @private
	         */
	        var zr = this._zr = zrender.init(dom, {
	            renderer: opts.renderer || 'canvas',
	            devicePixelRatio: opts.devicePixelRatio,
	            width: opts.width,
	            height: opts.height
	        });

	        /**
	         * Expect 60 pfs.
	         * @type {Function}
	         * @private
	         */
	        this._throttledZrFlush = throttle.throttle(zrUtil.bind(zr.flush, zr), 17);

	        /**
	         * @type {Object}
	         * @private
	         */
	        this._theme = zrUtil.clone(theme);

	        /**
	         * @type {Array.<module:echarts/view/Chart>}
	         * @private
	         */
	        this._chartsViews = [];

	        /**
	         * @type {Object.<string, module:echarts/view/Chart>}
	         * @private
	         */
	        this._chartsMap = {};

	        /**
	         * @type {Array.<module:echarts/view/Component>}
	         * @private
	         */
	        this._componentsViews = [];

	        /**
	         * @type {Object.<string, module:echarts/view/Component>}
	         * @private
	         */
	        this._componentsMap = {};

	        /**
	         * @type {module:echarts/ExtensionAPI}
	         * @private
	         */
	        this._api = new ExtensionAPI(this);

	        /**
	         * @type {module:echarts/CoordinateSystem}
	         * @private
	         */
	        this._coordSysMgr = new CoordinateSystemManager();

	        Eventful.call(this);

	        /**
	         * @type {module:echarts~MessageCenter}
	         * @private
	         */
	        this._messageCenter = new MessageCenter();

	        // Init mouse events
	        this._initEvents();

	        // In case some people write `window.onresize = chart.resize`
	        this.resize = zrUtil.bind(this.resize, this);

	        // Can't dispatch action during rendering procedure
	        this._pendingActions = [];
	        // Sort on demand
	        function prioritySortFunc(a, b) {
	            return a.prio - b.prio;
	        }
	        timsort(visualFuncs, prioritySortFunc);
	        timsort(dataProcessorFuncs, prioritySortFunc);

	        zr.animation.on('frame', this._onframe, this);
	    }

	    var echartsProto = ECharts.prototype;

	    echartsProto._onframe = function () {
	        // Lazy update
	        if (this[OPTION_UPDATED]) {
	            var silent = this[OPTION_UPDATED].silent;

	            this[IN_MAIN_PROCESS] = true;

	            updateMethods.prepareAndUpdate.call(this);

	            this[IN_MAIN_PROCESS] = false;

	            this[OPTION_UPDATED] = false;

	            flushPendingActions.call(this, silent);

	            triggerUpdatedEvent.call(this, silent);
	        }
	    };
	    /**
	     * @return {HTMLDomElement}
	     */
	    echartsProto.getDom = function () {
	        return this._dom;
	    };

	    /**
	     * @return {module:zrender~ZRender}
	     */
	    echartsProto.getZr = function () {
	        return this._zr;
	    };

	    /**
	     * Usage:
	     * chart.setOption(option, notMerge, lazyUpdate);
	     * chart.setOption(option, {
	     *     notMerge: ...,
	     *     lazyUpdate: ...,
	     *     silent: ...
	     * });
	     *
	     * @param {Object} option
	     * @param {Object|boolean} [opts] opts or notMerge.
	     * @param {boolean} [opts.notMerge=false]
	     * @param {boolean} [opts.lazyUpdate=false] Useful when setOption frequently.
	     */
	    echartsProto.setOption = function (option, notMerge, lazyUpdate) {
	        if (__DEV__) {
	            zrUtil.assert(!this[IN_MAIN_PROCESS], '`setOption` should not be called during main process.');
	        }

	        var silent;
	        if (zrUtil.isObject(notMerge)) {
	            lazyUpdate = notMerge.lazyUpdate;
	            silent = notMerge.silent;
	            notMerge = notMerge.notMerge;
	        }

	        this[IN_MAIN_PROCESS] = true;

	        if (!this._model || notMerge) {
	            var optionManager = new OptionManager(this._api);
	            var theme = this._theme;
	            var ecModel = this._model = new GlobalModel(null, null, theme, optionManager);
	            ecModel.init(null, null, theme, optionManager);
	        }

	        // FIXME
	        // ugly
	        this.__lastOnlyGraphic = !!(option && option.graphic);
	        zrUtil.each(option, function (o, mainType) {
	            mainType !== 'graphic' && (this.__lastOnlyGraphic = false);
	        }, this);

	        this._model.setOption(option, optionPreprocessorFuncs);

	        if (lazyUpdate) {
	            this[OPTION_UPDATED] = {silent: silent};
	            this[IN_MAIN_PROCESS] = false;
	        }
	        else {
	            updateMethods.prepareAndUpdate.call(this);
	            // Ensure zr refresh sychronously, and then pixel in canvas can be
	            // fetched after `setOption`.
	            this._zr.flush();

	            this[OPTION_UPDATED] = false;
	            this[IN_MAIN_PROCESS] = false;

	            flushPendingActions.call(this, silent);
	            triggerUpdatedEvent.call(this, silent);
	        }
	    };

	    /**
	     * @DEPRECATED
	     */
	    echartsProto.setTheme = function () {
	        console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
	    };

	    /**
	     * @return {module:echarts/model/Global}
	     */
	    echartsProto.getModel = function () {
	        return this._model;
	    };

	    /**
	     * @return {Object}
	     */
	    echartsProto.getOption = function () {
	        return this._model && this._model.getOption();
	    };

	    /**
	     * @return {number}
	     */
	    echartsProto.getWidth = function () {
	        return this._zr.getWidth();
	    };

	    /**
	     * @return {number}
	     */
	    echartsProto.getHeight = function () {
	        return this._zr.getHeight();
	    };

	    /**
	     * Get canvas which has all thing rendered
	     * @param {Object} opts
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getRenderedCanvas = function (opts) {
	        if (!env.canvasSupported) {
	            return;
	        }
	        opts = opts || {};
	        opts.pixelRatio = opts.pixelRatio || 1;
	        opts.backgroundColor = opts.backgroundColor
	            || this._model.get('backgroundColor');
	        var zr = this._zr;
	        var list = zr.storage.getDisplayList();
	        // Stop animations
	        zrUtil.each(list, function (el) {
	            el.stopAnimation(true);
	        });
	        return zr.painter.getRenderedCanvas(opts);
	    };
	    /**
	     * @return {string}
	     * @param {Object} opts
	     * @param {string} [opts.type='png']
	     * @param {string} [opts.pixelRatio=1]
	     * @param {string} [opts.backgroundColor]
	     * @param {string} [opts.excludeComponents]
	     */
	    echartsProto.getDataURL = function (opts) {
	        opts = opts || {};
	        var excludeComponents = opts.excludeComponents;
	        var ecModel = this._model;
	        var excludesComponentViews = [];
	        var self = this;

	        each(excludeComponents, function (componentType) {
	            ecModel.eachComponent({
	                mainType: componentType
	            }, function (component) {
	                var view = self._componentsMap[component.__viewId];
	                if (!view.group.ignore) {
	                    excludesComponentViews.push(view);
	                    view.group.ignore = true;
	                }
	            });
	        });

	        var url = this.getRenderedCanvas(opts).toDataURL(
	            'image/' + (opts && opts.type || 'png')
	        );

	        each(excludesComponentViews, function (view) {
	            view.group.ignore = false;
	        });
	        return url;
	    };


	    /**
	     * @return {string}
	     * @param {Object} opts
	     * @param {string} [opts.type='png']
	     * @param {string} [opts.pixelRatio=1]
	     * @param {string} [opts.backgroundColor]
	     */
	    echartsProto.getConnectedDataURL = function (opts) {
	        if (!env.canvasSupported) {
	            return;
	        }
	        var groupId = this.group;
	        var mathMin = Math.min;
	        var mathMax = Math.max;
	        var MAX_NUMBER = Infinity;
	        if (connectedGroups[groupId]) {
	            var left = MAX_NUMBER;
	            var top = MAX_NUMBER;
	            var right = -MAX_NUMBER;
	            var bottom = -MAX_NUMBER;
	            var canvasList = [];
	            var dpr = (opts && opts.pixelRatio) || 1;

	            zrUtil.each(instances, function (chart, id) {
	                if (chart.group === groupId) {
	                    var canvas = chart.getRenderedCanvas(
	                        zrUtil.clone(opts)
	                    );
	                    var boundingRect = chart.getDom().getBoundingClientRect();
	                    left = mathMin(boundingRect.left, left);
	                    top = mathMin(boundingRect.top, top);
	                    right = mathMax(boundingRect.right, right);
	                    bottom = mathMax(boundingRect.bottom, bottom);
	                    canvasList.push({
	                        dom: canvas,
	                        left: boundingRect.left,
	                        top: boundingRect.top
	                    });
	                }
	            });

	            left *= dpr;
	            top *= dpr;
	            right *= dpr;
	            bottom *= dpr;
	            var width = right - left;
	            var height = bottom - top;
	            var targetCanvas = zrUtil.createCanvas();
	            targetCanvas.width = width;
	            targetCanvas.height = height;
	            var zr = zrender.init(targetCanvas);

	            each(canvasList, function (item) {
	                var img = new graphic.Image({
	                    style: {
	                        x: item.left * dpr - left,
	                        y: item.top * dpr - top,
	                        image: item.dom
	                    }
	                });
	                zr.add(img);
	            });
	            zr.refreshImmediately();

	            return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
	        }
	        else {
	            return this.getDataURL(opts);
	        }
	    };

	    /**
	     * Convert from logical coordinate system to pixel coordinate system.
	     * See CoordinateSystem#convertToPixel.
	     * @param {string|Object} finder
	     *        If string, e.g., 'geo', means {geoIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex / seriesId / seriesName,
	     *            geoIndex / geoId, geoName,
	     *            bmapIndex / bmapId / bmapName,
	     *            xAxisIndex / xAxisId / xAxisName,
	     *            yAxisIndex / yAxisId / yAxisName,
	     *            gridIndex / gridId / gridName,
	     *            ... (can be extended)
	     *        }
	     * @param {Array|number} value
	     * @return {Array|number} result
	     */
	    echartsProto.convertToPixel = zrUtil.curry(doConvertPixel, 'convertToPixel');

	    /**
	     * Convert from pixel coordinate system to logical coordinate system.
	     * See CoordinateSystem#convertFromPixel.
	     * @param {string|Object} finder
	     *        If string, e.g., 'geo', means {geoIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex / seriesId / seriesName,
	     *            geoIndex / geoId / geoName,
	     *            bmapIndex / bmapId / bmapName,
	     *            xAxisIndex / xAxisId / xAxisName,
	     *            yAxisIndex / yAxisId / yAxisName
	     *            gridIndex / gridId / gridName,
	     *            ... (can be extended)
	     *        }
	     * @param {Array|number} value
	     * @return {Array|number} result
	     */
	    echartsProto.convertFromPixel = zrUtil.curry(doConvertPixel, 'convertFromPixel');

	    function doConvertPixel(methodName, finder, value) {
	        var ecModel = this._model;
	        var coordSysList = this._coordSysMgr.getCoordinateSystems();
	        var result;

	        finder = modelUtil.parseFinder(ecModel, finder);

	        for (var i = 0; i < coordSysList.length; i++) {
	            var coordSys = coordSysList[i];
	            if (coordSys[methodName]
	                && (result = coordSys[methodName](ecModel, finder, value)) != null
	            ) {
	                return result;
	            }
	        }

	        if (__DEV__) {
	            console.warn(
	                'No coordinate system that supports ' + methodName + ' found by the given finder.'
	            );
	        }
	    }

	    /**
	     * Is the specified coordinate systems or components contain the given pixel point.
	     * @param {string|Object} finder
	     *        If string, e.g., 'geo', means {geoIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex / seriesId / seriesName,
	     *            geoIndex / geoId / geoName,
	     *            bmapIndex / bmapId / bmapName,
	     *            xAxisIndex / xAxisId / xAxisName,
	     *            yAxisIndex / yAxisId / yAxisName
	     *            gridIndex / gridId / gridName,
	     *            ... (can be extended)
	     *        }
	     * @param {Array|number} value
	     * @return {boolean} result
	     */
	    echartsProto.containPixel = function (finder, value) {
	        var ecModel = this._model;
	        var result;

	        finder = modelUtil.parseFinder(ecModel, finder);

	        zrUtil.each(finder, function (models, key) {
	            key.indexOf('Models') >= 0 && zrUtil.each(models, function (model) {
	                var coordSys = model.coordinateSystem;
	                if (coordSys && coordSys.containPoint) {
	                    result |= !!coordSys.containPoint(value);
	                }
	                else if (key === 'seriesModels') {
	                    var view = this._chartsMap[model.__viewId];
	                    if (view && view.containPoint) {
	                        result |= view.containPoint(value, model);
	                    }
	                    else {
	                        if (__DEV__) {
	                            console.warn(key + ': ' + (view
	                                ? 'The found component do not support containPoint.'
	                                : 'No view mapping to the found component.'
	                            ));
	                        }
	                    }
	                }
	                else {
	                    if (__DEV__) {
	                        console.warn(key + ': containPoint is not supported');
	                    }
	                }
	            }, this);
	        }, this);

	        return !!result;
	    };

	    /**
	     * Get visual from series or data.
	     * @param {string|Object} finder
	     *        If string, e.g., 'series', means {seriesIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex / seriesId / seriesName,
	     *            dataIndex / dataIndexInside
	     *        }
	     *        If dataIndex is not specified, series visual will be fetched,
	     *        but not data item visual.
	     *        If all of seriesIndex, seriesId, seriesName are not specified,
	     *        visual will be fetched from first series.
	     * @param {string} visualType 'color', 'symbol', 'symbolSize'
	     */
	    echartsProto.getVisual = function (finder, visualType) {
	        var ecModel = this._model;

	        finder = modelUtil.parseFinder(ecModel, finder, {defaultMainType: 'series'});

	        var seriesModel = finder.seriesModel;

	        if (__DEV__) {
	            if (!seriesModel) {
	                console.warn('There is no specified seires model');
	            }
	        }

	        var data = seriesModel.getData();

	        var dataIndexInside = finder.hasOwnProperty('dataIndexInside')
	            ? finder.dataIndexInside
	            : finder.hasOwnProperty('dataIndex')
	            ? data.indexOfRawIndex(finder.dataIndex)
	            : null;

	        return dataIndexInside != null
	            ? data.getItemVisual(dataIndexInside, visualType)
	            : data.getVisual(visualType);
	    };


	    var updateMethods = {

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        update: function (payload) {
	            // console.time && console.time('update');

	            var ecModel = this._model;
	            var api = this._api;
	            var coordSysMgr = this._coordSysMgr;
	            var zr = this._zr;
	            // update before setOption
	            if (!ecModel) {
	                return;
	            }

	            // Fixme First time update ?
	            ecModel.restoreData();

	            // TODO
	            // Save total ecModel here for undo/redo (after restoring data and before processing data).
	            // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.

	            // Create new coordinate system each update
	            // In LineView may save the old coordinate system and use it to get the orignal point
	            coordSysMgr.create(this._model, this._api);

	            processData.call(this, ecModel, api);

	            stackSeriesData.call(this, ecModel);

	            coordSysMgr.update(ecModel, api);

	            doVisualEncoding.call(this, ecModel, payload);

	            doRender.call(this, ecModel, payload);

	            // Set background
	            var backgroundColor = ecModel.get('backgroundColor') || 'transparent';

	            var painter = zr.painter;
	            // TODO all use clearColor ?
	            if (painter.isSingleCanvas && painter.isSingleCanvas()) {
	                zr.configLayer(0, {
	                    clearColor: backgroundColor
	                });
	            }
	            else {
	                // In IE8
	                if (!env.canvasSupported) {
	                    var colorArr = colorTool.parse(backgroundColor);
	                    backgroundColor = colorTool.stringify(colorArr, 'rgb');
	                    if (colorArr[3] === 0) {
	                        backgroundColor = 'transparent';
	                    }
	                }
	                if (backgroundColor.colorStops || backgroundColor.image) {
	                    // Gradient background
	                    // FIXME Fixed layer？
	                    zr.configLayer(0, {
	                        clearColor: backgroundColor
	                    });
	                    this[HAS_GRADIENT_OR_PATTERN_BG] = true;

	                    this._dom.style.background = 'transparent';
	                }
	                else {
	                    if (this[HAS_GRADIENT_OR_PATTERN_BG]) {
	                        zr.configLayer(0, {
	                            clearColor: null
	                        });
	                    }
	                    this[HAS_GRADIENT_OR_PATTERN_BG] = false;

	                    this._dom.style.background = backgroundColor;
	                }
	            }

	            // console.time && console.timeEnd('update');
	        },

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        updateView: function (payload) {
	            var ecModel = this._model;

	            // update before setOption
	            if (!ecModel) {
	                return;
	            }

	            ecModel.eachSeries(function (seriesModel) {
	                seriesModel.getData().clearAllVisual();
	            });

	            doVisualEncoding.call(this, ecModel, payload);

	            invokeUpdateMethod.call(this, 'updateView', ecModel, payload);
	        },

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        updateVisual: function (payload) {
	            var ecModel = this._model;

	            // update before setOption
	            if (!ecModel) {
	                return;
	            }

	            ecModel.eachSeries(function (seriesModel) {
	                seriesModel.getData().clearAllVisual();
	            });

	            doVisualEncoding.call(this, ecModel, payload, true);

	            invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);
	        },

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        updateLayout: function (payload) {
	            var ecModel = this._model;

	            // update before setOption
	            if (!ecModel) {
	                return;
	            }

	            doLayout.call(this, ecModel, payload);

	            invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);
	        },

	        /**
	         * @param {Object} payload
	         * @private
	         */
	        prepareAndUpdate: function (payload) {
	            var ecModel = this._model;

	            prepareView.call(this, 'component', ecModel);

	            prepareView.call(this, 'chart', ecModel);

	            // FIXME
	            // ugly
	            if (this.__lastOnlyGraphic) {
	                each(this._componentsViews, function (componentView) {
	                    var componentModel = componentView.__model;
	                    if (componentModel && componentModel.mainType === 'graphic') {
	                        componentView.render(componentModel, ecModel, this._api, payload);
	                        updateZ(componentModel, componentView);
	                    }
	                }, this);
	                this.__lastOnlyGraphic = false;
	            }
	            else {
	                updateMethods.update.call(this, payload);
	            }
	        }
	    };

	    /**
	     * @private
	     */
	    function updateDirectly(ecIns, method, payload, mainType, subType) {
	        var ecModel = ecIns._model;
	        var query = {};
	        query[mainType + 'Id'] = payload[mainType + 'Id'];
	        query[mainType + 'Index'] = payload[mainType + 'Index'];
	        query[mainType + 'Name'] = payload[mainType + 'Name'];

	        var condition = {mainType: mainType, query: query};
	        subType && (condition.subType = subType); // subType may be '' by parseClassType;

	        // If dispatchAction before setOption, do nothing.
	        ecModel && ecModel.eachComponent(condition, function (model, index) {
	            var view = ecIns[
	                mainType === 'series' ? '_chartsMap' : '_componentsMap'
	            ][model.__viewId];
	            if (view && view.__alive) {
	                view[method](model, ecModel, ecIns._api, payload);
	            }
	        }, ecIns);
	    }

	    /**
	     * Resize the chart
	     * @param {Object} opts
	     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	     * @param {boolean} [opts.silent=false]
	     */
	    echartsProto.resize = function (opts) {
	        if (__DEV__) {
	            zrUtil.assert(!this[IN_MAIN_PROCESS], '`resize` should not be called during main process.');
	        }

	        this[IN_MAIN_PROCESS] = true;

	        this._zr.resize(opts);

	        var optionChanged = this._model && this._model.resetOption('media');
	        var updateMethod = optionChanged ? 'prepareAndUpdate' : 'update';

	        updateMethods[updateMethod].call(this);

	        // Resize loading effect
	        this._loadingFX && this._loadingFX.resize();

	        this[IN_MAIN_PROCESS] = false;

	        var silent = opts && opts.silent;

	        flushPendingActions.call(this, silent);

	        triggerUpdatedEvent.call(this, silent);
	    };

	    /**
	     * Show loading effect
	     * @param  {string} [name='default']
	     * @param  {Object} [cfg]
	     */
	    echartsProto.showLoading = function (name, cfg) {
	        if (zrUtil.isObject(name)) {
	            cfg = name;
	            name = '';
	        }
	        name = name || 'default';

	        this.hideLoading();
	        if (!loadingEffects[name]) {
	            if (__DEV__) {
	                console.warn('Loading effects ' + name + ' not exists.');
	            }
	            return;
	        }
	        var el = loadingEffects[name](this._api, cfg);
	        var zr = this._zr;
	        this._loadingFX = el;

	        zr.add(el);
	    };

	    /**
	     * Hide loading effect
	     */
	    echartsProto.hideLoading = function () {
	        this._loadingFX && this._zr.remove(this._loadingFX);
	        this._loadingFX = null;
	    };

	    /**
	     * @param {Object} eventObj
	     * @return {Object}
	     */
	    echartsProto.makeActionFromEvent = function (eventObj) {
	        var payload = zrUtil.extend({}, eventObj);
	        payload.type = eventActionMap[eventObj.type];
	        return payload;
	    };

	    /**
	     * @pubilc
	     * @param {Object} payload
	     * @param {string} [payload.type] Action type
	     * @param {Object|boolean} [opt] If pass boolean, means opt.silent
	     * @param {boolean} [opt.silent=false] Whether trigger events.
	     * @param {boolean} [opt.flush=undefined]
	     *                  true: Flush immediately, and then pixel in canvas can be fetched
	     *                      immediately. Caution: it might affect performance.
	     *                  false: Not not flush.
	     *                  undefined: Auto decide whether perform flush.
	     */
	    echartsProto.dispatchAction = function (payload, opt) {
	        if (!zrUtil.isObject(opt)) {
	            opt = {silent: !!opt};
	        }

	        if (!actions[payload.type]) {
	            return;
	        }

	        // if (__DEV__) {
	        //     zrUtil.assert(
	        //         !this[IN_MAIN_PROCESS],
	        //         '`dispatchAction` should not be called during main process.'
	        //         + 'unless updateMathod is "none".'
	        //     );
	        // }

	        // May dispatchAction in rendering procedure
	        if (this[IN_MAIN_PROCESS]) {
	            this._pendingActions.push(payload);
	            return;
	        }

	        doDispatchAction.call(this, payload, opt.silent);

	        if (opt.flush) {
	            this._zr.flush(true);
	        }
	        else if (opt.flush !== false && env.browser.weChat) {
	            // In WeChat embeded browser, `requestAnimationFrame` and `setInterval`
	            // hang when sliding page (on touch event), which cause that zr does not
	            // refresh util user interaction finished, which is not expected.
	            // But `dispatchAction` may be called too frequently when pan on touch
	            // screen, which impacts performance if do not throttle them.
	            this._throttledZrFlush();
	        }

	        flushPendingActions.call(this, opt.silent);

	        triggerUpdatedEvent.call(this, opt.silent);
	    };

	    function doDispatchAction(payload, silent) {
	        var payloadType = payload.type;
	        var actionWrap = actions[payloadType];
	        var actionInfo = actionWrap.actionInfo;

	        var cptType = (actionInfo.update || 'update').split(':');
	        var updateMethod = cptType.pop();
	        cptType = cptType[0] && parseClassType(cptType[0]);

	        this[IN_MAIN_PROCESS] = true;

	        var payloads = [payload];
	        var batched = false;
	        // Batch action
	        if (payload.batch) {
	            batched = true;
	            payloads = zrUtil.map(payload.batch, function (item) {
	                item = zrUtil.defaults(zrUtil.extend({}, item), payload);
	                item.batch = null;
	                return item;
	            });
	        }

	        var eventObjBatch = [];
	        var eventObj;
	        var isHighDown = payloadType === 'highlight' || payloadType === 'downplay';

	        for (var i = 0; i < payloads.length; i++) {
	            var batchItem = payloads[i];
	            // Action can specify the event by return it.
	            eventObj = actionWrap.action(batchItem, this._model);
	            // Emit event outside
	            eventObj = eventObj || zrUtil.extend({}, batchItem);
	            // Convert type to eventType
	            eventObj.type = actionInfo.event || eventObj.type;
	            eventObjBatch.push(eventObj);

	            // light update does not perform data process, layout and visual.
	            if (isHighDown) {
	                // method, payload, mainType, subType
	                updateDirectly(this, updateMethod, batchItem, 'series');
	            }
	            else if (cptType) {
	                updateDirectly(this, updateMethod, batchItem, cptType.main, cptType.sub);
	            }
	        }

	        if (updateMethod !== 'none' && !isHighDown && !cptType) {
	            // Still dirty
	            if (this[OPTION_UPDATED]) {
	                // FIXME Pass payload ?
	                updateMethods.prepareAndUpdate.call(this, payload);
	                this[OPTION_UPDATED] = false;
	            }
	            else {
	                updateMethods[updateMethod].call(this, payload);
	            }
	        }

	        // Follow the rule of action batch
	        if (batched) {
	            eventObj = {
	                type: actionInfo.event || payloadType,
	                batch: eventObjBatch
	            };
	        }
	        else {
	            eventObj = eventObjBatch[0];
	        }

	        this[IN_MAIN_PROCESS] = false;

	        !silent && this._messageCenter.trigger(eventObj.type, eventObj);
	    }

	    function flushPendingActions(silent) {
	        var pendingActions = this._pendingActions;
	        while (pendingActions.length) {
	            var payload = pendingActions.shift();
	            doDispatchAction.call(this, payload, silent);
	        }
	    }

	    function triggerUpdatedEvent(silent) {
	        !silent && this.trigger('updated');
	    }

	    /**
	     * Register event
	     * @method
	     */
	    echartsProto.on = createRegisterEventWithLowercaseName('on');
	    echartsProto.off = createRegisterEventWithLowercaseName('off');
	    echartsProto.one = createRegisterEventWithLowercaseName('one');

	    /**
	     * @param {string} methodName
	     * @private
	     */
	    function invokeUpdateMethod(methodName, ecModel, payload) {
	        var api = this._api;

	        // Update all components
	        each(this._componentsViews, function (component) {
	            var componentModel = component.__model;
	            component[methodName](componentModel, ecModel, api, payload);

	            updateZ(componentModel, component);
	        }, this);

	        // Upate all charts
	        ecModel.eachSeries(function (seriesModel, idx) {
	            var chart = this._chartsMap[seriesModel.__viewId];
	            chart[methodName](seriesModel, ecModel, api, payload);

	            updateZ(seriesModel, chart);

	            updateProgressiveAndBlend(seriesModel, chart);
	        }, this);

	        // If use hover layer
	        updateHoverLayerStatus(this._zr, ecModel);
	    }

	    /**
	     * Prepare view instances of charts and components
	     * @param  {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function prepareView(type, ecModel) {
	        var isComponent = type === 'component';
	        var viewList = isComponent ? this._componentsViews : this._chartsViews;
	        var viewMap = isComponent ? this._componentsMap : this._chartsMap;
	        var zr = this._zr;

	        for (var i = 0; i < viewList.length; i++) {
	            viewList[i].__alive = false;
	        }

	        ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {
	            if (isComponent) {
	                if (componentType === 'series') {
	                    return;
	                }
	            }
	            else {
	                model = componentType;
	            }

	            // Consider: id same and type changed.
	            var viewId = model.id + '_' + model.type;
	            var view = viewMap[viewId];
	            if (!view) {
	                var classType = parseClassType(model.type);
	                var Clazz = isComponent
	                    ? ComponentView.getClass(classType.main, classType.sub)
	                    : ChartView.getClass(classType.sub);
	                if (Clazz) {
	                    view = new Clazz();
	                    view.init(ecModel, this._api);
	                    viewMap[viewId] = view;
	                    viewList.push(view);
	                    zr.add(view.group);
	                }
	                else {
	                    // Error
	                    return;
	                }
	            }

	            model.__viewId = viewId;
	            view.__alive = true;
	            view.__id = viewId;
	            view.__model = model;
	        }, this);

	        for (var i = 0; i < viewList.length;) {
	            var view = viewList[i];
	            if (!view.__alive) {
	                zr.remove(view.group);
	                view.dispose(ecModel, this._api);
	                viewList.splice(i, 1);
	                delete viewMap[view.__id];
	            }
	            else {
	                i++;
	            }
	        }
	    }

	    /**
	     * Processor data in each series
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function processData(ecModel, api) {
	        each(dataProcessorFuncs, function (process) {
	            process.func(ecModel, api);
	        });
	    }

	    /**
	     * @private
	     */
	    function stackSeriesData(ecModel) {
	        var stackedDataMap = {};
	        ecModel.eachSeries(function (series) {
	            var stack = series.get('stack');
	            var data = series.getData();
	            if (stack && data.type === 'list') {
	                var previousStack = stackedDataMap[stack];
	                if (previousStack) {
	                    data.stackedOn = previousStack;
	                }
	                stackedDataMap[stack] = data;
	            }
	        });
	    }

	    /**
	     * Layout before each chart render there series, special visual encoding stage
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @private
	     */
	    function doLayout(ecModel, payload) {
	        var api = this._api;
	        each(visualFuncs, function (visual) {
	            if (visual.isLayout) {
	                visual.func(ecModel, api, payload);
	            }
	        });
	    }

	    /**
	     * Encode visual infomation from data after data processing
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @param {object} layout
	     * @param {boolean} [excludesLayout]
	     * @private
	     */
	    function doVisualEncoding(ecModel, payload, excludesLayout) {
	        var api = this._api;
	        ecModel.clearColorPalette();
	        ecModel.eachSeries(function (seriesModel) {
	            seriesModel.clearColorPalette();
	        });
	        each(visualFuncs, function (visual) {
	            (!excludesLayout || !visual.isLayout)
	                && visual.func(ecModel, api, payload);
	        });
	    }

	    /**
	     * Render each chart and component
	     * @private
	     */
	    function doRender(ecModel, payload) {
	        var api = this._api;
	        // Render all components
	        each(this._componentsViews, function (componentView) {
	            var componentModel = componentView.__model;
	            componentView.render(componentModel, ecModel, api, payload);

	            updateZ(componentModel, componentView);
	        }, this);

	        each(this._chartsViews, function (chart) {
	            chart.__alive = false;
	        }, this);

	        // Render all charts
	        ecModel.eachSeries(function (seriesModel, idx) {
	            var chartView = this._chartsMap[seriesModel.__viewId];
	            chartView.__alive = true;
	            chartView.render(seriesModel, ecModel, api, payload);

	            chartView.group.silent = !!seriesModel.get('silent');

	            updateZ(seriesModel, chartView);

	            updateProgressiveAndBlend(seriesModel, chartView);

	        }, this);

	        // If use hover layer
	        updateHoverLayerStatus(this._zr, ecModel);

	        // Remove groups of unrendered charts
	        each(this._chartsViews, function (chart) {
	            if (!chart.__alive) {
	                chart.remove(ecModel, api);
	            }
	        }, this);
	    }

	    var MOUSE_EVENT_NAMES = [
	        'click', 'dblclick', 'mouseover', 'mouseout', 'mousemove',
	        'mousedown', 'mouseup', 'globalout', 'contextmenu'
	    ];
	    /**
	     * @private
	     */
	    echartsProto._initEvents = function () {
	        each(MOUSE_EVENT_NAMES, function (eveName) {
	            this._zr.on(eveName, function (e) {
	                var ecModel = this.getModel();
	                var el = e.target;
	                var params;

	                // no e.target when 'globalout'.
	                if (eveName === 'globalout') {
	                    params = {};
	                }
	                else if (el && el.dataIndex != null) {
	                    var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                    params = dataModel && dataModel.getDataParams(el.dataIndex, el.dataType) || {};
	                }
	                // If element has custom eventData of components
	                else if (el && el.eventData) {
	                    params = zrUtil.extend({}, el.eventData);
	                }

	                if (params) {
	                    params.event = e;
	                    params.type = eveName;
	                    this.trigger(eveName, params);
	                }

	            }, this);
	        }, this);

	        each(eventActionMap, function (actionType, eventType) {
	            this._messageCenter.on(eventType, function (event) {
	                this.trigger(eventType, event);
	            }, this);
	        }, this);
	    };

	    /**
	     * @return {boolean}
	     */
	    echartsProto.isDisposed = function () {
	        return this._disposed;
	    };

	    /**
	     * Clear
	     */
	    echartsProto.clear = function () {
	        this.setOption({ series: [] }, true);
	    };
	    /**
	     * Dispose instance
	     */
	    echartsProto.dispose = function () {
	        if (this._disposed) {
	            if (__DEV__) {
	                console.warn('Instance ' + this.id + ' has been disposed');
	            }
	            return;
	        }
	        this._disposed = true;

	        var api = this._api;
	        var ecModel = this._model;

	        each(this._componentsViews, function (component) {
	            component.dispose(ecModel, api);
	        });
	        each(this._chartsViews, function (chart) {
	            chart.dispose(ecModel, api);
	        });

	        // Dispose after all views disposed
	        this._zr.dispose();

	        delete instances[this.id];
	    };

	    zrUtil.mixin(ECharts, Eventful);

	    function updateHoverLayerStatus(zr, ecModel) {
	        var storage = zr.storage;
	        var elCount = 0;
	        storage.traverse(function (el) {
	            if (!el.isGroup) {
	                elCount++;
	            }
	        });
	        if (elCount > ecModel.get('hoverLayerThreshold') && !env.node) {
	            storage.traverse(function (el) {
	                if (!el.isGroup) {
	                    el.useHoverLayer = true;
	                }
	            });
	        }
	    }
	    /**
	     * Update chart progressive and blend.
	     * @param {module:echarts/model/Series|module:echarts/model/Component} model
	     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	     */
	    function updateProgressiveAndBlend(seriesModel, chartView) {
	        // Progressive configuration
	        var elCount = 0;
	        chartView.group.traverse(function (el) {
	            if (el.type !== 'group' && !el.ignore) {
	                elCount++;
	            }
	        });
	        var frameDrawNum = +seriesModel.get('progressive');
	        var needProgressive = elCount > seriesModel.get('progressiveThreshold') && frameDrawNum && !env.node;
	        if (needProgressive) {
	            chartView.group.traverse(function (el) {
	                // FIXME marker and other components
	                if (!el.isGroup) {
	                    el.progressive = needProgressive ?
	                        Math.floor(elCount++ / frameDrawNum) : -1;
	                    if (needProgressive) {
	                        el.stopAnimation(true);
	                    }
	                }
	            });
	        }

	        // Blend configration
	        var blendMode = seriesModel.get('blendMode') || null;
	        if (__DEV__) {
	            if (!env.canvasSupported && blendMode && blendMode !== 'source-over') {
	                console.warn('Only canvas support blendMode');
	            }
	        }
	        chartView.group.traverse(function (el) {
	            // FIXME marker and other components
	            if (!el.isGroup) {
	                el.setStyle('blend', blendMode);
	            }
	        });
	    }
	    /**
	     * @param {module:echarts/model/Series|module:echarts/model/Component} model
	     * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	     */
	    function updateZ(model, view) {
	        var z = model.get('z');
	        var zlevel = model.get('zlevel');
	        // Set z and zlevel
	        view.group.traverse(function (el) {
	            if (el.type !== 'group') {
	                z != null && (el.z = z);
	                zlevel != null && (el.zlevel = zlevel);
	            }
	        });
	    }
	    /**
	     * @type {Array.<Function>}
	     * @inner
	     */
	    var actions = [];

	    /**
	     * Map eventType to actionType
	     * @type {Object}
	     */
	    var eventActionMap = {};

	    /**
	     * Data processor functions of each stage
	     * @type {Array.<Object.<string, Function>>}
	     * @inner
	     */
	    var dataProcessorFuncs = [];

	    /**
	     * @type {Array.<Function>}
	     * @inner
	     */
	    var optionPreprocessorFuncs = [];

	    /**
	     * Visual encoding functions of each stage
	     * @type {Array.<Object.<string, Function>>}
	     * @inner
	     */
	    var visualFuncs = [];
	    /**
	     * Theme storage
	     * @type {Object.<key, Object>}
	     */
	    var themeStorage = {};
	    /**
	     * Loading effects
	     */
	    var loadingEffects = {};


	    var instances = {};
	    var connectedGroups = {};

	    var idBase = new Date() - 0;
	    var groupIdBase = new Date() - 0;
	    var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	    /**
	     * @alias module:echarts
	     */
	    var echarts = {
	        /**
	         * @type {number}
	         */
	        version: '3.4.0',
	        dependencies: {
	            zrender: '3.3.0'
	        }
	    };

	    function enableConnect(chart) {

	        var STATUS_PENDING = 0;
	        var STATUS_UPDATING = 1;
	        var STATUS_UPDATED = 2;
	        var STATUS_KEY = '__connectUpdateStatus';
	        function updateConnectedChartsStatus(charts, status) {
	            for (var i = 0; i < charts.length; i++) {
	                var otherChart = charts[i];
	                otherChart[STATUS_KEY] = status;
	            }
	        }
	        zrUtil.each(eventActionMap, function (actionType, eventType) {
	            chart._messageCenter.on(eventType, function (event) {
	                if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
	                    var action = chart.makeActionFromEvent(event);
	                    var otherCharts = [];

	                    zrUtil.each(instances, function (otherChart) {
	                        if (otherChart !== chart && otherChart.group === chart.group) {
	                            otherCharts.push(otherChart);
	                        }
	                    });

	                    updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
	                    each(otherCharts, function (otherChart) {
	                        if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
	                            otherChart.dispatchAction(action);
	                        }
	                    });
	                    updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
	                }
	            });
	        });

	    }
	    /**
	     * @param {HTMLDomElement} dom
	     * @param {Object} [theme]
	     * @param {Object} opts
	     * @param {number} [opts.devicePixelRatio] Use window.devicePixelRatio by default
	     * @param {string} [opts.renderer] Currently only 'canvas' is supported.
	     * @param {number} [opts.width] Use clientWidth of the input `dom` by default.
	     *                              Can be 'auto' (the same as null/undefined)
	     * @param {number} [opts.height] Use clientHeight of the input `dom` by default.
	     *                               Can be 'auto' (the same as null/undefined)
	     */
	    echarts.init = function (dom, theme, opts) {
	        if (__DEV__) {
	            // Check version
	            if ((zrender.version.replace('.', '') - 0) < (echarts.dependencies.zrender.replace('.', '') - 0)) {
	                throw new Error(
	                    'ZRender ' + zrender.version
	                    + ' is too old for ECharts ' + echarts.version
	                    + '. Current version need ZRender '
	                    + echarts.dependencies.zrender + '+'
	                );
	            }
	            if (!dom) {
	                throw new Error('Initialize failed: invalid dom.');
	            }
	            if (zrUtil.isDom(dom) && dom.nodeName.toUpperCase() !== 'CANVAS' && (!dom.clientWidth || !dom.clientHeight)) {
	                console.warn('Can\'t get dom width or height');
	            }
	        }

	        var chart = new ECharts(dom, theme, opts);
	        chart.id = 'ec_' + idBase++;
	        instances[chart.id] = chart;

	        dom.setAttribute &&
	            dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);

	        enableConnect(chart);

	        return chart;
	    };

	    /**
	     * @return {string|Array.<module:echarts~ECharts>} groupId
	     */
	    echarts.connect = function (groupId) {
	        // Is array of charts
	        if (zrUtil.isArray(groupId)) {
	            var charts = groupId;
	            groupId = null;
	            // If any chart has group
	            zrUtil.each(charts, function (chart) {
	                if (chart.group != null) {
	                    groupId = chart.group;
	                }
	            });
	            groupId = groupId || ('g_' + groupIdBase++);
	            zrUtil.each(charts, function (chart) {
	                chart.group = groupId;
	            });
	        }
	        connectedGroups[groupId] = true;
	        return groupId;
	    };

	    /**
	     * @return {string} groupId
	     */
	    echarts.disConnect = function (groupId) {
	        connectedGroups[groupId] = false;
	    };

	    /**
	     * Dispose a chart instance
	     * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
	     */
	    echarts.dispose = function (chart) {
	        if (zrUtil.isDom(chart)) {
	            chart = echarts.getInstanceByDom(chart);
	        }
	        else if (typeof chart === 'string') {
	            chart = instances[chart];
	        }
	        if ((chart instanceof ECharts) && !chart.isDisposed()) {
	            chart.dispose();
	        }
	    };

	    /**
	     * @param  {HTMLDomElement} dom
	     * @return {echarts~ECharts}
	     */
	    echarts.getInstanceByDom = function (dom) {
	        var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
	        return instances[key];
	    };
	    /**
	     * @param {string} key
	     * @return {echarts~ECharts}
	     */
	    echarts.getInstanceById = function (key) {
	        return instances[key];
	    };

	    /**
	     * Register theme
	     */
	    echarts.registerTheme = function (name, theme) {
	        themeStorage[name] = theme;
	    };

	    /**
	     * Register option preprocessor
	     * @param {Function} preprocessorFunc
	     */
	    echarts.registerPreprocessor = function (preprocessorFunc) {
	        optionPreprocessorFuncs.push(preprocessorFunc);
	    };

	    /**
	     * @param {number} [priority=1000]
	     * @param {Function} processorFunc
	     */
	    echarts.registerProcessor = function (priority, processorFunc) {
	        if (typeof priority === 'function') {
	            processorFunc = priority;
	            priority = PRIORITY_PROCESSOR_FILTER;
	        }
	        if (__DEV__) {
	            if (isNaN(priority)) {
	                throw new Error('Unkown processor priority');
	            }
	        }
	        dataProcessorFuncs.push({
	            prio: priority,
	            func: processorFunc
	        });
	    };

	    /**
	     * Usage:
	     * registerAction('someAction', 'someEvent', function () { ... });
	     * registerAction('someAction', function () { ... });
	     * registerAction(
	     *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
	     *     function () { ... }
	     * );
	     *
	     * @param {(string|Object)} actionInfo
	     * @param {string} actionInfo.type
	     * @param {string} [actionInfo.event]
	     * @param {string} [actionInfo.update]
	     * @param {string} [eventName]
	     * @param {Function} action
	     */
	    echarts.registerAction = function (actionInfo, eventName, action) {
	        if (typeof eventName === 'function') {
	            action = eventName;
	            eventName = '';
	        }
	        var actionType = zrUtil.isObject(actionInfo)
	            ? actionInfo.type
	            : ([actionInfo, actionInfo = {
	                event: eventName
	            }][0]);

	        // Event name is all lowercase
	        actionInfo.event = (actionInfo.event || actionType).toLowerCase();
	        eventName = actionInfo.event;

	        // Validate action type and event name.
	        zrUtil.assert(ACTION_REG.test(actionType) && ACTION_REG.test(eventName));

	        if (!actions[actionType]) {
	            actions[actionType] = {action: action, actionInfo: actionInfo};
	        }
	        eventActionMap[eventName] = actionType;
	    };

	    /**
	     * @param {string} type
	     * @param {*} CoordinateSystem
	     */
	    echarts.registerCoordinateSystem = function (type, CoordinateSystem) {
	        CoordinateSystemManager.register(type, CoordinateSystem);
	    };

	    /**
	     * Layout is a special stage of visual encoding
	     * Most visual encoding like color are common for different chart
	     * But each chart has it's own layout algorithm
	     *
	     * @param {number} [priority=1000]
	     * @param {Function} layoutFunc
	     */
	    echarts.registerLayout = function (priority, layoutFunc) {
	        if (typeof priority === 'function') {
	            layoutFunc = priority;
	            priority = PRIORITY_VISUAL_LAYOUT;
	        }
	        if (__DEV__) {
	            if (isNaN(priority)) {
	                throw new Error('Unkown layout priority');
	            }
	        }
	        visualFuncs.push({
	            prio: priority,
	            func: layoutFunc,
	            isLayout: true
	        });
	    };

	    /**
	     * @param {number} [priority=3000]
	     * @param {Function} visualFunc
	     */
	    echarts.registerVisual = function (priority, visualFunc) {
	        if (typeof priority === 'function') {
	            visualFunc = priority;
	            priority = PRIORITY_VISUAL_CHART;
	        }
	        if (__DEV__) {
	            if (isNaN(priority)) {
	                throw new Error('Unkown visual priority');
	            }
	        }
	        visualFuncs.push({
	            prio: priority,
	            func: visualFunc
	        });
	    };

	    /**
	     * @param {string} name
	     */
	    echarts.registerLoading = function (name, loadingFx) {
	        loadingEffects[name] = loadingFx;
	    };

	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendComponentModel = function (opts/*, superClass*/) {
	        // var Clazz = ComponentModel;
	        // if (superClass) {
	        //     var classType = parseClassType(superClass);
	        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	        // }
	        return ComponentModel.extend(opts);
	    };

	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendComponentView = function (opts/*, superClass*/) {
	        // var Clazz = ComponentView;
	        // if (superClass) {
	        //     var classType = parseClassType(superClass);
	        //     Clazz = ComponentView.getClass(classType.main, classType.sub, true);
	        // }
	        return ComponentView.extend(opts);
	    };

	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendSeriesModel = function (opts/*, superClass*/) {
	        // var Clazz = SeriesModel;
	        // if (superClass) {
	        //     superClass = 'series.' + superClass.replace('series.', '');
	        //     var classType = parseClassType(superClass);
	        //     Clazz = ComponentModel.getClass(classType.main, classType.sub, true);
	        // }
	        return SeriesModel.extend(opts);
	    };

	    /**
	     * @param {Object} opts
	     * @param {string} [superClass]
	     */
	    echarts.extendChartView = function (opts/*, superClass*/) {
	        // var Clazz = ChartView;
	        // if (superClass) {
	        //     superClass = superClass.replace('series.', '');
	        //     var classType = parseClassType(superClass);
	        //     Clazz = ChartView.getClass(classType.main, true);
	        // }
	        return ChartView.extend(opts);
	    };

	    /**
	     * ZRender need a canvas context to do measureText.
	     * But in node environment canvas may be created by node-canvas.
	     * So we need to specify how to create a canvas instead of using document.createElement('canvas')
	     *
	     * Be careful of using it in the browser.
	     *
	     * @param {Function} creator
	     * @example
	     *     var Canvas = require('canvas');
	     *     var echarts = require('echarts');
	     *     echarts.setCanvasCreator(function () {
	     *         // Small size is enough.
	     *         return new Canvas(32, 32);
	     *     });
	     */
	    echarts.setCanvasCreator = function (creator) {
	        zrUtil.createCanvas = creator;
	    };

	    echarts.registerVisual(PRIORITY_VISUAL_GLOBAL, __webpack_require__(333));
	    echarts.registerPreprocessor(__webpack_require__(334));
	    echarts.registerLoading('default', __webpack_require__(336));

	    // Default action
	    echarts.registerAction({
	        type: 'highlight',
	        event: 'highlight',
	        update: 'highlight'
	    }, zrUtil.noop);
	    echarts.registerAction({
	        type: 'downplay',
	        event: 'downplay',
	        update: 'downplay'
	    }, zrUtil.noop);


	    // --------
	    // Exports
	    // --------
	    //
	    echarts.List = __webpack_require__(337);
	    echarts.Model = __webpack_require__(251);

	    echarts.graphic = __webpack_require__(282);
	    echarts.number = __webpack_require__(246);
	    echarts.format = __webpack_require__(245);
	    echarts.throttle = throttle.throttle;
	    echarts.matrix = __webpack_require__(250);
	    echarts.vector = __webpack_require__(249);
	    echarts.color = __webpack_require__(278);

	    echarts.util = {};
	    each([
	            'map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter',
	            'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction',
	            'extend', 'defaults', 'clone'
	        ],
	        function (name) {
	            echarts.util[name] = zrUtil[name];
	        }
	    );

	    // PRIORITY
	    echarts.PRIORITY = {
	        PROCESSOR: {
	            FILTER: PRIORITY_PROCESSOR_FILTER,
	            STATISTIC: PRIORITY_PROCESSOR_STATISTIC
	        },
	        VISUAL: {
	            LAYOUT: PRIORITY_VISUAL_LAYOUT,
	            GLOBAL: PRIORITY_VISUAL_GLOBAL,
	            CHART: PRIORITY_VISUAL_CHART,
	            COMPONENT: PRIORITY_VISUAL_COMPONENT,
	            BRUSH: PRIORITY_VISUAL_BRUSH
	        }
	    };

	    module.exports = echarts;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 241 */
/***/ function(module, exports) {

	/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */

	    var env = {};
	    if (typeof navigator === 'undefined') {
	        // In node
	        env = {
	            browser: {},
	            os: {},
	            node: true,
	            // Assume canvas is supported
	            canvasSupported: true
	        };
	    }
	    else {
	        env = detect(navigator.userAgent);
	    }

	    module.exports = env;

	    // Zepto.js
	    // (c) 2010-2013 Thomas Fuchs
	    // Zepto.js may be freely distributed under the MIT license.

	    function detect(ua) {
	        var os = {};
	        var browser = {};
	        // var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	        // var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	        // var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	        // var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	        // var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	        // var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	        // var touchpad = webos && ua.match(/TouchPad/);
	        // var kindle = ua.match(/Kindle\/([\d.]+)/);
	        // var silk = ua.match(/Silk\/([\d._]+)/);
	        // var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	        // var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	        // var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	        // var playbook = ua.match(/PlayBook/);
	        // var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
	        var firefox = ua.match(/Firefox\/([\d.]+)/);
	        // var safari = webkit && ua.match(/Mobile\//) && !chrome;
	        // var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
	        var ie = ua.match(/MSIE\s([\d.]+)/)
	            // IE 11 Trident/7.0; rv:11.0
	            || ua.match(/Trident\/.+?rv:(([\d.]+))/);
	        var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+

	        var weChat = (/micromessenger/i).test(ua);

	        // Todo: clean this up with a better OS/browser seperation:
	        // - discern (more) between multiple browsers on android
	        // - decide if kindle fire in silk mode is android or not
	        // - Firefox on Android doesn't specify the Android version
	        // - possibly devide in os, device and browser hashes

	        // if (browser.webkit = !!webkit) browser.version = webkit[1];

	        // if (android) os.android = true, os.version = android[2];
	        // if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	        // if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	        // if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	        // if (webos) os.webos = true, os.version = webos[2];
	        // if (touchpad) os.touchpad = true;
	        // if (blackberry) os.blackberry = true, os.version = blackberry[2];
	        // if (bb10) os.bb10 = true, os.version = bb10[2];
	        // if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	        // if (playbook) browser.playbook = true;
	        // if (kindle) os.kindle = true, os.version = kindle[1];
	        // if (silk) browser.silk = true, browser.version = silk[1];
	        // if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	        // if (chrome) browser.chrome = true, browser.version = chrome[1];
	        if (firefox) {
	            browser.firefox = true;
	            browser.version = firefox[1];
	        }
	        // if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	        // if (webview) browser.webview = true;

	        if (ie) {
	            browser.ie = true;
	            browser.version = ie[1];
	        }

	        if (edge) {
	            browser.edge = true;
	            browser.version = edge[1];
	        }

	        // It is difficult to detect WeChat in Win Phone precisely, because ua can
	        // not be set on win phone. So we do not consider Win Phone.
	        if (weChat) {
	            browser.weChat = true;
	        }

	        // os.tablet = !!(ipad || playbook || (android && !ua.match(/Mobile/)) ||
	        //     (firefox && ua.match(/Tablet/)) || (ie && !ua.match(/Phone/) && ua.match(/Touch/)));
	        // os.phone  = !!(!os.tablet && !os.ipod && (android || iphone || webos ||
	        //     (chrome && ua.match(/Android/)) || (chrome && ua.match(/CriOS\/([\d.]+)/)) ||
	        //     (firefox && ua.match(/Mobile/)) || (ie && ua.match(/Touch/))));

	        return {
	            browser: browser,
	            os: os,
	            node: false,
	            // 原生canvas支持，改极端点了
	            // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	            canvasSupported : document.createElement('canvas').getContext ? true : false,
	            // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>
	            // works on most browsers
	            // IE10/11 does not support touch event, and MS Edge supports them but not by
	            // default, so we dont check navigator.maxTouchPoints for them here.
	            touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
	            // <http://caniuse.com/#search=pointer%20event>.
	            pointerEventsSupported: 'onpointerdown' in window
	                // Firefox supports pointer but not by default, only MS browsers are reliable on pointer
	                // events currently. So we dont use that on other browsers unless tested sufficiently.
	                // Although IE 10 supports pointer event, it use old style and is different from the
	                // standard. So we exclude that. (IE 10 is hardly used on touch device)
	                && (browser.edge || (browser.ie && browser.version >= 11))
	        };
	    }


/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * ECharts global model
	 *
	 * @module {echarts/model/Global}
	 */



	    /**
	     * Caution: If the mechanism should be changed some day, these cases
	     * should be considered:
	     *
	     * (1) In `merge option` mode, if using the same option to call `setOption`
	     * many times, the result should be the same (try our best to ensure that).
	     * (2) In `merge option` mode, if a component has no id/name specified, it
	     * will be merged by index, and the result sequence of the components is
	     * consistent to the original sequence.
	     * (3) `reset` feature (in toolbox). Find detailed info in comments about
	     * `mergeOption` in module:echarts/model/OptionManager.
	     */

	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);
	    var Model = __webpack_require__(251);
	    var each = zrUtil.each;
	    var filter = zrUtil.filter;
	    var map = zrUtil.map;
	    var isArray = zrUtil.isArray;
	    var indexOf = zrUtil.indexOf;
	    var isObject = zrUtil.isObject;

	    var ComponentModel = __webpack_require__(258);

	    var globalDefault = __webpack_require__(262);

	    var OPTION_INNER_KEY = '\0_ec_inner';

	    /**
	     * @alias module:echarts/model/Global
	     *
	     * @param {Object} option
	     * @param {module:echarts/model/Model} parentModel
	     * @param {Object} theme
	     */
	    var GlobalModel = Model.extend({

	        constructor: GlobalModel,

	        init: function (option, parentModel, theme, optionManager) {
	            theme = theme || {};

	            this.option = null; // Mark as not initialized.

	            /**
	             * @type {module:echarts/model/Model}
	             * @private
	             */
	            this._theme = new Model(theme);

	            /**
	             * @type {module:echarts/model/OptionManager}
	             */
	            this._optionManager = optionManager;
	        },

	        setOption: function (option, optionPreprocessorFuncs) {
	            zrUtil.assert(
	                !(OPTION_INNER_KEY in option),
	                'please use chart.getOption()'
	            );

	            this._optionManager.setOption(option, optionPreprocessorFuncs);

	            this.resetOption();
	        },

	        /**
	         * @param {string} type null/undefined: reset all.
	         *                      'recreate': force recreate all.
	         *                      'timeline': only reset timeline option
	         *                      'media': only reset media query option
	         * @return {boolean} Whether option changed.
	         */
	        resetOption: function (type) {
	            var optionChanged = false;
	            var optionManager = this._optionManager;

	            if (!type || type === 'recreate') {
	                var baseOption = optionManager.mountOption(type === 'recreate');

	                if (!this.option || type === 'recreate') {
	                    initBase.call(this, baseOption);
	                }
	                else {
	                    this.restoreData();
	                    this.mergeOption(baseOption);
	                }
	                optionChanged = true;
	            }

	            if (type === 'timeline' || type === 'media') {
	                this.restoreData();
	            }

	            if (!type || type === 'recreate' || type === 'timeline') {
	                var timelineOption = optionManager.getTimelineOption(this);
	                timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
	            }

	            if (!type || type === 'recreate' || type === 'media') {
	                var mediaOptions = optionManager.getMediaOption(this, this._api);
	                if (mediaOptions.length) {
	                    each(mediaOptions, function (mediaOption) {
	                        this.mergeOption(mediaOption, optionChanged = true);
	                    }, this);
	                }
	            }

	            return optionChanged;
	        },

	        /**
	         * @protected
	         */
	        mergeOption: function (newOption) {
	            var option = this.option;
	            var componentsMap = this._componentsMap;
	            var newCptTypes = [];

	            // 如果不存在对应的 component model 则直接 merge
	            each(newOption, function (componentOption, mainType) {
	                if (componentOption == null) {
	                    return;
	                }

	                if (!ComponentModel.hasClass(mainType)) {
	                    option[mainType] = option[mainType] == null
	                        ? zrUtil.clone(componentOption)
	                        : zrUtil.merge(option[mainType], componentOption, true);
	                }
	                else {
	                    newCptTypes.push(mainType);
	                }
	            });

	            // FIXME OPTION 同步是否要改回原来的
	            ComponentModel.topologicalTravel(
	                newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this
	            );

	            this._seriesIndices = this._seriesIndices || [];

	            function visitComponent(mainType, dependencies) {
	                var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);

	                var mapResult = modelUtil.mappingToExists(
	                    componentsMap[mainType], newCptOptionList
	                );

	                modelUtil.makeIdAndName(mapResult);

	                // Set mainType and complete subType.
	                each(mapResult, function (item, index) {
	                    var opt = item.option;
	                    if (isObject(opt)) {
	                        item.keyInfo.mainType = mainType;
	                        item.keyInfo.subType = determineSubType(mainType, opt, item.exist);
	                    }
	                });

	                var dependentModels = getComponentsByTypes(
	                    componentsMap, dependencies
	                );

	                option[mainType] = [];
	                componentsMap[mainType] = [];

	                each(mapResult, function (resultItem, index) {
	                    var componentModel = resultItem.exist;
	                    var newCptOption = resultItem.option;

	                    zrUtil.assert(
	                        isObject(newCptOption) || componentModel,
	                        'Empty component definition'
	                    );

	                    // Consider where is no new option and should be merged using {},
	                    // see removeEdgeAndAdd in topologicalTravel and
	                    // ComponentModel.getAllClassMainTypes.
	                    if (!newCptOption) {
	                        componentModel.mergeOption({}, this);
	                        componentModel.optionUpdated({}, false);
	                    }
	                    else {
	                        var ComponentModelClass = ComponentModel.getClass(
	                            mainType, resultItem.keyInfo.subType, true
	                        );

	                        if (componentModel && componentModel instanceof ComponentModelClass) {
	                            componentModel.name = resultItem.keyInfo.name;
	                            componentModel.mergeOption(newCptOption, this);
	                            componentModel.optionUpdated(newCptOption, false);
	                        }
	                        else {
	                            // PENDING Global as parent ?
	                            var extraOpt = zrUtil.extend(
	                                {
	                                    dependentModels: dependentModels,
	                                    componentIndex: index
	                                },
	                                resultItem.keyInfo
	                            );
	                            componentModel = new ComponentModelClass(
	                                newCptOption, this, this, extraOpt
	                            );
	                            zrUtil.extend(componentModel, extraOpt);
	                            componentModel.init(newCptOption, this, this, extraOpt);
	                            // Call optionUpdated after init.
	                            // newCptOption has been used as componentModel.option
	                            // and may be merged with theme and default, so pass null
	                            // to avoid confusion.
	                            componentModel.optionUpdated(null, true);
	                        }
	                    }

	                    componentsMap[mainType][index] = componentModel;
	                    option[mainType][index] = componentModel.option;
	                }, this);

	                // Backup series for filtering.
	                if (mainType === 'series') {
	                    this._seriesIndices = createSeriesIndices(componentsMap.series);
	                }
	            }
	        },

	        /**
	         * Get option for output (cloned option and inner info removed)
	         * @public
	         * @return {Object}
	         */
	        getOption: function () {
	            var option = zrUtil.clone(this.option);

	            each(option, function (opts, mainType) {
	                if (ComponentModel.hasClass(mainType)) {
	                    var opts = modelUtil.normalizeToArray(opts);
	                    for (var i = opts.length - 1; i >= 0; i--) {
	                        // Remove options with inner id.
	                        if (modelUtil.isIdInner(opts[i])) {
	                            opts.splice(i, 1);
	                        }
	                    }
	                    option[mainType] = opts;
	                }
	            });

	            delete option[OPTION_INNER_KEY];

	            return option;
	        },

	        /**
	         * @return {module:echarts/model/Model}
	         */
	        getTheme: function () {
	            return this._theme;
	        },

	        /**
	         * @param {string} mainType
	         * @param {number} [idx=0]
	         * @return {module:echarts/model/Component}
	         */
	        getComponent: function (mainType, idx) {
	            var list = this._componentsMap[mainType];
	            if (list) {
	                return list[idx || 0];
	            }
	        },

	        /**
	         * If none of index and id and name used, return all components with mainType.
	         * @param {Object} condition
	         * @param {string} condition.mainType
	         * @param {string} [condition.subType] If ignore, only query by mainType
	         * @param {number|Array.<number>} [condition.index] Either input index or id or name.
	         * @param {string|Array.<string>} [condition.id] Either input index or id or name.
	         * @param {string|Array.<string>} [condition.name] Either input index or id or name.
	         * @return {Array.<module:echarts/model/Component>}
	         */
	        queryComponents: function (condition) {
	            var mainType = condition.mainType;
	            if (!mainType) {
	                return [];
	            }

	            var index = condition.index;
	            var id = condition.id;
	            var name = condition.name;

	            var cpts = this._componentsMap[mainType];

	            if (!cpts || !cpts.length) {
	                return [];
	            }

	            var result;

	            if (index != null) {
	                if (!isArray(index)) {
	                    index = [index];
	                }
	                result = filter(map(index, function (idx) {
	                    return cpts[idx];
	                }), function (val) {
	                    return !!val;
	                });
	            }
	            else if (id != null) {
	                var isIdArray = isArray(id);
	                result = filter(cpts, function (cpt) {
	                    return (isIdArray && indexOf(id, cpt.id) >= 0)
	                        || (!isIdArray && cpt.id === id);
	                });
	            }
	            else if (name != null) {
	                var isNameArray = isArray(name);
	                result = filter(cpts, function (cpt) {
	                    return (isNameArray && indexOf(name, cpt.name) >= 0)
	                        || (!isNameArray && cpt.name === name);
	                });
	            }
	            else {
	                // Return all components with mainType
	                result = cpts;
	            }

	            return filterBySubType(result, condition);
	        },

	        /**
	         * The interface is different from queryComponents,
	         * which is convenient for inner usage.
	         *
	         * @usage
	         * var result = findComponents(
	         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
	         * );
	         * var result = findComponents(
	         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
	         * );
	         * var result = findComponents(
	         *     {mainType: 'series'},
	         *     function (model, index) {...}
	         * );
	         * // result like [component0, componnet1, ...]
	         *
	         * @param {Object} condition
	         * @param {string} condition.mainType Mandatory.
	         * @param {string} [condition.subType] Optional.
	         * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
	         *        where xxx is mainType.
	         *        If query attribute is null/undefined or has no index/id/name,
	         *        do not filtering by query conditions, which is convenient for
	         *        no-payload situations or when target of action is global.
	         * @param {Function} [condition.filter] parameter: component, return boolean.
	         * @return {Array.<module:echarts/model/Component>}
	         */
	        findComponents: function (condition) {
	            var query = condition.query;
	            var mainType = condition.mainType;

	            var queryCond = getQueryCond(query);
	            var result = queryCond
	                ? this.queryComponents(queryCond)
	                : this._componentsMap[mainType];

	            return doFilter(filterBySubType(result, condition));

	            function getQueryCond(q) {
	                var indexAttr = mainType + 'Index';
	                var idAttr = mainType + 'Id';
	                var nameAttr = mainType + 'Name';
	                return q && (
	                        q[indexAttr] != null
	                        || q[idAttr] != null
	                        || q[nameAttr] != null
	                    )
	                    ? {
	                        mainType: mainType,
	                        // subType will be filtered finally.
	                        index: q[indexAttr],
	                        id: q[idAttr],
	                        name: q[nameAttr]
	                    }
	                    : null;
	            }

	            function doFilter(res) {
	                return condition.filter
	                     ? filter(res, condition.filter)
	                     : res;
	            }
	        },

	        /**
	         * @usage
	         * eachComponent('legend', function (legendModel, index) {
	         *     ...
	         * });
	         * eachComponent(function (componentType, model, index) {
	         *     // componentType does not include subType
	         *     // (componentType is 'xxx' but not 'xxx.aa')
	         * });
	         * eachComponent(
	         *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
	         *     function (model, index) {...}
	         * );
	         * eachComponent(
	         *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
	         *     function (model, index) {...}
	         * );
	         *
	         * @param {string|Object=} mainType When mainType is object, the definition
	         *                                  is the same as the method 'findComponents'.
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachComponent: function (mainType, cb, context) {
	            var componentsMap = this._componentsMap;

	            if (typeof mainType === 'function') {
	                context = cb;
	                cb = mainType;
	                each(componentsMap, function (components, componentType) {
	                    each(components, function (component, index) {
	                        cb.call(context, componentType, component, index);
	                    });
	                });
	            }
	            else if (zrUtil.isString(mainType)) {
	                each(componentsMap[mainType], cb, context);
	            }
	            else if (isObject(mainType)) {
	                var queryResult = this.findComponents(mainType);
	                each(queryResult, cb, context);
	            }
	        },

	        /**
	         * @param {string} name
	         * @return {Array.<module:echarts/model/Series>}
	         */
	        getSeriesByName: function (name) {
	            var series = this._componentsMap.series;
	            return filter(series, function (oneSeries) {
	                return oneSeries.name === name;
	            });
	        },

	        /**
	         * @param {number} seriesIndex
	         * @return {module:echarts/model/Series}
	         */
	        getSeriesByIndex: function (seriesIndex) {
	            return this._componentsMap.series[seriesIndex];
	        },

	        /**
	         * @param {string} subType
	         * @return {Array.<module:echarts/model/Series>}
	         */
	        getSeriesByType: function (subType) {
	            var series = this._componentsMap.series;
	            return filter(series, function (oneSeries) {
	                return oneSeries.subType === subType;
	            });
	        },

	        /**
	         * @return {Array.<module:echarts/model/Series>}
	         */
	        getSeries: function () {
	            return this._componentsMap.series.slice();
	        },

	        /**
	         * After filtering, series may be different
	         * frome raw series.
	         *
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachSeries: function (cb, context) {
	            assertSeriesInitialized(this);
	            each(this._seriesIndices, function (rawSeriesIndex) {
	                var series = this._componentsMap.series[rawSeriesIndex];
	                cb.call(context, series, rawSeriesIndex);
	            }, this);
	        },

	        /**
	         * Iterate raw series before filtered.
	         *
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachRawSeries: function (cb, context) {
	            each(this._componentsMap.series, cb, context);
	        },

	        /**
	         * After filtering, series may be different.
	         * frome raw series.
	         *
	         * @parma {string} subType
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachSeriesByType: function (subType, cb, context) {
	            assertSeriesInitialized(this);
	            each(this._seriesIndices, function (rawSeriesIndex) {
	                var series = this._componentsMap.series[rawSeriesIndex];
	                if (series.subType === subType) {
	                    cb.call(context, series, rawSeriesIndex);
	                }
	            }, this);
	        },

	        /**
	         * Iterate raw series before filtered of given type.
	         *
	         * @parma {string} subType
	         * @param {Function} cb
	         * @param {*} context
	         */
	        eachRawSeriesByType: function (subType, cb, context) {
	            return each(this.getSeriesByType(subType), cb, context);
	        },

	        /**
	         * @param {module:echarts/model/Series} seriesModel
	         */
	        isSeriesFiltered: function (seriesModel) {
	            assertSeriesInitialized(this);
	            return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;
	        },

	        /**
	         * @param {Function} cb
	         * @param {*} context
	         */
	        filterSeries: function (cb, context) {
	            assertSeriesInitialized(this);
	            var filteredSeries = filter(
	                this._componentsMap.series, cb, context
	            );
	            this._seriesIndices = createSeriesIndices(filteredSeries);
	        },

	        restoreData: function () {
	            var componentsMap = this._componentsMap;

	            this._seriesIndices = createSeriesIndices(componentsMap.series);

	            var componentTypes = [];
	            each(componentsMap, function (components, componentType) {
	                componentTypes.push(componentType);
	            });

	            ComponentModel.topologicalTravel(
	                componentTypes,
	                ComponentModel.getAllClassMainTypes(),
	                function (componentType, dependencies) {
	                    each(componentsMap[componentType], function (component) {
	                        component.restoreData();
	                    });
	                }
	            );
	        }

	    });

	    /**
	     * @inner
	     */
	    function mergeTheme(option, theme) {
	        zrUtil.each(theme, function (themeItem, name) {
	            // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理
	            if (!ComponentModel.hasClass(name)) {
	                if (typeof themeItem === 'object') {
	                    option[name] = !option[name]
	                        ? zrUtil.clone(themeItem)
	                        : zrUtil.merge(option[name], themeItem, false);
	                }
	                else {
	                    if (option[name] == null) {
	                        option[name] = themeItem;
	                    }
	                }
	            }
	        });
	    }

	    function initBase(baseOption) {
	        baseOption = baseOption;

	        // Using OPTION_INNER_KEY to mark that this option can not be used outside,
	        // i.e. `chart.setOption(chart.getModel().option);` is forbiden.
	        this.option = {};
	        this.option[OPTION_INNER_KEY] = 1;

	        /**
	         * @type {Object.<string, Array.<module:echarts/model/Model>>}
	         * @private
	         */
	        this._componentsMap = {};

	        /**
	         * Mapping between filtered series list and raw series list.
	         * key: filtered series indices, value: raw series indices.
	         * @type {Array.<nubmer>}
	         * @private
	         */
	        this._seriesIndices = null;

	        mergeTheme(baseOption, this._theme.option);

	        // TODO Needs clone when merging to the unexisted property
	        zrUtil.merge(baseOption, globalDefault, false);

	        this.mergeOption(baseOption);
	    }

	    /**
	     * @inner
	     * @param {Array.<string>|string} types model types
	     * @return {Object} key: {string} type, value: {Array.<Object>} models
	     */
	    function getComponentsByTypes(componentsMap, types) {
	        if (!zrUtil.isArray(types)) {
	            types = types ? [types] : [];
	        }

	        var ret = {};
	        each(types, function (type) {
	            ret[type] = (componentsMap[type] || []).slice();
	        });

	        return ret;
	    }

	    /**
	     * @inner
	     */
	    function determineSubType(mainType, newCptOption, existComponent) {
	        var subType = newCptOption.type
	            ? newCptOption.type
	            : existComponent
	            ? existComponent.subType
	            // Use determineSubType only when there is no existComponent.
	            : ComponentModel.determineSubType(mainType, newCptOption);

	        // tooltip, markline, markpoint may always has no subType
	        return subType;
	    }

	    /**
	     * @inner
	     */
	    function createSeriesIndices(seriesModels) {
	        return map(seriesModels, function (series) {
	            return series.componentIndex;
	        }) || [];
	    }

	    /**
	     * @inner
	     */
	    function filterBySubType(components, condition) {
	        // Using hasOwnProperty for restrict. Consider
	        // subType is undefined in user payload.
	        return condition.hasOwnProperty('subType')
	            ? filter(components, function (cpt) {
	                return cpt.subType === condition.subType;
	            })
	            : components;
	    }

	    /**
	     * @inner
	     */
	    function assertSeriesInitialized(ecModel) {
	        // Components that use _seriesIndices should depends on series component,
	        // which make sure that their initialization is after series.
	        if (__DEV__) {
	            if (!ecModel._seriesIndices) {
	                throw new Error('Series has not been initialized yet.');
	            }
	        }
	    }

	    zrUtil.mixin(GlobalModel, __webpack_require__(263));

	    module.exports = GlobalModel;


/***/ },
/* 243 */
/***/ function(module, exports) {

	/**
	 * @module zrender/core/util
	 */


	    // 用于处理merge时无法遍历Date等对象的问题
	    var BUILTIN_OBJECT = {
	        '[object Function]': 1,
	        '[object RegExp]': 1,
	        '[object Date]': 1,
	        '[object Error]': 1,
	        '[object CanvasGradient]': 1,
	        '[object CanvasPattern]': 1,
	        // For node-canvas
	        '[object Image]': 1,
	        '[object Canvas]': 1
	    };

	    var TYPED_ARRAY = {
	        '[object Int8Array]': 1,
	        '[object Uint8Array]': 1,
	        '[object Uint8ClampedArray]': 1,
	        '[object Int16Array]': 1,
	        '[object Uint16Array]': 1,
	        '[object Int32Array]': 1,
	        '[object Uint32Array]': 1,
	        '[object Float32Array]': 1,
	        '[object Float64Array]': 1
	    };

	    var objToString = Object.prototype.toString;

	    var arrayProto = Array.prototype;
	    var nativeForEach = arrayProto.forEach;
	    var nativeFilter = arrayProto.filter;
	    var nativeSlice = arrayProto.slice;
	    var nativeMap = arrayProto.map;
	    var nativeReduce = arrayProto.reduce;

	    /**
	     * Those data types can be cloned:
	     *     Plain object, Array, TypedArray, number, string, null, undefined.
	     * Those data types will be assgined using the orginal data:
	     *     BUILTIN_OBJECT
	     * Instance of user defined class will be cloned to a plain object, without
	     * properties in prototype.
	     * Other data types is not supported (not sure what will happen).
	     *
	     * Caution: do not support clone Date, for performance consideration.
	     * (There might be a large number of date in `series.data`).
	     * So date should not be modified in and out of echarts.
	     *
	     * @param {*} source
	     * @return {*} new
	     */
	    function clone(source) {
	        if (source == null || typeof source != 'object') {
	            return source;
	        }

	        var result = source;
	        var typeStr = objToString.call(source);

	        if (typeStr === '[object Array]') {
	            result = [];
	            for (var i = 0, len = source.length; i < len; i++) {
	                result[i] = clone(source[i]);
	            }
	        }
	        else if (TYPED_ARRAY[typeStr]) {
	            result = source.constructor.from(source);
	        }
	        else if (!BUILTIN_OBJECT[typeStr] && !isDom(source)) {
	            result = {};
	            for (var key in source) {
	                if (source.hasOwnProperty(key)) {
	                    result[key] = clone(source[key]);
	                }
	            }
	        }

	        return result;
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} target
	     * @param {*} source
	     * @param {boolean} [overwrite=false]
	     */
	    function merge(target, source, overwrite) {
	        // We should escapse that source is string
	        // and enter for ... in ...
	        if (!isObject(source) || !isObject(target)) {
	            return overwrite ? clone(source) : target;
	        }

	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                var targetProp = target[key];
	                var sourceProp = source[key];

	                if (isObject(sourceProp)
	                    && isObject(targetProp)
	                    && !isArray(sourceProp)
	                    && !isArray(targetProp)
	                    && !isDom(sourceProp)
	                    && !isDom(targetProp)
	                    && !isBuildInObject(sourceProp)
	                    && !isBuildInObject(targetProp)
	                ) {
	                    // 如果需要递归覆盖，就递归调用merge
	                    merge(targetProp, sourceProp, overwrite);
	                }
	                else if (overwrite || !(key in target)) {
	                    // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	                    // NOTE，在 target[key] 不存在的时候也是直接覆盖
	                    target[key] = clone(source[key], true);
	                }
	            }
	        }

	        return target;
	    }

	    /**
	     * @param {Array} targetAndSources The first item is target, and the rests are source.
	     * @param {boolean} [overwrite=false]
	     * @return {*} target
	     */
	    function mergeAll(targetAndSources, overwrite) {
	        var result = targetAndSources[0];
	        for (var i = 1, len = targetAndSources.length; i < len; i++) {
	            result = merge(result, targetAndSources[i], overwrite);
	        }
	        return result;
	    }

	    /**
	     * @param {*} target
	     * @param {*} source
	     * @memberOf module:zrender/core/util
	     */
	    function extend(target, source) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }

	    /**
	     * @param {*} target
	     * @param {*} source
	     * @param {boolen} [overlay=false]
	     * @memberOf module:zrender/core/util
	     */
	    function defaults(target, source, overlay) {
	        for (var key in source) {
	            if (source.hasOwnProperty(key)
	                && (overlay ? source[key] != null : target[key] == null)
	            ) {
	                target[key] = source[key];
	            }
	        }
	        return target;
	    }

	    function createCanvas() {
	        return document.createElement('canvas');
	    }
	    // FIXME
	    var _ctx;
	    function getContext() {
	        if (!_ctx) {
	            // Use util.createCanvas instead of createCanvas
	            // because createCanvas may be overwritten in different environment
	            _ctx = util.createCanvas().getContext('2d');
	        }
	        return _ctx;
	    }

	    /**
	     * 查询数组中元素的index
	     * @memberOf module:zrender/core/util
	     */
	    function indexOf(array, value) {
	        if (array) {
	            if (array.indexOf) {
	                return array.indexOf(value);
	            }
	            for (var i = 0, len = array.length; i < len; i++) {
	                if (array[i] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    }

	    /**
	     * 构造类继承关系
	     *
	     * @memberOf module:zrender/core/util
	     * @param {Function} clazz 源类
	     * @param {Function} baseClazz 基类
	     */
	    function inherits(clazz, baseClazz) {
	        var clazzPrototype = clazz.prototype;
	        function F() {}
	        F.prototype = baseClazz.prototype;
	        clazz.prototype = new F();

	        for (var prop in clazzPrototype) {
	            clazz.prototype[prop] = clazzPrototype[prop];
	        }
	        clazz.prototype.constructor = clazz;
	        clazz.superClass = baseClazz;
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Object|Function} target
	     * @param {Object|Function} sorce
	     * @param {boolean} overlay
	     */
	    function mixin(target, source, overlay) {
	        target = 'prototype' in target ? target.prototype : target;
	        source = 'prototype' in source ? source.prototype : source;

	        defaults(target, source, overlay);
	    }

	    /**
	     * @param {Array|TypedArray} data
	     */
	    function isArrayLike(data) {
	        if (! data) {
	            return;
	        }
	        if (typeof data == 'string') {
	            return false;
	        }
	        return typeof data.length == 'number';
	    }

	    /**
	     * 数组或对象遍历
	     * @memberOf module:zrender/core/util
	     * @param {Object|Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     */
	    function each(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.forEach && obj.forEach === nativeForEach) {
	            obj.forEach(cb, context);
	        }
	        else if (obj.length === +obj.length) {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                cb.call(context, obj[i], i, obj);
	            }
	        }
	        else {
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    cb.call(context, obj[key], key, obj);
	                }
	            }
	        }
	    }

	    /**
	     * 数组映射
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function map(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.map && obj.map === nativeMap) {
	            return obj.map(cb, context);
	        }
	        else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                result.push(cb.call(context, obj[i], i, obj));
	            }
	            return result;
	        }
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {Object} [memo]
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function reduce(obj, cb, memo, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.reduce && obj.reduce === nativeReduce) {
	            return obj.reduce(cb, memo, context);
	        }
	        else {
	            for (var i = 0, len = obj.length; i < len; i++) {
	                memo = cb.call(context, memo, obj[i], i, obj);
	            }
	            return memo;
	        }
	    }

	    /**
	     * 数组过滤
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function filter(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        if (obj.filter && obj.filter === nativeFilter) {
	            return obj.filter(cb, context);
	        }
	        else {
	            var result = [];
	            for (var i = 0, len = obj.length; i < len; i++) {
	                if (cb.call(context, obj[i], i, obj)) {
	                    result.push(obj[i]);
	                }
	            }
	            return result;
	        }
	    }

	    /**
	     * 数组项查找
	     * @memberOf module:zrender/core/util
	     * @param {Array} obj
	     * @param {Function} cb
	     * @param {*} [context]
	     * @return {Array}
	     */
	    function find(obj, cb, context) {
	        if (!(obj && cb)) {
	            return;
	        }
	        for (var i = 0, len = obj.length; i < len; i++) {
	            if (cb.call(context, obj[i], i, obj)) {
	                return obj[i];
	            }
	        }
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @param {*} context
	     * @return {Function}
	     */
	    function bind(func, context) {
	        var args = nativeSlice.call(arguments, 2);
	        return function () {
	            return func.apply(context, args.concat(nativeSlice.call(arguments)));
	        };
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Function} func
	     * @return {Function}
	     */
	    function curry(func) {
	        var args = nativeSlice.call(arguments, 1);
	        return function () {
	            return func.apply(this, args.concat(nativeSlice.call(arguments)));
	        };
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isArray(value) {
	        return objToString.call(value) === '[object Array]';
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isFunction(value) {
	        return typeof value === 'function';
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isString(value) {
	        return objToString.call(value) === '[object String]';
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isObject(value) {
	        // Avoid a V8 JIT bug in Chrome 19-20.
	        // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	        var type = typeof value;
	        return type === 'function' || (!!value && type == 'object');
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isBuildInObject(value) {
	        return !!BUILTIN_OBJECT[objToString.call(value)];
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {*} value
	     * @return {boolean}
	     */
	    function isDom(value) {
	        return typeof value === 'object'
	            && typeof value.nodeType === 'number'
	            && typeof value.ownerDocument === 'object';
	    }

	    /**
	     * Whether is exactly NaN. Notice isNaN('a') returns true.
	     * @param {*} value
	     * @return {boolean}
	     */
	    function eqNaN(value) {
	        return value !== value;
	    }

	    /**
	     * If value1 is not null, then return value1, otherwise judget rest of values.
	     * @memberOf module:zrender/core/util
	     * @return {*} Final value
	     */
	    function retrieve(values) {
	        for (var i = 0, len = arguments.length; i < len; i++) {
	            if (arguments[i] != null) {
	                return arguments[i];
	            }
	        }
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {Array} arr
	     * @param {number} startIndex
	     * @param {number} endIndex
	     * @return {Array}
	     */
	    function slice() {
	        return Function.call.apply(nativeSlice, arguments);
	    }

	    /**
	     * @memberOf module:zrender/core/util
	     * @param {boolean} condition
	     * @param {string} message
	     */
	    function assert(condition, message) {
	        if (!condition) {
	            throw new Error(message);
	        }
	    }

	    var util = {
	        inherits: inherits,
	        mixin: mixin,
	        clone: clone,
	        merge: merge,
	        mergeAll: mergeAll,
	        extend: extend,
	        defaults: defaults,
	        getContext: getContext,
	        createCanvas: createCanvas,
	        indexOf: indexOf,
	        slice: slice,
	        find: find,
	        isArrayLike: isArrayLike,
	        each: each,
	        map: map,
	        reduce: reduce,
	        filter: filter,
	        bind: bind,
	        curry: curry,
	        isArray: isArray,
	        isString: isString,
	        isObject: isObject,
	        isFunction: isFunction,
	        isBuildInObject: isBuildInObject,
	        isDom: isDom,
	        eqNaN: eqNaN,
	        retrieve: retrieve,
	        assert: assert,
	        noop: function () {}
	    };
	    module.exports = util;



/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	

	    var formatUtil = __webpack_require__(245);
	    var nubmerUtil = __webpack_require__(246);
	    var Model = __webpack_require__(251);
	    var zrUtil = __webpack_require__(243);
	    var each = zrUtil.each;
	    var isObject = zrUtil.isObject;

	    var modelUtil = {};

	    /**
	     * If value is not array, then translate it to array.
	     * @param  {*} value
	     * @return {Array} [value] or value
	     */
	    modelUtil.normalizeToArray = function (value) {
	        return value instanceof Array
	            ? value
	            : value == null
	            ? []
	            : [value];
	    };

	    /**
	     * Sync default option between normal and emphasis like `position` and `show`
	     * In case some one will write code like
	     *     label: {
	     *         normal: {
	     *             show: false,
	     *             position: 'outside',
	     *             textStyle: {
	     *                 fontSize: 18
	     *             }
	     *         },
	     *         emphasis: {
	     *             show: true
	     *         }
	     *     }
	     * @param {Object} opt
	     * @param {Array.<string>} subOpts
	     */
	     modelUtil.defaultEmphasis = function (opt, subOpts) {
	        if (opt) {
	            var emphasisOpt = opt.emphasis = opt.emphasis || {};
	            var normalOpt = opt.normal = opt.normal || {};

	            // Default emphasis option from normal
	            each(subOpts, function (subOptName) {
	                var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);
	                if (val != null) {
	                    emphasisOpt[subOptName] = val;
	                }
	            });
	        }
	    };

	    modelUtil.LABEL_OPTIONS = ['position', 'offset', 'show', 'textStyle', 'distance', 'formatter'];

	    /**
	     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	     * This helper method retieves value from data.
	     * @param {string|number|Date|Array|Object} dataItem
	     * @return {number|string|Date|Array.<number|string|Date>}
	     */
	    modelUtil.getDataItemValue = function (dataItem) {
	        // Performance sensitive.
	        return dataItem && (dataItem.value == null ? dataItem : dataItem.value);
	    };

	    /**
	     * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	     * This helper method determine if dataItem has extra option besides value
	     * @param {string|number|Date|Array|Object} dataItem
	     */
	    modelUtil.isDataItemOption = function (dataItem) {
	        return isObject(dataItem)
	            && !(dataItem instanceof Array);
	            // // markLine data can be array
	            // && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
	    };

	    /**
	     * This helper method convert value in data.
	     * @param {string|number|Date} value
	     * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
	     */
	    modelUtil.converDataValue = function (value, dimInfo) {
	        // Performance sensitive.
	        var dimType = dimInfo && dimInfo.type;
	        if (dimType === 'ordinal') {
	            return value;
	        }

	        if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {
	            value = +nubmerUtil.parseDate(value);
	        }

	        // dimType defaults 'number'.
	        // If dimType is not ordinal and value is null or undefined or NaN or '-',
	        // parse to NaN.
	        return (value == null || value === '')
	            ? NaN : +value; // If string (like '-'), using '+' parse to NaN
	    };

	    /**
	     * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.
	     * @param {module:echarts/data/List} data
	     * @param {Object} opt
	     * @param {string} [opt.seriesIndex]
	     * @param {Object} [opt.name]
	     * @param {Object} [opt.mainType]
	     * @param {Object} [opt.subType]
	     */
	    modelUtil.createDataFormatModel = function (data, opt) {
	        var model = new Model();
	        zrUtil.mixin(model, modelUtil.dataFormatMixin);
	        model.seriesIndex = opt.seriesIndex;
	        model.name = opt.name || '';
	        model.mainType = opt.mainType;
	        model.subType = opt.subType;

	        model.getData = function () {
	            return data;
	        };
	        return model;
	    };

	    // PENDING A little ugly
	    modelUtil.dataFormatMixin = {
	        /**
	         * Get params for formatter
	         * @param {number} dataIndex
	         * @param {string} [dataType]
	         * @return {Object}
	         */
	        getDataParams: function (dataIndex, dataType) {
	            var data = this.getData(dataType);

	            var seriesIndex = this.seriesIndex;
	            var seriesName = this.name;

	            var rawValue = this.getRawValue(dataIndex, dataType);
	            var rawDataIndex = data.getRawIndex(dataIndex);
	            var name = data.getName(dataIndex, true);
	            var itemOpt = data.getRawDataItem(dataIndex);

	            return {
	                componentType: this.mainType,
	                componentSubType: this.subType,
	                seriesType: this.mainType === 'series' ? this.subType : null,
	                seriesIndex: seriesIndex,
	                seriesName: seriesName,
	                name: name,
	                dataIndex: rawDataIndex,
	                data: itemOpt,
	                dataType: dataType,
	                value: rawValue,
	                color: data.getItemVisual(dataIndex, 'color'),

	                // Param name list for mapping `a`, `b`, `c`, `d`, `e`
	                $vars: ['seriesName', 'name', 'value']
	            };
	        },

	        /**
	         * Format label
	         * @param {number} dataIndex
	         * @param {string} [status='normal'] 'normal' or 'emphasis'
	         * @param {string} [dataType]
	         * @param {number} [dimIndex]
	         * @return {string}
	         */
	        getFormattedLabel: function (dataIndex, status, dataType, dimIndex) {
	            status = status || 'normal';
	            var data = this.getData(dataType);
	            var itemModel = data.getItemModel(dataIndex);

	            var params = this.getDataParams(dataIndex, dataType);
	            if (dimIndex != null && (params.value instanceof Array)) {
	                params.value = params.value[dimIndex];
	            }

	            var formatter = itemModel.get(['label', status, 'formatter']);

	            if (typeof formatter === 'function') {
	                params.status = status;
	                return formatter(params);
	            }
	            else if (typeof formatter === 'string') {
	                return formatUtil.formatTpl(formatter, params);
	            }
	        },

	        /**
	         * Get raw value in option
	         * @param {number} idx
	         * @param {string} [dataType]
	         * @return {Object}
	         */
	        getRawValue: function (idx, dataType) {
	            var data = this.getData(dataType);
	            var dataItem = data.getRawDataItem(idx);
	            if (dataItem != null) {
	                return (isObject(dataItem) && !(dataItem instanceof Array))
	                    ? dataItem.value : dataItem;
	            }
	        },

	        /**
	         * Should be implemented.
	         * @param {number} dataIndex
	         * @param {boolean} [multipleSeries=false]
	         * @param {number} [dataType]
	         * @return {string} tooltip string
	         */
	        formatTooltip: zrUtil.noop
	    };

	    /**
	     * Mapping to exists for merge.
	     *
	     * @public
	     * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
	     * @param {Object|Array.<Object>} newCptOptions
	     * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	     *                          index of which is the same as exists.
	     */
	    modelUtil.mappingToExists = function (exists, newCptOptions) {
	        // Mapping by the order by original option (but not order of
	        // new option) in merge mode. Because we should ensure
	        // some specified index (like xAxisIndex) is consistent with
	        // original option, which is easy to understand, espatially in
	        // media query. And in most case, merge option is used to
	        // update partial option but not be expected to change order.
	        newCptOptions = (newCptOptions || []).slice();

	        var result = zrUtil.map(exists || [], function (obj, index) {
	            return {exist: obj};
	        });

	        // Mapping by id or name if specified.
	        each(newCptOptions, function (cptOption, index) {
	            if (!isObject(cptOption)) {
	                return;
	            }

	            // id has highest priority.
	            for (var i = 0; i < result.length; i++) {
	                if (!result[i].option // Consider name: two map to one.
	                    && cptOption.id != null
	                    && result[i].exist.id === cptOption.id + ''
	                ) {
	                    result[i].option = cptOption;
	                    newCptOptions[index] = null;
	                    return;
	                }
	            }

	            for (var i = 0; i < result.length; i++) {
	                var exist = result[i].exist;
	                if (!result[i].option // Consider name: two map to one.
	                    // Can not match when both ids exist but different.
	                    && (exist.id == null || cptOption.id == null)
	                    && cptOption.name != null
	                    && !modelUtil.isIdInner(cptOption)
	                    && !modelUtil.isIdInner(exist)
	                    && exist.name === cptOption.name + ''
	                ) {
	                    result[i].option = cptOption;
	                    newCptOptions[index] = null;
	                    return;
	                }
	            }
	        });

	        // Otherwise mapping by index.
	        each(newCptOptions, function (cptOption, index) {
	            if (!isObject(cptOption)) {
	                return;
	            }

	            var i = 0;
	            for (; i < result.length; i++) {
	                var exist = result[i].exist;
	                if (!result[i].option
	                    // Existing model that already has id should be able to
	                    // mapped to (because after mapping performed model may
	                    // be assigned with a id, whish should not affect next
	                    // mapping), except those has inner id.
	                    && !modelUtil.isIdInner(exist)
	                    // Caution:
	                    // Do not overwrite id. But name can be overwritten,
	                    // because axis use name as 'show label text'.
	                    // 'exist' always has id and name and we dont
	                    // need to check it.
	                    && cptOption.id == null
	                ) {
	                    result[i].option = cptOption;
	                    break;
	                }
	            }

	            if (i >= result.length) {
	                result.push({option: cptOption});
	            }
	        });

	        return result;
	    };

	    /**
	     * Make id and name for mapping result (result of mappingToExists)
	     * into `keyInfo` field.
	     *
	     * @public
	     * @param {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	     *                          which order is the same as exists.
	     * @return {Array.<Object>} The input.
	     */
	    modelUtil.makeIdAndName = function (mapResult) {
	        // We use this id to hash component models and view instances
	        // in echarts. id can be specified by user, or auto generated.

	        // The id generation rule ensures new view instance are able
	        // to mapped to old instance when setOption are called in
	        // no-merge mode. So we generate model id by name and plus
	        // type in view id.

	        // name can be duplicated among components, which is convenient
	        // to specify multi components (like series) by one name.

	        // Ensure that each id is distinct.
	        var idMap = {};

	        each(mapResult, function (item, index) {
	            var existCpt = item.exist;
	            existCpt && (idMap[existCpt.id] = item);
	        });

	        each(mapResult, function (item, index) {
	            var opt = item.option;

	            zrUtil.assert(
	                !opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item,
	                'id duplicates: ' + (opt && opt.id)
	            );

	            opt && opt.id != null && (idMap[opt.id] = item);
	            !item.keyInfo && (item.keyInfo = {});
	        });

	        // Make name and id.
	        each(mapResult, function (item, index) {
	            var existCpt = item.exist;
	            var opt = item.option;
	            var keyInfo = item.keyInfo;

	            if (!isObject(opt)) {
	                return;
	            }

	            // name can be overwitten. Consider case: axis.name = '20km'.
	            // But id generated by name will not be changed, which affect
	            // only in that case: setOption with 'not merge mode' and view
	            // instance will be recreated, which can be accepted.
	            keyInfo.name = opt.name != null
	                ? opt.name + ''
	                : existCpt
	                ? existCpt.name
	                : '\0-';

	            if (existCpt) {
	                keyInfo.id = existCpt.id;
	            }
	            else if (opt.id != null) {
	                keyInfo.id = opt.id + '';
	            }
	            else {
	                // Consider this situatoin:
	                //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
	                //  optionB [{..}, {name: 'a'}, {name: 'a'}]
	                // Series with the same name between optionA and optionB
	                // should be mapped.
	                var idNum = 0;
	                do {
	                    keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
	                }
	                while (idMap[keyInfo.id]);
	            }

	            idMap[keyInfo.id] = item;
	        });
	    };

	    /**
	     * @public
	     * @param {Object} cptOption
	     * @return {boolean}
	     */
	    modelUtil.isIdInner = function (cptOption) {
	        return isObject(cptOption)
	            && cptOption.id
	            && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
	    };

	    /**
	     * A helper for removing duplicate items between batchA and batchB,
	     * and in themselves, and categorize by series.
	     *
	     * @param {Array.<Object>} batchA Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	     * @param {Array.<Object>} batchB Like: [{seriesId: 2, dataIndex: [32, 4, 5]}, ...]
	     * @return {Array.<Array.<Object>, Array.<Object>>} result: [resultBatchA, resultBatchB]
	     */
	    modelUtil.compressBatches = function (batchA, batchB) {
	        var mapA = {};
	        var mapB = {};

	        makeMap(batchA || [], mapA);
	        makeMap(batchB || [], mapB, mapA);

	        return [mapToArray(mapA), mapToArray(mapB)];

	        function makeMap(sourceBatch, map, otherMap) {
	            for (var i = 0, len = sourceBatch.length; i < len; i++) {
	                var seriesId = sourceBatch[i].seriesId;
	                var dataIndices = modelUtil.normalizeToArray(sourceBatch[i].dataIndex);
	                var otherDataIndices = otherMap && otherMap[seriesId];

	                for (var j = 0, lenj = dataIndices.length; j < lenj; j++) {
	                    var dataIndex = dataIndices[j];

	                    if (otherDataIndices && otherDataIndices[dataIndex]) {
	                        otherDataIndices[dataIndex] = null;
	                    }
	                    else {
	                        (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
	                    }
	                }
	            }
	        }

	        function mapToArray(map, isData) {
	            var result = [];
	            for (var i in map) {
	                if (map.hasOwnProperty(i) && map[i] != null) {
	                    if (isData) {
	                        result.push(+i);
	                    }
	                    else {
	                        var dataIndices = mapToArray(map[i], true);
	                        dataIndices.length && result.push({seriesId: i, dataIndex: dataIndices});
	                    }
	                }
	            }
	            return result;
	        }
	    };

	    /**
	     * @param {module:echarts/data/List} data
	     * @param {Object} payload Contains dataIndex (means rawIndex) / dataIndexInside / name
	     *                         each of which can be Array or primary type.
	     * @return {number|Array.<number>} dataIndex If not found, return undefined/null.
	     */
	    modelUtil.queryDataIndex = function (data, payload) {
	        if (payload.dataIndexInside != null) {
	            return payload.dataIndexInside;
	        }
	        else if (payload.dataIndex != null) {
	            return zrUtil.isArray(payload.dataIndex)
	                ? zrUtil.map(payload.dataIndex, function (value) {
	                    return data.indexOfRawIndex(value);
	                })
	                : data.indexOfRawIndex(payload.dataIndex);
	        }
	        else if (payload.name != null) {
	            return zrUtil.isArray(payload.name)
	                ? zrUtil.map(payload.name, function (value) {
	                    return data.indexOfName(value);
	                })
	                : data.indexOfName(payload.name);
	        }
	    };

	    /**
	     * @param {module:echarts/model/Global} ecModel
	     * @param {string|Object} finder
	     *        If string, e.g., 'geo', means {geoIndex: 0}.
	     *        If Object, could contain some of these properties below:
	     *        {
	     *            seriesIndex, seriesId, seriesName,
	     *            geoIndex, geoId, goeName,
	     *            bmapIndex, bmapId, bmapName,
	     *            xAxisIndex, xAxisId, xAxisName,
	     *            yAxisIndex, yAxisId, yAxisName,
	     *            gridIndex, gridId, gridName,
	     *            ... (can be extended)
	     *        }
	     *        Each properties can be number|string|Array.<number>|Array.<string>
	     *        For example, a finder could be
	     *        {
	     *            seriesIndex: 3,
	     *            geoId: ['aa', 'cc'],
	     *            gridName: ['xx', 'rr']
	     *        }
	     * @param {Object} [opt]
	     * @param {string} [opt.defaultMainType]
	     * @return {Object} result like:
	     *        {
	     *            seriesModels: [seriesModel1, seriesModel2],
	     *            seriesModel: seriesModel1, // The first model
	     *            geoModels: [geoModel1, geoModel2],
	     *            geoModel: geoModel1, // The first model
	     *            ...
	     *        }
	     */
	    modelUtil.parseFinder = function (ecModel, finder, opt) {
	        if (zrUtil.isString(finder)) {
	            var obj = {};
	            obj[finder + 'Index'] = 0;
	            finder = obj;
	        }

	        var defaultMainType = opt && opt.defaultMainType;
	        if (defaultMainType
	            && !has(finder, defaultMainType + 'Index')
	            && !has(finder, defaultMainType + 'Id')
	            && !has(finder, defaultMainType + 'Name')
	        ) {
	            finder[defaultMainType + 'Index'] = 0;
	        }

	        var result = {};

	        each(finder, function (value, key) {
	            var value = finder[key];

	            // Exclude 'dataIndex' and other illgal keys.
	            if (key === 'dataIndex' || key === 'dataIndexInside') {
	                result[key] = value;
	                return;
	            }

	            var parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
	            var mainType = parsedKey[1];
	            var queryType = parsedKey[2];

	            if (!mainType || !queryType) {
	                return;
	            }

	            var queryParam = {mainType: mainType};
	            queryParam[queryType.toLowerCase()] = value;
	            var models = ecModel.queryComponents(queryParam);
	            result[mainType + 'Models'] = models;
	            result[mainType + 'Model'] = models[0];
	        });

	        return result;
	    };

	    function has(obj, prop) {
	        return obj && obj.hasOwnProperty(prop);
	    }

	    module.exports = modelUtil;


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);
	    var textContain = __webpack_require__(247);

	    var formatUtil = {};
	    /**
	     * 每三位默认加,格式化
	     * @type {string|number} x
	     */
	    formatUtil.addCommas = function (x) {
	        if (isNaN(x)) {
	            return '-';
	        }
	        x = (x + '').split('.');
	        return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g,'$1,')
	               + (x.length > 1 ? ('.' + x[1]) : '');
	    };

	    /**
	     * @param {string} str
	     * @param {boolean} [upperCaseFirst=false]
	     * @return {string} str
	     */
	    formatUtil.toCamelCase = function (str, upperCaseFirst) {
	        str = (str || '').toLowerCase().replace(/-(.)/g, function(match, group1) {
	            return group1.toUpperCase();
	        });

	        if (upperCaseFirst && str) {
	            str = str.charAt(0).toUpperCase() + str.slice(1);
	        }

	        return str;
	    };

	    /**
	     * Normalize css liked array configuration
	     * e.g.
	     *  3 => [3, 3, 3, 3]
	     *  [4, 2] => [4, 2, 4, 2]
	     *  [4, 3, 2] => [4, 3, 2, 3]
	     * @param {number|Array.<number>} val
	     */
	    formatUtil.normalizeCssArray = function (val) {
	        var len = val.length;
	        if (typeof (val) === 'number') {
	            return [val, val, val, val];
	        }
	        else if (len === 2) {
	            // vertical | horizontal
	            return [val[0], val[1], val[0], val[1]];
	        }
	        else if (len === 3) {
	            // top | horizontal | bottom
	            return [val[0], val[1], val[2], val[1]];
	        }
	        return val;
	    };

	    var encodeHTML = formatUtil.encodeHTML = function (source) {
	        return String(source)
	            .replace(/&/g, '&amp;')
	            .replace(/</g, '&lt;')
	            .replace(/>/g, '&gt;')
	            .replace(/"/g, '&quot;')
	            .replace(/'/g, '&#39;');
	    };

	    var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];

	    var wrapVar = function (varName, seriesIdx) {
	        return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	    };

	    /**
	     * Template formatter
	     * @param {string} tpl
	     * @param {Array.<Object>|Object} paramsList
	     * @param {boolean} [encode=false]
	     * @return {string}
	     */
	    formatUtil.formatTpl = function (tpl, paramsList, encode) {
	        if (!zrUtil.isArray(paramsList)) {
	            paramsList = [paramsList];
	        }
	        var seriesLen = paramsList.length;
	        if (!seriesLen) {
	            return '';
	        }

	        var $vars = paramsList[0].$vars || [];
	        for (var i = 0; i < $vars.length; i++) {
	            var alias = TPL_VAR_ALIAS[i];
	            var val = wrapVar(alias, 0);
	            tpl = tpl.replace(wrapVar(alias), encode ? encodeHTML(val) : val);
	        }
	        for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	            for (var k = 0; k < $vars.length; k++) {
	                var val = paramsList[seriesIdx][$vars[k]];
	                tpl = tpl.replace(
	                    wrapVar(TPL_VAR_ALIAS[k], seriesIdx),
	                    encode ? encodeHTML(val) : val
	                );
	            }
	        }

	        return tpl;
	    };


	    /**
	     * @param {string} str
	     * @return {string}
	     * @inner
	     */
	    var s2d = function (str) {
	        return str < 10 ? ('0' + str) : str;
	    };

	    /**
	     * ISO Date format
	     * @param {string} tpl
	     * @param {number} value
	     * @inner
	     */
	    formatUtil.formatTime = function (tpl, value) {
	        if (tpl === 'week'
	            || tpl === 'month'
	            || tpl === 'quarter'
	            || tpl === 'half-year'
	            || tpl === 'year'
	        ) {
	            tpl = 'MM-dd\nyyyy';
	        }

	        var date = numberUtil.parseDate(value);
	        var y = date.getFullYear();
	        var M = date.getMonth() + 1;
	        var d = date.getDate();
	        var h = date.getHours();
	        var m = date.getMinutes();
	        var s = date.getSeconds();

	        tpl = tpl.replace('MM', s2d(M))
	            .toLowerCase()
	            .replace('yyyy', y)
	            .replace('yy', y % 100)
	            .replace('dd', s2d(d))
	            .replace('d', d)
	            .replace('hh', s2d(h))
	            .replace('h', h)
	            .replace('mm', s2d(m))
	            .replace('m', m)
	            .replace('ss', s2d(s))
	            .replace('s', s);

	        return tpl;
	    };

	    /**
	     * Capital first
	     * @param {string} str
	     * @return {string}
	     */
	    formatUtil.capitalFirst = function (str) {
	        return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	    };

	    formatUtil.truncateText = textContain.truncateText;

	    module.exports = formatUtil;


/***/ },
/* 246 */
/***/ function(module, exports) {

	/**
	 * 数值处理模块
	 * @module echarts/util/number
	 */



	    var number = {};

	    var RADIAN_EPSILON = 1e-4;

	    function _trim(str) {
	        return str.replace(/^\s+/, '').replace(/\s+$/, '');
	    }

	    /**
	     * Linear mapping a value from domain to range
	     * @memberOf module:echarts/util/number
	     * @param  {(number|Array.<number>)} val
	     * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	     * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	     * @param  {boolean} clamp
	     * @return {(number|Array.<number>}
	     */
	    number.linearMap = function (val, domain, range, clamp) {
	        var subDomain = domain[1] - domain[0];
	        var subRange = range[1] - range[0];

	        if (subDomain === 0) {
	            return subRange === 0
	                ? range[0]
	                : (range[0] + range[1]) / 2;
	        }

	        // Avoid accuracy problem in edge, such as
	        // 146.39 - 62.83 === 83.55999999999999.
	        // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
	        // It is a little verbose for efficiency considering this method
	        // is a hotspot.
	        if (clamp) {
	            if (subDomain > 0) {
	                if (val <= domain[0]) {
	                    return range[0];
	                }
	                else if (val >= domain[1]) {
	                    return range[1];
	                }
	            }
	            else {
	                if (val >= domain[0]) {
	                    return range[0];
	                }
	                else if (val <= domain[1]) {
	                    return range[1];
	                }
	            }
	        }
	        else {
	            if (val === domain[0]) {
	                return range[0];
	            }
	            if (val === domain[1]) {
	                return range[1];
	            }
	        }

	        return (val - domain[0]) / subDomain * subRange + range[0];
	    };

	    /**
	     * Convert a percent string to absolute number.
	     * Returns NaN if percent is not a valid string or number
	     * @memberOf module:echarts/util/number
	     * @param {string|number} percent
	     * @param {number} all
	     * @return {number}
	     */
	    number.parsePercent = function(percent, all) {
	        switch (percent) {
	            case 'center':
	            case 'middle':
	                percent = '50%';
	                break;
	            case 'left':
	            case 'top':
	                percent = '0%';
	                break;
	            case 'right':
	            case 'bottom':
	                percent = '100%';
	                break;
	        }
	        if (typeof percent === 'string') {
	            if (_trim(percent).match(/%$/)) {
	                return parseFloat(percent) / 100 * all;
	            }

	            return parseFloat(percent);
	        }

	        return percent == null ? NaN : +percent;
	    };

	    /**
	     * Fix rounding error of float numbers
	     * @param {number} x
	     * @return {number}
	     */
	    number.round = function (x, precision) {
	        if (precision == null) {
	            precision = 10;
	        }
	        // Avoid range error
	        precision = Math.min(Math.max(0, precision), 20);
	        return +(+x).toFixed(precision);
	    };

	    number.asc = function (arr) {
	        arr.sort(function (a, b) {
	            return a - b;
	        });
	        return arr;
	    };

	    /**
	     * Get precision
	     * @param {number} val
	     */
	    number.getPrecision = function (val) {
	        val = +val;
	        if (isNaN(val)) {
	            return 0;
	        }
	        // It is much faster than methods converting number to string as follows
	        //      var tmp = val.toString();
	        //      return tmp.length - 1 - tmp.indexOf('.');
	        // especially when precision is low
	        var e = 1;
	        var count = 0;
	        while (Math.round(val * e) / e !== val) {
	            e *= 10;
	            count++;
	        }
	        return count;
	    };

	    number.getPrecisionSafe = function (val) {
	        var str = val.toString();
	        var dotIndex = str.indexOf('.');
	        if (dotIndex < 0) {
	            return 0;
	        }
	        return str.length - 1 - dotIndex;
	    };

	    /**
	     * Minimal dicernible data precisioin according to a single pixel.
	     * @param {Array.<number>} dataExtent
	     * @param {Array.<number>} pixelExtent
	     * @return {number} precision
	     */
	    number.getPixelPrecision = function (dataExtent, pixelExtent) {
	        var log = Math.log;
	        var LN10 = Math.LN10;
	        var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	        var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
	        // toFixed() digits argument must be between 0 and 20.
	        var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
	        return !isFinite(precision) ? 20 : precision;
	    };

	    // Number.MAX_SAFE_INTEGER, ie do not support.
	    number.MAX_SAFE_INTEGER = 9007199254740991;

	    /**
	     * To 0 - 2 * PI, considering negative radian.
	     * @param {number} radian
	     * @return {number}
	     */
	    number.remRadian = function (radian) {
	        var pi2 = Math.PI * 2;
	        return (radian % pi2 + pi2) % pi2;
	    };

	    /**
	     * @param {type} radian
	     * @return {boolean}
	     */
	    number.isRadianAroundZero = function (val) {
	        return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	    };

	    /**
	     * @param {string|Date|number} value
	     * @return {Date} date
	     */
	    number.parseDate = function (value) {
	        if (value instanceof Date) {
	            return value;
	        }
	        else if (typeof value === 'string') {
	            // Treat as ISO format. See issue #3623
	            var ret = new Date(value);
	            if (isNaN(+ret)) {
	                // FIXME new Date('1970-01-01') is UTC, new Date('1970/01/01') is local
	                ret = new Date(new Date(value.replace(/-/g, '/')) - new Date('1970/01/01'));
	            }
	            return ret;
	        }

	        return new Date(Math.round(value));
	    };

	    /**
	     * Quantity of a number. e.g. 0.1, 1, 10, 100
	     * @param  {number} val
	     * @return {number}
	     */
	    number.quantity = function (val) {
	        return Math.pow(10, Math.floor(Math.log(val) / Math.LN10));
	    };

	    // "Nice Numbers for Graph Labels" of Graphic Gems
	    /**
	     * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false
	     * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	     * @param  {number} val
	     * @param  {boolean} round
	     * @return {number}
	     */
	    number.nice = function (val, round) {
	        var exp10 = number.quantity(val);
	        var f = val / exp10; // between 1 and 10
	        var nf;
	        if (round) {
	            if (f < 1.5) { nf = 1; }
	            else if (f < 2.5) { nf = 2; }
	            else if (f < 4) { nf = 3; }
	            else if (f < 7) { nf = 5; }
	            else { nf = 10; }
	        }
	        else {
	            if (f < 1) { nf = 1; }
	            else if (f < 2) { nf = 2; }
	            else if (f < 3) { nf = 3; }
	            else if (f < 5) { nf = 5; }
	            else { nf = 10; }
	        }
	        return nf * exp10;
	    };

	    /**
	     * Order intervals asc, and split them when overlap.
	     * expect(numberUtil.reformIntervals([
	     *     {interval: [18, 62], close: [1, 1]},
	     *     {interval: [-Infinity, -70], close: [0, 0]},
	     *     {interval: [-70, -26], close: [1, 1]},
	     *     {interval: [-26, 18], close: [1, 1]},
	     *     {interval: [62, 150], close: [1, 1]},
	     *     {interval: [106, 150], close: [1, 1]},
	     *     {interval: [150, Infinity], close: [0, 0]}
	     * ])).toEqual([
	     *     {interval: [-Infinity, -70], close: [0, 0]},
	     *     {interval: [-70, -26], close: [1, 1]},
	     *     {interval: [-26, 18], close: [0, 1]},
	     *     {interval: [18, 62], close: [0, 1]},
	     *     {interval: [62, 150], close: [0, 1]},
	     *     {interval: [150, Infinity], close: [0, 0]}
	     * ]);
	     * @param {Array.<Object>} list, where `close` mean open or close
	     *        of the interval, and Infinity can be used.
	     * @return {Array.<Object>} The origin list, which has been reformed.
	     */
	    number.reformIntervals = function (list) {
	        list.sort(function (a, b) {
	            return littleThan(a, b, 0) ? -1 : 1;
	        });

	        var curr = -Infinity;
	        var currClose = 1;
	        for (var i = 0; i < list.length;) {
	            var interval = list[i].interval;
	            var close = list[i].close;

	            for (var lg = 0; lg < 2; lg++) {
	                if (interval[lg] <= curr) {
	                    interval[lg] = curr;
	                    close[lg] = !lg ? 1 - currClose : 1;
	                }
	                curr = interval[lg];
	                currClose = close[lg];
	            }

	            if (interval[0] === interval[1] && close[0] * close[1] !== 1) {
	                list.splice(i, 1);
	            }
	            else {
	                i++;
	            }
	        }

	        return list;

	        function littleThan(a, b, lg) {
	            return a.interval[lg] < b.interval[lg]
	                || (
	                    a.interval[lg] === b.interval[lg]
	                    && (
	                        (a.close[lg] - b.close[lg] === (!lg ? 1 : -1))
	                        || (!lg && littleThan(a, b, 1))
	                    )
	                );
	        }
	    };

	    /**
	     * parseFloat NaNs numeric-cast false positives (null|true|false|"")
	     * ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	     * subtraction forces infinities to NaN
	     * @param {*} v
	     * @return {boolean}
	     */
	    number.isNumeric = function (v) {
	        return v - parseFloat(v) >= 0;
	    };

	    module.exports = number;


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	

	    var textWidthCache = {};
	    var textWidthCacheCounter = 0;
	    var TEXT_CACHE_MAX = 5000;

	    var util = __webpack_require__(243);
	    var BoundingRect = __webpack_require__(248);
	    var retrieve = util.retrieve;

	    function getTextWidth(text, textFont) {
	        var key = text + ':' + textFont;
	        if (textWidthCache[key]) {
	            return textWidthCache[key];
	        }

	        var textLines = (text + '').split('\n');
	        var width = 0;

	        for (var i = 0, l = textLines.length; i < l; i++) {
	            // measureText 可以被覆盖以兼容不支持 Canvas 的环境
	            width = Math.max(textContain.measureText(textLines[i], textFont).width, width);
	        }

	        if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	            textWidthCacheCounter = 0;
	            textWidthCache = {};
	        }
	        textWidthCacheCounter++;
	        textWidthCache[key] = width;

	        return width;
	    }

	    function getTextRect(text, textFont, textAlign, textBaseline) {
	        var textLineLen = ((text || '') + '').split('\n').length;

	        var width = getTextWidth(text, textFont);
	        // FIXME 高度计算比较粗暴
	        var lineHeight = getTextWidth('国', textFont);
	        var height = textLineLen * lineHeight;

	        var rect = new BoundingRect(0, 0, width, height);
	        // Text has a special line height property
	        rect.lineHeight = lineHeight;

	        switch (textBaseline) {
	            case 'bottom':
	            case 'alphabetic':
	                rect.y -= lineHeight;
	                break;
	            case 'middle':
	                rect.y -= lineHeight / 2;
	                break;
	            // case 'hanging':
	            // case 'top':
	        }

	        // FIXME Right to left language
	        switch (textAlign) {
	            case 'end':
	            case 'right':
	                rect.x -= rect.width;
	                break;
	            case 'center':
	                rect.x -= rect.width / 2;
	                break;
	            // case 'start':
	            // case 'left':
	        }

	        return rect;
	    }

	    function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {

	        var x = rect.x;
	        var y = rect.y;

	        var height = rect.height;
	        var width = rect.width;

	        var textHeight = textRect.height;

	        var halfHeight = height / 2 - textHeight / 2;

	        var textAlign = 'left';

	        switch (textPosition) {
	            case 'left':
	                x -= distance;
	                y += halfHeight;
	                textAlign = 'right';
	                break;
	            case 'right':
	                x += distance + width;
	                y += halfHeight;
	                textAlign = 'left';
	                break;
	            case 'top':
	                x += width / 2;
	                y -= distance + textHeight;
	                textAlign = 'center';
	                break;
	            case 'bottom':
	                x += width / 2;
	                y += height + distance;
	                textAlign = 'center';
	                break;
	            case 'inside':
	                x += width / 2;
	                y += halfHeight;
	                textAlign = 'center';
	                break;
	            case 'insideLeft':
	                x += distance;
	                y += halfHeight;
	                textAlign = 'left';
	                break;
	            case 'insideRight':
	                x += width - distance;
	                y += halfHeight;
	                textAlign = 'right';
	                break;
	            case 'insideTop':
	                x += width / 2;
	                y += distance;
	                textAlign = 'center';
	                break;
	            case 'insideBottom':
	                x += width / 2;
	                y += height - textHeight - distance;
	                textAlign = 'center';
	                break;
	            case 'insideTopLeft':
	                x += distance;
	                y += distance;
	                textAlign = 'left';
	                break;
	            case 'insideTopRight':
	                x += width - distance;
	                y += distance;
	                textAlign = 'right';
	                break;
	            case 'insideBottomLeft':
	                x += distance;
	                y += height - textHeight - distance;
	                break;
	            case 'insideBottomRight':
	                x += width - distance;
	                y += height - textHeight - distance;
	                textAlign = 'right';
	                break;
	        }

	        return {
	            x: x,
	            y: y,
	            textAlign: textAlign,
	            textBaseline: 'top'
	        };
	    }

	    /**
	     * Show ellipsis if overflow.
	     *
	     * @param  {string} text
	     * @param  {string} containerWidth
	     * @param  {string} textFont
	     * @param  {number} [ellipsis='...']
	     * @param  {Object} [options]
	     * @param  {number} [options.maxIterations=3]
	     * @param  {number} [options.minChar=0] If truncate result are less
	     *                  then minChar, ellipsis will not show, which is
	     *                  better for user hint in some cases.
	     * @param  {number} [options.placeholder=''] When all truncated, use the placeholder.
	     * @return {string}
	     */
	    function truncateText(text, containerWidth, textFont, ellipsis, options) {
	        if (!containerWidth) {
	            return '';
	        }

	        options = options || {};

	        ellipsis = retrieve(ellipsis, '...');
	        var maxIterations = retrieve(options.maxIterations, 2);
	        var minChar = retrieve(options.minChar, 0);
	        // FIXME
	        // Other languages?
	        var cnCharWidth = getTextWidth('国', textFont);
	        // FIXME
	        // Consider proportional font?
	        var ascCharWidth = getTextWidth('a', textFont);
	        var placeholder = retrieve(options.placeholder, '');

	        // Example 1: minChar: 3, text: 'asdfzxcv', truncate result: 'asdf', but not: 'a...'.
	        // Example 2: minChar: 3, text: '维度', truncate result: '维', but not: '...'.
	        var contentWidth = containerWidth = Math.max(0, containerWidth - 1); // Reserve some gap.
	        for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {
	            contentWidth -= ascCharWidth;
	        }

	        var ellipsisWidth = getTextWidth(ellipsis);
	        if (ellipsisWidth > contentWidth) {
	            ellipsis = '';
	            ellipsisWidth = 0;
	        }

	        contentWidth = containerWidth - ellipsisWidth;

	        var textLines = (text + '').split('\n');

	        for (var i = 0, len = textLines.length; i < len; i++) {
	            var textLine = textLines[i];
	            var lineWidth = getTextWidth(textLine, textFont);

	            if (lineWidth <= containerWidth) {
	                continue;
	            }

	            for (var j = 0;; j++) {
	                if (lineWidth <= contentWidth || j >= maxIterations) {
	                    textLine += ellipsis;
	                    break;
	                }

	                var subLength = j === 0
	                    ? estimateLength(textLine, contentWidth, ascCharWidth, cnCharWidth)
	                    : lineWidth > 0
	                    ? Math.floor(textLine.length * contentWidth / lineWidth)
	                    : 0;

	                textLine = textLine.substr(0, subLength);
	                lineWidth = getTextWidth(textLine, textFont);
	            }

	            if (textLine === '') {
	                textLine = placeholder;
	            }

	            textLines[i] = textLine;
	        }

	        return textLines.join('\n');
	    }

	    function estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
	        var width = 0;
	        var i = 0;
	        for (var len = text.length; i < len && width < contentWidth; i++) {
	            var charCode = text.charCodeAt(i);
	            width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;
	        }
	        return i;
	    }

	    var textContain = {

	        getWidth: getTextWidth,

	        getBoundingRect: getTextRect,

	        adjustTextPositionOnRect: adjustTextPositionOnRect,

	        truncateText: truncateText,

	        measureText: function (text, textFont) {
	            var ctx = util.getContext();
	            ctx.font = textFont || '12px sans-serif';
	            return ctx.measureText(text);
	        }
	    };

	    module.exports = textContain;


/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/core/BoundingRect
	 */


	    var vec2 = __webpack_require__(249);
	    var matrix = __webpack_require__(250);

	    var v2ApplyTransform = vec2.applyTransform;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    /**
	     * @alias module:echarts/core/BoundingRect
	     */
	    function BoundingRect(x, y, width, height) {

	        if (width < 0) {
	            x = x + width;
	            width = -width;
	        }
	        if (height < 0) {
	            y = y + height;
	            height = -height;
	        }

	        /**
	         * @type {number}
	         */
	        this.x = x;
	        /**
	         * @type {number}
	         */
	        this.y = y;
	        /**
	         * @type {number}
	         */
	        this.width = width;
	        /**
	         * @type {number}
	         */
	        this.height = height;
	    }

	    BoundingRect.prototype = {

	        constructor: BoundingRect,

	        /**
	         * @param {module:echarts/core/BoundingRect} other
	         */
	        union: function (other) {
	            var x = mathMin(other.x, this.x);
	            var y = mathMin(other.y, this.y);

	            this.width = mathMax(
	                    other.x + other.width,
	                    this.x + this.width
	                ) - x;
	            this.height = mathMax(
	                    other.y + other.height,
	                    this.y + this.height
	                ) - y;
	            this.x = x;
	            this.y = y;
	        },

	        /**
	         * @param {Array.<number>} m
	         * @methods
	         */
	        applyTransform: (function () {
	            var lt = [];
	            var rb = [];
	            var lb = [];
	            var rt = [];
	            return function (m) {
	                // In case usage like this
	                // el.getBoundingRect().applyTransform(el.transform)
	                // And element has no transform
	                if (!m) {
	                    return;
	                }
	                lt[0] = lb[0] = this.x;
	                lt[1] = rt[1] = this.y;
	                rb[0] = rt[0] = this.x + this.width;
	                rb[1] = lb[1] = this.y + this.height;

	                v2ApplyTransform(lt, lt, m);
	                v2ApplyTransform(rb, rb, m);
	                v2ApplyTransform(lb, lb, m);
	                v2ApplyTransform(rt, rt, m);

	                this.x = mathMin(lt[0], rb[0], lb[0], rt[0]);
	                this.y = mathMin(lt[1], rb[1], lb[1], rt[1]);
	                var maxX = mathMax(lt[0], rb[0], lb[0], rt[0]);
	                var maxY = mathMax(lt[1], rb[1], lb[1], rt[1]);
	                this.width = maxX - this.x;
	                this.height = maxY - this.y;
	            };
	        })(),

	        /**
	         * Calculate matrix of transforming from self to target rect
	         * @param  {module:zrender/core/BoundingRect} b
	         * @return {Array.<number>}
	         */
	        calculateTransform: function (b) {
	            var a = this;
	            var sx = b.width / a.width;
	            var sy = b.height / a.height;

	            var m = matrix.create();

	            // 矩阵右乘
	            matrix.translate(m, m, [-a.x, -a.y]);
	            matrix.scale(m, m, [sx, sy]);
	            matrix.translate(m, m, [b.x, b.y]);

	            return m;
	        },

	        /**
	         * @param {(module:echarts/core/BoundingRect|Object)} b
	         * @return {boolean}
	         */
	        intersect: function (b) {
	            if (!b) {
	                return false;
	            }

	            if (!(b instanceof BoundingRect)) {
	                // Normalize negative width/height.
	                b = BoundingRect.create(b);
	            }

	            var a = this;
	            var ax0 = a.x;
	            var ax1 = a.x + a.width;
	            var ay0 = a.y;
	            var ay1 = a.y + a.height;

	            var bx0 = b.x;
	            var bx1 = b.x + b.width;
	            var by0 = b.y;
	            var by1 = b.y + b.height;

	            return ! (ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	        },

	        contain: function (x, y) {
	            var rect = this;
	            return x >= rect.x
	                && x <= (rect.x + rect.width)
	                && y >= rect.y
	                && y <= (rect.y + rect.height);
	        },

	        /**
	         * @return {module:echarts/core/BoundingRect}
	         */
	        clone: function () {
	            return new BoundingRect(this.x, this.y, this.width, this.height);
	        },

	        /**
	         * Copy from another rect
	         */
	        copy: function (other) {
	            this.x = other.x;
	            this.y = other.y;
	            this.width = other.width;
	            this.height = other.height;
	        },

	        plain: function () {
	            return {
	                x: this.x,
	                y: this.y,
	                width: this.width,
	                height: this.height
	            };
	        }
	    };

	    /**
	     * @param {Object|module:zrender/core/BoundingRect} rect
	     * @param {number} rect.x
	     * @param {number} rect.y
	     * @param {number} rect.width
	     * @param {number} rect.height
	     * @return {module:zrender/core/BoundingRect}
	     */
	    BoundingRect.create = function (rect) {
	        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
	    };

	    module.exports = BoundingRect;


/***/ },
/* 249 */
/***/ function(module, exports) {

	
	    var ArrayCtor = typeof Float32Array === 'undefined'
	        ? Array
	        : Float32Array;

	    /**
	     * @typedef {Float32Array|Array.<number>} Vector2
	     */
	    /**
	     * 二维向量类
	     * @exports zrender/tool/vector
	     */
	    var vector = {
	        /**
	         * 创建一个向量
	         * @param {number} [x=0]
	         * @param {number} [y=0]
	         * @return {Vector2}
	         */
	        create: function (x, y) {
	            var out = new ArrayCtor(2);
	            if (x == null) {
	                x = 0;
	            }
	            if (y == null) {
	                y = 0;
	            }
	            out[0] = x;
	            out[1] = y;
	            return out;
	        },

	        /**
	         * 复制向量数据
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @return {Vector2}
	         */
	        copy: function (out, v) {
	            out[0] = v[0];
	            out[1] = v[1];
	            return out;
	        },

	        /**
	         * 克隆一个向量
	         * @param {Vector2} v
	         * @return {Vector2}
	         */
	        clone: function (v) {
	            var out = new ArrayCtor(2);
	            out[0] = v[0];
	            out[1] = v[1];
	            return out;
	        },

	        /**
	         * 设置向量的两个项
	         * @param {Vector2} out
	         * @param {number} a
	         * @param {number} b
	         * @return {Vector2} 结果
	         */
	        set: function (out, a, b) {
	            out[0] = a;
	            out[1] = b;
	            return out;
	        },

	        /**
	         * 向量相加
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        add: function (out, v1, v2) {
	            out[0] = v1[0] + v2[0];
	            out[1] = v1[1] + v2[1];
	            return out;
	        },

	        /**
	         * 向量缩放后相加
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @param {number} a
	         */
	        scaleAndAdd: function (out, v1, v2, a) {
	            out[0] = v1[0] + v2[0] * a;
	            out[1] = v1[1] + v2[1] * a;
	            return out;
	        },

	        /**
	         * 向量相减
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        sub: function (out, v1, v2) {
	            out[0] = v1[0] - v2[0];
	            out[1] = v1[1] - v2[1];
	            return out;
	        },

	        /**
	         * 向量长度
	         * @param {Vector2} v
	         * @return {number}
	         */
	        len: function (v) {
	            return Math.sqrt(this.lenSquare(v));
	        },

	        /**
	         * 向量长度平方
	         * @param {Vector2} v
	         * @return {number}
	         */
	        lenSquare: function (v) {
	            return v[0] * v[0] + v[1] * v[1];
	        },

	        /**
	         * 向量乘法
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        mul: function (out, v1, v2) {
	            out[0] = v1[0] * v2[0];
	            out[1] = v1[1] * v2[1];
	            return out;
	        },

	        /**
	         * 向量除法
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         */
	        div: function (out, v1, v2) {
	            out[0] = v1[0] / v2[0];
	            out[1] = v1[1] / v2[1];
	            return out;
	        },

	        /**
	         * 向量点乘
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        dot: function (v1, v2) {
	            return v1[0] * v2[0] + v1[1] * v2[1];
	        },

	        /**
	         * 向量缩放
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @param {number} s
	         */
	        scale: function (out, v, s) {
	            out[0] = v[0] * s;
	            out[1] = v[1] * s;
	            return out;
	        },

	        /**
	         * 向量归一化
	         * @param {Vector2} out
	         * @param {Vector2} v
	         */
	        normalize: function (out, v) {
	            var d = vector.len(v);
	            if (d === 0) {
	                out[0] = 0;
	                out[1] = 0;
	            }
	            else {
	                out[0] = v[0] / d;
	                out[1] = v[1] / d;
	            }
	            return out;
	        },

	        /**
	         * 计算向量间距离
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        distance: function (v1, v2) {
	            return Math.sqrt(
	                (v1[0] - v2[0]) * (v1[0] - v2[0])
	                + (v1[1] - v2[1]) * (v1[1] - v2[1])
	            );
	        },

	        /**
	         * 向量距离平方
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @return {number}
	         */
	        distanceSquare: function (v1, v2) {
	            return (v1[0] - v2[0]) * (v1[0] - v2[0])
	                + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	        },

	        /**
	         * 求负向量
	         * @param {Vector2} out
	         * @param {Vector2} v
	         */
	        negate: function (out, v) {
	            out[0] = -v[0];
	            out[1] = -v[1];
	            return out;
	        },

	        /**
	         * 插值两个点
	         * @param {Vector2} out
	         * @param {Vector2} v1
	         * @param {Vector2} v2
	         * @param {number} t
	         */
	        lerp: function (out, v1, v2, t) {
	            out[0] = v1[0] + t * (v2[0] - v1[0]);
	            out[1] = v1[1] + t * (v2[1] - v1[1]);
	            return out;
	        },

	        /**
	         * 矩阵左乘向量
	         * @param {Vector2} out
	         * @param {Vector2} v
	         * @param {Vector2} m
	         */
	        applyTransform: function (out, v, m) {
	            var x = v[0];
	            var y = v[1];
	            out[0] = m[0] * x + m[2] * y + m[4];
	            out[1] = m[1] * x + m[3] * y + m[5];
	            return out;
	        },
	        /**
	         * 求两个向量最小值
	         * @param  {Vector2} out
	         * @param  {Vector2} v1
	         * @param  {Vector2} v2
	         */
	        min: function (out, v1, v2) {
	            out[0] = Math.min(v1[0], v2[0]);
	            out[1] = Math.min(v1[1], v2[1]);
	            return out;
	        },
	        /**
	         * 求两个向量最大值
	         * @param  {Vector2} out
	         * @param  {Vector2} v1
	         * @param  {Vector2} v2
	         */
	        max: function (out, v1, v2) {
	            out[0] = Math.max(v1[0], v2[0]);
	            out[1] = Math.max(v1[1], v2[1]);
	            return out;
	        }
	    };

	    vector.length = vector.len;
	    vector.lengthSquare = vector.lenSquare;
	    vector.dist = vector.distance;
	    vector.distSquare = vector.distanceSquare;

	    module.exports = vector;



/***/ },
/* 250 */
/***/ function(module, exports) {

	
	    var ArrayCtor = typeof Float32Array === 'undefined'
	        ? Array
	        : Float32Array;
	    /**
	     * 3x2矩阵操作类
	     * @exports zrender/tool/matrix
	     */
	    var matrix = {
	        /**
	         * 创建一个单位矩阵
	         * @return {Float32Array|Array.<number>}
	         */
	        create : function() {
	            var out = new ArrayCtor(6);
	            matrix.identity(out);

	            return out;
	        },
	        /**
	         * 设置矩阵为单位矩阵
	         * @param {Float32Array|Array.<number>} out
	         */
	        identity : function(out) {
	            out[0] = 1;
	            out[1] = 0;
	            out[2] = 0;
	            out[3] = 1;
	            out[4] = 0;
	            out[5] = 0;
	            return out;
	        },
	        /**
	         * 复制矩阵
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} m
	         */
	        copy: function(out, m) {
	            out[0] = m[0];
	            out[1] = m[1];
	            out[2] = m[2];
	            out[3] = m[3];
	            out[4] = m[4];
	            out[5] = m[5];
	            return out;
	        },
	        /**
	         * 矩阵相乘
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} m1
	         * @param {Float32Array|Array.<number>} m2
	         */
	        mul : function (out, m1, m2) {
	            // Consider matrix.mul(m, m2, m);
	            // where out is the same as m2.
	            // So use temp variable to escape error.
	            var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	            var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	            var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	            var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	            var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	            var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	            out[0] = out0;
	            out[1] = out1;
	            out[2] = out2;
	            out[3] = out3;
	            out[4] = out4;
	            out[5] = out5;
	            return out;
	        },
	        /**
	         * 平移变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {Float32Array|Array.<number>} v
	         */
	        translate : function(out, a, v) {
	            out[0] = a[0];
	            out[1] = a[1];
	            out[2] = a[2];
	            out[3] = a[3];
	            out[4] = a[4] + v[0];
	            out[5] = a[5] + v[1];
	            return out;
	        },
	        /**
	         * 旋转变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {number} rad
	         */
	        rotate : function(out, a, rad) {
	            var aa = a[0];
	            var ac = a[2];
	            var atx = a[4];
	            var ab = a[1];
	            var ad = a[3];
	            var aty = a[5];
	            var st = Math.sin(rad);
	            var ct = Math.cos(rad);

	            out[0] = aa * ct + ab * st;
	            out[1] = -aa * st + ab * ct;
	            out[2] = ac * ct + ad * st;
	            out[3] = -ac * st + ct * ad;
	            out[4] = ct * atx + st * aty;
	            out[5] = ct * aty - st * atx;
	            return out;
	        },
	        /**
	         * 缩放变换
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         * @param {Float32Array|Array.<number>} v
	         */
	        scale : function(out, a, v) {
	            var vx = v[0];
	            var vy = v[1];
	            out[0] = a[0] * vx;
	            out[1] = a[1] * vy;
	            out[2] = a[2] * vx;
	            out[3] = a[3] * vy;
	            out[4] = a[4] * vx;
	            out[5] = a[5] * vy;
	            return out;
	        },
	        /**
	         * 求逆矩阵
	         * @param {Float32Array|Array.<number>} out
	         * @param {Float32Array|Array.<number>} a
	         */
	        invert : function(out, a) {

	            var aa = a[0];
	            var ac = a[2];
	            var atx = a[4];
	            var ab = a[1];
	            var ad = a[3];
	            var aty = a[5];

	            var det = aa * ad - ab * ac;
	            if (!det) {
	                return null;
	            }
	            det = 1.0 / det;

	            out[0] = ad * det;
	            out[1] = -ab * det;
	            out[2] = -ac * det;
	            out[3] = aa * det;
	            out[4] = (ac * aty - ad * atx) * det;
	            out[5] = (ab * atx - aa * aty) * det;
	            return out;
	        }
	    };

	    module.exports = matrix;



/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/model/Model
	 */


	    var zrUtil = __webpack_require__(243);
	    var clazzUtil = __webpack_require__(252);
	    var env = __webpack_require__(241);

	    /**
	     * @alias module:echarts/model/Model
	     * @constructor
	     * @param {Object} option
	     * @param {module:echarts/model/Model} [parentModel]
	     * @param {module:echarts/model/Global} [ecModel]
	     */
	    function Model(option, parentModel, ecModel) {
	        /**
	         * @type {module:echarts/model/Model}
	         * @readOnly
	         */
	        this.parentModel = parentModel;

	        /**
	         * @type {module:echarts/model/Global}
	         * @readOnly
	         */
	        this.ecModel = ecModel;

	        /**
	         * @type {Object}
	         * @protected
	         */
	        this.option = option;

	        // Simple optimization
	        // if (this.init) {
	        //     if (arguments.length <= 4) {
	        //         this.init(option, parentModel, ecModel, extraOpt);
	        //     }
	        //     else {
	        //         this.init.apply(this, arguments);
	        //     }
	        // }
	    }

	    Model.prototype = {

	        constructor: Model,

	        /**
	         * Model 的初始化函数
	         * @param {Object} option
	         */
	        init: null,

	        /**
	         * 从新的 Option merge
	         */
	        mergeOption: function (option) {
	            zrUtil.merge(this.option, option, true);
	        },

	        /**
	         * @param {string|Array.<string>} path
	         * @param {boolean} [ignoreParent=false]
	         * @return {*}
	         */
	        get: function (path, ignoreParent) {
	            if (path == null) {
	                return this.option;
	            }

	            return doGet(
	                this.option,
	                this.parsePath(path),
	                !ignoreParent && getParent(this, path)
	            );
	        },

	        /**
	         * @param {string} key
	         * @param {boolean} [ignoreParent=false]
	         * @return {*}
	         */
	        getShallow: function (key, ignoreParent) {
	            var option = this.option;

	            var val = option == null ? option : option[key];
	            var parentModel = !ignoreParent && getParent(this, key);
	            if (val == null && parentModel) {
	                val = parentModel.getShallow(key);
	            }
	            return val;
	        },

	        /**
	         * @param {string|Array.<string>} path
	         * @param {module:echarts/model/Model} [parentModel]
	         * @return {module:echarts/model/Model}
	         */
	        getModel: function (path, parentModel) {
	            var obj = path == null
	                ? this.option
	                : doGet(this.option, path = this.parsePath(path));

	            var thisParentModel;
	            parentModel = parentModel || (
	                (thisParentModel = getParent(this, path))
	                    && thisParentModel.getModel(path)
	            );

	            return new Model(obj, parentModel, this.ecModel);
	        },

	        /**
	         * If model has option
	         */
	        isEmpty: function () {
	            return this.option == null;
	        },

	        restoreData: function () {},

	        // Pending
	        clone: function () {
	            var Ctor = this.constructor;
	            return new Ctor(zrUtil.clone(this.option));
	        },

	        setReadOnly: function (properties) {
	            clazzUtil.setReadOnly(this, properties);
	        },

	        // If path is null/undefined, return null/undefined.
	        parsePath: function(path) {
	            if (typeof path === 'string') {
	                path = path.split('.');
	            }
	            return path;
	        },

	        /**
	         * @param {Function} getParentMethod
	         *        param {Array.<string>|string} path
	         *        return {module:echarts/model/Model}
	         */
	        customizeGetParent: function (getParentMethod) {
	            clazzUtil.set(this, 'getParent', getParentMethod);
	        },

	        isAnimationEnabled: function () {
	            if (!env.node) {
	                if (this.option.animation != null) {
	                    return !!this.option.animation;
	                }
	                else if (this.parentModel) {
	                    return this.parentModel.isAnimationEnabled();
	                }
	            }
	        }
	    };

	    function doGet(obj, pathArr, parentModel) {
	        for (var i = 0; i < pathArr.length; i++) {
	            // Ignore empty
	            if (!pathArr[i]) {
	                continue;
	            }
	            // obj could be number/string/... (like 0)
	            obj = (obj && typeof obj === 'object') ? obj[pathArr[i]] : null;
	            if (obj == null) {
	                break;
	            }
	        }
	        if (obj == null && parentModel) {
	            obj = parentModel.get(pathArr);
	        }
	        return obj;
	    }

	    function getParent(model, path) {
	        var getParentMethod = clazzUtil.get(model, 'getParent');
	        return getParentMethod ? getParentMethod.call(model, path) : model.parentModel;
	    }

	    // Enable Model.extend.
	    clazzUtil.enableClassExtend(Model);

	    var mixin = zrUtil.mixin;
	    mixin(Model, __webpack_require__(253));
	    mixin(Model, __webpack_require__(255));
	    mixin(Model, __webpack_require__(256));
	    mixin(Model, __webpack_require__(257));

	    module.exports = Model;


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    var clazz = {};

	    var TYPE_DELIMITER = '.';
	    var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
	    var MEMBER_PRIFIX = '\0ec_\0';

	    /**
	     * Hide private class member.
	     * The same behavior as `host[name] = value;` (can be right-value)
	     * @public
	     */
	    clazz.set = function (host, name, value) {
	        return (host[MEMBER_PRIFIX + name] = value);
	    };

	    /**
	     * Hide private class member.
	     * The same behavior as `host[name];`
	     * @public
	     */
	    clazz.get = function (host, name) {
	        return host[MEMBER_PRIFIX + name];
	    };

	    /**
	     * For hidden private class member.
	     * The same behavior as `host.hasOwnProperty(name);`
	     * @public
	     */
	    clazz.hasOwn = function (host, name) {
	        return host.hasOwnProperty(MEMBER_PRIFIX + name);
	    };

	    /**
	     * @public
	     */
	    var parseClassType = clazz.parseClassType = function (componentType) {
	        var ret = {main: '', sub: ''};
	        if (componentType) {
	            componentType = componentType.split(TYPE_DELIMITER);
	            ret.main = componentType[0] || '';
	            ret.sub = componentType[1] || '';
	        }
	        return ret;
	    };

	    /**
	     * @public
	     */
	    function checkClassType(componentType) {
	        zrUtil.assert(
	            /^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType),
	            'componentType "' + componentType + '" illegal'
	        );
	    }

	    /**
	     * @public
	     */
	    clazz.enableClassExtend = function (RootClass, mandatoryMethods) {

	        RootClass.$constructor = RootClass;
	        RootClass.extend = function (proto) {

	            if (__DEV__) {
	                zrUtil.each(mandatoryMethods, function (method) {
	                    if (!proto[method]) {
	                        console.warn(
	                            'Method `' + method + '` should be implemented'
	                            + (proto.type ? ' in ' + proto.type : '') + '.'
	                        );
	                    }
	                });
	            }

	            var superClass = this;
	            var ExtendedClass = function () {
	                if (!proto.$constructor) {
	                    superClass.apply(this, arguments);
	                }
	                else {
	                    proto.$constructor.apply(this, arguments);
	                }
	            };

	            zrUtil.extend(ExtendedClass.prototype, proto);

	            ExtendedClass.extend = this.extend;
	            ExtendedClass.superCall = superCall;
	            ExtendedClass.superApply = superApply;
	            zrUtil.inherits(ExtendedClass, this);
	            ExtendedClass.superClass = superClass;

	            return ExtendedClass;
	        };
	    };

	    // superCall should have class info, which can not be fetch from 'this'.
	    // Consider this case:
	    // class A has method f,
	    // class B inherits class A, overrides method f, f call superApply('f'),
	    // class C inherits class B, do not overrides method f,
	    // then when method of class C is called, dead loop occured.
	    function superCall(context, methodName) {
	        var args = zrUtil.slice(arguments, 2);
	        return this.superClass.prototype[methodName].apply(context, args);
	    }

	    function superApply(context, methodName, args) {
	        return this.superClass.prototype[methodName].apply(context, args);
	    }

	    /**
	     * @param {Object} entity
	     * @param {Object} options
	     * @param {boolean} [options.registerWhenExtend]
	     * @public
	     */
	    clazz.enableClassManagement = function (entity, options) {
	        options = options || {};

	        /**
	         * Component model classes
	         * key: componentType,
	         * value:
	         *     componentClass, when componentType is 'xxx'
	         *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
	         * @type {Object}
	         */
	        var storage = {};

	        entity.registerClass = function (Clazz, componentType) {
	            if (componentType) {
	                checkClassType(componentType);
	                componentType = parseClassType(componentType);

	                if (!componentType.sub) {
	                    if (__DEV__) {
	                        if (storage[componentType.main]) {
	                            console.warn(componentType.main + ' exists.');
	                        }
	                    }
	                    storage[componentType.main] = Clazz;
	                }
	                else if (componentType.sub !== IS_CONTAINER) {
	                    var container = makeContainer(componentType);
	                    container[componentType.sub] = Clazz;
	                }
	            }
	            return Clazz;
	        };

	        entity.getClass = function (componentMainType, subType, throwWhenNotFound) {
	            var Clazz = storage[componentMainType];

	            if (Clazz && Clazz[IS_CONTAINER]) {
	                Clazz = subType ? Clazz[subType] : null;
	            }

	            if (throwWhenNotFound && !Clazz) {
	                throw new Error(
	                    !subType
	                        ? componentMainType + '.' + 'type should be specified.'
	                        : 'Component ' + componentMainType + '.' + (subType || '') + ' not exists. Load it first.'
	                );
	            }

	            return Clazz;
	        };

	        entity.getClassesByMainType = function (componentType) {
	            componentType = parseClassType(componentType);

	            var result = [];
	            var obj = storage[componentType.main];

	            if (obj && obj[IS_CONTAINER]) {
	                zrUtil.each(obj, function (o, type) {
	                    type !== IS_CONTAINER && result.push(o);
	                });
	            }
	            else {
	                result.push(obj);
	            }

	            return result;
	        };

	        entity.hasClass = function (componentType) {
	            // Just consider componentType.main.
	            componentType = parseClassType(componentType);
	            return !!storage[componentType.main];
	        };

	        /**
	         * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
	         */
	        entity.getAllClassMainTypes = function () {
	            var types = [];
	            zrUtil.each(storage, function (obj, type) {
	                types.push(type);
	            });
	            return types;
	        };

	        /**
	         * If a main type is container and has sub types
	         * @param  {string}  mainType
	         * @return {boolean}
	         */
	        entity.hasSubTypes = function (componentType) {
	            componentType = parseClassType(componentType);
	            var obj = storage[componentType.main];
	            return obj && obj[IS_CONTAINER];
	        };

	        entity.parseClassType = parseClassType;

	        function makeContainer(componentType) {
	            var container = storage[componentType.main];
	            if (!container || !container[IS_CONTAINER]) {
	                container = storage[componentType.main] = {};
	                container[IS_CONTAINER] = true;
	            }
	            return container;
	        }

	        if (options.registerWhenExtend) {
	            var originalExtend = entity.extend;
	            if (originalExtend) {
	                entity.extend = function (proto) {
	                    var ExtendedClass = originalExtend.call(this, proto);
	                    return entity.registerClass(ExtendedClass, proto.type);
	                };
	            }
	        }

	        return entity;
	    };

	    /**
	     * @param {string|Array.<string>} properties
	     */
	    clazz.setReadOnly = function (obj, properties) {
	        // FIXME It seems broken in IE8 simulation of IE11
	        // if (!zrUtil.isArray(properties)) {
	        //     properties = properties != null ? [properties] : [];
	        // }
	        // zrUtil.each(properties, function (prop) {
	        //     var value = obj[prop];

	        //     Object.defineProperty
	        //         && Object.defineProperty(obj, prop, {
	        //             value: value, writable: false
	        //         });
	        //     zrUtil.isArray(obj[prop])
	        //         && Object.freeze
	        //         && Object.freeze(obj[prop]);
	        // });
	    };

	    module.exports = clazz;


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	
	    var getLineStyle = __webpack_require__(254)(
	        [
	            ['lineWidth', 'width'],
	            ['stroke', 'color'],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor']
	        ]
	    );
	    module.exports = {
	        getLineStyle: function (excludes) {
	            var style = getLineStyle.call(this, excludes);
	            var lineDash = this.getLineDash(style.lineWidth);
	            lineDash && (style.lineDash = lineDash);
	            return style;
	        },

	        getLineDash: function (lineWidth) {
	            if (lineWidth == null) {
	                lineWidth = 1;
	            }
	            var lineType = this.get('type');
	            var dotSize = Math.max(lineWidth, 2);
	            var dashSize = lineWidth * 4;
	            return (lineType === 'solid' || lineType == null) ? null
	                : (lineType === 'dashed' ? [dashSize, dashSize] : [dotSize, dotSize]);
	        }
	    };


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Parse shadow style
	// TODO Only shallow path support

	    var zrUtil = __webpack_require__(243);

	    module.exports = function (properties) {
	        // Normalize
	        for (var i = 0; i < properties.length; i++) {
	            if (!properties[i][1]) {
	               properties[i][1] = properties[i][0];
	            }
	        }
	        return function (excludes) {
	            var style = {};
	            for (var i = 0; i < properties.length; i++) {
	                var propName = properties[i][1];
	                if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {
	                    continue;
	                }
	                var val = this.getShallow(propName);
	                if (val != null) {
	                    style[properties[i][0]] = val;
	                }
	            }
	            return style;
	        };
	    };


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	
	    module.exports = {
	        getAreaStyle: __webpack_require__(254)(
	            [
	                ['fill', 'color'],
	                ['shadowBlur'],
	                ['shadowOffsetX'],
	                ['shadowOffsetY'],
	                ['opacity'],
	                ['shadowColor']
	            ]
	        )
	    };


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	

	    var textContain = __webpack_require__(247);

	    function getShallow(model, path) {
	        return model && model.getShallow(path);
	    }

	    module.exports = {
	        /**
	         * Get color property or get color from option.textStyle.color
	         * @return {string}
	         */
	        getTextColor: function () {
	            var ecModel = this.ecModel;
	            return this.getShallow('color')
	                || (ecModel && ecModel.get('textStyle.color'));
	        },

	        /**
	         * Create font string from fontStyle, fontWeight, fontSize, fontFamily
	         * @return {string}
	         */
	        getFont: function () {
	            var ecModel = this.ecModel;
	            var gTextStyleModel = ecModel && ecModel.getModel('textStyle');
	            return [
	                // FIXME in node-canvas fontWeight is before fontStyle
	                this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'),
	                this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'),
	                (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px',
	                this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'
	            ].join(' ');
	        },

	        getTextRect: function (text) {
	            return textContain.getBoundingRect(
	                text,
	                this.getFont(),
	                this.getShallow('align'),
	                this.getShallow('baseline')
	            );
	        },

	        truncateText: function (text, containerWidth, ellipsis, options) {
	            return textContain.truncateText(
	                text, containerWidth, this.getFont(), ellipsis, options
	            );
	        }
	    };


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	
	    var getItemStyle = __webpack_require__(254)(
	        [
	            ['fill', 'color'],
	            ['stroke', 'borderColor'],
	            ['lineWidth', 'borderWidth'],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor'],
	            ['textPosition'],
	            ['textAlign']
	        ]
	    );
	    module.exports = {
	        getItemStyle: function (excludes) {
	            var style = getItemStyle.call(this, excludes);
	            var lineDash = this.getBorderLineDash();
	            lineDash && (style.lineDash = lineDash);
	            return style;
	        },

	        getBorderLineDash: function () {
	            var lineType = this.get('borderType');
	            return (lineType === 'solid' || lineType == null) ? null
	                : (lineType === 'dashed' ? [5, 5] : [1, 1]);
	        }
	    };


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Component model
	 *
	 * @module echarts/model/Component
	 */


	    var Model = __webpack_require__(251);
	    var zrUtil = __webpack_require__(243);
	    var arrayPush = Array.prototype.push;
	    var componentUtil = __webpack_require__(259);
	    var clazzUtil = __webpack_require__(252);
	    var layout = __webpack_require__(260);

	    /**
	     * @alias module:echarts/model/Component
	     * @constructor
	     * @param {Object} option
	     * @param {module:echarts/model/Model} parentModel
	     * @param {module:echarts/model/Model} ecModel
	     */
	    var ComponentModel = Model.extend({

	        type: 'component',

	        /**
	         * @readOnly
	         * @type {string}
	         */
	        id: '',

	        /**
	         * @readOnly
	         */
	        name: '',

	        /**
	         * @readOnly
	         * @type {string}
	         */
	        mainType: '',

	        /**
	         * @readOnly
	         * @type {string}
	         */
	        subType: '',

	        /**
	         * @readOnly
	         * @type {number}
	         */
	        componentIndex: 0,

	        /**
	         * @type {Object}
	         * @protected
	         */
	        defaultOption: null,

	        /**
	         * @type {module:echarts/model/Global}
	         * @readOnly
	         */
	        ecModel: null,

	        /**
	         * key: componentType
	         * value:  Component model list, can not be null.
	         * @type {Object.<string, Array.<module:echarts/model/Model>>}
	         * @readOnly
	         */
	        dependentModels: [],

	        /**
	         * @type {string}
	         * @readOnly
	         */
	        uid: null,

	        /**
	         * Support merge layout params.
	         * Only support 'box' now (left/right/top/bottom/width/height).
	         * @type {string|Object} Object can be {ignoreSize: true}
	         * @readOnly
	         */
	        layoutMode: null,

	        $constructor: function (option, parentModel, ecModel, extraOpt) {
	            Model.call(this, option, parentModel, ecModel, extraOpt);

	            this.uid = componentUtil.getUID('componentModel');
	        },


	        init: function (option, parentModel, ecModel, extraOpt) {
	            this.mergeDefaultAndTheme(option, ecModel);
	        },

	        mergeDefaultAndTheme: function (option, ecModel) {
	            var layoutMode = this.layoutMode;
	            var inputPositionParams = layoutMode
	                ? layout.getLayoutParams(option) : {};

	            var themeModel = ecModel.getTheme();
	            zrUtil.merge(option, themeModel.get(this.mainType));
	            zrUtil.merge(option, this.getDefaultOption());

	            if (layoutMode) {
	                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	            }
	        },

	        mergeOption: function (option, extraOpt) {
	            zrUtil.merge(this.option, option, true);

	            var layoutMode = this.layoutMode;
	            if (layoutMode) {
	                layout.mergeLayoutParam(this.option, option, layoutMode);
	            }
	        },

	        // Hooker after init or mergeOption
	        optionUpdated: function (newCptOption, isInit) {},

	        getDefaultOption: function () {
	            if (!clazzUtil.hasOwn(this, '__defaultOption')) {
	                var optList = [];
	                var Class = this.constructor;
	                while (Class) {
	                    var opt = Class.prototype.defaultOption;
	                    opt && optList.push(opt);
	                    Class = Class.superClass;
	                }

	                var defaultOption = {};
	                for (var i = optList.length - 1; i >= 0; i--) {
	                    defaultOption = zrUtil.merge(defaultOption, optList[i], true);
	                }
	                clazzUtil.set(this, '__defaultOption', defaultOption);
	            }
	            return clazzUtil.get(this, '__defaultOption');
	        },

	        getReferringComponents: function (mainType) {
	            return this.ecModel.queryComponents({
	                mainType: mainType,
	                index: this.get(mainType + 'Index', true),
	                id: this.get(mainType + 'Id', true)
	            });
	        }

	    });

	    // Reset ComponentModel.extend, add preConstruct.
	    // clazzUtil.enableClassExtend(
	    //     ComponentModel,
	    //     function (option, parentModel, ecModel, extraOpt) {
	    //         // Set dependentModels, componentIndex, name, id, mainType, subType.
	    //         zrUtil.extend(this, extraOpt);

	    //         this.uid = componentUtil.getUID('componentModel');

	    //         // this.setReadOnly([
	    //         //     'type', 'id', 'uid', 'name', 'mainType', 'subType',
	    //         //     'dependentModels', 'componentIndex'
	    //         // ]);
	    //     }
	    // );

	    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(
	        ComponentModel, {registerWhenExtend: true}
	    );
	    componentUtil.enableSubTypeDefaulter(ComponentModel);

	    // Add capability of ComponentModel.topologicalTravel.
	    componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);

	    function getDependencies(componentType) {
	        var deps = [];
	        zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
	            arrayPush.apply(deps, Clazz.prototype.dependencies || []);
	        });
	        // Ensure main type
	        return zrUtil.map(deps, function (type) {
	            return clazzUtil.parseClassType(type).main;
	        });
	    }

	    zrUtil.mixin(ComponentModel, __webpack_require__(261));

	    module.exports = ComponentModel;


/***/ },
/* 259 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var clazz = __webpack_require__(252);

	    var parseClassType = clazz.parseClassType;

	    var base = 0;

	    var componentUtil = {};

	    var DELIMITER = '_';

	    /**
	     * @public
	     * @param {string} type
	     * @return {string}
	     */
	    componentUtil.getUID = function (type) {
	        // Considering the case of crossing js context,
	        // use Math.random to make id as unique as possible.
	        return [(type || ''), base++, Math.random()].join(DELIMITER);
	    };

	    /**
	     * @inner
	     */
	    componentUtil.enableSubTypeDefaulter = function (entity) {

	        var subTypeDefaulters = {};

	        entity.registerSubTypeDefaulter = function (componentType, defaulter) {
	            componentType = parseClassType(componentType);
	            subTypeDefaulters[componentType.main] = defaulter;
	        };

	        entity.determineSubType = function (componentType, option) {
	            var type = option.type;
	            if (!type) {
	                var componentTypeMain = parseClassType(componentType).main;
	                if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
	                    type = subTypeDefaulters[componentTypeMain](option);
	                }
	            }
	            return type;
	        };

	        return entity;
	    };

	    /**
	     * Topological travel on Activity Network (Activity On Vertices).
	     * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
	     *
	     * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
	     *
	     * If there is circle dependencey, Error will be thrown.
	     *
	     */
	    componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {

	        /**
	         * @public
	         * @param {Array.<string>} targetNameList Target Component type list.
	         *                                           Can be ['aa', 'bb', 'aa.xx']
	         * @param {Array.<string>} fullNameList By which we can build dependency graph.
	         * @param {Function} callback Params: componentType, dependencies.
	         * @param {Object} context Scope of callback.
	         */
	        entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
	            if (!targetNameList.length) {
	                return;
	            }

	            var result = makeDepndencyGraph(fullNameList);
	            var graph = result.graph;
	            var stack = result.noEntryList;

	            var targetNameSet = {};
	            zrUtil.each(targetNameList, function (name) {
	                targetNameSet[name] = true;
	            });

	            while (stack.length) {
	                var currComponentType = stack.pop();
	                var currVertex = graph[currComponentType];
	                var isInTargetNameSet = !!targetNameSet[currComponentType];
	                if (isInTargetNameSet) {
	                    callback.call(context, currComponentType, currVertex.originalDeps.slice());
	                    delete targetNameSet[currComponentType];
	                }
	                zrUtil.each(
	                    currVertex.successor,
	                    isInTargetNameSet ? removeEdgeAndAdd : removeEdge
	                );
	            }

	            zrUtil.each(targetNameSet, function () {
	                throw new Error('Circle dependency may exists');
	            });

	            function removeEdge(succComponentType) {
	                graph[succComponentType].entryCount--;
	                if (graph[succComponentType].entryCount === 0) {
	                    stack.push(succComponentType);
	                }
	            }

	            // Consider this case: legend depends on series, and we call
	            // chart.setOption({series: [...]}), where only series is in option.
	            // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
	            // not be called, but only sereis.mergeOption is called. Thus legend
	            // have no chance to update its local record about series (like which
	            // name of series is available in legend).
	            function removeEdgeAndAdd(succComponentType) {
	                targetNameSet[succComponentType] = true;
	                removeEdge(succComponentType);
	            }
	        };

	        /**
	         * DepndencyGraph: {Object}
	         * key: conponentType,
	         * value: {
	         *     successor: [conponentTypes...],
	         *     originalDeps: [conponentTypes...],
	         *     entryCount: {number}
	         * }
	         */
	        function makeDepndencyGraph(fullNameList) {
	            var graph = {};
	            var noEntryList = [];

	            zrUtil.each(fullNameList, function (name) {

	                var thisItem = createDependencyGraphItem(graph, name);
	                var originalDeps = thisItem.originalDeps = dependencyGetter(name);

	                var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
	                thisItem.entryCount = availableDeps.length;
	                if (thisItem.entryCount === 0) {
	                    noEntryList.push(name);
	                }

	                zrUtil.each(availableDeps, function (dependentName) {
	                    if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
	                        thisItem.predecessor.push(dependentName);
	                    }
	                    var thatItem = createDependencyGraphItem(graph, dependentName);
	                    if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
	                        thatItem.successor.push(name);
	                    }
	                });
	            });

	            return {graph: graph, noEntryList: noEntryList};
	        }

	        function createDependencyGraphItem(graph, name) {
	            if (!graph[name]) {
	                graph[name] = {predecessor: [], successor: []};
	            }
	            return graph[name];
	        }

	        function getAvailableDependencies(originalDeps, fullNameList) {
	            var availableDeps = [];
	            zrUtil.each(originalDeps, function (dep) {
	                zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
	            });
	            return availableDeps;
	        }
	    };

	    module.exports = componentUtil;


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Layout helpers for each component positioning


	    var zrUtil = __webpack_require__(243);
	    var BoundingRect = __webpack_require__(248);
	    var numberUtil = __webpack_require__(246);
	    var formatUtil = __webpack_require__(245);
	    var parsePercent = numberUtil.parsePercent;
	    var each = zrUtil.each;

	    var layout = {};

	    var LOCATION_PARAMS = layout.LOCATION_PARAMS = [
	        'left', 'right', 'top', 'bottom', 'width', 'height'
	    ];

	    function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	        var x = 0;
	        var y = 0;
	        if (maxWidth == null) {
	            maxWidth = Infinity;
	        }
	        if (maxHeight == null) {
	            maxHeight = Infinity;
	        }
	        var currentLineMaxSize = 0;
	        group.eachChild(function (child, idx) {
	            var position = child.position;
	            var rect = child.getBoundingRect();
	            var nextChild = group.childAt(idx + 1);
	            var nextChildRect = nextChild && nextChild.getBoundingRect();
	            var nextX;
	            var nextY;
	            if (orient === 'horizontal') {
	                var moveX = rect.width + (nextChildRect ? (-nextChildRect.x + rect.x) : 0);
	                nextX = x + moveX;
	                // Wrap when width exceeds maxWidth or meet a `newline` group
	                if (nextX > maxWidth || child.newline) {
	                    x = 0;
	                    nextX = moveX;
	                    y += currentLineMaxSize + gap;
	                    currentLineMaxSize = rect.height;
	                }
	                else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	                }
	            }
	            else {
	                var moveY = rect.height + (nextChildRect ? (-nextChildRect.y + rect.y) : 0);
	                nextY = y + moveY;
	                // Wrap when width exceeds maxHeight or meet a `newline` group
	                if (nextY > maxHeight || child.newline) {
	                    x += currentLineMaxSize + gap;
	                    y = 0;
	                    nextY = moveY;
	                    currentLineMaxSize = rect.width;
	                }
	                else {
	                    currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	                }
	            }

	            if (child.newline) {
	                return;
	            }

	            position[0] = x;
	            position[1] = y;

	            orient === 'horizontal'
	                ? (x = nextX + gap)
	                : (y = nextY + gap);
	        });
	    }

	    /**
	     * VBox or HBox layouting
	     * @param {string} orient
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.box = boxLayout;

	    /**
	     * VBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.vbox = zrUtil.curry(boxLayout, 'vertical');

	    /**
	     * HBox layouting
	     * @param {module:zrender/container/Group} group
	     * @param {number} gap
	     * @param {number} [width=Infinity]
	     * @param {number} [height=Infinity]
	     */
	    layout.hbox = zrUtil.curry(boxLayout, 'horizontal');

	    /**
	     * If x or x2 is not specified or 'center' 'left' 'right',
	     * the width would be as long as possible.
	     * If y or y2 is not specified or 'middle' 'top' 'bottom',
	     * the height would be as long as possible.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.x]
	     * @param {number|string} [positionInfo.y]
	     * @param {number|string} [positionInfo.x2]
	     * @param {number|string} [positionInfo.y2]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     * @return {Object} {width, height}
	     */
	    layout.getAvailableSize = function (positionInfo, containerRect, margin) {
	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;

	        var x = parsePercent(positionInfo.x, containerWidth);
	        var y = parsePercent(positionInfo.y, containerHeight);
	        var x2 = parsePercent(positionInfo.x2, containerWidth);
	        var y2 = parsePercent(positionInfo.y2, containerHeight);

	        (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	        (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	        (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	        (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);

	        margin = formatUtil.normalizeCssArray(margin || 0);

	        return {
	            width: Math.max(x2 - x - margin[1] - margin[3], 0),
	            height: Math.max(y2 - y - margin[0] - margin[2], 0)
	        };
	    };

	    /**
	     * Parse position info.
	     *
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {number|string} [positionInfo.width]
	     * @param {number|string} [positionInfo.height]
	     * @param {number|string} [positionInfo.aspect] Aspect is width / height
	     * @param {Object} containerRect
	     * @param {string|number} [margin]
	     *
	     * @return {module:zrender/core/BoundingRect}
	     */
	    layout.getLayoutRect = function (
	        positionInfo, containerRect, margin
	    ) {
	        margin = formatUtil.normalizeCssArray(margin || 0);

	        var containerWidth = containerRect.width;
	        var containerHeight = containerRect.height;

	        var left = parsePercent(positionInfo.left, containerWidth);
	        var top = parsePercent(positionInfo.top, containerHeight);
	        var right = parsePercent(positionInfo.right, containerWidth);
	        var bottom = parsePercent(positionInfo.bottom, containerHeight);
	        var width = parsePercent(positionInfo.width, containerWidth);
	        var height = parsePercent(positionInfo.height, containerHeight);

	        var verticalMargin = margin[2] + margin[0];
	        var horizontalMargin = margin[1] + margin[3];
	        var aspect = positionInfo.aspect;

	        // If width is not specified, calculate width from left and right
	        if (isNaN(width)) {
	            width = containerWidth - right - horizontalMargin - left;
	        }
	        if (isNaN(height)) {
	            height = containerHeight - bottom - verticalMargin - top;
	        }

	        // If width and height are not given
	        // 1. Graph should not exceeds the container
	        // 2. Aspect must be keeped
	        // 3. Graph should take the space as more as possible
	        if (isNaN(width) && isNaN(height)) {
	            if (aspect > containerWidth / containerHeight) {
	                width = containerWidth * 0.8;
	            }
	            else {
	                height = containerHeight * 0.8;
	            }
	        }

	        if (aspect != null) {
	            // Calculate width or height with given aspect
	            if (isNaN(width)) {
	                width = aspect * height;
	            }
	            if (isNaN(height)) {
	                height = width / aspect;
	            }
	        }

	        // If left is not specified, calculate left from right and width
	        if (isNaN(left)) {
	            left = containerWidth - right - width - horizontalMargin;
	        }
	        if (isNaN(top)) {
	            top = containerHeight - bottom - height - verticalMargin;
	        }

	        // Align left and top
	        switch (positionInfo.left || positionInfo.right) {
	            case 'center':
	                left = containerWidth / 2 - width / 2 - margin[3];
	                break;
	            case 'right':
	                left = containerWidth - width - horizontalMargin;
	                break;
	        }
	        switch (positionInfo.top || positionInfo.bottom) {
	            case 'middle':
	            case 'center':
	                top = containerHeight / 2 - height / 2 - margin[0];
	                break;
	            case 'bottom':
	                top = containerHeight - height - verticalMargin;
	                break;
	        }
	        // If something is wrong and left, top, width, height are calculated as NaN
	        left = left || 0;
	        top = top || 0;
	        if (isNaN(width)) {
	            // Width may be NaN if only one value is given except width
	            width = containerWidth - left - (right || 0);
	        }
	        if (isNaN(height)) {
	            // Height may be NaN if only one value is given except height
	            height = containerHeight - top - (bottom || 0);
	        }

	        var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	        rect.margin = margin;
	        return rect;
	    };


	    /**
	     * Position a zr element in viewport
	     *  Group position is specified by either
	     *  {left, top}, {right, bottom}
	     *  If all properties exists, right and bottom will be igonred.
	     *
	     * Logic:
	     *     1. Scale (against origin point in parent coord)
	     *     2. Rotate (against origin point in parent coord)
	     *     3. Traslate (with el.position by this method)
	     * So this method only fixes the last step 'Traslate', which does not affect
	     * scaling and rotating.
	     *
	     * If be called repeatly with the same input el, the same result will be gotten.
	     *
	     * @param {module:zrender/Element} el Should have `getBoundingRect` method.
	     * @param {Object} positionInfo
	     * @param {number|string} [positionInfo.left]
	     * @param {number|string} [positionInfo.top]
	     * @param {number|string} [positionInfo.right]
	     * @param {number|string} [positionInfo.bottom]
	     * @param {Object} containerRect
	     * @param {string|number} margin
	     * @param {Object} [opt]
	     * @param {Array.<number>} [opt.hv=[1,1]] Only horizontal or only vertical.
	     * @param {Array.<number>} [opt.boundingMode='all']
	     *        Specify how to calculate boundingRect when locating.
	     *        'all': Position the boundingRect that is transformed and uioned
	     *               both itself and its descendants.
	     *               This mode simplies confine the elements in the bounding
	     *               of their container (e.g., using 'right: 0').
	     *        'raw': Position the boundingRect that is not transformed and only itself.
	     *               This mode is useful when you want a element can overflow its
	     *               container. (Consider a rotated circle needs to be located in a corner.)
	     *               In this mode positionInfo.width/height can only be number.
	     */
	    layout.positionElement = function (el, positionInfo, containerRect, margin, opt) {
	        var h = !opt || !opt.hv || opt.hv[0];
	        var v = !opt || !opt.hv || opt.hv[1];
	        var boundingMode = opt && opt.boundingMode || 'all';

	        if (!h && !v) {
	            return;
	        }

	        var rect;
	        if (boundingMode === 'raw') {
	            rect = el.type === 'group'
	                ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0)
	                : el.getBoundingRect();
	        }
	        else {
	            rect = el.getBoundingRect();
	            if (el.needLocalTransform()) {
	                var transform = el.getLocalTransform();
	                // Notice: raw rect may be inner object of el,
	                // which should not be modified.
	                rect = rect.clone();
	                rect.applyTransform(transform);
	            }
	        }

	        positionInfo = layout.getLayoutRect(
	            zrUtil.defaults(
	                {width: rect.width, height: rect.height},
	                positionInfo
	            ),
	            containerRect,
	            margin
	        );

	        // Because 'tranlate' is the last step in transform
	        // (see zrender/core/Transformable#getLocalTransfrom),
	        // we can just only modify el.position to get final result.
	        var elPos = el.position;
	        var dx = h ? positionInfo.x - rect.x : 0;
	        var dy = v ? positionInfo.y - rect.y : 0;

	        el.attr('position', boundingMode === 'raw' ? [dx, dy] : [elPos[0] + dx, elPos[1] + dy]);
	    };

	    /**
	     * Consider Case:
	     * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	     * through setOption or media query, using normal zrUtil.merge will cause
	     * {right: 0} does not take effect.
	     *
	     * @example
	     * ComponentModel.extend({
	     *     init: function () {
	     *         ...
	     *         var inputPositionParams = layout.getLayoutParams(option);
	     *         this.mergeOption(inputPositionParams);
	     *     },
	     *     mergeOption: function (newOption) {
	     *         newOption && zrUtil.merge(thisOption, newOption, true);
	     *         layout.mergeLayoutParam(thisOption, newOption);
	     *     }
	     * });
	     *
	     * @param {Object} targetOption
	     * @param {Object} newOption
	     * @param {Object|string} [opt]
	     * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.
	     */
	    layout.mergeLayoutParam = function (targetOption, newOption, opt) {
	        !zrUtil.isObject(opt) && (opt = {});
	        var hNames = ['width', 'left', 'right']; // Order by priority.
	        var vNames = ['height', 'top', 'bottom']; // Order by priority.
	        var hResult = merge(hNames);
	        var vResult = merge(vNames);

	        copy(hNames, targetOption, hResult);
	        copy(vNames, targetOption, vResult);

	        function merge(names) {
	            var newParams = {};
	            var newValueCount = 0;
	            var merged = {};
	            var mergedValueCount = 0;
	            var enoughParamNumber = opt.ignoreSize ? 1 : 2;

	            each(names, function (name) {
	                merged[name] = targetOption[name];
	            });
	            each(names, function (name) {
	                // Consider case: newOption.width is null, which is
	                // set by user for removing width setting.
	                hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	                hasValue(newParams, name) && newValueCount++;
	                hasValue(merged, name) && mergedValueCount++;
	            });

	            // Case: newOption: {width: ..., right: ...},
	            // or targetOption: {right: ...} and newOption: {width: ...},
	            // There is no conflict when merged only has params count
	            // little than enoughParamNumber.
	            if (mergedValueCount === enoughParamNumber || !newValueCount) {
	                return merged;
	            }
	            // Case: newOption: {width: ..., right: ...},
	            // Than we can make sure user only want those two, and ignore
	            // all origin params in targetOption.
	            else if (newValueCount >= enoughParamNumber) {
	                return newParams;
	            }
	            else {
	                // Chose another param from targetOption by priority.
	                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.
	                for (var i = 0; i < names.length; i++) {
	                    var name = names[i];
	                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	                        newParams[name] = targetOption[name];
	                        break;
	                    }
	                }
	                return newParams;
	            }
	        }

	        function hasProp(obj, name) {
	            return obj.hasOwnProperty(name);
	        }

	        function hasValue(obj, name) {
	            return obj[name] != null && obj[name] !== 'auto';
	        }

	        function copy(names, target, source) {
	            each(names, function (name) {
	                target[name] = source[name];
	            });
	        }
	    };

	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.getLayoutParams = function (source) {
	        return layout.copyLayoutParams({}, source);
	    };

	    /**
	     * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	     * @param {Object} source
	     * @return {Object} Result contains those props.
	     */
	    layout.copyLayoutParams = function (target, source) {
	        source && target && each(LOCATION_PARAMS, function (name) {
	            source.hasOwnProperty(name) && (target[name] = source[name]);
	        });
	        return target;
	    };

	    module.exports = layout;


/***/ },
/* 261 */
/***/ function(module, exports) {

	

	    module.exports = {
	        getBoxLayoutParams: function () {
	            return {
	                left: this.get('left'),
	                top: this.get('top'),
	                right: this.get('right'),
	                bottom: this.get('bottom'),
	                width: this.get('width'),
	                height: this.get('height')
	            };
	        }
	    };


/***/ },
/* 262 */
/***/ function(module, exports) {

	
	    var platform = '';
	    // Navigator not exists in node
	    if (typeof navigator !== 'undefined') {
	        platform = navigator.platform || '';
	    }
	    module.exports = {
	        // 全图默认背景
	        // backgroundColor: 'rgba(0,0,0,0)',

	        // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
	        // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
	        // 浅色
	        // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
	        // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
	        // 深色
	        color: ['#c23531','#2f4554', '#61a0a8', '#d48265', '#91c7ae','#749f83',  '#ca8622', '#bda29a','#6e7074', '#546570', '#c4ccd3'],

	        // 默认需要 Grid 配置项
	        // grid: {},
	        // 主题，主题
	        textStyle: {
	            // color: '#000',
	            // decoration: 'none',
	            // PENDING
	            fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
	            // fontFamily: 'Arial, Verdana, sans-serif',
	            fontSize: 12,
	            fontStyle: 'normal',
	            fontWeight: 'normal'
	        },

	        // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/
	        // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	        // Default is source-over
	        blendMode: null,

	        animation: true,
	        animationDuration: 1000,
	        animationDurationUpdate: 300,
	        animationEasing: 'exponentialOut',
	        animationEasingUpdate: 'cubicOut',

	        animationThreshold: 2000,
	        // Configuration for progressive/incremental rendering
	        progressiveThreshold: 3000,
	        progressive: 400,

	        // Threshold of if use single hover layer to optimize.
	        // It is recommended that `hoverLayerThreshold` is equivalent to or less than
	        // `progressiveThreshold`, otherwise hover will cause restart of progressive,
	        // which is unexpected.
	        // see example <echarts/test/heatmap-large.html>.
	        hoverLayerThreshold: 3000
	    };


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	

	    var classUtil = __webpack_require__(252);
	    var set = classUtil.set;
	    var get = classUtil.get;

	    module.exports = {
	        clearColorPalette: function () {
	            set(this, 'colorIdx', 0);
	            set(this, 'colorNameMap', {});
	        },

	        getColorFromPalette: function (name, scope) {
	            scope = scope || this;
	            var colorIdx = get(scope, 'colorIdx') || 0;
	            var colorNameMap = get(scope, 'colorNameMap') || set(scope, 'colorNameMap', {});
	            if (colorNameMap[name]) {
	                return colorNameMap[name];
	            }
	            var colorPalette = this.get('color', true) || [];
	            if (!colorPalette.length) {
	                return;
	            }

	            var color = colorPalette[colorIdx];
	            if (name) {
	                colorNameMap[name] = color;
	            }
	            set(scope, 'colorIdx', (colorIdx + 1) % colorPalette.length);

	            return color;
	        }
	    };


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);

	    var echartsAPIList = [
	        'getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction', 'isDisposed',
	        'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'
	    ];

	    function ExtensionAPI(chartInstance) {
	        zrUtil.each(echartsAPIList, function (name) {
	            this[name] = zrUtil.bind(chartInstance[name], chartInstance);
	        }, this);
	    }

	    module.exports = ExtensionAPI;


/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);

	    /**
	     * Interface of Coordinate System Class
	     *
	     * create:
	     *     @param {module:echarts/model/Global} ecModel
	     *     @param {module:echarts/ExtensionAPI} api
	     *     @return {Object} coordinate system instance
	     *
	     * update:
	     *     @param {module:echarts/model/Global} ecModel
	     *     @param {module:echarts/ExtensionAPI} api
	     *
	     * convertToPixel:
	     * convertFromPixel:
	     *     These two methods is also responsible for determine whether this
	     *     coodinate system is applicable to the given `finder`.
	     *     Each coordinate system will be tried, util one returns none
	     *     null/undefined value.
	     *     @param {module:echarts/model/Global} ecModel
	     *     @param {Object} finder
	     *     @param {Array|number} value
	     *     @return {Array|number} convert result.
	     *
	     * containPoint:
	     *     @param {Array.<number>} point In pixel coordinate system.
	     *     @return {boolean}
	     */

	    var coordinateSystemCreators = {};

	    function CoordinateSystemManager() {

	        this._coordinateSystems = [];
	    }

	    CoordinateSystemManager.prototype = {

	        constructor: CoordinateSystemManager,

	        create: function (ecModel, api) {
	            var coordinateSystems = [];
	            zrUtil.each(coordinateSystemCreators, function (creater, type) {
	                var list = creater.create(ecModel, api);
	                coordinateSystems = coordinateSystems.concat(list || []);
	            });

	            this._coordinateSystems = coordinateSystems;
	        },

	        update: function (ecModel, api) {
	            zrUtil.each(this._coordinateSystems, function (coordSys) {
	                // FIXME MUST have
	                coordSys.update && coordSys.update(ecModel, api);
	            });
	        },

	        getCoordinateSystems: function () {
	            return this._coordinateSystems.slice();
	        }
	    };

	    CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
	        coordinateSystemCreators[type] = coordinateSystemCreator;
	    };

	    CoordinateSystemManager.get = function (type) {
	        return coordinateSystemCreators[type];
	    };

	    module.exports = CoordinateSystemManager;


/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * ECharts option manager
	 *
	 * @module {echarts/model/OptionManager}
	 */



	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);
	    var ComponentModel = __webpack_require__(258);
	    var each = zrUtil.each;
	    var clone = zrUtil.clone;
	    var map = zrUtil.map;
	    var merge = zrUtil.merge;

	    var QUERY_REG = /^(min|max)?(.+)$/;

	    /**
	     * TERM EXPLANATIONS:
	     *
	     * [option]:
	     *
	     *     An object that contains definitions of components. For example:
	     *     var option = {
	     *         title: {...},
	     *         legend: {...},
	     *         visualMap: {...},
	     *         series: [
	     *             {data: [...]},
	     *             {data: [...]},
	     *             ...
	     *         ]
	     *     };
	     *
	     * [rawOption]:
	     *
	     *     An object input to echarts.setOption. 'rawOption' may be an
	     *     'option', or may be an object contains multi-options. For example:
	     *     var option = {
	     *         baseOption: {
	     *             title: {...},
	     *             legend: {...},
	     *             series: [
	     *                 {data: [...]},
	     *                 {data: [...]},
	     *                 ...
	     *             ]
	     *         },
	     *         timeline: {...},
	     *         options: [
	     *             {title: {...}, series: {data: [...]}},
	     *             {title: {...}, series: {data: [...]}},
	     *             ...
	     *         ],
	     *         media: [
	     *             {
	     *                 query: {maxWidth: 320},
	     *                 option: {series: {x: 20}, visualMap: {show: false}}
	     *             },
	     *             {
	     *                 query: {minWidth: 320, maxWidth: 720},
	     *                 option: {series: {x: 500}, visualMap: {show: true}}
	     *             },
	     *             {
	     *                 option: {series: {x: 1200}, visualMap: {show: true}}
	     *             }
	     *         ]
	     *     };
	     *
	     * @alias module:echarts/model/OptionManager
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function OptionManager(api) {

	        /**
	         * @private
	         * @type {module:echarts/ExtensionAPI}
	         */
	        this._api = api;

	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._timelineOptions = [];

	        /**
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._mediaList = [];

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._mediaDefault;

	        /**
	         * -1, means default.
	         * empty means no media.
	         * @private
	         * @type {Array.<number>}
	         */
	        this._currentMediaIndices = [];

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._optionBackup;

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._newBaseOption;
	    }

	    // timeline.notMerge is not supported in ec3. Firstly there is rearly
	    // case that notMerge is needed. Secondly supporting 'notMerge' requires
	    // rawOption cloned and backuped when timeline changed, which does no
	    // good to performance. What's more, that both timeline and setOption
	    // method supply 'notMerge' brings complex and some problems.
	    // Consider this case:
	    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
	    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);

	    OptionManager.prototype = {

	        constructor: OptionManager,

	        /**
	         * @public
	         * @param {Object} rawOption Raw option.
	         * @param {module:echarts/model/Global} ecModel
	         * @param {Array.<Function>} optionPreprocessorFuncs
	         * @return {Object} Init option
	         */
	        setOption: function (rawOption, optionPreprocessorFuncs) {
	            rawOption = clone(rawOption, true);

	            // FIXME
	            // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。

	            var oldOptionBackup = this._optionBackup;
	            var newParsedOption = parseRawOption.call(
	                this, rawOption, optionPreprocessorFuncs, !oldOptionBackup
	            );
	            this._newBaseOption = newParsedOption.baseOption;

	            // For setOption at second time (using merge mode);
	            if (oldOptionBackup) {
	                // Only baseOption can be merged.
	                mergeOption(oldOptionBackup.baseOption, newParsedOption.baseOption);

	                // For simplicity, timeline options and media options do not support merge,
	                // that is, if you `setOption` twice and both has timeline options, the latter
	                // timeline opitons will not be merged to the formers, but just substitude them.
	                if (newParsedOption.timelineOptions.length) {
	                    oldOptionBackup.timelineOptions = newParsedOption.timelineOptions;
	                }
	                if (newParsedOption.mediaList.length) {
	                    oldOptionBackup.mediaList = newParsedOption.mediaList;
	                }
	                if (newParsedOption.mediaDefault) {
	                    oldOptionBackup.mediaDefault = newParsedOption.mediaDefault;
	                }
	            }
	            else {
	                this._optionBackup = newParsedOption;
	            }
	        },

	        /**
	         * @param {boolean} isRecreate
	         * @return {Object}
	         */
	        mountOption: function (isRecreate) {
	            var optionBackup = this._optionBackup;

	            // TODO
	            // 如果没有reset功能则不clone。

	            this._timelineOptions = map(optionBackup.timelineOptions, clone);
	            this._mediaList = map(optionBackup.mediaList, clone);
	            this._mediaDefault = clone(optionBackup.mediaDefault);
	            this._currentMediaIndices = [];

	            return clone(isRecreate
	                // this._optionBackup.baseOption, which is created at the first `setOption`
	                // called, and is merged into every new option by inner method `mergeOption`
	                // each time `setOption` called, can be only used in `isRecreate`, because
	                // its reliability is under suspicion. In other cases option merge is
	                // performed by `model.mergeOption`.
	                ? optionBackup.baseOption : this._newBaseOption
	            );
	        },

	        /**
	         * @param {module:echarts/model/Global} ecModel
	         * @return {Object}
	         */
	        getTimelineOption: function (ecModel) {
	            var option;
	            var timelineOptions = this._timelineOptions;

	            if (timelineOptions.length) {
	                // getTimelineOption can only be called after ecModel inited,
	                // so we can get currentIndex from timelineModel.
	                var timelineModel = ecModel.getComponent('timeline');
	                if (timelineModel) {
	                    option = clone(
	                        timelineOptions[timelineModel.getCurrentIndex()],
	                        true
	                    );
	                }
	            }

	            return option;
	        },

	        /**
	         * @param {module:echarts/model/Global} ecModel
	         * @return {Array.<Object>}
	         */
	        getMediaOption: function (ecModel) {
	            var ecWidth = this._api.getWidth();
	            var ecHeight = this._api.getHeight();
	            var mediaList = this._mediaList;
	            var mediaDefault = this._mediaDefault;
	            var indices = [];
	            var result = [];

	            // No media defined.
	            if (!mediaList.length && !mediaDefault) {
	                return result;
	            }

	            // Multi media may be applied, the latter defined media has higher priority.
	            for (var i = 0, len = mediaList.length; i < len; i++) {
	                if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
	                    indices.push(i);
	                }
	            }

	            // FIXME
	            // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。
	            if (!indices.length && mediaDefault) {
	                indices = [-1];
	            }

	            if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
	                result = map(indices, function (index) {
	                    return clone(
	                        index === -1 ? mediaDefault.option : mediaList[index].option
	                    );
	                });
	            }
	            // Otherwise return nothing.

	            this._currentMediaIndices = indices;

	            return result;
	        }
	    };

	    function parseRawOption(rawOption, optionPreprocessorFuncs, isNew) {
	        var timelineOptions = [];
	        var mediaList = [];
	        var mediaDefault;
	        var baseOption;

	        // Compatible with ec2.
	        var timelineOpt = rawOption.timeline;

	        if (rawOption.baseOption) {
	            baseOption = rawOption.baseOption;
	        }

	        // For timeline
	        if (timelineOpt || rawOption.options) {
	            baseOption = baseOption || {};
	            timelineOptions = (rawOption.options || []).slice();
	        }

	        // For media query
	        if (rawOption.media) {
	            baseOption = baseOption || {};
	            var media = rawOption.media;
	            each(media, function (singleMedia) {
	                if (singleMedia && singleMedia.option) {
	                    if (singleMedia.query) {
	                        mediaList.push(singleMedia);
	                    }
	                    else if (!mediaDefault) {
	                        // Use the first media default.
	                        mediaDefault = singleMedia;
	                    }
	                }
	            });
	        }

	        // For normal option
	        if (!baseOption) {
	            baseOption = rawOption;
	        }

	        // Set timelineOpt to baseOption in ec3,
	        // which is convenient for merge option.
	        if (!baseOption.timeline) {
	            baseOption.timeline = timelineOpt;
	        }

	        // Preprocess.
	        each([baseOption].concat(timelineOptions)
	            .concat(zrUtil.map(mediaList, function (media) {
	                return media.option;
	            })),
	            function (option) {
	                each(optionPreprocessorFuncs, function (preProcess) {
	                    preProcess(option, isNew);
	                });
	            }
	        );

	        return {
	            baseOption: baseOption,
	            timelineOptions: timelineOptions,
	            mediaDefault: mediaDefault,
	            mediaList: mediaList
	        };
	    }

	    /**
	     * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
	     * Support: width, height, aspectRatio
	     * Can use max or min as prefix.
	     */
	    function applyMediaQuery(query, ecWidth, ecHeight) {
	        var realMap = {
	            width: ecWidth,
	            height: ecHeight,
	            aspectratio: ecWidth / ecHeight // lowser case for convenientce.
	        };

	        var applicatable = true;

	        zrUtil.each(query, function (value, attr) {
	            var matched = attr.match(QUERY_REG);

	            if (!matched || !matched[1] || !matched[2]) {
	                return;
	            }

	            var operator = matched[1];
	            var realAttr = matched[2].toLowerCase();

	            if (!compare(realMap[realAttr], value, operator)) {
	                applicatable = false;
	            }
	        });

	        return applicatable;
	    }

	    function compare(real, expect, operator) {
	        if (operator === 'min') {
	            return real >= expect;
	        }
	        else if (operator === 'max') {
	            return real <= expect;
	        }
	        else { // Equals
	            return real === expect;
	        }
	    }

	    function indicesEquals(indices1, indices2) {
	        // indices is always order by asc and has only finite number.
	        return indices1.join(',') === indices2.join(',');
	    }

	    /**
	     * Consider case:
	     * `chart.setOption(opt1);`
	     * Then user do some interaction like dataZoom, dataView changing.
	     * `chart.setOption(opt2);`
	     * Then user press 'reset button' in toolbox.
	     *
	     * After doing that all of the interaction effects should be reset, the
	     * chart should be the same as the result of invoke
	     * `chart.setOption(opt1); chart.setOption(opt2);`.
	     *
	     * Although it is not able ensure that
	     * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
	     * `chart.setOption(merge(opt1, opt2));` exactly,
	     * this might be the only simple way to implement that feature.
	     *
	     * MEMO: We've considered some other approaches:
	     * 1. Each model handle its self restoration but not uniform treatment.
	     *     (Too complex in logic and error-prone)
	     * 2. Use a shadow ecModel. (Performace expensive)
	     */
	    function mergeOption(oldOption, newOption) {
	        newOption = newOption || {};

	        each(newOption, function (newCptOpt, mainType) {
	            if (newCptOpt == null) {
	                return;
	            }

	            var oldCptOpt = oldOption[mainType];

	            if (!ComponentModel.hasClass(mainType)) {
	                oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
	            }
	            else {
	                newCptOpt = modelUtil.normalizeToArray(newCptOpt);
	                oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);

	                var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);

	                oldOption[mainType] = map(mapResult, function (item) {
	                    return (item.option && item.exist)
	                        ? merge(item.exist, item.option, true)
	                        : (item.exist || item.option);
	                });
	            }
	        });
	    }

	    module.exports = OptionManager;


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var formatUtil = __webpack_require__(245);
	    var classUtil = __webpack_require__(252);
	    var modelUtil = __webpack_require__(244);
	    var ComponentModel = __webpack_require__(258);
	    var colorPaletteMixin = __webpack_require__(263);
	    var env = __webpack_require__(241);
	    var layout = __webpack_require__(260);

	    var set = classUtil.set;
	    var get = classUtil.get;
	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;

	    var SeriesModel = ComponentModel.extend({

	        type: 'series.__base__',

	        /**
	         * @readOnly
	         */
	        seriesIndex: 0,

	        // coodinateSystem will be injected in the echarts/CoordinateSystem
	        coordinateSystem: null,

	        /**
	         * @type {Object}
	         * @protected
	         */
	        defaultOption: null,

	        /**
	         * Data provided for legend
	         * @type {Function}
	         */
	        // PENDING
	        legendDataProvider: null,

	        /**
	         * Access path of color for visual
	         */
	        visualColorAccessPath: 'itemStyle.normal.color',

	        /**
	         * Support merge layout params.
	         * Only support 'box' now (left/right/top/bottom/width/height).
	         * @type {string|Object} Object can be {ignoreSize: true}
	         * @readOnly
	         */
	        layoutMode: null,

	        init: function (option, parentModel, ecModel, extraOpt) {

	            /**
	             * @type {number}
	             * @readOnly
	             */
	            this.seriesIndex = this.componentIndex;

	            this.mergeDefaultAndTheme(option, ecModel);

	            /**
	             * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
	             * @private
	             */
	            set(this, 'dataBeforeProcessed', this.getInitialData(option, ecModel));

	            // If we reverse the order (make data firstly, and then make
	            // dataBeforeProcessed by cloneShallow), cloneShallow will
	            // cause data.graph.data !== data when using
	            // module:echarts/data/Graph or module:echarts/data/Tree.
	            // See module:echarts/data/helper/linkList
	            this.restoreData();
	        },

	        /**
	         * Util for merge default and theme to option
	         * @param  {Object} option
	         * @param  {module:echarts/model/Global} ecModel
	         */
	        mergeDefaultAndTheme: function (option, ecModel) {
	            var layoutMode = this.layoutMode;
	            var inputPositionParams = layoutMode
	                ? layout.getLayoutParams(option) : {};

	            zrUtil.merge(
	                option,
	                ecModel.getTheme().get(this.subType)
	            );
	            zrUtil.merge(option, this.getDefaultOption());

	            // Default label emphasis `position` and `show`
	            // FIXME Set label in mergeOption
	            modelUtil.defaultEmphasis(option.label, modelUtil.LABEL_OPTIONS);

	            this.fillDataTextStyle(option.data);

	            if (layoutMode) {
	                layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	            }
	        },

	        mergeOption: function (newSeriesOption, ecModel) {
	            newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);
	            this.fillDataTextStyle(newSeriesOption.data);

	            var layoutMode = this.layoutMode;
	            if (layoutMode) {
	                layout.mergeLayoutParam(this.option, newSeriesOption, layoutMode);
	            }

	            var data = this.getInitialData(newSeriesOption, ecModel);
	            // TODO Merge data?
	            if (data) {
	                set(this, 'data', data);
	                set(this, 'dataBeforeProcessed', data.cloneShallow());
	            }
	        },

	        fillDataTextStyle: function (data) {
	            // Default data label emphasis `position` and `show`
	            // FIXME Tree structure data ?
	            // FIXME Performance ?
	            if (data) {
	                for (var i = 0; i < data.length; i++) {
	                    if (data[i] && data[i].label) {
	                        modelUtil.defaultEmphasis(data[i].label, modelUtil.LABEL_OPTIONS);
	                    }
	                }
	            }
	        },

	        /**
	         * Init a data structure from data related option in series
	         * Must be overwritten
	         */
	        getInitialData: function () {},

	        /**
	         * @param {string} [dataType]
	         * @return {module:echarts/data/List}
	         */
	        getData: function (dataType) {
	            var data = get(this, 'data');
	            return dataType == null ? data : data.getLinkedData(dataType);
	        },

	        /**
	         * @param {module:echarts/data/List} data
	         */
	        setData: function (data) {
	            set(this, 'data', data);
	        },

	        /**
	         * Get data before processed
	         * @return {module:echarts/data/List}
	         */
	        getRawData: function () {
	            return get(this, 'dataBeforeProcessed');
	        },

	        /**
	         * Coord dimension to data dimension.
	         *
	         * By default the result is the same as dimensions of series data.
	         * But in some series data dimensions are different from coord dimensions (i.e.
	         * candlestick and boxplot). Override this method to handle those cases.
	         *
	         * Coord dimension to data dimension can be one-to-many
	         *
	         * @param {string} coordDim
	         * @return {Array.<string>} dimensions on the axis.
	         */
	        coordDimToDataDim: function (coordDim) {
	            return [coordDim];
	        },

	        /**
	         * Convert data dimension to coord dimension.
	         *
	         * @param {string|number} dataDim
	         * @return {string}
	         */
	        dataDimToCoordDim: function (dataDim) {
	            return dataDim;
	        },

	        /**
	         * Get base axis if has coordinate system and has axis.
	         * By default use coordSys.getBaseAxis();
	         * Can be overrided for some chart.
	         * @return {type} description
	         */
	        getBaseAxis: function () {
	            var coordSys = this.coordinateSystem;
	            return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
	        },

	        // FIXME
	        /**
	         * Default tooltip formatter
	         *
	         * @param {number} dataIndex
	         * @param {boolean} [multipleSeries=false]
	         * @param {number} [dataType]
	         */
	        formatTooltip: function (dataIndex, multipleSeries, dataType) {
	            function formatArrayValue(value) {
	                var result = [];

	                zrUtil.each(value, function (val, idx) {
	                    var dimInfo = data.getDimensionInfo(idx);
	                    var dimType = dimInfo && dimInfo.type;
	                    var valStr;

	                    if (dimType === 'ordinal') {
	                        valStr = val + '';
	                    }
	                    else if (dimType === 'time') {
	                        valStr = multipleSeries ? '' : formatUtil.formatTime('yyyy/MM/dd hh:mm:ss', val);
	                    }
	                    else {
	                        valStr = addCommas(val);
	                    }

	                    valStr && result.push(valStr);
	                });

	                return result.join(', ');
	            }

	            var data = get(this, 'data');

	            var value = this.getRawValue(dataIndex);
	            var formattedValue = encodeHTML(
	                zrUtil.isArray(value) ? formatArrayValue(value) : addCommas(value)
	            );
	            var name = data.getName(dataIndex);

	            var color = data.getItemVisual(dataIndex, 'color');
	            if (zrUtil.isObject(color) && color.colorStops) {
	                color = (color.colorStops[0] || {}).color;
	            }
	            color = color || 'transparent';

	            var colorEl = '<span style="display:inline-block;margin-right:5px;'
	                + 'border-radius:10px;width:9px;height:9px;background-color:' + encodeHTML(color) + '"></span>';

	            var seriesName = this.name;
	            // FIXME
	            if (seriesName === '\0-') {
	                // Not show '-'
	                seriesName = '';
	            }
	            return !multipleSeries
	                ? ((seriesName && encodeHTML(seriesName) + '<br />') + colorEl
	                    + (name
	                        ? encodeHTML(name) + ' : ' + formattedValue
	                        : formattedValue
	                    )
	                  )
	                : (colorEl + encodeHTML(this.name) + ' : ' + formattedValue);
	        },

	        /**
	         * @return {boolean}
	         */
	        isAnimationEnabled: function () {
	            if (env.node) {
	                return false;
	            }

	            var animationEnabled = this.getShallow('animation');
	            if (animationEnabled) {
	                if (this.getData().count() > this.getShallow('animationThreshold')) {
	                    animationEnabled = false;
	                }
	            }
	            return animationEnabled;
	        },

	        restoreData: function () {
	            set(this, 'data', get(this, 'dataBeforeProcessed').cloneShallow());
	        },

	        getColorFromPalette: function (name, scope) {
	            var ecModel = this.ecModel;
	            // PENDING
	            var color = colorPaletteMixin.getColorFromPalette.call(this, name, scope);
	            if (!color) {
	                color = ecModel.getColorFromPalette(name, scope);
	            }
	            return color;
	        },

	        /**
	         * Get data indices for show tooltip content. See tooltip.
	         * @abstract
	         * @param {Array.<string>|string} dim
	         * @param {Array.<number>} value
	         * @param {module:echarts/coord/single/SingleAxis} baseAxis
	         * @return {Array.<number>} data indices.
	         */
	        getAxisTooltipDataIndex: null,

	        /**
	         * See tooltip.
	         * @abstract
	         * @param {number} dataIndex
	         * @return {Array.<number>} Point of tooltip. null/undefined can be returned.
	         */
	        getTooltipPosition: null
	    });

	    zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);
	    zrUtil.mixin(SeriesModel, colorPaletteMixin);

	    module.exports = SeriesModel;


/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Group = __webpack_require__(269);
	    var componentUtil = __webpack_require__(259);
	    var clazzUtil = __webpack_require__(252);

	    var Component = function () {
	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new Group();

	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.uid = componentUtil.getUID('viewComponent');
	    };

	    Component.prototype = {

	        constructor: Component,

	        init: function (ecModel, api) {},

	        render: function (componentModel, ecModel, api, payload) {},

	        dispose: function () {}

	    };

	    var componentProto = Component.prototype;
	    componentProto.updateView
	        = componentProto.updateLayout
	        = componentProto.updateVisual
	        = function (seriesModel, ecModel, api, payload) {
	            // Do nothing;
	        };
	    // Enable Component.extend.
	    clazzUtil.enableClassExtend(Component);

	    // Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(Component, {registerWhenExtend: true});

	    module.exports = Component;


/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/graphic/Group
	 * @example
	 *     var Group = require('zrender/lib/container/Group');
	 *     var Circle = require('zrender/lib/graphic/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.add(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *         }
	 *     }));
	 *     zr.add(g);
	 */


	    var zrUtil = __webpack_require__(243);
	    var Element = __webpack_require__(270);
	    var BoundingRect = __webpack_require__(248);

	    /**
	     * @alias module:zrender/graphic/Group
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @extends module:zrender/mixin/Eventful
	     */
	    var Group = function (opts) {

	        opts = opts || {};

	        Element.call(this, opts);

	        for (var key in opts) {
	            if (opts.hasOwnProperty(key)) {
	                this[key] = opts[key];
	            }
	        }

	        this._children = [];

	        this.__storage = null;

	        this.__dirty = true;
	    };

	    Group.prototype = {

	        constructor: Group,

	        isGroup: true,

	        /**
	         * @type {string}
	         */
	        type: 'group',

	        /**
	         * 所有子孙元素是否响应鼠标事件
	         * @name module:/zrender/container/Group#silent
	         * @type {boolean}
	         * @default false
	         */
	        silent: false,

	        /**
	         * @return {Array.<module:zrender/Element>}
	         */
	        children: function () {
	            return this._children.slice();
	        },

	        /**
	         * 获取指定 index 的儿子节点
	         * @param  {number} idx
	         * @return {module:zrender/Element}
	         */
	        childAt: function (idx) {
	            return this._children[idx];
	        },

	        /**
	         * 获取指定名字的儿子节点
	         * @param  {string} name
	         * @return {module:zrender/Element}
	         */
	        childOfName: function (name) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                if (children[i].name === name) {
	                    return children[i];
	                }
	             }
	        },

	        /**
	         * @return {number}
	         */
	        childCount: function () {
	            return this._children.length;
	        },

	        /**
	         * 添加子节点到最后
	         * @param {module:zrender/Element} child
	         */
	        add: function (child) {
	            if (child && child !== this && child.parent !== this) {

	                this._children.push(child);

	                this._doAdd(child);
	            }

	            return this;
	        },

	        /**
	         * 添加子节点在 nextSibling 之前
	         * @param {module:zrender/Element} child
	         * @param {module:zrender/Element} nextSibling
	         */
	        addBefore: function (child, nextSibling) {
	            if (child && child !== this && child.parent !== this
	                && nextSibling && nextSibling.parent === this) {

	                var children = this._children;
	                var idx = children.indexOf(nextSibling);

	                if (idx >= 0) {
	                    children.splice(idx, 0, child);
	                    this._doAdd(child);
	                }
	            }

	            return this;
	        },

	        _doAdd: function (child) {
	            if (child.parent) {
	                child.parent.remove(child);
	            }

	            child.parent = this;

	            var storage = this.__storage;
	            var zr = this.__zr;
	            if (storage && storage !== child.__storage) {

	                storage.addToMap(child);

	                if (child instanceof Group) {
	                    child.addChildrenToStorage(storage);
	                }
	            }

	            zr && zr.refresh();
	        },

	        /**
	         * 移除子节点
	         * @param {module:zrender/Element} child
	         */
	        remove: function (child) {
	            var zr = this.__zr;
	            var storage = this.__storage;
	            var children = this._children;

	            var idx = zrUtil.indexOf(children, child);
	            if (idx < 0) {
	                return this;
	            }
	            children.splice(idx, 1);

	            child.parent = null;

	            if (storage) {

	                storage.delFromMap(child.id);

	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }

	            zr && zr.refresh();

	            return this;
	        },

	        /**
	         * 移除所有子节点
	         */
	        removeAll: function () {
	            var children = this._children;
	            var storage = this.__storage;
	            var child;
	            var i;
	            for (i = 0; i < children.length; i++) {
	                child = children[i];
	                if (storage) {
	                    storage.delFromMap(child.id);
	                    if (child instanceof Group) {
	                        child.delChildrenFromStorage(storage);
	                    }
	                }
	                child.parent = null;
	            }
	            children.length = 0;

	            return this;
	        },

	        /**
	         * 遍历所有子节点
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        eachChild: function (cb, context) {
	            var children = this._children;
	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	                cb.call(context, child, i);
	            }
	            return this;
	        },

	        /**
	         * 深度优先遍历所有子孙节点
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        traverse: function (cb, context) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                cb.call(context, child);

	                if (child.type === 'group') {
	                    child.traverse(cb, context);
	                }
	            }
	            return this;
	        },

	        addChildrenToStorage: function (storage) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                storage.addToMap(child);
	                if (child instanceof Group) {
	                    child.addChildrenToStorage(storage);
	                }
	            }
	        },

	        delChildrenFromStorage: function (storage) {
	            for (var i = 0; i < this._children.length; i++) {
	                var child = this._children[i];
	                storage.delFromMap(child.id);
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }
	        },

	        dirty: function () {
	            this.__dirty = true;
	            this.__zr && this.__zr.refresh();
	            return this;
	        },

	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getBoundingRect: function (includeChildren) {
	            // TODO Caching
	            var rect = null;
	            var tmpRect = new BoundingRect(0, 0, 0, 0);
	            var children = includeChildren || this._children;
	            var tmpMat = [];

	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	                if (child.ignore || child.invisible) {
	                    continue;
	                }

	                var childRect = child.getBoundingRect();
	                var transform = child.getLocalTransform(tmpMat);
	                // TODO
	                // The boundingRect cacluated by transforming original
	                // rect may be bigger than the actual bundingRect when rotation
	                // is used. (Consider a circle rotated aginst its center, where
	                // the actual boundingRect should be the same as that not be
	                // rotated.) But we can not find better approach to calculate
	                // actual boundingRect yet, considering performance.
	                if (transform) {
	                    tmpRect.copy(childRect);
	                    tmpRect.applyTransform(transform);
	                    rect = rect || tmpRect.clone();
	                    rect.union(tmpRect);
	                }
	                else {
	                    rect = rect || childRect.clone();
	                    rect.union(childRect);
	                }
	            }
	            return rect || tmpRect;
	        }
	    };

	    zrUtil.inherits(Group, Element);

	    module.exports = Group;


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/Element
	 */


	    var guid = __webpack_require__(271);
	    var Eventful = __webpack_require__(272);
	    var Transformable = __webpack_require__(273);
	    var Animatable = __webpack_require__(274);
	    var zrUtil = __webpack_require__(243);

	    /**
	     * @alias module:zrender/Element
	     * @constructor
	     * @extends {module:zrender/mixin/Animatable}
	     * @extends {module:zrender/mixin/Transformable}
	     * @extends {module:zrender/mixin/Eventful}
	     */
	    var Element = function (opts) {

	        Transformable.call(this, opts);
	        Eventful.call(this, opts);
	        Animatable.call(this, opts);

	        /**
	         * 画布元素ID
	         * @type {string}
	         */
	        this.id = opts.id || guid();
	    };

	    Element.prototype = {

	        /**
	         * 元素类型
	         * Element type
	         * @type {string}
	         */
	        type: 'element',

	        /**
	         * 元素名字
	         * Element name
	         * @type {string}
	         */
	        name: '',

	        /**
	         * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
	         * ZRender instance will be assigned when element is associated with zrender
	         * @name module:/zrender/Element#__zr
	         * @type {module:zrender/ZRender}
	         */
	        __zr: null,

	        /**
	         * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	         * If ignore drawing and events of the element object
	         * @name module:/zrender/Element#ignore
	         * @type {boolean}
	         * @default false
	         */
	        ignore: false,

	        /**
	         * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
	         * 该路径会继承被裁减对象的变换
	         * @type {module:zrender/graphic/Path}
	         * @see http://www.w3.org/TR/2dcontext/#clipping-region
	         * @readOnly
	         */
	        clipPath: null,

	        /**
	         * Drift element
	         * @param  {number} dx dx on the global space
	         * @param  {number} dy dy on the global space
	         */
	        drift: function (dx, dy) {
	            switch (this.draggable) {
	                case 'horizontal':
	                    dy = 0;
	                    break;
	                case 'vertical':
	                    dx = 0;
	                    break;
	            }

	            var m = this.transform;
	            if (!m) {
	                m = this.transform = [1, 0, 0, 1, 0, 0];
	            }
	            m[4] += dx;
	            m[5] += dy;

	            this.decomposeTransform();
	            this.dirty(false);
	        },

	        /**
	         * Hook before update
	         */
	        beforeUpdate: function () {},
	        /**
	         * Hook after update
	         */
	        afterUpdate: function () {},
	        /**
	         * Update each frame
	         */
	        update: function () {
	            this.updateTransform();
	        },

	        /**
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        traverse: function (cb, context) {},

	        /**
	         * @protected
	         */
	        attrKV: function (key, value) {
	            if (key === 'position' || key === 'scale' || key === 'origin') {
	                // Copy the array
	                if (value) {
	                    var target = this[key];
	                    if (!target) {
	                        target = this[key] = [];
	                    }
	                    target[0] = value[0];
	                    target[1] = value[1];
	                }
	            }
	            else {
	                this[key] = value;
	            }
	        },

	        /**
	         * Hide the element
	         */
	        hide: function () {
	            this.ignore = true;
	            this.__zr && this.__zr.refresh();
	        },

	        /**
	         * Show the element
	         */
	        show: function () {
	            this.ignore = false;
	            this.__zr && this.__zr.refresh();
	        },

	        /**
	         * @param {string|Object} key
	         * @param {*} value
	         */
	        attr: function (key, value) {
	            if (typeof key === 'string') {
	                this.attrKV(key, value);
	            }
	            else if (zrUtil.isObject(key)) {
	                for (var name in key) {
	                    if (key.hasOwnProperty(name)) {
	                        this.attrKV(name, key[name]);
	                    }
	                }
	            }

	            this.dirty(false);

	            return this;
	        },

	        /**
	         * @param {module:zrender/graphic/Path} clipPath
	         */
	        setClipPath: function (clipPath) {
	            var zr = this.__zr;
	            if (zr) {
	                clipPath.addSelfToZr(zr);
	            }

	            // Remove previous clip path
	            if (this.clipPath && this.clipPath !== clipPath) {
	                this.removeClipPath();
	            }

	            this.clipPath = clipPath;
	            clipPath.__zr = zr;
	            clipPath.__clipTarget = this;

	            this.dirty(false);
	        },

	        /**
	         */
	        removeClipPath: function () {
	            var clipPath = this.clipPath;
	            if (clipPath) {
	                if (clipPath.__zr) {
	                    clipPath.removeSelfFromZr(clipPath.__zr);
	                }

	                clipPath.__zr = null;
	                clipPath.__clipTarget = null;
	                this.clipPath = null;

	                this.dirty(false);
	            }
	        },

	        /**
	         * Add self from zrender instance.
	         * Not recursively because it will be invoked when element added to storage.
	         * @param {module:zrender/ZRender} zr
	         */
	        addSelfToZr: function (zr) {
	            this.__zr = zr;
	            // 添加动画
	            var animators = this.animators;
	            if (animators) {
	                for (var i = 0; i < animators.length; i++) {
	                    zr.animation.addAnimator(animators[i]);
	                }
	            }

	            if (this.clipPath) {
	                this.clipPath.addSelfToZr(zr);
	            }
	        },

	        /**
	         * Remove self from zrender instance.
	         * Not recursively because it will be invoked when element added to storage.
	         * @param {module:zrender/ZRender} zr
	         */
	        removeSelfFromZr: function (zr) {
	            this.__zr = null;
	            // 移除动画
	            var animators = this.animators;
	            if (animators) {
	                for (var i = 0; i < animators.length; i++) {
	                    zr.animation.removeAnimator(animators[i]);
	                }
	            }

	            if (this.clipPath) {
	                this.clipPath.removeSelfFromZr(zr);
	            }
	        }
	    };

	    zrUtil.mixin(Element, Animatable);
	    zrUtil.mixin(Element, Transformable);
	    zrUtil.mixin(Element, Eventful);

	    module.exports = Element;


/***/ },
/* 271 */
/***/ function(module, exports) {

	/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */


	    var idStart = 0x0907;

	    module.exports = function () {
	        return idStart++;
	    };



/***/ },
/* 272 */
/***/ function(module, exports) {

	/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */


	    var arrySlice = Array.prototype.slice;

	    /**
	     * 事件分发器
	     * @alias module:zrender/mixin/Eventful
	     * @constructor
	     */
	    var Eventful = function () {
	        this._$handlers = {};
	    };

	    Eventful.prototype = {

	        constructor: Eventful,

	        /**
	         * 单次触发绑定，trigger后销毁
	         *
	         * @param {string} event 事件名
	         * @param {Function} handler 响应函数
	         * @param {Object} context
	         */
	        one: function (event, handler, context) {
	            var _h = this._$handlers;

	            if (!handler || !event) {
	                return this;
	            }

	            if (!_h[event]) {
	                _h[event] = [];
	            }

	            for (var i = 0; i < _h[event].length; i++) {
	                if (_h[event][i].h === handler) {
	                    return this;
	                }
	            }

	            _h[event].push({
	                h: handler,
	                one: true,
	                ctx: context || this
	            });

	            return this;
	        },

	        /**
	         * 绑定事件
	         * @param {string} event 事件名
	         * @param {Function} handler 事件处理函数
	         * @param {Object} [context]
	         */
	        on: function (event, handler, context) {
	            var _h = this._$handlers;

	            if (!handler || !event) {
	                return this;
	            }

	            if (!_h[event]) {
	                _h[event] = [];
	            }

	            for (var i = 0; i < _h[event].length; i++) {
	                if (_h[event][i].h === handler) {
	                    return this;
	                }
	            }

	            _h[event].push({
	                h: handler,
	                one: false,
	                ctx: context || this
	            });

	            return this;
	        },

	        /**
	         * 是否绑定了事件
	         * @param  {string}  event
	         * @return {boolean}
	         */
	        isSilent: function (event) {
	            var _h = this._$handlers;
	            return _h[event] && _h[event].length;
	        },

	        /**
	         * 解绑事件
	         * @param {string} event 事件名
	         * @param {Function} [handler] 事件处理函数
	         */
	        off: function (event, handler) {
	            var _h = this._$handlers;

	            if (!event) {
	                this._$handlers = {};
	                return this;
	            }

	            if (handler) {
	                if (_h[event]) {
	                    var newList = [];
	                    for (var i = 0, l = _h[event].length; i < l; i++) {
	                        if (_h[event][i]['h'] != handler) {
	                            newList.push(_h[event][i]);
	                        }
	                    }
	                    _h[event] = newList;
	                }

	                if (_h[event] && _h[event].length === 0) {
	                    delete _h[event];
	                }
	            }
	            else {
	                delete _h[event];
	            }

	            return this;
	        },

	        /**
	         * 事件分发
	         *
	         * @param {string} type 事件类型
	         */
	        trigger: function (type) {
	            if (this._$handlers[type]) {
	                var args = arguments;
	                var argLen = args.length;

	                if (argLen > 3) {
	                    args = arrySlice.call(args, 1);
	                }

	                var _h = this._$handlers[type];
	                var len = _h.length;
	                for (var i = 0; i < len;) {
	                    // Optimize advise from backbone
	                    switch (argLen) {
	                        case 1:
	                            _h[i]['h'].call(_h[i]['ctx']);
	                            break;
	                        case 2:
	                            _h[i]['h'].call(_h[i]['ctx'], args[1]);
	                            break;
	                        case 3:
	                            _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
	                            break;
	                        default:
	                            // have more than 2 given arguments
	                            _h[i]['h'].apply(_h[i]['ctx'], args);
	                            break;
	                    }

	                    if (_h[i]['one']) {
	                        _h.splice(i, 1);
	                        len--;
	                    }
	                    else {
	                        i++;
	                    }
	                }
	            }

	            return this;
	        },

	        /**
	         * 带有context的事件分发, 最后一个参数是事件回调的context
	         * @param {string} type 事件类型
	         */
	        triggerWithContext: function (type) {
	            if (this._$handlers[type]) {
	                var args = arguments;
	                var argLen = args.length;

	                if (argLen > 4) {
	                    args = arrySlice.call(args, 1, args.length - 1);
	                }
	                var ctx = args[args.length - 1];

	                var _h = this._$handlers[type];
	                var len = _h.length;
	                for (var i = 0; i < len;) {
	                    // Optimize advise from backbone
	                    switch (argLen) {
	                        case 1:
	                            _h[i]['h'].call(ctx);
	                            break;
	                        case 2:
	                            _h[i]['h'].call(ctx, args[1]);
	                            break;
	                        case 3:
	                            _h[i]['h'].call(ctx, args[1], args[2]);
	                            break;
	                        default:
	                            // have more than 2 given arguments
	                            _h[i]['h'].apply(ctx, args);
	                            break;
	                    }

	                    if (_h[i]['one']) {
	                        _h.splice(i, 1);
	                        len--;
	                    }
	                    else {
	                        i++;
	                    }
	                }
	            }

	            return this;
	        }
	    };

	    // 对象可以通过 onxxxx 绑定事件
	    /**
	     * @event module:zrender/mixin/Eventful#onclick
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseout
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousemove
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousewheel
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmousedown
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#onmouseup
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondrag
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragstart
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragend
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragenter
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragleave
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondragover
	     * @type {Function}
	     * @default null
	     */
	    /**
	     * @event module:zrender/mixin/Eventful#ondrop
	     * @type {Function}
	     * @default null
	     */

	    module.exports = Eventful;



/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */


	    var matrix = __webpack_require__(250);
	    var vector = __webpack_require__(249);
	    var mIdentity = matrix.identity;

	    var EPSILON = 5e-5;

	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }

	    /**
	     * @alias module:zrender/mixin/Transformable
	     * @constructor
	     */
	    var Transformable = function (opts) {
	        opts = opts || {};
	        // If there are no given position, rotation, scale
	        if (!opts.position) {
	            /**
	             * 平移
	             * @type {Array.<number>}
	             * @default [0, 0]
	             */
	            this.position = [0, 0];
	        }
	        if (opts.rotation == null) {
	            /**
	             * 旋转
	             * @type {Array.<number>}
	             * @default 0
	             */
	            this.rotation = 0;
	        }
	        if (!opts.scale) {
	            /**
	             * 缩放
	             * @type {Array.<number>}
	             * @default [1, 1]
	             */
	            this.scale = [1, 1];
	        }
	        /**
	         * 旋转和缩放的原点
	         * @type {Array.<number>}
	         * @default null
	         */
	        this.origin = this.origin || null;
	    };

	    var transformableProto = Transformable.prototype;
	    transformableProto.transform = null;

	    /**
	     * 判断是否需要有坐标变换
	     * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	     */
	    transformableProto.needLocalTransform = function () {
	        return isNotAroundZero(this.rotation)
	            || isNotAroundZero(this.position[0])
	            || isNotAroundZero(this.position[1])
	            || isNotAroundZero(this.scale[0] - 1)
	            || isNotAroundZero(this.scale[1] - 1);
	    };

	    transformableProto.updateTransform = function () {
	        var parent = this.parent;
	        var parentHasTransform = parent && parent.transform;
	        var needLocalTransform = this.needLocalTransform();

	        var m = this.transform;
	        if (!(needLocalTransform || parentHasTransform)) {
	            m && mIdentity(m);
	            return;
	        }

	        m = m || matrix.create();

	        if (needLocalTransform) {
	            this.getLocalTransform(m);
	        }
	        else {
	            mIdentity(m);
	        }

	        // 应用父节点变换
	        if (parentHasTransform) {
	            if (needLocalTransform) {
	                matrix.mul(m, parent.transform, m);
	            }
	            else {
	                matrix.copy(m, parent.transform);
	            }
	        }
	        // 保存这个变换矩阵
	        this.transform = m;

	        this.invTransform = this.invTransform || matrix.create();
	        matrix.invert(this.invTransform, m);
	    };

	    transformableProto.getLocalTransform = function (m) {
	        m = m || [];
	        mIdentity(m);

	        var origin = this.origin;

	        var scale = this.scale;
	        var rotation = this.rotation;
	        var position = this.position;
	        if (origin) {
	            // Translate to origin
	            m[4] -= origin[0];
	            m[5] -= origin[1];
	        }
	        matrix.scale(m, m, scale);
	        if (rotation) {
	            matrix.rotate(m, m, rotation);
	        }
	        if (origin) {
	            // Translate back from origin
	            m[4] += origin[0];
	            m[5] += origin[1];
	        }

	        m[4] += position[0];
	        m[5] += position[1];

	        return m;
	    };
	    /**
	     * 将自己的transform应用到context上
	     * @param {Context2D} ctx
	     */
	    transformableProto.setTransform = function (ctx) {
	        var m = this.transform;
	        var dpr = ctx.dpr || 1;
	        if (m) {
	            ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);
	        }
	        else {
	            ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	        }
	    };

	    transformableProto.restoreTransform = function (ctx) {
	        var m = this.transform;
	        var dpr = ctx.dpr || 1;
	        ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
	    }

	    var tmpTransform = [];

	    /**
	     * 分解`transform`矩阵到`position`, `rotation`, `scale`
	     */
	    transformableProto.decomposeTransform = function () {
	        if (!this.transform) {
	            return;
	        }
	        var parent = this.parent;
	        var m = this.transform;
	        if (parent && parent.transform) {
	            // Get local transform and decompose them to position, scale, rotation
	            matrix.mul(tmpTransform, parent.invTransform, m);
	            m = tmpTransform;
	        }
	        var sx = m[0] * m[0] + m[1] * m[1];
	        var sy = m[2] * m[2] + m[3] * m[3];
	        var position = this.position;
	        var scale = this.scale;
	        if (isNotAroundZero(sx - 1)) {
	            sx = Math.sqrt(sx);
	        }
	        if (isNotAroundZero(sy - 1)) {
	            sy = Math.sqrt(sy);
	        }
	        if (m[0] < 0) {
	            sx = -sx;
	        }
	        if (m[3] < 0) {
	            sy = -sy;
	        }
	        position[0] = m[4];
	        position[1] = m[5];
	        scale[0] = sx;
	        scale[1] = sy;
	        this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
	    };

	    /**
	     * Get global scale
	     * @return {Array.<number>}
	     */
	    transformableProto.getGlobalScale = function () {
	        var m = this.transform;
	        if (!m) {
	            return [1, 1];
	        }
	        var sx = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
	        var sy = Math.sqrt(m[2] * m[2] + m[3] * m[3]);
	        if (m[0] < 0) {
	            sx = -sx;
	        }
	        if (m[3] < 0) {
	            sy = -sy;
	        }
	        return [sx, sy];
	    };
	    /**
	     * 变换坐标位置到 shape 的局部坐标空间
	     * @method
	     * @param {number} x
	     * @param {number} y
	     * @return {Array.<number>}
	     */
	    transformableProto.transformCoordToLocal = function (x, y) {
	        var v2 = [x, y];
	        var invTransform = this.invTransform;
	        if (invTransform) {
	            vector.applyTransform(v2, v2, invTransform);
	        }
	        return v2;
	    };

	    /**
	     * 变换局部坐标位置到全局坐标空间
	     * @method
	     * @param {number} x
	     * @param {number} y
	     * @return {Array.<number>}
	     */
	    transformableProto.transformCoordToGlobal = function (x, y) {
	        var v2 = [x, y];
	        var transform = this.transform;
	        if (transform) {
	            vector.applyTransform(v2, v2, transform);
	        }
	        return v2;
	    };

	    module.exports = Transformable;



/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/mixin/Animatable
	 */


	    var Animator = __webpack_require__(275);
	    var util = __webpack_require__(243);
	    var isString = util.isString;
	    var isFunction = util.isFunction;
	    var isObject = util.isObject;
	    var log = __webpack_require__(279);

	    /**
	     * @alias modue:zrender/mixin/Animatable
	     * @constructor
	     */
	    var Animatable = function () {

	        /**
	         * @type {Array.<module:zrender/animation/Animator>}
	         * @readOnly
	         */
	        this.animators = [];
	    };

	    Animatable.prototype = {

	        constructor: Animatable,

	        /**
	         * 动画
	         *
	         * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性
	         * @param {boolean} [loop] 动画是否循环
	         * @return {module:zrender/animation/Animator}
	         * @example:
	         *     el.animate('style', false)
	         *         .when(1000, {x: 10} )
	         *         .done(function(){ // Animation done })
	         *         .start()
	         */
	        animate: function (path, loop) {
	            var target;
	            var animatingShape = false;
	            var el = this;
	            var zr = this.__zr;
	            if (path) {
	                var pathSplitted = path.split('.');
	                var prop = el;
	                // If animating shape
	                animatingShape = pathSplitted[0] === 'shape';
	                for (var i = 0, l = pathSplitted.length; i < l; i++) {
	                    if (!prop) {
	                        continue;
	                    }
	                    prop = prop[pathSplitted[i]];
	                }
	                if (prop) {
	                    target = prop;
	                }
	            }
	            else {
	                target = el;
	            }

	            if (!target) {
	                log(
	                    'Property "'
	                    + path
	                    + '" is not existed in element '
	                    + el.id
	                );
	                return;
	            }

	            var animators = el.animators;

	            var animator = new Animator(target, loop);

	            animator.during(function (target) {
	                el.dirty(animatingShape);
	            })
	            .done(function () {
	                // FIXME Animator will not be removed if use `Animator#stop` to stop animation
	                animators.splice(util.indexOf(animators, animator), 1);
	            });

	            animators.push(animator);

	            // If animate after added to the zrender
	            if (zr) {
	                zr.animation.addAnimator(animator);
	            }

	            return animator;
	        },

	        /**
	         * 停止动画
	         * @param {boolean} forwardToLast If move to last frame before stop
	         */
	        stopAnimation: function (forwardToLast) {
	            var animators = this.animators;
	            var len = animators.length;
	            for (var i = 0; i < len; i++) {
	                animators[i].stop(forwardToLast);
	            }
	            animators.length = 0;

	            return this;
	        },

	        /**
	         * @param {Object} target
	         * @param {number} [time=500] Time in ms
	         * @param {string} [easing='linear']
	         * @param {number} [delay=0]
	         * @param {Function} [callback]
	         *
	         * @example
	         *  // Animate position
	         *  el.animateTo({
	         *      position: [10, 10]
	         *  }, function () { // done })
	         *
	         *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
	         *  el.animateTo({
	         *      shape: {
	         *          width: 500
	         *      },
	         *      style: {
	         *          fill: 'red'
	         *      }
	         *      position: [10, 10]
	         *  }, 100, 100, 'cubicOut', function () { // done })
	         */
	         // TODO Return animation key
	        animateTo: function (target, time, delay, easing, callback) {
	            // animateTo(target, time, easing, callback);
	            if (isString(delay)) {
	                callback = easing;
	                easing = delay;
	                delay = 0;
	            }
	            // animateTo(target, time, delay, callback);
	            else if (isFunction(easing)) {
	                callback = easing;
	                easing = 'linear';
	                delay = 0;
	            }
	            // animateTo(target, time, callback);
	            else if (isFunction(delay)) {
	                callback = delay;
	                delay = 0;
	            }
	            // animateTo(target, callback)
	            else if (isFunction(time)) {
	                callback = time;
	                time = 500;
	            }
	            // animateTo(target)
	            else if (!time) {
	                time = 500;
	            }
	            // Stop all previous animations
	            this.stopAnimation();
	            this._animateToShallow('', this, target, time, delay, easing, callback);

	            // Animators may be removed immediately after start
	            // if there is nothing to animate
	            var animators = this.animators.slice();
	            var count = animators.length;
	            function done() {
	                count--;
	                if (!count) {
	                    callback && callback();
	                }
	            }

	            // No animators. This should be checked before animators[i].start(),
	            // because 'done' may be executed immediately if no need to animate.
	            if (!count) {
	                callback && callback();
	            }
	            // Start after all animators created
	            // Incase any animator is done immediately when all animation properties are not changed
	            for (var i = 0; i < animators.length; i++) {
	                animators[i]
	                    .done(done)
	                    .start(easing);
	            }
	        },

	        /**
	         * @private
	         * @param {string} path=''
	         * @param {Object} source=this
	         * @param {Object} target
	         * @param {number} [time=500]
	         * @param {number} [delay=0]
	         *
	         * @example
	         *  // Animate position
	         *  el._animateToShallow({
	         *      position: [10, 10]
	         *  })
	         *
	         *  // Animate shape, style and position in 100ms, delayed 100ms
	         *  el._animateToShallow({
	         *      shape: {
	         *          width: 500
	         *      },
	         *      style: {
	         *          fill: 'red'
	         *      }
	         *      position: [10, 10]
	         *  }, 100, 100)
	         */
	        _animateToShallow: function (path, source, target, time, delay) {
	            var objShallow = {};
	            var propertyCount = 0;
	            for (var name in target) {
	                if (!target.hasOwnProperty(name)) {
	                    continue;
	                }

	                if (source[name] != null) {
	                    if (isObject(target[name]) && !util.isArrayLike(target[name])) {
	                        this._animateToShallow(
	                            path ? path + '.' + name : name,
	                            source[name],
	                            target[name],
	                            time,
	                            delay
	                        );
	                    }
	                    else {
	                        objShallow[name] = target[name];
	                        propertyCount++;
	                    }
	                }
	                else if (target[name] != null) {
	                    // Attr directly if not has property
	                    // FIXME, if some property not needed for element ?
	                    if (!path) {
	                        this.attr(name, target[name]);
	                    }
	                    else {  // Shape or style
	                        var props = {};
	                        props[path] = {};
	                        props[path][name] = target[name];
	                        this.attr(props);
	                    }
	                }
	            }

	            if (propertyCount > 0) {
	                this.animate(path, false)
	                    .when(time == null ? 500 : time, objShallow)
	                    .delay(delay || 0);
	            }

	            return this;
	        }
	    };

	    module.exports = Animatable;


/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/animation/Animator
	 */


	    var Clip = __webpack_require__(276);
	    var color = __webpack_require__(278);
	    var util = __webpack_require__(243);
	    var isArrayLike = util.isArrayLike;

	    var arraySlice = Array.prototype.slice;

	    function defaultGetter(target, key) {
	        return target[key];
	    }

	    function defaultSetter(target, key, value) {
	        target[key] = value;
	    }

	    /**
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} percent
	     * @return {number}
	     */
	    function interpolateNumber(p0, p1, percent) {
	        return (p1 - p0) * percent + p0;
	    }

	    /**
	     * @param  {string} p0
	     * @param  {string} p1
	     * @param  {number} percent
	     * @return {string}
	     */
	    function interpolateString(p0, p1, percent) {
	        return percent > 0.5 ? p1 : p0;
	    }

	    /**
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {number} percent
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function interpolateArray(p0, p1, percent, out, arrDim) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = interpolateNumber(p0[i], p1[i], percent);
	            }
	        }
	        else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = interpolateNumber(
	                        p0[i][j], p1[i][j], percent
	                    );
	                }
	            }
	        }
	    }

	    // arr0 is source array, arr1 is target array.
	    // Do some preprocess to avoid error happened when interpolating from arr0 to arr1
	    function fillArr(arr0, arr1, arrDim) {
	        var arr0Len = arr0.length;
	        var arr1Len = arr1.length;
	        if (arr0Len !== arr1Len) {
	            // FIXME Not work for TypedArray
	            var isPreviousLarger = arr0Len > arr1Len;
	            if (isPreviousLarger) {
	                // Cut the previous
	                arr0.length = arr1Len;
	            }
	            else {
	                // Fill the previous
	                for (var i = arr0Len; i < arr1Len; i++) {
	                    arr0.push(
	                        arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i])
	                    );
	                }
	            }
	        }
	        // Handling NaN value
	        var len2 = arr0[0] && arr0[0].length;
	        for (var i = 0; i < arr0.length; i++) {
	            if (arrDim === 1) {
	                if (isNaN(arr0[i])) {
	                    arr0[i] = arr1[i];
	                }
	            }
	            else {
	                for (var j = 0; j < len2; j++) {
	                    if (isNaN(arr0[i][j])) {
	                        arr0[i][j] = arr1[i][j];
	                    }
	                }
	            }
	        }
	    }

	    /**
	     * @param  {Array} arr0
	     * @param  {Array} arr1
	     * @param  {number} arrDim
	     * @return {boolean}
	     */
	    function isArraySame(arr0, arr1, arrDim) {
	        if (arr0 === arr1) {
	            return true;
	        }
	        var len = arr0.length;
	        if (len !== arr1.length) {
	            return false;
	        }
	        if (arrDim === 1) {
	            for (var i = 0; i < len; i++) {
	                if (arr0[i] !== arr1[i]) {
	                    return false;
	                }
	            }
	        }
	        else {
	            var len2 = arr0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    if (arr0[i][j] !== arr1[i][j]) {
	                        return false;
	                    }
	                }
	            }
	        }
	        return true;
	    }

	    /**
	     * Catmull Rom interpolate array
	     * @param  {Array} p0
	     * @param  {Array} p1
	     * @param  {Array} p2
	     * @param  {Array} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @param  {Array} out
	     * @param  {number} arrDim
	     */
	    function catmullRomInterpolateArray(
	        p0, p1, p2, p3, t, t2, t3, out, arrDim
	    ) {
	        var len = p0.length;
	        if (arrDim == 1) {
	            for (var i = 0; i < len; i++) {
	                out[i] = catmullRomInterpolate(
	                    p0[i], p1[i], p2[i], p3[i], t, t2, t3
	                );
	            }
	        }
	        else {
	            var len2 = p0[0].length;
	            for (var i = 0; i < len; i++) {
	                for (var j = 0; j < len2; j++) {
	                    out[i][j] = catmullRomInterpolate(
	                        p0[i][j], p1[i][j], p2[i][j], p3[i][j],
	                        t, t2, t3
	                    );
	                }
	            }
	        }
	    }

	    /**
	     * Catmull Rom interpolate number
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {number} t2
	     * @param  {number} t3
	     * @return {number}
	     */
	    function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	        var v0 = (p2 - p0) * 0.5;
	        var v1 = (p3 - p1) * 0.5;
	        return (2 * (p1 - p2) + v0 + v1) * t3
	                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                + v0 * t + p1;
	    }

	    function cloneValue(value) {
	        if (isArrayLike(value)) {
	            var len = value.length;
	            if (isArrayLike(value[0])) {
	                var ret = [];
	                for (var i = 0; i < len; i++) {
	                    ret.push(arraySlice.call(value[i]));
	                }
	                return ret;
	            }

	            return arraySlice.call(value);
	        }

	        return value;
	    }

	    function rgba2String(rgba) {
	        rgba[0] = Math.floor(rgba[0]);
	        rgba[1] = Math.floor(rgba[1]);
	        rgba[2] = Math.floor(rgba[2]);

	        return 'rgba(' + rgba.join(',') + ')';
	    }

	    function createTrackClip (animator, easing, oneTrackDone, keyframes, propName) {
	        var getter = animator._getter;
	        var setter = animator._setter;
	        var useSpline = easing === 'spline';

	        var trackLen = keyframes.length;
	        if (!trackLen) {
	            return;
	        }
	        // Guess data type
	        var firstVal = keyframes[0].value;
	        var isValueArray = isArrayLike(firstVal);
	        var isValueColor = false;
	        var isValueString = false;

	        // For vertices morphing
	        var arrDim = (
	                isValueArray
	                && isArrayLike(firstVal[0])
	            )
	            ? 2 : 1;
	        var trackMaxTime;
	        // Sort keyframe as ascending
	        keyframes.sort(function(a, b) {
	            return a.time - b.time;
	        });

	        trackMaxTime = keyframes[trackLen - 1].time;
	        // Percents of each keyframe
	        var kfPercents = [];
	        // Value of each keyframe
	        var kfValues = [];
	        var prevValue = keyframes[0].value;
	        var isAllValueEqual = true;
	        for (var i = 0; i < trackLen; i++) {
	            kfPercents.push(keyframes[i].time / trackMaxTime);
	            // Assume value is a color when it is a string
	            var value = keyframes[i].value;

	            // Check if value is equal, deep check if value is array
	            if (!((isValueArray && isArraySame(value, prevValue, arrDim))
	                || (!isValueArray && value === prevValue))) {
	                isAllValueEqual = false;
	            }
	            prevValue = value;

	            // Try converting a string to a color array
	            if (typeof value == 'string') {
	                var colorArray = color.parse(value);
	                if (colorArray) {
	                    value = colorArray;
	                    isValueColor = true;
	                }
	                else {
	                    isValueString = true;
	                }
	            }
	            kfValues.push(value);
	        }
	        if (isAllValueEqual) {
	            return;
	        }

	        var lastValue = kfValues[trackLen - 1];
	        // Polyfill array and NaN value
	        for (var i = 0; i < trackLen - 1; i++) {
	            if (isValueArray) {
	                fillArr(kfValues[i], lastValue, arrDim);
	            }
	            else {
	                if (isNaN(kfValues[i]) && !isNaN(lastValue) && !isValueString && !isValueColor) {
	                    kfValues[i] = lastValue;
	                }
	            }
	        }
	        isValueArray && fillArr(getter(animator._target, propName), lastValue, arrDim);

	        // Cache the key of last frame to speed up when
	        // animation playback is sequency
	        var lastFrame = 0;
	        var lastFramePercent = 0;
	        var start;
	        var w;
	        var p0;
	        var p1;
	        var p2;
	        var p3;

	        if (isValueColor) {
	            var rgba = [0, 0, 0, 0];
	        }

	        var onframe = function (target, percent) {
	            // Find the range keyframes
	            // kf1-----kf2---------current--------kf3
	            // find kf2 and kf3 and do interpolation
	            var frame;
	            // In the easing function like elasticOut, percent may less than 0
	            if (percent < 0) {
	                frame = 0;
	            }
	            else if (percent < lastFramePercent) {
	                // Start from next key
	                // PENDING start from lastFrame ?
	                start = Math.min(lastFrame + 1, trackLen - 1);
	                for (frame = start; frame >= 0; frame--) {
	                    if (kfPercents[frame] <= percent) {
	                        break;
	                    }
	                }
	                // PENDING really need to do this ?
	                frame = Math.min(frame, trackLen - 2);
	            }
	            else {
	                for (frame = lastFrame; frame < trackLen; frame++) {
	                    if (kfPercents[frame] > percent) {
	                        break;
	                    }
	                }
	                frame = Math.min(frame - 1, trackLen - 2);
	            }
	            lastFrame = frame;
	            lastFramePercent = percent;

	            var range = (kfPercents[frame + 1] - kfPercents[frame]);
	            if (range === 0) {
	                return;
	            }
	            else {
	                w = (percent - kfPercents[frame]) / range;
	            }
	            if (useSpline) {
	                p1 = kfValues[frame];
	                p0 = kfValues[frame === 0 ? frame : frame - 1];
	                p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	                p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];
	                if (isValueArray) {
	                    catmullRomInterpolateArray(
	                        p0, p1, p2, p3, w, w * w, w * w * w,
	                        getter(target, propName),
	                        arrDim
	                    );
	                }
	                else {
	                    var value;
	                    if (isValueColor) {
	                        value = catmullRomInterpolateArray(
	                            p0, p1, p2, p3, w, w * w, w * w * w,
	                            rgba, 1
	                        );
	                        value = rgba2String(rgba);
	                    }
	                    else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(p1, p2, w);
	                    }
	                    else {
	                        value = catmullRomInterpolate(
	                            p0, p1, p2, p3, w, w * w, w * w * w
	                        );
	                    }
	                    setter(
	                        target,
	                        propName,
	                        value
	                    );
	                }
	            }
	            else {
	                if (isValueArray) {
	                    interpolateArray(
	                        kfValues[frame], kfValues[frame + 1], w,
	                        getter(target, propName),
	                        arrDim
	                    );
	                }
	                else {
	                    var value;
	                    if (isValueColor) {
	                        interpolateArray(
	                            kfValues[frame], kfValues[frame + 1], w,
	                            rgba, 1
	                        );
	                        value = rgba2String(rgba);
	                    }
	                    else if (isValueString) {
	                        // String is step(0.5)
	                        return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	                    }
	                    else {
	                        value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	                    }
	                    setter(
	                        target,
	                        propName,
	                        value
	                    );
	                }
	            }
	        };

	        var clip = new Clip({
	            target: animator._target,
	            life: trackMaxTime,
	            loop: animator._loop,
	            delay: animator._delay,
	            onframe: onframe,
	            ondestroy: oneTrackDone
	        });

	        if (easing && easing !== 'spline') {
	            clip.easing = easing;
	        }

	        return clip;
	    }

	    /**
	     * @alias module:zrender/animation/Animator
	     * @constructor
	     * @param {Object} target
	     * @param {boolean} loop
	     * @param {Function} getter
	     * @param {Function} setter
	     */
	    var Animator = function(target, loop, getter, setter) {
	        this._tracks = {};
	        this._target = target;

	        this._loop = loop || false;

	        this._getter = getter || defaultGetter;
	        this._setter = setter || defaultSetter;

	        this._clipCount = 0;

	        this._delay = 0;

	        this._doneList = [];

	        this._onframeList = [];

	        this._clipList = [];
	    };

	    Animator.prototype = {
	        /**
	         * 设置动画关键帧
	         * @param  {number} time 关键帧时间，单位是ms
	         * @param  {Object} props 关键帧的属性值，key-value表示
	         * @return {module:zrender/animation/Animator}
	         */
	        when: function(time /* ms */, props) {
	            var tracks = this._tracks;
	            for (var propName in props) {
	                if (!props.hasOwnProperty(propName)) {
	                    continue;
	                }

	                if (!tracks[propName]) {
	                    tracks[propName] = [];
	                    // Invalid value
	                    var value = this._getter(this._target, propName);
	                    if (value == null) {
	                        // zrLog('Invalid property ' + propName);
	                        continue;
	                    }
	                    // If time is 0
	                    //  Then props is given initialize value
	                    // Else
	                    //  Initialize value from current prop value
	                    if (time !== 0) {
	                        tracks[propName].push({
	                            time: 0,
	                            value: cloneValue(value)
	                        });
	                    }
	                }
	                tracks[propName].push({
	                    time: time,
	                    value: props[propName]
	                });
	            }
	            return this;
	        },
	        /**
	         * 添加动画每一帧的回调函数
	         * @param  {Function} callback
	         * @return {module:zrender/animation/Animator}
	         */
	        during: function (callback) {
	            this._onframeList.push(callback);
	            return this;
	        },

	        _doneCallback: function () {
	            // Clear all tracks
	            this._tracks = {};
	            // Clear all clips
	            this._clipList.length = 0;

	            var doneList = this._doneList;
	            var len = doneList.length;
	            for (var i = 0; i < len; i++) {
	                doneList[i].call(this);
	            }
	        },
	        /**
	         * 开始执行动画
	         * @param  {string|Function} easing
	         *         动画缓动函数，详见{@link module:zrender/animation/easing}
	         * @return {module:zrender/animation/Animator}
	         */
	        start: function (easing) {

	            var self = this;
	            var clipCount = 0;

	            var oneTrackDone = function() {
	                clipCount--;
	                if (!clipCount) {
	                    self._doneCallback();
	                }
	            };

	            var lastClip;
	            for (var propName in this._tracks) {
	                if (!this._tracks.hasOwnProperty(propName)) {
	                    continue;
	                }
	                var clip = createTrackClip(
	                    this, easing, oneTrackDone,
	                    this._tracks[propName], propName
	                );
	                if (clip) {
	                    this._clipList.push(clip);
	                    clipCount++;

	                    // If start after added to animation
	                    if (this.animation) {
	                        this.animation.addClip(clip);
	                    }

	                    lastClip = clip;
	                }
	            }

	            // Add during callback on the last clip
	            if (lastClip) {
	                var oldOnFrame = lastClip.onframe;
	                lastClip.onframe = function (target, percent) {
	                    oldOnFrame(target, percent);

	                    for (var i = 0; i < self._onframeList.length; i++) {
	                        self._onframeList[i](target, percent);
	                    }
	                };
	            }

	            if (!clipCount) {
	                this._doneCallback();
	            }
	            return this;
	        },
	        /**
	         * 停止动画
	         * @param {boolean} forwardToLast If move to last frame before stop
	         */
	        stop: function (forwardToLast) {
	            var clipList = this._clipList;
	            var animation = this.animation;
	            for (var i = 0; i < clipList.length; i++) {
	                var clip = clipList[i];
	                if (forwardToLast) {
	                    // Move to last frame before stop
	                    clip.onframe(this._target, 1);
	                }
	                animation && animation.removeClip(clip);
	            }
	            clipList.length = 0;
	        },
	        /**
	         * 设置动画延迟开始的时间
	         * @param  {number} time 单位ms
	         * @return {module:zrender/animation/Animator}
	         */
	        delay: function (time) {
	            this._delay = time;
	            return this;
	        },
	        /**
	         * 添加动画结束的回调
	         * @param  {Function} cb
	         * @return {module:zrender/animation/Animator}
	         */
	        done: function(cb) {
	            if (cb) {
	                this._doneList.push(cb);
	            }
	            return this;
	        },

	        /**
	         * @return {Array.<module:zrender/animation/Clip>}
	         */
	        getClips: function () {
	            return this._clipList;
	        }
	    };

	    module.exports = Animator;


/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 *
	 * TODO pause
	 */


	    var easingFuncs = __webpack_require__(277);

	    function Clip(options) {

	        this._target = options.target;

	        // 生命周期
	        this._life = options.life || 1000;
	        // 延时
	        this._delay = options.delay || 0;
	        // 开始时间
	        // this._startTime = new Date().getTime() + this._delay;// 单位毫秒
	        this._initialized = false;

	        // 是否循环
	        this.loop = options.loop == null ? false : options.loop;

	        this.gap = options.gap || 0;

	        this.easing = options.easing || 'Linear';

	        this.onframe = options.onframe;
	        this.ondestroy = options.ondestroy;
	        this.onrestart = options.onrestart;
	    }

	    Clip.prototype = {

	        constructor: Clip,

	        step: function (globalTime) {
	            // Set startTime on first step, or _startTime may has milleseconds different between clips
	            // PENDING
	            if (!this._initialized) {
	                this._startTime = globalTime + this._delay;
	                this._initialized = true;
	            }

	            var percent = (globalTime - this._startTime) / this._life;

	            // 还没开始
	            if (percent < 0) {
	                return;
	            }

	            percent = Math.min(percent, 1);

	            var easing = this.easing;
	            var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	            var schedule = typeof easingFunc === 'function'
	                ? easingFunc(percent)
	                : percent;

	            this.fire('frame', schedule);

	            // 结束
	            if (percent == 1) {
	                if (this.loop) {
	                    this.restart (globalTime);
	                    // 重新开始周期
	                    // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	                    return 'restart';
	                }

	                // 动画完成将这个控制器标识为待删除
	                // 在Animation.update中进行批量删除
	                this._needsRemove = true;
	                return 'destroy';
	            }

	            return null;
	        },

	        restart: function (globalTime) {
	            var remainder = (globalTime - this._startTime) % this._life;
	            this._startTime = globalTime - remainder + this.gap;

	            this._needsRemove = false;
	        },

	        fire: function(eventType, arg) {
	            eventType = 'on' + eventType;
	            if (this[eventType]) {
	                this[eventType](this._target, arg);
	            }
	        }
	    };

	    module.exports = Clip;



/***/ },
/* 277 */
/***/ function(module, exports) {

	/**
	 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	 * @see http://sole.github.io/tween.js/examples/03_graphs.html
	 * @exports zrender/animation/easing
	 */

	    var easing = {
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        linear: function (k) {
	            return k;
	        },

	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticIn: function (k) {
	            return k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticOut: function (k) {
	            return k * (2 - k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quadraticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k;
	            }
	            return -0.5 * (--k * (k - 2) - 1);
	        },

	        // 三次方的缓动（t^3）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicIn: function (k) {
	            return k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicOut: function (k) {
	            return --k * k * k + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        cubicInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k;
	            }
	            return 0.5 * ((k -= 2) * k * k + 2);
	        },

	        // 四次方的缓动（t^4）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticIn: function (k) {
	            return k * k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticOut: function (k) {
	            return 1 - (--k * k * k * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quarticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k * k;
	            }
	            return -0.5 * ((k -= 2) * k * k * k - 2);
	        },

	        // 五次方的缓动（t^5）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticIn: function (k) {
	            return k * k * k * k * k;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticOut: function (k) {
	            return --k * k * k * k * k + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        quinticInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return 0.5 * k * k * k * k * k;
	            }
	            return 0.5 * ((k -= 2) * k * k * k * k + 2);
	        },

	        // 正弦曲线的缓动（sin(t)）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalIn: function (k) {
	            return 1 - Math.cos(k * Math.PI / 2);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalOut: function (k) {
	            return Math.sin(k * Math.PI / 2);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        sinusoidalInOut: function (k) {
	            return 0.5 * (1 - Math.cos(Math.PI * k));
	        },

	        // 指数曲线的缓动（2^t）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialIn: function (k) {
	            return k === 0 ? 0 : Math.pow(1024, k - 1);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialOut: function (k) {
	            return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        exponentialInOut: function (k) {
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if ((k *= 2) < 1) {
	                return 0.5 * Math.pow(1024, k - 1);
	            }
	            return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	        },

	        // 圆形曲线的缓动（sqrt(1-t^2)）
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularIn: function (k) {
	            return 1 - Math.sqrt(1 - k * k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularOut: function (k) {
	            return Math.sqrt(1 - (--k * k));
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        circularInOut: function (k) {
	            if ((k *= 2) < 1) {
	                return -0.5 * (Math.sqrt(1 - k * k) - 1);
	            }
	            return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	        },

	        // 创建类似于弹簧在停止前来回振荡的动画
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticIn: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            return -(a * Math.pow(2, 10 * (k -= 1)) *
	                        Math.sin((k - s) * (2 * Math.PI) / p));
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticOut: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            return (a * Math.pow(2, -10 * k) *
	                    Math.sin((k - s) * (2 * Math.PI) / p) + 1);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        elasticInOut: function (k) {
	            var s;
	            var a = 0.1;
	            var p = 0.4;
	            if (k === 0) {
	                return 0;
	            }
	            if (k === 1) {
	                return 1;
	            }
	            if (!a || a < 1) {
	                a = 1; s = p / 4;
	            }
	            else {
	                s = p * Math.asin(1 / a) / (2 * Math.PI);
	            }
	            if ((k *= 2) < 1) {
	                return -0.5 * (a * Math.pow(2, 10 * (k -= 1))
	                    * Math.sin((k - s) * (2 * Math.PI) / p));
	            }
	            return a * Math.pow(2, -10 * (k -= 1))
	                    * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;

	        },

	        // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backIn: function (k) {
	            var s = 1.70158;
	            return k * k * ((s + 1) * k - s);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backOut: function (k) {
	            var s = 1.70158;
	            return --k * k * ((s + 1) * k + s) + 1;
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        backInOut: function (k) {
	            var s = 1.70158 * 1.525;
	            if ((k *= 2) < 1) {
	                return 0.5 * (k * k * ((s + 1) * k - s));
	            }
	            return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	        },

	        // 创建弹跳效果
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceIn: function (k) {
	            return 1 - easing.bounceOut(1 - k);
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceOut: function (k) {
	            if (k < (1 / 2.75)) {
	                return 7.5625 * k * k;
	            }
	            else if (k < (2 / 2.75)) {
	                return 7.5625 * (k -= (1.5 / 2.75)) * k + 0.75;
	            }
	            else if (k < (2.5 / 2.75)) {
	                return 7.5625 * (k -= (2.25 / 2.75)) * k + 0.9375;
	            }
	            else {
	                return 7.5625 * (k -= (2.625 / 2.75)) * k + 0.984375;
	            }
	        },
	        /**
	        * @param {number} k
	        * @return {number}
	        */
	        bounceInOut: function (k) {
	            if (k < 0.5) {
	                return easing.bounceIn(k * 2) * 0.5;
	            }
	            return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	        }
	    };

	    module.exports = easing;




/***/ },
/* 278 */
/***/ function(module, exports) {

	/**
	 * @module zrender/tool/color
	 */


	    var kCSSColorTable = {
	        'transparent': [0,0,0,0], 'aliceblue': [240,248,255,1],
	        'antiquewhite': [250,235,215,1], 'aqua': [0,255,255,1],
	        'aquamarine': [127,255,212,1], 'azure': [240,255,255,1],
	        'beige': [245,245,220,1], 'bisque': [255,228,196,1],
	        'black': [0,0,0,1], 'blanchedalmond': [255,235,205,1],
	        'blue': [0,0,255,1], 'blueviolet': [138,43,226,1],
	        'brown': [165,42,42,1], 'burlywood': [222,184,135,1],
	        'cadetblue': [95,158,160,1], 'chartreuse': [127,255,0,1],
	        'chocolate': [210,105,30,1], 'coral': [255,127,80,1],
	        'cornflowerblue': [100,149,237,1], 'cornsilk': [255,248,220,1],
	        'crimson': [220,20,60,1], 'cyan': [0,255,255,1],
	        'darkblue': [0,0,139,1], 'darkcyan': [0,139,139,1],
	        'darkgoldenrod': [184,134,11,1], 'darkgray': [169,169,169,1],
	        'darkgreen': [0,100,0,1], 'darkgrey': [169,169,169,1],
	        'darkkhaki': [189,183,107,1], 'darkmagenta': [139,0,139,1],
	        'darkolivegreen': [85,107,47,1], 'darkorange': [255,140,0,1],
	        'darkorchid': [153,50,204,1], 'darkred': [139,0,0,1],
	        'darksalmon': [233,150,122,1], 'darkseagreen': [143,188,143,1],
	        'darkslateblue': [72,61,139,1], 'darkslategray': [47,79,79,1],
	        'darkslategrey': [47,79,79,1], 'darkturquoise': [0,206,209,1],
	        'darkviolet': [148,0,211,1], 'deeppink': [255,20,147,1],
	        'deepskyblue': [0,191,255,1], 'dimgray': [105,105,105,1],
	        'dimgrey': [105,105,105,1], 'dodgerblue': [30,144,255,1],
	        'firebrick': [178,34,34,1], 'floralwhite': [255,250,240,1],
	        'forestgreen': [34,139,34,1], 'fuchsia': [255,0,255,1],
	        'gainsboro': [220,220,220,1], 'ghostwhite': [248,248,255,1],
	        'gold': [255,215,0,1], 'goldenrod': [218,165,32,1],
	        'gray': [128,128,128,1], 'green': [0,128,0,1],
	        'greenyellow': [173,255,47,1], 'grey': [128,128,128,1],
	        'honeydew': [240,255,240,1], 'hotpink': [255,105,180,1],
	        'indianred': [205,92,92,1], 'indigo': [75,0,130,1],
	        'ivory': [255,255,240,1], 'khaki': [240,230,140,1],
	        'lavender': [230,230,250,1], 'lavenderblush': [255,240,245,1],
	        'lawngreen': [124,252,0,1], 'lemonchiffon': [255,250,205,1],
	        'lightblue': [173,216,230,1], 'lightcoral': [240,128,128,1],
	        'lightcyan': [224,255,255,1], 'lightgoldenrodyellow': [250,250,210,1],
	        'lightgray': [211,211,211,1], 'lightgreen': [144,238,144,1],
	        'lightgrey': [211,211,211,1], 'lightpink': [255,182,193,1],
	        'lightsalmon': [255,160,122,1], 'lightseagreen': [32,178,170,1],
	        'lightskyblue': [135,206,250,1], 'lightslategray': [119,136,153,1],
	        'lightslategrey': [119,136,153,1], 'lightsteelblue': [176,196,222,1],
	        'lightyellow': [255,255,224,1], 'lime': [0,255,0,1],
	        'limegreen': [50,205,50,1], 'linen': [250,240,230,1],
	        'magenta': [255,0,255,1], 'maroon': [128,0,0,1],
	        'mediumaquamarine': [102,205,170,1], 'mediumblue': [0,0,205,1],
	        'mediumorchid': [186,85,211,1], 'mediumpurple': [147,112,219,1],
	        'mediumseagreen': [60,179,113,1], 'mediumslateblue': [123,104,238,1],
	        'mediumspringgreen': [0,250,154,1], 'mediumturquoise': [72,209,204,1],
	        'mediumvioletred': [199,21,133,1], 'midnightblue': [25,25,112,1],
	        'mintcream': [245,255,250,1], 'mistyrose': [255,228,225,1],
	        'moccasin': [255,228,181,1], 'navajowhite': [255,222,173,1],
	        'navy': [0,0,128,1], 'oldlace': [253,245,230,1],
	        'olive': [128,128,0,1], 'olivedrab': [107,142,35,1],
	        'orange': [255,165,0,1], 'orangered': [255,69,0,1],
	        'orchid': [218,112,214,1], 'palegoldenrod': [238,232,170,1],
	        'palegreen': [152,251,152,1], 'paleturquoise': [175,238,238,1],
	        'palevioletred': [219,112,147,1], 'papayawhip': [255,239,213,1],
	        'peachpuff': [255,218,185,1], 'peru': [205,133,63,1],
	        'pink': [255,192,203,1], 'plum': [221,160,221,1],
	        'powderblue': [176,224,230,1], 'purple': [128,0,128,1],
	        'red': [255,0,0,1], 'rosybrown': [188,143,143,1],
	        'royalblue': [65,105,225,1], 'saddlebrown': [139,69,19,1],
	        'salmon': [250,128,114,1], 'sandybrown': [244,164,96,1],
	        'seagreen': [46,139,87,1], 'seashell': [255,245,238,1],
	        'sienna': [160,82,45,1], 'silver': [192,192,192,1],
	        'skyblue': [135,206,235,1], 'slateblue': [106,90,205,1],
	        'slategray': [112,128,144,1], 'slategrey': [112,128,144,1],
	        'snow': [255,250,250,1], 'springgreen': [0,255,127,1],
	        'steelblue': [70,130,180,1], 'tan': [210,180,140,1],
	        'teal': [0,128,128,1], 'thistle': [216,191,216,1],
	        'tomato': [255,99,71,1], 'turquoise': [64,224,208,1],
	        'violet': [238,130,238,1], 'wheat': [245,222,179,1],
	        'white': [255,255,255,1], 'whitesmoke': [245,245,245,1],
	        'yellow': [255,255,0,1], 'yellowgreen': [154,205,50,1]
	    };

	    function clampCssByte(i) {  // Clamp to integer 0 .. 255.
	        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 255 ? 255 : i;
	    }

	    function clampCssAngle(i) {  // Clamp to integer 0 .. 360.
	        i = Math.round(i);  // Seems to be what Chrome does (vs truncation).
	        return i < 0 ? 0 : i > 360 ? 360 : i;
	    }

	    function clampCssFloat(f) {  // Clamp to float 0.0 .. 1.0.
	        return f < 0 ? 0 : f > 1 ? 1 : f;
	    }

	    function parseCssInt(str) {  // int or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssByte(parseFloat(str) / 100 * 255);
	        }
	        return clampCssByte(parseInt(str, 10));
	    }

	    function parseCssFloat(str) {  // float or percentage.
	        if (str.length && str.charAt(str.length - 1) === '%') {
	            return clampCssFloat(parseFloat(str) / 100);
	        }
	        return clampCssFloat(parseFloat(str));
	    }

	    function cssHueToRgb(m1, m2, h) {
	        if (h < 0) {
	            h += 1;
	        }
	        else if (h > 1) {
	            h -= 1;
	        }

	        if (h * 6 < 1) {
	            return m1 + (m2 - m1) * h * 6;
	        }
	        if (h * 2 < 1) {
	            return m2;
	        }
	        if (h * 3 < 2) {
	            return m1 + (m2 - m1) * (2/3 - h) * 6;
	        }
	        return m1;
	    }

	    function lerp(a, b, p) {
	        return a + (b - a) * p;
	    }

	    /**
	     * @param {string} colorStr
	     * @return {Array.<number>}
	     * @memberOf module:zrender/util/color
	     */
	    function parse(colorStr) {
	        if (!colorStr) {
	            return;
	        }
	        // colorStr may be not string
	        colorStr = colorStr + '';
	        // Remove all whitespace, not compliant, but should just be more accepting.
	        var str = colorStr.replace(/ /g, '').toLowerCase();

	        // Color keywords (and transparent) lookup.
	        if (str in kCSSColorTable) {
	            return kCSSColorTable[str].slice();  // dup.
	        }

	        // #abc and #abc123 syntax.
	        if (str.charAt(0) === '#') {
	            if (str.length === 4) {
	                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 0xfff)) {
	                    return;  // Covers NaN.
	                }
	                return [
	                    ((iv & 0xf00) >> 4) | ((iv & 0xf00) >> 8),
	                    (iv & 0xf0) | ((iv & 0xf0) >> 4),
	                    (iv & 0xf) | ((iv & 0xf) << 4),
	                    1
	                ];
	            }
	            else if (str.length === 7) {
	                var iv = parseInt(str.substr(1), 16);  // TODO(deanm): Stricter parsing.
	                if (!(iv >= 0 && iv <= 0xffffff)) {
	                    return;  // Covers NaN.
	                }
	                return [
	                    (iv & 0xff0000) >> 16,
	                    (iv & 0xff00) >> 8,
	                    iv & 0xff,
	                    1
	                ];
	            }

	            return;
	        }
	        var op = str.indexOf('('), ep = str.indexOf(')');
	        if (op !== -1 && ep + 1 === str.length) {
	            var fname = str.substr(0, op);
	            var params = str.substr(op + 1, ep - (op + 1)).split(',');
	            var alpha = 1;  // To allow case fallthrough.
	            switch (fname) {
	                case 'rgba':
	                    if (params.length !== 4) {
	                        return;
	                    }
	                    alpha = parseCssFloat(params.pop()); // jshint ignore:line
	                // Fall through.
	                case 'rgb':
	                    if (params.length !== 3) {
	                        return;
	                    }
	                    return [
	                        parseCssInt(params[0]),
	                        parseCssInt(params[1]),
	                        parseCssInt(params[2]),
	                        alpha
	                    ];
	                case 'hsla':
	                    if (params.length !== 4) {
	                        return;
	                    }
	                    params[3] = parseCssFloat(params[3]);
	                    return hsla2rgba(params);
	                case 'hsl':
	                    if (params.length !== 3) {
	                        return;
	                    }
	                    return hsla2rgba(params);
	                default:
	                    return;
	            }
	        }

	        return;
	    }

	    /**
	     * @param {Array.<number>} hsla
	     * @return {Array.<number>} rgba
	     */
	    function hsla2rgba(hsla) {
	        var h = (((parseFloat(hsla[0]) % 360) + 360) % 360) / 360;  // 0 .. 1
	        // NOTE(deanm): According to the CSS spec s/l should only be
	        // percentages, but we don't bother and let float or percentage.
	        var s = parseCssFloat(hsla[1]);
	        var l = parseCssFloat(hsla[2]);
	        var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	        var m1 = l * 2 - m2;

	        var rgba = [
	            clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255),
	            clampCssByte(cssHueToRgb(m1, m2, h) * 255),
	            clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255)
	        ];

	        if (hsla.length === 4) {
	            rgba[3] = hsla[3];
	        }

	        return rgba;
	    }

	    /**
	     * @param {Array.<number>} rgba
	     * @return {Array.<number>} hsla
	     */
	    function rgba2hsla(rgba) {
	        if (!rgba) {
	            return;
	        }

	        // RGB from 0 to 255
	        var R = rgba[0] / 255;
	        var G = rgba[1] / 255;
	        var B = rgba[2] / 255;

	        var vMin = Math.min(R, G, B); // Min. value of RGB
	        var vMax = Math.max(R, G, B); // Max. value of RGB
	        var delta = vMax - vMin; // Delta RGB value

	        var L = (vMax + vMin) / 2;
	        var H;
	        var S;
	        // HSL results from 0 to 1
	        if (delta === 0) {
	            H = 0;
	            S = 0;
	        }
	        else {
	            if (L < 0.5) {
	                S = delta / (vMax + vMin);
	            }
	            else {
	                S = delta / (2 - vMax - vMin);
	            }

	            var deltaR = (((vMax - R) / 6) + (delta / 2)) / delta;
	            var deltaG = (((vMax - G) / 6) + (delta / 2)) / delta;
	            var deltaB = (((vMax - B) / 6) + (delta / 2)) / delta;

	            if (R === vMax) {
	                H = deltaB - deltaG;
	            }
	            else if (G === vMax) {
	                H = (1 / 3) + deltaR - deltaB;
	            }
	            else if (B === vMax) {
	                H = (2 / 3) + deltaG - deltaR;
	            }

	            if (H < 0) {
	                H += 1;
	            }

	            if (H > 1) {
	                H -= 1;
	            }
	        }

	        var hsla = [H * 360, S, L];

	        if (rgba[3] != null) {
	            hsla.push(rgba[3]);
	        }

	        return hsla;
	    }

	    /**
	     * @param {string} color
	     * @param {number} level
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function lift(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            for (var i = 0; i < 3; i++) {
	                if (level < 0) {
	                    colorArr[i] = colorArr[i] * (1 - level) | 0;
	                }
	                else {
	                    colorArr[i] = ((255 - colorArr[i]) * level + colorArr[i]) | 0;
	                }
	            }
	            return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	        }
	    }

	    /**
	     * @param {string} color
	     * @return {string}
	     * @memberOf module:zrender/util/color
	     */
	    function toHex(color, level) {
	        var colorArr = parse(color);
	        if (colorArr) {
	            return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + (+colorArr[2])).toString(16).slice(1);
	        }
	    }

	    /**
	     * Map value to color. Faster than mapToColor methods because color is represented by rgba array
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<Array.<number>>} colors List of rgba color array
	     * @param {Array.<number>} [out] Mapped gba color array
	     * @return {Array.<number>}
	     */
	    function fastMapToColor(normalizedValue, colors, out) {
	        if (!(colors && colors.length)
	            || !(normalizedValue >= 0 && normalizedValue <= 1)
	        ) {
	            return;
	        }
	        out = out || [0, 0, 0, 0];
	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = colors[leftIndex];
	        var rightColor = colors[rightIndex];
	        var dv = value - leftIndex;
	        out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));
	        out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));
	        out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));
	        out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));
	        return out;
	    }
	    /**
	     * @param {number} normalizedValue A float between 0 and 1.
	     * @param {Array.<string>} colors Color list.
	     * @param {boolean=} fullOutput Default false.
	     * @return {(string|Object)} Result color. If fullOutput,
	     *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	     * @memberOf module:zrender/util/color
	     */
	    function mapToColor(normalizedValue, colors, fullOutput) {
	        if (!(colors && colors.length)
	            || !(normalizedValue >= 0 && normalizedValue <= 1)
	        ) {
	            return;
	        }

	        var value = normalizedValue * (colors.length - 1);
	        var leftIndex = Math.floor(value);
	        var rightIndex = Math.ceil(value);
	        var leftColor = parse(colors[leftIndex]);
	        var rightColor = parse(colors[rightIndex]);
	        var dv = value - leftIndex;

	        var color = stringify(
	            [
	                clampCssByte(lerp(leftColor[0], rightColor[0], dv)),
	                clampCssByte(lerp(leftColor[1], rightColor[1], dv)),
	                clampCssByte(lerp(leftColor[2], rightColor[2], dv)),
	                clampCssFloat(lerp(leftColor[3], rightColor[3], dv))
	            ],
	            'rgba'
	        );

	        return fullOutput
	            ? {
	                color: color,
	                leftIndex: leftIndex,
	                rightIndex: rightIndex,
	                value: value
	            }
	            : color;
	    }

	    /**
	     * @param {string} color
	     * @param {number=} h 0 ~ 360, ignore when null.
	     * @param {number=} s 0 ~ 1, ignore when null.
	     * @param {number=} l 0 ~ 1, ignore when null.
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyHSL(color, h, s, l) {
	        color = parse(color);

	        if (color) {
	            color = rgba2hsla(color);
	            h != null && (color[0] = clampCssAngle(h));
	            s != null && (color[1] = parseCssFloat(s));
	            l != null && (color[2] = parseCssFloat(l));

	            return stringify(hsla2rgba(color), 'rgba');
	        }
	    }

	    /**
	     * @param {string} color
	     * @param {number=} alpha 0 ~ 1
	     * @return {string} Color string in rgba format.
	     * @memberOf module:zrender/util/color
	     */
	    function modifyAlpha(color, alpha) {
	        color = parse(color);

	        if (color && alpha != null) {
	            color[3] = clampCssFloat(alpha);
	            return stringify(color, 'rgba');
	        }
	    }

	    /**
	     * @param {Array.<string>} colors Color list.
	     * @param {string} type 'rgba', 'hsva', ...
	     * @return {string} Result color.
	     */
	    function stringify(arrColor, type) {
	        var colorStr = arrColor[0] + ',' + arrColor[1] + ',' + arrColor[2];
	        if (type === 'rgba' || type === 'hsva' || type === 'hsla') {
	            colorStr += ',' + arrColor[3];
	        }
	        return type + '(' + colorStr + ')';
	    }

	    module.exports = {
	        parse: parse,
	        lift: lift,
	        toHex: toHex,
	        fastMapToColor: fastMapToColor,
	        mapToColor: mapToColor,
	        modifyHSL: modifyHSL,
	        modifyAlpha: modifyAlpha,
	        stringify: stringify
	    };




/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	
	        var config = __webpack_require__(280);

	        /**
	         * @exports zrender/tool/log
	         * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	         */
	        module.exports = function() {
	            if (config.debugMode === 0) {
	                return;
	            }
	            else if (config.debugMode == 1) {
	                for (var k in arguments) {
	                    throw new Error(arguments[k]);
	                }
	            }
	            else if (config.debugMode > 1) {
	                for (var k in arguments) {
	                    console.log(arguments[k]);
	                }
	            }
	        };

	        /* for debug
	        return function(mes) {
	            document.getElementById('wrong-message').innerHTML =
	                mes + ' ' + (new Date() - 0)
	                + '<br/>'
	                + document.getElementById('wrong-message').innerHTML;
	        };
	        */
	    


/***/ },
/* 280 */
/***/ function(module, exports) {

	
	    var dpr = 1;
	    // If in browser environment
	    if (typeof window !== 'undefined') {
	        dpr = Math.max(window.devicePixelRatio || 1, 1);
	    }
	    /**
	     * config默认配置项
	     * @exports zrender/config
	     * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	     */
	    var config = {
	        /**
	         * debug日志选项：catchBrushException为true下有效
	         * 0 : 不生成debug数据，发布用
	         * 1 : 异常抛出，调试用
	         * 2 : 控制台输出，调试用
	         */
	        debugMode: 0,

	        // retina 屏幕优化
	        devicePixelRatio: dpr
	    };
	    module.exports = config;




/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Group = __webpack_require__(269);
	    var componentUtil = __webpack_require__(259);
	    var clazzUtil = __webpack_require__(252);
	    var modelUtil = __webpack_require__(244);
	    var zrUtil = __webpack_require__(243);

	    function Chart() {

	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new Group();

	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.uid = componentUtil.getUID('viewChart');
	    }

	    Chart.prototype = {

	        type: 'chart',

	        /**
	         * Init the chart
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        init: function (ecModel, api) {},

	        /**
	         * Render the chart
	         * @param  {module:echarts/model/Series} seriesModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @param  {Object} payload
	         */
	        render: function (seriesModel, ecModel, api, payload) {},

	        /**
	         * Highlight series or specified data item
	         * @param  {module:echarts/model/Series} seriesModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @param  {Object} payload
	         */
	        highlight: function (seriesModel, ecModel, api, payload) {
	            toggleHighlight(seriesModel.getData(), payload, 'emphasis');
	        },

	        /**
	         * Downplay series or specified data item
	         * @param  {module:echarts/model/Series} seriesModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @param  {Object} payload
	         */
	        downplay: function (seriesModel, ecModel, api, payload) {
	            toggleHighlight(seriesModel.getData(), payload, 'normal');
	        },

	        /**
	         * Remove self
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        remove: function (ecModel, api) {
	            this.group.removeAll();
	        },

	        /**
	         * Dispose self
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        dispose: function () {}

	        /**
	         * The view contains the given point.
	         * @interface
	         * @param {Array.<number>} point
	         * @return {boolean}
	         */
	        // containPoint: function () {}

	    };

	    var chartProto = Chart.prototype;
	    chartProto.updateView
	        = chartProto.updateLayout
	        = chartProto.updateVisual
	        = function (seriesModel, ecModel, api, payload) {
	            this.render(seriesModel, ecModel, api, payload);
	        };

	    /**
	     * Set state of single element
	     * @param  {module:zrender/Element} el
	     * @param  {string} state
	     */
	    function elSetState(el, state) {
	        if (el) {
	            el.trigger(state);
	            if (el.type === 'group') {
	                for (var i = 0; i < el.childCount(); i++) {
	                    elSetState(el.childAt(i), state);
	                }
	            }
	        }
	    }
	    /**
	     * @param  {module:echarts/data/List} data
	     * @param  {Object} payload
	     * @param  {string} state 'normal'|'emphasis'
	     * @inner
	     */
	    function toggleHighlight(data, payload, state) {
	        var dataIndex = modelUtil.queryDataIndex(data, payload);

	        if (dataIndex != null) {
	            zrUtil.each(modelUtil.normalizeToArray(dataIndex), function (dataIdx) {
	                elSetState(data.getItemGraphicEl(dataIdx), state);
	            });
	        }
	        else {
	            data.eachItemGraphicEl(function (el) {
	                elSetState(el, state);
	            });
	        }
	    }

	    // Enable Chart.extend.
	    clazzUtil.enableClassExtend(Chart, ['dispose']);

	    // Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	    clazzUtil.enableClassManagement(Chart, {registerWhenExtend: true});

	    module.exports = Chart;


/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);

	    var pathTool = __webpack_require__(283);
	    var round = Math.round;
	    var Path = __webpack_require__(284);
	    var colorTool = __webpack_require__(278);
	    var matrix = __webpack_require__(250);
	    var vector = __webpack_require__(249);

	    var graphic = {};

	    graphic.Group = __webpack_require__(269);

	    graphic.Image = __webpack_require__(300);

	    graphic.Text = __webpack_require__(302);

	    graphic.Circle = __webpack_require__(303);

	    graphic.Sector = __webpack_require__(304);

	    graphic.Ring = __webpack_require__(305);

	    graphic.Polygon = __webpack_require__(306);

	    graphic.Polyline = __webpack_require__(310);

	    graphic.Rect = __webpack_require__(311);

	    graphic.Line = __webpack_require__(313);

	    graphic.BezierCurve = __webpack_require__(314);

	    graphic.Arc = __webpack_require__(315);

	    graphic.CompoundPath = __webpack_require__(316);

	    graphic.LinearGradient = __webpack_require__(317);

	    graphic.RadialGradient = __webpack_require__(319);

	    graphic.BoundingRect = __webpack_require__(248);

	    /**
	     * Extend shape with parameters
	     */
	    graphic.extendShape = function (opts) {
	        return Path.extend(opts);
	    };

	    /**
	     * Extend path
	     */
	    graphic.extendPath = function (pathData, opts) {
	        return pathTool.extendFromString(pathData, opts);
	    };

	    /**
	     * Create a path element from path data string
	     * @param {string} pathData
	     * @param {Object} opts
	     * @param {module:zrender/core/BoundingRect} rect
	     * @param {string} [layout=cover] 'center' or 'cover'
	     */
	    graphic.makePath = function (pathData, opts, rect, layout) {
	        var path = pathTool.createFromString(pathData, opts);
	        var boundingRect = path.getBoundingRect();
	        if (rect) {
	            var aspect = boundingRect.width / boundingRect.height;

	            if (layout === 'center') {
	                // Set rect to center, keep width / height ratio.
	                var width = rect.height * aspect;
	                var height;
	                if (width <= rect.width) {
	                    height = rect.height;
	                }
	                else {
	                    width = rect.width;
	                    height = width / aspect;
	                }
	                var cx = rect.x + rect.width / 2;
	                var cy = rect.y + rect.height / 2;

	                rect.x = cx - width / 2;
	                rect.y = cy - height / 2;
	                rect.width = width;
	                rect.height = height;
	            }

	            graphic.resizePath(path, rect);
	        }
	        return path;
	    };

	    graphic.mergePath = pathTool.mergePath,

	    /**
	     * Resize a path to fit the rect
	     * @param {module:zrender/graphic/Path} path
	     * @param {Object} rect
	     */
	    graphic.resizePath = function (path, rect) {
	        if (!path.applyTransform) {
	            return;
	        }

	        var pathRect = path.getBoundingRect();

	        var m = pathRect.calculateTransform(rect);

	        path.applyTransform(m);
	    };

	    /**
	     * Sub pixel optimize line for canvas
	     *
	     * @param {Object} param
	     * @param {Object} [param.shape]
	     * @param {number} [param.shape.x1]
	     * @param {number} [param.shape.y1]
	     * @param {number} [param.shape.x2]
	     * @param {number} [param.shape.y2]
	     * @param {Object} [param.style]
	     * @param {number} [param.style.lineWidth]
	     * @return {Object} Modified param
	     */
	    graphic.subPixelOptimizeLine = function (param) {
	        var subPixelOptimize = graphic.subPixelOptimize;
	        var shape = param.shape;
	        var lineWidth = param.style.lineWidth;

	        if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
	            shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
	        }
	        if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
	            shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
	        }
	        return param;
	    };

	    /**
	     * Sub pixel optimize rect for canvas
	     *
	     * @param {Object} param
	     * @param {Object} [param.shape]
	     * @param {number} [param.shape.x]
	     * @param {number} [param.shape.y]
	     * @param {number} [param.shape.width]
	     * @param {number} [param.shape.height]
	     * @param {Object} [param.style]
	     * @param {number} [param.style.lineWidth]
	     * @return {Object} Modified param
	     */
	    graphic.subPixelOptimizeRect = function (param) {
	        var subPixelOptimize = graphic.subPixelOptimize;
	        var shape = param.shape;
	        var lineWidth = param.style.lineWidth;
	        var originX = shape.x;
	        var originY = shape.y;
	        var originWidth = shape.width;
	        var originHeight = shape.height;
	        shape.x = subPixelOptimize(shape.x, lineWidth, true);
	        shape.y = subPixelOptimize(shape.y, lineWidth, true);
	        shape.width = Math.max(
	            subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x,
	            originWidth === 0 ? 0 : 1
	        );
	        shape.height = Math.max(
	            subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y,
	            originHeight === 0 ? 0 : 1
	        );
	        return param;
	    };

	    /**
	     * Sub pixel optimize for canvas
	     *
	     * @param {number} position Coordinate, such as x, y
	     * @param {number} lineWidth Should be nonnegative integer.
	     * @param {boolean=} positiveOrNegative Default false (negative).
	     * @return {number} Optimized position.
	     */
	    graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {
	        // Assure that (position + lineWidth / 2) is near integer edge,
	        // otherwise line will be fuzzy in canvas.
	        var doubledPosition = round(position * 2);
	        return (doubledPosition + round(lineWidth)) % 2 === 0
	            ? doubledPosition / 2
	            : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
	    };

	    function hasFillOrStroke(fillOrStroke) {
	        return fillOrStroke != null && fillOrStroke != 'none';
	    }

	    function liftColor(color) {
	        return typeof color === 'string' ? colorTool.lift(color, -0.1) : color;
	    }

	    /**
	     * @private
	     */
	    function cacheElementStl(el) {
	        if (el.__hoverStlDirty) {
	            var stroke = el.style.stroke;
	            var fill = el.style.fill;

	            // Create hoverStyle on mouseover
	            var hoverStyle = el.__hoverStl;
	            hoverStyle.fill = hoverStyle.fill
	                || (hasFillOrStroke(fill) ? liftColor(fill) : null);
	            hoverStyle.stroke = hoverStyle.stroke
	                || (hasFillOrStroke(stroke) ? liftColor(stroke) : null);

	            var normalStyle = {};
	            for (var name in hoverStyle) {
	                if (hoverStyle.hasOwnProperty(name)) {
	                    normalStyle[name] = el.style[name];
	                }
	            }

	            el.__normalStl = normalStyle;

	            el.__hoverStlDirty = false;
	        }
	    }

	    /**
	     * @private
	     */
	    function doSingleEnterHover(el) {
	        if (el.__isHover) {
	            return;
	        }

	        cacheElementStl(el);

	        if (el.useHoverLayer) {
	            el.__zr && el.__zr.addHover(el, el.__hoverStl);
	        }
	        else {
	            el.setStyle(el.__hoverStl);
	            el.z2 += 1;
	        }

	        el.__isHover = true;
	    }

	    /**
	     * @inner
	     */
	    function doSingleLeaveHover(el) {
	        if (!el.__isHover) {
	            return;
	        }

	        var normalStl = el.__normalStl;
	        if (el.useHoverLayer) {
	            el.__zr && el.__zr.removeHover(el);
	        }
	        else {
	            normalStl && el.setStyle(normalStl);
	            el.z2 -= 1;
	        }

	        el.__isHover = false;
	    }

	    /**
	     * @inner
	     */
	    function doEnterHover(el) {
	        el.type === 'group'
	            ? el.traverse(function (child) {
	                if (child.type !== 'group') {
	                    doSingleEnterHover(child);
	                }
	            })
	            : doSingleEnterHover(el);
	    }

	    function doLeaveHover(el) {
	        el.type === 'group'
	            ? el.traverse(function (child) {
	                if (child.type !== 'group') {
	                    doSingleLeaveHover(child);
	                }
	            })
	            : doSingleLeaveHover(el);
	    }

	    /**
	     * @inner
	     */
	    function setElementHoverStl(el, hoverStl) {
	        // If element has sepcified hoverStyle, then use it instead of given hoverStyle
	        // Often used when item group has a label element and it's hoverStyle is different
	        el.__hoverStl = el.hoverStyle || hoverStl || {};
	        el.__hoverStlDirty = true;

	        if (el.__isHover) {
	            cacheElementStl(el);
	        }
	    }

	    /**
	     * @inner
	     */
	    function onElementMouseOver(e) {
	        if (this.__hoverSilentOnTouch && e.zrByTouch) {
	            return;
	        }

	        // Only if element is not in emphasis status
	        !this.__isEmphasis && doEnterHover(this);
	    }

	    /**
	     * @inner
	     */
	    function onElementMouseOut(e) {
	        if (this.__hoverSilentOnTouch && e.zrByTouch) {
	            return;
	        }

	        // Only if element is not in emphasis status
	        !this.__isEmphasis && doLeaveHover(this);
	    }

	    /**
	     * @inner
	     */
	    function enterEmphasis() {
	        this.__isEmphasis = true;
	        doEnterHover(this);
	    }

	    /**
	     * @inner
	     */
	    function leaveEmphasis() {
	        this.__isEmphasis = false;
	        doLeaveHover(this);
	    }

	    /**
	     * Set hover style of element
	     * @param {module:zrender/Element} el
	     * @param {Object} [hoverStyle]
	     * @param {Object} [opt]
	     * @param {boolean} [opt.hoverSilentOnTouch=false]
	     *        In touch device, mouseover event will be trigger on touchstart event
	     *        (see module:zrender/dom/HandlerProxy). By this mechanism, we can
	     *        conviniently use hoverStyle when tap on touch screen without additional
	     *        code for compatibility.
	     *        But if the chart/component has select feature, which usually also use
	     *        hoverStyle, there might be conflict between 'select-highlight' and
	     *        'hover-highlight' especially when roam is enabled (see geo for example).
	     *        In this case, hoverSilentOnTouch should be used to disable hover-highlight
	     *        on touch device.
	     */
	    graphic.setHoverStyle = function (el, hoverStyle, opt) {
	        el.__hoverSilentOnTouch = opt && opt.hoverSilentOnTouch;

	        el.type === 'group'
	            ? el.traverse(function (child) {
	                if (child.type !== 'group') {
	                    setElementHoverStl(child, hoverStyle);
	                }
	            })
	            : setElementHoverStl(el, hoverStyle);

	        // Duplicated function will be auto-ignored, see Eventful.js.
	        el.on('mouseover', onElementMouseOver)
	          .on('mouseout', onElementMouseOut);

	        // Emphasis, normal can be triggered manually
	        el.on('emphasis', enterEmphasis)
	          .on('normal', leaveEmphasis);
	    };

	    /**
	     * Set text option in the style
	     * @param {Object} textStyle
	     * @param {module:echarts/model/Model} labelModel
	     * @param {string} color
	     */
	    graphic.setText = function (textStyle, labelModel, color) {
	        var labelPosition = labelModel.getShallow('position') || 'inside';
	        var labelOffset = labelModel.getShallow('offset');
	        var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;
	        var textStyleModel = labelModel.getModel('textStyle');
	        zrUtil.extend(textStyle, {
	            textDistance: labelModel.getShallow('distance') || 5,
	            textFont: textStyleModel.getFont(),
	            textPosition: labelPosition,
	            textOffset: labelOffset,
	            textFill: textStyleModel.getTextColor() || labelColor
	        });
	    };

	    function animateOrSetProps(isUpdate, el, props, animatableModel, dataIndex, cb) {
	        if (typeof dataIndex === 'function') {
	            cb = dataIndex;
	            dataIndex = null;
	        }
	        // Do not check 'animation' property directly here. Consider this case:
	        // animation model is an `itemModel`, whose does not have `isAnimationEnabled`
	        // but its parent model (`seriesModel`) does.
	        var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();

	        if (animationEnabled) {
	            var postfix = isUpdate ? 'Update' : '';
	            var duration = animatableModel.getShallow('animationDuration' + postfix);
	            var animationEasing = animatableModel.getShallow('animationEasing' + postfix);
	            var animationDelay = animatableModel.getShallow('animationDelay' + postfix);
	            if (typeof animationDelay === 'function') {
	                animationDelay = animationDelay(
	                    dataIndex,
	                    animatableModel.getAnimationDelayParams
	                        ? animatableModel.getAnimationDelayParams(el, dataIndex)
	                        : null
	                );
	            }
	            if (typeof duration === 'function') {
	                duration = duration(dataIndex);
	            }

	            duration > 0
	                ? el.animateTo(props, duration, animationDelay || 0, animationEasing, cb)
	                : (el.attr(props), cb && cb());
	        }
	        else {
	            el.attr(props);
	            cb && cb();
	        }
	    }

	    /**
	     * Update graphic element properties with or without animation according to the configuration in series
	     * @param {module:zrender/Element} el
	     * @param {Object} props
	     * @param {module:echarts/model/Model} [animatableModel]
	     * @param {number} [dataIndex]
	     * @param {Function} [cb]
	     * @example
	     *     graphic.updateProps(el, {
	     *         position: [100, 100]
	     *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
	     *     // Or
	     *     graphic.updateProps(el, {
	     *         position: [100, 100]
	     *     }, seriesModel, function () { console.log('Animation done!'); });
	     */
	    graphic.updateProps = function (el, props, animatableModel, dataIndex, cb) {
	        animateOrSetProps(true, el, props, animatableModel, dataIndex, cb);
	    };

	    /**
	     * Init graphic element properties with or without animation according to the configuration in series
	     * @param {module:zrender/Element} el
	     * @param {Object} props
	     * @param {module:echarts/model/Model} [animatableModel]
	     * @param {number} [dataIndex]
	     * @param {Function} cb
	     */
	    graphic.initProps = function (el, props, animatableModel, dataIndex, cb) {
	        animateOrSetProps(false, el, props, animatableModel, dataIndex, cb);
	    };

	    /**
	     * Get transform matrix of target (param target),
	     * in coordinate of its ancestor (param ancestor)
	     *
	     * @param {module:zrender/mixin/Transformable} target
	     * @param {module:zrender/mixin/Transformable} [ancestor]
	     */
	    graphic.getTransform = function (target, ancestor) {
	        var mat = matrix.identity([]);

	        while (target && target !== ancestor) {
	            matrix.mul(mat, target.getLocalTransform(), mat);
	            target = target.parent;
	        }

	        return mat;
	    };

	    /**
	     * Apply transform to an vertex.
	     * @param {Array.<number>} vertex [x, y]
	     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	     * @param {boolean=} invert Whether use invert matrix.
	     * @return {Array.<number>} [x, y]
	     */
	    graphic.applyTransform = function (vertex, transform, invert) {
	        if (invert) {
	            transform = matrix.invert([], transform);
	        }
	        return vector.applyTransform([], vertex, transform);
	    };

	    /**
	     * @param {string} direction 'left' 'right' 'top' 'bottom'
	     * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	     * @param {boolean=} invert Whether use invert matrix.
	     * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
	     */
	    graphic.transformDirection = function (direction, transform, invert) {

	        // Pick a base, ensure that transform result will not be (0, 0).
	        var hBase = (transform[4] === 0 || transform[5] === 0 || transform[0] === 0)
	            ? 1 : Math.abs(2 * transform[4] / transform[0]);
	        var vBase = (transform[4] === 0 || transform[5] === 0 || transform[2] === 0)
	            ? 1 : Math.abs(2 * transform[4] / transform[2]);

	        var vertex = [
	            direction === 'left' ? -hBase : direction === 'right' ? hBase : 0,
	            direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0
	        ];

	        vertex = graphic.applyTransform(vertex, transform, invert);

	        return Math.abs(vertex[0]) > Math.abs(vertex[1])
	            ? (vertex[0] > 0 ? 'right' : 'left')
	            : (vertex[1] > 0 ? 'bottom' : 'top');
	    };

	    /**
	     * Apply group transition animation from g1 to g2
	     */
	    graphic.groupTransition = function (g1, g2, animatableModel, cb) {
	        if (!g1 || !g2) {
	            return;
	        }

	        function getElMap(g) {
	            var elMap = {};
	            g.traverse(function (el) {
	                if (!el.isGroup && el.anid) {
	                    elMap[el.anid] = el;
	                }
	            });
	            return elMap;
	        }
	        function getAnimatableProps(el) {
	            var obj = {
	                position: vector.clone(el.position),
	                rotation: el.rotation
	            };
	            if (el.shape) {
	                obj.shape = zrUtil.extend({}, el.shape);
	            }
	            return obj;
	        }
	        var elMap1 = getElMap(g1);

	        g2.traverse(function (el) {
	            if (!el.isGroup && el.anid) {
	                var oldEl = elMap1[el.anid];
	                if (oldEl) {
	                    var newProp = getAnimatableProps(el);
	                    el.attr(getAnimatableProps(oldEl));
	                    graphic.updateProps(el, newProp, animatableModel, el.dataIndex);
	                }
	                // else {
	                //     if (el.previousProps) {
	                //         graphic.updateProps
	                //     }
	                // }
	            }
	        });
	    };

	    module.exports = graphic;



/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Path = __webpack_require__(284);
	    var PathProxy = __webpack_require__(288);
	    var transformPath = __webpack_require__(299);
	    var matrix = __webpack_require__(250);

	    // command chars
	    var cc = [
	        'm', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z',
	        'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'
	    ];

	    var mathSqrt = Math.sqrt;
	    var mathSin = Math.sin;
	    var mathCos = Math.cos;
	    var PI = Math.PI;

	    var vMag = function(v) {
	        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	    };
	    var vRatio = function(u, v) {
	        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	    };
	    var vAngle = function(u, v) {
	        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1)
	                * Math.acos(vRatio(u, v));
	    };

	    function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
	        var psi = psiDeg * (PI / 180.0);
	        var xp = mathCos(psi) * (x1 - x2) / 2.0
	                 + mathSin(psi) * (y1 - y2) / 2.0;
	        var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0
	                 + mathCos(psi) * (y1 - y2) / 2.0;

	        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);

	        if (lambda > 1) {
	            rx *= mathSqrt(lambda);
	            ry *= mathSqrt(lambda);
	        }

	        var f = (fa === fs ? -1 : 1)
	            * mathSqrt((((rx * rx) * (ry * ry))
	                    - ((rx * rx) * (yp * yp))
	                    - ((ry * ry) * (xp * xp))) / ((rx * rx) * (yp * yp)
	                    + (ry * ry) * (xp * xp))
	                ) || 0;

	        var cxp = f * rx * yp / ry;
	        var cyp = f * -ry * xp / rx;

	        var cx = (x1 + x2) / 2.0
	                 + mathCos(psi) * cxp
	                 - mathSin(psi) * cyp;
	        var cy = (y1 + y2) / 2.0
	                + mathSin(psi) * cxp
	                + mathCos(psi) * cyp;

	        var theta = vAngle([ 1, 0 ], [ (xp - cxp) / rx, (yp - cyp) / ry ]);
	        var u = [ (xp - cxp) / rx, (yp - cyp) / ry ];
	        var v = [ (-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry ];
	        var dTheta = vAngle(u, v);

	        if (vRatio(u, v) <= -1) {
	            dTheta = PI;
	        }
	        if (vRatio(u, v) >= 1) {
	            dTheta = 0;
	        }
	        if (fs === 0 && dTheta > 0) {
	            dTheta = dTheta - 2 * PI;
	        }
	        if (fs === 1 && dTheta < 0) {
	            dTheta = dTheta + 2 * PI;
	        }

	        path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
	    }

	    function createPathProxyFromString(data) {
	        if (!data) {
	            return [];
	        }

	        // command string
	        var cs = data.replace(/-/g, ' -')
	            .replace(/  /g, ' ')
	            .replace(/ /g, ',')
	            .replace(/,,/g, ',');

	        var n;
	        // create pipes so that we can split the data
	        for (n = 0; n < cc.length; n++) {
	            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	        }

	        // create array
	        var arr = cs.split('|');
	        // init context point
	        var cpx = 0;
	        var cpy = 0;

	        var path = new PathProxy();
	        var CMD = PathProxy.CMD;

	        var prevCmd;
	        for (n = 1; n < arr.length; n++) {
	            var str = arr[n];
	            var c = str.charAt(0);
	            var off = 0;
	            var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
	            var cmd;

	            if (p.length > 0 && p[0] === '') {
	                p.shift();
	            }

	            for (var i = 0; i < p.length; i++) {
	                p[i] = parseFloat(p[i]);
	            }
	            while (off < p.length && !isNaN(p[off])) {
	                if (isNaN(p[0])) {
	                    break;
	                }
	                var ctlPtx;
	                var ctlPty;

	                var rx;
	                var ry;
	                var psi;
	                var fa;
	                var fs;

	                var x1 = cpx;
	                var y1 = cpy;

	                // convert l, H, h, V, and v to L
	                switch (c) {
	                    case 'l':
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'L':
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'm':
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.M;
	                        path.addData(cmd, cpx, cpy);
	                        c = 'l';
	                        break;
	                    case 'M':
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.M;
	                        path.addData(cmd, cpx, cpy);
	                        c = 'L';
	                        break;
	                    case 'h':
	                        cpx += p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'H':
	                        cpx = p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'v':
	                        cpy += p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'V':
	                        cpy = p[off++];
	                        cmd = CMD.L;
	                        path.addData(cmd, cpx, cpy);
	                        break;
	                    case 'C':
	                        cmd = CMD.C;
	                        path.addData(
	                            cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]
	                        );
	                        cpx = p[off - 2];
	                        cpy = p[off - 1];
	                        break;
	                    case 'c':
	                        cmd = CMD.C;
	                        path.addData(
	                            cmd,
	                            p[off++] + cpx, p[off++] + cpy,
	                            p[off++] + cpx, p[off++] + cpy,
	                            p[off++] + cpx, p[off++] + cpy
	                        );
	                        cpx += p[off - 2];
	                        cpy += p[off - 1];
	                        break;
	                    case 'S':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.C) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cmd = CMD.C;
	                        x1 = p[off++];
	                        y1 = p[off++];
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                        break;
	                    case 's':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.C) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cmd = CMD.C;
	                        x1 = cpx + p[off++];
	                        y1 = cpy + p[off++];
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                        break;
	                    case 'Q':
	                        x1 = p[off++];
	                        y1 = p[off++];
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, x1, y1, cpx, cpy);
	                        break;
	                    case 'q':
	                        x1 = p[off++] + cpx;
	                        y1 = p[off++] + cpy;
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, x1, y1, cpx, cpy);
	                        break;
	                    case 'T':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.Q) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 't':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        var len = path.len();
	                        var pathData = path.data;
	                        if (prevCmd === CMD.Q) {
	                            ctlPtx += cpx - pathData[len - 4];
	                            ctlPty += cpy - pathData[len - 3];
	                        }
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.Q;
	                        path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 'A':
	                        rx = p[off++];
	                        ry = p[off++];
	                        psi = p[off++];
	                        fa = p[off++];
	                        fs = p[off++];

	                        x1 = cpx, y1 = cpy;
	                        cpx = p[off++];
	                        cpy = p[off++];
	                        cmd = CMD.A;
	                        processArc(
	                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path
	                        );
	                        break;
	                    case 'a':
	                        rx = p[off++];
	                        ry = p[off++];
	                        psi = p[off++];
	                        fa = p[off++];
	                        fs = p[off++];

	                        x1 = cpx, y1 = cpy;
	                        cpx += p[off++];
	                        cpy += p[off++];
	                        cmd = CMD.A;
	                        processArc(
	                            x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path
	                        );
	                        break;
	                }
	            }

	            if (c === 'z' || c === 'Z') {
	                cmd = CMD.Z;
	                path.addData(cmd);
	            }

	            prevCmd = cmd;
	        }

	        path.toStatic();

	        return path;
	    }

	    // TODO Optimize double memory cost problem
	    function createPathOptions(str, opts) {
	        var pathProxy = createPathProxyFromString(str);
	        var transform;
	        opts = opts || {};
	        opts.buildPath = function (path) {
	            path.setData(pathProxy.data);
	            transform && transformPath(path, transform);
	            // Svg and vml renderer don't have context
	            var ctx = path.getContext();
	            if (ctx) {
	                path.rebuildPath(ctx);
	            }
	        };

	        opts.applyTransform = function (m) {
	            if (!transform) {
	                transform = matrix.create();
	            }
	            matrix.mul(transform, m, transform);
	            this.dirty(true);
	        };

	        return opts;
	    }

	    module.exports = {
	        /**
	         * Create a Path object from path string data
	         * http://www.w3.org/TR/SVG/paths.html#PathData
	         * @param  {Object} opts Other options
	         */
	        createFromString: function (str, opts) {
	            return new Path(createPathOptions(str, opts));
	        },

	        /**
	         * Create a Path class from path string data
	         * @param  {string} str
	         * @param  {Object} opts Other options
	         */
	        extendFromString: function (str, opts) {
	            return Path.extend(createPathOptions(str, opts));
	        },

	        /**
	         * Merge multiple paths
	         */
	        // TODO Apply transform
	        // TODO stroke dash
	        // TODO Optimize double memory cost problem
	        mergePath: function (pathEls, opts) {
	            var pathList = [];
	            var len = pathEls.length;
	            for (var i = 0; i < len; i++) {
	                var pathEl = pathEls[i];
	                if (pathEl.__dirty) {
	                    pathEl.buildPath(pathEl.path, pathEl.shape, true);
	                }
	                pathList.push(pathEl.path);
	            }

	            var pathBundle = new Path(opts);
	            pathBundle.buildPath = function (path) {
	                path.appendPath(pathList);
	                // Svg and vml renderer don't have context
	                var ctx = path.getContext();
	                if (ctx) {
	                    path.rebuildPath(ctx);
	                }
	            };

	            return pathBundle;
	        }
	    };


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Path element
	 * @module zrender/graphic/Path
	 */



	    var Displayable = __webpack_require__(285);
	    var zrUtil = __webpack_require__(243);
	    var PathProxy = __webpack_require__(288);
	    var pathContain = __webpack_require__(291);

	    var Pattern = __webpack_require__(298);
	    var getCanvasPattern = Pattern.prototype.getCanvasPattern;

	    var abs = Math.abs;

	    /**
	     * @alias module:zrender/graphic/Path
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    function Path(opts) {
	        Displayable.call(this, opts);

	        /**
	         * @type {module:zrender/core/PathProxy}
	         * @readOnly
	         */
	        this.path = new PathProxy();
	    }

	    Path.prototype = {

	        constructor: Path,

	        type: 'path',

	        __dirtyPath: true,

	        strokeContainThreshold: 5,

	        brush: function (ctx, prevEl) {
	            var style = this.style;
	            var path = this.path;
	            var hasStroke = style.hasStroke();
	            var hasFill = style.hasFill();
	            var fill = style.fill;
	            var stroke = style.stroke;
	            var hasFillGradient = hasFill && !!(fill.colorStops);
	            var hasStrokeGradient = hasStroke && !!(stroke.colorStops);
	            var hasFillPattern = hasFill && !!(fill.image);
	            var hasStrokePattern = hasStroke && !!(stroke.image);

	            style.bind(ctx, this, prevEl);
	            this.setTransform(ctx);

	            if (this.__dirty) {
	                var rect = this.getBoundingRect();
	                // Update gradient because bounding rect may changed
	                if (hasFillGradient) {
	                    this._fillGradient = style.getGradient(ctx, fill, rect);
	                }
	                if (hasStrokeGradient) {
	                    this._strokeGradient = style.getGradient(ctx, stroke, rect);
	                }
	            }
	            // Use the gradient or pattern
	            if (hasFillGradient) {
	                // PENDING If may have affect the state
	                ctx.fillStyle = this._fillGradient;
	            }
	            else if (hasFillPattern) {
	                ctx.fillStyle = getCanvasPattern.call(fill, ctx);
	            }
	            if (hasStrokeGradient) {
	                ctx.strokeStyle = this._strokeGradient;
	            }
	            else if (hasStrokePattern) {
	                ctx.strokeStyle = getCanvasPattern.call(stroke, ctx);
	            }

	            var lineDash = style.lineDash;
	            var lineDashOffset = style.lineDashOffset;

	            var ctxLineDash = !!ctx.setLineDash;

	            // Update path sx, sy
	            var scale = this.getGlobalScale();
	            path.setScale(scale[0], scale[1]);

	            // Proxy context
	            // Rebuild path in following 2 cases
	            // 1. Path is dirty
	            // 2. Path needs javascript implemented lineDash stroking.
	            //    In this case, lineDash information will not be saved in PathProxy
	            if (this.__dirtyPath || (
	                lineDash && !ctxLineDash && hasStroke
	            )) {
	                path = this.path.beginPath(ctx);

	                // Setting line dash before build path
	                if (lineDash && !ctxLineDash) {
	                    path.setLineDash(lineDash);
	                    path.setLineDashOffset(lineDashOffset);
	                }

	                this.buildPath(path, this.shape, false);

	                // Clear path dirty flag
	                this.__dirtyPath = false;
	            }
	            else {
	                // Replay path building
	                ctx.beginPath();
	                this.path.rebuildPath(ctx);
	            }

	            hasFill && path.fill(ctx);

	            if (lineDash && ctxLineDash) {
	                ctx.setLineDash(lineDash);
	                ctx.lineDashOffset = lineDashOffset;
	            }

	            hasStroke && path.stroke(ctx);

	            if (lineDash && ctxLineDash) {
	                // PENDING
	                // Remove lineDash
	                ctx.setLineDash([]);
	            }


	            this.restoreTransform(ctx);

	            // Draw rect text
	            if (style.text != null) {
	                // var rect = this.getBoundingRect();
	                this.drawRectText(ctx, this.getBoundingRect());
	            }
	        },

	        // When bundling path, some shape may decide if use moveTo to begin a new subpath or closePath
	        // Like in circle
	        buildPath: function (ctx, shapeCfg, inBundle) {},

	        getBoundingRect: function () {
	            var rect = this._rect;
	            var style = this.style;
	            var needsUpdateRect = !rect;
	            if (needsUpdateRect) {
	                var path = this.path;
	                if (this.__dirtyPath) {
	                    path.beginPath();
	                    this.buildPath(path, this.shape, false);
	                }
	                rect = path.getBoundingRect();
	            }
	            this._rect = rect;

	            if (style.hasStroke()) {
	                // Needs update rect with stroke lineWidth when
	                // 1. Element changes scale or lineWidth
	                // 2. Shape is changed
	                var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());
	                if (this.__dirty || needsUpdateRect) {
	                    rectWithStroke.copy(rect);
	                    // FIXME Must after updateTransform
	                    var w = style.lineWidth;
	                    // PENDING, Min line width is needed when line is horizontal or vertical
	                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;

	                    // Only add extra hover lineWidth when there are no fill
	                    if (!style.hasFill()) {
	                        w = Math.max(w, this.strokeContainThreshold || 4);
	                    }
	                    // Consider line width
	                    // Line scale can't be 0;
	                    if (lineScale > 1e-10) {
	                        rectWithStroke.width += w / lineScale;
	                        rectWithStroke.height += w / lineScale;
	                        rectWithStroke.x -= w / lineScale / 2;
	                        rectWithStroke.y -= w / lineScale / 2;
	                    }
	                }

	                // Return rect with stroke
	                return rectWithStroke;
	            }

	            return rect;
	        },

	        contain: function (x, y) {
	            var localPos = this.transformCoordToLocal(x, y);
	            var rect = this.getBoundingRect();
	            var style = this.style;
	            x = localPos[0];
	            y = localPos[1];

	            if (rect.contain(x, y)) {
	                var pathData = this.path.data;
	                if (style.hasStroke()) {
	                    var lineWidth = style.lineWidth;
	                    var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
	                    // Line scale can't be 0;
	                    if (lineScale > 1e-10) {
	                        // Only add extra hover lineWidth when there are no fill
	                        if (!style.hasFill()) {
	                            lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
	                        }
	                        if (pathContain.containStroke(
	                            pathData, lineWidth / lineScale, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                }
	                if (style.hasFill()) {
	                    return pathContain.contain(pathData, x, y);
	                }
	            }
	            return false;
	        },

	        /**
	         * @param  {boolean} dirtyPath
	         */
	        dirty: function (dirtyPath) {
	            if (dirtyPath == null) {
	                dirtyPath = true;
	            }
	            // Only mark dirty, not mark clean
	            if (dirtyPath) {
	                this.__dirtyPath = dirtyPath;
	                this._rect = null;
	            }

	            this.__dirty = true;

	            this.__zr && this.__zr.refresh();

	            // Used as a clipping path
	            if (this.__clipTarget) {
	                this.__clipTarget.dirty();
	            }
	        },

	        /**
	         * Alias for animate('shape')
	         * @param {boolean} loop
	         */
	        animateShape: function (loop) {
	            return this.animate('shape', loop);
	        },

	        // Overwrite attrKV
	        attrKV: function (key, value) {
	            // FIXME
	            if (key === 'shape') {
	                this.setShape(value);
	                this.__dirtyPath = true;
	                this._rect = null;
	            }
	            else {
	                Displayable.prototype.attrKV.call(this, key, value);
	            }
	        },

	        /**
	         * @param {Object|string} key
	         * @param {*} value
	         */
	        setShape: function (key, value) {
	            var shape = this.shape;
	            // Path from string may not have shape
	            if (shape) {
	                if (zrUtil.isObject(key)) {
	                    for (var name in key) {
	                        if (key.hasOwnProperty(name)) {
	                            shape[name] = key[name];
	                        }
	                    }
	                }
	                else {
	                    shape[key] = value;
	                }
	                this.dirty(true);
	            }
	            return this;
	        },

	        getLineScale: function () {
	            var m = this.transform;
	            // Get the line scale.
	            // Determinant of `m` means how much the area is enlarged by the
	            // transformation. So its square root can be used as a scale factor
	            // for width.
	            return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10
	                ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1]))
	                : 1;
	        }
	    };

	    /**
	     * 扩展一个 Path element, 比如星形，圆等。
	     * Extend a path element
	     * @param {Object} props
	     * @param {string} props.type Path type
	     * @param {Function} props.init Initialize
	     * @param {Function} props.buildPath Overwrite buildPath method
	     * @param {Object} [props.style] Extended default style config
	     * @param {Object} [props.shape] Extended default shape config
	     */
	    Path.extend = function (defaults) {
	        var Sub = function (opts) {
	            Path.call(this, opts);

	            if (defaults.style) {
	                // Extend default style
	                this.style.extendFrom(defaults.style, false);
	            }

	            // Extend default shape
	            var defaultShape = defaults.shape;
	            if (defaultShape) {
	                this.shape = this.shape || {};
	                var thisShape = this.shape;
	                for (var name in defaultShape) {
	                    if (
	                        ! thisShape.hasOwnProperty(name)
	                        && defaultShape.hasOwnProperty(name)
	                    ) {
	                        thisShape[name] = defaultShape[name];
	                    }
	                }
	            }

	            defaults.init && defaults.init.call(this, opts);
	        };

	        zrUtil.inherits(Sub, Path);

	        // FIXME 不能 extend position, rotation 等引用对象
	        for (var name in defaults) {
	            // Extending prototype values and methods
	            if (name !== 'style' && name !== 'shape') {
	                Sub.prototype[name] = defaults[name];
	            }
	        }

	        return Sub;
	    };

	    zrUtil.inherits(Path, Displayable);

	    module.exports = Path;


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 可绘制的图形基类
	 * Base class of all displayable graphic objects
	 * @module zrender/graphic/Displayable
	 */



	    var zrUtil = __webpack_require__(243);

	    var Style = __webpack_require__(286);

	    var Element = __webpack_require__(270);
	    var RectText = __webpack_require__(287);
	    // var Stateful = require('./mixin/Stateful');

	    /**
	     * @alias module:zrender/graphic/Displayable
	     * @extends module:zrender/Element
	     * @extends module:zrender/graphic/mixin/RectText
	     */
	    function Displayable(opts) {

	        opts = opts || {};

	        Element.call(this, opts);

	        // Extend properties
	        for (var name in opts) {
	            if (
	                opts.hasOwnProperty(name) &&
	                name !== 'style'
	            ) {
	                this[name] = opts[name];
	            }
	        }

	        /**
	         * @type {module:zrender/graphic/Style}
	         */
	        this.style = new Style(opts.style);

	        this._rect = null;
	        // Shapes for cascade clipping.
	        this.__clipPaths = [];

	        // FIXME Stateful must be mixined after style is setted
	        // Stateful.call(this, opts);
	    }

	    Displayable.prototype = {

	        constructor: Displayable,

	        type: 'displayable',

	        /**
	         * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
	         * Dirty flag. From which painter will determine if this displayable object needs brush
	         * @name module:zrender/graphic/Displayable#__dirty
	         * @type {boolean}
	         */
	        __dirty: true,

	        /**
	         * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	         * If ignore drawing of the displayable object. Mouse event will still be triggered
	         * @name module:/zrender/graphic/Displayable#invisible
	         * @type {boolean}
	         * @default false
	         */
	        invisible: false,

	        /**
	         * @name module:/zrender/graphic/Displayable#z
	         * @type {number}
	         * @default 0
	         */
	        z: 0,

	        /**
	         * @name module:/zrender/graphic/Displayable#z
	         * @type {number}
	         * @default 0
	         */
	        z2: 0,

	        /**
	         * z层level，决定绘画在哪层canvas中
	         * @name module:/zrender/graphic/Displayable#zlevel
	         * @type {number}
	         * @default 0
	         */
	        zlevel: 0,

	        /**
	         * 是否可拖拽
	         * @name module:/zrender/graphic/Displayable#draggable
	         * @type {boolean}
	         * @default false
	         */
	        draggable: false,

	        /**
	         * 是否正在拖拽
	         * @name module:/zrender/graphic/Displayable#draggable
	         * @type {boolean}
	         * @default false
	         */
	        dragging: false,

	        /**
	         * 是否相应鼠标事件
	         * @name module:/zrender/graphic/Displayable#silent
	         * @type {boolean}
	         * @default false
	         */
	        silent: false,

	        /**
	         * If enable culling
	         * @type {boolean}
	         * @default false
	         */
	        culling: false,

	        /**
	         * Mouse cursor when hovered
	         * @name module:/zrender/graphic/Displayable#cursor
	         * @type {string}
	         */
	        cursor: 'pointer',

	        /**
	         * If hover area is bounding rect
	         * @name module:/zrender/graphic/Displayable#rectHover
	         * @type {string}
	         */
	        rectHover: false,

	        /**
	         * Render the element progressively when the value >= 0,
	         * usefull for large data.
	         * @type {number}
	         */
	        progressive: -1,

	        beforeBrush: function (ctx) {},

	        afterBrush: function (ctx) {},

	        /**
	         * 图形绘制方法
	         * @param {Canvas2DRenderingContext} ctx
	         */
	        // Interface
	        brush: function (ctx, prevEl) {},

	        /**
	         * 获取最小包围盒
	         * @return {module:zrender/core/BoundingRect}
	         */
	        // Interface
	        getBoundingRect: function () {},

	        /**
	         * 判断坐标 x, y 是否在图形上
	         * If displayable element contain coord x, y
	         * @param  {number} x
	         * @param  {number} y
	         * @return {boolean}
	         */
	        contain: function (x, y) {
	            return this.rectContain(x, y);
	        },

	        /**
	         * @param  {Function} cb
	         * @param  {}   context
	         */
	        traverse: function (cb, context) {
	            cb.call(context, this);
	        },

	        /**
	         * 判断坐标 x, y 是否在图形的包围盒上
	         * If bounding rect of element contain coord x, y
	         * @param  {number} x
	         * @param  {number} y
	         * @return {boolean}
	         */
	        rectContain: function (x, y) {
	            var coord = this.transformCoordToLocal(x, y);
	            var rect = this.getBoundingRect();
	            return rect.contain(coord[0], coord[1]);
	        },

	        /**
	         * 标记图形元素为脏，并且在下一帧重绘
	         * Mark displayable element dirty and refresh next frame
	         */
	        dirty: function () {
	            this.__dirty = true;

	            this._rect = null;

	            this.__zr && this.__zr.refresh();
	        },

	        /**
	         * 图形是否会触发事件
	         * If displayable object binded any event
	         * @return {boolean}
	         */
	        // TODO, 通过 bind 绑定的事件
	        // isSilent: function () {
	        //     return !(
	        //         this.hoverable || this.draggable
	        //         || this.onmousemove || this.onmouseover || this.onmouseout
	        //         || this.onmousedown || this.onmouseup || this.onclick
	        //         || this.ondragenter || this.ondragover || this.ondragleave
	        //         || this.ondrop
	        //     );
	        // },
	        /**
	         * Alias for animate('style')
	         * @param {boolean} loop
	         */
	        animateStyle: function (loop) {
	            return this.animate('style', loop);
	        },

	        attrKV: function (key, value) {
	            if (key !== 'style') {
	                Element.prototype.attrKV.call(this, key, value);
	            }
	            else {
	                this.style.set(value);
	            }
	        },

	        /**
	         * @param {Object|string} key
	         * @param {*} value
	         */
	        setStyle: function (key, value) {
	            this.style.set(key, value);
	            this.dirty(false);
	            return this;
	        },

	        /**
	         * Use given style object
	         * @param  {Object} obj
	         */
	        useStyle: function (obj) {
	            this.style = new Style(obj);
	            this.dirty(false);
	            return this;
	        }
	    };

	    zrUtil.inherits(Displayable, Element);

	    zrUtil.mixin(Displayable, RectText);
	    // zrUtil.mixin(Displayable, Stateful);

	    module.exports = Displayable;


/***/ },
/* 286 */
/***/ function(module, exports) {

	/**
	 * @module zrender/graphic/Style
	 */


	    var STYLE_COMMON_PROPS = [
	        ['shadowBlur', 0], ['shadowOffsetX', 0], ['shadowOffsetY', 0], ['shadowColor', '#000'],
	        ['lineCap', 'butt'], ['lineJoin', 'miter'], ['miterLimit', 10]
	    ];

	    // var SHADOW_PROPS = STYLE_COMMON_PROPS.slice(0, 4);
	    // var LINE_PROPS = STYLE_COMMON_PROPS.slice(4);

	    var Style = function (opts) {
	        this.extendFrom(opts);
	    };

	    function createLinearGradient(ctx, obj, rect) {
	        // var size =
	        var x = obj.x;
	        var x2 = obj.x2;
	        var y = obj.y;
	        var y2 = obj.y2;

	        if (!obj.global) {
	            x = x * rect.width + rect.x;
	            x2 = x2 * rect.width + rect.x;
	            y = y * rect.height + rect.y;
	            y2 = y2 * rect.height + rect.y;
	        }

	        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);

	        return canvasGradient;
	    }

	    function createRadialGradient(ctx, obj, rect) {
	        var width = rect.width;
	        var height = rect.height;
	        var min = Math.min(width, height);

	        var x = obj.x;
	        var y = obj.y;
	        var r = obj.r;
	        if (!obj.global) {
	            x = x * width + rect.x;
	            y = y * height + rect.y;
	            r = r * min;
	        }

	        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);

	        return canvasGradient;
	    }


	    Style.prototype = {

	        constructor: Style,

	        /**
	         * @type {string}
	         */
	        fill: '#000000',

	        /**
	         * @type {string}
	         */
	        stroke: null,

	        /**
	         * @type {number}
	         */
	        opacity: 1,

	        /**
	         * @type {Array.<number>}
	         */
	        lineDash: null,

	        /**
	         * @type {number}
	         */
	        lineDashOffset: 0,

	        /**
	         * @type {number}
	         */
	        shadowBlur: 0,

	        /**
	         * @type {number}
	         */
	        shadowOffsetX: 0,

	        /**
	         * @type {number}
	         */
	        shadowOffsetY: 0,

	        /**
	         * @type {number}
	         */
	        lineWidth: 1,

	        /**
	         * If stroke ignore scale
	         * @type {Boolean}
	         */
	        strokeNoScale: false,

	        // Bounding rect text configuration
	        // Not affected by element transform
	        /**
	         * @type {string}
	         */
	        text: null,

	        /**
	         * @type {string}
	         */
	        textFill: '#000',

	        /**
	         * @type {string}
	         */
	        textStroke: null,

	        /**
	         * 'inside', 'left', 'right', 'top', 'bottom'
	         * [x, y]
	         * @type {string|Array.<number>}
	         * @default 'inside'
	         */
	        textPosition: 'inside',

	        /**
	         * [x, y]
	         * @type {Array.<number>}
	         */
	        textOffset: null,

	        /**
	         * @type {string}
	         */
	        textBaseline: null,

	        /**
	         * @type {string}
	         */
	        textAlign: null,

	        /**
	         * @type {string}
	         */
	        textVerticalAlign: null,

	        /**
	         * Only useful in Path and Image element
	         * @type {number}
	         */
	        textDistance: 5,

	        /**
	         * Only useful in Path and Image element
	         * @type {number}
	         */
	        textShadowBlur: 0,

	        /**
	         * Only useful in Path and Image element
	         * @type {number}
	         */
	        textShadowOffsetX: 0,

	        /**
	         * Only useful in Path and Image element
	         * @type {number}
	         */
	        textShadowOffsetY: 0,

	        /**
	         * If transform text
	         * Only useful in Path and Image element
	         * @type {boolean}
	         */
	        textTransform: false,

	        /**
	         * Text rotate around position of Path or Image
	         * Only useful in Path and Image element and textTransform is false.
	         */
	        textRotation: 0,

	        /**
	         * @type {string}
	         * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
	         */
	        blend: null,

	        /**
	         * @param {CanvasRenderingContext2D} ctx
	         */
	        bind: function (ctx, el, prevEl) {
	            var style = this;
	            var prevStyle = prevEl && prevEl.style;
	            var firstDraw = !prevStyle;

	            for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	                var prop = STYLE_COMMON_PROPS[i];
	                var styleName = prop[0];

	                if (firstDraw || style[styleName] !== prevStyle[styleName]) {
	                    // FIXME Invalid property value will cause style leak from previous element.
	                    ctx[styleName] = style[styleName] || prop[1];
	                }
	            }

	            if ((firstDraw || style.fill !== prevStyle.fill)) {
	                ctx.fillStyle = style.fill;
	            }
	            if ((firstDraw || style.stroke !== prevStyle.stroke)) {
	                ctx.strokeStyle = style.stroke;
	            }
	            if ((firstDraw || style.opacity !== prevStyle.opacity)) {
	                ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
	            }

	            if ((firstDraw || style.blend !== prevStyle.blend)) {
	                ctx.globalCompositeOperation = style.blend || 'source-over';
	            }
	            if (this.hasStroke()) {
	                var lineWidth = style.lineWidth;
	                ctx.lineWidth = lineWidth / (
	                    (this.strokeNoScale && el && el.getLineScale) ? el.getLineScale() : 1
	                );
	            }
	        },

	        hasFill: function () {
	            var fill = this.fill;
	            return fill != null && fill !== 'none';
	        },

	        hasStroke: function () {
	            var stroke = this.stroke;
	            return stroke != null && stroke !== 'none' && this.lineWidth > 0;
	        },

	        /**
	         * Extend from other style
	         * @param {zrender/graphic/Style} otherStyle
	         * @param {boolean} overwrite
	         */
	        extendFrom: function (otherStyle, overwrite) {
	            if (otherStyle) {
	                var target = this;
	                for (var name in otherStyle) {
	                    if (otherStyle.hasOwnProperty(name)
	                        && (overwrite || ! target.hasOwnProperty(name))
	                    ) {
	                        target[name] = otherStyle[name];
	                    }
	                }
	            }
	        },

	        /**
	         * Batch setting style with a given object
	         * @param {Object|string} obj
	         * @param {*} [obj]
	         */
	        set: function (obj, value) {
	            if (typeof obj === 'string') {
	                this[obj] = value;
	            }
	            else {
	                this.extendFrom(obj, true);
	            }
	        },

	        /**
	         * Clone
	         * @return {zrender/graphic/Style} [description]
	         */
	        clone: function () {
	            var newStyle = new this.constructor();
	            newStyle.extendFrom(this, true);
	            return newStyle;
	        },

	        getGradient: function (ctx, obj, rect) {
	            var method = obj.type === 'radial' ? createRadialGradient : createLinearGradient;
	            var canvasGradient = method(ctx, obj, rect);
	            var colorStops = obj.colorStops;
	            for (var i = 0; i < colorStops.length; i++) {
	                canvasGradient.addColorStop(
	                    colorStops[i].offset, colorStops[i].color
	                );
	            }
	            return canvasGradient;
	        }
	    };

	    var styleProto = Style.prototype;
	    for (var i = 0; i < STYLE_COMMON_PROPS.length; i++) {
	        var prop = STYLE_COMMON_PROPS[i];
	        if (!(prop[0] in styleProto)) {
	            styleProto[prop[0]] = prop[1];
	        }
	    }

	    // Provide for others
	    Style.getGradient = styleProto.getGradient;

	    module.exports = Style;


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Mixin for drawing text in a element bounding rect
	 * @module zrender/mixin/RectText
	 */



	    var textContain = __webpack_require__(247);
	    var BoundingRect = __webpack_require__(248);

	    var tmpRect = new BoundingRect();

	    var RectText = function () {};

	    function parsePercent(value, maxValue) {
	        if (typeof value === 'string') {
	            if (value.lastIndexOf('%') >= 0) {
	                return parseFloat(value) / 100 * maxValue;
	            }
	            return parseFloat(value);
	        }
	        return value;
	    }

	    RectText.prototype = {

	        constructor: RectText,

	        /**
	         * Draw text in a rect with specified position.
	         * @param  {CanvasRenderingContext} ctx
	         * @param  {Object} rect Displayable rect
	         * @return {Object} textRect Alternative precalculated text bounding rect
	         */
	        drawRectText: function (ctx, rect, textRect) {
	            var style = this.style;
	            var text = style.text;
	            // Convert to string
	            text != null && (text += '');
	            if (!text) {
	                return;
	            }

	            // FIXME
	            ctx.save();

	            var x;
	            var y;
	            var textPosition = style.textPosition;
	            var textOffset = style.textOffset;
	            var distance = style.textDistance;
	            var align = style.textAlign;
	            var font = style.textFont || style.font;
	            var baseline = style.textBaseline;
	            var verticalAlign = style.textVerticalAlign;

	            textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);

	            // Transform rect to view space
	            var transform = this.transform;
	            if (!style.textTransform) {
	                if (transform) {
	                    tmpRect.copy(rect);
	                    tmpRect.applyTransform(transform);
	                    rect = tmpRect;
	                }
	            }
	            else {
	                this.setTransform(ctx);
	            }

	            // Text position represented by coord
	            if (textPosition instanceof Array) {
	                // Percent
	                x = rect.x + parsePercent(textPosition[0], rect.width);
	                y = rect.y + parsePercent(textPosition[1], rect.height);
	                align = align || 'left';
	                baseline = baseline || 'top';

	                if (verticalAlign) {
	                    switch (verticalAlign) {
	                        case 'middle':
	                            y -= textRect.height / 2 - textRect.lineHeight / 2;
	                            break;
	                        case 'bottom':
	                            y -= textRect.height - textRect.lineHeight / 2;
	                            break;
	                        default:
	                            y += textRect.lineHeight / 2;
	                    }
	                    // Force bseline to be middle
	                    baseline = 'middle';
	                }
	            }
	            else {
	                var res = textContain.adjustTextPositionOnRect(
	                    textPosition, rect, textRect, distance
	                );
	                x = res.x;
	                y = res.y;
	                // Default align and baseline when has textPosition
	                align = align || res.textAlign;
	                baseline = baseline || res.textBaseline;
	            }

	            if (textOffset) {
	                x += textOffset[0];
	                y += textOffset[1];
	            }

	            // Use canvas default left textAlign. Giving invalid value will cause state not change
	            ctx.textAlign = align || 'left';
	            // Use canvas default alphabetic baseline
	            ctx.textBaseline = baseline || 'alphabetic';

	            var textFill = style.textFill;
	            var textStroke = style.textStroke;
	            textFill && (ctx.fillStyle = textFill);
	            textStroke && (ctx.strokeStyle = textStroke);

	            // TODO Invalid font
	            ctx.font = font || '12px sans-serif';

	            // Text shadow
	            // Always set shadowBlur and shadowOffset to avoid leak from displayable
	            ctx.shadowBlur = style.textShadowBlur;
	            ctx.shadowColor = style.textShadowColor || 'transparent';
	            ctx.shadowOffsetX = style.textShadowOffsetX;
	            ctx.shadowOffsetY = style.textShadowOffsetY;

	            var textLines = text.split('\n');

	            if (style.textRotation) {
	                transform && ctx.translate(transform[4], transform[5]);
	                ctx.rotate(style.textRotation);
	                transform && ctx.translate(-transform[4], -transform[5]);
	            }

	            for (var i = 0; i < textLines.length; i++) {
	                textFill && ctx.fillText(textLines[i], x, y);
	                textStroke && ctx.strokeText(textLines[i], x, y);
	                y += textRect.lineHeight;
	            }

	            ctx.restore();
	        }
	    };

	    module.exports = RectText;


/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 *
	 * @module zrender/core/PathProxy
	 * @author Yi Shen (http://www.github.com/pissang)
	 */

	 // TODO getTotalLength, getPointAtLength


	    var curve = __webpack_require__(289);
	    var vec2 = __webpack_require__(249);
	    var bbox = __webpack_require__(290);
	    var BoundingRect = __webpack_require__(248);
	    var dpr = __webpack_require__(280).devicePixelRatio;

	    var CMD = {
	        M: 1,
	        L: 2,
	        C: 3,
	        Q: 4,
	        A: 5,
	        Z: 6,
	        // Rect
	        R: 7
	    };

	    var min = [];
	    var max = [];
	    var min2 = [];
	    var max2 = [];
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathCos = Math.cos;
	    var mathSin = Math.sin;
	    var mathSqrt = Math.sqrt;
	    var mathAbs = Math.abs;

	    var hasTypedArray = typeof Float32Array != 'undefined';

	    /**
	     * @alias module:zrender/core/PathProxy
	     * @constructor
	     */
	    var PathProxy = function () {

	        /**
	         * Path data. Stored as flat array
	         * @type {Array.<Object>}
	         */
	        this.data = [];

	        this._len = 0;

	        this._ctx = null;

	        this._xi = 0;
	        this._yi = 0;

	        this._x0 = 0;
	        this._y0 = 0;

	        // Unit x, Unit y. Provide for avoiding drawing that too short line segment
	        this._ux = 0;
	        this._uy = 0;
	    };

	    /**
	     * 快速计算Path包围盒（并不是最小包围盒）
	     * @return {Object}
	     */
	    PathProxy.prototype = {

	        constructor: PathProxy,

	        _lineDash: null,

	        _dashOffset: 0,

	        _dashIdx: 0,

	        _dashSum: 0,

	        /**
	         * @readOnly
	         */
	        setScale: function (sx, sy) {
	            this._ux = mathAbs(1 / dpr / sx) || 0;
	            this._uy = mathAbs(1 / dpr / sy) || 0;
	        },

	        getContext: function () {
	            return this._ctx;
	        },

	        /**
	         * @param  {CanvasRenderingContext2D} ctx
	         * @return {module:zrender/core/PathProxy}
	         */
	        beginPath: function (ctx) {

	            this._ctx = ctx;

	            ctx && ctx.beginPath();

	            ctx && (this.dpr = ctx.dpr);

	            // Reset
	            this._len = 0;

	            if (this._lineDash) {
	                this._lineDash = null;

	                this._dashOffset = 0;
	            }

	            return this;
	        },

	        /**
	         * @param  {number} x
	         * @param  {number} y
	         * @return {module:zrender/core/PathProxy}
	         */
	        moveTo: function (x, y) {
	            this.addData(CMD.M, x, y);
	            this._ctx && this._ctx.moveTo(x, y);

	            // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
	            // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
	            // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
	            // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持
	            this._x0 = x;
	            this._y0 = y;

	            this._xi = x;
	            this._yi = y;

	            return this;
	        },

	        /**
	         * @param  {number} x
	         * @param  {number} y
	         * @return {module:zrender/core/PathProxy}
	         */
	        lineTo: function (x, y) {
	            var exceedUnit = mathAbs(x - this._xi) > this._ux
	                || mathAbs(y - this._yi) > this._uy
	                // Force draw the first segment
	                || this._len < 5;

	            this.addData(CMD.L, x, y);

	            if (this._ctx && exceedUnit) {
	                this._needsDash() ? this._dashedLineTo(x, y)
	                    : this._ctx.lineTo(x, y);
	            }
	            if (exceedUnit) {
	                this._xi = x;
	                this._yi = y;
	            }

	            return this;
	        },

	        /**
	         * @param  {number} x1
	         * @param  {number} y1
	         * @param  {number} x2
	         * @param  {number} y2
	         * @param  {number} x3
	         * @param  {number} y3
	         * @return {module:zrender/core/PathProxy}
	         */
	        bezierCurveTo: function (x1, y1, x2, y2, x3, y3) {
	            this.addData(CMD.C, x1, y1, x2, y2, x3, y3);
	            if (this._ctx) {
	                this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)
	                    : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	            }
	            this._xi = x3;
	            this._yi = y3;
	            return this;
	        },

	        /**
	         * @param  {number} x1
	         * @param  {number} y1
	         * @param  {number} x2
	         * @param  {number} y2
	         * @return {module:zrender/core/PathProxy}
	         */
	        quadraticCurveTo: function (x1, y1, x2, y2) {
	            this.addData(CMD.Q, x1, y1, x2, y2);
	            if (this._ctx) {
	                this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2)
	                    : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	            }
	            this._xi = x2;
	            this._yi = y2;
	            return this;
	        },

	        /**
	         * @param  {number} cx
	         * @param  {number} cy
	         * @param  {number} r
	         * @param  {number} startAngle
	         * @param  {number} endAngle
	         * @param  {boolean} anticlockwise
	         * @return {module:zrender/core/PathProxy}
	         */
	        arc: function (cx, cy, r, startAngle, endAngle, anticlockwise) {
	            this.addData(
	                CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1
	            );
	            this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);

	            this._xi = mathCos(endAngle) * r + cx;
	            this._yi = mathSin(endAngle) * r + cx;
	            return this;
	        },

	        // TODO
	        arcTo: function (x1, y1, x2, y2, radius) {
	            if (this._ctx) {
	                this._ctx.arcTo(x1, y1, x2, y2, radius);
	            }
	            return this;
	        },

	        // TODO
	        rect: function (x, y, w, h) {
	            this._ctx && this._ctx.rect(x, y, w, h);
	            this.addData(CMD.R, x, y, w, h);
	            return this;
	        },

	        /**
	         * @return {module:zrender/core/PathProxy}
	         */
	        closePath: function () {
	            this.addData(CMD.Z);

	            var ctx = this._ctx;
	            var x0 = this._x0;
	            var y0 = this._y0;
	            if (ctx) {
	                this._needsDash() && this._dashedLineTo(x0, y0);
	                ctx.closePath();
	            }

	            this._xi = x0;
	            this._yi = y0;
	            return this;
	        },

	        /**
	         * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
	         * stroke 同样
	         * @param {CanvasRenderingContext2D} ctx
	         * @return {module:zrender/core/PathProxy}
	         */
	        fill: function (ctx) {
	            ctx && ctx.fill();
	            this.toStatic();
	        },

	        /**
	         * @param {CanvasRenderingContext2D} ctx
	         * @return {module:zrender/core/PathProxy}
	         */
	        stroke: function (ctx) {
	            ctx && ctx.stroke();
	            this.toStatic();
	        },

	        /**
	         * 必须在其它绘制命令前调用
	         * Must be invoked before all other path drawing methods
	         * @return {module:zrender/core/PathProxy}
	         */
	        setLineDash: function (lineDash) {
	            if (lineDash instanceof Array) {
	                this._lineDash = lineDash;

	                this._dashIdx = 0;

	                var lineDashSum = 0;
	                for (var i = 0; i < lineDash.length; i++) {
	                    lineDashSum += lineDash[i];
	                }
	                this._dashSum = lineDashSum;
	            }
	            return this;
	        },

	        /**
	         * 必须在其它绘制命令前调用
	         * Must be invoked before all other path drawing methods
	         * @return {module:zrender/core/PathProxy}
	         */
	        setLineDashOffset: function (offset) {
	            this._dashOffset = offset;
	            return this;
	        },

	        /**
	         *
	         * @return {boolean}
	         */
	        len: function () {
	            return this._len;
	        },

	        /**
	         * 直接设置 Path 数据
	         */
	        setData: function (data) {

	            var len = data.length;

	            if (! (this.data && this.data.length == len) && hasTypedArray) {
	                this.data = new Float32Array(len);
	            }

	            for (var i = 0; i < len; i++) {
	                this.data[i] = data[i];
	            }

	            this._len = len;
	        },

	        /**
	         * 添加子路径
	         * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
	         */
	        appendPath: function (path) {
	            if (!(path instanceof Array)) {
	                path = [path];
	            }
	            var len = path.length;
	            var appendSize = 0;
	            var offset = this._len;
	            for (var i = 0; i < len; i++) {
	                appendSize += path[i].len();
	            }
	            if (hasTypedArray && (this.data instanceof Float32Array)) {
	                this.data = new Float32Array(offset + appendSize);
	            }
	            for (var i = 0; i < len; i++) {
	                var appendPathData = path[i].data;
	                for (var k = 0; k < appendPathData.length; k++) {
	                    this.data[offset++] = appendPathData[k];
	                }
	            }
	            this._len = offset;
	        },

	        /**
	         * 填充 Path 数据。
	         * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
	         */
	        addData: function (cmd) {
	            var data = this.data;
	            if (this._len + arguments.length > data.length) {
	                // 因为之前的数组已经转换成静态的 Float32Array
	                // 所以不够用时需要扩展一个新的动态数组
	                this._expandData();
	                data = this.data;
	            }
	            for (var i = 0; i < arguments.length; i++) {
	                data[this._len++] = arguments[i];
	            }

	            this._prevCmd = cmd;
	        },

	        _expandData: function () {
	            // Only if data is Float32Array
	            if (!(this.data instanceof Array)) {
	                var newData = [];
	                for (var i = 0; i < this._len; i++) {
	                    newData[i] = this.data[i];
	                }
	                this.data = newData;
	            }
	        },

	        /**
	         * If needs js implemented dashed line
	         * @return {boolean}
	         * @private
	         */
	        _needsDash: function () {
	            return this._lineDash;
	        },

	        _dashedLineTo: function (x1, y1) {
	            var dashSum = this._dashSum;
	            var offset = this._dashOffset;
	            var lineDash = this._lineDash;
	            var ctx = this._ctx;

	            var x0 = this._xi;
	            var y0 = this._yi;
	            var dx = x1 - x0;
	            var dy = y1 - y0;
	            var dist = mathSqrt(dx * dx + dy * dy);
	            var x = x0;
	            var y = y0;
	            var dash;
	            var nDash = lineDash.length;
	            var idx;
	            dx /= dist;
	            dy /= dist;

	            if (offset < 0) {
	                // Convert to positive offset
	                offset = dashSum + offset;
	            }
	            offset %= dashSum;
	            x -= offset * dx;
	            y -= offset * dy;

	            while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)
	            || (dx == 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {
	                idx = this._dashIdx;
	                dash = lineDash[idx];
	                x += dx * dash;
	                y += dy * dash;
	                this._dashIdx = (idx + 1) % nDash;
	                // Skip positive offset
	                if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {
	                    continue;
	                }
	                ctx[idx % 2 ? 'moveTo' : 'lineTo'](
	                    dx >= 0 ? mathMin(x, x1) : mathMax(x, x1),
	                    dy >= 0 ? mathMin(y, y1) : mathMax(y, y1)
	                );
	            }
	            // Offset for next lineTo
	            dx = x - x1;
	            dy = y - y1;
	            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	        },

	        // Not accurate dashed line to
	        _dashedBezierTo: function (x1, y1, x2, y2, x3, y3) {
	            var dashSum = this._dashSum;
	            var offset = this._dashOffset;
	            var lineDash = this._lineDash;
	            var ctx = this._ctx;

	            var x0 = this._xi;
	            var y0 = this._yi;
	            var t;
	            var dx;
	            var dy;
	            var cubicAt = curve.cubicAt;
	            var bezierLen = 0;
	            var idx = this._dashIdx;
	            var nDash = lineDash.length;

	            var x;
	            var y;

	            var tmpLen = 0;

	            if (offset < 0) {
	                // Convert to positive offset
	                offset = dashSum + offset;
	            }
	            offset %= dashSum;
	            // Bezier approx length
	            for (t = 0; t < 1; t += 0.1) {
	                dx = cubicAt(x0, x1, x2, x3, t + 0.1)
	                    - cubicAt(x0, x1, x2, x3, t);
	                dy = cubicAt(y0, y1, y2, y3, t + 0.1)
	                    - cubicAt(y0, y1, y2, y3, t);
	                bezierLen += mathSqrt(dx * dx + dy * dy);
	            }

	            // Find idx after add offset
	            for (; idx < nDash; idx++) {
	                tmpLen += lineDash[idx];
	                if (tmpLen > offset) {
	                    break;
	                }
	            }
	            t = (tmpLen - offset) / bezierLen;

	            while (t <= 1) {

	                x = cubicAt(x0, x1, x2, x3, t);
	                y = cubicAt(y0, y1, y2, y3, t);

	                // Use line to approximate dashed bezier
	                // Bad result if dash is long
	                idx % 2 ? ctx.moveTo(x, y)
	                    : ctx.lineTo(x, y);

	                t += lineDash[idx] / bezierLen;

	                idx = (idx + 1) % nDash;
	            }

	            // Finish the last segment and calculate the new offset
	            (idx % 2 !== 0) && ctx.lineTo(x3, y3);
	            dx = x3 - x;
	            dy = y3 - y;
	            this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	        },

	        _dashedQuadraticTo: function (x1, y1, x2, y2) {
	            // Convert quadratic to cubic using degree elevation
	            var x3 = x2;
	            var y3 = y2;
	            x2 = (x2 + 2 * x1) / 3;
	            y2 = (y2 + 2 * y1) / 3;
	            x1 = (this._xi + 2 * x1) / 3;
	            y1 = (this._yi + 2 * y1) / 3;

	            this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
	        },

	        /**
	         * 转成静态的 Float32Array 减少堆内存占用
	         * Convert dynamic array to static Float32Array
	         */
	        toStatic: function () {
	            var data = this.data;
	            if (data instanceof Array) {
	                data.length = this._len;
	                if (hasTypedArray) {
	                    this.data = new Float32Array(data);
	                }
	            }
	        },

	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getBoundingRect: function () {
	            min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
	            max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;

	            var data = this.data;
	            var xi = 0;
	            var yi = 0;
	            var x0 = 0;
	            var y0 = 0;

	            for (var i = 0; i < data.length;) {
	                var cmd = data[i++];

	                if (i == 1) {
	                    // 如果第一个命令是 L, C, Q
	                    // 则 previous point 同绘制命令的第一个 point
	                    //
	                    // 第一个命令为 Arc 的情况下会在后面特殊处理
	                    xi = data[i];
	                    yi = data[i + 1];

	                    x0 = xi;
	                    y0 = yi;
	                }

	                switch (cmd) {
	                    case CMD.M:
	                        // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                        // 在 closePath 的时候使用
	                        x0 = data[i++];
	                        y0 = data[i++];
	                        xi = x0;
	                        yi = y0;
	                        min2[0] = x0;
	                        min2[1] = y0;
	                        max2[0] = x0;
	                        max2[1] = y0;
	                        break;
	                    case CMD.L:
	                        bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
	                        xi = data[i++];
	                        yi = data[i++];
	                        break;
	                    case CMD.C:
	                        bbox.fromCubic(
	                            xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
	                            min2, max2
	                        );
	                        xi = data[i++];
	                        yi = data[i++];
	                        break;
	                    case CMD.Q:
	                        bbox.fromQuadratic(
	                            xi, yi, data[i++], data[i++], data[i], data[i + 1],
	                            min2, max2
	                        );
	                        xi = data[i++];
	                        yi = data[i++];
	                        break;
	                    case CMD.A:
	                        // TODO Arc 判断的开销比较大
	                        var cx = data[i++];
	                        var cy = data[i++];
	                        var rx = data[i++];
	                        var ry = data[i++];
	                        var startAngle = data[i++];
	                        var endAngle = data[i++] + startAngle;
	                        // TODO Arc 旋转
	                        var psi = data[i++];
	                        var anticlockwise = 1 - data[i++];

	                        if (i == 1) {
	                            // 直接使用 arc 命令
	                            // 第一个命令起点还未定义
	                            x0 = mathCos(startAngle) * rx + cx;
	                            y0 = mathSin(startAngle) * ry + cy;
	                        }

	                        bbox.fromArc(
	                            cx, cy, rx, ry, startAngle, endAngle,
	                            anticlockwise, min2, max2
	                        );

	                        xi = mathCos(endAngle) * rx + cx;
	                        yi = mathSin(endAngle) * ry + cy;
	                        break;
	                    case CMD.R:
	                        x0 = xi = data[i++];
	                        y0 = yi = data[i++];
	                        var width = data[i++];
	                        var height = data[i++];
	                        // Use fromLine
	                        bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
	                        break;
	                    case CMD.Z:
	                        xi = x0;
	                        yi = y0;
	                        break;
	                }

	                // Union
	                vec2.min(min, min, min2);
	                vec2.max(max, max, max2);
	            }

	            // No data
	            if (i === 0) {
	                min[0] = min[1] = max[0] = max[1] = 0;
	            }

	            return new BoundingRect(
	                min[0], min[1], max[0] - min[0], max[1] - min[1]
	            );
	        },

	        /**
	         * Rebuild path from current data
	         * Rebuild path will not consider javascript implemented line dash.
	         * @param {CanvasRenderingContext} ctx
	         */
	        rebuildPath: function (ctx) {
	            var d = this.data;
	            var x0, y0;
	            var xi, yi;
	            var x, y;
	            var ux = this._ux;
	            var uy = this._uy;
	            var len = this._len;
	            for (var i = 0; i < len;) {
	                var cmd = d[i++];

	                if (i == 1) {
	                    // 如果第一个命令是 L, C, Q
	                    // 则 previous point 同绘制命令的第一个 point
	                    //
	                    // 第一个命令为 Arc 的情况下会在后面特殊处理
	                    xi = d[i];
	                    yi = d[i + 1];

	                    x0 = xi;
	                    y0 = yi;
	                }
	                switch (cmd) {
	                    case CMD.M:
	                        x0 = xi = d[i++];
	                        y0 = yi = d[i++];
	                        ctx.moveTo(xi, yi);
	                        break;
	                    case CMD.L:
	                        x = d[i++];
	                        y = d[i++];
	                        // Not draw too small seg between
	                        if (mathAbs(x - xi) > ux || mathAbs(y - yi) > uy || i === len - 1) {
	                            ctx.lineTo(x, y);
	                            xi = x;
	                            yi = y;
	                        }
	                        break;
	                    case CMD.C:
	                        ctx.bezierCurveTo(
	                            d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]
	                        );
	                        xi = d[i - 2];
	                        yi = d[i - 1];
	                        break;
	                    case CMD.Q:
	                        ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
	                        xi = d[i - 2];
	                        yi = d[i - 1];
	                        break;
	                    case CMD.A:
	                        var cx = d[i++];
	                        var cy = d[i++];
	                        var rx = d[i++];
	                        var ry = d[i++];
	                        var theta = d[i++];
	                        var dTheta = d[i++];
	                        var psi = d[i++];
	                        var fs = d[i++];
	                        var r = (rx > ry) ? rx : ry;
	                        var scaleX = (rx > ry) ? 1 : rx / ry;
	                        var scaleY = (rx > ry) ? ry / rx : 1;
	                        var isEllipse = Math.abs(rx - ry) > 1e-3;
	                        var endAngle = theta + dTheta;
	                        if (isEllipse) {
	                            ctx.translate(cx, cy);
	                            ctx.rotate(psi);
	                            ctx.scale(scaleX, scaleY);
	                            ctx.arc(0, 0, r, theta, endAngle, 1 - fs);
	                            ctx.scale(1 / scaleX, 1 / scaleY);
	                            ctx.rotate(-psi);
	                            ctx.translate(-cx, -cy);
	                        }
	                        else {
	                            ctx.arc(cx, cy, r, theta, endAngle, 1 - fs);
	                        }

	                        if (i == 1) {
	                            // 直接使用 arc 命令
	                            // 第一个命令起点还未定义
	                            x0 = mathCos(theta) * rx + cx;
	                            y0 = mathSin(theta) * ry + cy;
	                        }
	                        xi = mathCos(endAngle) * rx + cx;
	                        yi = mathSin(endAngle) * ry + cy;
	                        break;
	                    case CMD.R:
	                        x0 = xi = d[i];
	                        y0 = yi = d[i + 1];
	                        ctx.rect(d[i++], d[i++], d[i++], d[i++]);
	                        break;
	                    case CMD.Z:
	                        ctx.closePath();
	                        xi = x0;
	                        yi = y0;
	                }
	            }
	        }
	    };

	    PathProxy.CMD = CMD;

	    module.exports = PathProxy;


/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 曲线辅助模块
	 * @module zrender/core/curve
	 * @author pissang(https://www.github.com/pissang)
	 */


	    var vec2 = __webpack_require__(249);
	    var v2Create = vec2.create;
	    var v2DistSquare = vec2.distSquare;
	    var mathPow = Math.pow;
	    var mathSqrt = Math.sqrt;

	    var EPSILON = 1e-8;
	    var EPSILON_NUMERIC = 1e-4;

	    var THREE_SQRT = mathSqrt(3);
	    var ONE_THIRD = 1 / 3;

	    // 临时变量
	    var _v0 = v2Create();
	    var _v1 = v2Create();
	    var _v2 = v2Create();
	    // var _v3 = vec2.create();

	    function isAroundZero(val) {
	        return val > -EPSILON && val < EPSILON;
	    }
	    function isNotAroundZero(val) {
	        return val > EPSILON || val < -EPSILON;
	    }
	    /**
	     * 计算三次贝塞尔值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return onet * onet * (onet * p0 + 3 * t * p1)
	             + t * t * (t * p3 + 3 * onet * p2);
	    }

	    /**
	     * 计算三次贝塞尔导数值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @return {number}
	     */
	    function cubicDerivativeAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return 3 * (
	            ((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet
	            + (p3 - p2) * t * t
	        );
	    }

	    /**
	     * 计算三次贝塞尔方程根，使用盛金公式
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} val
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function cubicRootAt(p0, p1, p2, p3, val, roots) {
	        // Evaluate roots of cubic functions
	        var a = p3 + 3 * (p1 - p2) - p0;
	        var b = 3 * (p2 - p1 * 2 + p0);
	        var c = 3 * (p1  - p0);
	        var d = p0 - val;

	        var A = b * b - 3 * a * c;
	        var B = b * c - 9 * a * d;
	        var C = c * c - 3 * b * d;

	        var n = 0;

	        if (isAroundZero(A) && isAroundZero(B)) {
	            if (isAroundZero(b)) {
	                roots[0] = 0;
	            }
	            else {
	                var t1 = -c / b;  //t1, t2, t3, b is not zero
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = B * B - 4 * A * C;

	            if (isAroundZero(disc)) {
	                var K = B / A;
	                var t1 = -b / a + K;  // t1, a is not zero
	                var t2 = -K / 2;  // t2, t3
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	                var Y2 = A * b + 1.5 * a * (-B - discSqrt);
	                if (Y1 < 0) {
	                    Y1 = -mathPow(-Y1, ONE_THIRD);
	                }
	                else {
	                    Y1 = mathPow(Y1, ONE_THIRD);
	                }
	                if (Y2 < 0) {
	                    Y2 = -mathPow(-Y2, ONE_THIRD);
	                }
	                else {
	                    Y2 = mathPow(Y2, ONE_THIRD);
	                }
	                var t1 = (-b - (Y1 + Y2)) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else {
	                var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
	                var theta = Math.acos(T) / 3;
	                var ASqrt = mathSqrt(A);
	                var tmp = Math.cos(theta);

	                var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	                var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	                var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	                if (t3 >= 0 && t3 <= 1) {
	                    roots[n++] = t3;
	                }
	            }
	        }
	        return n;
	    }

	    /**
	     * 计算三次贝塞尔方程极限值的位置
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {Array.<number>} extrema
	     * @return {number} 有效数目
	     */
	    function cubicExtrema(p0, p1, p2, p3, extrema) {
	        var b = 6 * p2 - 12 * p1 + 6 * p0;
	        var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	        var c = 3 * p1 - 3 * p0;

	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <=1) {
	                    extrema[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                extrema[0] = -b / (2 * a);
	            }
	            else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    extrema[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    extrema[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }

	    /**
	     * 细分三次贝塞尔曲线
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} p3
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function cubicSubdivide(p0, p1, p2, p3, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p23 = (p3 - p2) * t + p2;

	        var p012 = (p12 - p01) * t + p01;
	        var p123 = (p23 - p12) * t + p12;

	        var p0123 = (p123 - p012) * t + p012;
	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;
	        out[3] = p0123;
	        // Seg1
	        out[4] = p0123;
	        out[5] = p123;
	        out[6] = p23;
	        out[7] = p3;
	    }

	    /**
	     * 投射点到三次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} [out] 投射点
	     * @return {number}
	     */
	    function cubicProjectPoint(
	        x0, y0, x1, y1, x2, y2, x3, y3,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;
	        var prev;
	        var next;
	        var d1;
	        var d2;

	        _v0[0] = x;
	        _v0[1] = y;

	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	            _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	            d1 = v2DistSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;

	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON_NUMERIC) {
	                break;
	            }
	            prev = t - interval;
	            next = t + interval;
	            // t - interval
	            _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	            _v1[1] = cubicAt(y0, y1, y2, y3, prev);

	            d1 = v2DistSquare(_v1, _v0);

	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = cubicAt(x0, x1, x2, x3, next);
	                _v2[1] = cubicAt(y0, y1, y2, y3, next);
	                d2 = v2DistSquare(_v2, _v0);

	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = cubicAt(x0, x1, x2, x3, t);
	            out[1] = cubicAt(y0, y1, y2, y3, t);
	        }
	        // console.log(interval, i);
	        return mathSqrt(d);
	    }

	    /**
	     * 计算二次方贝塞尔值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticAt(p0, p1, p2, t) {
	        var onet = 1 - t;
	        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	    }

	    /**
	     * 计算二次方贝塞尔导数值
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @return {number}
	     */
	    function quadraticDerivativeAt(p0, p1, p2, t) {
	        return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	    }

	    /**
	     * 计算二次方贝塞尔方程根
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} roots
	     * @return {number} 有效根数目
	     */
	    function quadraticRootAt(p0, p1, p2, val, roots) {
	        var a = p0 - 2 * p1 + p2;
	        var b = 2 * (p1 - p0);
	        var c = p0 - val;

	        var n = 0;
	        if (isAroundZero(a)) {
	            if (isNotAroundZero(b)) {
	                var t1 = -c / b;
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	        }
	        else {
	            var disc = b * b - 4 * a * c;
	            if (isAroundZero(disc)) {
	                var t1 = -b / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	            }
	            else if (disc > 0) {
	                var discSqrt = mathSqrt(disc);
	                var t1 = (-b + discSqrt) / (2 * a);
	                var t2 = (-b - discSqrt) / (2 * a);
	                if (t1 >= 0 && t1 <= 1) {
	                    roots[n++] = t1;
	                }
	                if (t2 >= 0 && t2 <= 1) {
	                    roots[n++] = t2;
	                }
	            }
	        }
	        return n;
	    }

	    /**
	     * 计算二次贝塞尔方程极限值
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @return {number}
	     */
	    function quadraticExtremum(p0, p1, p2) {
	        var divider = p0 + p2 - 2 * p1;
	        if (divider === 0) {
	            // p1 is center of p0 and p2
	            return 0.5;
	        }
	        else {
	            return (p0 - p1) / divider;
	        }
	    }

	    /**
	     * 细分二次贝塞尔曲线
	     * @memberOf module:zrender/core/curve
	     * @param  {number} p0
	     * @param  {number} p1
	     * @param  {number} p2
	     * @param  {number} t
	     * @param  {Array.<number>} out
	     */
	    function quadraticSubdivide(p0, p1, p2, t, out) {
	        var p01 = (p1 - p0) * t + p0;
	        var p12 = (p2 - p1) * t + p1;
	        var p012 = (p12 - p01) * t + p01;

	        // Seg0
	        out[0] = p0;
	        out[1] = p01;
	        out[2] = p012;

	        // Seg1
	        out[3] = p012;
	        out[4] = p12;
	        out[5] = p2;
	    }

	    /**
	     * 投射点到二次贝塞尔曲线上，返回投射距离。
	     * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x
	     * @param {number} y
	     * @param {Array.<number>} out 投射点
	     * @return {number}
	     */
	    function quadraticProjectPoint(
	        x0, y0, x1, y1, x2, y2,
	        x, y, out
	    ) {
	        // http://pomax.github.io/bezierinfo/#projections
	        var t;
	        var interval = 0.005;
	        var d = Infinity;

	        _v0[0] = x;
	        _v0[1] = y;

	        // 先粗略估计一下可能的最小距离的 t 值
	        // PENDING
	        for (var _t = 0; _t < 1; _t += 0.05) {
	            _v1[0] = quadraticAt(x0, x1, x2, _t);
	            _v1[1] = quadraticAt(y0, y1, y2, _t);
	            var d1 = v2DistSquare(_v0, _v1);
	            if (d1 < d) {
	                t = _t;
	                d = d1;
	            }
	        }
	        d = Infinity;

	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            if (interval < EPSILON_NUMERIC) {
	                break;
	            }
	            var prev = t - interval;
	            var next = t + interval;
	            // t - interval
	            _v1[0] = quadraticAt(x0, x1, x2, prev);
	            _v1[1] = quadraticAt(y0, y1, y2, prev);

	            var d1 = v2DistSquare(_v1, _v0);

	            if (prev >= 0 && d1 < d) {
	                t = prev;
	                d = d1;
	            }
	            else {
	                // t + interval
	                _v2[0] = quadraticAt(x0, x1, x2, next);
	                _v2[1] = quadraticAt(y0, y1, y2, next);
	                var d2 = v2DistSquare(_v2, _v0);
	                if (next <= 1 && d2 < d) {
	                    t = next;
	                    d = d2;
	                }
	                else {
	                    interval *= 0.5;
	                }
	            }
	        }
	        // t
	        if (out) {
	            out[0] = quadraticAt(x0, x1, x2, t);
	            out[1] = quadraticAt(y0, y1, y2, t);
	        }
	        // console.log(interval, i);
	        return mathSqrt(d);
	    }

	    module.exports = {

	        cubicAt: cubicAt,

	        cubicDerivativeAt: cubicDerivativeAt,

	        cubicRootAt: cubicRootAt,

	        cubicExtrema: cubicExtrema,

	        cubicSubdivide: cubicSubdivide,

	        cubicProjectPoint: cubicProjectPoint,

	        quadraticAt: quadraticAt,

	        quadraticDerivativeAt: quadraticDerivativeAt,

	        quadraticRootAt: quadraticRootAt,

	        quadraticExtremum: quadraticExtremum,

	        quadraticSubdivide: quadraticSubdivide,

	        quadraticProjectPoint: quadraticProjectPoint
	    };


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @author Yi Shen(https://github.com/pissang)
	 */


	    var vec2 = __webpack_require__(249);
	    var curve = __webpack_require__(289);

	    var bbox = {};
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathSin = Math.sin;
	    var mathCos = Math.cos;

	    var start = vec2.create();
	    var end = vec2.create();
	    var extremity = vec2.create();

	    var PI2 = Math.PI * 2;
	    /**
	     * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	     * @module zrender/core/bbox
	     * @param {Array<Object>} points 顶点数组
	     * @param {number} min
	     * @param {number} max
	     */
	    bbox.fromPoints = function(points, min, max) {
	        if (points.length === 0) {
	            return;
	        }
	        var p = points[0];
	        var left = p[0];
	        var right = p[0];
	        var top = p[1];
	        var bottom = p[1];
	        var i;

	        for (i = 1; i < points.length; i++) {
	            p = points[i];
	            left = mathMin(left, p[0]);
	            right = mathMax(right, p[0]);
	            top = mathMin(top, p[1]);
	            bottom = mathMax(bottom, p[1]);
	        }

	        min[0] = left;
	        min[1] = top;
	        max[0] = right;
	        max[1] = bottom;
	    };

	    /**
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromLine = function (x0, y0, x1, y1, min, max) {
	        min[0] = mathMin(x0, x1);
	        min[1] = mathMin(y0, y1);
	        max[0] = mathMax(x0, x1);
	        max[1] = mathMax(y0, y1);
	    };

	    var xDim = [];
	    var yDim = [];
	    /**
	     * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {number} x3
	     * @param {number} y3
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromCubic = function(
	        x0, y0, x1, y1, x2, y2, x3, y3, min, max
	    ) {
	        var cubicExtrema = curve.cubicExtrema;
	        var cubicAt = curve.cubicAt;
	        var i;
	        var n = cubicExtrema(x0, x1, x2, x3, xDim);
	        min[0] = Infinity;
	        min[1] = Infinity;
	        max[0] = -Infinity;
	        max[1] = -Infinity;

	        for (i = 0; i < n; i++) {
	            var x = cubicAt(x0, x1, x2, x3, xDim[i]);
	            min[0] = mathMin(x, min[0]);
	            max[0] = mathMax(x, max[0]);
	        }
	        n = cubicExtrema(y0, y1, y2, y3, yDim);
	        for (i = 0; i < n; i++) {
	            var y = cubicAt(y0, y1, y2, y3, yDim[i]);
	            min[1] = mathMin(y, min[1]);
	            max[1] = mathMax(y, max[1]);
	        }

	        min[0] = mathMin(x0, min[0]);
	        max[0] = mathMax(x0, max[0]);
	        min[0] = mathMin(x3, min[0]);
	        max[0] = mathMax(x3, max[0]);

	        min[1] = mathMin(y0, min[1]);
	        max[1] = mathMax(y0, max[1]);
	        min[1] = mathMin(y3, min[1]);
	        max[1] = mathMax(y3, max[1]);
	    };

	    /**
	     * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x0
	     * @param {number} y0
	     * @param {number} x1
	     * @param {number} y1
	     * @param {number} x2
	     * @param {number} y2
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromQuadratic = function(x0, y0, x1, y1, x2, y2, min, max) {
	        var quadraticExtremum = curve.quadraticExtremum;
	        var quadraticAt = curve.quadraticAt;
	        // Find extremities, where derivative in x dim or y dim is zero
	        var tx =
	            mathMax(
	                mathMin(quadraticExtremum(x0, x1, x2), 1), 0
	            );
	        var ty =
	            mathMax(
	                mathMin(quadraticExtremum(y0, y1, y2), 1), 0
	            );

	        var x = quadraticAt(x0, x1, x2, tx);
	        var y = quadraticAt(y0, y1, y2, ty);

	        min[0] = mathMin(x0, x2, x);
	        min[1] = mathMin(y0, y2, y);
	        max[0] = mathMax(x0, x2, x);
	        max[1] = mathMax(y0, y2, y);
	    };

	    /**
	     * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	     * @method
	     * @memberOf module:zrender/core/bbox
	     * @param {number} x
	     * @param {number} y
	     * @param {number} rx
	     * @param {number} ry
	     * @param {number} startAngle
	     * @param {number} endAngle
	     * @param {number} anticlockwise
	     * @param {Array.<number>} min
	     * @param {Array.<number>} max
	     */
	    bbox.fromArc = function (
	        x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max
	    ) {
	        var vec2Min = vec2.min;
	        var vec2Max = vec2.max;

	        var diff = Math.abs(startAngle - endAngle);


	        if (diff % PI2 < 1e-4 && diff > 1e-4) {
	            // Is a circle
	            min[0] = x - rx;
	            min[1] = y - ry;
	            max[0] = x + rx;
	            max[1] = y + ry;
	            return;
	        }

	        start[0] = mathCos(startAngle) * rx + x;
	        start[1] = mathSin(startAngle) * ry + y;

	        end[0] = mathCos(endAngle) * rx + x;
	        end[1] = mathSin(endAngle) * ry + y;

	        vec2Min(min, start, end);
	        vec2Max(max, start, end);

	        // Thresh to [0, Math.PI * 2]
	        startAngle = startAngle % (PI2);
	        if (startAngle < 0) {
	            startAngle = startAngle + PI2;
	        }
	        endAngle = endAngle % (PI2);
	        if (endAngle < 0) {
	            endAngle = endAngle + PI2;
	        }

	        if (startAngle > endAngle && !anticlockwise) {
	            endAngle += PI2;
	        }
	        else if (startAngle < endAngle && anticlockwise) {
	            startAngle += PI2;
	        }
	        if (anticlockwise) {
	            var tmp = endAngle;
	            endAngle = startAngle;
	            startAngle = tmp;
	        }

	        // var number = 0;
	        // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
	        for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	            if (angle > startAngle) {
	                extremity[0] = mathCos(angle) * rx + x;
	                extremity[1] = mathSin(angle) * ry + y;

	                vec2Min(min, extremity, min);
	                vec2Max(max, extremity, max);
	            }
	        }
	    };

	    module.exports = bbox;



/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var CMD = __webpack_require__(288).CMD;
	    var line = __webpack_require__(292);
	    var cubic = __webpack_require__(293);
	    var quadratic = __webpack_require__(294);
	    var arc = __webpack_require__(295);
	    var normalizeRadian = __webpack_require__(296).normalizeRadian;
	    var curve = __webpack_require__(289);

	    var windingLine = __webpack_require__(297);

	    var containStroke = line.containStroke;

	    var PI2 = Math.PI * 2;

	    var EPSILON = 1e-4;

	    function isAroundEqual(a, b) {
	        return Math.abs(a - b) < EPSILON;
	    }

	    // 临时数组
	    var roots = [-1, -1, -1];
	    var extrema = [-1, -1];

	    function swapExtrema() {
	        var tmp = extrema[0];
	        extrema[0] = extrema[1];
	        extrema[1] = tmp;
	    }

	    function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	        // Quick reject
	        if (
	            (y > y0 && y > y1 && y > y2 && y > y3)
	            || (y < y0 && y < y1 && y < y2 && y < y3)
	        ) {
	            return 0;
	        }
	        var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
	        if (nRoots === 0) {
	            return 0;
	        }
	        else {
	            var w = 0;
	            var nExtrema = -1;
	            var y0_, y1_;
	            for (var i = 0; i < nRoots; i++) {
	                var t = roots[i];

	                // Avoid winding error when intersection point is the connect point of two line of polygon
	                var unit = (t === 0 || t === 1) ? 0.5 : 1;

	                var x_ = curve.cubicAt(x0, x1, x2, x3, t);
	                if (x_ < x) { // Quick reject
	                    continue;
	                }
	                if (nExtrema < 0) {
	                    nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
	                    if (extrema[1] < extrema[0] && nExtrema > 1) {
	                        swapExtrema();
	                    }
	                    y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
	                    if (nExtrema > 1) {
	                        y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	                    }
	                }
	                if (nExtrema == 2) {
	                    // 分成三段单调函数
	                    if (t < extrema[0]) {
	                        w += y0_ < y0 ? unit : -unit;
	                    }
	                    else if (t < extrema[1]) {
	                        w += y1_ < y0_ ? unit : -unit;
	                    }
	                    else {
	                        w += y3 < y1_ ? unit : -unit;
	                    }
	                }
	                else {
	                    // 分成两段单调函数
	                    if (t < extrema[0]) {
	                        w += y0_ < y0 ? unit : -unit;
	                    }
	                    else {
	                        w += y3 < y0_ ? unit : -unit;
	                    }
	                }
	            }
	            return w;
	        }
	    }

	    function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	        // Quick reject
	        if (
	            (y > y0 && y > y1 && y > y2)
	            || (y < y0 && y < y1 && y < y2)
	        ) {
	            return 0;
	        }
	        var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
	        if (nRoots === 0) {
	            return 0;
	        }
	        else {
	            var t = curve.quadraticExtremum(y0, y1, y2);
	            if (t >= 0 && t <= 1) {
	                var w = 0;
	                var y_ = curve.quadraticAt(y0, y1, y2, t);
	                for (var i = 0; i < nRoots; i++) {
	                    // Remove one endpoint.
	                    var unit = (roots[i] === 0 || roots[i] === 1) ? 0.5 : 1;

	                    var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
	                    if (x_ < x) {   // Quick reject
	                        continue;
	                    }
	                    if (roots[i] < t) {
	                        w += y_ < y0 ? unit : -unit;
	                    }
	                    else {
	                        w += y2 < y_ ? unit : -unit;
	                    }
	                }
	                return w;
	            }
	            else {
	                // Remove one endpoint.
	                var unit = (roots[0] === 0 || roots[0] === 1) ? 0.5 : 1;

	                var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
	                if (x_ < x) {   // Quick reject
	                    return 0;
	                }
	                return y2 < y0 ? unit : -unit;
	            }
	        }
	    }

	    // TODO
	    // Arc 旋转
	    function windingArc(
	        cx, cy, r, startAngle, endAngle, anticlockwise, x, y
	    ) {
	        y -= cy;
	        if (y > r || y < -r) {
	            return 0;
	        }
	        var tmp = Math.sqrt(r * r - y * y);
	        roots[0] = -tmp;
	        roots[1] = tmp;

	        var diff = Math.abs(startAngle - endAngle);
	        if (diff < 1e-4) {
	            return 0;
	        }
	        if (diff % PI2 < 1e-4) {
	            // Is a circle
	            startAngle = 0;
	            endAngle = PI2;
	            var dir = anticlockwise ? 1 : -1;
	            if (x >= roots[0] + cx && x <= roots[1] + cx) {
	                return dir;
	            } else {
	                return 0;
	            }
	        }

	        if (anticlockwise) {
	            var tmp = startAngle;
	            startAngle = normalizeRadian(endAngle);
	            endAngle = normalizeRadian(tmp);
	        }
	        else {
	            startAngle = normalizeRadian(startAngle);
	            endAngle = normalizeRadian(endAngle);
	        }
	        if (startAngle > endAngle) {
	            endAngle += PI2;
	        }

	        var w = 0;
	        for (var i = 0; i < 2; i++) {
	            var x_ = roots[i];
	            if (x_ + cx > x) {
	                var angle = Math.atan2(y, x_);
	                var dir = anticlockwise ? 1 : -1;
	                if (angle < 0) {
	                    angle = PI2 + angle;
	                }
	                if (
	                    (angle >= startAngle && angle <= endAngle)
	                    || (angle + PI2 >= startAngle && angle + PI2 <= endAngle)
	                ) {
	                    if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	                        dir = -dir;
	                    }
	                    w += dir;
	                }
	            }
	        }
	        return w;
	    }

	    function containPath(data, lineWidth, isStroke, x, y) {
	        var w = 0;
	        var xi = 0;
	        var yi = 0;
	        var x0 = 0;
	        var y0 = 0;

	        for (var i = 0; i < data.length;) {
	            var cmd = data[i++];
	            // Begin a new subpath
	            if (cmd === CMD.M && i > 1) {
	                // Close previous subpath
	                if (!isStroke) {
	                    w += windingLine(xi, yi, x0, y0, x, y);
	                }
	                // 如果被任何一个 subpath 包含
	                // if (w !== 0) {
	                //     return true;
	                // }
	            }

	            if (i == 1) {
	                // 如果第一个命令是 L, C, Q
	                // 则 previous point 同绘制命令的第一个 point
	                //
	                // 第一个命令为 Arc 的情况下会在后面特殊处理
	                xi = data[i];
	                yi = data[i + 1];

	                x0 = xi;
	                y0 = yi;
	            }

	            switch (cmd) {
	                case CMD.M:
	                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                    // 在 closePath 的时候使用
	                    x0 = data[i++];
	                    y0 = data[i++];
	                    xi = x0;
	                    yi = y0;
	                    break;
	                case CMD.L:
	                    if (isStroke) {
	                        if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
	                            return true;
	                        }
	                    }
	                    else {
	                        // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
	                        w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
	                    }
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.C:
	                    if (isStroke) {
	                        if (cubic.containStroke(xi, yi,
	                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
	                            lineWidth, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        w += windingCubic(
	                            xi, yi,
	                            data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1],
	                            x, y
	                        ) || 0;
	                    }
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.Q:
	                    if (isStroke) {
	                        if (quadratic.containStroke(xi, yi,
	                            data[i++], data[i++], data[i], data[i + 1],
	                            lineWidth, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        w += windingQuadratic(
	                            xi, yi,
	                            data[i++], data[i++], data[i], data[i + 1],
	                            x, y
	                        ) || 0;
	                    }
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.A:
	                    // TODO Arc 判断的开销比较大
	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var theta = data[i++];
	                    var dTheta = data[i++];
	                    // TODO Arc 旋转
	                    var psi = data[i++];
	                    var anticlockwise = 1 - data[i++];
	                    var x1 = Math.cos(theta) * rx + cx;
	                    var y1 = Math.sin(theta) * ry + cy;
	                    // 不是直接使用 arc 命令
	                    if (i > 1) {
	                        w += windingLine(xi, yi, x1, y1, x, y);
	                    }
	                    else {
	                        // 第一个命令起点还未定义
	                        x0 = x1;
	                        y0 = y1;
	                    }
	                    // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
	                    var _x = (x - cx) * ry / rx + cx;
	                    if (isStroke) {
	                        if (arc.containStroke(
	                            cx, cy, ry, theta, theta + dTheta, anticlockwise,
	                            lineWidth, _x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        w += windingArc(
	                            cx, cy, ry, theta, theta + dTheta, anticlockwise,
	                            _x, y
	                        );
	                    }
	                    xi = Math.cos(theta + dTheta) * rx + cx;
	                    yi = Math.sin(theta + dTheta) * ry + cy;
	                    break;
	                case CMD.R:
	                    x0 = xi = data[i++];
	                    y0 = yi = data[i++];
	                    var width = data[i++];
	                    var height = data[i++];
	                    var x1 = x0 + width;
	                    var y1 = y0 + height;
	                    if (isStroke) {
	                        if (containStroke(x0, y0, x1, y0, lineWidth, x, y)
	                          || containStroke(x1, y0, x1, y1, lineWidth, x, y)
	                          || containStroke(x1, y1, x0, y1, lineWidth, x, y)
	                          || containStroke(x0, y1, x0, y0, lineWidth, x, y)
	                        ) {
	                            return true;
	                        }
	                    }
	                    else {
	                        // FIXME Clockwise ?
	                        w += windingLine(x1, y0, x1, y1, x, y);
	                        w += windingLine(x0, y1, x0, y0, x, y);
	                    }
	                    break;
	                case CMD.Z:
	                    if (isStroke) {
	                        if (containStroke(
	                            xi, yi, x0, y0, lineWidth, x, y
	                        )) {
	                            return true;
	                        }
	                    }
	                    else {
	                        // Close a subpath
	                        w += windingLine(xi, yi, x0, y0, x, y);
	                        // 如果被任何一个 subpath 包含
	                        // FIXME subpaths may overlap
	                        // if (w !== 0) {
	                        //     return true;
	                        // }
	                    }
	                    xi = x0;
	                    yi = y0;
	                    break;
	            }
	        }
	        if (!isStroke && !isAroundEqual(yi, y0)) {
	            w += windingLine(xi, yi, x0, y0, x, y) || 0;
	        }
	        return w !== 0;
	    }

	    module.exports = {
	        contain: function (pathData, x, y) {
	            return containPath(pathData, 0, false, x, y);
	        },

	        containStroke: function (pathData, lineWidth, x, y) {
	            return containPath(pathData, lineWidth, true, x, y);
	        }
	    };


/***/ },
/* 292 */
/***/ function(module, exports) {

	
	    module.exports = {
	        /**
	         * 线段包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function (x0, y0, x1, y1, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            var _a = 0;
	            var _b = x0;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l)
	                || (y < y0 - _l && y < y1 - _l)
	                || (x > x0 + _l && x > x1 + _l)
	                || (x < x0 - _l && x < x1 - _l)
	            ) {
	                return false;
	            }

	            if (x0 !== x1) {
	                _a = (y0 - y1) / (x0 - x1);
	                _b = (x0 * y1 - x1 * y0) / (x0 - x1) ;
	            }
	            else {
	                return Math.abs(x - x0) <= _l / 2;
	            }
	            var tmp = _a * x - y + _b;
	            var _s = tmp * tmp / (_a * _a + 1);
	            return _s <= _l / 2 * _l / 2;
	        }
	    };


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	

	    var curve = __webpack_require__(289);

	    module.exports = {
	        /**
	         * 三次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  x3
	         * @param  {number}  y3
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l)
	            ) {
	                return false;
	            }
	            var d = curve.cubicProjectPoint(
	                x0, y0, x1, y1, x2, y2, x3, y3,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }
	    };


/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	

	    var curve = __webpack_require__(289);

	    module.exports = {
	        /**
	         * 二次贝塞尔曲线描边包含判断
	         * @param  {number}  x0
	         * @param  {number}  y0
	         * @param  {number}  x1
	         * @param  {number}  y1
	         * @param  {number}  x2
	         * @param  {number}  y2
	         * @param  {number}  lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {boolean}
	         */
	        containStroke: function (x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;
	            // Quick reject
	            if (
	                (y > y0 + _l && y > y1 + _l && y > y2 + _l)
	                || (y < y0 - _l && y < y1 - _l && y < y2 - _l)
	                || (x > x0 + _l && x > x1 + _l && x > x2 + _l)
	                || (x < x0 - _l && x < x1 - _l && x < x2 - _l)
	            ) {
	                return false;
	            }
	            var d = curve.quadraticProjectPoint(
	                x0, y0, x1, y1, x2, y2,
	                x, y, null
	            );
	            return d <= _l / 2;
	        }
	    };


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	

	    var normalizeRadian = __webpack_require__(296).normalizeRadian;
	    var PI2 = Math.PI * 2;

	    module.exports = {
	        /**
	         * 圆弧描边包含判断
	         * @param  {number}  cx
	         * @param  {number}  cy
	         * @param  {number}  r
	         * @param  {number}  startAngle
	         * @param  {number}  endAngle
	         * @param  {boolean}  anticlockwise
	         * @param  {number} lineWidth
	         * @param  {number}  x
	         * @param  {number}  y
	         * @return {Boolean}
	         */
	        containStroke: function (
	            cx, cy, r, startAngle, endAngle, anticlockwise,
	            lineWidth, x, y
	        ) {

	            if (lineWidth === 0) {
	                return false;
	            }
	            var _l = lineWidth;

	            x -= cx;
	            y -= cy;
	            var d = Math.sqrt(x * x + y * y);

	            if ((d - _l > r) || (d + _l < r)) {
	                return false;
	            }
	            if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {
	                // Is a circle
	                return true;
	            }
	            if (anticlockwise) {
	                var tmp = startAngle;
	                startAngle = normalizeRadian(endAngle);
	                endAngle = normalizeRadian(tmp);
	            } else {
	                startAngle = normalizeRadian(startAngle);
	                endAngle = normalizeRadian(endAngle);
	            }
	            if (startAngle > endAngle) {
	                endAngle += PI2;
	            }

	            var angle = Math.atan2(y, x);
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return (angle >= startAngle && angle <= endAngle)
	                || (angle + PI2 >= startAngle && angle + PI2 <= endAngle);
	        }
	    };


/***/ },
/* 296 */
/***/ function(module, exports) {

	

	    var PI2 = Math.PI * 2;
	    module.exports = {
	        normalizeRadian: function(angle) {
	            angle %= PI2;
	            if (angle < 0) {
	                angle += PI2;
	            }
	            return angle;
	        }
	    };


/***/ },
/* 297 */
/***/ function(module, exports) {

	
	    module.exports = function windingLine(x0, y0, x1, y1, x, y) {
	        if ((y > y0 && y > y1) || (y < y0 && y < y1)) {
	            return 0;
	        }
	        // Ignore horizontal line
	        if (y1 === y0) {
	            return 0;
	        }
	        var dir = y1 < y0 ? 1 : -1;
	        var t = (y - y0) / (y1 - y0);

	        // Avoid winding error when intersection point is the connect point of two line of polygon
	        if (t === 1 || t === 0) {
	            dir = y1 < y0 ? 0.5 : -0.5;
	        }

	        var x_ = t * (x1 - x0) + x0;

	        return x_ > x ? dir : 0;
	    };


/***/ },
/* 298 */
/***/ function(module, exports) {

	

	    var Pattern = function (image, repeat) {
	        this.image = image;
	        this.repeat = repeat;

	        // Can be cloned
	        this.type = 'pattern';
	    };

	    Pattern.prototype.getCanvasPattern = function (ctx) {

	        return this._canvasPattern
	            || (this._canvasPattern = ctx.createPattern(this.image, this.repeat));
	    };

	    module.exports = Pattern;


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	

	    var CMD = __webpack_require__(288).CMD;
	    var vec2 = __webpack_require__(249);
	    var v2ApplyTransform = vec2.applyTransform;

	    var points = [[], [], []];
	    var mathSqrt = Math.sqrt;
	    var mathAtan2 = Math.atan2;
	    function transformPath(path, m) {
	        var data = path.data;
	        var cmd;
	        var nPoint;
	        var i;
	        var j;
	        var k;
	        var p;

	        var M = CMD.M;
	        var C = CMD.C;
	        var L = CMD.L;
	        var R = CMD.R;
	        var A = CMD.A;
	        var Q = CMD.Q;

	        for (i = 0, j = 0; i < data.length;) {
	            cmd = data[i++];
	            j = i;
	            nPoint = 0;

	            switch (cmd) {
	                case M:
	                    nPoint = 1;
	                    break;
	                case L:
	                    nPoint = 1;
	                    break;
	                case C:
	                    nPoint = 3;
	                    break;
	                case Q:
	                    nPoint = 2;
	                    break;
	                case A:
	                    var x = m[4];
	                    var y = m[5];
	                    var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
	                    var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
	                    var angle = mathAtan2(-m[1] / sy, m[0] / sx);
	                    // cx
	                    data[i++] += x;
	                    // cy
	                    data[i++] += y;
	                    // Scale rx and ry
	                    // FIXME Assume psi is 0 here
	                    data[i++] *= sx;
	                    data[i++] *= sy;

	                    // Start angle
	                    data[i++] += angle;
	                    // end angle
	                    data[i++] += angle;
	                    // FIXME psi
	                    i += 2;
	                    j = i;
	                    break;
	                case R:
	                    // x0, y0
	                    p[0] = data[i++];
	                    p[1] = data[i++];
	                    v2ApplyTransform(p, p, m);
	                    data[j++] = p[0];
	                    data[j++] = p[1];
	                    // x1, y1
	                    p[0] += data[i++];
	                    p[1] += data[i++];
	                    v2ApplyTransform(p, p, m);
	                    data[j++] = p[0];
	                    data[j++] = p[1];
	            }

	            for (k = 0; k < nPoint; k++) {
	                var p = points[k];
	                p[0] = data[i++];
	                p[1] = data[i++];

	                v2ApplyTransform(p, p, m);
	                // Write back
	                data[j++] = p[0];
	                data[j++] = p[1];
	            }
	        }
	    }

	    module.exports = transformPath;


/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Image element
	 * @module zrender/graphic/Image
	 */



	    var Displayable = __webpack_require__(285);
	    var BoundingRect = __webpack_require__(248);
	    var zrUtil = __webpack_require__(243);

	    var LRU = __webpack_require__(301);
	    var globalImageCache = new LRU(50);
	    /**
	     * @alias zrender/graphic/Image
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    function ZImage(opts) {
	        Displayable.call(this, opts);
	    }

	    ZImage.prototype = {

	        constructor: ZImage,

	        type: 'image',

	        brush: function (ctx, prevEl) {
	            var style = this.style;
	            var src = style.image;
	            var image;

	            // Must bind each time
	            style.bind(ctx, this, prevEl);
	            // style.image is a url string
	            if (typeof src === 'string') {
	                image = this._image;
	            }
	            // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas
	            else {
	                image = src;
	            }
	            // FIXME Case create many images with src
	            if (!image && src) {
	                // Try get from global image cache
	                var cachedImgObj = globalImageCache.get(src);
	                if (!cachedImgObj) {
	                    // Create a new image
	                    image = new Image();
	                    image.onload = function () {
	                        image.onload = null;
	                        for (var i = 0; i < cachedImgObj.pending.length; i++) {
	                            cachedImgObj.pending[i].dirty();
	                        }
	                    };
	                    cachedImgObj = {
	                        image: image,
	                        pending: [this]
	                    };
	                    image.src = src;
	                    globalImageCache.put(src, cachedImgObj);
	                    this._image = image;
	                    return;
	                }
	                else {
	                    image = cachedImgObj.image;
	                    this._image = image;
	                    // Image is not complete finish, add to pending list
	                    if (!image.width || !image.height) {
	                        cachedImgObj.pending.push(this);
	                        return;
	                    }
	                }
	            }

	            if (image) {
	                // 图片已经加载完成
	                // if (image.nodeName.toUpperCase() == 'IMG') {
	                //     if (!image.complete) {
	                //         return;
	                //     }
	                // }
	                // Else is canvas

	                var width = style.width || image.width;
	                var height = style.height || image.height;
	                var x = style.x || 0;
	                var y = style.y || 0;
	                // 图片加载失败
	                if (!image.width || !image.height) {
	                    return;
	                }

	                // 设置transform
	                this.setTransform(ctx);


	                if (style.sWidth && style.sHeight) {
	                    var sx = style.sx || 0;
	                    var sy = style.sy || 0;
	                    ctx.drawImage(
	                        image,
	                        sx, sy, style.sWidth, style.sHeight,
	                        x, y, width, height
	                    );
	                }
	                else if (style.sx && style.sy) {
	                    var sx = style.sx;
	                    var sy = style.sy;
	                    var sWidth = width - sx;
	                    var sHeight = height - sy;
	                    ctx.drawImage(
	                        image,
	                        sx, sy, sWidth, sHeight,
	                        x, y, width, height
	                    );
	                }
	                else {
	                    ctx.drawImage(image, x, y, width, height);
	                }

	                // 如果没设置宽和高的话自动根据图片宽高设置
	                if (style.width == null) {
	                    style.width = width;
	                }
	                if (style.height == null) {
	                    style.height = height;
	                }

	                this.restoreTransform(ctx);

	                // Draw rect text
	                if (style.text != null) {
	                    this.drawRectText(ctx, this.getBoundingRect());
	                }

	            }
	        },

	        getBoundingRect: function () {
	            var style = this.style;
	            if (! this._rect) {
	                this._rect = new BoundingRect(
	                    style.x || 0, style.y || 0, style.width || 0, style.height || 0
	                );
	            }
	            return this._rect;
	        }
	    };

	    zrUtil.inherits(ZImage, Displayable);

	    module.exports = ZImage;


/***/ },
/* 301 */
/***/ function(module, exports) {

	// Simple LRU cache use doubly linked list
	// @module zrender/core/LRU


	    /**
	     * Simple double linked list. Compared with array, it has O(1) remove operation.
	     * @constructor
	     */
	    var LinkedList = function() {

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.head = null;

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.tail = null;

	        this._len = 0;
	    };

	    var linkedListProto = LinkedList.prototype;
	    /**
	     * Insert a new value at the tail
	     * @param  {} val
	     * @return {module:zrender/core/LRU~Entry}
	     */
	    linkedListProto.insert = function(val) {
	        var entry = new Entry(val);
	        this.insertEntry(entry);
	        return entry;
	    };

	    /**
	     * Insert an entry at the tail
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.insertEntry = function(entry) {
	        if (!this.head) {
	            this.head = this.tail = entry;
	        }
	        else {
	            this.tail.next = entry;
	            entry.prev = this.tail;
	            this.tail = entry;
	        }
	        this._len++;
	    };

	    /**
	     * Remove entry.
	     * @param  {module:zrender/core/LRU~Entry} entry
	     */
	    linkedListProto.remove = function(entry) {
	        var prev = entry.prev;
	        var next = entry.next;
	        if (prev) {
	            prev.next = next;
	        }
	        else {
	            // Is head
	            this.head = next;
	        }
	        if (next) {
	            next.prev = prev;
	        }
	        else {
	            // Is tail
	            this.tail = prev;
	        }
	        entry.next = entry.prev = null;
	        this._len--;
	    };

	    /**
	     * @return {number}
	     */
	    linkedListProto.len = function() {
	        return this._len;
	    };

	    /**
	     * @constructor
	     * @param {} val
	     */
	    var Entry = function(val) {
	        /**
	         * @type {}
	         */
	        this.value = val;

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.next;

	        /**
	         * @type {module:zrender/core/LRU~Entry}
	         */
	        this.prev;
	    };

	    /**
	     * LRU Cache
	     * @constructor
	     * @alias module:zrender/core/LRU
	     */
	    var LRU = function(maxSize) {

	        this._list = new LinkedList();

	        this._map = {};

	        this._maxSize = maxSize || 10;
	    };

	    var LRUProto = LRU.prototype;

	    /**
	     * @param  {string} key
	     * @param  {} value
	     */
	    LRUProto.put = function(key, value) {
	        var list = this._list;
	        var map = this._map;
	        if (map[key] == null) {
	            var len = list.len();
	            if (len >= this._maxSize && len > 0) {
	                // Remove the least recently used
	                var leastUsedEntry = list.head;
	                list.remove(leastUsedEntry);
	                delete map[leastUsedEntry.key];
	            }

	            var entry = list.insert(value);
	            entry.key = key;
	            map[key] = entry;
	        }
	    };

	    /**
	     * @param  {string} key
	     * @return {}
	     */
	    LRUProto.get = function(key) {
	        var entry = this._map[key];
	        var list = this._list;
	        if (entry != null) {
	            // Put the latest used entry in the tail
	            if (entry !== list.tail) {
	                list.remove(entry);
	                list.insertEntry(entry);
	            }

	            return entry.value;
	        }
	    };

	    /**
	     * Clear the cache
	     */
	    LRUProto.clear = function() {
	        this._list.clear();
	        this._map = {};
	    };

	    module.exports = LRU;


/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Text element
	 * @module zrender/graphic/Text
	 *
	 * TODO Wrapping
	 *
	 * Text not support gradient
	 */



	    var Displayable = __webpack_require__(285);
	    var zrUtil = __webpack_require__(243);
	    var textContain = __webpack_require__(247);

	    /**
	     * @alias zrender/graphic/Text
	     * @extends module:zrender/graphic/Displayable
	     * @constructor
	     * @param {Object} opts
	     */
	    var Text = function (opts) {
	        Displayable.call(this, opts);
	    };

	    Text.prototype = {

	        constructor: Text,

	        type: 'text',

	        brush: function (ctx, prevEl) {
	            var style = this.style;
	            var x = style.x || 0;
	            var y = style.y || 0;
	            // Convert to string
	            var text = style.text;

	            // Convert to string
	            text != null && (text += '');

	            // Always bind style
	            style.bind(ctx, this, prevEl);

	            if (text) {

	                this.setTransform(ctx);

	                var textBaseline;
	                var textAlign = style.textAlign;
	                var font = style.textFont || style.font;
	                if (style.textVerticalAlign) {
	                    var rect = textContain.getBoundingRect(
	                        text, font, style.textAlign, 'top'
	                    );
	                    // Ignore textBaseline
	                    textBaseline = 'middle';
	                    switch (style.textVerticalAlign) {
	                        case 'middle':
	                            y -= rect.height / 2 - rect.lineHeight / 2;
	                            break;
	                        case 'bottom':
	                            y -= rect.height - rect.lineHeight / 2;
	                            break;
	                        default:
	                            y += rect.lineHeight / 2;
	                    }
	                }
	                else {
	                    textBaseline = style.textBaseline;
	                }

	                // TODO Invalid font
	                ctx.font = font || '12px sans-serif';
	                ctx.textAlign = textAlign || 'left';
	                // Use canvas default left textAlign. Giving invalid value will cause state not change
	                if (ctx.textAlign !== textAlign) {
	                    ctx.textAlign = 'left';
	                }
	                ctx.textBaseline = textBaseline || 'alphabetic';
	                // Use canvas default alphabetic baseline
	                if (ctx.textBaseline !== textBaseline) {
	                    ctx.textBaseline = 'alphabetic';
	                }

	                var lineHeight = textContain.measureText('国', ctx.font).width;

	                var textLines = text.split('\n');
	                for (var i = 0; i < textLines.length; i++) {
	                    style.hasFill() && ctx.fillText(textLines[i], x, y);
	                    style.hasStroke() && ctx.strokeText(textLines[i], x, y);
	                    y += lineHeight;
	                }

	                this.restoreTransform(ctx);
	            }
	        },

	        getBoundingRect: function () {
	            if (!this._rect) {
	                var style = this.style;
	                var textVerticalAlign = style.textVerticalAlign;
	                var rect = textContain.getBoundingRect(
	                    style.text + '', style.textFont || style.font, style.textAlign,
	                    textVerticalAlign ? 'top' : style.textBaseline
	                );
	                switch (textVerticalAlign) {
	                    case 'middle':
	                        rect.y -= rect.height / 2;
	                        break;
	                    case 'bottom':
	                        rect.y -= rect.height;
	                        break;
	                }
	                rect.x += style.x || 0;
	                rect.y += style.y || 0;
	                this._rect = rect;
	            }
	            return this._rect;
	        }
	    };

	    zrUtil.inherits(Text, Displayable);

	    module.exports = Text;


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 圆形
	 * @module zrender/shape/Circle
	 */



	    module.exports = __webpack_require__(284).extend({

	        type: 'circle',

	        shape: {
	            cx: 0,
	            cy: 0,
	            r: 0
	        },


	        buildPath : function (ctx, shape, inBundle) {
	            // Better stroking in ShapeBundle
	            // Always do it may have performence issue ( fill may be 2x more cost)
	            if (inBundle) {
	                ctx.moveTo(shape.cx + shape.r, shape.cy);
	            }
	            // Better stroking in ShapeBundle
	            // ctx.moveTo(shape.cx + shape.r, shape.cy);
	            ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
	        }
	    });



/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 扇形
	 * @module zrender/graphic/shape/Sector
	 */



	    var env = __webpack_require__(241);
	    var Path = __webpack_require__(284);

	    var shadowTemp = [
	        ['shadowBlur', 0],
	        ['shadowColor', '#000'],
	        ['shadowOffsetX', 0],
	        ['shadowOffsetY', 0]
	    ];

	    module.exports = Path.extend({

	        type: 'sector',

	        shape: {

	            cx: 0,

	            cy: 0,

	            r0: 0,

	            r: 0,

	            startAngle: 0,

	            endAngle: Math.PI * 2,

	            clockwise: true
	        },

	        brush: (env.browser.ie && env.browser.version >= 11) // version: '11.0'
	            // Fix weird bug in some version of IE11 (like 11.0.9600.17801),
	            // where exception "unexpected call to method or property access"
	            // might be thrown when calling ctx.fill after a path whose area size
	            // is zero is drawn and ctx.clip() is called and shadowBlur is set.
	            // (e.g.,
	            //  ctx.moveTo(10, 10);
	            //  ctx.lineTo(20, 10);
	            //  ctx.closePath();
	            //  ctx.clip();
	            //  ctx.shadowBlur = 10;
	            //  ...
	            //  ctx.fill();
	            // )
	            ? function () {
	                var clipPaths = this.__clipPaths;
	                var style = this.style;
	                var modified;

	                if (clipPaths) {
	                    for (var i = 0; i < clipPaths.length; i++) {
	                        var shape = clipPaths[i] && clipPaths[i].shape;
	                        if (shape && shape.startAngle === shape.endAngle) {
	                            for (var j = 0; j < shadowTemp.length; j++) {
	                                shadowTemp[j][2] = style[shadowTemp[j][0]];
	                                style[shadowTemp[j][0]] = shadowTemp[j][1];
	                            }
	                            modified = true;
	                            break;
	                        }
	                    }
	                }

	                Path.prototype.brush.apply(this, arguments);

	                if (modified) {
	                    for (var j = 0; j < shadowTemp.length; j++) {
	                        style[shadowTemp[j][0]] = shadowTemp[j][2];
	                    }
	                }
	            }
	            : Path.prototype.brush,

	        buildPath: function (ctx, shape) {

	            var x = shape.cx;
	            var y = shape.cy;
	            var r0 = Math.max(shape.r0 || 0, 0);
	            var r = Math.max(shape.r, 0);
	            var startAngle = shape.startAngle;
	            var endAngle = shape.endAngle;
	            var clockwise = shape.clockwise;

	            var unitX = Math.cos(startAngle);
	            var unitY = Math.sin(startAngle);

	            ctx.moveTo(unitX * r0 + x, unitY * r0 + y);

	            ctx.lineTo(unitX * r + x, unitY * r + y);

	            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);

	            ctx.lineTo(
	                Math.cos(endAngle) * r0 + x,
	                Math.sin(endAngle) * r0 + y
	            );

	            if (r0 !== 0) {
	                ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
	            }

	            ctx.closePath();
	        }
	    });



/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 圆环
	 * @module zrender/graphic/shape/Ring
	 */


	    module.exports = __webpack_require__(284).extend({

	        type: 'ring',

	        shape: {
	            cx: 0,
	            cy: 0,
	            r: 0,
	            r0: 0
	        },

	        buildPath: function (ctx, shape) {
	            var x = shape.cx;
	            var y = shape.cy;
	            var PI2 = Math.PI * 2;
	            ctx.moveTo(x + shape.r, y);
	            ctx.arc(x, y, shape.r, 0, PI2, false);
	            ctx.moveTo(x + shape.r0, y);
	            ctx.arc(x, y, shape.r0, 0, PI2, true);
	        }
	    });



/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 */


	    var polyHelper = __webpack_require__(307);

	    module.exports = __webpack_require__(284).extend({
	        
	        type: 'polygon',

	        shape: {
	            points: null,

	            smooth: false,

	            smoothConstraint: null
	        },

	        buildPath: function (ctx, shape) {
	            polyHelper.buildPath(ctx, shape, true);
	        }
	    });


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	

	    var smoothSpline = __webpack_require__(308);
	    var smoothBezier = __webpack_require__(309);

	    module.exports = {
	        buildPath: function (ctx, shape, closePath) {
	            var points = shape.points;
	            var smooth = shape.smooth;
	            if (points && points.length >= 2) {
	                if (smooth && smooth !== 'spline') {
	                    var controlPoints = smoothBezier(
	                        points, smooth, closePath, shape.smoothConstraint
	                    );

	                    ctx.moveTo(points[0][0], points[0][1]);
	                    var len = points.length;
	                    for (var i = 0; i < (closePath ? len : len - 1); i++) {
	                        var cp1 = controlPoints[i * 2];
	                        var cp2 = controlPoints[i * 2 + 1];
	                        var p = points[(i + 1) % len];
	                        ctx.bezierCurveTo(
	                            cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]
	                        );
	                    }
	                }
	                else {
	                    if (smooth === 'spline') {
	                        points = smoothSpline(points, closePath);
	                    }

	                    ctx.moveTo(points[0][0], points[0][1]);
	                    for (var i = 1, l = points.length; i < l; i++) {
	                        ctx.lineTo(points[i][0], points[i][1]);
	                    }
	                }

	                closePath && ctx.closePath();
	            }
	        }
	    };


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */

	    var vec2 = __webpack_require__(249);

	    /**
	     * @inner
	     */
	    function interpolate(p0, p1, p2, p3, t, t2, t3) {
	        var v0 = (p2 - p0) * 0.5;
	        var v1 = (p3 - p1) * 0.5;
	        return (2 * (p1 - p2) + v0 + v1) * t3
	                + (-3 * (p1 - p2) - 2 * v0 - v1) * t2
	                + v0 * t + p1;
	    }

	    /**
	     * @alias module:zrender/shape/util/smoothSpline
	     * @param {Array} points 线段顶点数组
	     * @param {boolean} isLoop
	     * @return {Array}
	     */
	    module.exports = function (points, isLoop) {
	        var len = points.length;
	        var ret = [];

	        var distance = 0;
	        for (var i = 1; i < len; i++) {
	            distance += vec2.distance(points[i - 1], points[i]);
	        }

	        var segs = distance / 2;
	        segs = segs < len ? len : segs;
	        for (var i = 0; i < segs; i++) {
	            var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	            var idx = Math.floor(pos);

	            var w = pos - idx;

	            var p0;
	            var p1 = points[idx % len];
	            var p2;
	            var p3;
	            if (!isLoop) {
	                p0 = points[idx === 0 ? idx : idx - 1];
	                p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	                p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	            }
	            else {
	                p0 = points[(idx - 1 + len) % len];
	                p2 = points[(idx + 1) % len];
	                p3 = points[(idx + 2) % len];
	            }

	            var w2 = w * w;
	            var w3 = w * w2;

	            ret.push([
	                interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3),
	                interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)
	            ]);
	        }
	        return ret;
	    };



/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 贝塞尔平滑曲线
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */


	    var vec2 = __webpack_require__(249);
	    var v2Min = vec2.min;
	    var v2Max = vec2.max;
	    var v2Scale = vec2.scale;
	    var v2Distance = vec2.distance;
	    var v2Add = vec2.add;

	    /**
	     * 贝塞尔平滑曲线
	     * @alias module:zrender/shape/util/smoothBezier
	     * @param {Array} points 线段顶点数组
	     * @param {number} smooth 平滑等级, 0-1
	     * @param {boolean} isLoop
	     * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	     *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	     *                           整个折线的包围盒做一个并集用来约束控制点。
	     * @param {Array} 计算出来的控制点数组
	     */
	    module.exports = function (points, smooth, isLoop, constraint) {
	        var cps = [];

	        var v = [];
	        var v1 = [];
	        var v2 = [];
	        var prevPoint;
	        var nextPoint;

	        var min, max;
	        if (constraint) {
	            min = [Infinity, Infinity];
	            max = [-Infinity, -Infinity];
	            for (var i = 0, len = points.length; i < len; i++) {
	                v2Min(min, min, points[i]);
	                v2Max(max, max, points[i]);
	            }
	            // 与指定的包围盒做并集
	            v2Min(min, min, constraint[0]);
	            v2Max(max, max, constraint[1]);
	        }

	        for (var i = 0, len = points.length; i < len; i++) {
	            var point = points[i];

	            if (isLoop) {
	                prevPoint = points[i ? i - 1 : len - 1];
	                nextPoint = points[(i + 1) % len];
	            }
	            else {
	                if (i === 0 || i === len - 1) {
	                    cps.push(vec2.clone(points[i]));
	                    continue;
	                }
	                else {
	                    prevPoint = points[i - 1];
	                    nextPoint = points[i + 1];
	                }
	            }

	            vec2.sub(v, nextPoint, prevPoint);

	            // use degree to scale the handle length
	            v2Scale(v, v, smooth);

	            var d0 = v2Distance(point, prevPoint);
	            var d1 = v2Distance(point, nextPoint);
	            var sum = d0 + d1;
	            if (sum !== 0) {
	                d0 /= sum;
	                d1 /= sum;
	            }

	            v2Scale(v1, v, -d0);
	            v2Scale(v2, v, d1);
	            var cp0 = v2Add([], point, v1);
	            var cp1 = v2Add([], point, v2);
	            if (constraint) {
	                v2Max(cp0, cp0, min);
	                v2Min(cp0, cp0, max);
	                v2Max(cp1, cp1, min);
	                v2Min(cp1, cp1, max);
	            }
	            cps.push(cp0);
	            cps.push(cp1);
	        }

	        if (isLoop) {
	            cps.push(cps.shift());
	        }

	        return cps;
	    };



/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module zrender/graphic/shape/Polyline
	 */


	    var polyHelper = __webpack_require__(307);

	    module.exports = __webpack_require__(284).extend({
	        
	        type: 'polyline',

	        shape: {
	            points: null,

	            smooth: false,

	            smoothConstraint: null
	        },

	        style: {
	            stroke: '#000',

	            fill: null
	        },

	        buildPath: function (ctx, shape) {
	            polyHelper.buildPath(ctx, shape, false);
	        }
	    });


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 矩形
	 * @module zrender/graphic/shape/Rect
	 */


	    var roundRectHelper = __webpack_require__(312);

	    module.exports = __webpack_require__(284).extend({

	        type: 'rect',

	        shape: {
	            // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	            // r缩写为1         相当于 [1, 1, 1, 1]
	            // r缩写为[1]       相当于 [1, 1, 1, 1]
	            // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	            // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	            r: 0,

	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },

	        buildPath: function (ctx, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var width = shape.width;
	            var height = shape.height;
	            if (!shape.r) {
	                ctx.rect(x, y, width, height);
	            }
	            else {
	                roundRectHelper.buildPath(ctx, shape);
	            }
	            ctx.closePath();
	            return;
	        }
	    });



/***/ },
/* 312 */
/***/ function(module, exports) {

	

	    module.exports = {
	        buildPath: function (ctx, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var width = shape.width;
	            var height = shape.height;
	            var r = shape.r;
	            var r1;
	            var r2;
	            var r3;
	            var r4;

	            // Convert width and height to positive for better borderRadius
	            if (width < 0) {
	                x = x + width;
	                width = -width;
	            }
	            if (height < 0) {
	                y = y + height;
	                height = -height;
	            }

	            if (typeof r === 'number') {
	                r1 = r2 = r3 = r4 = r;
	            }
	            else if (r instanceof Array) {
	                if (r.length === 1) {
	                    r1 = r2 = r3 = r4 = r[0];
	                }
	                else if (r.length === 2) {
	                    r1 = r3 = r[0];
	                    r2 = r4 = r[1];
	                }
	                else if (r.length === 3) {
	                    r1 = r[0];
	                    r2 = r4 = r[1];
	                    r3 = r[2];
	                }
	                else {
	                    r1 = r[0];
	                    r2 = r[1];
	                    r3 = r[2];
	                    r4 = r[3];
	                }
	            }
	            else {
	                r1 = r2 = r3 = r4 = 0;
	            }

	            var total;
	            if (r1 + r2 > width) {
	                total = r1 + r2;
	                r1 *= width / total;
	                r2 *= width / total;
	            }
	            if (r3 + r4 > width) {
	                total = r3 + r4;
	                r3 *= width / total;
	                r4 *= width / total;
	            }
	            if (r2 + r3 > height) {
	                total = r2 + r3;
	                r2 *= height / total;
	                r3 *= height / total;
	            }
	            if (r1 + r4 > height) {
	                total = r1 + r4;
	                r1 *= height / total;
	                r4 *= height / total;
	            }
	            ctx.moveTo(x + r1, y);
	            ctx.lineTo(x + width - r2, y);
	            r2 !== 0 && ctx.quadraticCurveTo(
	                x + width, y, x + width, y + r2
	            );
	            ctx.lineTo(x + width, y + height - r3);
	            r3 !== 0 && ctx.quadraticCurveTo(
	                x + width, y + height, x + width - r3, y + height
	            );
	            ctx.lineTo(x + r4, y + height);
	            r4 !== 0 && ctx.quadraticCurveTo(
	                x, y + height, x, y + height - r4
	            );
	            ctx.lineTo(x, y + r1);
	            r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
	        }
	    };


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 直线
	 * @module zrender/graphic/shape/Line
	 */

	    module.exports = __webpack_require__(284).extend({

	        type: 'line',

	        shape: {
	            // Start point
	            x1: 0,
	            y1: 0,
	            // End point
	            x2: 0,
	            y2: 0,

	            percent: 1
	        },

	        style: {
	            stroke: '#000',
	            fill: null
	        },

	        buildPath: function (ctx, shape) {
	            var x1 = shape.x1;
	            var y1 = shape.y1;
	            var x2 = shape.x2;
	            var y2 = shape.y2;
	            var percent = shape.percent;

	            if (percent === 0) {
	                return;
	            }

	            ctx.moveTo(x1, y1);

	            if (percent < 1) {
	                x2 = x1 * (1 - percent) + x2 * percent;
	                y2 = y1 * (1 - percent) + y2 * percent;
	            }
	            ctx.lineTo(x2, y2);
	        },

	        /**
	         * Get point at percent
	         * @param  {number} percent
	         * @return {Array.<number>}
	         */
	        pointAt: function (p) {
	            var shape = this.shape;
	            return [
	                shape.x1 * (1 - p) + shape.x2 * p,
	                shape.y1 * (1 - p) + shape.y2 * p
	            ];
	        }
	    });



/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 */


	    var curveTool = __webpack_require__(289);
	    var vec2 = __webpack_require__(249);
	    var quadraticSubdivide = curveTool.quadraticSubdivide;
	    var cubicSubdivide = curveTool.cubicSubdivide;
	    var quadraticAt = curveTool.quadraticAt;
	    var cubicAt = curveTool.cubicAt;
	    var quadraticDerivativeAt = curveTool.quadraticDerivativeAt;
	    var cubicDerivativeAt = curveTool.cubicDerivativeAt;

	    var out = [];

	    function someVectorAt(shape, t, isTangent) {
	        var cpx2 = shape.cpx2;
	        var cpy2 = shape.cpy2;
	        if (cpx2 === null || cpy2 === null) {
	            return [
	                (isTangent ? cubicDerivativeAt : cubicAt)(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),
	                (isTangent ? cubicDerivativeAt : cubicAt)(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)
	            ];
	        }
	        else {
	            return [
	                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.x1, shape.cpx1, shape.x2, t),
	                (isTangent ? quadraticDerivativeAt : quadraticAt)(shape.y1, shape.cpy1, shape.y2, t)
	            ];
	        }
	    }
	    module.exports = __webpack_require__(284).extend({

	        type: 'bezier-curve',

	        shape: {
	            x1: 0,
	            y1: 0,
	            x2: 0,
	            y2: 0,
	            cpx1: 0,
	            cpy1: 0,
	            // cpx2: 0,
	            // cpy2: 0

	            // Curve show percent, for animating
	            percent: 1
	        },

	        style: {
	            stroke: '#000',
	            fill: null
	        },

	        buildPath: function (ctx, shape) {
	            var x1 = shape.x1;
	            var y1 = shape.y1;
	            var x2 = shape.x2;
	            var y2 = shape.y2;
	            var cpx1 = shape.cpx1;
	            var cpy1 = shape.cpy1;
	            var cpx2 = shape.cpx2;
	            var cpy2 = shape.cpy2;
	            var percent = shape.percent;
	            if (percent === 0) {
	                return;
	            }

	            ctx.moveTo(x1, y1);

	            if (cpx2 == null || cpy2 == null) {
	                if (percent < 1) {
	                    quadraticSubdivide(
	                        x1, cpx1, x2, percent, out
	                    );
	                    cpx1 = out[1];
	                    x2 = out[2];
	                    quadraticSubdivide(
	                        y1, cpy1, y2, percent, out
	                    );
	                    cpy1 = out[1];
	                    y2 = out[2];
	                }

	                ctx.quadraticCurveTo(
	                    cpx1, cpy1,
	                    x2, y2
	                );
	            }
	            else {
	                if (percent < 1) {
	                    cubicSubdivide(
	                        x1, cpx1, cpx2, x2, percent, out
	                    );
	                    cpx1 = out[1];
	                    cpx2 = out[2];
	                    x2 = out[3];
	                    cubicSubdivide(
	                        y1, cpy1, cpy2, y2, percent, out
	                    );
	                    cpy1 = out[1];
	                    cpy2 = out[2];
	                    y2 = out[3];
	                }
	                ctx.bezierCurveTo(
	                    cpx1, cpy1,
	                    cpx2, cpy2,
	                    x2, y2
	                );
	            }
	        },

	        /**
	         * Get point at percent
	         * @param  {number} t
	         * @return {Array.<number>}
	         */
	        pointAt: function (t) {
	            return someVectorAt(this.shape, t, false);
	        },

	        /**
	         * Get tangent at percent
	         * @param  {number} t
	         * @return {Array.<number>}
	         */
	        tangentAt: function (t) {
	            var p = someVectorAt(this.shape, t, true);
	            return vec2.normalize(p, p);
	        }
	    });



/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * 圆弧
	 * @module zrender/graphic/shape/Arc
	 */
	 

	    module.exports = __webpack_require__(284).extend({

	        type: 'arc',

	        shape: {

	            cx: 0,

	            cy: 0,

	            r: 0,

	            startAngle: 0,

	            endAngle: Math.PI * 2,

	            clockwise: true
	        },

	        style: {

	            stroke: '#000',

	            fill: null
	        },

	        buildPath: function (ctx, shape) {

	            var x = shape.cx;
	            var y = shape.cy;
	            var r = Math.max(shape.r, 0);
	            var startAngle = shape.startAngle;
	            var endAngle = shape.endAngle;
	            var clockwise = shape.clockwise;

	            var unitX = Math.cos(startAngle);
	            var unitY = Math.sin(startAngle);

	            ctx.moveTo(unitX * r + x, unitY * r + y);
	            ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	        }
	    });


/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	// CompoundPath to improve performance


	    var Path = __webpack_require__(284);
	    module.exports = Path.extend({

	        type: 'compound',

	        shape: {

	            paths: null
	        },

	        _updatePathDirty: function () {
	            var dirtyPath = this.__dirtyPath;
	            var paths = this.shape.paths;
	            for (var i = 0; i < paths.length; i++) {
	                // Mark as dirty if any subpath is dirty
	                dirtyPath = dirtyPath || paths[i].__dirtyPath;
	            }
	            this.__dirtyPath = dirtyPath;
	            this.__dirty = this.__dirty || dirtyPath;
	        },

	        beforeBrush: function () {
	            this._updatePathDirty();
	            var paths = this.shape.paths || [];
	            var scale = this.getGlobalScale();
	            // Update path scale
	            for (var i = 0; i < paths.length; i++) {
	                paths[i].path.setScale(scale[0], scale[1]);
	            }
	        },

	        buildPath: function (ctx, shape) {
	            var paths = shape.paths || [];
	            for (var i = 0; i < paths.length; i++) {
	                paths[i].buildPath(ctx, paths[i].shape, true);
	            }
	        },

	        afterBrush: function () {
	            var paths = this.shape.paths;
	            for (var i = 0; i < paths.length; i++) {
	                paths[i].__dirtyPath = false;
	            }
	        },

	        getBoundingRect: function () {
	            this._updatePathDirty();
	            return Path.prototype.getBoundingRect.call(this);
	        }
	    });


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);

	    var Gradient = __webpack_require__(318);

	    /**
	     * x, y, x2, y2 are all percent from 0 to 1
	     * @param {number} [x=0]
	     * @param {number} [y=0]
	     * @param {number} [x2=1]
	     * @param {number} [y2=0]
	     * @param {Array.<Object>} colorStops
	     * @param {boolean} [globalCoord=false]
	     */
	    var LinearGradient = function (x, y, x2, y2, colorStops, globalCoord) {
	        this.x = x == null ? 0 : x;

	        this.y = y == null ? 0 : y;

	        this.x2 = x2 == null ? 1 : x2;

	        this.y2 = y2 == null ? 0 : y2;

	        // Can be cloned
	        this.type = 'linear';

	        // If use global coord
	        this.global = globalCoord || false;

	        Gradient.call(this, colorStops);
	    };

	    LinearGradient.prototype = {

	        constructor: LinearGradient
	    };

	    zrUtil.inherits(LinearGradient, Gradient);

	    module.exports = LinearGradient;


/***/ },
/* 318 */
/***/ function(module, exports) {

	

	    /**
	     * @param {Array.<Object>} colorStops
	     */
	    var Gradient = function (colorStops) {

	        this.colorStops = colorStops || [];
	    };

	    Gradient.prototype = {

	        constructor: Gradient,

	        addColorStop: function (offset, color) {
	            this.colorStops.push({

	                offset: offset,

	                color: color
	            });
	        }
	    };

	    module.exports = Gradient;


/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);

	    var Gradient = __webpack_require__(318);

	    /**
	     * x, y, r are all percent from 0 to 1
	     * @param {number} [x=0.5]
	     * @param {number} [y=0.5]
	     * @param {number} [r=0.5]
	     * @param {Array.<Object>} [colorStops]
	     * @param {boolean} [globalCoord=false]
	     */
	    var RadialGradient = function (x, y, r, colorStops, globalCoord) {
	        this.x = x == null ? 0.5 : x;

	        this.y = y == null ? 0.5 : y;

	        this.r = r == null ? 0.5 : r;

	        // Can be cloned
	        this.type = 'radial';

	        // If use global coord
	        this.global = globalCoord || false;

	        Gradient.call(this, colorStops);
	    };

	    RadialGradient.prototype = {

	        constructor: RadialGradient
	    };

	    zrUtil.inherits(RadialGradient, Gradient);

	    module.exports = RadialGradient;


/***/ },
/* 320 */
/***/ function(module, exports) {

	

	    var lib = {};

	    var ORIGIN_METHOD = '\0__throttleOriginMethod';
	    var RATE = '\0__throttleRate';
	    var THROTTLE_TYPE = '\0__throttleType';

	    /**
	     * @public
	     * @param {(Function)} fn
	     * @param {number} [delay=0] Unit: ms.
	     * @param {boolean} [debounce=false]
	     *        true: If call interval less than `delay`, only the last call works.
	     *        false: If call interval less than `delay, call works on fixed rate.
	     * @return {(Function)} throttled fn.
	     */
	    lib.throttle = function (fn, delay, debounce) {

	        var currCall;
	        var lastCall = 0;
	        var lastExec = 0;
	        var timer = null;
	        var diff;
	        var scope;
	        var args;

	        delay = delay || 0;

	        function exec() {
	            lastExec = (new Date()).getTime();
	            timer = null;
	            fn.apply(scope, args || []);
	        }

	        var cb = function () {
	            currCall = (new Date()).getTime();
	            scope = this;
	            args = arguments;
	            diff = currCall - (debounce ? lastCall : lastExec) - delay;

	            clearTimeout(timer);

	            if (debounce) {
	                timer = setTimeout(exec, delay);
	            }
	            else {
	                if (diff >= 0) {
	                    exec();
	                }
	                else {
	                    timer = setTimeout(exec, -diff);
	                }
	            }

	            lastCall = currCall;
	        };

	        /**
	         * Clear throttle.
	         * @public
	         */
	        cb.clear = function () {
	            if (timer) {
	                clearTimeout(timer);
	                timer = null;
	            }
	        };

	        return cb;
	    };

	    /**
	     * Create throttle method or update throttle rate.
	     *
	     * @example
	     * ComponentView.prototype.render = function () {
	     *     ...
	     *     throttle.createOrUpdate(
	     *         this,
	     *         '_dispatchAction',
	     *         this.model.get('throttle'),
	     *         'fixRate'
	     *     );
	     * };
	     * ComponentView.prototype.remove = function () {
	     *     throttle.clear(this, '_dispatchAction');
	     * };
	     * ComponentView.prototype.dispose = function () {
	     *     throttle.clear(this, '_dispatchAction');
	     * };
	     *
	     * @public
	     * @param {Object} obj
	     * @param {string} fnAttr
	     * @param {number} [rate]
	     * @param {string} [throttleType='fixRate'] 'fixRate' or 'debounce'
	     * @return {Function} throttled function.
	     */
	    lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {
	        var fn = obj[fnAttr];

	        if (!fn) {
	            return;
	        }

	        var originFn = fn[ORIGIN_METHOD] || fn;
	        var lastThrottleType = fn[THROTTLE_TYPE];
	        var lastRate = fn[RATE];

	        if (lastRate !== rate || lastThrottleType !== throttleType) {
	            if (rate == null || !throttleType) {
	                return (obj[fnAttr] = originFn);
	            }

	            fn = obj[fnAttr] = lib.throttle(
	                originFn, rate, throttleType === 'debounce'
	            );
	            fn[ORIGIN_METHOD] = originFn;
	            fn[THROTTLE_TYPE] = throttleType;
	            fn[RATE] = rate;
	        }

	        return fn;
	    };

	    /**
	     * Clear throttle. Example see throttle.createOrUpdate.
	     *
	     * @public
	     * @param {Object} obj
	     * @param {string} fnAttr
	     */
	    lib.clear = function (obj, fnAttr) {
	        var fn = obj[fnAttr];
	        if (fn && fn[ORIGIN_METHOD]) {
	            obj[fnAttr] = fn[ORIGIN_METHOD];
	        }
	    };

	    module.exports = lib;



/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * ZRender, a high performance 2d drawing library.
	 *
	 * Copyright (c) 2013, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	 */
	// Global defines

	    var guid = __webpack_require__(271);
	    var env = __webpack_require__(241);
	    var zrUtil = __webpack_require__(243);

	    var Handler = __webpack_require__(322);
	    var Storage = __webpack_require__(324);
	    var Animation = __webpack_require__(326);
	    var HandlerProxy = __webpack_require__(329);

	    var useVML = !env.canvasSupported;

	    var painterCtors = {
	        canvas: __webpack_require__(331)
	    };

	    var instances = {};    // ZRender实例map索引

	    var zrender = {};

	    /**
	     * @type {string}
	     */
	    zrender.version = '3.3.0';

	    /**
	     * Initializing a zrender instance
	     * @param {HTMLElement} dom
	     * @param {Object} opts
	     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	     * @param {number} [opts.devicePixelRatio]
	     * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	     * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	     * @return {module:zrender/ZRender}
	     */
	    zrender.init = function(dom, opts) {
	        var zr = new ZRender(guid(), dom, opts);
	        instances[zr.id] = zr;
	        return zr;
	    };

	    /**
	     * Dispose zrender instance
	     * @param {module:zrender/ZRender} zr
	     */
	    zrender.dispose = function (zr) {
	        if (zr) {
	            zr.dispose();
	        }
	        else {
	            for (var key in instances) {
	                if (instances.hasOwnProperty(key)) {
	                    instances[key].dispose();
	                }
	            }
	            instances = {};
	        }

	        return zrender;
	    };

	    /**
	     * Get zrender instance by id
	     * @param {string} id zrender instance id
	     * @return {module:zrender/ZRender}
	     */
	    zrender.getInstance = function (id) {
	        return instances[id];
	    };

	    zrender.registerPainter = function (name, Ctor) {
	        painterCtors[name] = Ctor;
	    };

	    function delInstance(id) {
	        delete instances[id];
	    }

	    /**
	     * @module zrender/ZRender
	     */
	    /**
	     * @constructor
	     * @alias module:zrender/ZRender
	     * @param {string} id
	     * @param {HTMLDomElement} dom
	     * @param {Object} opts
	     * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	     * @param {number} [opts.devicePixelRatio]
	     * @param {number} [opts.width] Can be 'auto' (the same as null/undefined)
	     * @param {number} [opts.height] Can be 'auto' (the same as null/undefined)
	     */
	    var ZRender = function(id, dom, opts) {

	        opts = opts || {};

	        /**
	         * @type {HTMLDomElement}
	         */
	        this.dom = dom;

	        /**
	         * @type {string}
	         */
	        this.id = id;

	        var self = this;
	        var storage = new Storage();

	        var rendererType = opts.renderer;
	        if (useVML) {
	            if (!painterCtors.vml) {
	                throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
	            }
	            rendererType = 'vml';
	        }
	        else if (!rendererType || !painterCtors[rendererType]) {
	            rendererType = 'canvas';
	        }
	        var painter = new painterCtors[rendererType](dom, storage, opts);

	        this.storage = storage;
	        this.painter = painter;

	        var handerProxy = !env.node ? new HandlerProxy(painter.getViewportRoot()) : null;
	        this.handler = new Handler(storage, painter, handerProxy, painter.root);

	        /**
	         * @type {module:zrender/animation/Animation}
	         */
	        this.animation = new Animation({
	            stage: {
	                update: zrUtil.bind(this.flush, this)
	            }
	        });
	        this.animation.start();

	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._needsRefresh;

	        // 修改 storage.delFromMap, 每次删除元素之前删除动画
	        // FIXME 有点ugly
	        var oldDelFromMap = storage.delFromMap;
	        var oldAddToMap = storage.addToMap;

	        storage.delFromMap = function (elId) {
	            var el = storage.get(elId);

	            oldDelFromMap.call(storage, elId);

	            el && el.removeSelfFromZr(self);
	        };

	        storage.addToMap = function (el) {
	            oldAddToMap.call(storage, el);

	            el.addSelfToZr(self);
	        };
	    };

	    ZRender.prototype = {

	        constructor: ZRender,
	        /**
	         * 获取实例唯一标识
	         * @return {string}
	         */
	        getId: function () {
	            return this.id;
	        },

	        /**
	         * 添加元素
	         * @param  {module:zrender/Element} el
	         */
	        add: function (el) {
	            this.storage.addRoot(el);
	            this._needsRefresh = true;
	        },

	        /**
	         * 删除元素
	         * @param  {module:zrender/Element} el
	         */
	        remove: function (el) {
	            this.storage.delRoot(el);
	            this._needsRefresh = true;
	        },

	        /**
	         * Change configuration of layer
	         * @param {string} zLevel
	         * @param {Object} config
	         * @param {string} [config.clearColor=0] Clear color
	         * @param {string} [config.motionBlur=false] If enable motion blur
	         * @param {number} [config.lastFrameAlpha=0.7] Motion blur factor. Larger value cause longer trailer
	        */
	        configLayer: function (zLevel, config) {
	            this.painter.configLayer(zLevel, config);
	            this._needsRefresh = true;
	        },

	        /**
	         * Repaint the canvas immediately
	         */
	        refreshImmediately: function () {
	            // Clear needsRefresh ahead to avoid something wrong happens in refresh
	            // Or it will cause zrender refreshes again and again.
	            this._needsRefresh = false;
	            this.painter.refresh();
	            /**
	             * Avoid trigger zr.refresh in Element#beforeUpdate hook
	             */
	            this._needsRefresh = false;
	        },

	        /**
	         * Mark and repaint the canvas in the next frame of browser
	         */
	        refresh: function() {
	            this._needsRefresh = true;
	        },

	        /**
	         * Perform all refresh
	         */
	        flush: function () {
	            if (this._needsRefresh) {
	                this.refreshImmediately();
	            }
	            if (this._needsRefreshHover) {
	                this.refreshHoverImmediately();
	            }
	        },

	        /**
	         * Add element to hover layer
	         * @param  {module:zrender/Element} el
	         * @param {Object} style
	         */
	        addHover: function (el, style) {
	            if (this.painter.addHover) {
	                this.painter.addHover(el, style);
	                this.refreshHover();
	            }
	        },

	        /**
	         * Add element from hover layer
	         * @param  {module:zrender/Element} el
	         */
	        removeHover: function (el) {
	            if (this.painter.removeHover) {
	                this.painter.removeHover(el);
	                this.refreshHover();
	            }
	        },

	        /**
	         * Clear all hover elements in hover layer
	         * @param  {module:zrender/Element} el
	         */
	        clearHover: function () {
	            if (this.painter.clearHover) {
	                this.painter.clearHover();
	                this.refreshHover();
	            }
	        },

	        /**
	         * Refresh hover in next frame
	         */
	        refreshHover: function () {
	            this._needsRefreshHover = true;
	        },

	        /**
	         * Refresh hover immediately
	         */
	        refreshHoverImmediately: function () {
	            this._needsRefreshHover = false;
	            this.painter.refreshHover && this.painter.refreshHover();
	        },

	        /**
	         * Resize the canvas.
	         * Should be invoked when container size is changed
	         * @param {Object} [opts]
	         * @param {number|string} [opts.width] Can be 'auto' (the same as null/undefined)
	         * @param {number|string} [opts.height] Can be 'auto' (the same as null/undefined)
	         */
	        resize: function(opts) {
	            opts = opts || {};
	            this.painter.resize(opts.width, opts.height);
	            this.handler.resize();
	        },

	        /**
	         * Stop and clear all animation immediately
	         */
	        clearAnimation: function () {
	            this.animation.clear();
	        },

	        /**
	         * Get container width
	         */
	        getWidth: function() {
	            return this.painter.getWidth();
	        },

	        /**
	         * Get container height
	         */
	        getHeight: function() {
	            return this.painter.getHeight();
	        },

	        /**
	         * Export the canvas as Base64 URL
	         * @param {string} type
	         * @param {string} [backgroundColor='#fff']
	         * @return {string} Base64 URL
	         */
	        // toDataURL: function(type, backgroundColor) {
	        //     return this.painter.getRenderedCanvas({
	        //         backgroundColor: backgroundColor
	        //     }).toDataURL(type);
	        // },

	        /**
	         * Converting a path to image.
	         * It has much better performance of drawing image rather than drawing a vector path.
	         * @param {module:zrender/graphic/Path} e
	         * @param {number} width
	         * @param {number} height
	         */
	        pathToImage: function(e, width, height) {
	            var id = guid();
	            return this.painter.pathToImage(id, e, width, height);
	        },

	        /**
	         * Set default cursor
	         * @param {string} [cursorStyle='default'] 例如 crosshair
	         */
	        setCursorStyle: function (cursorStyle) {
	            this.handler.setCursorStyle(cursorStyle);
	        },

	        /**
	         * Bind event
	         *
	         * @param {string} eventName Event name
	         * @param {Function} eventHandler Handler function
	         * @param {Object} [context] Context object
	         */
	        on: function(eventName, eventHandler, context) {
	            this.handler.on(eventName, eventHandler, context);
	        },

	        /**
	         * Unbind event
	         * @param {string} eventName Event name
	         * @param {Function} [eventHandler] Handler function
	         */
	        off: function(eventName, eventHandler) {
	            this.handler.off(eventName, eventHandler);
	        },

	        /**
	         * Trigger event manually
	         *
	         * @param {string} eventName Event name
	         * @param {event=} event Event object
	         */
	        trigger: function (eventName, event) {
	            this.handler.trigger(eventName, event);
	        },


	        /**
	         * Clear all objects and the canvas.
	         */
	        clear: function () {
	            this.storage.delRoot();
	            this.painter.clear();
	        },

	        /**
	         * Dispose self.
	         */
	        dispose: function () {
	            this.animation.stop();

	            this.clear();
	            this.storage.dispose();
	            this.painter.dispose();
	            this.handler.dispose();

	            this.animation =
	            this.storage =
	            this.painter =
	            this.handler = null;

	            delInstance(this.id);
	        }
	    };

	    module.exports = zrender;



/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Handler
	 * @module zrender/Handler
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (shenyi.914@gmail.com)
	 */


	    var util = __webpack_require__(243);
	    var Draggable = __webpack_require__(323);

	    var Eventful = __webpack_require__(272);

	    function makeEventPacket(eveType, target, event) {
	        return {
	            type: eveType,
	            event: event,
	            target: target,
	            cancelBubble: false,
	            offsetX: event.zrX,
	            offsetY: event.zrY,
	            gestureEvent: event.gestureEvent,
	            pinchX: event.pinchX,
	            pinchY: event.pinchY,
	            pinchScale: event.pinchScale,
	            wheelDelta: event.zrDelta,
	            zrByTouch: event.zrByTouch
	        };
	    }

	    function EmptyProxy () {}
	    EmptyProxy.prototype.dispose = function () {};

	    var handlerNames = [
	        'click', 'dblclick', 'mousewheel', 'mouseout',
	        'mouseup', 'mousedown', 'mousemove', 'contextmenu'
	    ];
	    /**
	     * @alias module:zrender/Handler
	     * @constructor
	     * @extends module:zrender/mixin/Eventful
	     * @param {module:zrender/Storage} storage Storage instance.
	     * @param {module:zrender/Painter} painter Painter instance.
	     * @param {module:zrender/dom/HandlerProxy} proxy HandlerProxy instance.
	     * @param {HTMLElement} painterRoot painter.root (not painter.getViewportRoot()).
	     */
	    var Handler = function(storage, painter, proxy, painterRoot) {
	        Eventful.call(this);

	        this.storage = storage;

	        this.painter = painter;

	        this.painterRoot = painterRoot;

	        proxy = proxy || new EmptyProxy();

	        /**
	         * Proxy of event. can be Dom, WebGLSurface, etc.
	         */
	        this.proxy = proxy;

	        // Attach handler
	        proxy.handler = this;

	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._hovered;

	        /**
	         * @private
	         * @type {Date}
	         */
	        this._lastTouchMoment;

	        /**
	         * @private
	         * @type {number}
	         */
	        this._lastX;

	        /**
	         * @private
	         * @type {number}
	         */
	        this._lastY;


	        Draggable.call(this);

	        util.each(handlerNames, function (name) {
	            proxy.on && proxy.on(name, this[name], this);
	        }, this);
	    };

	    Handler.prototype = {

	        constructor: Handler,

	        mousemove: function (event) {
	            var x = event.zrX;
	            var y = event.zrY;

	            var hovered = this.findHover(x, y, null);
	            var lastHovered = this._hovered;
	            var proxy = this.proxy;

	            this._hovered = hovered;

	            proxy.setCursor && proxy.setCursor(hovered ? hovered.cursor : 'default');

	            // Mouse out on previous hovered element
	            if (lastHovered && hovered !== lastHovered && lastHovered.__zr) {
	                this.dispatchToElement(lastHovered, 'mouseout', event);
	            }

	            // Mouse moving on one element
	            this.dispatchToElement(hovered, 'mousemove', event);

	            // Mouse over on a new element
	            if (hovered && hovered !== lastHovered) {
	                this.dispatchToElement(hovered, 'mouseover', event);
	            }
	        },

	        mouseout: function (event) {
	            this.dispatchToElement(this._hovered, 'mouseout', event);

	            // There might be some doms created by upper layer application
	            // at the same level of painter.getViewportRoot() (e.g., tooltip
	            // dom created by echarts), where 'globalout' event should not
	            // be triggered when mouse enters these doms. (But 'mouseout'
	            // should be triggered at the original hovered element as usual).
	            var element = event.toElement || event.relatedTarget;
	            var innerDom;
	            do {
	                element = element && element.parentNode;
	            }
	            while (element && element.nodeType != 9 && !(
	                innerDom = element === this.painterRoot
	            ));

	            !innerDom && this.trigger('globalout', {event: event});
	        },

	        /**
	         * Resize
	         */
	        resize: function (event) {
	            this._hovered = null;
	        },

	        /**
	         * Dispatch event
	         * @param {string} eventName
	         * @param {event=} eventArgs
	         */
	        dispatch: function (eventName, eventArgs) {
	            var handler = this[eventName];
	            handler && handler.call(this, eventArgs);
	        },

	        /**
	         * Dispose
	         */
	        dispose: function () {

	            this.proxy.dispose();

	            this.storage =
	            this.proxy =
	            this.painter = null;
	        },

	        /**
	         * 设置默认的cursor style
	         * @param {string} [cursorStyle='default'] 例如 crosshair
	         */
	        setCursorStyle: function (cursorStyle) {
	            var proxy = this.proxy;
	            proxy.setCursor && proxy.setCursor(cursorStyle);
	        },

	        /**
	         * 事件分发代理
	         *
	         * @private
	         * @param {Object} targetEl 目标图形元素
	         * @param {string} eventName 事件名称
	         * @param {Object} event 事件对象
	         */
	        dispatchToElement: function (targetEl, eventName, event) {
	            var eventHandler = 'on' + eventName;
	            var eventPacket = makeEventPacket(eventName, targetEl, event);

	            var el = targetEl;

	            while (el) {
	                el[eventHandler]
	                    && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));

	                el.trigger(eventName, eventPacket);

	                el = el.parent;

	                if (eventPacket.cancelBubble) {
	                    break;
	                }
	            }

	            if (!eventPacket.cancelBubble) {
	                // 冒泡到顶级 zrender 对象
	                this.trigger(eventName, eventPacket);
	                // 分发事件到用户自定义层
	                // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在
	                this.painter && this.painter.eachOtherLayer(function (layer) {
	                    if (typeof(layer[eventHandler]) == 'function') {
	                        layer[eventHandler].call(layer, eventPacket);
	                    }
	                    if (layer.trigger) {
	                        layer.trigger(eventName, eventPacket);
	                    }
	                });
	            }
	        },

	        /**
	         * @private
	         * @param {number} x
	         * @param {number} y
	         * @param {module:zrender/graphic/Displayable} exclude
	         * @method
	         */
	        findHover: function(x, y, exclude) {
	            var list = this.storage.getDisplayList();
	            for (var i = list.length - 1; i >= 0 ; i--) {
	                if (!list[i].silent
	                 && list[i] !== exclude
	                 // getDisplayList may include ignored item in VML mode
	                 && !list[i].ignore
	                 && isHover(list[i], x, y)) {
	                    return list[i];
	                }
	            }
	        }
	    };

	    // Common handlers
	    util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	        Handler.prototype[name] = function (event) {
	            // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
	            var hovered = this.findHover(event.zrX, event.zrY, null);

	            if (name === 'mousedown') {
	                this._downel = hovered;
	                // In case click triggered before mouseup
	                this._upel = hovered;
	            }
	            else if (name === 'mosueup') {
	                this._upel = hovered;
	            }
	            else if (name === 'click') {
	                if (this._downel !== this._upel) {
	                    return;
	                }
	            }

	            this.dispatchToElement(hovered, name, event);
	        };
	    });

	    function isHover(displayable, x, y) {
	        if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
	            var el = displayable;
	            while (el) {
	                // If ancestor is silent or clipped by ancestor
	                if (el.silent || (el.clipPath && !el.clipPath.contain(x, y)))  {
	                    return false;
	                }
	                el = el.parent;
	            }
	            return true;
	        }

	        return false;
	    }

	    util.mixin(Handler, Eventful);
	    util.mixin(Handler, Draggable);

	    module.exports = Handler;


/***/ },
/* 323 */
/***/ function(module, exports) {

	// TODO Draggable for group
	// FIXME Draggable on element which has parent rotation or scale

	    function Draggable() {

	        this.on('mousedown', this._dragStart, this);
	        this.on('mousemove', this._drag, this);
	        this.on('mouseup', this._dragEnd, this);
	        this.on('globalout', this._dragEnd, this);
	        // this._dropTarget = null;
	        // this._draggingTarget = null;

	        // this._x = 0;
	        // this._y = 0;
	    }

	    Draggable.prototype = {

	        constructor: Draggable,

	        _dragStart: function (e) {
	            var draggingTarget = e.target;
	            if (draggingTarget && draggingTarget.draggable) {
	                this._draggingTarget = draggingTarget;
	                draggingTarget.dragging = true;
	                this._x = e.offsetX;
	                this._y = e.offsetY;

	                this.dispatchToElement(draggingTarget, 'dragstart', e.event);
	            }
	        },

	        _drag: function (e) {
	            var draggingTarget = this._draggingTarget;
	            if (draggingTarget) {

	                var x = e.offsetX;
	                var y = e.offsetY;

	                var dx = x - this._x;
	                var dy = y - this._y;
	                this._x = x;
	                this._y = y;

	                draggingTarget.drift(dx, dy, e);
	                this.dispatchToElement(draggingTarget, 'drag', e.event);

	                var dropTarget = this.findHover(x, y, draggingTarget);
	                var lastDropTarget = this._dropTarget;
	                this._dropTarget = dropTarget;

	                if (draggingTarget !== dropTarget) {
	                    if (lastDropTarget && dropTarget !== lastDropTarget) {
	                        this.dispatchToElement(lastDropTarget, 'dragleave', e.event);
	                    }
	                    if (dropTarget && dropTarget !== lastDropTarget) {
	                        this.dispatchToElement(dropTarget, 'dragenter', e.event);
	                    }
	                }
	            }
	        },

	        _dragEnd: function (e) {
	            var draggingTarget = this._draggingTarget;

	            if (draggingTarget) {
	                draggingTarget.dragging = false;
	            }

	            this.dispatchToElement(draggingTarget, 'dragend', e.event);

	            if (this._dropTarget) {
	                this.dispatchToElement(this._dropTarget, 'drop', e.event);
	            }

	            this._draggingTarget = null;
	            this._dropTarget = null;
	        }

	    };

	    module.exports = Draggable;


/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Storage内容仓库模块
	 * @module zrender/Storage
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author errorrik (errorrik@gmail.com)
	 * @author pissang (https://github.com/pissang/)
	 */


	    var util = __webpack_require__(243);
	    var env = __webpack_require__(241);

	    var Group = __webpack_require__(269);

	    // Use timsort because in most case elements are partially sorted
	    // https://jsfiddle.net/pissang/jr4x7mdm/8/
	    var timsort = __webpack_require__(325);

	    function shapeCompareFunc(a, b) {
	        if (a.zlevel === b.zlevel) {
	            if (a.z === b.z) {
	                // if (a.z2 === b.z2) {
	                //     // FIXME Slow has renderidx compare
	                //     // http://stackoverflow.com/questions/20883421/sorting-in-javascript-should-every-compare-function-have-a-return-0-statement
	                //     // https://github.com/v8/v8/blob/47cce544a31ed5577ffe2963f67acb4144ee0232/src/js/array.js#L1012
	                //     return a.__renderidx - b.__renderidx;
	                // }
	                return a.z2 - b.z2;
	            }
	            return a.z - b.z;
	        }
	        return a.zlevel - b.zlevel;
	    }
	    /**
	     * 内容仓库 (M)
	     * @alias module:zrender/Storage
	     * @constructor
	     */
	    var Storage = function () {
	        // 所有常规形状，id索引的map
	        this._elements = {};

	        this._roots = [];

	        this._displayList = [];

	        this._displayListLen = 0;
	    };

	    Storage.prototype = {

	        constructor: Storage,

	        /**
	         * @param  {Function} cb
	         *
	         */
	        traverse: function (cb, context) {
	            for (var i = 0; i < this._roots.length; i++) {
	                this._roots[i].traverse(cb, context);
	            }
	        },

	        /**
	         * 返回所有图形的绘制队列
	         * @param {boolean} [update=false] 是否在返回前更新该数组
	         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
	         *
	         * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
	         * @return {Array.<module:zrender/graphic/Displayable>}
	         */
	        getDisplayList: function (update, includeIgnore) {
	            includeIgnore = includeIgnore || false;
	            if (update) {
	                this.updateDisplayList(includeIgnore);
	            }
	            return this._displayList;
	        },

	        /**
	         * 更新图形的绘制队列。
	         * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	         * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	         * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
	         */
	        updateDisplayList: function (includeIgnore) {
	            this._displayListLen = 0;
	            var roots = this._roots;
	            var displayList = this._displayList;
	            for (var i = 0, len = roots.length; i < len; i++) {
	                this._updateAndAddDisplayable(roots[i], null, includeIgnore);
	            }
	            displayList.length = this._displayListLen;

	            // for (var i = 0, len = displayList.length; i < len; i++) {
	            //     displayList[i].__renderidx = i;
	            // }

	            // displayList.sort(shapeCompareFunc);
	            env.canvasSupported && timsort(displayList, shapeCompareFunc);
	        },

	        _updateAndAddDisplayable: function (el, clipPaths, includeIgnore) {

	            if (el.ignore && !includeIgnore) {
	                return;
	            }

	            el.beforeUpdate();

	            if (el.__dirty) {

	                el.update();

	            }

	            el.afterUpdate();

	            var userSetClipPath = el.clipPath;
	            if (userSetClipPath) {

	                // FIXME 效率影响
	                if (clipPaths) {
	                    clipPaths = clipPaths.slice();
	                }
	                else {
	                    clipPaths = [];
	                }

	                var currentClipPath = userSetClipPath;
	                var parentClipPath = el;
	                // Recursively add clip path
	                while (currentClipPath) {
	                    // clipPath 的变换是基于使用这个 clipPath 的元素
	                    currentClipPath.parent = parentClipPath;
	                    currentClipPath.updateTransform();

	                    clipPaths.push(currentClipPath);

	                    parentClipPath = currentClipPath;
	                    currentClipPath = currentClipPath.clipPath;
	                }
	            }

	            if (el.isGroup) {
	                var children = el._children;

	                for (var i = 0; i < children.length; i++) {
	                    var child = children[i];

	                    // Force to mark as dirty if group is dirty
	                    // FIXME __dirtyPath ?
	                    if (el.__dirty) {
	                        child.__dirty = true;
	                    }

	                    this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
	                }

	                // Mark group clean here
	                el.__dirty = false;

	            }
	            else {
	                el.__clipPaths = clipPaths;

	                this._displayList[this._displayListLen++] = el;
	            }
	        },

	        /**
	         * 添加图形(Shape)或者组(Group)到根节点
	         * @param {module:zrender/Element} el
	         */
	        addRoot: function (el) {
	            // Element has been added
	            if (this._elements[el.id]) {
	                return;
	            }

	            if (el instanceof Group) {
	                el.addChildrenToStorage(this);
	            }

	            this.addToMap(el);
	            this._roots.push(el);
	        },

	        /**
	         * 删除指定的图形(Shape)或者组(Group)
	         * @param {string|Array.<string>} [elId] 如果为空清空整个Storage
	         */
	        delRoot: function (elId) {
	            if (elId == null) {
	                // 不指定elId清空
	                for (var i = 0; i < this._roots.length; i++) {
	                    var root = this._roots[i];
	                    if (root instanceof Group) {
	                        root.delChildrenFromStorage(this);
	                    }
	                }

	                this._elements = {};
	                this._roots = [];
	                this._displayList = [];
	                this._displayListLen = 0;

	                return;
	            }

	            if (elId instanceof Array) {
	                for (var i = 0, l = elId.length; i < l; i++) {
	                    this.delRoot(elId[i]);
	                }
	                return;
	            }

	            var el;
	            if (typeof(elId) == 'string') {
	                el = this._elements[elId];
	            }
	            else {
	                el = elId;
	            }

	            var idx = util.indexOf(this._roots, el);
	            if (idx >= 0) {
	                this.delFromMap(el.id);
	                this._roots.splice(idx, 1);
	                if (el instanceof Group) {
	                    el.delChildrenFromStorage(this);
	                }
	            }
	        },

	        addToMap: function (el) {
	            if (el instanceof Group) {
	                el.__storage = this;
	            }
	            el.dirty(false);

	            this._elements[el.id] = el;

	            return this;
	        },

	        get: function (elId) {
	            return this._elements[elId];
	        },

	        delFromMap: function (elId) {
	            var elements = this._elements;
	            var el = elements[elId];
	            if (el) {
	                delete elements[elId];
	                if (el instanceof Group) {
	                    el.__storage = null;
	                }
	            }

	            return this;
	        },

	        /**
	         * 清空并且释放Storage
	         */
	        dispose: function () {
	            this._elements =
	            this._renderList =
	            this._roots = null;
	        },

	        displayableSortFunc: shapeCompareFunc
	    };

	    module.exports = Storage;



/***/ },
/* 325 */
/***/ function(module, exports) {

	// https://github.com/mziccard/node-timsort

	    var DEFAULT_MIN_MERGE = 32;

	    var DEFAULT_MIN_GALLOPING = 7;

	    var DEFAULT_TMP_STORAGE_LENGTH = 256;

	    function minRunLength(n) {
	        var r = 0;

	        while (n >= DEFAULT_MIN_MERGE) {
	            r |= n & 1;
	            n >>= 1;
	        }

	        return n + r;
	    }

	    function makeAscendingRun(array, lo, hi, compare) {
	        var runHi = lo + 1;

	        if (runHi === hi) {
	            return 1;
	        }

	        if (compare(array[runHi++], array[lo]) < 0) {
	            while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
	                runHi++;
	            }

	            reverseRun(array, lo, runHi);
	        }
	        else {
	            while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
	                runHi++;
	            }
	        }

	        return runHi - lo;
	    }

	    function reverseRun(array, lo, hi) {
	        hi--;

	        while (lo < hi) {
	            var t = array[lo];
	            array[lo++] = array[hi];
	            array[hi--] = t;
	        }
	    }

	    function binaryInsertionSort(array, lo, hi, start, compare) {
	        if (start === lo) {
	            start++;
	        }

	        for (; start < hi; start++) {
	            var pivot = array[start];

	            var left = lo;
	            var right = start;
	            var mid;

	            while (left < right) {
	                mid = left + right >>> 1;

	                if (compare(pivot, array[mid]) < 0) {
	                    right = mid;
	                }
	                else {
	                    left = mid + 1;
	                }
	            }

	            var n = start - left;

	            switch (n) {
	                case 3:
	                    array[left + 3] = array[left + 2];

	                case 2:
	                    array[left + 2] = array[left + 1];

	                case 1:
	                    array[left + 1] = array[left];
	                    break;
	                default:
	                    while (n > 0) {
	                        array[left + n] = array[left + n - 1];
	                        n--;
	                    }
	            }

	            array[left] = pivot;
	        }
	    }

	    function gallopLeft(value, array, start, length, hint, compare) {
	        var lastOffset = 0;
	        var maxOffset = 0;
	        var offset = 1;

	        if (compare(value, array[start + hint]) > 0) {
	            maxOffset = length - hint;

	            while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;

	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }

	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }

	            lastOffset += hint;
	            offset += hint;
	        }
	        else {
	            maxOffset = hint + 1;
	            while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;

	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }
	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }

	            var tmp = lastOffset;
	            lastOffset = hint - offset;
	            offset = hint - tmp;
	        }

	        lastOffset++;
	        while (lastOffset < offset) {
	            var m = lastOffset + (offset - lastOffset >>> 1);

	            if (compare(value, array[start + m]) > 0) {
	                lastOffset = m + 1;
	            }
	            else {
	                offset = m;
	            }
	        }
	        return offset;
	    }

	    function gallopRight(value, array, start, length, hint, compare) {
	        var lastOffset = 0;
	        var maxOffset = 0;
	        var offset = 1;

	        if (compare(value, array[start + hint]) < 0) {
	            maxOffset = hint + 1;

	            while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;

	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }

	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }

	            var tmp = lastOffset;
	            lastOffset = hint - offset;
	            offset = hint - tmp;
	        }
	        else {
	            maxOffset = length - hint;

	            while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
	                lastOffset = offset;
	                offset = (offset << 1) + 1;

	                if (offset <= 0) {
	                    offset = maxOffset;
	                }
	            }

	            if (offset > maxOffset) {
	                offset = maxOffset;
	            }

	            lastOffset += hint;
	            offset += hint;
	        }

	        lastOffset++;

	        while (lastOffset < offset) {
	            var m = lastOffset + (offset - lastOffset >>> 1);

	            if (compare(value, array[start + m]) < 0) {
	                offset = m;
	            }
	            else {
	                lastOffset = m + 1;
	            }
	        }

	        return offset;
	    }

	    function TimSort(array, compare) {
	        var minGallop = DEFAULT_MIN_GALLOPING;
	        var length = 0;
	        var tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
	        var stackLength = 0;
	        var runStart;
	        var runLength;
	        var stackSize = 0;

	        length = array.length;

	        if (length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
	            tmpStorageLength = length >>> 1;
	        }

	        var tmp = [];

	        stackLength = length < 120 ? 5 : length < 1542 ? 10 : length < 119151 ? 19 : 40;

	        runStart = [];
	        runLength = [];

	        function pushRun(_runStart, _runLength) {
	            runStart[stackSize] = _runStart;
	            runLength[stackSize] = _runLength;
	            stackSize += 1;
	        }

	        function mergeRuns() {
	            while (stackSize > 1) {
	                var n = stackSize - 2;

	                if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
	                    if (runLength[n - 1] < runLength[n + 1]) {
	                        n--;
	                    }
	                }
	                else if (runLength[n] > runLength[n + 1]) {
	                    break;
	                }
	                mergeAt(n);
	            }
	        }

	        function forceMergeRuns() {
	            while (stackSize > 1) {
	                var n = stackSize - 2;

	                if (n > 0 && runLength[n - 1] < runLength[n + 1]) {
	                    n--;
	                }

	                mergeAt(n);
	            }
	        }

	        function mergeAt(i) {
	            var start1 = runStart[i];
	            var length1 = runLength[i];
	            var start2 = runStart[i + 1];
	            var length2 = runLength[i + 1];

	            runLength[i] = length1 + length2;

	            if (i === stackSize - 3) {
	                runStart[i + 1] = runStart[i + 2];
	                runLength[i + 1] = runLength[i + 2];
	            }

	            stackSize--;

	            var k = gallopRight(array[start2], array, start1, length1, 0, compare);
	            start1 += k;
	            length1 -= k;

	            if (length1 === 0) {
	                return;
	            }

	            length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);

	            if (length2 === 0) {
	                return;
	            }

	            if (length1 <= length2) {
	                mergeLow(start1, length1, start2, length2);
	            }
	            else {
	                mergeHigh(start1, length1, start2, length2);
	            }
	        }

	        function mergeLow(start1, length1, start2, length2) {
	            var i = 0;

	            for (i = 0; i < length1; i++) {
	                tmp[i] = array[start1 + i];
	            }

	            var cursor1 = 0;
	            var cursor2 = start2;
	            var dest = start1;

	            array[dest++] = array[cursor2++];

	            if (--length2 === 0) {
	                for (i = 0; i < length1; i++) {
	                    array[dest + i] = tmp[cursor1 + i];
	                }
	                return;
	            }

	            if (length1 === 1) {
	                for (i = 0; i < length2; i++) {
	                    array[dest + i] = array[cursor2 + i];
	                }
	                array[dest + length2] = tmp[cursor1];
	                return;
	            }

	            var _minGallop = minGallop;
	            var count1, count2, exit;

	            while (1) {
	                count1 = 0;
	                count2 = 0;
	                exit = false;

	                do {
	                    if (compare(array[cursor2], tmp[cursor1]) < 0) {
	                        array[dest++] = array[cursor2++];
	                        count2++;
	                        count1 = 0;

	                        if (--length2 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    else {
	                        array[dest++] = tmp[cursor1++];
	                        count1++;
	                        count2 = 0;
	                        if (--length1 === 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                } while ((count1 | count2) < _minGallop);

	                if (exit) {
	                    break;
	                }

	                do {
	                    count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);

	                    if (count1 !== 0) {
	                        for (i = 0; i < count1; i++) {
	                            array[dest + i] = tmp[cursor1 + i];
	                        }

	                        dest += count1;
	                        cursor1 += count1;
	                        length1 -= count1;
	                        if (length1 <= 1) {
	                            exit = true;
	                            break;
	                        }
	                    }

	                    array[dest++] = array[cursor2++];

	                    if (--length2 === 0) {
	                        exit = true;
	                        break;
	                    }

	                    count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);

	                    if (count2 !== 0) {
	                        for (i = 0; i < count2; i++) {
	                            array[dest + i] = array[cursor2 + i];
	                        }

	                        dest += count2;
	                        cursor2 += count2;
	                        length2 -= count2;

	                        if (length2 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    array[dest++] = tmp[cursor1++];

	                    if (--length1 === 1) {
	                        exit = true;
	                        break;
	                    }

	                    _minGallop--;
	                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

	                if (exit) {
	                    break;
	                }

	                if (_minGallop < 0) {
	                    _minGallop = 0;
	                }

	                _minGallop += 2;
	            }

	            minGallop = _minGallop;

	            minGallop < 1 && (minGallop = 1);

	            if (length1 === 1) {
	                for (i = 0; i < length2; i++) {
	                    array[dest + i] = array[cursor2 + i];
	                }
	                array[dest + length2] = tmp[cursor1];
	            }
	            else if (length1 === 0) {
	                throw new Error();
	                // throw new Error('mergeLow preconditions were not respected');
	            }
	            else {
	                for (i = 0; i < length1; i++) {
	                    array[dest + i] = tmp[cursor1 + i];
	                }
	            }
	        }

	        function mergeHigh (start1, length1, start2, length2) {
	            var i = 0;

	            for (i = 0; i < length2; i++) {
	                tmp[i] = array[start2 + i];
	            }

	            var cursor1 = start1 + length1 - 1;
	            var cursor2 = length2 - 1;
	            var dest = start2 + length2 - 1;
	            var customCursor = 0;
	            var customDest = 0;

	            array[dest--] = array[cursor1--];

	            if (--length1 === 0) {
	                customCursor = dest - (length2 - 1);

	                for (i = 0; i < length2; i++) {
	                    array[customCursor + i] = tmp[i];
	                }

	                return;
	            }

	            if (length2 === 1) {
	                dest -= length1;
	                cursor1 -= length1;
	                customDest = dest + 1;
	                customCursor = cursor1 + 1;

	                for (i = length1 - 1; i >= 0; i--) {
	                    array[customDest + i] = array[customCursor + i];
	                }

	                array[dest] = tmp[cursor2];
	                return;
	            }

	            var _minGallop = minGallop;

	            while (true) {
	                var count1 = 0;
	                var count2 = 0;
	                var exit = false;

	                do {
	                    if (compare(tmp[cursor2], array[cursor1]) < 0) {
	                        array[dest--] = array[cursor1--];
	                        count1++;
	                        count2 = 0;
	                        if (--length1 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                    else {
	                        array[dest--] = tmp[cursor2--];
	                        count2++;
	                        count1 = 0;
	                        if (--length2 === 1) {
	                            exit = true;
	                            break;
	                        }
	                    }
	                } while ((count1 | count2) < _minGallop);

	                if (exit) {
	                    break;
	                }

	                do {
	                    count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);

	                    if (count1 !== 0) {
	                        dest -= count1;
	                        cursor1 -= count1;
	                        length1 -= count1;
	                        customDest = dest + 1;
	                        customCursor = cursor1 + 1;

	                        for (i = count1 - 1; i >= 0; i--) {
	                            array[customDest + i] = array[customCursor + i];
	                        }

	                        if (length1 === 0) {
	                            exit = true;
	                            break;
	                        }
	                    }

	                    array[dest--] = tmp[cursor2--];

	                    if (--length2 === 1) {
	                        exit = true;
	                        break;
	                    }

	                    count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);

	                    if (count2 !== 0) {
	                        dest -= count2;
	                        cursor2 -= count2;
	                        length2 -= count2;
	                        customDest = dest + 1;
	                        customCursor = cursor2 + 1;

	                        for (i = 0; i < count2; i++) {
	                            array[customDest + i] = tmp[customCursor + i];
	                        }

	                        if (length2 <= 1) {
	                            exit = true;
	                            break;
	                        }
	                    }

	                    array[dest--] = array[cursor1--];

	                    if (--length1 === 0) {
	                        exit = true;
	                        break;
	                    }

	                    _minGallop--;
	                } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);

	                if (exit) {
	                    break;
	                }

	                if (_minGallop < 0) {
	                    _minGallop = 0;
	                }

	                _minGallop += 2;
	            }

	            minGallop = _minGallop;

	            if (minGallop < 1) {
	                minGallop = 1;
	            }

	            if (length2 === 1) {
	                dest -= length1;
	                cursor1 -= length1;
	                customDest = dest + 1;
	                customCursor = cursor1 + 1;

	                for (i = length1 - 1; i >= 0; i--) {
	                    array[customDest + i] = array[customCursor + i];
	                }

	                array[dest] = tmp[cursor2];
	            }
	            else if (length2 === 0) {
	                throw new Error();
	                // throw new Error('mergeHigh preconditions were not respected');
	            }
	            else {
	                customCursor = dest - (length2 - 1);
	                for (i = 0; i < length2; i++) {
	                    array[customCursor + i] = tmp[i];
	                }
	            }
	        }

	        this.mergeRuns = mergeRuns;
	        this.forceMergeRuns = forceMergeRuns;
	        this.pushRun = pushRun;
	    }

	    function sort(array, compare, lo, hi) {
	        if (!lo) {
	            lo = 0;
	        }
	        if (!hi) {
	            hi = array.length;
	        }

	        var remaining = hi - lo;

	        if (remaining < 2) {
	            return;
	        }

	        var runLength = 0;

	        if (remaining < DEFAULT_MIN_MERGE) {
	            runLength = makeAscendingRun(array, lo, hi, compare);
	            binaryInsertionSort(array, lo, hi, lo + runLength, compare);
	            return;
	        }

	        var ts = new TimSort(array, compare);

	        var minRun = minRunLength(remaining);

	        do {
	            runLength = makeAscendingRun(array, lo, hi, compare);
	            if (runLength < minRun) {
	                var force = remaining;
	                if (force > minRun) {
	                    force = minRun;
	                }

	                binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
	                runLength = force;
	            }

	            ts.pushRun(lo, runLength);
	            ts.mergeRuns();

	            remaining -= runLength;
	            lo += runLength;
	        } while (remaining !== 0);

	        ts.forceMergeRuns();
	    }

	    module.exports = sort;


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 动画主类, 调度和管理所有动画控制器
	 *
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	// TODO Additive animation
	// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
	// https://developer.apple.com/videos/wwdc2014/#236


	    var util = __webpack_require__(243);
	    var Dispatcher = __webpack_require__(327).Dispatcher;

	    var requestAnimationFrame = __webpack_require__(328);

	    var Animator = __webpack_require__(275);
	    /**
	     * @typedef {Object} IZRenderStage
	     * @property {Function} update
	     */

	    /**
	     * @alias module:zrender/animation/Animation
	     * @constructor
	     * @param {Object} [options]
	     * @param {Function} [options.onframe]
	     * @param {IZRenderStage} [options.stage]
	     * @example
	     *     var animation = new Animation();
	     *     var obj = {
	     *         x: 100,
	     *         y: 100
	     *     };
	     *     animation.animate(node.position)
	     *         .when(1000, {
	     *             x: 500,
	     *             y: 500
	     *         })
	     *         .when(2000, {
	     *             x: 100,
	     *             y: 100
	     *         })
	     *         .start('spline');
	     */
	    var Animation = function (options) {

	        options = options || {};

	        this.stage = options.stage || {};

	        this.onframe = options.onframe || function() {};

	        // private properties
	        this._clips = [];

	        this._running = false;

	        this._time;

	        this._pausedTime;

	        this._pauseStart;

	        this._paused = false;

	        Dispatcher.call(this);
	    };

	    Animation.prototype = {

	        constructor: Animation,
	        /**
	         * 添加 clip
	         * @param {module:zrender/animation/Clip} clip
	         */
	        addClip: function (clip) {
	            this._clips.push(clip);
	        },
	        /**
	         * 添加 animator
	         * @param {module:zrender/animation/Animator} animator
	         */
	        addAnimator: function (animator) {
	            animator.animation = this;
	            var clips = animator.getClips();
	            for (var i = 0; i < clips.length; i++) {
	                this.addClip(clips[i]);
	            }
	        },
	        /**
	         * 删除动画片段
	         * @param {module:zrender/animation/Clip} clip
	         */
	        removeClip: function(clip) {
	            var idx = util.indexOf(this._clips, clip);
	            if (idx >= 0) {
	                this._clips.splice(idx, 1);
	            }
	        },

	        /**
	         * 删除动画片段
	         * @param {module:zrender/animation/Animator} animator
	         */
	        removeAnimator: function (animator) {
	            var clips = animator.getClips();
	            for (var i = 0; i < clips.length; i++) {
	                this.removeClip(clips[i]);
	            }
	            animator.animation = null;
	        },

	        _update: function() {

	            var time = new Date().getTime() - this._pausedTime;
	            var delta = time - this._time;
	            var clips = this._clips;
	            var len = clips.length;

	            var deferredEvents = [];
	            var deferredClips = [];
	            for (var i = 0; i < len; i++) {
	                var clip = clips[i];
	                var e = clip.step(time);
	                // Throw out the events need to be called after
	                // stage.update, like destroy
	                if (e) {
	                    deferredEvents.push(e);
	                    deferredClips.push(clip);
	                }
	            }

	            // Remove the finished clip
	            for (var i = 0; i < len;) {
	                if (clips[i]._needsRemove) {
	                    clips[i] = clips[len - 1];
	                    clips.pop();
	                    len--;
	                }
	                else {
	                    i++;
	                }
	            }

	            len = deferredEvents.length;
	            for (var i = 0; i < len; i++) {
	                deferredClips[i].fire(deferredEvents[i]);
	            }

	            this._time = time;

	            this.onframe(delta);

	            this.trigger('frame', delta);

	            if (this.stage.update) {
	                this.stage.update();
	            }
	        },

	        _startLoop: function () {
	            var self = this;

	            this._running = true;

	            function step() {
	                if (self._running) {

	                    requestAnimationFrame(step);

	                    !self._paused && self._update();
	                }
	            }

	            requestAnimationFrame(step);
	        },

	        /**
	         * 开始运行动画
	         */
	        start: function () {

	            this._time = new Date().getTime();
	            this._pausedTime = 0;

	            this._startLoop();
	        },
	        /**
	         * 停止运行动画
	         */
	        stop: function () {
	            this._running = false;
	        },

	        /**
	         * Pause
	         */
	        pause: function () {
	            if (!this._paused) {
	                this._pauseStart = new Date().getTime();
	                this._paused = true;
	            }
	        },

	        /**
	         * Resume
	         */
	        resume: function () {
	            if (this._paused) {
	                this._pausedTime += (new Date().getTime()) - this._pauseStart;
	                this._paused = false;
	            }
	        },

	        /**
	         * 清除所有动画片段
	         */
	        clear: function () {
	            this._clips = [];
	        },
	        /**
	         * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画
	         * @param  {Object} target
	         * @param  {Object} options
	         * @param  {boolean} [options.loop=false] 是否循环播放动画
	         * @param  {Function} [options.getter=null]
	         *         如果指定getter函数，会通过getter函数取属性值
	         * @param  {Function} [options.setter=null]
	         *         如果指定setter函数，会通过setter函数设置属性值
	         * @return {module:zrender/animation/Animation~Animator}
	         */
	        // TODO Gap
	        animate: function (target, options) {
	            options = options || {};

	            var animator = new Animator(
	                target,
	                options.loop,
	                options.getter,
	                options.setter
	            );

	            this.addAnimator(animator);

	            return animator;
	        }
	    };

	    util.mixin(Animation, Dispatcher);

	    module.exports = Animation;



/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 事件辅助类
	 * @module zrender/core/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */


	    var Eventful = __webpack_require__(272);
	    var env = __webpack_require__(241);

	    var isDomLevel2 = (typeof window !== 'undefined') && !!window.addEventListener;

	    function getBoundingClientRect(el) {
	        // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
	        return el.getBoundingClientRect ? el.getBoundingClientRect() : {left: 0, top: 0};
	    }

	    // `calculate` is optional, default false
	    function clientToLocal(el, e, out, calculate) {
	        out = out || {};

	        // According to the W3C Working Draft, offsetX and offsetY should be relative
	        // to the padding edge of the target element. The only browser using this convention
	        // is IE. Webkit uses the border edge, Opera uses the content edge, and FireFox does
	        // not support the properties.
	        // (see http://www.jacklmoore.com/notes/mouse-position/)
	        // In zr painter.dom, padding edge equals to border edge.

	        // FIXME
	        // When mousemove event triggered on ec tooltip, target is not zr painter.dom, and
	        // offsetX/Y is relative to e.target, where the calculation of zrX/Y via offsetX/Y
	        // is too complex. So css-transfrom dont support in this case temporarily.
	        if (calculate || !env.canvasSupported) {
	            defaultGetZrXY(el, e, out);
	        }
	        // Caution: In FireFox, layerX/layerY Mouse position relative to the closest positioned
	        // ancestor element, so we should make sure el is positioned (e.g., not position:static).
	        // BTW1, Webkit don't return the same results as FF in non-simple cases (like add
	        // zoom-factor, overflow / opacity layers, transforms ...)
	        // BTW2, (ev.offsetY || ev.pageY - $(ev.target).offset().top) is not correct in preserve-3d.
	        // <https://bugs.jquery.com/ticket/8523#comment:14>
	        // BTW3, In ff, offsetX/offsetY is always 0.
	        else if (env.browser.firefox && e.layerX != null && e.layerX !== e.offsetX) {
	            out.zrX = e.layerX;
	            out.zrY = e.layerY;
	        }
	        // For IE6+, chrome, safari, opera. (When will ff support offsetX?)
	        else if (e.offsetX != null) {
	            out.zrX = e.offsetX;
	            out.zrY = e.offsetY;
	        }
	        // For some other device, e.g., IOS safari.
	        else {
	            defaultGetZrXY(el, e, out);
	        }

	        return out;
	    }

	    function defaultGetZrXY(el, e, out) {
	        // This well-known method below does not support css transform.
	        var box = getBoundingClientRect(el);
	        out.zrX = e.clientX - box.left;
	        out.zrY = e.clientY - box.top;
	    }

	    /**
	     * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标.
	     * `calculate` is optional, default false.
	     */
	    function normalizeEvent(el, e, calculate) {

	        e = e || window.event;

	        if (e.zrX != null) {
	            return e;
	        }

	        var eventType = e.type;
	        var isTouch = eventType && eventType.indexOf('touch') >= 0;

	        if (!isTouch) {
	            clientToLocal(el, e, e, calculate);
	            e.zrDelta = (e.wheelDelta) ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
	        }
	        else {
	            var touch = eventType != 'touchend'
	                ? e.targetTouches[0]
	                : e.changedTouches[0];
	            touch && clientToLocal(el, touch, e, calculate);
	        }

	        return e;
	    }

	    function addEventListener(el, name, handler) {
	        if (isDomLevel2) {
	            el.addEventListener(name, handler);
	        }
	        else {
	            el.attachEvent('on' + name, handler);
	        }
	    }

	    function removeEventListener(el, name, handler) {
	        if (isDomLevel2) {
	            el.removeEventListener(name, handler);
	        }
	        else {
	            el.detachEvent('on' + name, handler);
	        }
	    }

	    /**
	     * preventDefault and stopPropagation.
	     * Notice: do not do that in zrender. Upper application
	     * do that if necessary.
	     *
	     * @memberOf module:zrender/core/event
	     * @method
	     * @param {Event} e : event对象
	     */
	    var stop = isDomLevel2
	        ? function (e) {
	            e.preventDefault();
	            e.stopPropagation();
	            e.cancelBubble = true;
	        }
	        : function (e) {
	            e.returnValue = false;
	            e.cancelBubble = true;
	        };

	    module.exports = {
	        clientToLocal: clientToLocal,
	        normalizeEvent: normalizeEvent,
	        addEventListener: addEventListener,
	        removeEventListener: removeEventListener,

	        stop: stop,
	        // 做向上兼容
	        Dispatcher: Eventful
	    };



/***/ },
/* 328 */
/***/ function(module, exports) {

	

	    module.exports = (typeof window !== 'undefined' &&
	                                    (window.requestAnimationFrame
	                                    || window.msRequestAnimationFrame
	                                    || window.mozRequestAnimationFrame
	                                    || window.webkitRequestAnimationFrame))
	                                || function (func) {
	                                    setTimeout(func, 16);
	                                };



/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	

	    var eventTool = __webpack_require__(327);
	    var zrUtil = __webpack_require__(243);
	    var Eventful = __webpack_require__(272);
	    var env = __webpack_require__(241);
	    var GestureMgr = __webpack_require__(330);

	    var addEventListener = eventTool.addEventListener;
	    var removeEventListener = eventTool.removeEventListener;
	    var normalizeEvent = eventTool.normalizeEvent;

	    var TOUCH_CLICK_DELAY = 300;

	    var mouseHandlerNames = [
	        'click', 'dblclick', 'mousewheel', 'mouseout',
	        'mouseup', 'mousedown', 'mousemove', 'contextmenu'
	    ];

	    var touchHandlerNames = [
	        'touchstart', 'touchend', 'touchmove'
	    ];

	    var pointerEventNames = {
	        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1
	    };

	    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {
	        var nm = name.replace('mouse', 'pointer');
	        return pointerEventNames[nm] ? nm : name;
	    });

	    function eventNameFix(name) {
	        return (name === 'mousewheel' && env.browser.firefox) ? 'DOMMouseScroll' : name;
	    }

	    function processGesture(proxy, event, stage) {
	        var gestureMgr = proxy._gestureMgr;

	        stage === 'start' && gestureMgr.clear();

	        var gestureInfo = gestureMgr.recognize(
	            event,
	            proxy.handler.findHover(event.zrX, event.zrY, null),
	            proxy.dom
	        );

	        stage === 'end' && gestureMgr.clear();

	        // Do not do any preventDefault here. Upper application do that if necessary.
	        if (gestureInfo) {
	            var type = gestureInfo.type;
	            event.gestureEvent = type;

	            proxy.handler.dispatchToElement(gestureInfo.target, type, gestureInfo.event);
	        }
	    }

	    // function onMSGestureChange(proxy, event) {
	    //     if (event.translationX || event.translationY) {
	    //         // mousemove is carried by MSGesture to reduce the sensitivity.
	    //         proxy.handler.dispatchToElement(event.target, 'mousemove', event);
	    //     }
	    //     if (event.scale !== 1) {
	    //         event.pinchX = event.offsetX;
	    //         event.pinchY = event.offsetY;
	    //         event.pinchScale = event.scale;
	    //         proxy.handler.dispatchToElement(event.target, 'pinch', event);
	    //     }
	    // }

	    /**
	     * Prevent mouse event from being dispatched after Touch Events action
	     * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
	     * 1. Mobile browsers dispatch mouse events 300ms after touchend.
	     * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
	     * Result: Blocking Mouse Events for 700ms.
	     */
	    function setTouchTimer(instance) {
	        instance._touching = true;
	        clearTimeout(instance._touchTimer);
	        instance._touchTimer = setTimeout(function () {
	            instance._touching = false;
	        }, 700);
	    }


	    var domHandlers = {
	        /**
	         * Mouse move handler
	         * @inner
	         * @param {Event} event
	         */
	        mousemove: function (event) {
	            event = normalizeEvent(this.dom, event);

	            this.trigger('mousemove', event);
	        },

	        /**
	         * Mouse out handler
	         * @inner
	         * @param {Event} event
	         */
	        mouseout: function (event) {
	            event = normalizeEvent(this.dom, event);

	            var element = event.toElement || event.relatedTarget;
	            if (element != this.dom) {
	                while (element && element.nodeType != 9) {
	                    // 忽略包含在root中的dom引起的mouseOut
	                    if (element === this.dom) {
	                        return;
	                    }

	                    element = element.parentNode;
	                }
	            }

	            this.trigger('mouseout', event);
	        },

	        /**
	         * Touch开始响应函数
	         * @inner
	         * @param {Event} event
	         */
	        touchstart: function (event) {
	            // Default mouse behaviour should not be disabled here.
	            // For example, page may needs to be slided.
	            event = normalizeEvent(this.dom, event);

	            // Mark touch, which is useful in distinguish touch and
	            // mouse event in upper applicatoin.
	            event.zrByTouch = true;

	            this._lastTouchMoment = new Date();

	            processGesture(this, event, 'start');

	            // In touch device, trigger `mousemove`(`mouseover`) should
	            // be triggered, and must before `mousedown` triggered.
	            domHandlers.mousemove.call(this, event);

	            domHandlers.mousedown.call(this, event);

	            setTouchTimer(this);
	        },

	        /**
	         * Touch移动响应函数
	         * @inner
	         * @param {Event} event
	         */
	        touchmove: function (event) {

	            event = normalizeEvent(this.dom, event);

	            // Mark touch, which is useful in distinguish touch and
	            // mouse event in upper applicatoin.
	            event.zrByTouch = true;

	            processGesture(this, event, 'change');

	            // Mouse move should always be triggered no matter whether
	            // there is gestrue event, because mouse move and pinch may
	            // be used at the same time.
	            domHandlers.mousemove.call(this, event);

	            setTouchTimer(this);
	        },

	        /**
	         * Touch结束响应函数
	         * @inner
	         * @param {Event} event
	         */
	        touchend: function (event) {

	            event = normalizeEvent(this.dom, event);

	            // Mark touch, which is useful in distinguish touch and
	            // mouse event in upper applicatoin.
	            event.zrByTouch = true;

	            processGesture(this, event, 'end');

	            domHandlers.mouseup.call(this, event);

	            // Do not trigger `mouseout` here, in spite of `mousemove`(`mouseover`) is
	            // triggered in `touchstart`. This seems to be illogical, but by this mechanism,
	            // we can conveniently implement "hover style" in both PC and touch device just
	            // by listening to `mouseover` to add "hover style" and listening to `mouseout`
	            // to remove "hover style" on an element, without any additional code for
	            // compatibility. (`mouseout` will not be triggered in `touchend`, so "hover
	            // style" will remain for user view)

	            // click event should always be triggered no matter whether
	            // there is gestrue event. System click can not be prevented.
	            if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
	                domHandlers.click.call(this, event);
	            }

	            setTouchTimer(this);
	        },

	        pointerdown: function (event) {
	            domHandlers.mousedown.call(this, event);

	            // if (useMSGuesture(this, event)) {
	            //     this._msGesture.addPointer(event.pointerId);
	            // }
	        },

	        pointermove: function (event) {
	            // FIXME
	            // pointermove is so sensitive that it always triggered when
	            // tap(click) on touch screen, which affect some judgement in
	            // upper application. So, we dont support mousemove on MS touch
	            // device yet.
	            if (!isPointerFromTouch(event)) {
	                domHandlers.mousemove.call(this, event);
	            }
	        },

	        pointerup: function (event) {
	            domHandlers.mouseup.call(this, event);
	        },

	        pointerout: function (event) {
	            // pointerout will be triggered when tap on touch screen
	            // (IE11+/Edge on MS Surface) after click event triggered,
	            // which is inconsistent with the mousout behavior we defined
	            // in touchend. So we unify them.
	            // (check domHandlers.touchend for detailed explanation)
	            if (!isPointerFromTouch(event)) {
	                domHandlers.mouseout.call(this, event);
	            }
	        }
	    };

	    function isPointerFromTouch(event) {
	        var pointerType = event.pointerType;
	        return pointerType === 'pen' || pointerType === 'touch';
	    }

	    // function useMSGuesture(handlerProxy, event) {
	    //     return isPointerFromTouch(event) && !!handlerProxy._msGesture;
	    // }

	    // Common handlers
	    zrUtil.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick', 'contextmenu'], function (name) {
	        domHandlers[name] = function (event) {
	            event = normalizeEvent(this.dom, event);
	            this.trigger(name, event);
	        };
	    });

	    /**
	     * 为控制类实例初始化dom 事件处理函数
	     *
	     * @inner
	     * @param {module:zrender/Handler} instance 控制类实例
	     */
	    function initDomHandler(instance) {
	        zrUtil.each(touchHandlerNames, function (name) {
	            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	        });

	        zrUtil.each(pointerHandlerNames, function (name) {
	            instance._handlers[name] = zrUtil.bind(domHandlers[name], instance);
	        });

	        zrUtil.each(mouseHandlerNames, function (name) {
	            instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
	        });

	        function makeMouseHandler(fn, instance) {
	            return function () {
	                if (instance._touching) {
	                    return;
	                }
	                return fn.apply(instance, arguments);
	            };
	        }
	    }


	    function HandlerDomProxy(dom) {
	        Eventful.call(this);

	        this.dom = dom;

	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._touching = false;

	        /**
	         * @private
	         * @type {number}
	         */
	        this._touchTimer;

	        /**
	         * @private
	         * @type {module:zrender/core/GestureMgr}
	         */
	        this._gestureMgr = new GestureMgr();

	        this._handlers = {};

	        initDomHandler(this);

	        if (env.pointerEventsSupported) { // Only IE11+/Edge
	            // 1. On devices that both enable touch and mouse (e.g., MS Surface and lenovo X240),
	            // IE11+/Edge do not trigger touch event, but trigger pointer event and mouse event
	            // at the same time.
	            // 2. On MS Surface, it probablely only trigger mousedown but no mouseup when tap on
	            // screen, which do not occurs in pointer event.
	            // So we use pointer event to both detect touch gesture and mouse behavior.
	            mountHandlers(pointerHandlerNames, this);

	            // FIXME
	            // Note: MS Gesture require CSS touch-action set. But touch-action is not reliable,
	            // which does not prevent defuault behavior occasionally (which may cause view port
	            // zoomed in but use can not zoom it back). And event.preventDefault() does not work.
	            // So we have to not to use MSGesture and not to support touchmove and pinch on MS
	            // touch screen. And we only support click behavior on MS touch screen now.

	            // MS Gesture Event is only supported on IE11+/Edge and on Windows 8+.
	            // We dont support touch on IE on win7.
	            // See <https://msdn.microsoft.com/en-us/library/dn433243(v=vs.85).aspx>
	            // if (typeof MSGesture === 'function') {
	            //     (this._msGesture = new MSGesture()).target = dom; // jshint ignore:line
	            //     dom.addEventListener('MSGestureChange', onMSGestureChange);
	            // }
	        }
	        else {
	            if (env.touchEventsSupported) {
	                mountHandlers(touchHandlerNames, this);
	                // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
	                // addEventListener(root, 'mouseout', this._mouseoutHandler);
	            }

	            // 1. Considering some devices that both enable touch and mouse event (like on MS Surface
	            // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
	            // mouse event can not be handle in those devices.
	            // 2. On MS Surface, Chrome will trigger both touch event and mouse event. How to prevent
	            // mouseevent after touch event triggered, see `setTouchTimer`.
	            mountHandlers(mouseHandlerNames, this);
	        }

	        function mountHandlers(handlerNames, instance) {
	            zrUtil.each(handlerNames, function (name) {
	                addEventListener(dom, eventNameFix(name), instance._handlers[name]);
	            }, instance);
	        }
	    }

	    var handlerDomProxyProto = HandlerDomProxy.prototype;
	    handlerDomProxyProto.dispose = function () {
	        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);

	        for (var i = 0; i < handlerNames.length; i++) {
	            var name = handlerNames[i];
	            removeEventListener(this.dom, eventNameFix(name), this._handlers[name]);
	        }
	    };

	    handlerDomProxyProto.setCursor = function (cursorStyle) {
	        this.dom.style.cursor = cursorStyle || 'default';
	    };

	    zrUtil.mixin(HandlerDomProxy, Eventful);

	    module.exports = HandlerDomProxy;


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Only implements needed gestures for mobile.
	 */


	    var eventUtil = __webpack_require__(327);

	    var GestureMgr = function () {

	        /**
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._track = [];
	    };

	    GestureMgr.prototype = {

	        constructor: GestureMgr,

	        recognize: function (event, target, root) {
	            this._doTrack(event, target, root);
	            return this._recognize(event);
	        },

	        clear: function () {
	            this._track.length = 0;
	            return this;
	        },

	        _doTrack: function (event, target, root) {
	            var touches = event.touches;

	            if (!touches) {
	                return;
	            }

	            var trackItem = {
	                points: [],
	                touches: [],
	                target: target,
	                event: event
	            };

	            for (var i = 0, len = touches.length; i < len; i++) {
	                var touch = touches[i];
	                var pos = eventUtil.clientToLocal(root, touch, {});
	                trackItem.points.push([pos.zrX, pos.zrY]);
	                trackItem.touches.push(touch);
	            }

	            this._track.push(trackItem);
	        },

	        _recognize: function (event) {
	            for (var eventName in recognizers) {
	                if (recognizers.hasOwnProperty(eventName)) {
	                    var gestureInfo = recognizers[eventName](this._track, event);
	                    if (gestureInfo) {
	                        return gestureInfo;
	                    }
	                }
	            }
	        }
	    };

	    function dist(pointPair) {
	        var dx = pointPair[1][0] - pointPair[0][0];
	        var dy = pointPair[1][1] - pointPair[0][1];

	        return Math.sqrt(dx * dx + dy * dy);
	    }

	    function center(pointPair) {
	        return [
	            (pointPair[0][0] + pointPair[1][0]) / 2,
	            (pointPair[0][1] + pointPair[1][1]) / 2
	        ];
	    }

	    var recognizers = {

	        pinch: function (track, event) {
	            var trackLen = track.length;

	            if (!trackLen) {
	                return;
	            }

	            var pinchEnd = (track[trackLen - 1] || {}).points;
	            var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;

	            if (pinchPre
	                && pinchPre.length > 1
	                && pinchEnd
	                && pinchEnd.length > 1
	            ) {
	                var pinchScale = dist(pinchEnd) / dist(pinchPre);
	                !isFinite(pinchScale) && (pinchScale = 1);

	                event.pinchScale = pinchScale;

	                var pinchCenter = center(pinchEnd);
	                event.pinchX = pinchCenter[0];
	                event.pinchY = pinchCenter[1];

	                return {
	                    type: 'pinch',
	                    target: track[0].target,
	                    event: event
	                };
	            }
	        }

	        // Only pinch currently.
	    };

	    module.exports = GestureMgr;



/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Default canvas painter
	 * @module zrender/Painter
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	 

	    var config = __webpack_require__(280);
	    var util = __webpack_require__(243);
	    var log = __webpack_require__(279);
	    var BoundingRect = __webpack_require__(248);
	    var timsort = __webpack_require__(325);

	    var Layer = __webpack_require__(332);

	    var requestAnimationFrame = __webpack_require__(328);

	    // PENDIGN
	    // Layer exceeds MAX_PROGRESSIVE_LAYER_NUMBER may have some problem when flush directly second time.
	    //
	    // Maximum progressive layer. When exceeding this number. All elements will be drawed in the last layer.
	    var MAX_PROGRESSIVE_LAYER_NUMBER = 5;

	    function parseInt10(val) {
	        return parseInt(val, 10);
	    }

	    function isLayerValid(layer) {
	        if (!layer) {
	            return false;
	        }

	        if (layer.isBuildin) {
	            return true;
	        }

	        if (typeof(layer.resize) !== 'function'
	            || typeof(layer.refresh) !== 'function'
	        ) {
	            return false;
	        }

	        return true;
	    }

	    function preProcessLayer(layer) {
	        layer.__unusedCount++;
	    }

	    function postProcessLayer(layer) {
	        if (layer.__unusedCount == 1) {
	            layer.clear();
	        }
	    }

	    var tmpRect = new BoundingRect(0, 0, 0, 0);
	    var viewRect = new BoundingRect(0, 0, 0, 0);
	    function isDisplayableCulled(el, width, height) {
	        tmpRect.copy(el.getBoundingRect());
	        if (el.transform) {
	            tmpRect.applyTransform(el.transform);
	        }
	        viewRect.width = width;
	        viewRect.height = height;
	        return !tmpRect.intersect(viewRect);
	    }

	    function isClipPathChanged(clipPaths, prevClipPaths) {
	        if (clipPaths == prevClipPaths) { // Can both be null or undefined
	            return false;
	        }

	        if (!clipPaths || !prevClipPaths || (clipPaths.length !== prevClipPaths.length)) {
	            return true;
	        }
	        for (var i = 0; i < clipPaths.length; i++) {
	            if (clipPaths[i] !== prevClipPaths[i]) {
	                return true;
	            }
	        }
	    }

	    function doClip(clipPaths, ctx) {
	        for (var i = 0; i < clipPaths.length; i++) {
	            var clipPath = clipPaths[i];
	            var path = clipPath.path;

	            clipPath.setTransform(ctx);
	            path.beginPath(ctx);
	            clipPath.buildPath(path, clipPath.shape);
	            ctx.clip();
	            // Transform back
	            clipPath.restoreTransform(ctx);
	        }
	    }

	    function createRoot(width, height) {
	        var domRoot = document.createElement('div');

	        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
	        domRoot.style.cssText = [
	            'position:relative',
	            'overflow:hidden',
	            'width:' + width + 'px',
	            'height:' + height + 'px',
	            'padding:0',
	            'margin:0',
	            'border-width:0'
	        ].join(';') + ';';

	        return domRoot;
	    }

	    /**
	     * @alias module:zrender/Painter
	     * @constructor
	     * @param {HTMLElement} root 绘图容器
	     * @param {module:zrender/Storage} storage
	     * @param {Ojbect} opts
	     */
	    var Painter = function (root, storage, opts) {
	        // In node environment using node-canvas
	        var singleCanvas = !root.nodeName // In node ?
	            || root.nodeName.toUpperCase() === 'CANVAS';

	        this._opts = opts = util.extend({}, opts || {});

	        /**
	         * @type {number}
	         */
	        this.dpr = opts.devicePixelRatio || config.devicePixelRatio;
	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._singleCanvas = singleCanvas;
	        /**
	         * 绘图容器
	         * @type {HTMLElement}
	         */
	        this.root = root;

	        var rootStyle = root.style;

	        if (rootStyle) {
	            rootStyle['-webkit-tap-highlight-color'] = 'transparent';
	            rootStyle['-webkit-user-select'] =
	            rootStyle['user-select'] =
	            rootStyle['-webkit-touch-callout'] = 'none';

	            root.innerHTML = '';
	        }

	        /**
	         * @type {module:zrender/Storage}
	         */
	        this.storage = storage;

	        /**
	         * @type {Array.<number>}
	         * @private
	         */
	        var zlevelList = this._zlevelList = [];

	        /**
	         * @type {Object.<string, module:zrender/Layer>}
	         * @private
	         */
	        var layers = this._layers = {};

	        /**
	         * @type {Object.<string, Object>}
	         * @type {private}
	         */
	        this._layerConfig = {};

	        if (!singleCanvas) {
	            this._width = this._getSize(0);
	            this._height = this._getSize(1);

	            var domRoot = this._domRoot = createRoot(
	                this._width, this._height
	            );
	            root.appendChild(domRoot);
	        }
	        else {
	            // Use canvas width and height directly
	            var width = root.width;
	            var height = root.height;
	            this._width = width;
	            this._height = height;

	            // Create layer if only one given canvas
	            // Device pixel ratio is fixed to 1 because given canvas has its specified width and height
	            var mainLayer = new Layer(root, this, 1);
	            mainLayer.initContext();
	            // FIXME Use canvas width and height
	            // mainLayer.resize(width, height);
	            layers[0] = mainLayer;
	            zlevelList.push(0);

	            this._domRoot = root;
	        }

	        this.pathToImage = this._createPathToImage();

	        // Layers for progressive rendering
	        this._progressiveLayers = [];

	        /**
	         * @type {module:zrender/Layer}
	         * @private
	         */
	        this._hoverlayer;

	        this._hoverElements = [];
	    };

	    Painter.prototype = {

	        constructor: Painter,

	        /**
	         * If painter use a single canvas
	         * @return {boolean}
	         */
	        isSingleCanvas: function () {
	            return this._singleCanvas;
	        },
	        /**
	         * @return {HTMLDivElement}
	         */
	        getViewportRoot: function () {
	            return this._domRoot;
	        },

	        /**
	         * 刷新
	         * @param {boolean} [paintAll=false] 强制绘制所有displayable
	         */
	        refresh: function (paintAll) {

	            var list = this.storage.getDisplayList(true);

	            var zlevelList = this._zlevelList;

	            this._paintList(list, paintAll);

	            // Paint custum layers
	            for (var i = 0; i < zlevelList.length; i++) {
	                var z = zlevelList[i];
	                var layer = this._layers[z];
	                if (!layer.isBuildin && layer.refresh) {
	                    layer.refresh();
	                }
	            }

	            this.refreshHover();

	            if (this._progressiveLayers.length) {
	                this._startProgessive();
	            }

	            return this;
	        },

	        addHover: function (el, hoverStyle) {
	            if (el.__hoverMir) {
	                return;
	            }
	            var elMirror = new el.constructor({
	                style: el.style,
	                shape: el.shape
	            });
	            elMirror.__from = el;
	            el.__hoverMir = elMirror;
	            elMirror.setStyle(hoverStyle);
	            this._hoverElements.push(elMirror);
	        },

	        removeHover: function (el) {
	            var elMirror = el.__hoverMir;
	            var hoverElements = this._hoverElements;
	            var idx = util.indexOf(hoverElements, elMirror);
	            if (idx >= 0) {
	                hoverElements.splice(idx, 1);
	            }
	            el.__hoverMir = null;
	        },

	        clearHover: function (el) {
	            var hoverElements = this._hoverElements;
	            for (var i = 0; i < hoverElements.length; i++) {
	                var from = hoverElements[i].__from;
	                if (from) {
	                    from.__hoverMir = null;
	                }
	            }
	            hoverElements.length = 0;
	        },

	        refreshHover: function () {
	            var hoverElements = this._hoverElements;
	            var len = hoverElements.length;
	            var hoverLayer = this._hoverlayer;
	            hoverLayer && hoverLayer.clear();

	            if (!len) {
	                return;
	            }
	            timsort(hoverElements, this.storage.displayableSortFunc);

	            // Use a extream large zlevel
	            // FIXME?
	            if (!hoverLayer) {
	                hoverLayer = this._hoverlayer = this.getLayer(1e5);
	            }

	            var scope = {};
	            hoverLayer.ctx.save();
	            for (var i = 0; i < len;) {
	                var el = hoverElements[i];
	                var originalEl = el.__from;
	                // Original el is removed
	                // PENDING
	                if (!(originalEl && originalEl.__zr)) {
	                    hoverElements.splice(i, 1);
	                    originalEl.__hoverMir = null;
	                    len--;
	                    continue;
	                }
	                i++;

	                // Use transform
	                // FIXME style and shape ?
	                if (!originalEl.invisible) {
	                    el.transform = originalEl.transform;
	                    el.invTransform = originalEl.invTransform;
	                    el.__clipPaths = originalEl.__clipPaths;
	                    // el.
	                    this._doPaintEl(el, hoverLayer, true, scope);
	                }
	            }
	            hoverLayer.ctx.restore();
	        },

	        _startProgessive: function () {
	            var self = this;

	            if (!self._furtherProgressive) {
	                return;
	            }

	            // Use a token to stop progress steps triggered by
	            // previous zr.refresh calling.
	            var token = self._progressiveToken = +new Date();

	            self._progress++;
	            requestAnimationFrame(step);

	            function step() {
	                // In case refreshed or disposed
	                if (token === self._progressiveToken && self.storage) {

	                    self._doPaintList(self.storage.getDisplayList());

	                    if (self._furtherProgressive) {
	                        self._progress++;
	                        requestAnimationFrame(step);
	                    }
	                    else {
	                        self._progressiveToken = -1;
	                    }
	                }
	            }
	        },

	        _clearProgressive: function () {
	            this._progressiveToken = -1;
	            this._progress = 0;
	            util.each(this._progressiveLayers, function (layer) {
	                layer.__dirty && layer.clear();
	            });
	        },

	        _paintList: function (list, paintAll) {

	            if (paintAll == null) {
	                paintAll = false;
	            }

	            this._updateLayerStatus(list);

	            this._clearProgressive();

	            this.eachBuildinLayer(preProcessLayer);

	            this._doPaintList(list, paintAll);

	            this.eachBuildinLayer(postProcessLayer);
	        },

	        _doPaintList: function (list, paintAll) {
	            var currentLayer;
	            var currentZLevel;
	            var ctx;

	            // var invTransform = [];
	            var scope;

	            var progressiveLayerIdx = 0;
	            var currentProgressiveLayer;

	            var width = this._width;
	            var height = this._height;
	            var layerProgress;
	            var frame = this._progress;
	            function flushProgressiveLayer(layer) {
	                var dpr = ctx.dpr || 1;
	                ctx.save();
	                ctx.globalAlpha = 1;
	                ctx.shadowBlur = 0;
	                // Avoid layer don't clear in next progressive frame
	                currentLayer.__dirty = true;
	                ctx.setTransform(1, 0, 0, 1, 0, 0);
	                ctx.drawImage(layer.dom, 0, 0, width * dpr, height * dpr);
	                ctx.restore();
	            }

	            for (var i = 0, l = list.length; i < l; i++) {
	                var el = list[i];
	                var elZLevel = this._singleCanvas ? 0 : el.zlevel;

	                var elFrame = el.__frame;

	                // Flush at current context
	                // PENDING
	                if (elFrame < 0 && currentProgressiveLayer) {
	                    flushProgressiveLayer(currentProgressiveLayer);
	                    currentProgressiveLayer = null;
	                }

	                // Change draw layer
	                if (currentZLevel !== elZLevel) {
	                    if (ctx) {
	                        ctx.restore();
	                    }

	                    // Reset scope
	                    scope = {};

	                    // Only 0 zlevel if only has one canvas
	                    currentZLevel = elZLevel;
	                    currentLayer = this.getLayer(currentZLevel);

	                    if (!currentLayer.isBuildin) {
	                        log(
	                            'ZLevel ' + currentZLevel
	                            + ' has been used by unkown layer ' + currentLayer.id
	                        );
	                    }

	                    ctx = currentLayer.ctx;
	                    ctx.save();

	                    // Reset the count
	                    currentLayer.__unusedCount = 0;

	                    if (currentLayer.__dirty || paintAll) {
	                        currentLayer.clear();
	                    }
	                }

	                if (!(currentLayer.__dirty || paintAll)) {
	                    continue;
	                }

	                if (elFrame >= 0) {
	                    // Progressive layer changed
	                    if (!currentProgressiveLayer) {
	                        currentProgressiveLayer = this._progressiveLayers[
	                            Math.min(progressiveLayerIdx++, MAX_PROGRESSIVE_LAYER_NUMBER - 1)
	                        ];

	                        currentProgressiveLayer.ctx.save();
	                        currentProgressiveLayer.renderScope = {};

	                        if (currentProgressiveLayer
	                            && (currentProgressiveLayer.__progress > currentProgressiveLayer.__maxProgress)
	                        ) {
	                            // flushProgressiveLayer(currentProgressiveLayer);
	                            // Quick jump all progressive elements
	                            // All progressive element are not dirty, jump over and flush directly
	                            i = currentProgressiveLayer.__nextIdxNotProg - 1;
	                            // currentProgressiveLayer = null;
	                            continue;
	                        }

	                        layerProgress = currentProgressiveLayer.__progress;

	                        if (!currentProgressiveLayer.__dirty) {
	                            // Keep rendering
	                            frame = layerProgress;
	                        }

	                        currentProgressiveLayer.__progress = frame + 1;
	                    }

	                    if (elFrame === frame) {
	                        this._doPaintEl(el, currentProgressiveLayer, true, currentProgressiveLayer.renderScope);
	                    }
	                }
	                else {
	                    this._doPaintEl(el, currentLayer, paintAll, scope);
	                }

	                el.__dirty = false;
	            }

	            if (currentProgressiveLayer) {
	                flushProgressiveLayer(currentProgressiveLayer);
	            }

	            // Restore the lastLayer ctx
	            ctx && ctx.restore();
	            // If still has clipping state
	            // if (scope.prevElClipPaths) {
	            //     ctx.restore();
	            // }

	            this._furtherProgressive = false;
	            util.each(this._progressiveLayers, function (layer) {
	                if (layer.__maxProgress >= layer.__progress) {
	                    this._furtherProgressive = true;
	                }
	            }, this);
	        },

	        _doPaintEl: function (el, currentLayer, forcePaint, scope) {
	            var ctx = currentLayer.ctx;
	            var m = el.transform;
	            if (
	                (currentLayer.__dirty || forcePaint)
	                // Ignore invisible element
	                && !el.invisible
	                // Ignore transparent element
	                && el.style.opacity !== 0
	                // Ignore scale 0 element, in some environment like node-canvas
	                // Draw a scale 0 element can cause all following draw wrong
	                // And setTransform with scale 0 will cause set back transform failed.
	                && !(m && !m[0] && !m[3])
	                // Ignore culled element
	                && !(el.culling && isDisplayableCulled(el, this._width, this._height))
	            ) {

	                var clipPaths = el.__clipPaths;

	                // Optimize when clipping on group with several elements
	                if (scope.prevClipLayer !== currentLayer
	                    || isClipPathChanged(clipPaths, scope.prevElClipPaths)
	                ) {
	                    // If has previous clipping state, restore from it
	                    if (scope.prevElClipPaths) {
	                        scope.prevClipLayer.ctx.restore();
	                        scope.prevClipLayer = scope.prevElClipPaths = null;

	                        // Reset prevEl since context has been restored
	                        scope.prevEl = null;
	                    }
	                    // New clipping state
	                    if (clipPaths) {
	                        ctx.save();
	                        doClip(clipPaths, ctx);
	                        scope.prevClipLayer = currentLayer;
	                        scope.prevElClipPaths = clipPaths;
	                    }
	                }
	                el.beforeBrush && el.beforeBrush(ctx);

	                el.brush(ctx, scope.prevEl || null);
	                scope.prevEl = el;

	                el.afterBrush && el.afterBrush(ctx);
	            }
	        },

	        /**
	         * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	         * @param {number} zlevel
	         * @return {module:zrender/Layer}
	         */
	        getLayer: function (zlevel) {
	            if (this._singleCanvas) {
	                return this._layers[0];
	            }

	            var layer = this._layers[zlevel];
	            if (!layer) {
	                // Create a new layer
	                layer = new Layer('zr_' + zlevel, this, this.dpr);
	                layer.isBuildin = true;

	                if (this._layerConfig[zlevel]) {
	                    util.merge(layer, this._layerConfig[zlevel], true);
	                }

	                this.insertLayer(zlevel, layer);

	                // Context is created after dom inserted to document
	                // Or excanvas will get 0px clientWidth and clientHeight
	                layer.initContext();
	            }

	            return layer;
	        },

	        insertLayer: function (zlevel, layer) {

	            var layersMap = this._layers;
	            var zlevelList = this._zlevelList;
	            var len = zlevelList.length;
	            var prevLayer = null;
	            var i = -1;
	            var domRoot = this._domRoot;

	            if (layersMap[zlevel]) {
	                log('ZLevel ' + zlevel + ' has been used already');
	                return;
	            }
	            // Check if is a valid layer
	            if (!isLayerValid(layer)) {
	                log('Layer of zlevel ' + zlevel + ' is not valid');
	                return;
	            }

	            if (len > 0 && zlevel > zlevelList[0]) {
	                for (i = 0; i < len - 1; i++) {
	                    if (
	                        zlevelList[i] < zlevel
	                        && zlevelList[i + 1] > zlevel
	                    ) {
	                        break;
	                    }
	                }
	                prevLayer = layersMap[zlevelList[i]];
	            }
	            zlevelList.splice(i + 1, 0, zlevel);

	            if (prevLayer) {
	                var prevDom = prevLayer.dom;
	                if (prevDom.nextSibling) {
	                    domRoot.insertBefore(
	                        layer.dom,
	                        prevDom.nextSibling
	                    );
	                }
	                else {
	                    domRoot.appendChild(layer.dom);
	                }
	            }
	            else {
	                if (domRoot.firstChild) {
	                    domRoot.insertBefore(layer.dom, domRoot.firstChild);
	                }
	                else {
	                    domRoot.appendChild(layer.dom);
	                }
	            }

	            layersMap[zlevel] = layer;
	        },

	        // Iterate each layer
	        eachLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                cb.call(context, this._layers[z], z);
	            }
	        },

	        // Iterate each buildin layer
	        eachBuildinLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var layer;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                layer = this._layers[z];
	                if (layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        },

	        // Iterate each other layer except buildin layer
	        eachOtherLayer: function (cb, context) {
	            var zlevelList = this._zlevelList;
	            var layer;
	            var z;
	            var i;
	            for (i = 0; i < zlevelList.length; i++) {
	                z = zlevelList[i];
	                layer = this._layers[z];
	                if (! layer.isBuildin) {
	                    cb.call(context, layer, z);
	                }
	            }
	        },

	        /**
	         * 获取所有已创建的层
	         * @param {Array.<module:zrender/Layer>} [prevLayer]
	         */
	        getLayers: function () {
	            return this._layers;
	        },

	        _updateLayerStatus: function (list) {

	            var layers = this._layers;
	            var progressiveLayers = this._progressiveLayers;

	            var elCountsLastFrame = {};
	            var progressiveElCountsLastFrame = {};

	            this.eachBuildinLayer(function (layer, z) {
	                elCountsLastFrame[z] = layer.elCount;
	                layer.elCount = 0;
	                layer.__dirty = false;
	            });

	            util.each(progressiveLayers, function (layer, idx) {
	                progressiveElCountsLastFrame[idx] = layer.elCount;
	                layer.elCount = 0;
	                layer.__dirty = false;
	            });

	            var progressiveLayerCount = 0;
	            var currentProgressiveLayer;
	            var lastProgressiveKey;
	            var frameCount = 0;
	            for (var i = 0, l = list.length; i < l; i++) {
	                var el = list[i];
	                var zlevel = this._singleCanvas ? 0 : el.zlevel;
	                var layer = layers[zlevel];
	                var elProgress = el.progressive;
	                if (layer) {
	                    layer.elCount++;
	                    layer.__dirty = layer.__dirty || el.__dirty;
	                }

	                /////// Update progressive
	                if (elProgress >= 0) {
	                    // Fix wrong progressive sequence problem.
	                    if (lastProgressiveKey !== elProgress) {
	                        lastProgressiveKey = elProgress;
	                        frameCount++;
	                    }
	                    var elFrame = el.__frame = frameCount - 1;
	                    if (!currentProgressiveLayer) {
	                        var idx = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER - 1);
	                        currentProgressiveLayer = progressiveLayers[idx];
	                        if (!currentProgressiveLayer) {
	                            currentProgressiveLayer = progressiveLayers[idx] = new Layer(
	                                'progressive', this, this.dpr
	                            );
	                            currentProgressiveLayer.initContext();
	                        }
	                        currentProgressiveLayer.__maxProgress = 0;
	                    }
	                    currentProgressiveLayer.__dirty = currentProgressiveLayer.__dirty || el.__dirty;
	                    currentProgressiveLayer.elCount++;

	                    currentProgressiveLayer.__maxProgress = Math.max(
	                        currentProgressiveLayer.__maxProgress, elFrame
	                    );

	                    if (currentProgressiveLayer.__maxProgress >= currentProgressiveLayer.__progress) {
	                        // Should keep rendering this  layer because progressive rendering is not finished yet
	                        layer.__dirty = true;
	                    }
	                }
	                else {
	                    el.__frame = -1;

	                    if (currentProgressiveLayer) {
	                        currentProgressiveLayer.__nextIdxNotProg = i;
	                        progressiveLayerCount++;
	                        currentProgressiveLayer = null;
	                    }
	                }
	            }

	            if (currentProgressiveLayer) {
	                progressiveLayerCount++;
	                currentProgressiveLayer.__nextIdxNotProg = i;
	            }

	            // 层中的元素数量有发生变化
	            this.eachBuildinLayer(function (layer, z) {
	                if (elCountsLastFrame[z] !== layer.elCount) {
	                    layer.__dirty = true;
	                }
	            });

	            progressiveLayers.length = Math.min(progressiveLayerCount, MAX_PROGRESSIVE_LAYER_NUMBER);
	            util.each(progressiveLayers, function (layer, idx) {
	                if (progressiveElCountsLastFrame[idx] !== layer.elCount) {
	                    el.__dirty = true;
	                }
	                if (layer.__dirty) {
	                    layer.__progress = 0;
	                }
	            });
	        },

	        /**
	         * 清除hover层外所有内容
	         */
	        clear: function () {
	            this.eachBuildinLayer(this._clearLayer);
	            return this;
	        },

	        _clearLayer: function (layer) {
	            layer.clear();
	        },

	        /**
	         * 修改指定zlevel的绘制参数
	         *
	         * @param {string} zlevel
	         * @param {Object} config 配置对象
	         * @param {string} [config.clearColor=0] 每次清空画布的颜色
	         * @param {string} [config.motionBlur=false] 是否开启动态模糊
	         * @param {number} [config.lastFrameAlpha=0.7]
	         *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         */
	        configLayer: function (zlevel, config) {
	            if (config) {
	                var layerConfig = this._layerConfig;
	                if (!layerConfig[zlevel]) {
	                    layerConfig[zlevel] = config;
	                }
	                else {
	                    util.merge(layerConfig[zlevel], config, true);
	                }

	                var layer = this._layers[zlevel];

	                if (layer) {
	                    util.merge(layer, layerConfig[zlevel], true);
	                }
	            }
	        },

	        /**
	         * 删除指定层
	         * @param {number} zlevel 层所在的zlevel
	         */
	        delLayer: function (zlevel) {
	            var layers = this._layers;
	            var zlevelList = this._zlevelList;
	            var layer = layers[zlevel];
	            if (!layer) {
	                return;
	            }
	            layer.dom.parentNode.removeChild(layer.dom);
	            delete layers[zlevel];

	            zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
	        },

	        /**
	         * 区域大小变化后重绘
	         */
	        resize: function (width, height) {
	            var domRoot = this._domRoot;
	            // FIXME Why ?
	            domRoot.style.display = 'none';

	            // Save input w/h
	            var opts = this._opts;
	            width != null && (opts.width = width);
	            height != null && (opts.height = height);

	            width = this._getSize(0);
	            height = this._getSize(1);

	            domRoot.style.display = '';

	            // 优化没有实际改变的resize
	            if (this._width != width || height != this._height) {
	                domRoot.style.width = width + 'px';
	                domRoot.style.height = height + 'px';

	                for (var id in this._layers) {
	                    if (this._layers.hasOwnProperty(id)) {
	                        this._layers[id].resize(width, height);
	                    }
	                }
	                util.each(this._progressiveLayers, function (layer) {
	                    layer.resize(width, height);
	                });

	                this.refresh(true);
	            }

	            this._width = width;
	            this._height = height;

	            return this;
	        },

	        /**
	         * 清除单独的一个层
	         * @param {number} zlevel
	         */
	        clearLayer: function (zlevel) {
	            var layer = this._layers[zlevel];
	            if (layer) {
	                layer.clear();
	            }
	        },

	        /**
	         * 释放
	         */
	        dispose: function () {
	            this.root.innerHTML = '';

	            this.root =
	            this.storage =

	            this._domRoot =
	            this._layers = null;
	        },

	        /**
	         * Get canvas which has all thing rendered
	         * @param {Object} opts
	         * @param {string} [opts.backgroundColor]
	         */
	        getRenderedCanvas: function (opts) {
	            opts = opts || {};
	            if (this._singleCanvas) {
	                return this._layers[0].dom;
	            }

	            var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
	            imageLayer.initContext();

	            imageLayer.clearColor = opts.backgroundColor;
	            imageLayer.clear();

	            var displayList = this.storage.getDisplayList(true);

	            var scope = {};
	            for (var i = 0; i < displayList.length; i++) {
	                var el = displayList[i];
	                this._doPaintEl(el, imageLayer, true, scope);
	            }

	            return imageLayer.dom;
	        },
	        /**
	         * 获取绘图区域宽度
	         */
	        getWidth: function () {
	            return this._width;
	        },

	        /**
	         * 获取绘图区域高度
	         */
	        getHeight: function () {
	            return this._height;
	        },

	        _getSize: function (whIdx) {
	            var opts = this._opts;
	            var wh = ['width', 'height'][whIdx];
	            var cwh = ['clientWidth', 'clientHeight'][whIdx];
	            var plt = ['paddingLeft', 'paddingTop'][whIdx];
	            var prb = ['paddingRight', 'paddingBottom'][whIdx];

	            if (opts[wh] != null && opts[wh] !== 'auto') {
	                return parseFloat(opts[wh]);
	            }

	            var root = this.root;
	            var stl = document.defaultView.getComputedStyle(root);

	            return (
	                (root[cwh] || parseInt10(stl[wh]) || parseInt10(root.style[wh]))
	                - (parseInt10(stl[plt]) || 0)
	                - (parseInt10(stl[prb]) || 0)
	            ) | 0;
	        },

	        _pathToImage: function (id, path, width, height, dpr) {
	            var canvas = document.createElement('canvas');
	            var ctx = canvas.getContext('2d');

	            canvas.width = width * dpr;
	            canvas.height = height * dpr;

	            ctx.clearRect(0, 0, width * dpr, height * dpr);

	            var pathTransform = {
	                position: path.position,
	                rotation: path.rotation,
	                scale: path.scale
	            };
	            path.position = [0, 0, 0];
	            path.rotation = 0;
	            path.scale = [1, 1];
	            if (path) {
	                path.brush(ctx);
	            }

	            var ImageShape = __webpack_require__(300);
	            var imgShape = new ImageShape({
	                id: id,
	                style: {
	                    x: 0,
	                    y: 0,
	                    image: canvas
	                }
	            });

	            if (pathTransform.position != null) {
	                imgShape.position = path.position = pathTransform.position;
	            }

	            if (pathTransform.rotation != null) {
	                imgShape.rotation = path.rotation = pathTransform.rotation;
	            }

	            if (pathTransform.scale != null) {
	                imgShape.scale = path.scale = pathTransform.scale;
	            }

	            return imgShape;
	        },

	        _createPathToImage: function () {
	            var me = this;

	            return function (id, e, width, height) {
	                return me._pathToImage(
	                    id, e, width, height, me.dpr
	                );
	            };
	        }
	    };

	    module.exports = Painter;



/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */


	    var util = __webpack_require__(243);
	    var config = __webpack_require__(280);
	    var Style = __webpack_require__(286);
	    var Pattern = __webpack_require__(298);

	    function returnFalse() {
	        return false;
	    }

	    /**
	     * 创建dom
	     *
	     * @inner
	     * @param {string} id dom id 待用
	     * @param {string} type dom type，such as canvas, div etc.
	     * @param {Painter} painter painter instance
	     * @param {number} number
	     */
	    function createDom(id, type, painter, dpr) {
	        var newDom = document.createElement(type);
	        var width = painter.getWidth();
	        var height = painter.getHeight();

	        var newDomStyle = newDom.style;
	        // 没append呢，请原谅我这样写，清晰~
	        newDomStyle.position = 'absolute';
	        newDomStyle.left = 0;
	        newDomStyle.top = 0;
	        newDomStyle.width = width + 'px';
	        newDomStyle.height = height + 'px';
	        newDom.width = width * dpr;
	        newDom.height = height * dpr;

	        // id不作为索引用，避免可能造成的重名，定义为私有属性
	        newDom.setAttribute('data-zr-dom-id', id);
	        return newDom;
	    }

	    /**
	     * @alias module:zrender/Layer
	     * @constructor
	     * @extends module:zrender/mixin/Transformable
	     * @param {string} id
	     * @param {module:zrender/Painter} painter
	     * @param {number} [dpr]
	     */
	    var Layer = function(id, painter, dpr) {
	        var dom;
	        dpr = dpr || config.devicePixelRatio;
	        if (typeof id === 'string') {
	            dom = createDom(id, 'canvas', painter, dpr);
	        }
	        // Not using isDom because in node it will return false
	        else if (util.isObject(id)) {
	            dom = id;
	            id = dom.id;
	        }
	        this.id = id;
	        this.dom = dom;

	        var domStyle = dom.style;
	        if (domStyle) { // Not in node
	            dom.onselectstart = returnFalse; // 避免页面选中的尴尬
	            domStyle['-webkit-user-select'] = 'none';
	            domStyle['user-select'] = 'none';
	            domStyle['-webkit-touch-callout'] = 'none';
	            domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	            domStyle['padding'] = 0;
	            domStyle['margin'] = 0;
	            domStyle['border-width'] = 0;
	        }

	        this.domBack = null;
	        this.ctxBack = null;

	        this.painter = painter;

	        this.config = null;

	        // Configs
	        /**
	         * 每次清空画布的颜色
	         * @type {string}
	         * @default 0
	         */
	        this.clearColor = 0;
	        /**
	         * 是否开启动态模糊
	         * @type {boolean}
	         * @default false
	         */
	        this.motionBlur = false;
	        /**
	         * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	         * @type {number}
	         * @default 0.7
	         */
	        this.lastFrameAlpha = 0.7;

	        /**
	         * Layer dpr
	         * @type {number}
	         */
	        this.dpr = dpr;
	    };

	    Layer.prototype = {

	        constructor: Layer,

	        elCount: 0,

	        __dirty: true,

	        initContext: function () {
	            this.ctx = this.dom.getContext('2d');

	            this.ctx.dpr = this.dpr;
	        },

	        createBackBuffer: function () {
	            var dpr = this.dpr;

	            this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);
	            this.ctxBack = this.domBack.getContext('2d');

	            if (dpr != 1) {
	                this.ctxBack.scale(dpr, dpr);
	            }
	        },

	        /**
	         * @param  {number} width
	         * @param  {number} height
	         */
	        resize: function (width, height) {
	            var dpr = this.dpr;

	            var dom = this.dom;
	            var domStyle = dom.style;
	            var domBack = this.domBack;

	            domStyle.width = width + 'px';
	            domStyle.height = height + 'px';

	            dom.width = width * dpr;
	            dom.height = height * dpr;

	            if (domBack) {
	                domBack.width = width * dpr;
	                domBack.height = height * dpr;

	                if (dpr != 1) {
	                    this.ctxBack.scale(dpr, dpr);
	                }
	            }
	        },

	        /**
	         * 清空该层画布
	         * @param {boolean} clearAll Clear all with out motion blur
	         */
	        clear: function (clearAll) {
	            var dom = this.dom;
	            var ctx = this.ctx;
	            var width = dom.width;
	            var height = dom.height;

	            var clearColor = this.clearColor;
	            var haveMotionBLur = this.motionBlur && !clearAll;
	            var lastFrameAlpha = this.lastFrameAlpha;

	            var dpr = this.dpr;

	            if (haveMotionBLur) {
	                if (!this.domBack) {
	                    this.createBackBuffer();
	                }

	                this.ctxBack.globalCompositeOperation = 'copy';
	                this.ctxBack.drawImage(
	                    dom, 0, 0,
	                    width / dpr,
	                    height / dpr
	                );
	            }

	            ctx.clearRect(0, 0, width, height);
	            if (clearColor) {
	                var clearColorGradientOrPattern;
	                // Gradient
	                if (clearColor.colorStops) {
	                    // Cache canvas gradient
	                    clearColorGradientOrPattern = clearColor.__canvasGradient || Style.getGradient(ctx, clearColor, {
	                        x: 0,
	                        y: 0,
	                        width: width,
	                        height: height
	                    });

	                    clearColor.__canvasGradient = clearColorGradientOrPattern;
	                }
	                // Pattern
	                else if (clearColor.image) {
	                    clearColorGradientOrPattern = Pattern.prototype.getCanvasPattern.call(clearColor, ctx);
	                }
	                ctx.save();
	                ctx.fillStyle = clearColorGradientOrPattern || clearColor;
	                ctx.fillRect(0, 0, width, height);
	                ctx.restore();
	            }

	            if (haveMotionBLur) {
	                var domBack = this.domBack;
	                ctx.save();
	                ctx.globalAlpha = lastFrameAlpha;
	                ctx.drawImage(domBack, 0, 0, width, height);
	                ctx.restore();
	            }
	        }
	    };

	    module.exports = Layer;


/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	
	    var Gradient = __webpack_require__(318);
	    module.exports = function (ecModel) {
	        function encodeColor(seriesModel) {
	            var colorAccessPath = (seriesModel.visualColorAccessPath || 'itemStyle.normal.color').split('.');
	            var data = seriesModel.getData();
	            var color = seriesModel.get(colorAccessPath) // Set in itemStyle
	                || seriesModel.getColorFromPalette(seriesModel.get('name'));  // Default color

	            // FIXME Set color function or use the platte color
	            data.setVisual('color', color);

	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                if (typeof color === 'function' && !(color instanceof Gradient)) {
	                    data.each(function (idx) {
	                        data.setItemVisual(
	                            idx, 'color', color(seriesModel.getDataParams(idx))
	                        );
	                    });
	                }

	                // itemStyle in each data item
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var color = itemModel.get(colorAccessPath, true);
	                    if (color != null) {
	                        data.setItemVisual(idx, 'color', color);
	                    }
	                });
	            }
	        }
	        ecModel.eachRawSeries(encodeColor);
	    };


/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	// Compatitable with 2.0


	    var zrUtil = __webpack_require__(243);
	    var compatStyle = __webpack_require__(335);

	    function get(opt, path) {
	        path = path.split(',');
	        var obj = opt;
	        for (var i = 0; i < path.length; i++) {
	            obj = obj && obj[path[i]];
	            if (obj == null) {
	                break;
	            }
	        }
	        return obj;
	    }

	    function set(opt, path, val, overwrite) {
	        path = path.split(',');
	        var obj = opt;
	        var key;
	        for (var i = 0; i < path.length - 1; i++) {
	            key = path[i];
	            if (obj[key] == null) {
	                obj[key] = {};
	            }
	            obj = obj[key];
	        }
	        if (overwrite || obj[path[i]] == null) {
	            obj[path[i]] = val;
	        }
	    }

	    function compatLayoutProperties(option) {
	        each(LAYOUT_PROPERTIES, function (prop) {
	            if (prop[0] in option && !(prop[1] in option)) {
	                option[prop[1]] = option[prop[0]];
	            }
	        });
	    }

	    var LAYOUT_PROPERTIES = [
	        ['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']
	    ];

	    var COMPATITABLE_COMPONENTS = [
	        'grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'
	    ];

	    var COMPATITABLE_SERIES = [
	        'bar', 'boxplot', 'candlestick', 'chord', 'effectScatter',
	        'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel',
	        'pie', 'radar', 'sankey', 'scatter', 'treemap'
	    ];

	    var each = zrUtil.each;

	    module.exports = function (option) {
	        each(option.series, function (seriesOpt) {
	            if (!zrUtil.isObject(seriesOpt)) {
	                return;
	            }

	            var seriesType = seriesOpt.type;

	            compatStyle(seriesOpt);

	            if (seriesType === 'pie' || seriesType === 'gauge') {
	                if (seriesOpt.clockWise != null) {
	                    seriesOpt.clockwise = seriesOpt.clockWise;
	                }
	            }
	            if (seriesType === 'gauge') {
	                var pointerColor = get(seriesOpt, 'pointer.color');
	                pointerColor != null
	                    && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
	            }

	            for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {
	                if (COMPATITABLE_SERIES[i] === seriesOpt.type) {
	                    compatLayoutProperties(seriesOpt);
	                    break;
	                }
	            }
	        });

	        // dataRange has changed to visualMap
	        if (option.dataRange) {
	            option.visualMap = option.dataRange;
	        }

	        each(COMPATITABLE_COMPONENTS, function (componentName) {
	            var options = option[componentName];
	            if (options) {
	                if (!zrUtil.isArray(options)) {
	                    options = [options];
	                }
	                each(options, function (option) {
	                    compatLayoutProperties(option);
	                });
	            }
	        });
	    };


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    var POSSIBLE_STYLES = [
	        'areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle',
	        'chordStyle', 'label', 'labelLine'
	    ];

	    function compatItemStyle(opt) {
	        var itemStyleOpt = opt && opt.itemStyle;
	        if (itemStyleOpt) {
	            zrUtil.each(POSSIBLE_STYLES, function (styleName) {
	                var normalItemStyleOpt = itemStyleOpt.normal;
	                var emphasisItemStyleOpt = itemStyleOpt.emphasis;
	                if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
	                    opt[styleName] = opt[styleName] || {};
	                    if (!opt[styleName].normal) {
	                        opt[styleName].normal = normalItemStyleOpt[styleName];
	                    }
	                    else {
	                        zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
	                    }
	                    normalItemStyleOpt[styleName] = null;
	                }
	                if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
	                    opt[styleName] = opt[styleName] || {};
	                    if (!opt[styleName].emphasis) {
	                        opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
	                    }
	                    else {
	                        zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
	                    }
	                    emphasisItemStyleOpt[styleName] = null;
	                }
	            });
	        }
	    }

	    module.exports = function (seriesOpt) {
	        if (!seriesOpt) {
	            return;
	        }
	        compatItemStyle(seriesOpt);
	        compatItemStyle(seriesOpt.markPoint);
	        compatItemStyle(seriesOpt.markLine);
	        var data = seriesOpt.data;
	        if (data) {
	            for (var i = 0; i < data.length; i++) {
	                compatItemStyle(data[i]);
	            }
	            // mark point data
	            var markPoint = seriesOpt.markPoint;
	            if (markPoint && markPoint.data) {
	                var mpData = markPoint.data;
	                for (var i = 0; i < mpData.length; i++) {
	                    compatItemStyle(mpData[i]);
	                }
	            }
	            // mark line data
	            var markLine = seriesOpt.markLine;
	            if (markLine && markLine.data) {
	                var mlData = markLine.data;
	                for (var i = 0; i < mlData.length; i++) {
	                    if (zrUtil.isArray(mlData[i])) {
	                        compatItemStyle(mlData[i][0]);
	                        compatItemStyle(mlData[i][1]);
	                    }
	                    else {
	                        compatItemStyle(mlData[i]);
	                    }
	                }
	            }
	        }
	    };


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	

	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);
	    var PI = Math.PI;
	    /**
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {Object} [opts]
	     * @param {string} [opts.text]
	     * @param {string} [opts.color]
	     * @param {string} [opts.textColor]
	     * @return {module:zrender/Element}
	     */
	    module.exports = function (api, opts) {
	        opts = opts || {};
	        zrUtil.defaults(opts, {
	            text: 'loading',
	            color: '#c23531',
	            textColor: '#000',
	            maskColor: 'rgba(255, 255, 255, 0.8)',
	            zlevel: 0
	        });
	        var mask = new graphic.Rect({
	            style: {
	                fill: opts.maskColor
	            },
	            zlevel: opts.zlevel,
	            z: 10000
	        });
	        var arc = new graphic.Arc({
	            shape: {
	                startAngle: -PI / 2,
	                endAngle: -PI / 2 + 0.1,
	                r: 10
	            },
	            style: {
	                stroke: opts.color,
	                lineCap: 'round',
	                lineWidth: 5
	            },
	            zlevel: opts.zlevel,
	            z: 10001
	        });
	        var labelRect = new graphic.Rect({
	            style: {
	                fill: 'none',
	                text: opts.text,
	                textPosition: 'right',
	                textDistance: 10,
	                textFill: opts.textColor
	            },
	            zlevel: opts.zlevel,
	            z: 10001
	        });

	        arc.animateShape(true)
	            .when(1000, {
	                endAngle: PI * 3 / 2
	            })
	            .start('circularInOut');
	        arc.animateShape(true)
	            .when(1000, {
	                startAngle: PI * 3 / 2
	            })
	            .delay(300)
	            .start('circularInOut');

	        var group = new graphic.Group();
	        group.add(arc);
	        group.add(labelRect);
	        group.add(mask);
	        // Inject resize
	        group.resize = function () {
	            var cx = api.getWidth() / 2;
	            var cy = api.getHeight() / 2;
	            arc.setShape({
	                cx: cx,
	                cy: cy
	            });
	            var r = arc.shape.r;
	            labelRect.setShape({
	                x: cx - r,
	                y: cy - r,
	                width: r * 2,
	                height: r * 2
	            });

	            mask.setShape({
	                x: 0,
	                y: 0,
	                width: api.getWidth(),
	                height: api.getHeight()
	            });
	        };
	        group.resize();
	        return group;
	    };


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * List for data storage
	 * @module echarts/data/List
	 */


	    var UNDEFINED = 'undefined';
	    var globalObj = typeof window === 'undefined' ? global : window;
	    var Float64Array = typeof globalObj.Float64Array === UNDEFINED
	        ? Array : globalObj.Float64Array;
	    var Int32Array = typeof globalObj.Int32Array === UNDEFINED
	        ? Array : globalObj.Int32Array;

	    var dataCtors = {
	        'float': Float64Array,
	        'int': Int32Array,
	        // Ordinal data type can be string or int
	        'ordinal': Array,
	        'number': Array,
	        'time': Array
	    };

	    var Model = __webpack_require__(251);
	    var DataDiffer = __webpack_require__(338);

	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);
	    var isObject = zrUtil.isObject;

	    var TRANSFERABLE_PROPERTIES = [
	        'stackedOn', 'hasItemOption', '_nameList', '_idList', '_rawData'
	    ];

	    var transferProperties = function (a, b) {
	        zrUtil.each(TRANSFERABLE_PROPERTIES.concat(b.__wrappedMethods || []), function (propName) {
	            if (b.hasOwnProperty(propName)) {
	                a[propName] = b[propName];
	            }
	        });

	        a.__wrappedMethods = b.__wrappedMethods;
	    };

	    /**
	     * @constructor
	     * @alias module:echarts/data/List
	     *
	     * @param {Array.<string>} dimensions
	     *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
	     * @param {module:echarts/model/Model} hostModel
	     */
	    var List = function (dimensions, hostModel) {

	        dimensions = dimensions || ['x', 'y'];

	        var dimensionInfos = {};
	        var dimensionNames = [];
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimensionName;
	            var dimensionInfo = {};
	            if (typeof dimensions[i] === 'string') {
	                dimensionName = dimensions[i];
	                dimensionInfo = {
	                    name: dimensionName,
	                    stackable: false,
	                    // Type can be 'float', 'int', 'number'
	                    // Default is number, Precision of float may not enough
	                    type: 'number'
	                };
	            }
	            else {
	                dimensionInfo = dimensions[i];
	                dimensionName = dimensionInfo.name;
	                dimensionInfo.type = dimensionInfo.type || 'number';
	            }
	            dimensionNames.push(dimensionName);
	            dimensionInfos[dimensionName] = dimensionInfo;
	        }
	        /**
	         * @readOnly
	         * @type {Array.<string>}
	         */
	        this.dimensions = dimensionNames;

	        /**
	         * Infomation of each data dimension, like data type.
	         * @type {Object}
	         */
	        this._dimensionInfos = dimensionInfos;

	        /**
	         * @type {module:echarts/model/Model}
	         */
	        this.hostModel = hostModel;

	        /**
	         * @type {module:echarts/model/Model}
	         */
	        this.dataType;

	        /**
	         * Indices stores the indices of data subset after filtered.
	         * This data subset will be used in chart.
	         * @type {Array.<number>}
	         * @readOnly
	         */
	        this.indices = [];

	        /**
	         * Data storage
	         * @type {Object.<key, TypedArray|Array>}
	         * @private
	         */
	        this._storage = {};

	        /**
	         * @type {Array.<string>}
	         */
	        this._nameList = [];
	        /**
	         * @type {Array.<string>}
	         */
	        this._idList = [];
	        /**
	         * Models of data option is stored sparse for optimizing memory cost
	         * @type {Array.<module:echarts/model/Model>}
	         * @private
	         */
	        this._optionModels = [];

	        /**
	         * @param {module:echarts/data/List}
	         */
	        this.stackedOn = null;

	        /**
	         * Global visual properties after visual coding
	         * @type {Object}
	         * @private
	         */
	        this._visual = {};

	        /**
	         * Globel layout properties.
	         * @type {Object}
	         * @private
	         */
	        this._layout = {};

	        /**
	         * Item visual properties after visual coding
	         * @type {Array.<Object>}
	         * @private
	         */
	        this._itemVisuals = [];

	        /**
	         * Item layout properties after layout
	         * @type {Array.<Object>}
	         * @private
	         */
	        this._itemLayouts = [];

	        /**
	         * Graphic elemnents
	         * @type {Array.<module:zrender/Element>}
	         * @private
	         */
	        this._graphicEls = [];

	        /**
	         * @type {Array.<Array|Object>}
	         * @private
	         */
	        this._rawData;

	        /**
	         * @type {Object}
	         * @private
	         */
	        this._extent;
	    };

	    var listProto = List.prototype;

	    listProto.type = 'list';
	    /**
	     * If each data item has it's own option
	     * @type {boolean}
	     */
	    listProto.hasItemOption = true;

	    /**
	     * Get dimension name
	     * @param {string|number} dim
	     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	     * @return {string} Concrete dim name.
	     */
	    listProto.getDimension = function (dim) {
	        if (!isNaN(dim)) {
	            dim = this.dimensions[dim] || dim;
	        }
	        return dim;
	    };
	    /**
	     * Get type and stackable info of particular dimension
	     * @param {string|number} dim
	     *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	     *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	     */
	    listProto.getDimensionInfo = function (dim) {
	        return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);
	    };

	    /**
	     * Initialize from data
	     * @param {Array.<Object|number|Array>} data
	     * @param {Array.<string>} [nameList]
	     * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
	     */
	    listProto.initData = function (data, nameList, dimValueGetter) {
	        data = data || [];

	        if (__DEV__) {
	            if (!zrUtil.isArray(data)) {
	                throw new Error('Invalid data.');
	            }
	        }

	        this._rawData = data;

	        // Clear
	        var storage = this._storage = {};
	        var indices = this.indices = [];

	        var dimensions = this.dimensions;
	        var size = data.length;
	        var dimensionInfoMap = this._dimensionInfos;

	        var idList = [];
	        var nameRepeatCount = {};

	        nameList = nameList || [];

	        // Init storage
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimInfo = dimensionInfoMap[dimensions[i]];
	            var DataCtor = dataCtors[dimInfo.type];
	            storage[dimensions[i]] = new DataCtor(size);
	        }

	        var self = this;
	        if (!dimValueGetter) {
	            self.hasItemOption = false;
	        }
	        // Default dim value getter
	        dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {
	            var value = modelUtil.getDataItemValue(dataItem);
	            // If any dataItem is like { value: 10 }
	            if (modelUtil.isDataItemOption(dataItem)) {
	                self.hasItemOption = true;
	            }
	            return modelUtil.converDataValue(
	                (value instanceof Array)
	                    ? value[dimIndex]
	                    // If value is a single number or something else not array.
	                    : value,
	                dimensionInfoMap[dimName]
	            );
	        };

	        for (var idx = 0; idx < data.length; idx++) {
	            var dataItem = data[idx];
	            // Each data item is value
	            // [1, 2]
	            // 2
	            // Bar chart, line chart which uses category axis
	            // only gives the 'y' value. 'x' value is the indices of cateogry
	            // Use a tempValue to normalize the value to be a (x, y) value

	            // Store the data by dimensions
	            for (var k = 0; k < dimensions.length; k++) {
	                var dim = dimensions[k];
	                var dimStorage = storage[dim];
	                // PENDING NULL is empty or zero
	                dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);
	            }

	            indices.push(idx);
	        }

	        // Use the name in option and create id
	        for (var i = 0; i < data.length; i++) {
	            if (!nameList[i]) {
	                if (data[i] && data[i].name != null) {
	                    nameList[i] = data[i].name;
	                }
	            }
	            var name = nameList[i] || '';
	            // Try using the id in option
	            var id = data[i] && data[i].id;

	            if (!id && name) {
	                // Use name as id and add counter to avoid same name
	                nameRepeatCount[name] = nameRepeatCount[name] || 0;
	                id = name;
	                if (nameRepeatCount[name] > 0) {
	                    id += '__ec__' + nameRepeatCount[name];
	                }
	                nameRepeatCount[name]++;
	            }
	            id && (idList[i] = id);
	        }

	        this._nameList = nameList;
	        this._idList = idList;
	    };

	    /**
	     * @return {number}
	     */
	    listProto.count = function () {
	        return this.indices.length;
	    };

	    /**
	     * Get value. Return NaN if idx is out of range.
	     * @param {string} dim Dim must be concrete name.
	     * @param {number} idx
	     * @param {boolean} stack
	     * @return {number}
	     */
	    listProto.get = function (dim, idx, stack) {
	        var storage = this._storage;
	        var dataIndex = this.indices[idx];

	        // If value not exists
	        if (dataIndex == null) {
	            return NaN;
	        }

	        var value = storage[dim] && storage[dim][dataIndex];
	        // FIXME ordinal data type is not stackable
	        if (stack) {
	            var dimensionInfo = this._dimensionInfos[dim];
	            if (dimensionInfo && dimensionInfo.stackable) {
	                var stackedOn = this.stackedOn;
	                while (stackedOn) {
	                    // Get no stacked data of stacked on
	                    var stackedValue = stackedOn.get(dim, idx);
	                    // Considering positive stack, negative stack and empty data
	                    if ((value >= 0 && stackedValue > 0)  // Positive stack
	                        || (value <= 0 && stackedValue < 0) // Negative stack
	                    ) {
	                        value += stackedValue;
	                    }
	                    stackedOn = stackedOn.stackedOn;
	                }
	            }
	        }
	        return value;
	    };

	    /**
	     * Get value for multi dimensions.
	     * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
	     * @param {number} idx
	     * @param {boolean} stack
	     * @return {number}
	     */
	    listProto.getValues = function (dimensions, idx, stack) {
	        var values = [];

	        if (!zrUtil.isArray(dimensions)) {
	            stack = idx;
	            idx = dimensions;
	            dimensions = this.dimensions;
	        }

	        for (var i = 0, len = dimensions.length; i < len; i++) {
	            values.push(this.get(dimensions[i], idx, stack));
	        }

	        return values;
	    };

	    /**
	     * If value is NaN. Inlcuding '-'
	     * @param {string} dim
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.hasValue = function (idx) {
	        var dimensions = this.dimensions;
	        var dimensionInfos = this._dimensionInfos;
	        for (var i = 0, len = dimensions.length; i < len; i++) {
	            if (
	                // Ordinal type can be string or number
	                dimensionInfos[dimensions[i]].type !== 'ordinal'
	                && isNaN(this.get(dimensions[i], idx))
	            ) {
	                return false;
	            }
	        }
	        return true;
	    };

	    /**
	     * Get extent of data in one dimension
	     * @param {string} dim
	     * @param {boolean} stack
	     * @param {Function} filter
	     */
	    listProto.getDataExtent = function (dim, stack, filter) {
	        dim = this.getDimension(dim);
	        var dimData = this._storage[dim];
	        var dimInfo = this.getDimensionInfo(dim);
	        stack = (dimInfo && dimInfo.stackable) && stack;
	        var dimExtent = (this._extent || (this._extent = {}))[dim + (!!stack)];
	        var value;
	        if (dimExtent) {
	            return dimExtent;
	        }
	        // var dimInfo = this._dimensionInfos[dim];
	        if (dimData) {
	            var min = Infinity;
	            var max = -Infinity;
	            // var isOrdinal = dimInfo.type === 'ordinal';
	            for (var i = 0, len = this.count(); i < len; i++) {
	                value = this.get(dim, i, stack);
	                // FIXME
	                // if (isOrdinal && typeof value === 'string') {
	                //     value = zrUtil.indexOf(dimData, value);
	                // }
	                if (!filter || filter(value, dim, i)) {
	                    value < min && (min = value);
	                    value > max && (max = value);
	                }
	            }
	            return (this._extent[dim + !!stack] = [min, max]);
	        }
	        else {
	            return [Infinity, -Infinity];
	        }
	    };

	    /**
	     * Get sum of data in one dimension
	     * @param {string} dim
	     * @param {boolean} stack
	     */
	    listProto.getSum = function (dim, stack) {
	        var dimData = this._storage[dim];
	        var sum = 0;
	        if (dimData) {
	            for (var i = 0, len = this.count(); i < len; i++) {
	                var value = this.get(dim, i, stack);
	                if (!isNaN(value)) {
	                    sum += value;
	                }
	            }
	        }
	        return sum;
	    };

	    /**
	     * Retreive the index with given value
	     * @param {number} idx
	     * @param {number} value
	     * @return {number}
	     */
	    // FIXME Precision of float value
	    listProto.indexOf = function (dim, value) {
	        var storage = this._storage;
	        var dimData = storage[dim];
	        var indices = this.indices;

	        if (dimData) {
	            for (var i = 0, len = indices.length; i < len; i++) {
	                var rawIndex = indices[i];
	                if (dimData[rawIndex] === value) {
	                    return i;
	                }
	            }
	        }
	        return -1;
	    };

	    /**
	     * Retreive the index with given name
	     * @param {number} idx
	     * @param {number} name
	     * @return {number}
	     */
	    listProto.indexOfName = function (name) {
	        var indices = this.indices;
	        var nameList = this._nameList;

	        for (var i = 0, len = indices.length; i < len; i++) {
	            var rawIndex = indices[i];
	            if (nameList[rawIndex] === name) {
	                return i;
	            }
	        }

	        return -1;
	    };

	    /**
	     * Retreive the index with given raw data index
	     * @param {number} idx
	     * @param {number} name
	     * @return {number}
	     */
	    listProto.indexOfRawIndex = function (rawIndex) {
	        // Indices are ascending
	        var indices = this.indices;

	        // If rawIndex === dataIndex
	        var rawDataIndex = indices[rawIndex];
	        if (rawDataIndex != null && rawDataIndex === rawIndex) {
	            return rawIndex;
	        }

	        var left = 0;
	        var right = indices.length - 1;
	        while (left <= right) {
	            var mid = (left + right) / 2 | 0;
	            if (indices[mid] < rawIndex) {
	                left = mid + 1;
	            }
	            else if (indices[mid] > rawIndex) {
	                right = mid - 1;
	            }
	            else {
	                return mid;
	            }
	        }
	        return -1;
	    };

	    /**
	     * Retreive the index of nearest value
	     * @param {string} dim
	     * @param {number} value
	     * @param {boolean} stack If given value is after stacked
	     * @param {number} [maxDistance=Infinity]
	     * @return {number}
	     */
	    listProto.indexOfNearest = function (dim, value, stack, maxDistance) {
	        var storage = this._storage;
	        var dimData = storage[dim];

	        if (maxDistance == null) {
	            maxDistance = Infinity;
	        }

	        var nearestIdx = -1;
	        if (dimData) {
	            var minDist = Number.MAX_VALUE;
	            for (var i = 0, len = this.count(); i < len; i++) {
	                var diff = value - this.get(dim, i, stack);
	                var dist = Math.abs(diff);
	                if (
	                    diff <= maxDistance
	                    && (dist < minDist
	                        // For the case of two data are same on xAxis, which has sequence data.
	                        // Show the nearest index
	                        // https://github.com/ecomfe/echarts/issues/2869
	                        || (dist === minDist && diff > 0)
	                    )
	                ) {
	                    minDist = dist;
	                    nearestIdx = i;
	                }
	            }
	        }
	        return nearestIdx;
	    };

	    /**
	     * Get raw data index
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.getRawIndex = function (idx) {
	        var rawIdx = this.indices[idx];
	        return rawIdx == null ? -1 : rawIdx;
	    };

	    /**
	     * Get raw data item
	     * @param {number} idx
	     * @return {number}
	     */
	    listProto.getRawDataItem = function (idx) {
	        return this._rawData[this.getRawIndex(idx)];
	    };

	    /**
	     * @param {number} idx
	     * @param {boolean} [notDefaultIdx=false]
	     * @return {string}
	     */
	    listProto.getName = function (idx) {
	        return this._nameList[this.indices[idx]] || '';
	    };

	    /**
	     * @param {number} idx
	     * @param {boolean} [notDefaultIdx=false]
	     * @return {string}
	     */
	    listProto.getId = function (idx) {
	        return this._idList[this.indices[idx]] || (this.getRawIndex(idx) + '');
	    };


	    function normalizeDimensions(dimensions) {
	        if (!zrUtil.isArray(dimensions)) {
	            dimensions = [dimensions];
	        }
	        return dimensions;
	    }

	    /**
	     * Data iteration
	     * @param {string|Array.<string>}
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     *
	     * @example
	     *  list.each('x', function (x, idx) {});
	     *  list.each(['x', 'y'], function (x, y, idx) {});
	     *  list.each(function (idx) {})
	     */
	    listProto.each = function (dims, cb, stack, context) {
	        if (typeof dims === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dims;
	            dims = [];
	        }

	        dims = zrUtil.map(normalizeDimensions(dims), this.getDimension, this);

	        var value = [];
	        var dimSize = dims.length;
	        var indices = this.indices;

	        context = context || this;

	        for (var i = 0; i < indices.length; i++) {
	            // Simple optimization
	            switch (dimSize) {
	                case 0:
	                    cb.call(context, i);
	                    break;
	                case 1:
	                    cb.call(context, this.get(dims[0], i, stack), i);
	                    break;
	                case 2:
	                    cb.call(context, this.get(dims[0], i, stack), this.get(dims[1], i, stack), i);
	                    break;
	                default:
	                    for (var k = 0; k < dimSize; k++) {
	                        value[k] = this.get(dims[k], i, stack);
	                    }
	                    // Index
	                    value[k] = i;
	                    cb.apply(context, value);
	            }
	        }
	    };

	    /**
	     * Data filter
	     * @param {string|Array.<string>}
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     */
	    listProto.filterSelf = function (dimensions, cb, stack, context) {
	        if (typeof dimensions === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dimensions;
	            dimensions = [];
	        }

	        dimensions = zrUtil.map(
	            normalizeDimensions(dimensions), this.getDimension, this
	        );

	        var newIndices = [];
	        var value = [];
	        var dimSize = dimensions.length;
	        var indices = this.indices;

	        context = context || this;

	        for (var i = 0; i < indices.length; i++) {
	            var keep;
	            // Simple optimization
	            if (dimSize === 1) {
	                keep = cb.call(
	                    context, this.get(dimensions[0], i, stack), i
	                );
	            }
	            else {
	                for (var k = 0; k < dimSize; k++) {
	                    value[k] = this.get(dimensions[k], i, stack);
	                }
	                value[k] = i;
	                keep = cb.apply(context, value);
	            }
	            if (keep) {
	                newIndices.push(indices[i]);
	            }
	        }

	        this.indices = newIndices;

	        // Reset data extent
	        this._extent = {};

	        return this;
	    };

	    /**
	     * Data mapping to a plain array
	     * @param {string|Array.<string>} [dimensions]
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     * @return {Array}
	     */
	    listProto.mapArray = function (dimensions, cb, stack, context) {
	        if (typeof dimensions === 'function') {
	            context = stack;
	            stack = cb;
	            cb = dimensions;
	            dimensions = [];
	        }

	        var result = [];
	        this.each(dimensions, function () {
	            result.push(cb && cb.apply(this, arguments));
	        }, stack, context);
	        return result;
	    };

	    function cloneListForMapAndSample(original, excludeDimensions) {
	        var allDimensions = original.dimensions;
	        var list = new List(
	            zrUtil.map(allDimensions, original.getDimensionInfo, original),
	            original.hostModel
	        );
	        // FIXME If needs stackedOn, value may already been stacked
	        transferProperties(list, original);

	        var storage = list._storage = {};
	        var originalStorage = original._storage;
	        // Init storage
	        for (var i = 0; i < allDimensions.length; i++) {
	            var dim = allDimensions[i];
	            var dimStore = originalStorage[dim];
	            if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
	                storage[dim] = new dimStore.constructor(
	                    originalStorage[dim].length
	                );
	            }
	            else {
	                // Direct reference for other dimensions
	                storage[dim] = originalStorage[dim];
	            }
	        }
	        return list;
	    }

	    /**
	     * Data mapping to a new List with given dimensions
	     * @param {string|Array.<string>} dimensions
	     * @param {Function} cb
	     * @param {boolean} [stack=false]
	     * @param {*} [context=this]
	     * @return {Array}
	     */
	    listProto.map = function (dimensions, cb, stack, context) {
	        dimensions = zrUtil.map(
	            normalizeDimensions(dimensions), this.getDimension, this
	        );

	        var list = cloneListForMapAndSample(this, dimensions);
	        // Following properties are all immutable.
	        // So we can reference to the same value
	        var indices = list.indices = this.indices;

	        var storage = list._storage;

	        var tmpRetValue = [];
	        this.each(dimensions, function () {
	            var idx = arguments[arguments.length - 1];
	            var retValue = cb && cb.apply(this, arguments);
	            if (retValue != null) {
	                // a number
	                if (typeof retValue === 'number') {
	                    tmpRetValue[0] = retValue;
	                    retValue = tmpRetValue;
	                }
	                for (var i = 0; i < retValue.length; i++) {
	                    var dim = dimensions[i];
	                    var dimStore = storage[dim];
	                    var rawIdx = indices[idx];
	                    if (dimStore) {
	                        dimStore[rawIdx] = retValue[i];
	                    }
	                }
	            }
	        }, stack, context);

	        return list;
	    };

	    /**
	     * Large data down sampling on given dimension
	     * @param {string} dimension
	     * @param {number} rate
	     * @param {Function} sampleValue
	     * @param {Function} sampleIndex Sample index for name and id
	     */
	    listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
	        var list = cloneListForMapAndSample(this, [dimension]);
	        var storage = this._storage;
	        var targetStorage = list._storage;

	        var originalIndices = this.indices;
	        var indices = list.indices = [];

	        var frameValues = [];
	        var frameIndices = [];
	        var frameSize = Math.floor(1 / rate);

	        var dimStore = targetStorage[dimension];
	        var len = this.count();
	        // Copy data from original data
	        for (var i = 0; i < storage[dimension].length; i++) {
	            targetStorage[dimension][i] = storage[dimension][i];
	        }
	        for (var i = 0; i < len; i += frameSize) {
	            // Last frame
	            if (frameSize > len - i) {
	                frameSize = len - i;
	                frameValues.length = frameSize;
	            }
	            for (var k = 0; k < frameSize; k++) {
	                var idx = originalIndices[i + k];
	                frameValues[k] = dimStore[idx];
	                frameIndices[k] = idx;
	            }
	            var value = sampleValue(frameValues);
	            var idx = frameIndices[sampleIndex(frameValues, value) || 0];
	            // Only write value on the filtered data
	            dimStore[idx] = value;
	            indices.push(idx);
	        }

	        return list;
	    };

	    /**
	     * Get model of one data item.
	     *
	     * @param {number} idx
	     */
	    // FIXME Model proxy ?
	    listProto.getItemModel = function (idx) {
	        var hostModel = this.hostModel;
	        idx = this.indices[idx];
	        return new Model(this._rawData[idx], hostModel, hostModel && hostModel.ecModel);
	    };

	    /**
	     * Create a data differ
	     * @param {module:echarts/data/List} otherList
	     * @return {module:echarts/data/DataDiffer}
	     */
	    listProto.diff = function (otherList) {
	        var idList = this._idList;
	        var otherIdList = otherList && otherList._idList;
	        var val;
	        // Use prefix to avoid index to be the same as otherIdList[idx],
	        // which will cause weird udpate animation.
	        var prefix = 'e\0\0';

	        return new DataDiffer(
	            otherList ? otherList.indices : [],
	            this.indices,
	            function (idx) {
	                return (val = otherIdList[idx]) != null ? val : prefix + idx;
	            },
	            function (idx) {
	                return (val = idList[idx]) != null ? val : prefix + idx;
	            }
	        );
	    };
	    /**
	     * Get visual property.
	     * @param {string} key
	     */
	    listProto.getVisual = function (key) {
	        var visual = this._visual;
	        return visual && visual[key];
	    };

	    /**
	     * Set visual property
	     * @param {string|Object} key
	     * @param {*} [value]
	     *
	     * @example
	     *  setVisual('color', color);
	     *  setVisual({
	     *      'color': color
	     *  });
	     */
	    listProto.setVisual = function (key, val) {
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.setVisual(name, key[name]);
	                }
	            }
	            return;
	        }
	        this._visual = this._visual || {};
	        this._visual[key] = val;
	    };

	    /**
	     * Set layout property.
	     * @param {string} key
	     * @param {*} [val]
	     */
	    listProto.setLayout = function (key, val) {
	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.setLayout(name, key[name]);
	                }
	            }
	            return;
	        }
	        this._layout[key] = val;
	    };

	    /**
	     * Get layout property.
	     * @param  {string} key.
	     * @return {*}
	     */
	    listProto.getLayout = function (key) {
	        return this._layout[key];
	    };

	    /**
	     * Get layout of single data item
	     * @param {number} idx
	     */
	    listProto.getItemLayout = function (idx) {
	        return this._itemLayouts[idx];
	    };

	    /**
	     * Set layout of single data item
	     * @param {number} idx
	     * @param {Object} layout
	     * @param {boolean=} [merge=false]
	     */
	    listProto.setItemLayout = function (idx, layout, merge) {
	        this._itemLayouts[idx] = merge
	            ? zrUtil.extend(this._itemLayouts[idx] || {}, layout)
	            : layout;
	    };

	    /**
	     * Clear all layout of single data item
	     */
	    listProto.clearItemLayouts = function () {
	        this._itemLayouts.length = 0;
	    };

	    /**
	     * Get visual property of single data item
	     * @param {number} idx
	     * @param {string} key
	     * @param {boolean} ignoreParent
	     */
	    listProto.getItemVisual = function (idx, key, ignoreParent) {
	        var itemVisual = this._itemVisuals[idx];
	        var val = itemVisual && itemVisual[key];
	        if (val == null && !ignoreParent) {
	            // Use global visual property
	            return this.getVisual(key);
	        }
	        return val;
	    };

	    /**
	     * Set visual property of single data item
	     *
	     * @param {number} idx
	     * @param {string|Object} key
	     * @param {*} [value]
	     *
	     * @example
	     *  setItemVisual(0, 'color', color);
	     *  setItemVisual(0, {
	     *      'color': color
	     *  });
	     */
	    listProto.setItemVisual = function (idx, key, value) {
	        var itemVisual = this._itemVisuals[idx] || {};
	        this._itemVisuals[idx] = itemVisual;

	        if (isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    itemVisual[name] = key[name];
	                }
	            }
	            return;
	        }
	        itemVisual[key] = value;
	    };

	    /**
	     * Clear itemVisuals and list visual.
	     */
	    listProto.clearAllVisual = function () {
	        this._visual = {};
	        this._itemVisuals = [];
	    };

	    var setItemDataAndSeriesIndex = function (child) {
	        child.seriesIndex = this.seriesIndex;
	        child.dataIndex = this.dataIndex;
	        child.dataType = this.dataType;
	    };
	    /**
	     * Set graphic element relative to data. It can be set as null
	     * @param {number} idx
	     * @param {module:zrender/Element} [el]
	     */
	    listProto.setItemGraphicEl = function (idx, el) {
	        var hostModel = this.hostModel;

	        if (el) {
	            // Add data index and series index for indexing the data by element
	            // Useful in tooltip
	            el.dataIndex = idx;
	            el.dataType = this.dataType;
	            el.seriesIndex = hostModel && hostModel.seriesIndex;
	            if (el.type === 'group') {
	                el.traverse(setItemDataAndSeriesIndex, el);
	            }
	        }

	        this._graphicEls[idx] = el;
	    };

	    /**
	     * @param {number} idx
	     * @return {module:zrender/Element}
	     */
	    listProto.getItemGraphicEl = function (idx) {
	        return this._graphicEls[idx];
	    };

	    /**
	     * @param {Function} cb
	     * @param {*} context
	     */
	    listProto.eachItemGraphicEl = function (cb, context) {
	        zrUtil.each(this._graphicEls, function (el, idx) {
	            if (el) {
	                cb && cb.call(context, el, idx);
	            }
	        });
	    };

	    /**
	     * Shallow clone a new list except visual and layout properties, and graph elements.
	     * New list only change the indices.
	     */
	    listProto.cloneShallow = function () {
	        var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
	        var list = new List(dimensionInfoList, this.hostModel);

	        // FIXME
	        list._storage = this._storage;

	        transferProperties(list, this);


	        // Clone will not change the data extent and indices
	        list.indices = this.indices.slice();

	        if (this._extent) {
	            list._extent = zrUtil.extend({}, this._extent);
	        }

	        return list;
	    };

	    /**
	     * Wrap some method to add more feature
	     * @param {string} methodName
	     * @param {Function} injectFunction
	     */
	    listProto.wrapMethod = function (methodName, injectFunction) {
	        var originalMethod = this[methodName];
	        if (typeof originalMethod !== 'function') {
	            return;
	        }
	        this.__wrappedMethods = this.__wrappedMethods || [];
	        this.__wrappedMethods.push(methodName);
	        this[methodName] = function () {
	            var res = originalMethod.apply(this, arguments);
	            return injectFunction.apply(this, [res].concat(zrUtil.slice(arguments)));
	        };
	    };

	    // Methods that create a new list based on this list should be listed here.
	    // Notice that those method should `RETURN` the new list.
	    listProto.TRANSFERABLE_METHODS = ['cloneShallow', 'downSample', 'map'];
	    // Methods that change indices of this list should be listed here.
	    listProto.CHANGABLE_METHODS = ['filterSelf'];

	    module.exports = List;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 338 */
/***/ function(module, exports) {

	'use strict';


	    function defaultKeyGetter(item) {
	        return item;
	    }

	    function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {
	        this._old = oldArr;
	        this._new = newArr;

	        this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
	        this._newKeyGetter = newKeyGetter || defaultKeyGetter;
	    }

	    DataDiffer.prototype = {

	        constructor: DataDiffer,

	        /**
	         * Callback function when add a data
	         */
	        add: function (func) {
	            this._add = func;
	            return this;
	        },

	        /**
	         * Callback function when update a data
	         */
	        update: function (func) {
	            this._update = func;
	            return this;
	        },

	        /**
	         * Callback function when remove a data
	         */
	        remove: function (func) {
	            this._remove = func;
	            return this;
	        },

	        execute: function () {
	            var oldArr = this._old;
	            var newArr = this._new;
	            var oldKeyGetter = this._oldKeyGetter;
	            var newKeyGetter = this._newKeyGetter;

	            var oldDataIndexMap = {};
	            var newDataIndexMap = {};
	            var oldDataKeyArr = [];
	            var newDataKeyArr = [];
	            var i;

	            initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, oldKeyGetter);
	            initIndexMap(newArr, newDataIndexMap, newDataKeyArr, newKeyGetter);

	            // Travel by inverted order to make sure order consistency
	            // when duplicate keys exists (consider newDataIndex.pop() below).
	            // For performance consideration, these code below do not look neat.
	            for (i = 0; i < oldArr.length; i++) {
	                var key = oldDataKeyArr[i];
	                var idx = newDataIndexMap[key];

	                // idx can never be empty array here. see 'set null' logic below.
	                if (idx != null) {
	                    // Consider there is duplicate key (for example, use dataItem.name as key).
	                    // We should make sure every item in newArr and oldArr can be visited.
	                    var len = idx.length;
	                    if (len) {
	                        len === 1 && (newDataIndexMap[key] = null);
	                        idx = idx.unshift();
	                    }
	                    else {
	                        newDataIndexMap[key] = null;
	                    }
	                    this._update && this._update(idx, i);
	                }
	                else {
	                    this._remove && this._remove(i);
	                }
	            }

	            for (var i = 0; i < newDataKeyArr.length; i++) {
	                var key = newDataKeyArr[i];
	                if (newDataIndexMap.hasOwnProperty(key)) {
	                    var idx = newDataIndexMap[key];
	                    if (idx == null) {
	                        continue;
	                    }
	                    // idx can never be empty array here. see 'set null' logic above.
	                    if (!idx.length) {
	                        this._add && this._add(idx);
	                    }
	                    else {
	                        for (var j = 0, len = idx.length; j < len; j++) {
	                            this._add && this._add(idx[j]);
	                        }
	                    }
	                }
	            }
	        }
	    };

	    function initIndexMap(arr, map, keyArr, keyGetter) {
	        for (var i = 0; i < arr.length; i++) {
	            var key = keyGetter(arr[i], i);
	            var existence = map[key];
	            if (existence == null) {
	                keyArr.push(key);
	                map[key] = i;
	            }
	            else {
	                if (!existence.length) {
	                    map[key] = existence = [existence];
	                }
	                existence.push(i);
	            }
	        }
	    }

	    module.exports = DataDiffer;


/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var echarts = __webpack_require__(240);
	    var PRIORITY = echarts.PRIORITY;

	    __webpack_require__(340);
	    __webpack_require__(343);

	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(349), 'line', 'circle', 'line'
	    ));
	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(350), 'line'
	    ));

	    // Down sample after filter
	    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, zrUtil.curry(
	        __webpack_require__(351), 'line'
	    ));

	    // In case developer forget to include grid component
	    __webpack_require__(352);


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var createListFromArray = __webpack_require__(341);
	    var SeriesModel = __webpack_require__(267);

	    module.exports = SeriesModel.extend({

	        type: 'series.line',

	        dependencies: ['grid', 'polar'],

	        getInitialData: function (option, ecModel) {
	            if (__DEV__) {
	                var coordSys = option.coordinateSystem;
	                if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {
	                    throw new Error('Line not support coordinateSystem besides cartesian and polar');
	                }
	            }
	            return createListFromArray(option.data, this, ecModel);
	        },

	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,

	            hoverAnimation: true,
	            // stack: null
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,

	            // polarIndex: 0,

	            // If clip the overflow value
	            clipOverflow: true,

	            label: {
	                normal: {
	                    position: 'top'
	                }
	            },
	            // itemStyle: {
	            //     normal: {},
	            //     emphasis: {}
	            // },
	            lineStyle: {
	                normal: {
	                    width: 2,
	                    type: 'solid'
	                }
	            },
	            // areaStyle: {},
	            // false, 'start', 'end', 'middle'
	            step: false,

	            // Disabled if step is true
	            smooth: false,
	            smoothMonotone: null,
	            // 拐点图形类型
	            symbol: 'emptyCircle',
	            // 拐点图形大小
	            symbolSize: 4,
	            // 拐点图形旋转控制
	            symbolRotate: null,

	            // 是否显示 symbol, 只有在 tooltip hover 的时候显示
	            showSymbol: true,
	            // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
	            showAllSymbol: false,

	            // 是否连接断点
	            connectNulls: false,

	            // 数据过滤，'average', 'max', 'min', 'sum'
	            sampling: 'none',

	            animationEasing: 'linear',

	            // Disable progressive
	            progressive: 0,
	            hoverLayerThreshold: Infinity
	        }
	    });


/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var List = __webpack_require__(337);
	    var completeDimensions = __webpack_require__(342);
	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);
	    var CoordinateSystem = __webpack_require__(265);
	    var getDataItemValue = modelUtil.getDataItemValue;
	    var converDataValue = modelUtil.converDataValue;

	    function firstDataNotNull(data) {
	        var i = 0;
	        while (i < data.length && data[i] == null) {
	            i++;
	        }
	        return data[i];
	    }
	    function ifNeedCompleteOrdinalData(data) {
	        var sampleItem = firstDataNotNull(data);
	        return sampleItem != null
	            && !zrUtil.isArray(getDataItemValue(sampleItem));
	    }

	    /**
	     * Helper function to create a list from option data
	     */
	    function createListFromArray(data, seriesModel, ecModel) {
	        // If data is undefined
	        data = data || [];

	        if (__DEV__) {
	            if (!zrUtil.isArray(data)) {
	                throw new Error('Invalid data.');
	            }
	        }

	        var coordSysName = seriesModel.get('coordinateSystem');
	        var creator = creators[coordSysName];
	        var registeredCoordSys = CoordinateSystem.get(coordSysName);
	        // FIXME
	        var axesInfo = creator && creator(data, seriesModel, ecModel);
	        var dimensions = axesInfo && axesInfo.dimensions;
	        if (!dimensions) {
	            // Get dimensions from registered coordinate system
	            dimensions = (registeredCoordSys && registeredCoordSys.dimensions) || ['x', 'y'];
	            dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));
	        }
	        var categoryIndex = axesInfo ? axesInfo.categoryIndex : -1;

	        var list = new List(dimensions, seriesModel);

	        var nameList = createNameList(axesInfo, data);

	        var categories = {};
	        var dimValueGetter = (categoryIndex >= 0 && ifNeedCompleteOrdinalData(data))
	            ? function (itemOpt, dimName, dataIndex, dimIndex) {
	                // If any dataItem is like { value: 10 }
	                if (modelUtil.isDataItemOption(itemOpt)) {
	                    list.hasItemOption = true;
	                }

	                // Use dataIndex as ordinal value in categoryAxis
	                return dimIndex === categoryIndex
	                    ? dataIndex
	                    : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);
	            }
	            : function (itemOpt, dimName, dataIndex, dimIndex) {
	                var value = getDataItemValue(itemOpt);
	                var val = converDataValue(value && value[dimIndex], dimensions[dimIndex]);
	                // If any dataItem is like { value: 10 }
	                if (modelUtil.isDataItemOption(itemOpt)) {
	                    list.hasItemOption = true;
	                }

	                var categoryAxesModels = axesInfo && axesInfo.categoryAxesModels;
	                if (categoryAxesModels && categoryAxesModels[dimName]) {
	                    // If given value is a category string
	                    if (typeof val === 'string') {
	                        // Lazy get categories
	                        categories[dimName] = categories[dimName]
	                            || categoryAxesModels[dimName].getCategories();
	                        val = zrUtil.indexOf(categories[dimName], val);
	                        if (val < 0 && !isNaN(val)) {
	                            // In case some one write '1', '2' istead of 1, 2
	                            val = +val;
	                        }
	                    }
	                }
	                return val;
	            };

	        list.hasItemOption = false;
	        list.initData(data, nameList, dimValueGetter);

	        return list;
	    }

	    function isStackable(axisType) {
	        return axisType !== 'category' && axisType !== 'time';
	    }

	    function getDimTypeByAxis(axisType) {
	        return axisType === 'category'
	            ? 'ordinal'
	            : axisType === 'time'
	            ? 'time'
	            : 'float';
	    }

	    /**
	     * Creaters for each coord system.
	     */
	    var creators = {

	        cartesian2d: function (data, seriesModel, ecModel) {

	            var axesModels = zrUtil.map(['xAxis', 'yAxis'], function (name) {
	                return ecModel.queryComponents({
	                    mainType: name,
	                    index: seriesModel.get(name + 'Index'),
	                    id: seriesModel.get(name + 'Id')
	                })[0];
	            });
	            var xAxisModel = axesModels[0];
	            var yAxisModel = axesModels[1];

	            if (__DEV__) {
	                if (!xAxisModel) {
	                    throw new Error('xAxis "' + zrUtil.retrieve(
	                        seriesModel.get('xAxisIndex'),
	                        seriesModel.get('xAxisId'),
	                        0
	                    ) + '" not found');
	                }
	                if (!yAxisModel) {
	                    throw new Error('yAxis "' + zrUtil.retrieve(
	                        seriesModel.get('xAxisIndex'),
	                        seriesModel.get('yAxisId'),
	                        0
	                    ) + '" not found');
	                }
	            }

	            var xAxisType = xAxisModel.get('type');
	            var yAxisType = yAxisModel.get('type');

	            var dimensions = [
	                {
	                    name: 'x',
	                    type: getDimTypeByAxis(xAxisType),
	                    stackable: isStackable(xAxisType)
	                },
	                {
	                    name: 'y',
	                    // If two category axes
	                    type: getDimTypeByAxis(yAxisType),
	                    stackable: isStackable(yAxisType)
	                }
	            ];

	            var isXAxisCateogry = xAxisType === 'category';
	            var isYAxisCategory = yAxisType === 'category';

	            completeDimensions(dimensions, data, ['x', 'y', 'z']);

	            var categoryAxesModels = {};
	            if (isXAxisCateogry) {
	                categoryAxesModels.x = xAxisModel;
	            }
	            if (isYAxisCategory) {
	                categoryAxesModels.y = yAxisModel;
	            }
	            return {
	                dimensions: dimensions,
	                categoryIndex: isXAxisCateogry ? 0 : (isYAxisCategory ? 1 : -1),
	                categoryAxesModels: categoryAxesModels
	            };
	        },

	        singleAxis: function (data, seriesModel, ecModel) {

	            var singleAxisModel = ecModel.queryComponents({
	                mainType: 'singleAxis',
	                index: seriesModel.get('singleAxisIndex'),
	                id: seriesModel.get('singleAxisId')
	            })[0];

	            if (__DEV__) {
	                if (!singleAxisModel) {
	                    throw new Error('singleAxis should be specified.');
	                }
	            }

	            var singleAxisType = singleAxisModel.get('type');
	            var isCategory = singleAxisType === 'category';

	            var dimensions = [{
	                name: 'single',
	                type: getDimTypeByAxis(singleAxisType),
	                stackable: isStackable(singleAxisType)
	            }];

	            completeDimensions(dimensions, data);

	            var categoryAxesModels = {};
	            if (isCategory) {
	                categoryAxesModels.single = singleAxisModel;
	            }

	            return {
	                dimensions: dimensions,
	                categoryIndex: isCategory ? 0 : -1,
	                categoryAxesModels: categoryAxesModels
	            };
	        },

	        polar: function (data, seriesModel, ecModel) {
	            var polarModel = ecModel.queryComponents({
	                mainType: 'polar',
	                index: seriesModel.get('polarIndex'),
	                id: seriesModel.get('polarId')
	            })[0];

	            var angleAxisModel = polarModel.findAxisModel('angleAxis');
	            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');

	            if (__DEV__) {
	                if (!angleAxisModel) {
	                    throw new Error('angleAxis option not found');
	                }
	                if (!radiusAxisModel) {
	                    throw new Error('radiusAxis option not found');
	                }
	            }

	            var radiusAxisType = radiusAxisModel.get('type');
	            var angleAxisType = angleAxisModel.get('type');

	            var dimensions = [
	                {
	                    name: 'radius',
	                    type: getDimTypeByAxis(radiusAxisType),
	                    stackable: isStackable(radiusAxisType)
	                },
	                {
	                    name: 'angle',
	                    type: getDimTypeByAxis(angleAxisType),
	                    stackable: isStackable(angleAxisType)
	                }
	            ];
	            var isAngleAxisCateogry = angleAxisType === 'category';
	            var isRadiusAxisCateogry = radiusAxisType === 'category';

	            completeDimensions(dimensions, data, ['radius', 'angle', 'value']);

	            var categoryAxesModels = {};
	            if (isRadiusAxisCateogry) {
	                categoryAxesModels.radius = radiusAxisModel;
	            }
	            if (isAngleAxisCateogry) {
	                categoryAxesModels.angle = angleAxisModel;
	            }
	            return {
	                dimensions: dimensions,
	                categoryIndex: isAngleAxisCateogry ? 1 : (isRadiusAxisCateogry ? 0 : -1),
	                categoryAxesModels: categoryAxesModels
	            };
	        },

	        geo: function (data, seriesModel, ecModel) {
	            // TODO Region
	            // 多个散点图系列在同一个地区的时候
	            return {
	                dimensions: completeDimensions([
	                    {name: 'lng'},
	                    {name: 'lat'}
	                ], data, ['lng', 'lat', 'value'])
	            };
	        }
	    };

	    function createNameList(result, data) {
	        var nameList = [];

	        var categoryDim = result && result.dimensions[result.categoryIndex];
	        var categoryAxisModel;
	        if (categoryDim) {
	            categoryAxisModel = result.categoryAxesModels[categoryDim.name];
	        }

	        if (categoryAxisModel) {
	            // FIXME Two category axis
	            var categories = categoryAxisModel.getCategories();
	            if (categories) {
	                var dataLen = data.length;
	                // Ordered data is given explicitly like
	                // [[3, 0.2], [1, 0.3], [2, 0.15]]
	                // or given scatter data,
	                // pick the category
	                if (zrUtil.isArray(data[0]) && data[0].length > 1) {
	                    nameList = [];
	                    for (var i = 0; i < dataLen; i++) {
	                        nameList[i] = categories[data[i][result.categoryIndex || 0]];
	                    }
	                }
	                else {
	                    nameList = categories.slice(0);
	                }
	            }
	        }

	        return nameList;
	    }

	    module.exports = createListFromArray;



/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Complete dimensions by data (guess dimension).
	 */


	    var zrUtil = __webpack_require__(243);

	    /**
	     * Complete the dimensions array guessed from the data structure.
	     * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']
	     * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]
	     * @param  {Array.<string>} [defaultNames]    Default names to fill not necessary dimensions, like ['value']
	     * @param  {string} [extraPrefix]             Prefix of name when filling the left dimensions.
	     * @return {Array.<string>}
	     */
	    function completeDimensions(dimensions, data, defaultNames, extraPrefix) {
	        if (!data) {
	            return dimensions;
	        }

	        var value0 = retrieveValue(data[0]);
	        var dimSize = zrUtil.isArray(value0) && value0.length || 1;

	        defaultNames = defaultNames || [];
	        extraPrefix = extraPrefix || 'extra';
	        for (var i = 0; i < dimSize; i++) {
	            if (!dimensions[i]) {
	                var name = defaultNames[i] || (extraPrefix + (i - defaultNames.length));
	                dimensions[i] = guessOrdinal(data, i)
	                    ? {type: 'ordinal', name: name}
	                    : name;
	            }
	        }

	        return dimensions;
	    }

	    // The rule should not be complex, otherwise user might not
	    // be able to known where the data is wrong.
	    var guessOrdinal = completeDimensions.guessOrdinal = function (data, dimIndex) {
	        for (var i = 0, len = data.length; i < len; i++) {
	            var value = retrieveValue(data[i]);

	            if (!zrUtil.isArray(value)) {
	                return false;
	            }

	            var value = value[dimIndex];
	            if (value != null && isFinite(value)) {
	                return false;
	            }
	            else if (zrUtil.isString(value) && value !== '-') {
	                return true;
	            }
	        }
	        return false;
	    };

	    function retrieveValue(o) {
	        return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value: o;
	    }

	    module.exports = completeDimensions;



/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// FIXME step not support polar


	    var zrUtil = __webpack_require__(243);
	    var SymbolDraw = __webpack_require__(344);
	    var Symbol = __webpack_require__(345);
	    var lineAnimationDiff = __webpack_require__(347);
	    var graphic = __webpack_require__(282);
	    var modelUtil = __webpack_require__(244);
	    var polyHelper = __webpack_require__(348);
	    var ChartView = __webpack_require__(281);

	    function isPointsSame(points1, points2) {
	        if (points1.length !== points2.length) {
	            return;
	        }
	        for (var i = 0; i < points1.length; i++) {
	            var p1 = points1[i];
	            var p2 = points2[i];
	            if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
	                return;
	            }
	        }
	        return true;
	    }

	    function getSmooth(smooth) {
	        return typeof (smooth) === 'number' ? smooth : (smooth ? 0.3 : 0);
	    }

	    function getAxisExtentWithGap(axis) {
	        var extent = axis.getGlobalExtent();
	        if (axis.onBand) {
	            // Remove extra 1px to avoid line miter in clipped edge
	            var halfBandWidth = axis.getBandWidth() / 2 - 1;
	            var dir = extent[1] > extent[0] ? 1 : -1;
	            extent[0] += dir * halfBandWidth;
	            extent[1] -= dir * halfBandWidth;
	        }
	        return extent;
	    }

	    function sign(val) {
	        return val >= 0 ? 1 : -1;
	    }
	    /**
	     * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys
	     * @param {module:echarts/data/List} data
	     * @param {Array.<Array.<number>>} points
	     * @private
	     */
	    function getStackedOnPoints(coordSys, data) {
	        var baseAxis = coordSys.getBaseAxis();
	        var valueAxis = coordSys.getOtherAxis(baseAxis);
	        var valueStart = baseAxis.onZero
	            ? 0 : valueAxis.scale.getExtent()[0];

	        var valueDim = valueAxis.dim;

	        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;

	        return data.mapArray([valueDim], function (val, idx) {
	            var stackedOnSameSign;
	            var stackedOn = data.stackedOn;
	            // Find first stacked value with same sign
	            while (stackedOn &&
	                sign(stackedOn.get(valueDim, idx)) === sign(val)
	            ) {
	                stackedOnSameSign = stackedOn;
	                break;
	            }
	            var stackedData = [];
	            stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	            stackedData[1 - baseDataOffset] = stackedOnSameSign
	                ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;

	            return coordSys.dataToPoint(stackedData);
	        }, true);
	    }

	    function createGridClipShape(cartesian, hasAnimation, seriesModel) {
	        var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));
	        var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));
	        var isHorizontal = cartesian.getBaseAxis().isHorizontal();

	        var x = Math.min(xExtent[0], xExtent[1]);
	        var y = Math.min(yExtent[0], yExtent[1]);
	        var width = Math.max(xExtent[0], xExtent[1]) - x;
	        var height = Math.max(yExtent[0], yExtent[1]) - y;
	        var lineWidth = seriesModel.get('lineStyle.normal.width') || 2;
	        // Expand clip shape to avoid clipping when line value exceeds axis
	        var expandSize = seriesModel.get('clipOverflow') ? lineWidth / 2 : Math.max(width, height);
	        if (isHorizontal) {
	            y -= expandSize;
	            height += expandSize * 2;
	        }
	        else {
	            x -= expandSize;
	            width += expandSize * 2;
	        }

	        var clipPath = new graphic.Rect({
	            shape: {
	                x: x,
	                y: y,
	                width: width,
	                height: height
	            }
	        });

	        if (hasAnimation) {
	            clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
	            graphic.initProps(clipPath, {
	                shape: {
	                    width: width,
	                    height: height
	                }
	            }, seriesModel);
	        }

	        return clipPath;
	    }

	    function createPolarClipShape(polar, hasAnimation, seriesModel) {
	        var angleAxis = polar.getAngleAxis();
	        var radiusAxis = polar.getRadiusAxis();

	        var radiusExtent = radiusAxis.getExtent();
	        var angleExtent = angleAxis.getExtent();

	        var RADIAN = Math.PI / 180;

	        var clipPath = new graphic.Sector({
	            shape: {
	                cx: polar.cx,
	                cy: polar.cy,
	                r0: radiusExtent[0],
	                r: radiusExtent[1],
	                startAngle: -angleExtent[0] * RADIAN,
	                endAngle: -angleExtent[1] * RADIAN,
	                clockwise: angleAxis.inverse
	            }
	        });

	        if (hasAnimation) {
	            clipPath.shape.endAngle = -angleExtent[0] * RADIAN;
	            graphic.initProps(clipPath, {
	                shape: {
	                    endAngle: -angleExtent[1] * RADIAN
	                }
	            }, seriesModel);
	        }

	        return clipPath;
	    }

	    function createClipShape(coordSys, hasAnimation, seriesModel) {
	        return coordSys.type === 'polar'
	            ? createPolarClipShape(coordSys, hasAnimation, seriesModel)
	            : createGridClipShape(coordSys, hasAnimation, seriesModel);
	    }

	    function turnPointsIntoStep(points, coordSys, stepTurnAt) {
	        var baseAxis = coordSys.getBaseAxis();
	        var baseIndex = baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1;

	        var stepPoints = [];
	        for (var i = 0; i < points.length - 1; i++) {
	            var nextPt = points[i + 1];
	            var pt = points[i];
	            stepPoints.push(pt);

	            var stepPt = [];
	            switch (stepTurnAt) {
	                case 'end':
	                    stepPt[baseIndex] = nextPt[baseIndex];
	                    stepPt[1 - baseIndex] = pt[1 - baseIndex];
	                    // default is start
	                    stepPoints.push(stepPt);
	                    break;
	                case 'middle':
	                    // default is start
	                    var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;
	                    var stepPt2 = [];
	                    stepPt[baseIndex] = stepPt2[baseIndex] = middle;
	                    stepPt[1 - baseIndex] = pt[1 - baseIndex];
	                    stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];
	                    stepPoints.push(stepPt);
	                    stepPoints.push(stepPt2);
	                    break;
	                default:
	                    stepPt[baseIndex] = pt[baseIndex];
	                    stepPt[1 - baseIndex] = nextPt[1 - baseIndex];
	                    // default is start
	                    stepPoints.push(stepPt);
	            }
	        }
	        // Last points
	        points[i] && stepPoints.push(points[i]);
	        return stepPoints;
	    }

	    function getVisualGradient(data, coordSys) {
	        var visualMetaList = data.getVisual('visualMeta');
	        if (!visualMetaList || !visualMetaList.length || !data.count()) {
	            // When data.count() is 0, gradient range can not be calculated.
	            return;
	        }

	        var visualMeta;
	        for (var i = visualMetaList.length - 1; i >= 0; i--) {
	            // Can only be x or y
	            if (visualMetaList[i].dimension < 2) {
	                visualMeta = visualMetaList[i];
	                break;
	            }
	        }
	        if (!visualMeta || coordSys.type !== 'cartesian2d') {
	            if (__DEV__) {
	                console.warn('Visual map on line style only support x or y dimension.');
	            }
	            return;
	        }

	        // If the area to be rendered is bigger than area defined by LinearGradient,
	        // the canvas spec prescribes that the color of the first stop and the last
	        // stop should be used. But if two stops are added at offset 0, in effect
	        // browsers use the color of the second stop to render area outside
	        // LinearGradient. So we can only infinitesimally extend area defined in
	        // LinearGradient to render `outerColors`.

	        var dimension = visualMeta.dimension;
	        var dimName = data.dimensions[dimension];
	        var axis = coordSys.getAxis(dimName);

	        // dataToCoor mapping may not be linear, but must be monotonic.
	        var colorStops = zrUtil.map(visualMeta.stops, function (stop) {
	            return {
	                coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),
	                color: stop.color
	            };
	        });
	        var stopLen = colorStops.length;
	        var outerColors = visualMeta.outerColors.slice();

	        if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {
	            colorStops.reverse();
	            outerColors.reverse();
	        }

	        var tinyExtent = 10; // Arbitrary value: 10px
	        var minCoord = colorStops[0].coord - tinyExtent;
	        var maxCoord = colorStops[stopLen - 1].coord + tinyExtent;
	        var coordSpan = maxCoord - minCoord;

	        if (coordSpan < 1e-3) {
	            return 'transparent';
	        }

	        zrUtil.each(colorStops, function (stop) {
	            stop.offset = (stop.coord - minCoord) / coordSpan;
	        });
	        colorStops.push({
	            offset: stopLen ? colorStops[stopLen - 1].offset : 0.5,
	            color: outerColors[1] || 'transparent'
	        });
	        colorStops.unshift({ // notice colorStops.length have been changed.
	            offset: stopLen ? colorStops[0].offset : 0.5,
	            color: outerColors[0] || 'transparent'
	        });

	        // zrUtil.each(colorStops, function (colorStop) {
	        //     // Make sure each offset has rounded px to avoid not sharp edge
	        //     colorStop.offset = (Math.round(colorStop.offset * (end - start) + start) - start) / (end - start);
	        // });

	        var gradient = new graphic.LinearGradient(0, 0, 0, 0, colorStops, true);
	        gradient[dimName] = minCoord;
	        gradient[dimName + '2'] = maxCoord;

	        return gradient;
	    }

	    module.exports = ChartView.extend({

	        type: 'line',

	        init: function () {
	            var lineGroup = new graphic.Group();

	            var symbolDraw = new SymbolDraw();
	            this.group.add(symbolDraw.group);

	            this._symbolDraw = symbolDraw;
	            this._lineGroup = lineGroup;
	        },

	        render: function (seriesModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var group = this.group;
	            var data = seriesModel.getData();
	            var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	            var areaStyleModel = seriesModel.getModel('areaStyle.normal');

	            var points = data.mapArray(data.getItemLayout, true);

	            var isCoordSysPolar = coordSys.type === 'polar';
	            var prevCoordSys = this._coordSys;

	            var symbolDraw = this._symbolDraw;
	            var polyline = this._polyline;
	            var polygon = this._polygon;

	            var lineGroup = this._lineGroup;

	            var hasAnimation = seriesModel.get('animation');

	            var isAreaChart = !areaStyleModel.isEmpty();
	            var stackedOnPoints = getStackedOnPoints(coordSys, data);

	            var showSymbol = seriesModel.get('showSymbol');

	            var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol')
	                && this._getSymbolIgnoreFunc(data, coordSys);

	            // Remove temporary symbols
	            var oldData = this._data;
	            oldData && oldData.eachItemGraphicEl(function (el, idx) {
	                if (el.__temp) {
	                    group.remove(el);
	                    oldData.setItemGraphicEl(idx, null);
	                }
	            });

	            // Remove previous created symbols if showSymbol changed to false
	            if (!showSymbol) {
	                symbolDraw.remove();
	            }

	            group.add(lineGroup);

	            // FIXME step not support polar
	            var step = !isCoordSysPolar && seriesModel.get('step');
	            // Initialization animation or coordinate system changed
	            if (
	                !(polyline && prevCoordSys.type === coordSys.type && step === this._step)
	            ) {
	                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);

	                if (step) {
	                    // TODO If stacked series is not step
	                    points = turnPointsIntoStep(points, coordSys, step);
	                    stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	                }

	                polyline = this._newPolyline(points, coordSys, hasAnimation);
	                if (isAreaChart) {
	                    polygon = this._newPolygon(
	                        points, stackedOnPoints,
	                        coordSys, hasAnimation
	                    );
	                }
	                lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));
	            }
	            else {
	                if (isAreaChart && !polygon) {
	                    // If areaStyle is added
	                    polygon = this._newPolygon(
	                        points, stackedOnPoints,
	                        coordSys, hasAnimation
	                    );
	                }
	                else if (polygon && !isAreaChart) {
	                    // If areaStyle is removed
	                    lineGroup.remove(polygon);
	                    polygon = this._polygon = null;
	                }

	                // Update clipPath
	                lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));

	                // Always update, or it is wrong in the case turning on legend
	                // because points are not changed
	                showSymbol && symbolDraw.updateData(data, isSymbolIgnore);

	                // Stop symbol animation and sync with line points
	                // FIXME performance?
	                data.eachItemGraphicEl(function (el) {
	                    el.stopAnimation(true);
	                });

	                // In the case data zoom triggerred refreshing frequently
	                // Data may not change if line has a category axis. So it should animate nothing
	                if (!isPointsSame(this._stackedOnPoints, stackedOnPoints)
	                    || !isPointsSame(this._points, points)
	                ) {
	                    if (hasAnimation) {
	                        this._updateAnimation(
	                            data, stackedOnPoints, coordSys, api, step
	                        );
	                    }
	                    else {
	                        // Not do it in update with animation
	                        if (step) {
	                            // TODO If stacked series is not step
	                            points = turnPointsIntoStep(points, coordSys, step);
	                            stackedOnPoints = turnPointsIntoStep(stackedOnPoints, coordSys, step);
	                        }

	                        polyline.setShape({
	                            points: points
	                        });
	                        polygon && polygon.setShape({
	                            points: points,
	                            stackedOnPoints: stackedOnPoints
	                        });
	                    }
	                }
	            }

	            var visualColor = getVisualGradient(data, coordSys) || data.getVisual('color');

	            polyline.useStyle(zrUtil.defaults(
	                // Use color in lineStyle first
	                lineStyleModel.getLineStyle(),
	                {
	                    fill: 'none',
	                    stroke: visualColor,
	                    lineJoin: 'bevel'
	                }
	            ));

	            var smooth = seriesModel.get('smooth');
	            smooth = getSmooth(seriesModel.get('smooth'));
	            polyline.setShape({
	                smooth: smooth,
	                smoothMonotone: seriesModel.get('smoothMonotone'),
	                connectNulls: seriesModel.get('connectNulls')
	            });

	            if (polygon) {
	                var stackedOn = data.stackedOn;
	                var stackedOnSmooth = 0;

	                polygon.useStyle(zrUtil.defaults(
	                    areaStyleModel.getAreaStyle(),
	                    {
	                        fill: visualColor,
	                        opacity: 0.7,
	                        lineJoin: 'bevel'
	                    }
	                ));

	                if (stackedOn) {
	                    var stackedOnSeries = stackedOn.hostModel;
	                    stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));
	                }

	                polygon.setShape({
	                    smooth: smooth,
	                    stackedOnSmooth: stackedOnSmooth,
	                    smoothMonotone: seriesModel.get('smoothMonotone'),
	                    connectNulls: seriesModel.get('connectNulls')
	                });
	            }

	            this._data = data;
	            // Save the coordinate system for transition animation when data changed
	            this._coordSys = coordSys;
	            this._stackedOnPoints = stackedOnPoints;
	            this._points = points;
	            this._step = step;
	        },

	        dispose: function () {},

	        highlight: function (seriesModel, ecModel, api, payload) {
	            var data = seriesModel.getData();
	            var dataIndex = modelUtil.queryDataIndex(data, payload);

	            if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {
	                var symbol = data.getItemGraphicEl(dataIndex);
	                if (!symbol) {
	                    // Create a temporary symbol if it is not exists
	                    var pt = data.getItemLayout(dataIndex);
	                    if (!pt) {
	                        // Null data
	                        return;
	                    }
	                    symbol = new Symbol(data, dataIndex);
	                    symbol.position = pt;
	                    symbol.setZ(
	                        seriesModel.get('zlevel'),
	                        seriesModel.get('z')
	                    );
	                    symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);
	                    symbol.__temp = true;
	                    data.setItemGraphicEl(dataIndex, symbol);

	                    // Stop scale animation
	                    symbol.stopSymbolAnimation(true);

	                    this.group.add(symbol);
	                }
	                symbol.highlight();
	            }
	            else {
	                // Highlight whole series
	                ChartView.prototype.highlight.call(
	                    this, seriesModel, ecModel, api, payload
	                );
	            }
	        },

	        downplay: function (seriesModel, ecModel, api, payload) {
	            var data = seriesModel.getData();
	            var dataIndex = modelUtil.queryDataIndex(data, payload);
	            if (dataIndex != null && dataIndex >= 0) {
	                var symbol = data.getItemGraphicEl(dataIndex);
	                if (symbol) {
	                    if (symbol.__temp) {
	                        data.setItemGraphicEl(dataIndex, null);
	                        this.group.remove(symbol);
	                    }
	                    else {
	                        symbol.downplay();
	                    }
	                }
	            }
	            else {
	                // Downplay whole series
	                ChartView.prototype.downplay.call(
	                    this, seriesModel, ecModel, api, payload
	                );
	            }
	        },

	        /**
	         * @param {module:zrender/container/Group} group
	         * @param {Array.<Array.<number>>} points
	         * @private
	         */
	        _newPolyline: function (points) {
	            var polyline = this._polyline;
	            // Remove previous created polyline
	            if (polyline) {
	                this._lineGroup.remove(polyline);
	            }

	            polyline = new polyHelper.Polyline({
	                shape: {
	                    points: points
	                },
	                silent: true,
	                z2: 10
	            });

	            this._lineGroup.add(polyline);

	            this._polyline = polyline;

	            return polyline;
	        },

	        /**
	         * @param {module:zrender/container/Group} group
	         * @param {Array.<Array.<number>>} stackedOnPoints
	         * @param {Array.<Array.<number>>} points
	         * @private
	         */
	        _newPolygon: function (points, stackedOnPoints) {
	            var polygon = this._polygon;
	            // Remove previous created polygon
	            if (polygon) {
	                this._lineGroup.remove(polygon);
	            }

	            polygon = new polyHelper.Polygon({
	                shape: {
	                    points: points,
	                    stackedOnPoints: stackedOnPoints
	                },
	                silent: true
	            });

	            this._lineGroup.add(polygon);

	            this._polygon = polygon;
	            return polygon;
	        },
	        /**
	         * @private
	         */
	        _getSymbolIgnoreFunc: function (data, coordSys) {
	            var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	            // `getLabelInterval` is provided by echarts/component/axis
	            if (categoryAxis && categoryAxis.isLabelIgnored) {
	                return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);
	            }
	        },

	        /**
	         * @private
	         */
	        // FIXME Two value axis
	        _updateAnimation: function (data, stackedOnPoints, coordSys, api, step) {
	            var polyline = this._polyline;
	            var polygon = this._polygon;
	            var seriesModel = data.hostModel;

	            var diff = lineAnimationDiff(
	                this._data, data,
	                this._stackedOnPoints, stackedOnPoints,
	                this._coordSys, coordSys
	            );

	            var current = diff.current;
	            var stackedOnCurrent = diff.stackedOnCurrent;
	            var next = diff.next;
	            var stackedOnNext = diff.stackedOnNext;
	            if (step) {
	                // TODO If stacked series is not step
	                current = turnPointsIntoStep(diff.current, coordSys, step);
	                stackedOnCurrent = turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step);
	                next = turnPointsIntoStep(diff.next, coordSys, step);
	                stackedOnNext = turnPointsIntoStep(diff.stackedOnNext, coordSys, step);
	            }
	            // `diff.current` is subset of `current` (which should be ensured by
	            // turnPointsIntoStep), so points in `__points` can be updated when
	            // points in `current` are update during animation.
	            polyline.shape.__points = diff.current;
	            polyline.shape.points = current;

	            graphic.updateProps(polyline, {
	                shape: {
	                    points: next
	                }
	            }, seriesModel);

	            if (polygon) {
	                polygon.setShape({
	                    points: current,
	                    stackedOnPoints: stackedOnCurrent
	                });
	                graphic.updateProps(polygon, {
	                    shape: {
	                        points: next,
	                        stackedOnPoints: stackedOnNext
	                    }
	                }, seriesModel);
	            }

	            var updatedDataInfo = [];
	            var diffStatus = diff.status;

	            for (var i = 0; i < diffStatus.length; i++) {
	                var cmd = diffStatus[i].cmd;
	                if (cmd === '=') {
	                    var el = data.getItemGraphicEl(diffStatus[i].idx1);
	                    if (el) {
	                        updatedDataInfo.push({
	                            el: el,
	                            ptIdx: i    // Index of points
	                        });
	                    }
	                }
	            }

	            if (polyline.animators && polyline.animators.length) {
	                polyline.animators[0].during(function () {
	                    for (var i = 0; i < updatedDataInfo.length; i++) {
	                        var el = updatedDataInfo[i].el;
	                        el.attr('position', polyline.shape.__points[updatedDataInfo[i].ptIdx]);
	                    }
	                });
	            }
	        },

	        remove: function (ecModel) {
	            var group = this.group;
	            var oldData = this._data;
	            this._lineGroup.removeAll();
	            this._symbolDraw.remove(true);
	            // Remove temporary created elements when highlighting
	            oldData && oldData.eachItemGraphicEl(function (el, idx) {
	                if (el.__temp) {
	                    group.remove(el);
	                    oldData.setItemGraphicEl(idx, null);
	                }
	            });

	            this._polyline =
	            this._polygon =
	            this._coordSys =
	            this._points =
	            this._stackedOnPoints =
	            this._data = null;
	        }
	    });


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/SymbolDraw
	 */


	    var graphic = __webpack_require__(282);
	    var Symbol = __webpack_require__(345);

	    /**
	     * @constructor
	     * @alias module:echarts/chart/helper/SymbolDraw
	     * @param {module:zrender/graphic/Group} [symbolCtor]
	     */
	    function SymbolDraw(symbolCtor) {
	        this.group = new graphic.Group();

	        this._symbolCtor = symbolCtor || Symbol;
	    }

	    var symbolDrawProto = SymbolDraw.prototype;

	    function symbolNeedsDraw(data, idx, isIgnore) {
	        var point = data.getItemLayout(idx);
	        // Is an object
	        // if (point && point.hasOwnProperty('point')) {
	        //     point = point.point;
	        // }
	        return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx))
	                    && data.getItemVisual(idx, 'symbol') !== 'none';
	    }
	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     * @param {Array.<boolean>} [isIgnore]
	     */
	    symbolDrawProto.updateData = function (data, isIgnore) {
	        var group = this.group;
	        var seriesModel = data.hostModel;
	        var oldData = this._data;

	        var SymbolCtor = this._symbolCtor;

	        var seriesScope = {
	            itemStyle: seriesModel.getModel('itemStyle.normal').getItemStyle(['color']),
	            hoverItemStyle: seriesModel.getModel('itemStyle.emphasis').getItemStyle(),
	            symbolRotate: seriesModel.get('symbolRotate'),
	            symbolOffset: seriesModel.get('symbolOffset'),
	            hoverAnimation: seriesModel.get('hoverAnimation'),

	            labelModel: seriesModel.getModel('label.normal'),
	            hoverLabelModel: seriesModel.getModel('label.emphasis')
	        };

	        data.diff(oldData)
	            .add(function (newIdx) {
	                var point = data.getItemLayout(newIdx);
	                if (symbolNeedsDraw(data, newIdx, isIgnore)) {
	                    var symbolEl = new SymbolCtor(data, newIdx, seriesScope);
	                    symbolEl.attr('position', point);
	                    data.setItemGraphicEl(newIdx, symbolEl);
	                    group.add(symbolEl);
	                }
	            })
	            .update(function (newIdx, oldIdx) {
	                var symbolEl = oldData.getItemGraphicEl(oldIdx);
	                var point = data.getItemLayout(newIdx);
	                if (!symbolNeedsDraw(data, newIdx, isIgnore)) {
	                    group.remove(symbolEl);
	                    return;
	                }
	                if (!symbolEl) {
	                    symbolEl = new SymbolCtor(data, newIdx);
	                    symbolEl.attr('position', point);
	                }
	                else {
	                    symbolEl.updateData(data, newIdx, seriesScope);
	                    graphic.updateProps(symbolEl, {
	                        position: point
	                    }, seriesModel);
	                }

	                // Add back
	                group.add(symbolEl);

	                data.setItemGraphicEl(newIdx, symbolEl);
	            })
	            .remove(function (oldIdx) {
	                var el = oldData.getItemGraphicEl(oldIdx);
	                el && el.fadeOut(function () {
	                    group.remove(el);
	                });
	            })
	            .execute();

	        this._data = data;
	    };

	    symbolDrawProto.updateLayout = function () {
	        var data = this._data;
	        if (data) {
	            // Not use animation
	            data.eachItemGraphicEl(function (el, idx) {
	                var point = data.getItemLayout(idx);
	                el.attr('position', point);
	            });
	        }
	    };

	    symbolDrawProto.remove = function (enableAnimation) {
	        var group = this.group;
	        var data = this._data;
	        if (data) {
	            if (enableAnimation) {
	                data.eachItemGraphicEl(function (el) {
	                    el.fadeOut(function () {
	                        group.remove(el);
	                    });
	                });
	            }
	            else {
	                group.removeAll();
	            }
	        }
	    };

	    module.exports = SymbolDraw;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/Symbol
	 */


	    var zrUtil = __webpack_require__(243);
	    var symbolUtil = __webpack_require__(346);
	    var graphic = __webpack_require__(282);
	    var numberUtil = __webpack_require__(246);

	    function getSymbolSize(data, idx) {
	        var symbolSize = data.getItemVisual(idx, 'symbolSize');
	        return symbolSize instanceof Array
	            ? symbolSize.slice()
	            : [+symbolSize, +symbolSize];
	    }

	    function getScale(symbolSize) {
	        return [symbolSize[0] / 2, symbolSize[1] / 2];
	    }

	    /**
	     * @constructor
	     * @alias {module:echarts/chart/helper/Symbol}
	     * @param {module:echarts/data/List} data
	     * @param {number} idx
	     * @extends {module:zrender/graphic/Group}
	     */
	    function Symbol(data, idx, seriesScope) {
	        graphic.Group.call(this);

	        this.updateData(data, idx, seriesScope);
	    }

	    var symbolProto = Symbol.prototype;

	    function driftSymbol(dx, dy) {
	        this.parent.drift(dx, dy);
	    }

	    symbolProto._createSymbol = function (symbolType, data, idx, symbolSize) {
	        // Remove paths created before
	        this.removeAll();

	        var seriesModel = data.hostModel;
	        var color = data.getItemVisual(idx, 'color');

	        // var symbolPath = symbolUtil.createSymbol(
	        //     symbolType, -0.5, -0.5, 1, 1, color
	        // );
	        // If width/height are set too small (e.g., set to 1) on ios10
	        // and macOS Sierra, a circle stroke become a rect, no matter what
	        // the scale is set. So we set width/height as 2. See #4150.
	        var symbolPath = symbolUtil.createSymbol(
	            symbolType, -1, -1, 2, 2, color
	        );

	        symbolPath.attr({
	            z2: 100,
	            culling: true,
	            scale: [0, 0]
	        });
	        // Rewrite drift method
	        symbolPath.drift = driftSymbol;

	        graphic.initProps(symbolPath, {
	            scale: getScale(symbolSize)
	        }, seriesModel, idx);
	        this._symbolType = symbolType;

	        this.add(symbolPath);
	    };

	    /**
	     * Stop animation
	     * @param {boolean} toLastFrame
	     */
	    symbolProto.stopSymbolAnimation = function (toLastFrame) {
	        this.childAt(0).stopAnimation(toLastFrame);
	    };

	    /**
	     * Get symbol path element
	     */
	    symbolProto.getSymbolPath = function () {
	        return this.childAt(0);
	    };

	    /**
	     * Get scale(aka, current symbol size).
	     * Including the change caused by animation
	     */
	    symbolProto.getScale = function () {
	        return this.childAt(0).scale;
	    };

	    /**
	     * Highlight symbol
	     */
	    symbolProto.highlight = function () {
	        this.childAt(0).trigger('emphasis');
	    };

	    /**
	     * Downplay symbol
	     */
	    symbolProto.downplay = function () {
	        this.childAt(0).trigger('normal');
	    };

	    /**
	     * @param {number} zlevel
	     * @param {number} z
	     */
	    symbolProto.setZ = function (zlevel, z) {
	        var symbolPath = this.childAt(0);
	        symbolPath.zlevel = zlevel;
	        symbolPath.z = z;
	    };

	    symbolProto.setDraggable = function (draggable) {
	        var symbolPath = this.childAt(0);
	        symbolPath.draggable = draggable;
	        symbolPath.cursor = draggable ? 'move' : 'pointer';
	    };

	    /**
	     * Update symbol properties
	     * @param  {module:echarts/data/List} data
	     * @param  {number} idx
	     */
	    symbolProto.updateData = function (data, idx, seriesScope) {
	        this.silent = false;

	        var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	        var seriesModel = data.hostModel;
	        var symbolSize = getSymbolSize(data, idx);

	        if (symbolType !== this._symbolType) {
	            this._createSymbol(symbolType, data, idx, symbolSize);
	        }
	        else {
	            var symbolPath = this.childAt(0);
	            graphic.updateProps(symbolPath, {
	                scale: getScale(symbolSize)
	            }, seriesModel, idx);
	        }
	        this._updateCommon(data, idx, symbolSize, seriesScope);
	        this._seriesModel = seriesModel;
	    };

	    // Update common properties
	    var normalStyleAccessPath = ['itemStyle', 'normal'];
	    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	    var normalLabelAccessPath = ['label', 'normal'];
	    var emphasisLabelAccessPath = ['label', 'emphasis'];

	    symbolProto._updateCommon = function (data, idx, symbolSize, seriesScope) {
	        var symbolPath = this.childAt(0);
	        var seriesModel = data.hostModel;
	        var color = data.getItemVisual(idx, 'color');

	        // Reset style
	        if (symbolPath.type !== 'image') {
	            symbolPath.useStyle({
	                strokeNoScale: true
	            });
	        }

	        seriesScope = seriesScope || null;

	        var itemStyle = seriesScope && seriesScope.itemStyle;
	        var hoverItemStyle = seriesScope && seriesScope.hoverItemStyle;
	        var symbolRotate = seriesScope && seriesScope.symbolRotate;
	        var symbolOffset = seriesScope && seriesScope.symbolOffset;
	        var labelModel = seriesScope && seriesScope.labelModel;
	        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;
	        var hoverAnimation = seriesScope && seriesScope.hoverAnimation;

	        if (!seriesScope || data.hasItemOption) {
	            var itemModel = data.getItemModel(idx);

	            // Color must be excluded.
	            // Because symbol provide setColor individually to set fill and stroke
	            itemStyle = itemModel.getModel(normalStyleAccessPath).getItemStyle(['color']);
	            hoverItemStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();

	            symbolRotate = itemModel.getShallow('symbolRotate');
	            symbolOffset = itemModel.getShallow('symbolOffset');

	            labelModel = itemModel.getModel(normalLabelAccessPath);
	            hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);
	            hoverAnimation = itemModel.getShallow('hoverAnimation');
	        }
	        else {
	            hoverItemStyle = zrUtil.extend({}, hoverItemStyle);
	        }

	        var elStyle = symbolPath.style;

	        symbolPath.attr('rotation', (symbolRotate || 0) * Math.PI / 180 || 0);

	        if (symbolOffset) {
	            symbolPath.attr('position', [
	                numberUtil.parsePercent(symbolOffset[0], symbolSize[0]),
	                numberUtil.parsePercent(symbolOffset[1], symbolSize[1])
	            ]);
	        }

	        // PENDING setColor before setStyle!!!
	        symbolPath.setColor(color);

	        symbolPath.setStyle(itemStyle);

	        var opacity = data.getItemVisual(idx, 'opacity');
	        if (opacity != null) {
	            elStyle.opacity = opacity;
	        }

	        // Get last value dim
	        var dimensions = data.dimensions.slice();
	        var valueDim;
	        var dataType;
	        while (dimensions.length && (
	            valueDim = dimensions.pop(),
	            dataType = data.getDimensionInfo(valueDim).type,
	            dataType === 'ordinal' || dataType === 'time'
	        )) {} // jshint ignore:line

	        if (valueDim != null && labelModel.getShallow('show')) {
	            graphic.setText(elStyle, labelModel, color);
	            elStyle.text = zrUtil.retrieve(
	                seriesModel.getFormattedLabel(idx, 'normal'),
	                data.get(valueDim, idx)
	            );
	        }
	        else {
	            elStyle.text = '';
	        }

	        if (valueDim != null && hoverLabelModel.getShallow('show')) {
	            graphic.setText(hoverItemStyle, hoverLabelModel, color);
	            hoverItemStyle.text = zrUtil.retrieve(
	                seriesModel.getFormattedLabel(idx, 'emphasis'),
	                data.get(valueDim, idx)
	            );
	        }
	        else {
	            hoverItemStyle.text = '';
	        }

	        symbolPath.off('mouseover')
	            .off('mouseout')
	            .off('emphasis')
	            .off('normal');

	        symbolPath.hoverStyle = hoverItemStyle;

	        graphic.setHoverStyle(symbolPath);

	        var scale = getScale(symbolSize);

	        if (hoverAnimation && seriesModel.isAnimationEnabled()) {
	            var onEmphasis = function() {
	                var ratio = scale[1] / scale[0];
	                this.animateTo({
	                    scale: [
	                        Math.max(scale[0] * 1.1, scale[0] + 3),
	                        Math.max(scale[1] * 1.1, scale[1] + 3 * ratio)
	                    ]
	                }, 400, 'elasticOut');
	            };
	            var onNormal = function() {
	                this.animateTo({
	                    scale: scale
	                }, 400, 'elasticOut');
	            };
	            symbolPath.on('mouseover', onEmphasis)
	                .on('mouseout', onNormal)
	                .on('emphasis', onEmphasis)
	                .on('normal', onNormal);
	        }
	    };

	    symbolProto.fadeOut = function (cb) {
	        var symbolPath = this.childAt(0);
	        // Avoid mistaken hover when fading out
	        this.silent = true;
	        // Not show text when animating
	        symbolPath.style.text = '';
	        graphic.updateProps(symbolPath, {
	            scale: [0, 0]
	        }, this._seriesModel, this.dataIndex, cb);
	    };

	    zrUtil.inherits(Symbol, graphic.Group);

	    module.exports = Symbol;


/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Symbol factory


	    var graphic = __webpack_require__(282);
	    var BoundingRect = __webpack_require__(248);

	    /**
	     * Triangle shape
	     * @inner
	     */
	    var Triangle = graphic.extendShape({
	        type: 'triangle',
	        shape: {
	            cx: 0,
	            cy: 0,
	            width: 0,
	            height: 0
	        },
	        buildPath: function (path, shape) {
	            var cx = shape.cx;
	            var cy = shape.cy;
	            var width = shape.width / 2;
	            var height = shape.height / 2;
	            path.moveTo(cx, cy - height);
	            path.lineTo(cx + width, cy + height);
	            path.lineTo(cx - width, cy + height);
	            path.closePath();
	        }
	    });
	    /**
	     * Diamond shape
	     * @inner
	     */
	    var Diamond = graphic.extendShape({
	        type: 'diamond',
	        shape: {
	            cx: 0,
	            cy: 0,
	            width: 0,
	            height: 0
	        },
	        buildPath: function (path, shape) {
	            var cx = shape.cx;
	            var cy = shape.cy;
	            var width = shape.width / 2;
	            var height = shape.height / 2;
	            path.moveTo(cx, cy - height);
	            path.lineTo(cx + width, cy);
	            path.lineTo(cx, cy + height);
	            path.lineTo(cx - width, cy);
	            path.closePath();
	        }
	    });

	    /**
	     * Pin shape
	     * @inner
	     */
	    var Pin = graphic.extendShape({
	        type: 'pin',
	        shape: {
	            // x, y on the cusp
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },

	        buildPath: function (path, shape) {
	            var x = shape.x;
	            var y = shape.y;
	            var w = shape.width / 5 * 3;
	            // Height must be larger than width
	            var h = Math.max(w, shape.height);
	            var r = w / 2;

	            // Dist on y with tangent point and circle center
	            var dy = r * r / (h - r);
	            var cy = y - h + r + dy;
	            var angle = Math.asin(dy / r);
	            // Dist on x with tangent point and circle center
	            var dx = Math.cos(angle) * r;

	            var tanX = Math.sin(angle);
	            var tanY = Math.cos(angle);

	            path.arc(
	                x, cy, r,
	                Math.PI - angle,
	                Math.PI * 2 + angle
	            );

	            var cpLen = r * 0.6;
	            var cpLen2 = r * 0.7;
	            path.bezierCurveTo(
	                x + dx - tanX * cpLen, cy + dy + tanY * cpLen,
	                x, y - cpLen2,
	                x, y
	            );
	            path.bezierCurveTo(
	                x, y - cpLen2,
	                x - dx + tanX * cpLen, cy + dy + tanY * cpLen,
	                x - dx, cy + dy
	            );
	            path.closePath();
	        }
	    });

	    /**
	     * Arrow shape
	     * @inner
	     */
	    var Arrow = graphic.extendShape({

	        type: 'arrow',

	        shape: {
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },

	        buildPath: function (ctx, shape) {
	            var height = shape.height;
	            var width = shape.width;
	            var x = shape.x;
	            var y = shape.y;
	            var dx = width / 3 * 2;
	            ctx.moveTo(x, y);
	            ctx.lineTo(x + dx, y + height);
	            ctx.lineTo(x, y + height / 4 * 3);
	            ctx.lineTo(x - dx, y + height);
	            ctx.lineTo(x, y);
	            ctx.closePath();
	        }
	    });

	    /**
	     * Map of path contructors
	     * @type {Object.<string, module:zrender/graphic/Path>}
	     */
	    var symbolCtors = {
	        line: graphic.Line,

	        rect: graphic.Rect,

	        roundRect: graphic.Rect,

	        square: graphic.Rect,

	        circle: graphic.Circle,

	        diamond: Diamond,

	        pin: Pin,

	        arrow: Arrow,

	        triangle: Triangle
	    };

	    var symbolShapeMakers = {

	        line: function (x, y, w, h, shape) {
	            // FIXME
	            shape.x1 = x;
	            shape.y1 = y + h / 2;
	            shape.x2 = x + w;
	            shape.y2 = y + h / 2;
	        },

	        rect: function (x, y, w, h, shape) {
	            shape.x = x;
	            shape.y = y;
	            shape.width = w;
	            shape.height = h;
	        },

	        roundRect: function (x, y, w, h, shape) {
	            shape.x = x;
	            shape.y = y;
	            shape.width = w;
	            shape.height = h;
	            shape.r = Math.min(w, h) / 4;
	        },

	        square: function (x, y, w, h, shape) {
	            var size = Math.min(w, h);
	            shape.x = x;
	            shape.y = y;
	            shape.width = size;
	            shape.height = size;
	        },

	        circle: function (x, y, w, h, shape) {
	            // Put circle in the center of square
	            shape.cx = x + w / 2;
	            shape.cy = y + h / 2;
	            shape.r = Math.min(w, h) / 2;
	        },

	        diamond: function (x, y, w, h, shape) {
	            shape.cx = x + w / 2;
	            shape.cy = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        },

	        pin: function (x, y, w, h, shape) {
	            shape.x = x + w / 2;
	            shape.y = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        },

	        arrow: function (x, y, w, h, shape) {
	            shape.x = x + w / 2;
	            shape.y = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        },

	        triangle: function (x, y, w, h, shape) {
	            shape.cx = x + w / 2;
	            shape.cy = y + h / 2;
	            shape.width = w;
	            shape.height = h;
	        }
	    };

	    var symbolBuildProxies = {};
	    for (var name in symbolCtors) {
	        if (symbolCtors.hasOwnProperty(name)) {
	            symbolBuildProxies[name] = new symbolCtors[name]();
	        }
	    }

	    var Symbol = graphic.extendShape({

	        type: 'symbol',

	        shape: {
	            symbolType: '',
	            x: 0,
	            y: 0,
	            width: 0,
	            height: 0
	        },

	        beforeBrush: function () {
	            var style = this.style;
	            var shape = this.shape;
	            // FIXME
	            if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
	                style.textPosition = ['50%', '40%'];
	                style.textAlign = 'center';
	                style.textVerticalAlign = 'middle';
	            }
	        },

	        buildPath: function (ctx, shape, inBundle) {
	            var symbolType = shape.symbolType;
	            var proxySymbol = symbolBuildProxies[symbolType];
	            if (shape.symbolType !== 'none') {
	                if (!proxySymbol) {
	                    // Default rect
	                    symbolType = 'rect';
	                    proxySymbol = symbolBuildProxies[symbolType];
	                }
	                symbolShapeMakers[symbolType](
	                    shape.x, shape.y, shape.width, shape.height, proxySymbol.shape
	                );
	                proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
	            }
	        }
	    });

	    // Provide setColor helper method to avoid determine if set the fill or stroke outside
	    var symbolPathSetColor = function (color) {
	        if (this.type !== 'image') {
	            var symbolStyle = this.style;
	            var symbolShape = this.shape;
	            if (symbolShape && symbolShape.symbolType === 'line') {
	                symbolStyle.stroke = color;
	            }
	            else if (this.__isEmptyBrush) {
	                symbolStyle.stroke = color;
	                symbolStyle.fill = '#fff';
	            }
	            else {
	                // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
	                symbolStyle.fill && (symbolStyle.fill = color);
	                symbolStyle.stroke && (symbolStyle.stroke = color);
	            }
	            this.dirty(false);
	        }
	    };

	    var symbolUtil = {
	        /**
	         * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	         * @param {string} symbolType
	         * @param {number} x
	         * @param {number} y
	         * @param {number} w
	         * @param {number} h
	         * @param {string} color
	         */
	        createSymbol: function (symbolType, x, y, w, h, color) {
	            var isEmpty = symbolType.indexOf('empty') === 0;
	            if (isEmpty) {
	                symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
	            }
	            var symbolPath;

	            if (symbolType.indexOf('image://') === 0) {
	                symbolPath = new graphic.Image({
	                    style: {
	                        image: symbolType.slice(8),
	                        x: x,
	                        y: y,
	                        width: w,
	                        height: h
	                    }
	                });
	            }
	            else if (symbolType.indexOf('path://') === 0) {
	                symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));
	            }
	            else {
	                symbolPath = new Symbol({
	                    shape: {
	                        symbolType: symbolType,
	                        x: x,
	                        y: y,
	                        width: w,
	                        height: h
	                    }
	                });
	            }

	            symbolPath.__isEmptyBrush = isEmpty;

	            symbolPath.setColor = symbolPathSetColor;

	            symbolPath.setColor(color);

	            return symbolPath;
	        }
	    };

	    module.exports = symbolUtil;


/***/ },
/* 347 */
/***/ function(module, exports) {

	

	    // var arrayDiff = require('zrender/lib/core/arrayDiff');
	    // 'zrender/core/arrayDiff' has been used before, but it did
	    // not do well in performance when roam with fixed dataZoom window.

	    function sign(val) {
	        return val >= 0 ? 1 : -1;
	    }

	    function getStackedOnPoint(coordSys, data, idx) {
	        var baseAxis = coordSys.getBaseAxis();
	        var valueAxis = coordSys.getOtherAxis(baseAxis);
	        var valueStart = baseAxis.onZero
	            ? 0 : valueAxis.scale.getExtent()[0];

	        var valueDim = valueAxis.dim;
	        var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;

	        var stackedOnSameSign;
	        var stackedOn = data.stackedOn;
	        var val = data.get(valueDim, idx);
	        // Find first stacked value with same sign
	        while (stackedOn &&
	            sign(stackedOn.get(valueDim, idx)) === sign(val)
	        ) {
	            stackedOnSameSign = stackedOn;
	            break;
	        }
	        var stackedData = [];
	        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	        stackedData[1 - baseDataOffset] = stackedOnSameSign
	            ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;

	        return coordSys.dataToPoint(stackedData);
	    }

	    // function convertToIntId(newIdList, oldIdList) {
	    //     // Generate int id instead of string id.
	    //     // Compare string maybe slow in score function of arrDiff

	    //     // Assume id in idList are all unique
	    //     var idIndicesMap = {};
	    //     var idx = 0;
	    //     for (var i = 0; i < newIdList.length; i++) {
	    //         idIndicesMap[newIdList[i]] = idx;
	    //         newIdList[i] = idx++;
	    //     }
	    //     for (var i = 0; i < oldIdList.length; i++) {
	    //         var oldId = oldIdList[i];
	    //         // Same with newIdList
	    //         if (idIndicesMap[oldId]) {
	    //             oldIdList[i] = idIndicesMap[oldId];
	    //         }
	    //         else {
	    //             oldIdList[i] = idx++;
	    //         }
	    //     }
	    // }

	    function diffData(oldData, newData) {
	        var diffResult = [];

	        newData.diff(oldData)
	            .add(function (idx) {
	                diffResult.push({cmd: '+', idx: idx});
	            })
	            .update(function (newIdx, oldIdx) {
	                diffResult.push({cmd: '=', idx: oldIdx, idx1: newIdx});
	            })
	            .remove(function (idx) {
	                diffResult.push({cmd: '-', idx: idx});
	            })
	            .execute();

	        return diffResult;
	    }

	    module.exports = function (
	        oldData, newData,
	        oldStackedOnPoints, newStackedOnPoints,
	        oldCoordSys, newCoordSys
	    ) {
	        var diff = diffData(oldData, newData);

	        // var newIdList = newData.mapArray(newData.getId);
	        // var oldIdList = oldData.mapArray(oldData.getId);

	        // convertToIntId(newIdList, oldIdList);

	        // // FIXME One data ?
	        // diff = arrayDiff(oldIdList, newIdList);

	        var currPoints = [];
	        var nextPoints = [];
	        // Points for stacking base line
	        var currStackedPoints = [];
	        var nextStackedPoints = [];

	        var status = [];
	        var sortedIndices = [];
	        var rawIndices = [];
	        var dims = newCoordSys.dimensions;
	        for (var i = 0; i < diff.length; i++) {
	            var diffItem = diff[i];
	            var pointAdded = true;

	            // FIXME, animation is not so perfect when dataZoom window moves fast
	            // Which is in case remvoing or add more than one data in the tail or head
	            switch (diffItem.cmd) {
	                case '=':
	                    var currentPt = oldData.getItemLayout(diffItem.idx);
	                    var nextPt = newData.getItemLayout(diffItem.idx1);
	                    // If previous data is NaN, use next point directly
	                    if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
	                        currentPt = nextPt.slice();
	                    }
	                    currPoints.push(currentPt);
	                    nextPoints.push(nextPt);

	                    currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
	                    nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);

	                    rawIndices.push(newData.getRawIndex(diffItem.idx1));
	                    break;
	                case '+':
	                    var idx = diffItem.idx;
	                    currPoints.push(
	                        oldCoordSys.dataToPoint([
	                            newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)
	                        ])
	                    );

	                    nextPoints.push(newData.getItemLayout(idx).slice());

	                    currStackedPoints.push(
	                        getStackedOnPoint(oldCoordSys, newData, idx)
	                    );
	                    nextStackedPoints.push(newStackedOnPoints[idx]);

	                    rawIndices.push(newData.getRawIndex(idx));
	                    break;
	                case '-':
	                    var idx = diffItem.idx;
	                    var rawIndex = oldData.getRawIndex(idx);
	                    // Data is replaced. In the case of dynamic data queue
	                    // FIXME FIXME FIXME
	                    if (rawIndex !== idx) {
	                        currPoints.push(oldData.getItemLayout(idx));
	                        nextPoints.push(newCoordSys.dataToPoint([
	                            oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)
	                        ]));

	                        currStackedPoints.push(oldStackedOnPoints[idx]);
	                        nextStackedPoints.push(
	                            getStackedOnPoint(
	                                newCoordSys, oldData, idx
	                            )
	                        );

	                        rawIndices.push(rawIndex);
	                    }
	                    else {
	                        pointAdded = false;
	                    }
	            }

	            // Original indices
	            if (pointAdded) {
	                status.push(diffItem);
	                sortedIndices.push(sortedIndices.length);
	            }
	        }

	        // Diff result may be crossed if all items are changed
	        // Sort by data index
	        sortedIndices.sort(function (a, b) {
	            return rawIndices[a] - rawIndices[b];
	        });

	        var sortedCurrPoints = [];
	        var sortedNextPoints = [];

	        var sortedCurrStackedPoints = [];
	        var sortedNextStackedPoints = [];

	        var sortedStatus = [];
	        for (var i = 0; i < sortedIndices.length; i++) {
	            var idx = sortedIndices[i];
	            sortedCurrPoints[i] = currPoints[idx];
	            sortedNextPoints[i] = nextPoints[idx];

	            sortedCurrStackedPoints[i] = currStackedPoints[idx];
	            sortedNextStackedPoints[i] = nextStackedPoints[idx];

	            sortedStatus[i] = status[idx];
	        }

	        return {
	            current: sortedCurrPoints,
	            next: sortedNextPoints,

	            stackedOnCurrent: sortedCurrStackedPoints,
	            stackedOnNext: sortedNextStackedPoints,

	            status: sortedStatus
	        };
	    };


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	// Poly path support NaN point


	    var Path = __webpack_require__(284);
	    var vec2 = __webpack_require__(249);

	    var vec2Min = vec2.min;
	    var vec2Max = vec2.max;

	    var scaleAndAdd = vec2.scaleAndAdd;
	    var v2Copy = vec2.copy;

	    // Temporary variable
	    var v = [];
	    var cp0 = [];
	    var cp1 = [];

	    function isPointNull(p) {
	        return isNaN(p[0]) || isNaN(p[1]);
	    }

	    function drawSegment(
	        ctx, points, start, segLen, allLen,
	        dir, smoothMin, smoothMax, smooth, smoothMonotone, connectNulls
	    ) {
	        var prevIdx = 0;
	        var idx = start;
	        for (var k = 0; k < segLen; k++) {
	            var p = points[idx];
	            if (idx >= allLen || idx < 0) {
	                break;
	            }
	            if (isPointNull(p)) {
	                if (connectNulls) {
	                    idx += dir;
	                    continue;
	                }
	                break;
	            }

	            if (idx === start) {
	                ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
	                v2Copy(cp0, p);
	            }
	            else {
	                if (smooth > 0) {
	                    var nextIdx = idx + dir;
	                    var nextP = points[nextIdx];
	                    if (connectNulls) {
	                        // Find next point not null
	                        while (nextP && isPointNull(points[nextIdx])) {
	                            nextIdx += dir;
	                            nextP = points[nextIdx];
	                        }
	                    }

	                    var ratioNextSeg = 0.5;
	                    var prevP = points[prevIdx];
	                    var nextP = points[nextIdx];
	                    // Last point
	                    if (!nextP || isPointNull(nextP)) {
	                        v2Copy(cp1, p);
	                    }
	                    else {
	                        // If next data is null in not connect case
	                        if (isPointNull(nextP) && !connectNulls) {
	                            nextP = p;
	                        }

	                        vec2.sub(v, nextP, prevP);

	                        var lenPrevSeg;
	                        var lenNextSeg;
	                        if (smoothMonotone === 'x' || smoothMonotone === 'y') {
	                            var dim = smoothMonotone === 'x' ? 0 : 1;
	                            lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
	                            lenNextSeg = Math.abs(p[dim] - nextP[dim]);
	                        }
	                        else {
	                            lenPrevSeg = vec2.dist(p, prevP);
	                            lenNextSeg = vec2.dist(p, nextP);
	                        }

	                        // Use ratio of seg length
	                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);

	                        scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));
	                    }
	                    // Smooth constraint
	                    vec2Min(cp0, cp0, smoothMax);
	                    vec2Max(cp0, cp0, smoothMin);
	                    vec2Min(cp1, cp1, smoothMax);
	                    vec2Max(cp1, cp1, smoothMin);

	                    ctx.bezierCurveTo(
	                        cp0[0], cp0[1],
	                        cp1[0], cp1[1],
	                        p[0], p[1]
	                    );
	                    // cp0 of next segment
	                    scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);
	                }
	                else {
	                    ctx.lineTo(p[0], p[1]);
	                }
	            }

	            prevIdx = idx;
	            idx += dir;
	        }

	        return k;
	    }

	    function getBoundingBox(points, smoothConstraint) {
	        var ptMin = [Infinity, Infinity];
	        var ptMax = [-Infinity, -Infinity];
	        if (smoothConstraint) {
	            for (var i = 0; i < points.length; i++) {
	                var pt = points[i];
	                if (pt[0] < ptMin[0]) { ptMin[0] = pt[0]; }
	                if (pt[1] < ptMin[1]) { ptMin[1] = pt[1]; }
	                if (pt[0] > ptMax[0]) { ptMax[0] = pt[0]; }
	                if (pt[1] > ptMax[1]) { ptMax[1] = pt[1]; }
	            }
	        }
	        return {
	            min: smoothConstraint ? ptMin : ptMax,
	            max: smoothConstraint ? ptMax : ptMin
	        };
	    }

	    module.exports = {

	        Polyline: Path.extend({

	            type: 'ec-polyline',

	            shape: {
	                points: [],

	                smooth: 0,

	                smoothConstraint: true,

	                smoothMonotone: null,

	                connectNulls: false
	            },

	            style: {
	                fill: null,

	                stroke: '#000'
	            },

	            buildPath: function (ctx, shape) {
	                var points = shape.points;

	                var i = 0;
	                var len = points.length;

	                var result = getBoundingBox(points, shape.smoothConstraint);

	                if (shape.connectNulls) {
	                    // Must remove first and last null values avoid draw error in polygon
	                    for (; len > 0; len--) {
	                        if (!isPointNull(points[len - 1])) {
	                            break;
	                        }
	                    }
	                    for (; i < len; i++) {
	                        if (!isPointNull(points[i])) {
	                            break;
	                        }
	                    }
	                }
	                while (i < len) {
	                    i += drawSegment(
	                        ctx, points, i, len, len,
	                        1, result.min, result.max, shape.smooth,
	                        shape.smoothMonotone, shape.connectNulls
	                    ) + 1;
	                }
	            }
	        }),

	        Polygon: Path.extend({

	            type: 'ec-polygon',

	            shape: {
	                points: [],

	                // Offset between stacked base points and points
	                stackedOnPoints: [],

	                smooth: 0,

	                stackedOnSmooth: 0,

	                smoothConstraint: true,

	                smoothMonotone: null,

	                connectNulls: false
	            },

	            buildPath: function (ctx, shape) {
	                var points = shape.points;
	                var stackedOnPoints = shape.stackedOnPoints;

	                var i = 0;
	                var len = points.length;
	                var smoothMonotone = shape.smoothMonotone;
	                var bbox = getBoundingBox(points, shape.smoothConstraint);
	                var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);

	                if (shape.connectNulls) {
	                    // Must remove first and last null values avoid draw error in polygon
	                    for (; len > 0; len--) {
	                        if (!isPointNull(points[len - 1])) {
	                            break;
	                        }
	                    }
	                    for (; i < len; i++) {
	                        if (!isPointNull(points[i])) {
	                            break;
	                        }
	                    }
	                }
	                while (i < len) {
	                    var k = drawSegment(
	                        ctx, points, i, len, len,
	                        1, bbox.min, bbox.max, shape.smooth,
	                        smoothMonotone, shape.connectNulls
	                    );
	                    drawSegment(
	                        ctx, stackedOnPoints, i + k - 1, k, len,
	                        -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth,
	                        smoothMonotone, shape.connectNulls
	                    );
	                    i += k + 1;

	                    ctx.closePath();
	                }
	            }
	        })
	    };


/***/ },
/* 349 */
/***/ function(module, exports) {

	

	    module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {

	        // Encoding visual for all series include which is filtered for legend drawing
	        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();

	            var symbolType = seriesModel.get('symbol') || defaultSymbolType;
	            var symbolSize = seriesModel.get('symbolSize');

	            data.setVisual({
	                legendSymbol: legendSymbol || symbolType,
	                symbol: symbolType,
	                symbolSize: symbolSize
	            });

	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                if (typeof symbolSize === 'function') {
	                    data.each(function (idx) {
	                        var rawValue = seriesModel.getRawValue(idx);
	                        // FIXME
	                        var params = seriesModel.getDataParams(idx);
	                        data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
	                    });
	                }
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var itemSymbolType = itemModel.getShallow('symbol', true);
	                    var itemSymbolSize = itemModel.getShallow('symbolSize', true);
	                    // If has item symbol
	                    if (itemSymbolType != null) {
	                        data.setItemVisual(idx, 'symbol', itemSymbolType);
	                    }
	                    if (itemSymbolSize != null) {
	                        // PENDING Transform symbolSize ?
	                        data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
	                    }
	                });
	            }
	        });
	    };


/***/ },
/* 350 */
/***/ function(module, exports) {

	

	    module.exports = function (seriesType, ecModel) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var coordSys = seriesModel.coordinateSystem;

	            if (coordSys) {
	                var dims = coordSys.dimensions;

	                if (coordSys.type === 'singleAxis') {
	                    data.each(dims[0], function (x, idx) {
	                        // Also {Array.<number>}, not undefined to avoid if...else... statement
	                        data.setItemLayout(idx, isNaN(x) ? [NaN, NaN] : coordSys.dataToPoint(x));
	                    });
	                }
	                else {
	                    data.each(dims, function (x, y, idx) {
	                        // Also {Array.<number>}, not undefined to avoid if...else... statement
	                        data.setItemLayout(
	                            idx, (isNaN(x) || isNaN(y)) ? [NaN, NaN] : coordSys.dataToPoint([x, y])
	                        );
	                    }, true);
	                }
	            }
	        });
	    };


/***/ },
/* 351 */
/***/ function(module, exports) {

	
	    var samplers = {
	        average: function (frame) {
	            var sum = 0;
	            var count = 0;
	            for (var i = 0; i < frame.length; i++) {
	                if (!isNaN(frame[i])) {
	                    sum += frame[i];
	                    count++;
	                }
	            }
	            // Return NaN if count is 0
	            return count === 0 ? NaN : sum / count;
	        },
	        sum: function (frame) {
	            var sum = 0;
	            for (var i = 0; i < frame.length; i++) {
	                // Ignore NaN
	                sum += frame[i] || 0;
	            }
	            return sum;
	        },
	        max: function (frame) {
	            var max = -Infinity;
	            for (var i = 0; i < frame.length; i++) {
	                frame[i] > max && (max = frame[i]);
	            }
	            return max;
	        },
	        min: function (frame) {
	            var min = Infinity;
	            for (var i = 0; i < frame.length; i++) {
	                frame[i] < min && (min = frame[i]);
	            }
	            return min;
	        },
	        // TODO
	        // Median
	        nearest: function (frame) {
	            return frame[0];
	        }
	    };

	    var indexSampler = function (frame, value) {
	        return Math.round(frame.length / 2);
	    };
	    module.exports = function (seriesType, ecModel, api) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var data = seriesModel.getData();
	            var sampling = seriesModel.get('sampling');
	            var coordSys = seriesModel.coordinateSystem;
	            // Only cartesian2d support down sampling
	            if (coordSys.type === 'cartesian2d' && sampling) {
	                var baseAxis = coordSys.getBaseAxis();
	                var valueAxis = coordSys.getOtherAxis(baseAxis);
	                var extent = baseAxis.getExtent();
	                // Coordinste system has been resized
	                var size = extent[1] - extent[0];
	                var rate = Math.round(data.count() / size);
	                if (rate > 1) {
	                    var sampler;
	                    if (typeof sampling === 'string') {
	                        sampler = samplers[sampling];
	                    }
	                    else if (typeof sampling === 'function') {
	                        sampler = sampling;
	                    }
	                    if (sampler) {
	                        data = data.downSample(
	                            valueAxis.dim, 1 / rate, sampler, indexSampler
	                        );
	                        seriesModel.setData(data);
	                    }
	                }
	            }
	        }, this);
	    };


/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);
	    var echarts = __webpack_require__(240);

	    __webpack_require__(353);

	    __webpack_require__(370);

	    // Grid view
	    echarts.extendComponentView({

	        type: 'grid',

	        render: function (gridModel, ecModel) {
	            this.group.removeAll();
	            if (gridModel.get('show')) {
	                this.group.add(new graphic.Rect({
	                    shape: gridModel.coordinateSystem.getRect(),
	                    style: zrUtil.defaults({
	                        fill: gridModel.get('backgroundColor')
	                    }, gridModel.getItemStyle()),
	                    silent: true,
	                    z2: -1
	                }));
	            }
	        }

	    });

	    echarts.registerPreprocessor(function (option) {
	        // Only create grid when need
	        if (option.xAxis && option.yAxis && !option.grid) {
	            option.grid = {};
	        }
	    });


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Grid is a region which contains at most 4 cartesian systems
	 *
	 * TODO Default cartesian
	 */
	var factory = exports;

	    var layout = __webpack_require__(260);
	    var axisHelper = __webpack_require__(354);

	    var zrUtil = __webpack_require__(243);
	    var Cartesian2D = __webpack_require__(360);
	    var Axis2D = __webpack_require__(362);

	    var each = zrUtil.each;

	    var ifAxisCrossZero = axisHelper.ifAxisCrossZero;
	    var niceScaleExtent = axisHelper.niceScaleExtent;

	    // 依赖 GridModel, AxisModel 做预处理
	    __webpack_require__(365);

	    /**
	     * Check if the axis is used in the specified grid
	     * @inner
	     */
	    function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
	        return axisModel.getCoordSysModel() === gridModel;
	    }

	    function getLabelUnionRect(axis) {
	        var axisModel = axis.model;
	        var labels = axisModel.getFormattedLabels();
	        var textStyleModel = axisModel.getModel('axisLabel.textStyle');
	        var rect;
	        var step = 1;
	        var labelCount = labels.length;
	        if (labelCount > 40) {
	            // Simple optimization for large amount of labels
	            step = Math.ceil(labelCount / 40);
	        }
	        for (var i = 0; i < labelCount; i += step) {
	            if (!axis.isLabelIgnored(i)) {
	                var singleRect = textStyleModel.getTextRect(labels[i]);
	                // FIXME consider label rotate
	                rect ? rect.union(singleRect) : (rect = singleRect);
	            }
	        }
	        return rect;
	    }

	    function Grid(gridModel, ecModel, api) {
	        /**
	         * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
	         * @private
	         */
	        this._coordsMap = {};

	        /**
	         * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
	         * @private
	         */
	        this._coordsList = [];

	        /**
	         * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
	         * @private
	         */
	        this._axesMap = {};

	        /**
	         * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
	         * @private
	         */
	        this._axesList = [];

	        this._initCartesian(gridModel, ecModel, api);

	        this._model = gridModel;
	    }

	    var gridProto = Grid.prototype;

	    gridProto.type = 'grid';

	    gridProto.getRect = function () {
	        return this._rect;
	    };

	    gridProto.update = function (ecModel, api) {

	        var axesMap = this._axesMap;

	        this._updateScale(ecModel, this._model);

	        function ifAxisCanNotOnZero(otherAxisDim) {
	            var axes = axesMap[otherAxisDim];
	            for (var idx in axes) {
	                if (axes.hasOwnProperty(idx)) {
	                    var axis = axes[idx];
	                    if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        }

	        each(axesMap.x, function (xAxis) {
	            niceScaleExtent(xAxis, xAxis.model);
	        });
	        each(axesMap.y, function (yAxis) {
	            niceScaleExtent(yAxis, yAxis.model);
	        });
	        // Fix configuration
	        each(axesMap.x, function (xAxis) {
	            // onZero can not be enabled in these two situations
	            // 1. When any other axis is a category axis
	            // 2. When any other axis not across 0 point
	            if (ifAxisCanNotOnZero('y')) {
	                xAxis.onZero = false;
	            }
	        });
	        each(axesMap.y, function (yAxis) {
	            if (ifAxisCanNotOnZero('x')) {
	                yAxis.onZero = false;
	            }
	        });

	        // Resize again if containLabel is enabled
	        // FIXME It may cause getting wrong grid size in data processing stage
	        this.resize(this._model, api);
	    };

	    /**
	     * Resize the grid
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    gridProto.resize = function (gridModel, api) {

	        var gridRect = layout.getLayoutRect(
	            gridModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            });

	        this._rect = gridRect;

	        var axesList = this._axesList;

	        adjustAxes();

	        // Minus label size
	        if (gridModel.get('containLabel')) {
	            each(axesList, function (axis) {
	                if (!axis.model.get('axisLabel.inside')) {
	                    var labelUnionRect = getLabelUnionRect(axis);
	                    if (labelUnionRect) {
	                        var dim = axis.isHorizontal() ? 'height' : 'width';
	                        var margin = axis.model.get('axisLabel.margin');
	                        gridRect[dim] -= labelUnionRect[dim] + margin;
	                        if (axis.position === 'top') {
	                            gridRect.y += labelUnionRect.height + margin;
	                        }
	                        else if (axis.position === 'left')  {
	                            gridRect.x += labelUnionRect.width + margin;
	                        }
	                    }
	                }
	            });

	            adjustAxes();
	        }

	        function adjustAxes() {
	            each(axesList, function (axis) {
	                var isHorizontal = axis.isHorizontal();
	                var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
	                var idx = axis.inverse ? 1 : 0;
	                axis.setExtent(extent[idx], extent[1 - idx]);
	                updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);
	            });
	        }
	    };

	    /**
	     * @param {string} axisType
	     * @param {ndumber} [axisIndex]
	     */
	    gridProto.getAxis = function (axisType, axisIndex) {
	        var axesMapOnDim = this._axesMap[axisType];
	        if (axesMapOnDim != null) {
	            if (axisIndex == null) {
	                // Find first axis
	                for (var name in axesMapOnDim) {
	                    if (axesMapOnDim.hasOwnProperty(name)) {
	                        return axesMapOnDim[name];
	                    }
	                }
	            }
	            return axesMapOnDim[axisIndex];
	        }
	    };

	    gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
	        if (xAxisIndex != null && yAxisIndex != null) {
	            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	            return this._coordsMap[key];
	        }
	        else {
	            // When only xAxisIndex or yAxisIndex given, find its first cartesian.
	            for (var i = 0, coordList = this._coordsList; i < coordList.length; i++) {
	                if (coordList[i].getAxis('x').index === xAxisIndex
	                    || coordList[i].getAxis('y').index === yAxisIndex
	                ) {
	                    return coordList[i];
	                }
	            }
	        }
	    };

	    /**
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    gridProto.convertToPixel = function (ecModel, finder, value) {
	        var target = this._findConvertTarget(ecModel, finder);

	        return target.cartesian
	            ? target.cartesian.dataToPoint(value)
	            : target.axis
	            ? target.axis.toGlobalCoord(target.axis.dataToCoord(value))
	            : null;
	    };

	    /**
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    gridProto.convertFromPixel = function (ecModel, finder, value) {
	        var target = this._findConvertTarget(ecModel, finder);

	        return target.cartesian
	            ? target.cartesian.pointToData(value)
	            : target.axis
	            ? target.axis.coordToData(target.axis.toLocalCoord(value))
	            : null;
	    };

	    /**
	     * @inner
	     */
	    gridProto._findConvertTarget = function (ecModel, finder) {
	        var seriesModel = finder.seriesModel;
	        var xAxisModel = finder.xAxisModel
	            || (seriesModel && seriesModel.getReferringComponents('xAxis')[0]);
	        var yAxisModel = finder.yAxisModel
	            || (seriesModel && seriesModel.getReferringComponents('yAxis')[0]);
	        var gridModel = finder.gridModel;
	        var coordsList = this._coordsList;
	        var cartesian;
	        var axis;

	        if (seriesModel) {
	            cartesian = seriesModel.coordinateSystem;
	            zrUtil.indexOf(coordsList, cartesian) < 0 && (cartesian = null);
	        }
	        else if (xAxisModel && yAxisModel) {
	            cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
	        }
	        else if (xAxisModel) {
	            axis = this.getAxis('x', xAxisModel.componentIndex);
	        }
	        else if (yAxisModel) {
	            axis = this.getAxis('y', yAxisModel.componentIndex);
	        }
	        // Lowest priority.
	        else if (gridModel) {
	            var grid = gridModel.coordinateSystem;
	            if (grid === this) {
	                cartesian = this._coordsList[0];
	            }
	        }

	        return {cartesian: cartesian, axis: axis};
	    };

	    /**
	     * @implements
	     * see {module:echarts/CoodinateSystem}
	     */
	    gridProto.containPoint = function (point) {
	        var coord = this._coordsList[0];
	        if (coord) {
	            return coord.containPoint(point);
	        }
	    };

	    /**
	     * Initialize cartesian coordinate systems
	     * @private
	     */
	    gridProto._initCartesian = function (gridModel, ecModel, api) {
	        var axisPositionUsed = {
	            left: false,
	            right: false,
	            top: false,
	            bottom: false
	        };

	        var axesMap = {
	            x: {},
	            y: {}
	        };
	        var axesCount = {
	            x: 0,
	            y: 0
	        };

	        /// Create axis
	        ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
	        ecModel.eachComponent('yAxis', createAxisCreator('y'), this);

	        if (!axesCount.x || !axesCount.y) {
	            // Roll back when there no either x or y axis
	            this._axesMap = {};
	            this._axesList = [];
	            return;
	        }

	        this._axesMap = axesMap;

	        /// Create cartesian2d
	        each(axesMap.x, function (xAxis, xAxisIndex) {
	            each(axesMap.y, function (yAxis, yAxisIndex) {
	                var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	                var cartesian = new Cartesian2D(key);

	                cartesian.grid = this;

	                this._coordsMap[key] = cartesian;
	                this._coordsList.push(cartesian);

	                cartesian.addAxis(xAxis);
	                cartesian.addAxis(yAxis);
	            }, this);
	        }, this);

	        function createAxisCreator(axisType) {
	            return function (axisModel, idx) {
	                if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
	                    return;
	                }

	                var axisPosition = axisModel.get('position');
	                if (axisType === 'x') {
	                    // Fix position
	                    if (axisPosition !== 'top' && axisPosition !== 'bottom') {
	                        // Default bottom of X
	                        axisPosition = 'bottom';
	                        if (axisPositionUsed[axisPosition]) {
	                            axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
	                        }
	                    }
	                }
	                else {
	                    // Fix position
	                    if (axisPosition !== 'left' && axisPosition !== 'right') {
	                        // Default left of Y
	                        axisPosition = 'left';
	                        if (axisPositionUsed[axisPosition]) {
	                            axisPosition = axisPosition === 'left' ? 'right' : 'left';
	                        }
	                    }
	                }
	                axisPositionUsed[axisPosition] = true;

	                var axis = new Axis2D(
	                    axisType, axisHelper.createScaleByModel(axisModel),
	                    [0, 0],
	                    axisModel.get('type'),
	                    axisPosition
	                );

	                var isCategory = axis.type === 'category';
	                axis.onBand = isCategory && axisModel.get('boundaryGap');
	                axis.inverse = axisModel.get('inverse');

	                axis.onZero = axisModel.get('axisLine.onZero');

	                // Inject axis into axisModel
	                axisModel.axis = axis;

	                // Inject axisModel into axis
	                axis.model = axisModel;

	                // Inject grid info axis
	                axis.grid = this;

	                // Index of axis, can be used as key
	                axis.index = idx;

	                this._axesList.push(axis);

	                axesMap[axisType][idx] = axis;
	                axesCount[axisType]++;
	            };
	        }
	    };

	    /**
	     * Update cartesian properties from series
	     * @param  {module:echarts/model/Option} option
	     * @private
	     */
	    gridProto._updateScale = function (ecModel, gridModel) {
	        // Reset scale
	        zrUtil.each(this._axesList, function (axis) {
	            axis.scale.setExtent(Infinity, -Infinity);
	        });
	        ecModel.eachSeries(function (seriesModel) {
	            if (isCartesian2D(seriesModel)) {
	                var axesModels = findAxesModels(seriesModel, ecModel);
	                var xAxisModel = axesModels[0];
	                var yAxisModel = axesModels[1];

	                if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel)
	                    || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)
	                 ) {
	                    return;
	                }

	                var cartesian = this.getCartesian(
	                    xAxisModel.componentIndex, yAxisModel.componentIndex
	                );
	                var data = seriesModel.getData();
	                var xAxis = cartesian.getAxis('x');
	                var yAxis = cartesian.getAxis('y');

	                if (data.type === 'list') {
	                    unionExtent(data, xAxis, seriesModel);
	                    unionExtent(data, yAxis, seriesModel);
	                }
	            }
	        }, this);

	        function unionExtent(data, axis, seriesModel) {
	            each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {
	                axis.scale.unionExtentFromData(data, dim);
	            });
	        }
	    };

	    /**
	     * @inner
	     */
	    function updateAxisTransfrom(axis, coordBase) {
	        var axisExtent = axis.getExtent();
	        var axisExtentSum = axisExtent[0] + axisExtent[1];

	        // Fast transform
	        axis.toGlobalCoord = axis.dim === 'x'
	            ? function (coord) {
	                return coord + coordBase;
	            }
	            : function (coord) {
	                return axisExtentSum - coord + coordBase;
	            };
	        axis.toLocalCoord = axis.dim === 'x'
	            ? function (coord) {
	                return coord - coordBase;
	            }
	            : function (coord) {
	                return axisExtentSum - coord + coordBase;
	            };
	    }

	    var axesTypes = ['xAxis', 'yAxis'];
	    /**
	     * @inner
	     */
	    function findAxesModels(seriesModel, ecModel) {
	        return zrUtil.map(axesTypes, function (axisType) {
	            var axisModel = seriesModel.getReferringComponents(axisType)[0];

	            if (__DEV__) {
	                if (!axisModel) {
	                    throw new Error(axisType + ' "' + zrUtil.retrieve(
	                        seriesModel.get(axisType + 'Index'),
	                        seriesModel.get(axisType + 'Id'),
	                        0
	                    ) + '" not found');
	                }
	            }
	            return axisModel;
	        });
	    }

	    /**
	     * @inner
	     */
	    function isCartesian2D(seriesModel) {
	        return seriesModel.get('coordinateSystem') === 'cartesian2d';
	    }

	    Grid.create = function (ecModel, api) {
	        var grids = [];
	        ecModel.eachComponent('grid', function (gridModel, idx) {
	            var grid = new Grid(gridModel, ecModel, api);
	            grid.name = 'grid_' + idx;
	            grid.resize(gridModel, api);

	            gridModel.coordinateSystem = grid;

	            grids.push(grid);
	        });

	        // Inject the coordinateSystems into seriesModel
	        ecModel.eachSeries(function (seriesModel) {
	            if (!isCartesian2D(seriesModel)) {
	                return;
	            }

	            var axesModels = findAxesModels(seriesModel, ecModel);
	            var xAxisModel = axesModels[0];
	            var yAxisModel = axesModels[1];

	            var gridModel = xAxisModel.getCoordSysModel();

	            if (__DEV__) {
	                if (!gridModel) {
	                    throw new Error(
	                        'Grid "' + zrUtil.retrieve(
	                            xAxisModel.get('gridIndex'),
	                            xAxisModel.get('gridId'),
	                            0
	                        ) + '" not found'
	                    );
	                }
	                if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) {
	                    throw new Error('xAxis and yAxis must use the same grid');
	                }
	            }

	            var grid = gridModel.coordinateSystem;

	            seriesModel.coordinateSystem = grid.getCartesian(
	                xAxisModel.componentIndex, yAxisModel.componentIndex
	            );
	        });

	        return grids;
	    };

	    // For deciding which dimensions to use when creating list data
	    Grid.dimensions = Cartesian2D.prototype.dimensions;

	    __webpack_require__(265).register('cartesian2d', Grid);

	    module.exports = Grid;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	

	    var OrdinalScale = __webpack_require__(355);
	    var IntervalScale = __webpack_require__(357);
	    __webpack_require__(358);
	    __webpack_require__(359);
	    var Scale = __webpack_require__(356);

	    var numberUtil = __webpack_require__(246);
	    var zrUtil = __webpack_require__(243);
	    var textContain = __webpack_require__(247);
	    var axisHelper = {};

	    /**
	     * Get axis scale extent before niced.
	     * Item of returned array can only be number (including Infinity and NaN).
	     */
	    axisHelper.getScaleExtent = function (axis, model) {
	        var scale = axis.scale;
	        var scaleType = scale.type;

	        var min = model.getMin();
	        var max = model.getMax();
	        var fixMin = min != null;
	        var fixMax = max != null;
	        var originalExtent = scale.getExtent();

	        var axisDataLen;
	        var boundaryGap;
	        var span;
	        if (scaleType === 'ordinal') {
	            axisDataLen = (model.get('data') || []).length;
	        }
	        else {
	            boundaryGap = model.get('boundaryGap');
	            if (!zrUtil.isArray(boundaryGap)) {
	                boundaryGap = [boundaryGap || 0, boundaryGap || 0];
	            }
	            boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
	            boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
	            span = originalExtent[1] - originalExtent[0];
	        }

	        if (min == null) {
	            min = scaleType === 'ordinal'
	                ? (axisDataLen ? 0 : NaN)
	                : originalExtent[0] - boundaryGap[0] * span;
	        }
	        if (max == null) {
	            max = scaleType === 'ordinal'
	                ? (axisDataLen ? axisDataLen - 1 : NaN)
	                : originalExtent[1] + boundaryGap[1] * span;
	        }

	        if (min === 'dataMin') {
	            min = originalExtent[0];
	        }
	        if (max === 'dataMax') {
	            max = originalExtent[1];
	        }

	        (min == null || !isFinite(min)) && (min = NaN);
	        (max == null || !isFinite(max)) && (max = NaN);

	        axis.setBlank(zrUtil.eqNaN(min) || zrUtil.eqNaN(max));

	        // Evaluate if axis needs cross zero
	        if (model.getNeedCrossZero()) {
	            // Axis is over zero and min is not set
	            if (min > 0 && max > 0 && !fixMin) {
	                min = 0;
	            }
	            // Axis is under zero and max is not set
	            if (min < 0 && max < 0 && !fixMax) {
	                max = 0;
	            }
	        }

	        return [min, max];
	    };

	    axisHelper.niceScaleExtent = function (axis, model) {
	        var scale = axis.scale;
	        var extent = axisHelper.getScaleExtent(axis, model);
	        var fixMin = model.getMin() != null;
	        var fixMax = model.getMax() != null;
	        var splitNumber = model.get('splitNumber');

	        if (scale.type === 'log') {
	            scale.base = model.get('logBase');
	        }

	        scale.setExtent(extent[0], extent[1]);
	        scale.niceExtent(splitNumber, fixMin, fixMax);

	        // Use minInterval to constraint the calculated interval.
	        // If calculated interval is less than minInterval. increase the interval quantity until
	        // it is larger than minInterval.
	        // For example:
	        //  minInterval is 1, calculated interval is 0.2, so increase it to be 1. In this way we can get
	        //  an integer axis.
	        var minInterval = model.get('minInterval');
	        if (isFinite(minInterval) && !fixMin && !fixMax && scale.type === 'interval') {
	            var interval = scale.getInterval();
	            var intervalScale = Math.max(Math.abs(interval), minInterval) / interval;
	            // while (interval < minInterval) {
	            //     var quantity = numberUtil.quantity(interval);
	            //     interval = quantity * 10;
	            //     scaleQuantity *= 10;
	            // }
	            extent = scale.getExtent();
	            var origin = (extent[1] + extent[0]) / 2;
	            scale.setExtent(
	                intervalScale * (extent[0] - origin) + origin,
	                intervalScale * (extent[1] - origin) + origin
	            );
	            scale.niceExtent(splitNumber);
	        }

	        // If some one specified the min, max. And the default calculated interval
	        // is not good enough. He can specify the interval. It is often appeared
	        // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
	        // to be 60.
	        // FIXME
	        var interval = model.get('interval');
	        if (interval != null) {
	            scale.setInterval && scale.setInterval(interval);
	        }
	    };

	    /**
	     * @param {module:echarts/model/Model} model
	     * @param {string} [axisType] Default retrieve from model.type
	     * @return {module:echarts/scale/*}
	     */
	    axisHelper.createScaleByModel = function(model, axisType) {
	        axisType = axisType || model.get('type');
	        if (axisType) {
	            switch (axisType) {
	                // Buildin scale
	                case 'category':
	                    return new OrdinalScale(
	                        model.getCategories(), [Infinity, -Infinity]
	                    );
	                case 'value':
	                    return new IntervalScale();
	                // Extended scale, like time and log
	                default:
	                    return (Scale.getClass(axisType) || IntervalScale).create(model);
	            }
	        }
	    };

	    /**
	     * Check if the axis corss 0
	     */
	    axisHelper.ifAxisCrossZero = function (axis) {
	        var dataExtent = axis.scale.getExtent();
	        var min = dataExtent[0];
	        var max = dataExtent[1];
	        return !((min > 0 && max > 0) || (min < 0 && max < 0));
	    };

	    /**
	     * @param {Array.<number>} tickCoords In axis self coordinate.
	     * @param {Array.<string>} labels
	     * @param {string} font
	     * @param {boolean} isAxisHorizontal
	     * @return {number}
	     */
	    axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {
	        // FIXME
	        // 不同角的axis和label，不只是horizontal和vertical.

	        var textSpaceTakenRect;
	        var autoLabelInterval = 0;
	        var accumulatedLabelInterval = 0;

	        var step = 1;
	        if (labels.length > 40) {
	            // Simple optimization for large amount of labels
	            step = Math.floor(labels.length / 40);
	        }

	        for (var i = 0; i < tickCoords.length; i += step) {
	            var tickCoord = tickCoords[i];
	            var rect = textContain.getBoundingRect(
	                labels[i], font, 'center', 'top'
	            );
	            rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;
	            // FIXME Magic number 1.5
	            rect[isAxisHorizontal ? 'width' : 'height'] *= 1.3;
	            if (!textSpaceTakenRect) {
	                textSpaceTakenRect = rect.clone();
	            }
	            // There is no space for current label;
	            else if (textSpaceTakenRect.intersect(rect)) {
	                accumulatedLabelInterval++;
	                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);
	            }
	            else {
	                textSpaceTakenRect.union(rect);
	                // Reset
	                accumulatedLabelInterval = 0;
	            }
	        }
	        if (autoLabelInterval === 0 && step > 1) {
	            return step;
	        }
	        return (autoLabelInterval + 1) * step - 1;
	    };

	    /**
	     * @param {Object} axis
	     * @param {Function} labelFormatter
	     * @return {Array.<string>}
	     */
	    axisHelper.getFormattedLabels = function (axis, labelFormatter) {
	        var scale = axis.scale;
	        var labels = scale.getTicksLabels();
	        var ticks = scale.getTicks();
	        if (typeof labelFormatter === 'string') {
	            labelFormatter = (function (tpl) {
	                return function (val) {
	                    return tpl.replace('{value}', val != null ? val : '');
	                };
	            })(labelFormatter);
	            // Consider empty array
	            return zrUtil.map(labels, labelFormatter);
	        }
	        else if (typeof labelFormatter === 'function') {
	            return zrUtil.map(ticks, function (tick, idx) {
	                return labelFormatter(
	                    axis.type === 'category' ? scale.getLabel(tick) : tick,
	                    idx
	                );
	            }, this);
	        }
	        else {
	            return labels;
	        }
	    };

	    module.exports = axisHelper;


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Linear continuous scale
	 * @module echarts/coord/scale/Ordinal
	 *
	 * http://en.wikipedia.org/wiki/Level_of_measurement
	 */

	// FIXME only one data


	    var zrUtil = __webpack_require__(243);
	    var Scale = __webpack_require__(356);

	    var scaleProto = Scale.prototype;

	    var OrdinalScale = Scale.extend({

	        type: 'ordinal',

	        init: function (data, extent) {
	            this._data = data;
	            this._extent = extent || [0, data.length - 1];
	        },

	        parse: function (val) {
	            return typeof val === 'string'
	                ? zrUtil.indexOf(this._data, val)
	                // val might be float.
	                : Math.round(val);
	        },

	        contain: function (rank) {
	            rank = this.parse(rank);
	            return scaleProto.contain.call(this, rank)
	                && this._data[rank] != null;
	        },

	        /**
	         * Normalize given rank or name to linear [0, 1]
	         * @param {number|string} [val]
	         * @return {number}
	         */
	        normalize: function (val) {
	            return scaleProto.normalize.call(this, this.parse(val));
	        },

	        scale: function (val) {
	            return Math.round(scaleProto.scale.call(this, val));
	        },

	        /**
	         * @return {Array}
	         */
	        getTicks: function () {
	            var ticks = [];
	            var extent = this._extent;
	            var rank = extent[0];

	            while (rank <= extent[1]) {
	                ticks.push(rank);
	                rank++;
	            }

	            return ticks;
	        },

	        /**
	         * Get item on rank n
	         * @param {number} n
	         * @return {string}
	         */
	        getLabel: function (n) {
	            return this._data[n];
	        },

	        /**
	         * @return {number}
	         */
	        count: function () {
	            return this._extent[1] - this._extent[0] + 1;
	        },

	        /**
	         * @override
	         */
	        unionExtentFromData: function (data, dim) {
	            this.unionExtent(data.getDataExtent(dim, false));
	        },

	        niceTicks: zrUtil.noop,
	        niceExtent: zrUtil.noop
	    });

	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    OrdinalScale.create = function () {
	        return new OrdinalScale();
	    };

	    module.exports = OrdinalScale;


/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * // Scale class management
	 * @module echarts/scale/Scale
	 */


	    var clazzUtil = __webpack_require__(252);

	    function Scale() {
	        /**
	         * Extent
	         * @type {Array.<number>}
	         * @protected
	         */
	        this._extent = [Infinity, -Infinity];

	        /**
	         * Step is calculated in adjustExtent
	         * @type {Array.<number>}
	         * @protected
	         */
	        this._interval = 0;

	        this.init && this.init.apply(this, arguments);
	    }

	    var scaleProto = Scale.prototype;

	    /**
	     * Parse input val to valid inner number.
	     * @param {*} val
	     * @return {number}
	     */
	    scaleProto.parse = function (val) {
	        // Notice: This would be a trap here, If the implementation
	        // of this method depends on extent, and this method is used
	        // before extent set (like in dataZoom), it would be wrong.
	        // Nevertheless, parse does not depend on extent generally.
	        return val;
	    };

	    scaleProto.contain = function (val) {
	        var extent = this._extent;
	        return val >= extent[0] && val <= extent[1];
	    };

	    /**
	     * Normalize value to linear [0, 1], return 0.5 if extent span is 0
	     * @param {number} val
	     * @return {number}
	     */
	    scaleProto.normalize = function (val) {
	        var extent = this._extent;
	        if (extent[1] === extent[0]) {
	            return 0.5;
	        }
	        return (val - extent[0]) / (extent[1] - extent[0]);
	    };

	    /**
	     * Scale normalized value
	     * @param {number} val
	     * @return {number}
	     */
	    scaleProto.scale = function (val) {
	        var extent = this._extent;
	        return val * (extent[1] - extent[0]) + extent[0];
	    };

	    /**
	     * Set extent from data
	     * @param {Array.<number>} other
	     */
	    scaleProto.unionExtent = function (other) {
	        var extent = this._extent;
	        other[0] < extent[0] && (extent[0] = other[0]);
	        other[1] > extent[1] && (extent[1] = other[1]);
	        // not setExtent because in log axis it may transformed to power
	        // this.setExtent(extent[0], extent[1]);
	    };

	    /**
	     * Set extent from data
	     * @param {module:echarts/data/List} data
	     * @param {string} dim
	     */
	    scaleProto.unionExtentFromData = function (data, dim) {
	        this.unionExtent(data.getDataExtent(dim, true));
	    };

	    /**
	     * Get extent
	     * @return {Array.<number>}
	     */
	    scaleProto.getExtent = function () {
	        return this._extent.slice();
	    };

	    /**
	     * Set extent
	     * @param {number} start
	     * @param {number} end
	     */
	    scaleProto.setExtent = function (start, end) {
	        var thisExtent = this._extent;
	        if (!isNaN(start)) {
	            thisExtent[0] = start;
	        }
	        if (!isNaN(end)) {
	            thisExtent[1] = end;
	        }
	    };

	    /**
	     * @return {Array.<string>}
	     */
	    scaleProto.getTicksLabels = function () {
	        var labels = [];
	        var ticks = this.getTicks();
	        for (var i = 0; i < ticks.length; i++) {
	            labels.push(this.getLabel(ticks[i]));
	        }
	        return labels;
	    };

	    clazzUtil.enableClassExtend(Scale);
	    clazzUtil.enableClassManagement(Scale, {
	        registerWhenExtend: true
	    });

	    module.exports = Scale;


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Interval scale
	 * @module echarts/scale/Interval
	 */



	    var numberUtil = __webpack_require__(246);
	    var formatUtil = __webpack_require__(245);
	    var Scale = __webpack_require__(356);

	    var mathFloor = Math.floor;
	    var mathCeil = Math.ceil;

	    var getPrecisionSafe = numberUtil.getPrecisionSafe;
	    var roundingErrorFix = numberUtil.round;
	    /**
	     * @alias module:echarts/coord/scale/Interval
	     * @constructor
	     */
	    var IntervalScale = Scale.extend({

	        type: 'interval',

	        _interval: 0,

	        setExtent: function (start, end) {
	            var thisExtent = this._extent;
	            //start,end may be a Number like '25',so...
	            if (!isNaN(start)) {
	                thisExtent[0] = parseFloat(start);
	            }
	            if (!isNaN(end)) {
	                thisExtent[1] = parseFloat(end);
	            }
	        },

	        unionExtent: function (other) {
	            var extent = this._extent;
	            other[0] < extent[0] && (extent[0] = other[0]);
	            other[1] > extent[1] && (extent[1] = other[1]);

	            // unionExtent may called by it's sub classes
	            IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
	        },
	        /**
	         * Get interval
	         */
	        getInterval: function () {
	            if (!this._interval) {
	                this.niceTicks();
	            }
	            return this._interval;
	        },

	        /**
	         * Set interval
	         */
	        setInterval: function (interval) {
	            this._interval = interval;
	            // Dropped auto calculated niceExtent and use user setted extent
	            // We assume user wan't to set both interval, min, max to get a better result
	            this._niceExtent = this._extent.slice();
	        },

	        /**
	         * @return {Array.<number>}
	         */
	        getTicks: function () {
	            if (!this._interval) {
	                this.niceTicks();
	            }
	            var interval = this._interval;
	            var extent = this._extent;
	            var ticks = [];

	            // Consider this case: using dataZoom toolbox, zoom and zoom.
	            var safeLimit = 10000;

	            if (interval) {
	                var niceExtent = this._niceExtent;
	                var precision = getPrecisionSafe(interval) + 2;

	                if (extent[0] < niceExtent[0]) {
	                    ticks.push(extent[0]);
	                }
	                var tick = niceExtent[0];

	                while (tick <= niceExtent[1]) {
	                    ticks.push(tick);
	                    // Avoid rounding error
	                    tick = roundingErrorFix(tick + interval, precision);
	                    if (ticks.length > safeLimit) {
	                        return [];
	                    }
	                }
	                // Consider this case: the last item of ticks is smaller
	                // than niceExtent[1] and niceExtent[1] === extent[1].
	                if (extent[1] > (ticks.length ? ticks[ticks.length - 1] : niceExtent[1])) {
	                    ticks.push(extent[1]);
	                }
	            }

	            return ticks;
	        },

	        /**
	         * @return {Array.<string>}
	         */
	        getTicksLabels: function () {
	            var labels = [];
	            var ticks = this.getTicks();
	            for (var i = 0; i < ticks.length; i++) {
	                labels.push(this.getLabel(ticks[i]));
	            }
	            return labels;
	        },

	        /**
	         * @param {number} n
	         * @return {number}
	         */
	        getLabel: function (data) {
	            return formatUtil.addCommas(data);
	        },

	        /**
	         * Update interval and extent of intervals for nice ticks
	         *
	         * @param {number} [splitNumber = 5] Desired number of ticks
	         */
	        niceTicks: function (splitNumber) {
	            splitNumber = splitNumber || 5;
	            var extent = this._extent;
	            var span = extent[1] - extent[0];
	            if (!isFinite(span)) {
	                return;
	            }
	            // User may set axis min 0 and data are all negative
	            // FIXME If it needs to reverse ?
	            if (span < 0) {
	                span = -span;
	                extent.reverse();
	            }

	            // From "Nice Numbers for Graph Labels" of Graphic Gems
	            // var niceSpan = numberUtil.nice(span, false);
	            var step = roundingErrorFix(
	                numberUtil.nice(span / splitNumber, true),
	                Math.max(
	                    getPrecisionSafe(extent[0]),
	                    getPrecisionSafe(extent[1])
	                // extent may be [0, 1], and step should have 1 more digits.
	                // To make it safe we add 2 more digits
	                ) + 2
	            );

	            var precision = getPrecisionSafe(step) + 2;
	            // Niced extent inside original extent
	            var niceExtent = [
	                roundingErrorFix(mathCeil(extent[0] / step) * step, precision),
	                roundingErrorFix(mathFloor(extent[1] / step) * step, precision)
	            ];

	            this._interval = step;
	            this._niceExtent = niceExtent;
	        },

	        /**
	         * Nice extent.
	         * @param {number} [splitNumber = 5] Given approx tick number
	         * @param {boolean} [fixMin=false]
	         * @param {boolean} [fixMax=false]
	         */
	        niceExtent: function (splitNumber, fixMin, fixMax) {
	            var extent = this._extent;
	            // If extent start and end are same, expand them
	            if (extent[0] === extent[1]) {
	                if (extent[0] !== 0) {
	                    // Expand extent
	                    var expandSize = extent[0];
	                    // In the fowllowing case
	                    //      Axis has been fixed max 100
	                    //      Plus data are all 100 and axis extent are [100, 100].
	                    // Extend to the both side will cause expanded max is larger than fixed max.
	                    // So only expand to the smaller side.
	                    if (!fixMax) {
	                        extent[1] += expandSize / 2;
	                        extent[0] -= expandSize / 2;
	                    }
	                    else {
	                        extent[0] -= expandSize / 2;
	                    }
	                }
	                else {
	                    extent[1] = 1;
	                }
	            }
	            var span = extent[1] - extent[0];
	            // If there are no data and extent are [Infinity, -Infinity]
	            if (!isFinite(span)) {
	                extent[0] = 0;
	                extent[1] = 1;
	            }

	            this.niceTicks(splitNumber);

	            // var extent = this._extent;
	            var interval = this._interval;

	            if (!fixMin) {
	                extent[0] = roundingErrorFix(mathFloor(extent[0] / interval) * interval);
	            }
	            if (!fixMax) {
	                extent[1] = roundingErrorFix(mathCeil(extent[1] / interval) * interval);
	            }
	        }
	    });

	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    IntervalScale.create = function () {
	        return new IntervalScale();
	    };

	    module.exports = IntervalScale;



/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Interval scale
	 * @module echarts/coord/scale/Time
	 */



	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);
	    var formatUtil = __webpack_require__(245);

	    var IntervalScale = __webpack_require__(357);

	    var intervalScaleProto = IntervalScale.prototype;

	    var mathCeil = Math.ceil;
	    var mathFloor = Math.floor;
	    var ONE_SECOND = 1000;
	    var ONE_MINUTE = ONE_SECOND * 60;
	    var ONE_HOUR = ONE_MINUTE * 60;
	    var ONE_DAY = ONE_HOUR * 24;

	    // FIXME 公用？
	    var bisect = function (a, x, lo, hi) {
	        while (lo < hi) {
	            var mid = lo + hi >>> 1;
	            if (a[mid][2] < x) {
	                lo = mid + 1;
	            }
	            else {
	                hi  = mid;
	            }
	        }
	        return lo;
	    };

	    /**
	     * @alias module:echarts/coord/scale/Time
	     * @constructor
	     */
	    var TimeScale = IntervalScale.extend({
	        type: 'time',

	        // Overwrite
	        getLabel: function (val) {
	            var stepLvl = this._stepLvl;

	            var date = new Date(val);

	            return formatUtil.formatTime(stepLvl[0], date);
	        },

	        // Overwrite
	        niceExtent: function (approxTickNum, fixMin, fixMax) {
	            var extent = this._extent;
	            // If extent start and end are same, expand them
	            if (extent[0] === extent[1]) {
	                // Expand extent
	                extent[0] -= ONE_DAY;
	                extent[1] += ONE_DAY;
	            }
	            // If there are no data and extent are [Infinity, -Infinity]
	            if (extent[1] === -Infinity && extent[0] === Infinity) {
	                var d = new Date();
	                extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
	                extent[0] = extent[1] - ONE_DAY;
	            }

	            this.niceTicks(approxTickNum);

	            // var extent = this._extent;
	            var interval = this._interval;

	            if (!fixMin) {
	                extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	            }
	            if (!fixMax) {
	                extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	            }
	        },

	        // Overwrite
	        niceTicks: function (approxTickNum) {
	            approxTickNum = approxTickNum || 10;

	            var extent = this._extent;
	            var span = extent[1] - extent[0];
	            var approxInterval = span / approxTickNum;
	            var scaleLevelsLen = scaleLevels.length;
	            var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);

	            var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
	            var interval = level[2];
	            // Same with interval scale if span is much larger than 1 year
	            if (level[0] === 'year') {
	                var yearSpan = span / interval;

	                // From "Nice Numbers for Graph Labels" of Graphic Gems
	                // var niceYearSpan = numberUtil.nice(yearSpan, false);
	                var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);

	                interval *= yearStep;
	            }

	            var niceExtent = [
	                mathCeil(extent[0] / interval) * interval,
	                mathFloor(extent[1] / interval) * interval
	            ];

	            this._stepLvl = level;
	            // Interval will be used in getTicks
	            this._interval = interval;
	            this._niceExtent = niceExtent;
	        },

	        parse: function (val) {
	            // val might be float.
	            return +numberUtil.parseDate(val);
	        }
	    });

	    zrUtil.each(['contain', 'normalize'], function (methodName) {
	        TimeScale.prototype[methodName] = function (val) {
	            return intervalScaleProto[methodName].call(this, this.parse(val));
	        };
	    });

	    // Steps from d3
	    var scaleLevels = [
	        // Format       step    interval
	        ['hh:mm:ss',    1,      ONE_SECOND],           // 1s
	        ['hh:mm:ss',    5,      ONE_SECOND * 5],       // 5s
	        ['hh:mm:ss',    10,     ONE_SECOND * 10],      // 10s
	        ['hh:mm:ss',    15,     ONE_SECOND * 15],      // 15s
	        ['hh:mm:ss',    30,     ONE_SECOND * 30],      // 30s
	        ['hh:mm\nMM-dd',1,      ONE_MINUTE],          // 1m
	        ['hh:mm\nMM-dd',5,      ONE_MINUTE * 5],      // 5m
	        ['hh:mm\nMM-dd',10,     ONE_MINUTE * 10],     // 10m
	        ['hh:mm\nMM-dd',15,     ONE_MINUTE * 15],     // 15m
	        ['hh:mm\nMM-dd',30,     ONE_MINUTE * 30],     // 30m
	        ['hh:mm\nMM-dd',1,      ONE_HOUR],        // 1h
	        ['hh:mm\nMM-dd',2,      ONE_HOUR * 2],    // 2h
	        ['hh:mm\nMM-dd',6,      ONE_HOUR * 6],    // 6h
	        ['hh:mm\nMM-dd',12,     ONE_HOUR * 12],   // 12h
	        ['MM-dd\nyyyy', 1,      ONE_DAY],   // 1d
	        ['week',        7,      ONE_DAY * 7],        // 7d
	        ['month',       1,      ONE_DAY * 31],       // 1M
	        ['quarter',     3,      ONE_DAY * 380 / 4],  // 3M
	        ['half-year',   6,      ONE_DAY * 380 / 2],  // 6M
	        ['year',        1,      ONE_DAY * 380]       // 1Y
	    ];

	    /**
	     * @return {module:echarts/scale/Time}
	     */
	    TimeScale.create = function () {
	        return new TimeScale();
	    };

	    module.exports = TimeScale;


/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Log scale
	 * @module echarts/scale/Log
	 */


	    var zrUtil = __webpack_require__(243);
	    var Scale = __webpack_require__(356);
	    var numberUtil = __webpack_require__(246);

	    // Use some method of IntervalScale
	    var IntervalScale = __webpack_require__(357);

	    var scaleProto = Scale.prototype;
	    var intervalScaleProto = IntervalScale.prototype;

	    var getPrecisionSafe = numberUtil.getPrecisionSafe;
	    var roundingErrorFix = numberUtil.round;

	    var mathFloor = Math.floor;
	    var mathCeil = Math.ceil;
	    var mathPow = Math.pow;

	    var mathLog = Math.log;

	    var LogScale = Scale.extend({

	        type: 'log',

	        base: 10,

	        $constructor: function () {
	            Scale.apply(this, arguments);
	            this._originalScale = new IntervalScale();
	        },

	        /**
	         * @return {Array.<number>}
	         */
	        getTicks: function () {
	            var originalScale = this._originalScale;
	            var extent = this._extent;
	            var originalExtent = originalScale.getExtent();

	            return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
	                var powVal = numberUtil.round(mathPow(this.base, val));

	                // Fix #4158
	                powVal = (val === extent[0] && originalScale.__fixMin)
	                    ? fixRoundingError(powVal, originalExtent[0])
	                    : powVal;
	                powVal = (val === extent[1] && originalScale.__fixMax)
	                    ? fixRoundingError(powVal, originalExtent[1])
	                    : powVal;

	                return powVal;
	            }, this);
	        },

	        /**
	         * @param {number} val
	         * @return {string}
	         */
	        getLabel: intervalScaleProto.getLabel,

	        /**
	         * @param  {number} val
	         * @return {number}
	         */
	        scale: function (val) {
	            val = scaleProto.scale.call(this, val);
	            return mathPow(this.base, val);
	        },

	        /**
	         * @param {number} start
	         * @param {number} end
	         */
	        setExtent: function (start, end) {
	            var base = this.base;
	            start = mathLog(start) / mathLog(base);
	            end = mathLog(end) / mathLog(base);
	            intervalScaleProto.setExtent.call(this, start, end);
	        },

	        /**
	         * @return {number} end
	         */
	        getExtent: function () {
	            var base = this.base;
	            var extent = scaleProto.getExtent.call(this);
	            extent[0] = mathPow(base, extent[0]);
	            extent[1] = mathPow(base, extent[1]);

	            // Fix #4158
	            var originalScale = this._originalScale;
	            var originalExtent = originalScale.getExtent();
	            originalScale.__fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));
	            originalScale.__fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));

	            return extent;
	        },

	        /**
	         * @param  {Array.<number>} extent
	         */
	        unionExtent: function (extent) {
	            this._originalScale.unionExtent(extent);

	            var base = this.base;
	            extent[0] = mathLog(extent[0]) / mathLog(base);
	            extent[1] = mathLog(extent[1]) / mathLog(base);
	            scaleProto.unionExtent.call(this, extent);
	        },

	        /**
	         * @override
	         */
	        unionExtentFromData: function (data, dim) {
	            this.unionExtent(data.getDataExtent(dim, true, function (val) {
	                return val > 0;
	            }));
	        },

	        /**
	         * Update interval and extent of intervals for nice ticks
	         * @param  {number} [approxTickNum = 10] Given approx tick number
	         */
	        niceTicks: function (approxTickNum) {
	            approxTickNum = approxTickNum || 10;
	            var extent = this._extent;
	            var span = extent[1] - extent[0];
	            if (span === Infinity || span <= 0) {
	                return;
	            }

	            var interval = numberUtil.quantity(span);
	            var err = approxTickNum / span * interval;

	            // Filter ticks to get closer to the desired count.
	            if (err <= 0.5) {
	                interval *= 10;
	            }

	            // Interval should be integer
	            while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {
	                interval *= 10;
	            }

	            var niceExtent = [
	                numberUtil.round(mathCeil(extent[0] / interval) * interval),
	                numberUtil.round(mathFloor(extent[1] / interval) * interval)
	            ];

	            this._interval = interval;
	            this._niceExtent = niceExtent;
	        },

	        /**
	         * Nice extent.
	         * @param {number} [approxTickNum = 10] Given approx tick number
	         * @param {boolean} [fixMin=false]
	         * @param {boolean} [fixMax=false]
	         */
	        niceExtent: function (splitNumber, fixMin, fixMax) {
	            intervalScaleProto.niceExtent.call(this, splitNumber, fixMin, fixMax);

	            var originalScale = this._originalScale;
	            originalScale.__fixMin = fixMin;
	            originalScale.__fixMax = fixMax;
	        }

	    });

	    zrUtil.each(['contain', 'normalize'], function (methodName) {
	        LogScale.prototype[methodName] = function (val) {
	            val = mathLog(val) / mathLog(this.base);
	            return scaleProto[methodName].call(this, val);
	        };
	    });

	    LogScale.create = function () {
	        return new LogScale();
	    };

	    function fixRoundingError(val, originalVal) {
	        return roundingErrorFix(val, getPrecisionSafe(originalVal));
	    }

	    module.exports = LogScale;


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var Cartesian = __webpack_require__(361);

	    function Cartesian2D(name) {

	        Cartesian.call(this, name);
	    }

	    Cartesian2D.prototype = {

	        constructor: Cartesian2D,

	        type: 'cartesian2d',

	        /**
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        dimensions: ['x', 'y'],

	        /**
	         * Base axis will be used on stacking.
	         *
	         * @return {module:echarts/coord/cartesian/Axis2D}
	         */
	        getBaseAxis: function () {
	            return this.getAxesByScale('ordinal')[0]
	                || this.getAxesByScale('time')[0]
	                || this.getAxis('x');
	        },

	        /**
	         * If contain point
	         * @param {Array.<number>} point
	         * @return {boolean}
	         */
	        containPoint: function (point) {
	            var axisX = this.getAxis('x');
	            var axisY = this.getAxis('y');
	            return axisX.contain(axisX.toLocalCoord(point[0]))
	                && axisY.contain(axisY.toLocalCoord(point[1]));
	        },

	        /**
	         * If contain data
	         * @param {Array.<number>} data
	         * @return {boolean}
	         */
	        containData: function (data) {
	            return this.getAxis('x').containData(data[0])
	                && this.getAxis('y').containData(data[1]);
	        },

	        /**
	         * Convert series data to an array of points
	         * @param {module:echarts/data/List} data
	         * @param {boolean} stack
	         * @return {Array}
	         *  Return array of points. For example:
	         *  `[[10, 10], [20, 20], [30, 30]]`
	         */
	        dataToPoints: function (data, stack) {
	            return data.mapArray(['x', 'y'], function (x, y) {
	                return this.dataToPoint([x, y]);
	            }, stack, this);
	        },

	        /**
	         * @param {Array.<number>} data
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (data, clamp) {
	            var xAxis = this.getAxis('x');
	            var yAxis = this.getAxis('y');
	            return [
	                xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)),
	                yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))
	            ];
	        },

	        /**
	         * @param {Array.<number>} point
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        pointToData: function (point, clamp) {
	            var xAxis = this.getAxis('x');
	            var yAxis = this.getAxis('y');
	            return [
	                xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp),
	                yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)
	            ];
	        },

	        /**
	         * Get other axis
	         * @param {module:echarts/coord/cartesian/Axis2D} axis
	         */
	        getOtherAxis: function (axis) {
	            return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
	        }
	    };

	    zrUtil.inherits(Cartesian2D, Cartesian);

	    module.exports = Cartesian2D;


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Cartesian coordinate system
	 * @module  echarts/coord/Cartesian
	 *
	 */


	    var zrUtil = __webpack_require__(243);

	    function dimAxisMapper(dim) {
	        return this._axes[dim];
	    }

	    /**
	     * @alias module:echarts/coord/Cartesian
	     * @constructor
	     */
	    var Cartesian = function (name) {
	        this._axes = {};

	        this._dimList = [];

	        /**
	         * @type {string}
	         */
	        this.name = name || '';
	    };

	    Cartesian.prototype = {

	        constructor: Cartesian,

	        type: 'cartesian',

	        /**
	         * Get axis
	         * @param  {number|string} dim
	         * @return {module:echarts/coord/Cartesian~Axis}
	         */
	        getAxis: function (dim) {
	            return this._axes[dim];
	        },

	        /**
	         * Get axes list
	         * @return {Array.<module:echarts/coord/Cartesian~Axis>}
	         */
	        getAxes: function () {
	            return zrUtil.map(this._dimList, dimAxisMapper, this);
	        },

	        /**
	         * Get axes list by given scale type
	         */
	        getAxesByScale: function (scaleType) {
	            scaleType = scaleType.toLowerCase();
	            return zrUtil.filter(
	                this.getAxes(),
	                function (axis) {
	                    return axis.scale.type === scaleType;
	                }
	            );
	        },

	        /**
	         * Add axis
	         * @param {module:echarts/coord/Cartesian.Axis}
	         */
	        addAxis: function (axis) {
	            var dim = axis.dim;

	            this._axes[dim] = axis;

	            this._dimList.push(dim);
	        },

	        /**
	         * Convert data to coord in nd space
	         * @param {Array.<number>|Object.<string, number>} val
	         * @return {Array.<number>|Object.<string, number>}
	         */
	        dataToCoord: function (val) {
	            return this._dataCoordConvert(val, 'dataToCoord');
	        },

	        /**
	         * Convert coord in nd space to data
	         * @param  {Array.<number>|Object.<string, number>} val
	         * @return {Array.<number>|Object.<string, number>}
	         */
	        coordToData: function (val) {
	            return this._dataCoordConvert(val, 'coordToData');
	        },

	        _dataCoordConvert: function (input, method) {
	            var dimList = this._dimList;

	            var output = input instanceof Array ? [] : {};

	            for (var i = 0; i < dimList.length; i++) {
	                var dim = dimList[i];
	                var axis = this._axes[dim];

	                output[dim] = axis[method](input[dim]);
	            }

	            return output;
	        }
	    };

	    module.exports = Cartesian;


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var Axis = __webpack_require__(363);
	    var axisLabelInterval = __webpack_require__(364);

	    /**
	     * Extend axis 2d
	     * @constructor module:echarts/coord/cartesian/Axis2D
	     * @extends {module:echarts/coord/cartesian/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     * @param {string} position
	     */
	    var Axis2D = function (dim, scale, coordExtent, axisType, position) {
	        Axis.call(this, dim, scale, coordExtent);
	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';

	        /**
	         * Axis position
	         *  - 'top'
	         *  - 'bottom'
	         *  - 'left'
	         *  - 'right'
	         */
	        this.position = position || 'bottom';
	    };

	    Axis2D.prototype = {

	        constructor: Axis2D,

	        /**
	         * Index of axis, can be used as key
	         */
	        index: 0,
	        /**
	         * If axis is on the zero position of the other axis
	         * @type {boolean}
	         */
	        onZero: false,

	        /**
	         * Axis model
	         * @param {module:echarts/coord/cartesian/AxisModel}
	         */
	        model: null,

	        isHorizontal: function () {
	            var position = this.position;
	            return position === 'top' || position === 'bottom';
	        },

	        getGlobalExtent: function () {
	            var ret = this.getExtent();
	            ret[0] = this.toGlobalCoord(ret[0]);
	            ret[1] = this.toGlobalCoord(ret[1]);
	            return ret;
	        },

	        /**
	         * @return {number}
	         */
	        getLabelInterval: function () {
	            var labelInterval = this._labelInterval;
	            if (!labelInterval) {
	                labelInterval = this._labelInterval = axisLabelInterval(this);
	            }
	            return labelInterval;
	        },

	        /**
	         * If label is ignored.
	         * Automatically used when axis is category and label can not be all shown
	         * @param  {number}  idx
	         * @return {boolean}
	         */
	        isLabelIgnored: function (idx) {
	            if (this.type === 'category') {
	                var labelInterval = this.getLabelInterval();
	                return ((typeof labelInterval === 'function')
	                    && !labelInterval(idx, this.scale.getLabel(idx)))
	                    || idx % (labelInterval + 1);
	            }
	        },

	        /**
	         * Transform global coord to local coord,
	         * i.e. var localCoord = axis.toLocalCoord(80);
	         * designate by module:echarts/coord/cartesian/Grid.
	         * @type {Function}
	         */
	        toLocalCoord: null,

	        /**
	         * Transform global coord to local coord,
	         * i.e. var globalCoord = axis.toLocalCoord(40);
	         * designate by module:echarts/coord/cartesian/Grid.
	         * @type {Function}
	         */
	        toGlobalCoord: null

	    };
	    zrUtil.inherits(Axis2D, Axis);

	    module.exports = Axis2D;


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	

	    var numberUtil = __webpack_require__(246);
	    var linearMap = numberUtil.linearMap;
	    var zrUtil = __webpack_require__(243);

	    function fixExtentWithBands(extent, nTick) {
	        var size = extent[1] - extent[0];
	        var len = nTick;
	        var margin = size / len / 2;
	        extent[0] += margin;
	        extent[1] -= margin;
	    }

	    var normalizedExtent = [0, 1];
	    /**
	     * @name module:echarts/coord/CartesianAxis
	     * @constructor
	     */
	    var Axis = function (dim, scale, extent) {

	        /**
	         * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'
	         * @type {string}
	         */
	        this.dim = dim;

	        /**
	         * Axis scale
	         * @type {module:echarts/coord/scale/*}
	         */
	        this.scale = scale;

	        /**
	         * @type {Array.<number>}
	         * @private
	         */
	        this._extent = extent || [0, 0];

	        /**
	         * @type {boolean}
	         */
	        this.inverse = false;

	        /**
	         * Usually true when axis has a ordinal scale
	         * @type {boolean}
	         */
	        this.onBand = false;
	    };

	    Axis.prototype = {

	        constructor: Axis,

	        /**
	         * If axis extent contain given coord
	         * @param {number} coord
	         * @return {boolean}
	         */
	        contain: function (coord) {
	            var extent = this._extent;
	            var min = Math.min(extent[0], extent[1]);
	            var max = Math.max(extent[0], extent[1]);
	            return coord >= min && coord <= max;
	        },

	        /**
	         * If axis extent contain given data
	         * @param {number} data
	         * @return {boolean}
	         */
	        containData: function (data) {
	            return this.contain(this.dataToCoord(data));
	        },

	        /**
	         * Get coord extent.
	         * @return {Array.<number>}
	         */
	        getExtent: function () {
	            var ret = this._extent.slice();
	            return ret;
	        },

	        /**
	         * Get precision used for formatting
	         * @param {Array.<number>} [dataExtent]
	         * @return {number}
	         */
	        getPixelPrecision: function (dataExtent) {
	            return numberUtil.getPixelPrecision(
	                dataExtent || this.scale.getExtent(),
	                this._extent
	            );
	        },

	        /**
	         * Set coord extent
	         * @param {number} start
	         * @param {number} end
	         */
	        setExtent: function (start, end) {
	            var extent = this._extent;
	            extent[0] = start;
	            extent[1] = end;
	        },

	        /**
	         * Convert data to coord. Data is the rank if it has a ordinal scale
	         * @param {number} data
	         * @param  {boolean} clamp
	         * @return {number}
	         */
	        dataToCoord: function (data, clamp) {
	            var extent = this._extent;
	            var scale = this.scale;
	            data = scale.normalize(data);

	            if (this.onBand && scale.type === 'ordinal') {
	                extent = extent.slice();
	                fixExtentWithBands(extent, scale.count());
	            }

	            return linearMap(data, normalizedExtent, extent, clamp);
	        },

	        /**
	         * Convert coord to data. Data is the rank if it has a ordinal scale
	         * @param {number} coord
	         * @param  {boolean} clamp
	         * @return {number}
	         */
	        coordToData: function (coord, clamp) {
	            var extent = this._extent;
	            var scale = this.scale;

	            if (this.onBand && scale.type === 'ordinal') {
	                extent = extent.slice();
	                fixExtentWithBands(extent, scale.count());
	            }

	            var t = linearMap(coord, extent, normalizedExtent, clamp);

	            return this.scale.scale(t);
	        },
	        /**
	         * @return {Array.<number>}
	         */
	        getTicksCoords: function (alignWithLabel) {
	            if (this.onBand && !alignWithLabel) {
	                var bands = this.getBands();
	                var coords = [];
	                for (var i = 0; i < bands.length; i++) {
	                    coords.push(bands[i][0]);
	                }
	                if (bands[i - 1]) {
	                    coords.push(bands[i - 1][1]);
	                }
	                return coords;
	            }
	            else {
	                return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	            }
	        },

	        /**
	         * Coords of labels are on the ticks or on the middle of bands
	         * @return {Array.<number>}
	         */
	        getLabelsCoords: function () {
	            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	        },

	        /**
	         * Get bands.
	         *
	         * If axis has labels [1, 2, 3, 4]. Bands on the axis are
	         * |---1---|---2---|---3---|---4---|.
	         *
	         * @return {Array}
	         */
	         // FIXME Situation when labels is on ticks
	        getBands: function () {
	            var extent = this.getExtent();
	            var bands = [];
	            var len = this.scale.count();
	            var start = extent[0];
	            var end = extent[1];
	            var span = end - start;

	            for (var i = 0; i < len; i++) {
	                bands.push([
	                    span * i / len + start,
	                    span * (i + 1) / len + start
	                ]);
	            }
	            return bands;
	        },

	        /**
	         * Get width of band
	         * @return {number}
	         */
	        getBandWidth: function () {
	            var axisExtent = this._extent;
	            var dataExtent = this.scale.getExtent();

	            var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);
	            // Fix #2728, avoid NaN when only one data.
	            len === 0 && (len = 1);

	            var size = Math.abs(axisExtent[1] - axisExtent[0]);

	            return Math.abs(size) / len;
	        },

	        /**
	         * When axis extent depends on data and no data exists,
	         * axis ticks should not be drawn, which is named 'blank'.
	         */
	        isBlank: function () {
	            return this._isBlank;
	        },

	        /**
	         * When axis extent depends on data and no data exists,
	         * axis ticks should not be drawn, which is named 'blank'.
	         */
	        setBlank: function (isBlank) {
	            this._isBlank = isBlank;
	        }

	    };

	    module.exports = Axis;


/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Helper function for axisLabelInterval calculation
	 */



	    var zrUtil = __webpack_require__(243);
	    var axisHelper = __webpack_require__(354);

	    module.exports = function (axis) {
	        var axisModel = axis.model;
	        var labelModel = axisModel.getModel('axisLabel');
	        var labelInterval = labelModel.get('interval');
	        if (!(axis.type === 'category' && labelInterval === 'auto')) {
	            return labelInterval === 'auto' ? 0 : labelInterval;
	        }

	        return axisHelper.getAxisLabelInterval(
	            zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis),
	            axisModel.getFormattedLabels(),
	            labelModel.getModel('textStyle').getFont(),
	            axis.isHorizontal()
	        );
	    };


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Grid 是在有直角坐标系的时候必须要存在的
	// 所以这里也要被 Cartesian2D 依赖


	    __webpack_require__(366);
	    var ComponentModel = __webpack_require__(258);

	    module.exports = ComponentModel.extend({

	        type: 'grid',

	        dependencies: ['xAxis', 'yAxis'],

	        layoutMode: 'box',

	        /**
	         * @type {module:echarts/coord/cartesian/Grid}
	         */
	        coordinateSystem: null,

	        defaultOption: {
	            show: false,
	            zlevel: 0,
	            z: 0,
	            left: '10%',
	            top: 60,
	            right: '10%',
	            bottom: 60,
	            // If grid size contain label
	            containLabel: false,
	            // width: {totalWidth} - left - right,
	            // height: {totalHeight} - top - bottom,
	            backgroundColor: 'rgba(0,0,0,0)',
	            borderWidth: 1,
	            borderColor: '#ccc'
	        }
	    });


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var ComponentModel = __webpack_require__(258);
	    var zrUtil = __webpack_require__(243);
	    var axisModelCreator = __webpack_require__(367);

	    var AxisModel = ComponentModel.extend({

	        type: 'cartesian2dAxis',

	        /**
	         * @type {module:echarts/coord/cartesian/Axis2D}
	         */
	        axis: null,

	        /**
	         * @override
	         */
	        init: function () {
	            AxisModel.superApply(this, 'init', arguments);
	            this.resetRange();
	        },

	        /**
	         * @override
	         */
	        mergeOption: function () {
	            AxisModel.superApply(this, 'mergeOption', arguments);
	            this.resetRange();
	        },

	        /**
	         * @override
	         */
	        restoreData: function () {
	            AxisModel.superApply(this, 'restoreData', arguments);
	            this.resetRange();
	        },

	        /**
	         * @override
	         * @return {module:echarts/model/Component}
	         */
	        getCoordSysModel: function () {
	            return this.ecModel.queryComponents({
	                mainType: 'grid',
	                index: this.option.gridIndex,
	                id: this.option.gridId
	            })[0];
	        }

	    });

	    function getAxisType(axisDim, option) {
	        // Default axis with data is category axis
	        return option.type || (option.data ? 'category' : 'value');
	    }

	    zrUtil.merge(AxisModel.prototype, __webpack_require__(369));

	    var extraOption = {
	        // gridIndex: 0,
	        // gridId: '',

	        // Offset is for multiple axis on the same position
	        offset: 0
	    };

	    axisModelCreator('x', AxisModel, getAxisType, extraOption);
	    axisModelCreator('y', AxisModel, getAxisType, extraOption);

	    module.exports = AxisModel;


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	

	    var axisDefault = __webpack_require__(368);
	    var zrUtil = __webpack_require__(243);
	    var ComponentModel = __webpack_require__(258);
	    var layout = __webpack_require__(260);

	    // FIXME axisType is fixed ?
	    var AXIS_TYPES = ['value', 'category', 'time', 'log'];

	    /**
	     * Generate sub axis model class
	     * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
	     * @param {module:echarts/model/Component} BaseAxisModelClass
	     * @param {Function} axisTypeDefaulter
	     * @param {Object} [extraDefaultOption]
	     */
	    module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {

	        zrUtil.each(AXIS_TYPES, function (axisType) {

	            BaseAxisModelClass.extend({

	                type: axisName + 'Axis.' + axisType,

	                mergeDefaultAndTheme: function (option, ecModel) {
	                    var layoutMode = this.layoutMode;
	                    var inputPositionParams = layoutMode
	                        ? layout.getLayoutParams(option) : {};

	                    var themeModel = ecModel.getTheme();
	                    zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
	                    zrUtil.merge(option, this.getDefaultOption());

	                    option.type = axisTypeDefaulter(axisName, option);

	                    if (layoutMode) {
	                        layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	                    }
	                },

	                defaultOption: zrUtil.mergeAll(
	                    [
	                        {},
	                        axisDefault[axisType + 'Axis'],
	                        extraDefaultOption
	                    ],
	                    true
	                )
	            });
	        });

	        ComponentModel.registerSubTypeDefaulter(
	            axisName + 'Axis',
	            zrUtil.curry(axisTypeDefaulter, axisName)
	        );
	    };


/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    var defaultOption = {
	        show: true,
	        zlevel: 0,                  // 一级层叠
	        z: 0,                       // 二级层叠
	        // 反向坐标轴
	        inverse: false,

	        // 坐标轴名字，默认为空
	        name: '',
	        // 坐标轴名字位置，支持'start' | 'middle' | 'end'
	        nameLocation: 'end',
	        // 坐标轴名字旋转，degree。
	        nameRotate: null, // Adapt to axis rotate, when nameLocation is 'middle'.
	        nameTruncate: {
	            maxWidth: null,
	            ellipsis: '...',
	            placeholder: '.'
	        },
	        // 坐标轴文字样式，默认取全局样式
	        nameTextStyle: {},
	        // 文字与轴线距离
	        nameGap: 15,

	        silent: false, // Default false to support tooltip.
	        triggerEvent: false, // Default false to avoid legacy user event listener fail.

	        tooltip: {
	            show: false
	        },

	        // 坐标轴线
	        axisLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            onZero: true,
	            // 属性lineStyle控制线条样式
	            lineStyle: {
	                color: '#333',
	                width: 1,
	                type: 'solid'
	            }
	        },
	        // 坐标轴小标记
	        axisTick: {
	            // 属性show控制显示与否，默认显示
	            show: true,
	            // 控制小标记是否在grid里
	            inside: false,
	            // 属性length控制线长
	            length: 5,
	            // 属性lineStyle控制线条样式
	            lineStyle: {
	                width: 1
	            }
	        },
	        // 坐标轴文本标签，详见axis.axisLabel
	        axisLabel: {
	            show: true,
	            // 控制文本标签是否在grid里
	            inside: false,
	            rotate: 0,
	            margin: 8,
	            // formatter: null,
	            // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	            textStyle: {
	                fontSize: 12
	            }
	        },
	        // 分隔线
	        splitLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            // 属性lineStyle（详见lineStyle）控制线条样式
	            lineStyle: {
	                color: ['#ccc'],
	                width: 1,
	                type: 'solid'
	            }
	        },
	        // 分隔区域
	        splitArea: {
	            // 默认不显示，属性show控制显示与否
	            show: false,
	            // 属性areaStyle（详见areaStyle）控制区域样式
	            areaStyle: {
	                color: ['rgba(250,250,250,0.3)','rgba(200,200,200,0.3)']
	            }
	        }
	    };

	    var categoryAxis = zrUtil.merge({
	        // 类目起始和结束两端空白策略
	        boundaryGap: true,
	        // splitArea: {
	            // show: false
	        // },
	        splitLine: {
	            show: false
	        },
	        // 坐标轴小标记
	        axisTick: {
	            // If tick is align with label when boundaryGap is true
	            // Default with axisTick
	            alignWithLabel: false,
	            interval: 'auto'
	        },
	        // 坐标轴文本标签，详见axis.axisLabel
	        axisLabel: {
	            interval: 'auto'
	        }
	    }, defaultOption);

	    var valueAxis = zrUtil.merge({
	        // 数值起始和结束两端空白策略
	        boundaryGap: [0, 0],
	        // 最小值, 设置成 'dataMin' 则从数据中计算最小值
	        // min: null,
	        // 最大值，设置成 'dataMax' 则从数据中计算最大值
	        // max: null,
	        // Readonly prop, specifies start value of the range when using data zoom.
	        // rangeStart: null
	        // Readonly prop, specifies end value of the range when using data zoom.
	        // rangeEnd: null
	        // 脱离0值比例，放大聚焦到最终_min，_max区间
	        // scale: false,
	        // 分割段数，默认为5
	        splitNumber: 5
	        // Minimum interval
	        // minInterval: null
	    }, defaultOption);

	    // FIXME
	    var timeAxis = zrUtil.defaults({
	        scale: true,
	        min: 'dataMin',
	        max: 'dataMax'
	    }, valueAxis);
	    var logAxis = zrUtil.defaults({
	        logBase: 10
	    }, valueAxis);
	    logAxis.scale = true;

	    module.exports = {
	        categoryAxis: categoryAxis,
	        valueAxis: valueAxis,
	        timeAxis: timeAxis,
	        logAxis: logAxis
	    };


/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var axisHelper = __webpack_require__(354);

	    function getName(obj) {
	        if (zrUtil.isObject(obj) && obj.value != null) {
	            return obj.value;
	        }
	        else {
	            return obj;
	        }
	    }

	    module.exports = {

	        /**
	         * Format labels
	         * @return {Array.<string>}
	         */
	        getFormattedLabels: function () {
	            return axisHelper.getFormattedLabels(
	                this.axis,
	                this.get('axisLabel.formatter')
	            );
	        },

	        /**
	         * Get categories
	         */
	        getCategories: function () {
	            return this.get('type') === 'category'
	                && zrUtil.map(this.get('data'), getName);
	        },

	        /**
	         * @param {boolean} origin
	         * @return {number|string} min value or 'dataMin' or null/undefined (means auto) or NaN
	         */
	        getMin: function (origin) {
	            var option = this.option;
	            var min = (!origin && option.rangeStart != null)
	                ? option.rangeStart : option.min;

	            if (min != null && min !== 'dataMin' && !zrUtil.eqNaN(min)) {
	                min = this.axis.scale.parse(min);
	            }
	            return min;
	        },

	        /**
	         * @param {boolean} origin
	         * @return {number|string} max value or 'dataMax' or null/undefined (means auto) or NaN
	         */
	        getMax: function (origin) {
	            var option = this.option;
	            var max = (!origin && option.rangeEnd != null)
	                ? option.rangeEnd : option.max;

	            if (max != null && max !== 'dataMax' && !zrUtil.eqNaN(max)) {
	                max = this.axis.scale.parse(max);
	            }
	            return max;
	        },

	        /**
	         * @return {boolean}
	         */
	        getNeedCrossZero: function () {
	            var option = this.option;
	            return (option.rangeStart != null || option.rangeEnd != null)
	                ? false : !option.scale;
	        },

	        /**
	         * Should be implemented by each axis model if necessary.
	         * @return {module:echarts/model/Component} coordinate system model
	         */
	        getCoordSysModel: zrUtil.noop,

	        /**
	         * @param {number} rangeStart Can only be finite number or null/undefined or NaN.
	         * @param {number} rangeEnd Can only be finite number or null/undefined or NaN.
	         */
	        setRange: function (rangeStart, rangeEnd) {
	            this.option.rangeStart = rangeStart;
	            this.option.rangeEnd = rangeEnd;
	        },

	        /**
	         * Reset range
	         */
	        resetRange: function () {
	            // rangeStart and rangeEnd is readonly.
	            this.option.rangeStart = this.option.rangeEnd = null;
	        }
	    };


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// TODO boundaryGap


	    __webpack_require__(366);

	    __webpack_require__(371);


/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var AxisBuilder = __webpack_require__(372);
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
	    var getInterval = AxisBuilder.getInterval;

	    var axisBuilderAttrs = [
	        'axisLine', 'axisLabel', 'axisTick', 'axisName'
	    ];
	    var selfBuilderAttrs = [
	        'splitArea', 'splitLine'
	    ];

	    // function getAlignWithLabel(model, axisModel) {
	    //     var alignWithLabel = model.get('alignWithLabel');
	    //     if (alignWithLabel === 'auto') {
	    //         alignWithLabel = axisModel.get('axisTick.alignWithLabel');
	    //     }
	    //     return alignWithLabel;
	    // }

	    var AxisView = __webpack_require__(240).extendComponentView({

	        type: 'axis',

	        render: function (axisModel, ecModel) {

	            this.group.removeAll();

	            var oldAxisGroup = this._axisGroup;
	            this._axisGroup = new graphic.Group();

	            this.group.add(this._axisGroup);

	            if (!axisModel.get('show')) {
	                return;
	            }

	            var gridModel = axisModel.getCoordSysModel();

	            var layout = layoutAxis(gridModel, axisModel);

	            var axisBuilder = new AxisBuilder(axisModel, layout);

	            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

	            this._axisGroup.add(axisBuilder.getGroup());

	            zrUtil.each(selfBuilderAttrs, function (name) {
	                if (axisModel.get(name + '.show')) {
	                    this['_' + name](axisModel, gridModel, layout.labelInterval);
	                }
	            }, this);

	            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	        },

	        /**
	         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	         * @param {module:echarts/coord/cartesian/GridModel} gridModel
	         * @param {number|Function} labelInterval
	         * @private
	         */
	        _splitLine: function (axisModel, gridModel, labelInterval) {
	            var axis = axisModel.axis;

	            if (axis.isBlank()) {
	                return;
	            }

	            var splitLineModel = axisModel.getModel('splitLine');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineColors = lineStyleModel.get('color');

	            var lineInterval = getInterval(splitLineModel, labelInterval);

	            lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];

	            var gridRect = gridModel.coordinateSystem.getRect();
	            var isHorizontal = axis.isHorizontal();

	            var lineCount = 0;

	            var ticksCoords = axis.getTicksCoords(
	                // splitLineModel.get('alignWithLabel')
	            );
	            var ticks = axis.scale.getTicks();

	            var p1 = [];
	            var p2 = [];
	            // Simple optimization
	            // Batching the lines if color are the same
	            var lineStyle = lineStyleModel.getLineStyle();
	            for (var i = 0; i < ticksCoords.length; i++) {
	                if (ifIgnoreOnTick(axis, i, lineInterval)) {
	                    continue;
	                }

	                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

	                if (isHorizontal) {
	                    p1[0] = tickCoord;
	                    p1[1] = gridRect.y;
	                    p2[0] = tickCoord;
	                    p2[1] = gridRect.y + gridRect.height;
	                }
	                else {
	                    p1[0] = gridRect.x;
	                    p1[1] = tickCoord;
	                    p2[0] = gridRect.x + gridRect.width;
	                    p2[1] = tickCoord;
	                }

	                var colorIndex = (lineCount++) % lineColors.length;
	                this._axisGroup.add(new graphic.Line(graphic.subPixelOptimizeLine({
	                    anid: 'line_' + ticks[i],

	                    shape: {
	                        x1: p1[0],
	                        y1: p1[1],
	                        x2: p2[0],
	                        y2: p2[1]
	                    },
	                    style: zrUtil.defaults({
	                        stroke: lineColors[colorIndex]
	                    }, lineStyle),
	                    silent: true
	                })));
	            }
	        },

	        /**
	         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	         * @param {module:echarts/coord/cartesian/GridModel} gridModel
	         * @param {number|Function} labelInterval
	         * @private
	         */
	        _splitArea: function (axisModel, gridModel, labelInterval) {
	            var axis = axisModel.axis;

	            if (axis.isBlank()) {
	                return;
	            }

	            var splitAreaModel = axisModel.getModel('splitArea');
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');
	            var areaColors = areaStyleModel.get('color');

	            var gridRect = gridModel.coordinateSystem.getRect();

	            var ticksCoords = axis.getTicksCoords(
	                // splitAreaModel.get('alignWithLabel')
	            );
	            var ticks = axis.scale.getTicks();

	            var prevX = axis.toGlobalCoord(ticksCoords[0]);
	            var prevY = axis.toGlobalCoord(ticksCoords[0]);

	            var count = 0;

	            var areaInterval = getInterval(splitAreaModel, labelInterval);

	            var areaStyle = areaStyleModel.getAreaStyle();
	            areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];

	            for (var i = 1; i < ticksCoords.length; i++) {
	                if (ifIgnoreOnTick(axis, i, areaInterval)) {
	                    continue;
	                }

	                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);

	                var x;
	                var y;
	                var width;
	                var height;
	                if (axis.isHorizontal()) {
	                    x = prevX;
	                    y = gridRect.y;
	                    width = tickCoord - x;
	                    height = gridRect.height;
	                }
	                else {
	                    x = gridRect.x;
	                    y = prevY;
	                    width = gridRect.width;
	                    height = tickCoord - y;
	                }

	                var colorIndex = (count++) % areaColors.length;
	                this._axisGroup.add(new graphic.Rect({
	                    anid: 'area_' + ticks[i],

	                    shape: {
	                        x: x,
	                        y: y,
	                        width: width,
	                        height: height
	                    },
	                    style: zrUtil.defaults({
	                        fill: areaColors[colorIndex]
	                    }, areaStyle),
	                    silent: true
	                }));

	                prevX = x + width;
	                prevY = y + height;
	            }
	        }
	    });

	    AxisView.extend({
	        type: 'xAxis'
	    });
	    AxisView.extend({
	        type: 'yAxis'
	    });

	    /**
	     * @inner
	     */
	    function layoutAxis(gridModel, axisModel) {
	        var grid = gridModel.coordinateSystem;
	        var axis = axisModel.axis;
	        var layout = {};

	        var rawAxisPosition = axis.position;
	        var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;
	        var axisDim = axis.dim;

	        // [left, right, top, bottom]
	        var rect = grid.getRect();
	        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];

	        var axisOffset = axisModel.get('offset') || 0;

	        var posMap = {
	            x: { top: rectBound[2] - axisOffset, bottom: rectBound[3] + axisOffset },
	            y: { left: rectBound[0] - axisOffset, right: rectBound[1] + axisOffset }
	        };

	        posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);
	        posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);

	        function getZero(dim, val) {
	            var theAxis = grid.getAxis(dim);
	            return theAxis.toGlobalCoord(theAxis.dataToCoord(0));
	        }

	        // Axis position
	        layout.position = [
	            axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0],
	            axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]
	        ];

	        // Axis rotation
	        layout.rotation = Math.PI / 2 * (axisDim === 'x' ? 0 : 1);

	        // Tick and label direction, x y is axisDim
	        var dirMap = {top: -1, bottom: 1, left: -1, right: 1};

	        layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
	        if (axis.onZero) {
	            layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;
	        }

	        if (axisModel.getModel('axisTick').get('inside')) {
	            layout.tickDirection = -layout.tickDirection;
	        }
	        if (axisModel.getModel('axisLabel').get('inside')) {
	            layout.labelDirection = -layout.labelDirection;
	        }

	        // Special label rotation
	        var labelRotation = axisModel.getModel('axisLabel').get('rotate');
	        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;

	        // label interval when auto mode.
	        layout.labelInterval = axis.getLabelInterval();

	        // Over splitLine and splitArea
	        layout.z2 = 1;

	        return layout;
	    }


/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var formatUtil = __webpack_require__(245);
	    var graphic = __webpack_require__(282);
	    var Model = __webpack_require__(251);
	    var numberUtil = __webpack_require__(246);
	    var remRadian = numberUtil.remRadian;
	    var isRadianAroundZero = numberUtil.isRadianAroundZero;
	    var vec2 = __webpack_require__(249);
	    var v2ApplyTransform = vec2.applyTransform;
	    var retrieve = zrUtil.retrieve;

	    var PI = Math.PI;

	    function makeAxisEventDataBase(axisModel) {
	        var eventData = {
	            componentType: axisModel.mainType
	        };
	        eventData[axisModel.mainType + 'Index'] = axisModel.componentIndex;
	        return eventData;
	    }

	    /**
	     * A final axis is translated and rotated from a "standard axis".
	     * So opt.position and opt.rotation is required.
	     *
	     * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
	     * for example: (0, 0) ------------> (0, 50)
	     *
	     * nameDirection or tickDirection or labelDirection is 1 means tick
	     * or label is below the standard axis, whereas is -1 means above
	     * the standard axis. labelOffset means offset between label and axis,
	     * which is useful when 'onZero', where axisLabel is in the grid and
	     * label in outside grid.
	     *
	     * Tips: like always,
	     * positive rotation represents anticlockwise, and negative rotation
	     * represents clockwise.
	     * The direction of position coordinate is the same as the direction
	     * of screen coordinate.
	     *
	     * Do not need to consider axis 'inverse', which is auto processed by
	     * axis extent.
	     *
	     * @param {module:zrender/container/Group} group
	     * @param {Object} axisModel
	     * @param {Object} opt Standard axis parameters.
	     * @param {Array.<number>} opt.position [x, y]
	     * @param {number} opt.rotation by radian
	     * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.
	     * @param {number} [opt.tickDirection=1] 1 or -1
	     * @param {number} [opt.labelDirection=1] 1 or -1
	     * @param {number} [opt.labelOffset=0] Usefull when onZero.
	     * @param {string} [opt.axisLabelShow] default get from axisModel.
	     * @param {string} [opt.axisName] default get from axisModel.
	     * @param {number} [opt.axisNameAvailableWidth]
	     * @param {number} [opt.labelRotation] by degree, default get from axisModel.
	     * @param {number} [opt.labelInterval] Default label interval when label
	     *                                     interval from model is null or 'auto'.
	     * @param {number} [opt.strokeContainThreshold] Default label interval when label
	     */
	    var AxisBuilder = function (axisModel, opt) {

	        /**
	         * @readOnly
	         */
	        this.opt = opt;

	        /**
	         * @readOnly
	         */
	        this.axisModel = axisModel;

	        // Default value
	        zrUtil.defaults(
	            opt,
	            {
	                labelOffset: 0,
	                nameDirection: 1,
	                tickDirection: 1,
	                labelDirection: 1,
	                silent: true
	            }
	        );

	        /**
	         * @readOnly
	         */
	        this.group = new graphic.Group();

	        // FIXME Not use a seperate text group?
	        var dumbGroup = new graphic.Group({
	            position: opt.position.slice(),
	            rotation: opt.rotation
	        });

	        // this.group.add(dumbGroup);
	        // this._dumbGroup = dumbGroup;

	        dumbGroup.updateTransform();
	        this._transform = dumbGroup.transform;

	        this._dumbGroup = dumbGroup;
	    };

	    AxisBuilder.prototype = {

	        constructor: AxisBuilder,

	        hasBuilder: function (name) {
	            return !!builders[name];
	        },

	        add: function (name) {
	            builders[name].call(this);
	        },

	        getGroup: function () {
	            return this.group;
	        }

	    };

	    var builders = {

	        /**
	         * @private
	         */
	        axisLine: function () {
	            var opt = this.opt;
	            var axisModel = this.axisModel;

	            if (!axisModel.get('axisLine.show')) {
	                return;
	            }

	            var extent = this.axisModel.axis.getExtent();

	            var matrix = this._transform;
	            var pt1 = [extent[0], 0];
	            var pt2 = [extent[1], 0];
	            if (matrix) {
	                v2ApplyTransform(pt1, pt1, matrix);
	                v2ApplyTransform(pt2, pt2, matrix);
	            }

	            this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({

	                // Id for animation
	                anid: 'line',

	                shape: {
	                    x1: pt1[0],
	                    y1: pt1[1],
	                    x2: pt2[0],
	                    y2: pt2[1]
	                },
	                style: zrUtil.extend(
	                    {lineCap: 'round'},
	                    axisModel.getModel('axisLine.lineStyle').getLineStyle()
	                ),
	                strokeContainThreshold: opt.strokeContainThreshold || 5,
	                silent: true,
	                z2: 1
	            })));
	        },

	        /**
	         * @private
	         */
	        axisTick: function () {
	            var axisModel = this.axisModel;
	            var axis = axisModel.axis;

	            if (!axisModel.get('axisTick.show') || axis.isBlank()) {
	                return;
	            }

	            var tickModel = axisModel.getModel('axisTick');
	            var opt = this.opt;

	            var lineStyleModel = tickModel.getModel('lineStyle');
	            var tickLen = tickModel.get('length');

	            var tickInterval = getInterval(tickModel, opt.labelInterval);
	            var ticksCoords = axis.getTicksCoords(tickModel.get('alignWithLabel'));
	            var ticks = axis.scale.getTicks();

	            var pt1 = [];
	            var pt2 = [];
	            var matrix = this._transform;

	            for (var i = 0; i < ticksCoords.length; i++) {
	                // Only ordinal scale support tick interval
	                if (ifIgnoreOnTick(axis, i, tickInterval)) {
	                     continue;
	                }

	                var tickCoord = ticksCoords[i];

	                pt1[0] = tickCoord;
	                pt1[1] = 0;
	                pt2[0] = tickCoord;
	                pt2[1] = opt.tickDirection * tickLen;

	                if (matrix) {
	                    v2ApplyTransform(pt1, pt1, matrix);
	                    v2ApplyTransform(pt2, pt2, matrix);
	                }
	                // Tick line, Not use group transform to have better line draw
	                this.group.add(new graphic.Line(graphic.subPixelOptimizeLine({

	                    // Id for animation
	                    anid: 'tick_' + ticks[i],

	                    shape: {
	                        x1: pt1[0],
	                        y1: pt1[1],
	                        x2: pt2[0],
	                        y2: pt2[1]
	                    },
	                    style: zrUtil.defaults(
	                        lineStyleModel.getLineStyle(),
	                        {
	                            stroke: axisModel.get('axisLine.lineStyle.color')
	                        }
	                    ),
	                    z2: 2,
	                    silent: true
	                })));
	            }
	        },

	        /**
	         * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	         * @param {module:echarts/coord/cartesian/GridModel} gridModel
	         * @private
	         */
	        axisLabel: function () {
	            var opt = this.opt;
	            var axisModel = this.axisModel;
	            var axis = axisModel.axis;
	            var show = retrieve(opt.axisLabelShow, axisModel.get('axisLabel.show'));

	            if (!show || axis.isBlank()) {
	                return;
	            }

	            var labelModel = axisModel.getModel('axisLabel');
	            var textStyleModel = labelModel.getModel('textStyle');
	            var labelMargin = labelModel.get('margin');
	            var ticks = axis.scale.getTicks();
	            var labels = axisModel.getFormattedLabels();

	            // Special label rotate.
	            var labelRotation = retrieve(opt.labelRotation, labelModel.get('rotate')) || 0;
	            // To radian.
	            labelRotation = labelRotation * PI / 180;

	            var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);
	            var categoryData = axisModel.get('data');

	            var textEls = [];
	            var silent = isSilent(axisModel);
	            var triggerEvent = axisModel.get('triggerEvent');

	            zrUtil.each(ticks, function (tickVal, index) {
	                if (ifIgnoreOnTick(axis, index, opt.labelInterval)) {
	                     return;
	                }

	                var itemTextStyleModel = textStyleModel;
	                if (categoryData && categoryData[tickVal] && categoryData[tickVal].textStyle) {
	                    itemTextStyleModel = new Model(
	                        categoryData[tickVal].textStyle, textStyleModel, axisModel.ecModel
	                    );
	                }
	                var textColor = itemTextStyleModel.getTextColor()
	                    || axisModel.get('axisLine.lineStyle.color');

	                var tickCoord = axis.dataToCoord(tickVal);
	                var pos = [
	                    tickCoord,
	                    opt.labelOffset + opt.labelDirection * labelMargin
	                ];
	                var labelBeforeFormat = axis.scale.getLabel(tickVal);

	                var textEl = new graphic.Text({

	                    // Id for animation
	                    anid: 'label_' + tickVal,

	                    style: {
	                        text: labels[index],
	                        textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,
	                        textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,
	                        textFont: itemTextStyleModel.getFont(),
	                        fill: typeof textColor === 'function' ? textColor(labelBeforeFormat) : textColor
	                    },
	                    position: pos,
	                    rotation: labelLayout.rotation,
	                    silent: silent,
	                    z2: 10
	                });

	                // Pack data for mouse event
	                if (triggerEvent) {
	                    textEl.eventData = makeAxisEventDataBase(axisModel);
	                    textEl.eventData.targetType = 'axisLabel';
	                    textEl.eventData.value = labelBeforeFormat;
	                }

	                // FIXME
	                this._dumbGroup.add(textEl);
	                textEl.updateTransform();

	                textEls.push(textEl);
	                this.group.add(textEl);

	                textEl.decomposeTransform();

	            }, this);

	            function isTwoLabelOverlapped(current, next) {
	                var firstRect = current && current.getBoundingRect().clone();
	                var nextRect = next && next.getBoundingRect().clone();
	                if (firstRect && nextRect) {
	                    firstRect.applyTransform(current.getLocalTransform());
	                    nextRect.applyTransform(next.getLocalTransform());
	                    return firstRect.intersect(nextRect);
	                }
	            }

	            // If min or max are user set, we need to check
	            // If the tick on min(max) are overlap on their neighbour tick
	            // If they are overlapped, we need to hide the min(max) tick label
	            if (axisModel.getMin() != null) {
	                var firstLabel = textEls[0];
	                var nextLabel = textEls[1];
	                if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
	                    firstLabel.ignore = true;
	                }
	            }
	            if (axisModel.getMax() != null) {
	                var lastLabel = textEls[textEls.length - 1];
	                var prevLabel = textEls[textEls.length - 2];
	                if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
	                    lastLabel.ignore = true;
	                }
	            }
	        },

	        /**
	         * @private
	         */
	        axisName: function () {
	            var opt = this.opt;
	            var axisModel = this.axisModel;
	            var name = retrieve(opt.axisName, axisModel.get('name'));

	            if (!name) {
	                return;
	            }

	            var nameLocation = axisModel.get('nameLocation');
	            var nameDirection = opt.nameDirection;
	            var textStyleModel = axisModel.getModel('nameTextStyle');
	            var gap = axisModel.get('nameGap') || 0;

	            var extent = this.axisModel.axis.getExtent();
	            var gapSignal = extent[0] > extent[1] ? -1 : 1;
	            var pos = [
	                nameLocation === 'start'
	                    ? extent[0] - gapSignal * gap
	                    : nameLocation === 'end'
	                    ? extent[1] + gapSignal * gap
	                    : (extent[0] + extent[1]) / 2, // 'middle'
	                // Reuse labelOffset.
	                nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0
	            ];

	            var labelLayout;

	            var nameRotation = axisModel.get('nameRotate');
	            if (nameRotation != null) {
	                nameRotation = nameRotation * PI / 180; // To radian.
	            }

	            var axisNameAvailableWidth;

	            if (nameLocation === 'middle') {
	                labelLayout = innerTextLayout(
	                    opt,
	                    nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.
	                    nameDirection
	                );
	            }
	            else {
	                labelLayout = endTextLayout(
	                    opt, nameLocation, nameRotation || 0, extent
	                );

	                axisNameAvailableWidth = opt.axisNameAvailableWidth;
	                if (axisNameAvailableWidth != null) {
	                    axisNameAvailableWidth = Math.abs(
	                        axisNameAvailableWidth / Math.sin(labelLayout.rotation)
	                    );
	                    !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
	                }
	            }

	            var textFont = textStyleModel.getFont();

	            var truncateOpt = axisModel.get('nameTruncate', true) || {};
	            var ellipsis = truncateOpt.ellipsis;
	            var maxWidth = retrieve(truncateOpt.maxWidth, axisNameAvailableWidth);
	            var truncatedText = (ellipsis != null && maxWidth != null)
	                ? formatUtil.truncateText(
	                    name, maxWidth, textFont, ellipsis,
	                    {minChar: 2, placeholder: truncateOpt.placeholder}
	                )
	                : name;

	            var tooltipOpt = axisModel.get('tooltip', true);

	            var mainType = axisModel.mainType;
	            var formatterParams = {
	                componentType: mainType,
	                name: name,
	                $vars: ['name']
	            };
	            formatterParams[mainType + 'Index'] = axisModel.componentIndex;

	            var textEl = new graphic.Text({

	                // Id for animation
	                anid: 'name',

	                __fullText: name,
	                __truncatedText: truncatedText,

	                style: {
	                    text: truncatedText,
	                    textFont: textFont,
	                    fill: textStyleModel.getTextColor()
	                        || axisModel.get('axisLine.lineStyle.color'),
	                    textAlign: labelLayout.textAlign,
	                    textVerticalAlign: labelLayout.verticalAlign
	                },
	                position: pos,
	                rotation: labelLayout.rotation,
	                silent: isSilent(axisModel),
	                z2: 1,
	                tooltip: (tooltipOpt && tooltipOpt.show)
	                    ? zrUtil.extend({
	                        content: name,
	                        formatter: function () {
	                            return name;
	                        },
	                        formatterParams: formatterParams
	                    }, tooltipOpt)
	                    : null
	            });

	            if (axisModel.get('triggerEvent')) {
	                textEl.eventData = makeAxisEventDataBase(axisModel);
	                textEl.eventData.targetType = 'axisName';
	                textEl.eventData.name = name;
	            }

	            // FIXME
	            this._dumbGroup.add(textEl);
	            textEl.updateTransform();

	            this.group.add(textEl);

	            textEl.decomposeTransform();
	        }

	    };

	    /**
	     * @inner
	     */
	    function innerTextLayout(opt, textRotation, direction) {
	        var rotationDiff = remRadian(textRotation - opt.rotation);
	        var textAlign;
	        var verticalAlign;

	        if (isRadianAroundZero(rotationDiff)) { // Label is parallel with axis line.
	            verticalAlign = direction > 0 ? 'top' : 'bottom';
	            textAlign = 'center';
	        }
	        else if (isRadianAroundZero(rotationDiff - PI)) { // Label is inverse parallel with axis line.
	            verticalAlign = direction > 0 ? 'bottom' : 'top';
	            textAlign = 'center';
	        }
	        else {
	            verticalAlign = 'middle';

	            if (rotationDiff > 0 && rotationDiff < PI) {
	                textAlign = direction > 0 ? 'right' : 'left';
	            }
	            else {
	                textAlign = direction > 0 ? 'left' : 'right';
	            }
	        }

	        return {
	            rotation: rotationDiff,
	            textAlign: textAlign,
	            verticalAlign: verticalAlign
	        };
	    }

	    /**
	     * @inner
	     */
	    function endTextLayout(opt, textPosition, textRotate, extent) {
	        var rotationDiff = remRadian(textRotate - opt.rotation);
	        var textAlign;
	        var verticalAlign;
	        var inverse = extent[0] > extent[1];
	        var onLeft = (textPosition === 'start' && !inverse)
	            || (textPosition !== 'start' && inverse);

	        if (isRadianAroundZero(rotationDiff - PI / 2)) {
	            verticalAlign = onLeft ? 'bottom' : 'top';
	            textAlign = 'center';
	        }
	        else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
	            verticalAlign = onLeft ? 'top' : 'bottom';
	            textAlign = 'center';
	        }
	        else {
	            verticalAlign = 'middle';
	            if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
	                textAlign = onLeft ? 'left' : 'right';
	            }
	            else {
	                textAlign = onLeft ? 'right' : 'left';
	            }
	        }

	        return {
	            rotation: rotationDiff,
	            textAlign: textAlign,
	            verticalAlign: verticalAlign
	        };
	    }

	    /**
	     * @inner
	     */
	    function isSilent(axisModel) {
	        var tooltipOpt = axisModel.get('tooltip');
	        return axisModel.get('silent')
	            // Consider mouse cursor, add these restrictions.
	            || !(
	                axisModel.get('triggerEvent') || (tooltipOpt && tooltipOpt.show)
	            );
	    }

	    /**
	     * @static
	     */
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {
	        var rawTick;
	        var scale = axis.scale;
	        return scale.type === 'ordinal'
	            && (
	                typeof interval === 'function'
	                    ? (
	                        rawTick = scale.getTicks()[i],
	                        !interval(rawTick, scale.getLabel(rawTick))
	                    )
	                    : i % (interval + 1)
	            );
	    };

	    /**
	     * @static
	     */
	    var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {
	        var interval = model.get('interval');
	        if (interval == null || interval == 'auto') {
	            interval = labelInterval;
	        }
	        return interval;
	    };

	    module.exports = AxisBuilder;



/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    __webpack_require__(353);

	    __webpack_require__(374);
	    __webpack_require__(376);

	    var barLayoutGrid = __webpack_require__(379);
	    var echarts = __webpack_require__(240);

	    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));
	    // Visual coding for legend
	    echarts.registerVisual(function (ecModel) {
	        ecModel.eachSeriesByType('bar', function (seriesModel) {
	            var data = seriesModel.getData();
	            data.setVisual('legendSymbol', 'roundRect');
	        });
	    });

	    // In case developer forget to include grid component
	    __webpack_require__(352);


/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	

	    module.exports = __webpack_require__(375).extend({

	        type: 'series.bar',

	        dependencies: ['grid', 'polar'],

	        brushSelector: 'rect'
	    });


/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var SeriesModel = __webpack_require__(267);
	    var createListFromArray = __webpack_require__(341);

	    module.exports = SeriesModel.extend({

	        type: 'series.__base_bar__',

	        getInitialData: function (option, ecModel) {
	            if (__DEV__) {
	                var coordSys = option.coordinateSystem;
	                if (coordSys !== 'cartesian2d') {
	                    throw new Error('Bar only support cartesian2d coordinateSystem');
	                }
	            }
	            return createListFromArray(option.data, this, ecModel);
	        },

	        getMarkerPosition: function (value) {
	            var coordSys = this.coordinateSystem;
	            if (coordSys) {
	                // PENDING if clamp ?
	                var pt = coordSys.dataToPoint(value, true);
	                var data = this.getData();
	                var offset = data.getLayout('offset');
	                var size = data.getLayout('size');
	                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
	                pt[offsetIndex] += offset + size / 2;
	                return pt;
	            }
	            return [NaN, NaN];
	        },

	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,
	            // stack: null

	            // Cartesian coordinate system
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,

	            // 最小高度改为0
	            barMinHeight: 0,

	            // barMaxWidth: null,
	            // 默认自适应
	            // barWidth: null,
	            // 柱间距离，默认为柱形宽度的30%，可设固定值
	            // barGap: '30%',
	            // 类目间柱形距离，默认为类目间距的20%，可设固定值
	            // barCategoryGap: '20%',
	            // label: {
	            //     normal: {
	            //         show: false
	            //     }
	            // },
	            itemStyle: {
	                normal: {
	                    // color: '各异'
	                },
	                emphasis: {}
	            }
	        }
	    });


/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var helper = __webpack_require__(377);

	    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'barBorderWidth'];

	    // FIXME
	    // Just for compatible with ec2.
	    zrUtil.extend(__webpack_require__(251).prototype, __webpack_require__(378));

	    var BarView = __webpack_require__(240).extendChartView({

	        type: 'bar',

	        render: function (seriesModel, ecModel, api) {
	            var coordinateSystemType = seriesModel.get('coordinateSystem');

	            if (coordinateSystemType === 'cartesian2d') {
	                this._renderOnCartesian(seriesModel, ecModel, api);
	            }

	            return this.group;
	        },

	        dispose: zrUtil.noop,

	        _renderOnCartesian: function (seriesModel, ecModel, api) {
	            var group = this.group;
	            var data = seriesModel.getData();
	            var oldData = this._data;

	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();
	            var isHorizontal = baseAxis.isHorizontal();
	            var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;

	            data.diff(oldData)
	                .add(function (dataIndex) {
	                    if (!data.hasValue(dataIndex)) {
	                        return;
	                    }

	                    var itemModel = data.getItemModel(dataIndex);
	                    var layout = getRectItemLayout(data, dataIndex, itemModel);
	                    var el = createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel);
	                    data.setItemGraphicEl(dataIndex, el);
	                    group.add(el);

	                    updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal);
	                })
	                .update(function (newIndex, oldIndex) {
	                    var el = oldData.getItemGraphicEl(oldIndex);

	                    if (!data.hasValue(newIndex)) {
	                        group.remove(el);
	                        return;
	                    }

	                    var itemModel = data.getItemModel(newIndex);
	                    var layout = getRectItemLayout(data, newIndex, itemModel);

	                    if (el) {
	                        graphic.updateProps(el, {shape: layout}, animationModel, newIndex);
	                    }
	                    else {
	                        el = createRect(data, newIndex, itemModel, layout, isHorizontal, animationModel, true);
	                    }

	                    data.setItemGraphicEl(newIndex, el);
	                    // Add back
	                    group.add(el);

	                    updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontal);
	                })
	                .remove(function (dataIndex) {
	                    var el = oldData.getItemGraphicEl(dataIndex);
	                    el && removeRect(dataIndex, animationModel, el);
	                })
	                .execute();

	            this._data = data;
	        },

	        remove: function (ecModel, api) {
	            var group = this.group;
	            var data = this._data;
	            if (ecModel.get('animation')) {
	                if (data) {
	                    data.eachItemGraphicEl(function (el) {
	                        removeRect(el.dataIndex, ecModel, el);
	                    });
	                }
	            }
	            else {
	                group.removeAll();
	            }
	        }
	    });

	    function createRect(data, dataIndex, itemModel, layout, isHorizontal, animationModel, isUpdate) {
	        var rect = new graphic.Rect({shape: zrUtil.extend({}, layout)});

	        // Animation
	        if (animationModel) {
	            var rectShape = rect.shape;
	            var animateProperty = isHorizontal ? 'height' : 'width';
	            var animateTarget = {};
	            rectShape[animateProperty] = 0;
	            animateTarget[animateProperty] = layout[animateProperty];
	            graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {
	                shape: animateTarget
	            }, animationModel, dataIndex);
	        }

	        return rect;
	    }

	    function removeRect(dataIndex, animationModel, el) {
	        // Not show text when animating
	        el.style.text = '';
	        graphic.updateProps(el, {
	            shape: {
	                width: 0
	            }
	        }, animationModel, dataIndex, function () {
	            el.parent && el.parent.remove(el);
	        });
	    }

	    function getRectItemLayout(data, dataIndex, itemModel) {
	        var layout = data.getItemLayout(dataIndex);
	        var fixedLineWidth = getLineWidth(itemModel, layout);

	        // fix layout with lineWidth
	        var signX = layout.width > 0 ? 1 : -1;
	        var signY = layout.height > 0 ? 1 : -1;
	        return {
	            x: layout.x + signX * fixedLineWidth / 2,
	            y: layout.y + signY * fixedLineWidth / 2,
	            width: layout.width - signX * fixedLineWidth,
	            height: layout.height - signY * fixedLineWidth
	        };
	    }

	    function updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontal) {
	        var color = data.getItemVisual(dataIndex, 'color');
	        var opacity = data.getItemVisual(dataIndex, 'opacity');
	        var itemStyleModel = itemModel.getModel('itemStyle.normal');
	        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getBarItemStyle();

	        el.setShape('r', itemStyleModel.get('barBorderRadius') || 0);

	        el.useStyle(zrUtil.defaults(
	            {
	                fill: color,
	                opacity: opacity
	            },
	            itemStyleModel.getBarItemStyle()
	        ));

	        var labelPositionOutside = isHorizontal
	            ? (layout.height > 0 ? 'bottom' : 'top')
	            : (layout.width > 0 ? 'left' : 'right');

	        helper.setLabel(
	            el.style, hoverStyle, itemModel, color,
	            seriesModel, dataIndex, labelPositionOutside
	        );

	        graphic.setHoverStyle(el, hoverStyle);
	    }

	    // In case width or height are too small.
	    function getLineWidth(itemModel, rawLayout) {
	        var lineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;
	        return Math.min(lineWidth, Math.abs(rawLayout.width), Math.abs(rawLayout.height));
	    }

	    module.exports = BarView;


/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);

	    var helper = {};

	    helper.setLabel = function (
	        normalStyle, hoverStyle, itemModel, color, seriesModel, dataIndex, labelPositionOutside
	    ) {
	        var labelModel = itemModel.getModel('label.normal');
	        var hoverLabelModel = itemModel.getModel('label.emphasis');

	        if (labelModel.get('show')) {
	            setLabel(
	                normalStyle, labelModel, color,
	                zrUtil.retrieve(
	                    seriesModel.getFormattedLabel(dataIndex, 'normal'),
	                    seriesModel.getRawValue(dataIndex)
	                ),
	                labelPositionOutside
	            );
	        }
	        else {
	            normalStyle.text = '';
	        }

	        if (hoverLabelModel.get('show')) {
	            setLabel(
	                hoverStyle, hoverLabelModel, color,
	                zrUtil.retrieve(
	                    seriesModel.getFormattedLabel(dataIndex, 'emphasis'),
	                    seriesModel.getRawValue(dataIndex)
	                ),
	                labelPositionOutside
	            );
	        }
	        else {
	            hoverStyle.text = '';
	        }
	    };

	    function setLabel(style, model, color, labelText, labelPositionOutside) {
	        graphic.setText(style, model, color);
	        style.text = labelText;
	        if (style.textPosition === 'outside') {
	            style.textPosition = labelPositionOutside;
	        }
	    }

	    module.exports = helper;


/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	


	    var getBarItemStyle = __webpack_require__(254)(
	        [
	            ['fill', 'color'],
	            ['stroke', 'borderColor'],
	            ['lineWidth', 'borderWidth'],
	            // Compatitable with 2
	            ['stroke', 'barBorderColor'],
	            ['lineWidth', 'barBorderWidth'],
	            ['opacity'],
	            ['shadowBlur'],
	            ['shadowOffsetX'],
	            ['shadowOffsetY'],
	            ['shadowColor']
	        ]
	    );
	    module.exports = {
	        getBarItemStyle: function (excludes) {
	            var style = getBarItemStyle.call(this, excludes);
	            if (this.getBorderLineDash) {
	                var lineDash = this.getBorderLineDash();
	                lineDash && (style.lineDash = lineDash);
	            }
	            return style;
	        }
	    };


/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);
	    var parsePercent = numberUtil.parsePercent;

	    function getSeriesStackId(seriesModel) {
	        return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;
	    }

	    function getAxisKey(axis) {
	        return axis.dim + axis.index;
	    }

	    function calBarWidthAndOffset(barSeries, api) {
	        // Columns info on each category axis. Key is cartesian name
	        var columnsMap = {};

	        zrUtil.each(barSeries, function (seriesModel, idx) {
	            var data = seriesModel.getData();
	            var cartesian = seriesModel.coordinateSystem;

	            var baseAxis = cartesian.getBaseAxis();
	            var axisExtent = baseAxis.getExtent();
	            var bandWidth = baseAxis.type === 'category'
	                ? baseAxis.getBandWidth()
	                : (Math.abs(axisExtent[1] - axisExtent[0]) / data.count());

	            var columnsOnAxis = columnsMap[getAxisKey(baseAxis)] || {
	                bandWidth: bandWidth,
	                remainedWidth: bandWidth,
	                autoWidthCount: 0,
	                categoryGap: '20%',
	                gap: '30%',
	                stacks: {}
	            };
	            var stacks = columnsOnAxis.stacks;
	            columnsMap[getAxisKey(baseAxis)] = columnsOnAxis;

	            var stackId = getSeriesStackId(seriesModel);

	            if (!stacks[stackId]) {
	                columnsOnAxis.autoWidthCount++;
	            }
	            stacks[stackId] = stacks[stackId] || {
	                width: 0,
	                maxWidth: 0
	            };

	            var barWidth = parsePercent(
	                seriesModel.get('barWidth'), bandWidth
	            );
	            var barMaxWidth = parsePercent(
	                seriesModel.get('barMaxWidth'), bandWidth
	            );
	            var barGap = seriesModel.get('barGap');
	            var barCategoryGap = seriesModel.get('barCategoryGap');

	            // Caution: In a single coordinate system, these barGrid attributes
	            // will be shared by series. Consider that they have default values,
	            // only the attributes set on the last series will work.
	            // Do not change this fact unless there will be a break change.

	            // TODO
	            if (barWidth && !stacks[stackId].width) {
	                barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	                stacks[stackId].width = barWidth;
	                columnsOnAxis.remainedWidth -= barWidth;
	            }

	            barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	            (barGap != null) && (columnsOnAxis.gap = barGap);
	            (barCategoryGap != null) && (columnsOnAxis.categoryGap = barCategoryGap);
	        });

	        var result = {};

	        zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {

	            result[coordSysName] = {};

	            var stacks = columnsOnAxis.stacks;
	            var bandWidth = columnsOnAxis.bandWidth;
	            var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	            var barGapPercent = parsePercent(columnsOnAxis.gap, 1);

	            var remainedWidth = columnsOnAxis.remainedWidth;
	            var autoWidthCount = columnsOnAxis.autoWidthCount;
	            var autoWidth = (remainedWidth - categoryGap)
	                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	            autoWidth = Math.max(autoWidth, 0);

	            // Find if any auto calculated bar exceeded maxBarWidth
	            zrUtil.each(stacks, function (column, stack) {
	                var maxWidth = column.maxWidth;
	                if (!column.width && maxWidth && maxWidth < autoWidth) {
	                    maxWidth = Math.min(maxWidth, remainedWidth);
	                    remainedWidth -= maxWidth;
	                    column.width = maxWidth;
	                    autoWidthCount--;
	                }
	            });

	            // Recalculate width again
	            autoWidth = (remainedWidth - categoryGap)
	                / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	            autoWidth = Math.max(autoWidth, 0);

	            var widthSum = 0;
	            var lastColumn;
	            zrUtil.each(stacks, function (column, idx) {
	                if (!column.width) {
	                    column.width = autoWidth;
	                }
	                lastColumn = column;
	                widthSum += column.width * (1 + barGapPercent);
	            });
	            if (lastColumn) {
	                widthSum -= lastColumn.width * barGapPercent;
	            }

	            var offset = -widthSum / 2;
	            zrUtil.each(stacks, function (column, stackId) {
	                result[coordSysName][stackId] = result[coordSysName][stackId] || {
	                    offset: offset,
	                    width: column.width
	                };

	                offset += column.width * (1 + barGapPercent);
	            });
	        });

	        return result;
	    }

	    /**
	     * @param {string} seriesType
	     * @param {module:echarts/model/Global} ecModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function barLayoutGrid(seriesType, ecModel, api) {

	        var barWidthAndOffset = calBarWidthAndOffset(
	            zrUtil.filter(
	                ecModel.getSeriesByType(seriesType),
	                function (seriesModel) {
	                    return !ecModel.isSeriesFiltered(seriesModel)
	                        && seriesModel.coordinateSystem
	                        && seriesModel.coordinateSystem.type === 'cartesian2d';
	                }
	            )
	        );

	        var lastStackCoords = {};
	        var lastStackCoordsOrigin = {};

	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {

	            var data = seriesModel.getData();
	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();

	            var stackId = getSeriesStackId(seriesModel);
	            var columnLayoutInfo = barWidthAndOffset[getAxisKey(baseAxis)][stackId];
	            var columnOffset = columnLayoutInfo.offset;
	            var columnWidth = columnLayoutInfo.width;
	            var valueAxis = cartesian.getOtherAxis(baseAxis);

	            var barMinHeight = seriesModel.get('barMinHeight') || 0;

	            var valueAxisStart = baseAxis.onZero
	                ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0))
	                : valueAxis.getGlobalExtent()[0];

	            var coords = cartesian.dataToPoints(data, true);
	            lastStackCoords[stackId] = lastStackCoords[stackId] || [];
	            lastStackCoordsOrigin[stackId] = lastStackCoordsOrigin[stackId] || []; // Fix #4243

	            data.setLayout({
	                offset: columnOffset,
	                size: columnWidth
	            });

	            data.each(valueAxis.dim, function (value, idx) {
	                if (isNaN(value)) {
	                    return;
	                }

	                if (!lastStackCoords[stackId][idx]) {
	                    lastStackCoords[stackId][idx] = {
	                        p: valueAxisStart, // Positive stack
	                        n: valueAxisStart  // Negative stack
	                    };
	                    lastStackCoordsOrigin[stackId][idx] = {
	                        p: valueAxisStart, // Positive stack
	                        n: valueAxisStart  // Negative stack
	                    };
	                }
	                var sign = value >= 0 ? 'p' : 'n';
	                var coord = coords[idx];
	                var lastCoord = lastStackCoords[stackId][idx][sign];
	                var lastCoordOrigin = lastStackCoordsOrigin[stackId][idx][sign];
	                var x;
	                var y;
	                var width;
	                var height;

	                if (valueAxis.isHorizontal()) {
	                    x = lastCoord;
	                    y = coord[1] + columnOffset;
	                    width = coord[0] - lastCoordOrigin;
	                    height = columnWidth;

	                    lastStackCoordsOrigin[stackId][idx][sign] += width;
	                    if (Math.abs(width) < barMinHeight) {
	                        width = (width < 0 ? -1 : 1) * barMinHeight;
	                    }
	                    lastStackCoords[stackId][idx][sign] += width;
	                }
	                else {
	                    x = coord[0] + columnOffset;
	                    y = lastCoord;
	                    width = columnWidth;
	                    height = coord[1] - lastCoordOrigin;

	                    lastStackCoordsOrigin[stackId][idx][sign] += height;
	                    if (Math.abs(height) < barMinHeight) {
	                        // Include zero to has a positive bar
	                        height = (height <= 0 ? -1 : 1) * barMinHeight;
	                    }
	                    lastStackCoords[stackId][idx][sign] += height;
	                }

	                data.setItemLayout(idx, {
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                });
	            }, true);

	        }, this);
	    }

	    module.exports = barLayoutGrid;


/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var echarts = __webpack_require__(240);

	    __webpack_require__(381);
	    __webpack_require__(383);

	    __webpack_require__(384)('pie', [{
	        type: 'pieToggleSelect',
	        event: 'pieselectchanged',
	        method: 'toggleSelected'
	    }, {
	        type: 'pieSelect',
	        event: 'pieselected',
	        method: 'select'
	    }, {
	        type: 'pieUnSelect',
	        event: 'pieunselected',
	        method: 'unSelect'
	    }]);

	    echarts.registerVisual(zrUtil.curry(__webpack_require__(385), 'pie'));

	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(386), 'pie'
	    ));

	    echarts.registerProcessor(zrUtil.curry(__webpack_require__(388), 'pie'));


/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var List = __webpack_require__(337);
	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);
	    var completeDimensions = __webpack_require__(342);

	    var dataSelectableMixin = __webpack_require__(382);

	    var PieSeries = __webpack_require__(240).extendSeriesModel({

	        type: 'series.pie',

	        // Overwrite
	        init: function (option) {
	            PieSeries.superApply(this, 'init', arguments);

	            // Enable legend selection for each data item
	            // Use a function instead of direct access because data reference may changed
	            this.legendDataProvider = function () {
	                return this.getRawData();
	            };

	            this.updateSelectedMap(option.data);

	            this._defaultLabelLine(option);
	        },

	        // Overwrite
	        mergeOption: function (newOption) {
	            PieSeries.superCall(this, 'mergeOption', newOption);
	            this.updateSelectedMap(this.option.data);
	        },

	        getInitialData: function (option, ecModel) {
	            var dimensions = completeDimensions(['value'], option.data);
	            var list = new List(dimensions, this);
	            list.initData(option.data);
	            return list;
	        },

	        // Overwrite
	        getDataParams: function (dataIndex) {
	            var data = this.getData();
	            var params = PieSeries.superCall(this, 'getDataParams', dataIndex);
	            var sum = data.getSum('value');
	            // FIXME toFixed?
	            //
	            // Percent is 0 if sum is 0
	            params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);

	            params.$vars.push('percent');
	            return params;
	        },

	        _defaultLabelLine: function (option) {
	            // Extend labelLine emphasis
	            modelUtil.defaultEmphasis(option.labelLine, ['show']);

	            var labelLineNormalOpt = option.labelLine.normal;
	            var labelLineEmphasisOpt = option.labelLine.emphasis;
	            // Not show label line if `label.normal.show = false`
	            labelLineNormalOpt.show = labelLineNormalOpt.show
	                && option.label.normal.show;
	            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show
	                && option.label.emphasis.show;
	        },

	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	            legendHoverLink: true,

	            hoverAnimation: true,
	            // 默认全局居中
	            center: ['50%', '50%'],
	            radius: [0, '75%'],
	            // 默认顺时针
	            clockwise: true,
	            startAngle: 90,
	            // 最小角度改为0
	            minAngle: 0,
	            // 选中是扇区偏移量
	            selectedOffset: 10,

	            // If use strategy to avoid label overlapping
	            avoidLabelOverlap: true,
	            // 选择模式，默认关闭，可选single，multiple
	            // selectedMode: false,
	            // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）
	            // roseType: null,

	            // If still show when all data zero.
	            stillShowZeroSum: true,

	            label: {
	                normal: {
	                    // If rotate around circle
	                    rotate: false,
	                    show: true,
	                    // 'outer', 'inside', 'center'
	                    position: 'outer'
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                    // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数
	                },
	                emphasis: {}
	            },
	            // Enabled when label.normal.position is 'outer'
	            labelLine: {
	                normal: {
	                    show: true,
	                    // 引导线两段中的第一段长度
	                    length: 15,
	                    // 引导线两段中的第二段长度
	                    length2: 15,
	                    smooth: false,
	                    lineStyle: {
	                        // color: 各异,
	                        width: 1,
	                        type: 'solid'
	                    }
	                }
	            },
	            itemStyle: {
	                normal: {
	                    borderWidth: 1
	                },
	                emphasis: {}
	            },

	            // Animation type canbe expansion, scale
	            animationType: 'expansion',

	            animationEasing: 'cubicOut',

	            data: []
	        }
	    });

	    zrUtil.mixin(PieSeries, dataSelectableMixin);

	    module.exports = PieSeries;


/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Data selectable mixin for chart series.
	 * To eanble data select, option of series must have `selectedMode`.
	 * And each data item will use `selected` to toggle itself selected status
	 *
	 * @module echarts/chart/helper/DataSelectable
	 */


	    var zrUtil = __webpack_require__(243);

	    module.exports = {

	        updateSelectedMap: function (targetList) {
	            this._selectTargetMap = zrUtil.reduce(targetList || [], function (targetMap, target) {
	                targetMap[target.name] = target;
	                return targetMap;
	            }, {});
	        },
	        /**
	         * @param {string} name
	         */
	        // PENGING If selectedMode is null ?
	        select: function (name) {
	            var targetMap = this._selectTargetMap;
	            var target = targetMap[name];
	            var selectedMode = this.get('selectedMode');
	            if (selectedMode === 'single') {
	                zrUtil.each(targetMap, function (target) {
	                    target.selected = false;
	                });
	            }
	            target && (target.selected = true);
	        },

	        /**
	         * @param {string} name
	         */
	        unSelect: function (name) {
	            var target = this._selectTargetMap[name];
	            // var selectedMode = this.get('selectedMode');
	            // selectedMode !== 'single' && target && (target.selected = false);
	            target && (target.selected = false);
	        },

	        /**
	         * @param {string} name
	         */
	        toggleSelected: function (name) {
	            var target = this._selectTargetMap[name];
	            if (target != null) {
	                this[target.selected ? 'unSelect' : 'select'](name);
	                return target.selected;
	            }
	        },

	        /**
	         * @param {string} name
	         */
	        isSelected: function (name) {
	            var target = this._selectTargetMap[name];
	            return target && target.selected;
	        }
	    };


/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	

	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);

	    /**
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {boolean} hasAnimation
	     * @inner
	     */
	    function updateDataSelected(uid, seriesModel, hasAnimation, api) {
	        var data = seriesModel.getData();
	        var dataIndex = this.dataIndex;
	        var name = data.getName(dataIndex);
	        var selectedOffset = seriesModel.get('selectedOffset');

	        api.dispatchAction({
	            type: 'pieToggleSelect',
	            from: uid,
	            name: name,
	            seriesId: seriesModel.id
	        });

	        data.each(function (idx) {
	            toggleItemSelected(
	                data.getItemGraphicEl(idx),
	                data.getItemLayout(idx),
	                seriesModel.isSelected(data.getName(idx)),
	                selectedOffset,
	                hasAnimation
	            );
	        });
	    }

	    /**
	     * @param {module:zrender/graphic/Sector} el
	     * @param {Object} layout
	     * @param {boolean} isSelected
	     * @param {number} selectedOffset
	     * @param {boolean} hasAnimation
	     * @inner
	     */
	    function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {
	        var midAngle = (layout.startAngle + layout.endAngle) / 2;

	        var dx = Math.cos(midAngle);
	        var dy = Math.sin(midAngle);

	        var offset = isSelected ? selectedOffset : 0;
	        var position = [dx * offset, dy * offset];

	        hasAnimation
	            // animateTo will stop revious animation like update transition
	            ? el.animate()
	                .when(200, {
	                    position: position
	                })
	                .start('bounceOut')
	            : el.attr('position', position);
	    }

	    /**
	     * Piece of pie including Sector, Label, LabelLine
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     */
	    function PiePiece(data, idx) {

	        graphic.Group.call(this);

	        var sector = new graphic.Sector({
	            z2: 2
	        });
	        var polyline = new graphic.Polyline();
	        var text = new graphic.Text();
	        this.add(sector);
	        this.add(polyline);
	        this.add(text);

	        this.updateData(data, idx, true);

	        // Hover to change label and labelLine
	        function onEmphasis() {
	            polyline.ignore = polyline.hoverIgnore;
	            text.ignore = text.hoverIgnore;
	        }
	        function onNormal() {
	            polyline.ignore = polyline.normalIgnore;
	            text.ignore = text.normalIgnore;
	        }
	        this.on('emphasis', onEmphasis)
	            .on('normal', onNormal)
	            .on('mouseover', onEmphasis)
	            .on('mouseout', onNormal);
	    }

	    var piePieceProto = PiePiece.prototype;

	    function getLabelStyle(data, idx, state, labelModel, labelPosition) {
	        var textStyleModel = labelModel.getModel('textStyle');
	        var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	        return {
	            fill: textStyleModel.getTextColor()
	                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	            opacity: data.getItemVisual(idx, 'opacity'),
	            textFont: textStyleModel.getFont(),
	            text: zrUtil.retrieve(
	                data.hostModel.getFormattedLabel(idx, state), data.getName(idx)
	            )
	        };
	    }

	    piePieceProto.updateData = function (data, idx, firstCreate) {

	        var sector = this.childAt(0);

	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var sectorShape = zrUtil.extend({}, layout);
	        sectorShape.label = null;

	        if (firstCreate) {
	            sector.setShape(sectorShape);

	            var animationType = seriesModel.getShallow('animationType');
	            if (animationType === 'scale') {
	                sector.shape.r = layout.r0;
	                graphic.initProps(sector, {
	                    shape: {
	                        r: layout.r
	                    }
	                }, seriesModel, idx);
	            }
	            // Expansion
	            else {
	                sector.shape.endAngle = layout.startAngle;
	                graphic.updateProps(sector, {
	                    shape: {
	                        endAngle: layout.endAngle
	                    }
	                }, seriesModel, idx);
	            }

	        }
	        else {
	            graphic.updateProps(sector, {
	                shape: sectorShape
	            }, seriesModel, idx);
	        }

	        // Update common style
	        var itemStyleModel = itemModel.getModel('itemStyle');
	        var visualColor = data.getItemVisual(idx, 'color');

	        sector.useStyle(
	            zrUtil.defaults(
	                {
	                    lineJoin: 'bevel',
	                    fill: visualColor
	                },
	                itemStyleModel.getModel('normal').getItemStyle()
	            )
	        );
	        sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();

	        // Toggle selected
	        toggleItemSelected(
	            this,
	            data.getItemLayout(idx),
	            itemModel.get('selected'),
	            seriesModel.get('selectedOffset'),
	            seriesModel.get('animation')
	        );

	        function onEmphasis() {
	            // Sector may has animation of updating data. Force to move to the last frame
	            // Or it may stopped on the wrong shape
	            sector.stopAnimation(true);
	            sector.animateTo({
	                shape: {
	                    r: layout.r + 10
	                }
	            }, 300, 'elasticOut');
	        }
	        function onNormal() {
	            sector.stopAnimation(true);
	            sector.animateTo({
	                shape: {
	                    r: layout.r
	                }
	            }, 300, 'elasticOut');
	        }
	        sector.off('mouseover').off('mouseout').off('emphasis').off('normal');
	        if (itemModel.get('hoverAnimation') && seriesModel.isAnimationEnabled()) {
	            sector
	                .on('mouseover', onEmphasis)
	                .on('mouseout', onNormal)
	                .on('emphasis', onEmphasis)
	                .on('normal', onNormal);
	        }

	        this._updateLabel(data, idx);

	        graphic.setHoverStyle(this);
	    };

	    piePieceProto._updateLabel = function (data, idx) {

	        var labelLine = this.childAt(1);
	        var labelText = this.childAt(2);

	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var labelLayout = layout.label;
	        var visualColor = data.getItemVisual(idx, 'color');

	        graphic.updateProps(labelLine, {
	            shape: {
	                points: labelLayout.linePoints || [
	                    [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]
	                ]
	            }
	        }, seriesModel, idx);

	        graphic.updateProps(labelText, {
	            style: {
	                x: labelLayout.x,
	                y: labelLayout.y
	            }
	        }, seriesModel, idx);
	        labelText.attr({
	            style: {
	                textVerticalAlign: labelLayout.verticalAlign,
	                textAlign: labelLayout.textAlign,
	                textFont: labelLayout.font
	            },
	            rotation: labelLayout.rotation,
	            origin: [labelLayout.x, labelLayout.y],
	            z2: 10
	        });

	        var labelModel = itemModel.getModel('label.normal');
	        var labelHoverModel = itemModel.getModel('label.emphasis');
	        var labelLineModel = itemModel.getModel('labelLine.normal');
	        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	        var labelPosition = labelModel.get('position') || labelHoverModel.get('position');

	        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));

	        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	        labelText.hoverIgnore = !labelHoverModel.get('show');

	        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	        labelLine.hoverIgnore = !labelLineHoverModel.get('show');

	        // Default use item visual color
	        labelLine.setStyle({
	            stroke: visualColor,
	            opacity: data.getItemVisual(idx, 'opacity')
	        });
	        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());

	        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);
	        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();

	        var smooth = labelLineModel.get('smooth');
	        if (smooth && smooth === true) {
	            smooth = 0.4;
	        }
	        labelLine.setShape({
	            smooth: smooth
	        });
	    };

	    zrUtil.inherits(PiePiece, graphic.Group);


	    // Pie view
	    var Pie = __webpack_require__(281).extend({

	        type: 'pie',

	        init: function () {
	            var sectorGroup = new graphic.Group();
	            this._sectorGroup = sectorGroup;
	        },

	        render: function (seriesModel, ecModel, api, payload) {
	            if (payload && (payload.from === this.uid)) {
	                return;
	            }

	            var data = seriesModel.getData();
	            var oldData = this._data;
	            var group = this.group;

	            var hasAnimation = ecModel.get('animation');
	            var isFirstRender = !oldData;
	            var animationType = seriesModel.get('animationType');

	            var onSectorClick = zrUtil.curry(
	                updateDataSelected, this.uid, seriesModel, hasAnimation, api
	            );

	            var selectedMode = seriesModel.get('selectedMode');

	            data.diff(oldData)
	                .add(function (idx) {
	                    var piePiece = new PiePiece(data, idx);
	                    // Default expansion animation
	                    if (isFirstRender && animationType !== 'scale') {
	                        piePiece.eachChild(function (child) {
	                            child.stopAnimation(true);
	                        });
	                    }

	                    selectedMode && piePiece.on('click', onSectorClick);

	                    data.setItemGraphicEl(idx, piePiece);

	                    group.add(piePiece);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var piePiece = oldData.getItemGraphicEl(oldIdx);

	                    piePiece.updateData(data, newIdx);

	                    piePiece.off('click');
	                    selectedMode && piePiece.on('click', onSectorClick);
	                    group.add(piePiece);
	                    data.setItemGraphicEl(newIdx, piePiece);
	                })
	                .remove(function (idx) {
	                    var piePiece = oldData.getItemGraphicEl(idx);
	                    group.remove(piePiece);
	                })
	                .execute();

	            if (
	                hasAnimation && isFirstRender && data.count() > 0
	                // Default expansion animation
	                && animationType !== 'scale'
	            ) {
	                var shape = data.getItemLayout(0);
	                var r = Math.max(api.getWidth(), api.getHeight()) / 2;

	                var removeClipPath = zrUtil.bind(group.removeClipPath, group);
	                group.setClipPath(this._createClipPath(
	                    shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel
	                ));
	            }

	            this._data = data;
	        },

	        dispose: function () {},

	        _createClipPath: function (
	            cx, cy, r, startAngle, clockwise, cb, seriesModel
	        ) {
	            var clipPath = new graphic.Sector({
	                shape: {
	                    cx: cx,
	                    cy: cy,
	                    r0: 0,
	                    r: r,
	                    startAngle: startAngle,
	                    endAngle: startAngle,
	                    clockwise: clockwise
	                }
	            });

	            graphic.initProps(clipPath, {
	                shape: {
	                    endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2
	                }
	            }, seriesModel, cb);

	            return clipPath;
	        },

	        /**
	         * @implement
	         */
	        containPoint: function (point, seriesModel) {
	            var data = seriesModel.getData();
	            var itemLayout = data.getItemLayout(0);
	            if (itemLayout) {
	                var dx = point[0] - itemLayout.cx;
	                var dy = point[1] - itemLayout.cy;
	                var radius = Math.sqrt(dx * dx + dy * dy);
	                return radius <= itemLayout.r && radius >= itemLayout.r0;
	            }
	        }

	    });

	    module.exports = Pie;


/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	
	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);
	    module.exports = function (seriesType, actionInfos) {
	        zrUtil.each(actionInfos, function (actionInfo) {
	            actionInfo.update = 'updateView';
	            /**
	             * @payload
	             * @property {string} seriesName
	             * @property {string} name
	             */
	            echarts.registerAction(actionInfo, function (payload, ecModel) {
	                var selected = {};
	                ecModel.eachComponent(
	                    {mainType: 'series', subType: seriesType, query: payload},
	                    function (seriesModel) {
	                        if (seriesModel[actionInfo.method]) {
	                            seriesModel[actionInfo.method](payload.name);
	                        }
	                        var data = seriesModel.getData();
	                        // Create selected map
	                        data.each(function (idx) {
	                            var name = data.getName(idx);
	                            selected[name] = seriesModel.isSelected(name) || false;
	                        });
	                    }
	                );
	                return {
	                    name: payload.name,
	                    selected: selected
	                };
	            });
	        });
	    };


/***/ },
/* 385 */
/***/ function(module, exports) {

	// Pick color from palette for each data item.
	// Applicable for charts that require applying color palette
	// in data level (like pie, funnel, chord).


	    module.exports = function (seriesType, ecModel) {
	        // Pie and funnel may use diferrent scope
	        var paletteScope = {};
	        ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	            var dataAll = seriesModel.getRawData();
	            var idxMap = {};
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                var data = seriesModel.getData();
	                data.each(function (idx) {
	                    var rawIdx = data.getRawIndex(idx);
	                    idxMap[rawIdx] = idx;
	                });
	                dataAll.each(function (rawIdx) {
	                    var filteredIdx = idxMap[rawIdx];

	                    // If series.itemStyle.normal.color is a function. itemVisual may be encoded
	                    var singleDataColor = filteredIdx != null
	                        && data.getItemVisual(filteredIdx, 'color', true);

	                    if (!singleDataColor) {
	                        // FIXME Performance
	                        var itemModel = dataAll.getItemModel(rawIdx);
	                        var color = itemModel.get('itemStyle.normal.color')
	                            || seriesModel.getColorFromPalette(dataAll.getName(rawIdx), paletteScope);
	                        // Legend may use the visual info in data before processed
	                        dataAll.setItemVisual(rawIdx, 'color', color);

	                        // Data is not filtered
	                        if (filteredIdx != null) {
	                            data.setItemVisual(filteredIdx, 'color', color);
	                        }
	                    }
	                    else {
	                        // Set data all color for legend
	                        dataAll.setItemVisual(rawIdx, 'color', singleDataColor);
	                    }
	                });
	            }
	        });
	    };


/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	// TODO minAngle



	    var numberUtil = __webpack_require__(246);
	    var parsePercent = numberUtil.parsePercent;
	    var labelLayout = __webpack_require__(387);
	    var zrUtil = __webpack_require__(243);

	    var PI2 = Math.PI * 2;
	    var RADIAN = Math.PI / 180;

	    module.exports = function (seriesType, ecModel, api, payload) {
	        ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	            var center = seriesModel.get('center');
	            var radius = seriesModel.get('radius');

	            if (!zrUtil.isArray(radius)) {
	                radius = [0, radius];
	            }
	            if (!zrUtil.isArray(center)) {
	                center = [center, center];
	            }

	            var width = api.getWidth();
	            var height = api.getHeight();
	            var size = Math.min(width, height);
	            var cx = parsePercent(center[0], width);
	            var cy = parsePercent(center[1], height);
	            var r0 = parsePercent(radius[0], size / 2);
	            var r = parsePercent(radius[1], size / 2);

	            var data = seriesModel.getData();

	            var startAngle = -seriesModel.get('startAngle') * RADIAN;

	            var minAngle = seriesModel.get('minAngle') * RADIAN;

	            var sum = data.getSum('value');
	            // Sum may be 0
	            var unitRadian = Math.PI / (sum || data.count()) * 2;

	            var clockwise = seriesModel.get('clockwise');

	            var roseType = seriesModel.get('roseType');
	            var stillShowZeroSum = seriesModel.get('stillShowZeroSum');

	            // [0...max]
	            var extent = data.getDataExtent('value');
	            extent[0] = 0;

	            // In the case some sector angle is smaller than minAngle
	            var restAngle = PI2;
	            var valueSumLargerThanMinAngle = 0;

	            var currentAngle = startAngle;

	            var dir = clockwise ? 1 : -1;
	            data.each('value', function (value, idx) {
	                var angle;
	                if (isNaN(value)) {
	                    data.setItemLayout(idx, {
	                        angle: NaN,
	                        startAngle: NaN,
	                        endAngle: NaN,
	                        clockwise: clockwise,
	                        cx: cx,
	                        cy: cy,
	                        r0: r0,
	                        r: roseType
	                            ? NaN
	                            : r
	                    });
	                    return;
	                }

	                // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？
	                if (roseType !== 'area') {
	                    angle = (sum === 0 && stillShowZeroSum)
	                        ? unitRadian : (value * unitRadian);
	                }
	                else {
	                    angle = PI2 / (data.count() || 1);
	                }

	                if (angle < minAngle) {
	                    angle = minAngle;
	                    restAngle -= minAngle;
	                }
	                else {
	                    valueSumLargerThanMinAngle += value;
	                }

	                var endAngle = currentAngle + dir * angle;
	                data.setItemLayout(idx, {
	                    angle: angle,
	                    startAngle: currentAngle,
	                    endAngle: endAngle,
	                    clockwise: clockwise,
	                    cx: cx,
	                    cy: cy,
	                    r0: r0,
	                    r: roseType
	                        ? numberUtil.linearMap(value, extent, [r0, r])
	                        : r
	                });

	                currentAngle = endAngle;
	            }, true);

	            // Some sector is constrained by minAngle
	            // Rest sectors needs recalculate angle
	            if (restAngle < PI2) {
	                // Average the angle if rest angle is not enough after all angles is
	                // Constrained by minAngle
	                if (restAngle <= 1e-3) {
	                    var angle = PI2 / data.count();
	                    data.each(function (idx) {
	                        var layout = data.getItemLayout(idx);
	                        layout.startAngle = startAngle + dir * idx * angle;
	                        layout.endAngle = startAngle + dir * (idx + 1) * angle;
	                    });
	                }
	                else {
	                    unitRadian = restAngle / valueSumLargerThanMinAngle;
	                    currentAngle = startAngle;
	                    data.each('value', function (value, idx) {
	                        var layout = data.getItemLayout(idx);
	                        var angle = layout.angle === minAngle
	                            ? minAngle : value * unitRadian;
	                        layout.startAngle = currentAngle;
	                        layout.endAngle = currentAngle + dir * angle;
	                        currentAngle += dir * angle;
	                    });
	                }
	            }

	            labelLayout(seriesModel, r, width, height);
	        });
	    };


/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// FIXME emphasis label position is not same with normal label position


	    var textContain = __webpack_require__(247);

	    function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {
	        list.sort(function (a, b) {
	            return a.y - b.y;
	        });

	        // 压
	        function shiftDown(start, end, delta, dir) {
	            for (var j = start; j < end; j++) {
	                list[j].y += delta;
	                if (j > start
	                    && j + 1 < end
	                    && list[j + 1].y > list[j].y + list[j].height
	                ) {
	                    shiftUp(j, delta / 2);
	                    return;
	                }
	            }

	            shiftUp(end - 1, delta / 2);
	        }

	        // 弹
	        function shiftUp(end, delta) {
	            for (var j = end; j >= 0; j--) {
	                list[j].y -= delta;
	                if (j > 0
	                    && list[j].y > list[j - 1].y + list[j - 1].height
	                ) {
	                    break;
	                }
	            }
	        }

	        function changeX(list, isDownList, cx, cy, r, dir) {
	            var lastDeltaX = dir > 0
	                ? isDownList                // 右侧
	                    ? Number.MAX_VALUE      // 下
	                    : 0                     // 上
	                : isDownList                // 左侧
	                    ? Number.MAX_VALUE      // 下
	                    : 0;                    // 上

	            for (var i = 0, l = list.length; i < l; i++) {
	                // Not change x for center label
	                if (list[i].position === 'center') {
	                    continue;
	                }
	                var deltaY = Math.abs(list[i].y - cy);
	                var length = list[i].len;
	                var length2 = list[i].len2;
	                var deltaX = (deltaY < r + length)
	                    ? Math.sqrt(
	                          (r + length + length2) * (r + length + length2)
	                          - deltaY * deltaY
	                      )
	                    : Math.abs(list[i].x - cx);
	                if (isDownList && deltaX >= lastDeltaX) {
	                    // 右下，左下
	                    deltaX = lastDeltaX - 10;
	                }
	                if (!isDownList && deltaX <= lastDeltaX) {
	                    // 右上，左上
	                    deltaX = lastDeltaX + 10;
	                }

	                list[i].x = cx + deltaX * dir;
	                lastDeltaX = deltaX;
	            }
	        }

	        var lastY = 0;
	        var delta;
	        var len = list.length;
	        var upList = [];
	        var downList = [];
	        for (var i = 0; i < len; i++) {
	            delta = list[i].y - lastY;
	            if (delta < 0) {
	                shiftDown(i, len, -delta, dir);
	            }
	            lastY = list[i].y + list[i].height;
	        }
	        if (viewHeight - lastY < 0) {
	            shiftUp(len - 1, lastY - viewHeight);
	        }
	        for (var i = 0; i < len; i++) {
	            if (list[i].y >= cy) {
	                downList.push(list[i]);
	            }
	            else {
	                upList.push(list[i]);
	            }
	        }
	        changeX(upList, false, cx, cy, r, dir);
	        changeX(downList, true, cx, cy, r, dir);
	    }

	    function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {
	        var leftList = [];
	        var rightList = [];
	        for (var i = 0; i < labelLayoutList.length; i++) {
	            if (labelLayoutList[i].x < cx) {
	                leftList.push(labelLayoutList[i]);
	            }
	            else {
	                rightList.push(labelLayoutList[i]);
	            }
	        }

	        adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);
	        adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);

	        for (var i = 0; i < labelLayoutList.length; i++) {
	            var linePoints = labelLayoutList[i].linePoints;
	            if (linePoints) {
	                var dist = linePoints[1][0] - linePoints[2][0];
	                if (labelLayoutList[i].x < cx) {
	                    linePoints[2][0] = labelLayoutList[i].x + 3;
	                }
	                else {
	                    linePoints[2][0] = labelLayoutList[i].x - 3;
	                }
	                linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;
	                linePoints[1][0] = linePoints[2][0] + dist;
	            }
	        }
	    }

	    module.exports = function (seriesModel, r, viewWidth, viewHeight) {
	        var data = seriesModel.getData();
	        var labelLayoutList = [];
	        var cx;
	        var cy;
	        var hasLabelRotate = false;

	        data.each(function (idx) {
	            var layout = data.getItemLayout(idx);

	            var itemModel = data.getItemModel(idx);
	            var labelModel = itemModel.getModel('label.normal');
	            // Use position in normal or emphasis
	            var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');

	            var labelLineModel = itemModel.getModel('labelLine.normal');
	            var labelLineLen = labelLineModel.get('length');
	            var labelLineLen2 = labelLineModel.get('length2');

	            var midAngle = (layout.startAngle + layout.endAngle) / 2;
	            var dx = Math.cos(midAngle);
	            var dy = Math.sin(midAngle);

	            var textX;
	            var textY;
	            var linePoints;
	            var textAlign;

	            cx = layout.cx;
	            cy = layout.cy;

	            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	            if (labelPosition === 'center') {
	                textX = layout.cx;
	                textY = layout.cy;
	                textAlign = 'center';
	            }
	            else {
	                var x1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dx : layout.r * dx) + cx;
	                var y1 = (isLabelInside ? (layout.r + layout.r0) / 2 * dy : layout.r * dy) + cy;

	                textX = x1 + dx * 3;
	                textY = y1 + dy * 3;

	                if (!isLabelInside) {
	                    // For roseType
	                    var x2 = x1 + dx * (labelLineLen + r - layout.r);
	                    var y2 = y1 + dy * (labelLineLen + r - layout.r);
	                    var x3 = x2 + ((dx < 0 ? -1 : 1) * labelLineLen2);
	                    var y3 = y2;

	                    textX = x3 + (dx < 0 ? -5 : 5);
	                    textY = y3;
	                    linePoints = [[x1, y1], [x2, y2], [x3, y3]];
	                }

	                textAlign = isLabelInside ? 'center' : (dx > 0 ? 'left' : 'right');
	            }
	            var font = labelModel.getModel('textStyle').getFont();

	            var labelRotate = labelModel.get('rotate')
	                ? (dx < 0 ? -midAngle + Math.PI : -midAngle) : 0;
	            var text = seriesModel.getFormattedLabel(idx, 'normal')
	                        || data.getName(idx);
	            var textRect = textContain.getBoundingRect(
	                text, font, textAlign, 'top'
	            );
	            hasLabelRotate = !!labelRotate;
	            layout.label = {
	                x: textX,
	                y: textY,
	                position: labelPosition,
	                height: textRect.height,
	                len: labelLineLen,
	                len2: labelLineLen2,
	                linePoints: linePoints,
	                textAlign: textAlign,
	                verticalAlign: 'middle',
	                font: font,
	                rotation: labelRotate
	            };

	            // Not layout the inside label
	            if (!isLabelInside) {
	                labelLayoutList.push(layout.label);
	            }
	        });
	        if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {
	            avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);
	        }
	    };


/***/ },
/* 388 */
/***/ function(module, exports) {

	
	    module.exports = function (seriesType, ecModel) {
	        var legendModels = ecModel.findComponents({
	            mainType: 'legend'
	        });
	        if (!legendModels || !legendModels.length) {
	            return;
	        }
	        ecModel.eachSeriesByType(seriesType, function (series) {
	            var data = series.getData();
	            data.filterSelf(function (idx) {
	                var name = data.getName(idx);
	                // If in any legend component the status is not selected.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(name)) {
	                        return false;
	                    }
	                }
	                return true;
	            }, this);
	        }, this);
	    };


/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var echarts = __webpack_require__(240);

	    __webpack_require__(390);
	    __webpack_require__(391);

	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(349), 'scatter', 'circle', null
	    ));
	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(350), 'scatter'
	    ));

	    // In case developer forget to include grid component
	    __webpack_require__(352);


/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var createListFromArray = __webpack_require__(341);
	    var SeriesModel = __webpack_require__(267);

	    module.exports = SeriesModel.extend({

	        type: 'series.scatter',

	        dependencies: ['grid', 'polar'],

	        getInitialData: function (option, ecModel) {
	            var list = createListFromArray(option.data, this, ecModel);
	            return list;
	        },

	        brushSelector: 'point',

	        defaultOption: {
	            coordinateSystem: 'cartesian2d',
	            zlevel: 0,
	            z: 2,
	            legendHoverLink: true,

	            hoverAnimation: true,
	            // Cartesian coordinate system
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,

	            // Polar coordinate system
	            // polarIndex: 0,

	            // Geo coordinate system
	            // geoIndex: 0,

	            // symbol: null,        // 图形类型
	            symbolSize: 10,          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	            // symbolRotate: null,  // 图形旋转控制

	            large: false,
	            // Available when large is true
	            largeThreshold: 2000,

	            // label: {
	                // normal: {
	                    // show: false
	                    // distance: 5,
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                    //           'inside'|'left'|'right'|'top'|'bottom'
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	            //     }
	            // },
	            itemStyle: {
	                normal: {
	                    opacity: 0.8
	                    // color: 各异
	                }
	            }
	        }

	    });


/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	

	    var SymbolDraw = __webpack_require__(344);
	    var LargeSymbolDraw = __webpack_require__(392);

	    __webpack_require__(240).extendChartView({

	        type: 'scatter',

	        init: function () {
	            this._normalSymbolDraw = new SymbolDraw();
	            this._largeSymbolDraw = new LargeSymbolDraw();
	        },

	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var largeSymbolDraw = this._largeSymbolDraw;
	            var normalSymbolDraw = this._normalSymbolDraw;
	            var group = this.group;

	            var symbolDraw = seriesModel.get('large') && data.count() > seriesModel.get('largeThreshold')
	                ? largeSymbolDraw : normalSymbolDraw;

	            this._symbolDraw = symbolDraw;
	            symbolDraw.updateData(data);
	            group.add(symbolDraw.group);

	            group.remove(
	                symbolDraw === largeSymbolDraw
	                ? normalSymbolDraw.group : largeSymbolDraw.group
	            );
	        },

	        updateLayout: function (seriesModel) {
	            this._symbolDraw.updateLayout(seriesModel);
	        },

	        remove: function (ecModel, api) {
	            this._symbolDraw && this._symbolDraw.remove(api, true);
	        },

	        dispose: function () {}
	    });


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Batch by color



	    var graphic = __webpack_require__(282);
	    var symbolUtil = __webpack_require__(346);

	    var LargeSymbolPath = graphic.extendShape({

	        shape: {
	            points: null,
	            sizes: null
	        },

	        symbolProxy: null,

	        buildPath: function (path, shape) {
	            var points = shape.points;
	            var sizes = shape.sizes;

	            var symbolProxy = this.symbolProxy;
	            var symbolProxyShape = symbolProxy.shape;
	            for (var i = 0; i < points.length; i++) {
	                var pt = points[i];
	                var size = sizes[i];
	                if (size[0] < 4) {
	                    // Optimize for small symbol
	                    path.rect(
	                        pt[0] - size[0] / 2, pt[1] - size[1] / 2,
	                        size[0], size[1]
	                    );
	                }
	                else {
	                    symbolProxyShape.x = pt[0] - size[0] / 2;
	                    symbolProxyShape.y = pt[1] - size[1] / 2;
	                    symbolProxyShape.width = size[0];
	                    symbolProxyShape.height = size[1];

	                    symbolProxy.buildPath(path, symbolProxyShape, true);
	                }
	            }
	        },

	        findDataIndex: function (x, y) {
	            var shape = this.shape;
	            var points = shape.points;
	            var sizes = shape.sizes;

	            // Not consider transform
	            // Treat each element as a rect
	            // top down traverse
	            for (var i = points.length - 1; i >= 0; i--) {
	                var pt = points[i];
	                var size = sizes[i];
	                var x0 = pt[0] - size[0] / 2;
	                var y0 = pt[1] - size[1] / 2;
	                if (x >= x0 && y >= y0 && x <= x0 + size[0] && y <= y0 + size[1]) {
	                    // i is dataIndex
	                    return i;
	                }
	            }

	            return -1;
	        }
	    });

	    function LargeSymbolDraw() {
	        this.group = new graphic.Group();

	        this._symbolEl = new LargeSymbolPath({
	            // rectHover: true,
	            // cursor: 'default'
	        });
	    }

	    var largeSymbolProto = LargeSymbolDraw.prototype;

	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     */
	    largeSymbolProto.updateData = function (data) {
	        this.group.removeAll();

	        var symbolEl = this._symbolEl;

	        var seriesModel = data.hostModel;

	        symbolEl.setShape({
	            points: data.mapArray(data.getItemLayout),
	            sizes: data.mapArray(
	                function (idx) {
	                    var size = data.getItemVisual(idx, 'symbolSize');
	                    if (!(size instanceof Array)) {
	                        size = [size, size];
	                    }
	                    return size;
	                }
	            )
	        });

	        // Create symbolProxy to build path for each data
	        symbolEl.symbolProxy = symbolUtil.createSymbol(
	            data.getVisual('symbol'), 0, 0, 0, 0
	        );
	        // Use symbolProxy setColor method
	        symbolEl.setColor = symbolEl.symbolProxy.setColor;

	        symbolEl.useStyle(
	            seriesModel.getModel('itemStyle.normal').getItemStyle(['color'])
	        );

	        var visualColor = data.getVisual('color');
	        if (visualColor) {
	            symbolEl.setColor(visualColor);
	        }

	        // Enable tooltip
	        // PENDING May have performance issue when path is extremely large
	        symbolEl.seriesIndex = seriesModel.seriesIndex;
	        symbolEl.on('mousemove', function (e) {
	            symbolEl.dataIndex = null;
	            var dataIndex = symbolEl.findDataIndex(e.offsetX, e.offsetY);
	            if (dataIndex > 0) {
	                // Provide dataIndex for tooltip
	                symbolEl.dataIndex = dataIndex;
	            }
	        });

	        // Add back
	        this.group.add(symbolEl);
	    };

	    largeSymbolProto.updateLayout = function (seriesModel) {
	        var data = seriesModel.getData();
	        this._symbolEl.setShape({
	            points: data.mapArray(data.getItemLayout)
	        });
	    };

	    largeSymbolProto.remove = function () {
	        this.group.removeAll();
	    };

	    module.exports = LargeSymbolDraw;


/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var echarts = __webpack_require__(240);

	    // Must use radar component
	    __webpack_require__(394);

	    __webpack_require__(399);
	    __webpack_require__(400);

	    echarts.registerVisual(zrUtil.curry(__webpack_require__(385), 'radar'));
	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(349), 'radar', 'circle', null
	    ));
	    echarts.registerLayout(__webpack_require__(401));

	    echarts.registerProcessor(
	        zrUtil.curry(__webpack_require__(388), 'radar')
	    );

	    echarts.registerPreprocessor(__webpack_require__(402));


/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(395);
	    __webpack_require__(397);

	    __webpack_require__(398);


/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	// TODO clockwise


	    var zrUtil = __webpack_require__(243);
	    var IndicatorAxis = __webpack_require__(396);
	    var IntervalScale = __webpack_require__(357);
	    var numberUtil = __webpack_require__(246);
	    var axisHelper = __webpack_require__(354);

	    function Radar(radarModel, ecModel, api) {

	        this._model = radarModel;
	        /**
	         * Radar dimensions
	         * @type {Array.<string>}
	         */
	        this.dimensions = [];

	        this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {
	            var dim = 'indicator_' + idx;
	            var indicatorAxis = new IndicatorAxis(dim, new IntervalScale());
	            indicatorAxis.name = indicatorModel.get('name');
	            // Inject model and axis
	            indicatorAxis.model = indicatorModel;
	            indicatorModel.axis = indicatorAxis;
	            this.dimensions.push(dim);
	            return indicatorAxis;
	        }, this);

	        this.resize(radarModel, api);

	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.cx;
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.cy;
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.r;
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.startAngle;
	    }

	    Radar.prototype.getIndicatorAxes = function () {
	        return this._indicatorAxes;
	    };

	    Radar.prototype.dataToPoint = function (value, indicatorIndex) {
	        var indicatorAxis = this._indicatorAxes[indicatorIndex];

	        return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);
	    };

	    Radar.prototype.coordToPoint = function (coord, indicatorIndex) {
	        var indicatorAxis = this._indicatorAxes[indicatorIndex];
	        var angle = indicatorAxis.angle;
	        var x = this.cx + coord * Math.cos(angle);
	        var y = this.cy - coord * Math.sin(angle);
	        return [x, y];
	    };

	    Radar.prototype.pointToData = function (pt) {
	        var dx = pt[0] - this.cx;
	        var dy = pt[1] - this.cy;
	        var radius = Math.sqrt(dx * dx + dy * dy);
	        dx /= radius;
	        dy /= radius;

	        var radian = Math.atan2(-dy, dx);

	        // Find the closest angle
	        // FIXME index can calculated directly
	        var minRadianDiff = Infinity;
	        var closestAxis;
	        var closestAxisIdx = -1;
	        for (var i = 0; i < this._indicatorAxes.length; i++) {
	            var indicatorAxis = this._indicatorAxes[i];
	            var diff = Math.abs(radian - indicatorAxis.angle);
	            if (diff < minRadianDiff) {
	                closestAxis = indicatorAxis;
	                closestAxisIdx = i;
	                minRadianDiff = diff;
	            }
	        }

	        return [closestAxisIdx, +(closestAxis && closestAxis.coodToData(radius))];
	    };

	    Radar.prototype.resize = function (radarModel, api) {
	        var center = radarModel.get('center');
	        var viewWidth = api.getWidth();
	        var viewHeight = api.getHeight();
	        var viewSize = Math.min(viewWidth, viewHeight) / 2;
	        this.cx = numberUtil.parsePercent(center[0], viewWidth);
	        this.cy = numberUtil.parsePercent(center[1], viewHeight);

	        this.startAngle = radarModel.get('startAngle') * Math.PI / 180;

	        this.r = numberUtil.parsePercent(radarModel.get('radius'), viewSize);

	        zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {
	            indicatorAxis.setExtent(0, this.r);
	            var angle = (this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length);
	            // Normalize to [-PI, PI]
	            angle = Math.atan2(Math.sin(angle), Math.cos(angle));
	            indicatorAxis.angle = angle;
	        }, this);
	    };

	    Radar.prototype.update = function (ecModel, api) {
	        var indicatorAxes = this._indicatorAxes;
	        var radarModel = this._model;
	        zrUtil.each(indicatorAxes, function (indicatorAxis) {
	            indicatorAxis.scale.setExtent(Infinity, -Infinity);
	        });
	        ecModel.eachSeriesByType('radar', function (radarSeries, idx) {
	            if (radarSeries.get('coordinateSystem') !== 'radar'
	                || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel
	            ) {
	                return;
	            }
	            var data = radarSeries.getData();
	            zrUtil.each(indicatorAxes, function (indicatorAxis) {
	                indicatorAxis.scale.unionExtentFromData(data, indicatorAxis.dim);
	            });
	        }, this);

	        var splitNumber = radarModel.get('splitNumber');

	        function increaseInterval(interval) {
	            var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10));
	            // Increase interval
	            var f = interval / exp10;
	            if (f === 2) {
	                f = 5;
	            }
	            else { // f is 2 or 5
	                f *= 2;
	            }
	            return f * exp10;
	        }
	        // Force all the axis fixing the maxSplitNumber.
	        zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {
	            var rawExtent = axisHelper.getScaleExtent(indicatorAxis, indicatorAxis.model);
	            axisHelper.niceScaleExtent(indicatorAxis, indicatorAxis.model);

	            var axisModel = indicatorAxis.model;
	            var scale = indicatorAxis.scale;
	            var fixedMin = axisModel.getMin();
	            var fixedMax = axisModel.getMax();
	            var interval = scale.getInterval();

	            if (fixedMin != null && fixedMax != null) {
	                // User set min, max, divide to get new interval
	                // FIXME precision
	                scale.setInterval(
	                    (fixedMax - fixedMin) / splitNumber
	                );
	            }
	            else if (fixedMin != null) {
	                var max;
	                // User set min, expand extent on the other side
	                do {
	                    max = fixedMin + interval * splitNumber;
	                    scale.setExtent(+fixedMin, max);
	                    // Interval must been set after extent
	                    // FIXME
	                    scale.setInterval(interval);

	                    interval = increaseInterval(interval);
	                } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));
	            }
	            else if (fixedMax != null) {
	                var min;
	                // User set min, expand extent on the other side
	                do {
	                    min = fixedMax - interval * splitNumber;
	                    scale.setExtent(min, +fixedMax);
	                    scale.setInterval(interval);
	                    interval = increaseInterval(interval);
	                } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));
	            }
	            else {
	                var nicedSplitNumber = scale.getTicks().length - 1;
	                if (nicedSplitNumber > splitNumber) {
	                    interval = increaseInterval(interval);
	                }
	                // PENDING
	                var center = Math.round((rawExtent[0] + rawExtent[1]) / 2 / interval) * interval;
	                var halfSplitNumber = Math.round(splitNumber / 2);
	                scale.setExtent(
	                    numberUtil.round(center - halfSplitNumber * interval),
	                    numberUtil.round(center + (splitNumber - halfSplitNumber) * interval)
	                );
	                scale.setInterval(interval);
	            }
	        });
	    };

	    /**
	     * Radar dimensions is based on the data
	     * @type {Array}
	     */
	    Radar.dimensions = [];

	    Radar.create = function (ecModel, api) {
	        var radarList = [];
	        ecModel.eachComponent('radar', function (radarModel) {
	            var radar = new Radar(radarModel, ecModel, api);
	            radarList.push(radar);
	            radarModel.coordinateSystem = radar;
	        });
	        ecModel.eachSeriesByType('radar', function (radarSeries) {
	            if (radarSeries.get('coordinateSystem') === 'radar') {
	                // Inject coordinate system
	                radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];
	            }
	        });
	        return radarList;
	    };

	    __webpack_require__(265).register('radar', Radar);
	    module.exports = Radar;


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var Axis = __webpack_require__(363);

	    function IndicatorAxis(dim, scale, radiusExtent) {
	        Axis.call(this, dim, scale, radiusExtent);

	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = 'value';

	        this.angle = 0;

	        /**
	         * Indicator name
	         * @type {string}
	         */
	        this.name = '';
	        /**
	         * @type {module:echarts/model/Model}
	         */
	        this.model;
	    }

	    zrUtil.inherits(IndicatorAxis, Axis);

	    module.exports = IndicatorAxis;


/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	


	    var axisDefault = __webpack_require__(368);
	    var valueAxisDefault = axisDefault.valueAxis;
	    var Model = __webpack_require__(251);
	    var zrUtil = __webpack_require__(243);

	    var axisModelCommonMixin = __webpack_require__(369);

	    function defaultsShow(opt, show) {
	        return zrUtil.defaults({
	            show: show
	        }, opt);
	    }

	    var RadarModel = __webpack_require__(240).extendComponentModel({

	        type: 'radar',

	        optionUpdated: function () {
	            var boundaryGap = this.get('boundaryGap');
	            var splitNumber = this.get('splitNumber');
	            var scale = this.get('scale');
	            var axisLine = this.get('axisLine');
	            var axisTick = this.get('axisTick');
	            var axisLabel = this.get('axisLabel');
	            var nameTextStyle = this.get('name.textStyle');
	            var showName = this.get('name.show');
	            var nameFormatter = this.get('name.formatter');
	            var nameGap = this.get('nameGap');
	            var triggerEvent = this.get('triggerEvent');

	            var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {
	                // PENDING
	                if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {
	                    indicatorOpt.min = 0;
	                }
	                else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {
	                    indicatorOpt.max = 0;
	                }
	                // Use same configuration
	                indicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {
	                    boundaryGap: boundaryGap,
	                    splitNumber: splitNumber,
	                    scale: scale,
	                    axisLine: axisLine,
	                    axisTick: axisTick,
	                    axisLabel: axisLabel,
	                    // Competitable with 2 and use text
	                    name: indicatorOpt.text,
	                    nameLocation: 'end',
	                    nameGap: nameGap,
	                    // min: 0,
	                    nameTextStyle: nameTextStyle,
	                    triggerEvent: triggerEvent
	                }, false);
	                if (!showName) {
	                    indicatorOpt.name = '';
	                }
	                if (typeof nameFormatter === 'string') {
	                    var indName = indicatorOpt.name;
	                    indicatorOpt.name = nameFormatter.replace('{value}', indName != null ? indName : '');
	                }
	                else if (typeof nameFormatter === 'function') {
	                    indicatorOpt.name = nameFormatter(
	                        indicatorOpt.name, indicatorOpt
	                    );
	                }
	                var model = zrUtil.extend(
	                    new Model(indicatorOpt, null, this.ecModel),
	                    axisModelCommonMixin
	                );

	                // For triggerEvent.
	                model.mainType = 'radar';
	                model.componentIndex = this.componentIndex;

	                return model;
	            }, this);

	            this.getIndicatorModels = function () {
	                return indicatorModels;
	            };
	        },

	        defaultOption: {

	            zlevel: 0,

	            z: 0,

	            center: ['50%', '50%'],

	            radius: '75%',

	            startAngle: 90,

	            name: {
	                show: true
	                // formatter: null
	                // textStyle: {}
	            },

	            boundaryGap: [0, 0],

	            splitNumber: 5,

	            nameGap: 15,

	            scale: false,

	            // Polygon or circle
	            shape: 'polygon',

	            axisLine: zrUtil.merge(
	                {
	                    lineStyle: {
	                        color: '#bbb'
	                    }
	                },
	                valueAxisDefault.axisLine
	            ),
	            axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),
	            axisTick: defaultsShow(valueAxisDefault.axisTick, false),
	            splitLine: defaultsShow(valueAxisDefault.splitLine, true),
	            splitArea: defaultsShow(valueAxisDefault.splitArea, true),

	            // {text, min, max}
	            indicator: []
	        }
	    });

	    module.exports = RadarModel;


/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	

	    var AxisBuilder = __webpack_require__(372);
	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);

	    var axisBuilderAttrs = [
	        'axisLine', 'axisLabel', 'axisTick', 'axisName'
	    ];

	    module.exports = __webpack_require__(240).extendComponentView({

	        type: 'radar',

	        render: function (radarModel, ecModel, api) {
	            var group = this.group;
	            group.removeAll();

	            this._buildAxes(radarModel);
	            this._buildSplitLineAndArea(radarModel);
	        },

	        _buildAxes: function (radarModel) {
	            var radar = radarModel.coordinateSystem;
	            var indicatorAxes = radar.getIndicatorAxes();
	            var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {
	                var axisBuilder = new AxisBuilder(indicatorAxis.model, {
	                    position: [radar.cx, radar.cy],
	                    rotation: indicatorAxis.angle,
	                    labelDirection: -1,
	                    tickDirection: -1,
	                    nameDirection: 1
	                });
	                return axisBuilder;
	            });

	            zrUtil.each(axisBuilders, function (axisBuilder) {
	                zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	                this.group.add(axisBuilder.getGroup());
	            }, this);
	        },

	        _buildSplitLineAndArea: function (radarModel) {
	            var radar = radarModel.coordinateSystem;
	            var indicatorAxes = radar.getIndicatorAxes();
	            if (!indicatorAxes.length) {
	                return;
	            }
	            var shape = radarModel.get('shape');
	            var splitLineModel = radarModel.getModel('splitLine');
	            var splitAreaModel = radarModel.getModel('splitArea');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');

	            var showSplitLine = splitLineModel.get('show');
	            var showSplitArea = splitAreaModel.get('show');
	            var splitLineColors = lineStyleModel.get('color');
	            var splitAreaColors = areaStyleModel.get('color');

	            splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];
	            splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];

	            var splitLines = [];
	            var splitAreas = [];

	            function getColorIndex(areaOrLine, areaOrLineColorList, idx) {
	                var colorIndex = idx % areaOrLineColorList.length;
	                areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];
	                return colorIndex;
	            }

	            if (shape === 'circle') {
	                var ticksRadius = indicatorAxes[0].getTicksCoords();
	                var cx = radar.cx;
	                var cy = radar.cy;
	                for (var i = 0; i < ticksRadius.length; i++) {
	                    if (showSplitLine) {
	                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	                        splitLines[colorIndex].push(new graphic.Circle({
	                            shape: {
	                                cx: cx,
	                                cy: cy,
	                                r: ticksRadius[i]
	                            }
	                        }));
	                    }
	                    if (showSplitArea && i < ticksRadius.length - 1) {
	                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);
	                        splitAreas[colorIndex].push(new graphic.Ring({
	                            shape: {
	                                cx: cx,
	                                cy: cy,
	                                r0: ticksRadius[i],
	                                r: ticksRadius[i + 1]
	                            }
	                        }));
	                    }
	                }
	            }
	            // Polyyon
	            else {
	                var realSplitNumber = -1;
	                var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {
	                    var ticksCoords = indicatorAxis.getTicksCoords();
	                    realSplitNumber = Math.max(ticksCoords.length - 1, realSplitNumber);
	                    return zrUtil.map(ticksCoords, function (tickCoord) {
	                        return radar.coordToPoint(tickCoord, idx);
	                    });
	                });

	                var prevPoints = [];
	                for (var i = 0; i <= realSplitNumber; i++) {
	                    var points = [];
	                    for (var j = 0; j < indicatorAxes.length; j++) {
	                        points.push(axesTicksPoints[j][i]);
	                    }
	                    // Close
	                    if (points[0]) {
	                        points.push(points[0].slice());
	                    }
	                    else {
	                        if (__DEV__) {
	                            console.error('Can\'t draw value axis ' + i);
	                        }
	                    }
	                    if (showSplitLine) {
	                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	                        splitLines[colorIndex].push(new graphic.Polyline({
	                            shape: {
	                                points: points
	                            }
	                        }));
	                    }
	                    if (showSplitArea && prevPoints) {
	                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);
	                        splitAreas[colorIndex].push(new graphic.Polygon({
	                            shape: {
	                                points: points.concat(prevPoints)
	                            }
	                        }));
	                    }
	                    prevPoints = points.slice().reverse();
	                }
	            }

	            var lineStyle = lineStyleModel.getLineStyle();
	            var areaStyle = areaStyleModel.getAreaStyle();
	            // Add splitArea before splitLine
	            zrUtil.each(splitAreas, function (splitAreas, idx) {
	                this.group.add(graphic.mergePath(
	                    splitAreas, {
	                        style: zrUtil.defaults({
	                            stroke: 'none',
	                            fill: splitAreaColors[idx % splitAreaColors.length]
	                        }, areaStyle),
	                        silent: true
	                    }
	                ));
	            }, this);

	            zrUtil.each(splitLines, function (splitLines, idx) {
	                this.group.add(graphic.mergePath(
	                    splitLines, {
	                        style: zrUtil.defaults({
	                            fill: 'none',
	                            stroke: splitLineColors[idx % splitLineColors.length]
	                        }, lineStyle),
	                        silent: true
	                    }
	                ));
	            }, this);

	        }
	    });


/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var SeriesModel = __webpack_require__(267);
	    var List = __webpack_require__(337);
	    var completeDimensions = __webpack_require__(342);
	    var zrUtil = __webpack_require__(243);
	    var encodeHTML = __webpack_require__(245).encodeHTML;

	    var RadarSeries = SeriesModel.extend({

	        type: 'series.radar',

	        dependencies: ['radar'],


	        // Overwrite
	        init: function (option) {
	            RadarSeries.superApply(this, 'init', arguments);

	            // Enable legend selection for each data item
	            // Use a function instead of direct access because data reference may changed
	            this.legendDataProvider = function () {
	                return this.getRawData();
	            };
	        },

	        getInitialData: function (option, ecModel) {
	            var data = option.data || [];
	            var dimensions = completeDimensions(
	                [], data, [], 'indicator_'
	            );
	            var list = new List(dimensions, this);
	            list.initData(data);
	            return list;
	        },

	        formatTooltip: function (dataIndex) {
	            var value = this.getRawValue(dataIndex);
	            var coordSys = this.coordinateSystem;
	            var indicatorAxes = coordSys.getIndicatorAxes();
	            var name = this.getData().getName(dataIndex);
	            return encodeHTML(name === '' ? this.name : name) + '<br/>'
	                + zrUtil.map(indicatorAxes, function (axis, idx) {
	                    return encodeHTML(axis.name + ' : ' + value[idx]);
	                }).join('<br />');
	        },

	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	            coordinateSystem: 'radar',
	            legendHoverLink: true,
	            radarIndex: 0,
	            lineStyle: {
	                normal: {
	                    width: 2,
	                    type: 'solid'
	                }
	            },
	            label: {
	                normal: {
	                    position: 'top'
	                }
	            },
	            // areaStyle: {
	            // },
	            // itemStyle: {}
	            symbol: 'emptyCircle',
	            symbolSize: 4
	            // symbolRotate: null
	        }
	    });

	    module.exports = RadarSeries;


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	

	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);
	    var symbolUtil = __webpack_require__(346);

	    function normalizeSymbolSize(symbolSize) {
	        if (!zrUtil.isArray(symbolSize)) {
	            symbolSize = [+symbolSize, +symbolSize];
	        }
	        return symbolSize;
	    }
	    module.exports = __webpack_require__(240).extendChartView({
	        type: 'radar',

	        render: function (seriesModel, ecModel, api) {
	            var polar = seriesModel.coordinateSystem;
	            var group = this.group;

	            var data = seriesModel.getData();
	            var oldData = this._data;

	            function createSymbol(data, idx) {
	                var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	                var color = data.getItemVisual(idx, 'color');
	                if (symbolType === 'none') {
	                    return;
	                }
	                var symbolPath = symbolUtil.createSymbol(
	                    symbolType, -0.5, -0.5, 1, 1, color
	                );
	                symbolPath.attr({
	                    style: {
	                        strokeNoScale: true
	                    },
	                    z2: 100,
	                    scale: normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'))
	                });
	                return symbolPath;
	            }

	            function updateSymbols(oldPoints, newPoints, symbolGroup, data, idx, isInit) {
	                // Simply rerender all
	                symbolGroup.removeAll();
	                for (var i = 0; i < newPoints.length - 1; i++) {
	                    var symbolPath = createSymbol(data, idx);
	                    if (symbolPath) {
	                        symbolPath.__dimIdx = i;
	                        if (oldPoints[i]) {
	                            symbolPath.attr('position', oldPoints[i]);
	                            graphic[isInit ? 'initProps' : 'updateProps'](
	                                symbolPath, {
	                                    position: newPoints[i]
	                                }, seriesModel, idx
	                            );
	                        }
	                        else {
	                            symbolPath.attr('position', newPoints[i]);
	                        }
	                        symbolGroup.add(symbolPath);
	                    }
	                }
	            }

	            function getInitialPoints(points) {
	                return zrUtil.map(points, function (pt) {
	                    return [polar.cx, polar.cy];
	                });
	            }
	            data.diff(oldData)
	                .add(function (idx) {
	                    var points = data.getItemLayout(idx);
	                    if (!points) {
	                        return;
	                    }
	                    var polygon = new graphic.Polygon();
	                    var polyline = new graphic.Polyline();
	                    var target = {
	                        shape: {
	                            points: points
	                        }
	                    };
	                    polygon.shape.points = getInitialPoints(points);
	                    polyline.shape.points = getInitialPoints(points);
	                    graphic.initProps(polygon, target, seriesModel, idx);
	                    graphic.initProps(polyline, target, seriesModel, idx);

	                    var itemGroup = new graphic.Group();
	                    var symbolGroup = new graphic.Group();
	                    itemGroup.add(polyline);
	                    itemGroup.add(polygon);
	                    itemGroup.add(symbolGroup);

	                    updateSymbols(
	                        polyline.shape.points, points, symbolGroup, data, idx, true
	                    );

	                    data.setItemGraphicEl(idx, itemGroup);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var itemGroup = oldData.getItemGraphicEl(oldIdx);
	                    var polyline = itemGroup.childAt(0);
	                    var polygon = itemGroup.childAt(1);
	                    var symbolGroup = itemGroup.childAt(2);
	                    var target = {
	                        shape: {
	                            points: data.getItemLayout(newIdx)
	                        }
	                    };
	                    if (!target.shape.points) {
	                        return;
	                    }
	                    updateSymbols(
	                        polyline.shape.points, target.shape.points, symbolGroup, data, newIdx, false
	                    );

	                    graphic.updateProps(polyline, target, seriesModel);
	                    graphic.updateProps(polygon, target, seriesModel);

	                    data.setItemGraphicEl(newIdx, itemGroup);
	                })
	                .remove(function (idx) {
	                    group.remove(oldData.getItemGraphicEl(idx));
	                })
	                .execute();

	            data.eachItemGraphicEl(function (itemGroup, idx) {
	                var itemModel = data.getItemModel(idx);
	                var polyline = itemGroup.childAt(0);
	                var polygon = itemGroup.childAt(1);
	                var symbolGroup = itemGroup.childAt(2);
	                var color = data.getItemVisual(idx, 'color');

	                group.add(itemGroup);

	                polyline.useStyle(
	                    zrUtil.defaults(
	                        itemModel.getModel('lineStyle.normal').getLineStyle(),
	                        {
	                            fill: 'none',
	                            stroke: color
	                        }
	                    )
	                );
	                polyline.hoverStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();

	                var areaStyleModel = itemModel.getModel('areaStyle.normal');
	                var hoverAreaStyleModel = itemModel.getModel('areaStyle.emphasis');
	                var polygonIgnore = areaStyleModel.isEmpty() && areaStyleModel.parentModel.isEmpty();
	                var hoverPolygonIgnore = hoverAreaStyleModel.isEmpty() && hoverAreaStyleModel.parentModel.isEmpty();

	                hoverPolygonIgnore = hoverPolygonIgnore && polygonIgnore;
	                polygon.ignore = polygonIgnore;

	                polygon.useStyle(
	                    zrUtil.defaults(
	                        areaStyleModel.getAreaStyle(),
	                        {
	                            fill: color,
	                            opacity: 0.7
	                        }
	                    )
	                );
	                polygon.hoverStyle = hoverAreaStyleModel.getAreaStyle();

	                var itemStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	                var itemHoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	                var labelModel = itemModel.getModel('label.normal');
	                var labelHoverModel = itemModel.getModel('label.emphasis');
	                symbolGroup.eachChild(function (symbolPath) {
	                    symbolPath.setStyle(itemStyle);
	                    symbolPath.hoverStyle = zrUtil.clone(itemHoverStyle);

	                    var defaultText = data.get(data.dimensions[symbolPath.__dimIdx], idx);
	                    graphic.setText(symbolPath.style, labelModel, color);
	                    symbolPath.setStyle({
	                        text: labelModel.get('show') ? zrUtil.retrieve(
	                            seriesModel.getFormattedLabel(
	                                idx, 'normal', null, symbolPath.__dimIdx
	                            ),
	                            defaultText
	                        ) : ''
	                    });

	                    graphic.setText(symbolPath.hoverStyle, labelHoverModel, color);
	                    symbolPath.hoverStyle.text = labelHoverModel.get('show') ? zrUtil.retrieve(
	                        seriesModel.getFormattedLabel(
	                            idx, 'emphasis', null, symbolPath.__dimIdx
	                        ),
	                        defaultText
	                    ) : '';
	                });

	                function onEmphasis() {
	                    polygon.attr('ignore', hoverPolygonIgnore);
	                }

	                function onNormal() {
	                    polygon.attr('ignore', polygonIgnore);
	                }

	                itemGroup.off('mouseover').off('mouseout').off('normal').off('emphasis');
	                itemGroup.on('emphasis', onEmphasis)
	                    .on('mouseover', onEmphasis)
	                    .on('normal', onNormal)
	                    .on('mouseout', onNormal);

	                graphic.setHoverStyle(itemGroup);
	            });

	            this._data = data;
	        },

	        remove: function () {
	            this.group.removeAll();
	            this._data = null;
	        },

	        dispose: function () {}
	    });


/***/ },
/* 401 */
/***/ function(module, exports) {

	

	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('radar', function (seriesModel) {
	            var data = seriesModel.getData();
	            var points = [];
	            var coordSys = seriesModel.coordinateSystem;
	            if (!coordSys) {
	                return;
	            }

	            function pointsConverter(val, idx) {
	                points[idx] = points[idx] || [];
	                points[idx][i] = coordSys.dataToPoint(val, i);
	            }
	            for (var i = 0; i < coordSys.getIndicatorAxes().length; i++) {
	                var dim = data.dimensions[i];
	                data.each(dim, pointsConverter);
	            }

	            data.each(function (idx) {
	                // Close polygon
	                points[idx][0] && points[idx].push(points[idx][0].slice());
	                data.setItemLayout(idx, points[idx]);
	            });
	        });
	    };


/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	// Backward compat for radar chart in 2


	    var zrUtil = __webpack_require__(243);

	    module.exports = function (option) {
	        var polarOptArr = option.polar;
	        if (polarOptArr) {
	            if (!zrUtil.isArray(polarOptArr)) {
	                polarOptArr = [polarOptArr];
	            }
	            var polarNotRadar = [];
	            zrUtil.each(polarOptArr, function (polarOpt, idx) {
	                if (polarOpt.indicator) {
	                    if (polarOpt.type && !polarOpt.shape) {
	                        polarOpt.shape = polarOpt.type;
	                    }
	                    option.radar = option.radar || [];
	                    if (!zrUtil.isArray(option.radar)) {
	                        option.radar = [option.radar];
	                    }
	                    option.radar.push(polarOpt);
	                }
	                else {
	                    polarNotRadar.push(polarOpt);
	                }
	            });
	            option.polar = polarNotRadar;
	        }
	        zrUtil.each(option.series, function (seriesOpt) {
	            if (seriesOpt.type === 'radar' && seriesOpt.polarIndex) {
	                seriesOpt.radarIndex = seriesOpt.polarIndex;
	            }
	        });
	    };


/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);
	    var PRIORITY = echarts.PRIORITY;

	    __webpack_require__(404);

	    __webpack_require__(414);

	    __webpack_require__(418);

	    __webpack_require__(405);

	    echarts.registerLayout(__webpack_require__(420));

	    echarts.registerVisual(__webpack_require__(421));

	    echarts.registerProcessor(PRIORITY.PROCESSOR.STATISTIC, __webpack_require__(422));

	    echarts.registerPreprocessor(__webpack_require__(423));

	    __webpack_require__(384)('map', [{
	        type: 'mapToggleSelect',
	        event: 'mapselectchanged',
	        method: 'toggleSelected'
	    }, {
	        type: 'mapSelect',
	        event: 'mapselected',
	        method: 'select'
	    }, {
	        type: 'mapUnSelect',
	        event: 'mapunselected',
	        method: 'unSelect'
	    }]);


/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	

	    var List = __webpack_require__(337);
	    var SeriesModel = __webpack_require__(267);
	    var zrUtil = __webpack_require__(243);
	    var completeDimensions = __webpack_require__(342);

	    var formatUtil = __webpack_require__(245);
	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;

	    var dataSelectableMixin = __webpack_require__(382);

	    var geoCreator = __webpack_require__(405);

	    var MapSeries = SeriesModel.extend({

	        type: 'series.map',

	        dependencies: ['geo'],

	        layoutMode: 'box',

	        /**
	         * Only first map series of same mapType will drawMap
	         * @type {boolean}
	         */
	        needsDrawMap: false,

	        /**
	         * Group of all map series with same mapType
	         * @type {boolean}
	         */
	        seriesGroup: [],

	        init: function (option) {

	            option = this._fillOption(option, this.getMapType());
	            this.option = option;

	            MapSeries.superApply(this, 'init', arguments);

	            this.updateSelectedMap(option.data);
	        },

	        getInitialData: function (option) {
	            var dimensions = completeDimensions(['value'], option.data || []);

	            var list = new List(dimensions, this);

	            list.initData(option.data);

	            return list;
	        },

	        mergeOption: function (newOption) {
	            if (newOption.data) {
	                newOption = this._fillOption(newOption, this.getMapType());
	            }

	            MapSeries.superCall(this, 'mergeOption', newOption);

	            this.updateSelectedMap(this.option.data);
	        },

	        /**
	         * If no host geo model, return null, which means using a
	         * inner exclusive geo model.
	         */
	        getHostGeoModel: function () {
	            var geoIndex = this.option.geoIndex;
	            return geoIndex != null
	                ? this.dependentModels.geo[geoIndex]
	                : null;
	        },

	        getMapType: function () {
	            return (this.getHostGeoModel() || this).option.map;
	        },

	        _fillOption: function (option, mapName) {
	            // Shallow clone
	            option = zrUtil.extend({}, option);

	            option.data = geoCreator.getFilledRegions(option.data, mapName);

	            return option;
	        },

	        getRawValue: function (dataIndex) {
	            // Use value stored in data instead because it is calculated from multiple series
	            // FIXME Provide all value of multiple series ?
	            return this.getData().get('value', dataIndex);
	        },

	        /**
	         * Get model of region
	         * @param  {string} name
	         * @return {module:echarts/model/Model}
	         */
	        getRegionModel: function (regionName) {
	            var data = this.getData();
	            return data.getItemModel(data.indexOfName(regionName));
	        },

	        /**
	         * Map tooltip formatter
	         *
	         * @param {number} dataIndex
	         */
	        formatTooltip: function (dataIndex) {
	            // FIXME orignalData and data is a bit confusing
	            var data = this.getData();
	            var formattedValue = addCommas(this.getRawValue(dataIndex));
	            var name = data.getName(dataIndex);

	            var seriesGroup = this.seriesGroup;
	            var seriesNames = [];
	            for (var i = 0; i < seriesGroup.length; i++) {
	                var otherIndex = seriesGroup[i].originalData.indexOfName(name);
	                if (!isNaN(seriesGroup[i].originalData.get('value', otherIndex))) {
	                    seriesNames.push(
	                        encodeHTML(seriesGroup[i].name)
	                    );
	                }
	            }

	            return seriesNames.join(', ') + '<br />'
	                + encodeHTML(name + ' : ' + formattedValue);
	        },

	        /**
	         * @implement
	         */
	        getTooltipPosition: function (dataIndex) {
	            if (dataIndex != null) {
	                var name = this.getData().getName(dataIndex);
	                var geo = this.coordinateSystem;
	                var region = geo.getRegion(name);

	                return region && geo.dataToPoint(region.center);
	            }
	        },

	        setZoom: function (zoom) {
	            this.option.zoom = zoom;
	        },

	        setCenter: function (center) {
	            this.option.center = center;
	        },

	        defaultOption: {
	            // 一级层叠
	            zlevel: 0,
	            // 二级层叠
	            z: 2,

	            coordinateSystem: 'geo',

	            // map should be explicitly specified since ec3.
	            map: '',

	            // If `geoIndex` is not specified, a exclusive geo will be
	            // created. Otherwise use the specified geo component, and
	            // `map` and `mapType` are ignored.
	            // geoIndex: 0,

	            // 'center' | 'left' | 'right' | 'x%' | {number}
	            left: 'center',
	            // 'center' | 'top' | 'bottom' | 'x%' | {number}
	            top: 'center',
	            // right
	            // bottom
	            // width:
	            // height

	            // Aspect is width / height. Inited to be geoJson bbox aspect
	            // This parameter is used for scale this aspect
	            aspectScale: 0.75,

	            ///// Layout with center and size
	            // If you wan't to put map in a fixed size box with right aspect ratio
	            // This two properties may more conveninet
	            // layoutCenter: [50%, 50%]
	            // layoutSize: 100


	            // 数值合并方式，默认加和，可选为：
	            // 'sum' | 'average' | 'max' | 'min'
	            // mapValueCalculation: 'sum',
	            // 地图数值计算结果小数精度
	            // mapValuePrecision: 0,


	            // 显示图例颜色标识（系列标识的小圆点），图例开启时有效
	            showLegendSymbol: true,
	            // 选择模式，默认关闭，可选single，multiple
	            // selectedMode: false,
	            dataRangeHoverLink: true,
	            // 是否开启缩放及漫游模式
	            // roam: false,

	            // Default on center of map
	            center: null,

	            zoom: 1,

	            scaleLimit: null,

	            label: {
	                normal: {
	                    show: false,
	                    textStyle: {
	                        color: '#000'
	                    }
	                },
	                emphasis: {
	                    show: true,
	                    textStyle: {
	                        color: 'rgb(100,0,0)'
	                    }
	                }
	            },
	            // scaleLimit: null,
	            itemStyle: {
	                normal: {
	                    // color: 各异,
	                    borderWidth: 0.5,
	                    borderColor: '#444',
	                    areaColor: '#eee'
	                },
	                // 也是选中样式
	                emphasis: {
	                    areaColor: 'rgba(255,215,0,0.8)'
	                }
	            }
	        }

	    });

	    zrUtil.mixin(MapSeries, dataSelectableMixin);

	    module.exports = MapSeries;


/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	

	    var Geo = __webpack_require__(406);

	    var layout = __webpack_require__(260);
	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);

	    var mapDataStores = {};

	    /**
	     * Resize method bound to the geo
	     * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function resizeGeo (geoModel, api) {
	        var rect = this.getBoundingRect();

	        var boxLayoutOption;

	        var center = geoModel.get('layoutCenter');
	        var size = geoModel.get('layoutSize');

	        var viewWidth = api.getWidth();
	        var viewHeight = api.getHeight();

	        var aspectScale = geoModel.get('aspectScale') || 0.75;
	        var aspect = rect.width / rect.height * aspectScale;

	        var useCenterAndSize = false;
	        if (center && size) {
	            center = [
	                numberUtil.parsePercent(center[0], viewWidth),
	                numberUtil.parsePercent(center[1], viewHeight)
	            ];
	            size = numberUtil.parsePercent(size, Math.min(viewWidth, viewHeight));

	            if (!isNaN(center[0]) && !isNaN(center[1]) && !isNaN(size)) {
	                useCenterAndSize = true;
	            }
	            else {
	                if (__DEV__) {
	                    console.warn('Given layoutCenter or layoutSize data are invalid. Use left/top/width/height instead.');
	                }
	            }
	        }

	        var viewRect;
	        if (useCenterAndSize) {
	            var viewRect = {};
	            if (aspect > 1) {
	                // Width is same with size
	                viewRect.width = size;
	                viewRect.height = size / aspect;
	            }
	            else {
	                viewRect.height = size;
	                viewRect.width = size * aspect;
	            }
	            viewRect.y = center[1] - viewRect.height / 2;
	            viewRect.x = center[0] - viewRect.width / 2;
	        }
	        else {
	            // Use left/top/width/height
	            boxLayoutOption = geoModel.getBoxLayoutParams();

	            // 0.75 rate
	            boxLayoutOption.aspect = aspect;

	            viewRect = layout.getLayoutRect(boxLayoutOption, {
	                width: viewWidth,
	                height: viewHeight
	            });
	        }

	        this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);

	        this.setCenter(geoModel.get('center'));
	        this.setZoom(geoModel.get('zoom'));
	    }

	    /**
	     * @param {module:echarts/coord/Geo} geo
	     * @param {module:echarts/model/Model} model
	     * @inner
	     */
	    function setGeoCoords(geo, model) {
	        zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {
	            geo.addGeoCoord(name, geoCoord);
	        });
	    }

	    if (__DEV__) {
	        var mapNotExistsError = function (name) {
	            console.error('Map ' + name + ' not exists. You can download map file on http://echarts.baidu.com/download-map.html');
	        };
	    }

	    var geoCreator = {

	        // For deciding which dimensions to use when creating list data
	        dimensions: Geo.prototype.dimensions,

	        create: function (ecModel, api) {
	            var geoList = [];

	            // FIXME Create each time may be slow
	            ecModel.eachComponent('geo', function (geoModel, idx) {
	                var name = geoModel.get('map');
	                var mapData = mapDataStores[name];
	                if (__DEV__) {
	                    if (!mapData) {
	                        mapNotExistsError(name);
	                    }
	                }
	                var geo = new Geo(
	                    name + idx, name,
	                    mapData && mapData.geoJson, mapData && mapData.specialAreas,
	                    geoModel.get('nameMap')
	                );
	                geo.zoomLimit = geoModel.get('scaleLimit');
	                geoList.push(geo);

	                setGeoCoords(geo, geoModel);

	                geoModel.coordinateSystem = geo;
	                geo.model = geoModel;

	                // Inject resize method
	                geo.resize = resizeGeo;

	                geo.resize(geoModel, api);
	            });

	            ecModel.eachSeries(function (seriesModel) {
	                var coordSys = seriesModel.get('coordinateSystem');
	                if (coordSys === 'geo') {
	                    var geoIndex = seriesModel.get('geoIndex') || 0;
	                    seriesModel.coordinateSystem = geoList[geoIndex];
	                }
	            });

	            // If has map series
	            var mapModelGroupBySeries = {};

	            ecModel.eachSeriesByType('map', function (seriesModel) {
	                if (!seriesModel.getHostGeoModel()) {
	                    var mapType = seriesModel.getMapType();
	                    mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];
	                    mapModelGroupBySeries[mapType].push(seriesModel);
	                }
	            });

	            zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {
	                var mapData = mapDataStores[mapType];
	                if (__DEV__) {
	                    if (!mapData) {
	                        mapNotExistsError(mapSeries[0].get('map'));
	                    }
	                }

	                var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {
	                    return singleMapSeries.get('nameMap');
	                });
	                var geo = new Geo(
	                    mapType, mapType,
	                    mapData && mapData.geoJson, mapData && mapData.specialAreas,
	                    zrUtil.mergeAll(nameMapList)
	                );
	                geo.zoomLimit = zrUtil.retrieve.apply(null, zrUtil.map(mapSeries, function (singleMapSeries) {
	                    return singleMapSeries.get('scaleLimit');
	                }));
	                geoList.push(geo);

	                // Inject resize method
	                geo.resize = resizeGeo;

	                geo.resize(mapSeries[0], api);

	                zrUtil.each(mapSeries, function (singleMapSeries) {
	                    singleMapSeries.coordinateSystem = geo;

	                    setGeoCoords(geo, singleMapSeries);
	                });
	            });

	            return geoList;
	        },

	        /**
	         * @param {string} mapName
	         * @param {Object|string} geoJson
	         * @param {Object} [specialAreas]
	         *
	         * @example
	         *     $.get('USA.json', function (geoJson) {
	         *         echarts.registerMap('USA', geoJson);
	         *         // Or
	         *         echarts.registerMap('USA', {
	         *             geoJson: geoJson,
	         *             specialAreas: {}
	         *         })
	         *     });
	         */
	        registerMap: function (mapName, geoJson, specialAreas) {
	            if (geoJson.geoJson && !geoJson.features) {
	                specialAreas = geoJson.specialAreas;
	                geoJson = geoJson.geoJson;
	            }
	            if (typeof geoJson === 'string') {
	                geoJson = (typeof JSON !== 'undefined' && JSON.parse)
	                    ? JSON.parse(geoJson) : (new Function('return (' + geoJson + ');'))();
	            }
	            mapDataStores[mapName] = {
	                geoJson: geoJson,
	                specialAreas: specialAreas
	            };
	        },

	        /**
	         * @param {string} mapName
	         * @return {Object}
	         */
	        getMap: function (mapName) {
	            return mapDataStores[mapName];
	        },

	        /**
	         * Fill given regions array
	         * @param  {Array.<Object>} originRegionArr
	         * @param  {string} mapName
	         * @return {Array}
	         */
	        getFilledRegions: function (originRegionArr, mapName) {
	            // Not use the original
	            var regionsArr = (originRegionArr || []).slice();

	            var map = geoCreator.getMap(mapName);
	            var geoJson = map && map.geoJson;
	            if (!geoJson) {
	                if (__DEV__) {
	                    mapNotExistsError(mapName);
	                }
	                return originRegionArr;
	            }

	            var dataNameMap = {};
	            var features = geoJson.features;
	            for (var i = 0; i < regionsArr.length; i++) {
	                dataNameMap[regionsArr[i].name] = regionsArr[i];
	            }

	            for (var i = 0; i < features.length; i++) {
	                var name = features[i].properties.name;
	                if (!dataNameMap[name]) {
	                    regionsArr.push({
	                        name: name
	                    });
	                }
	            }
	            return regionsArr;
	        }
	    };

	    // Inject methods into echarts
	    var echarts = __webpack_require__(240);

	    echarts.registerMap = geoCreator.registerMap;

	    echarts.getMap = geoCreator.getMap;

	    // TODO
	    echarts.loadMap = function () {};

	    echarts.registerCoordinateSystem('geo', geoCreator);

	    module.exports = geoCreator;


/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	

	    var parseGeoJson = __webpack_require__(407);

	    var zrUtil = __webpack_require__(243);

	    var BoundingRect = __webpack_require__(248);

	    var View = __webpack_require__(410);


	    // Geo fix functions
	    var geoFixFuncs = [
	        __webpack_require__(411),
	        __webpack_require__(412),
	        __webpack_require__(413)
	    ];

	    /**
	     * [Geo description]
	     * @param {string} name Geo name
	     * @param {string} map Map type
	     * @param {Object} geoJson
	     * @param {Object} [specialAreas]
	     *        Specify the positioned areas by left, top, width, height
	     * @param {Object.<string, string>} [nameMap]
	     *        Specify name alias
	     */
	    function Geo(name, map, geoJson, specialAreas, nameMap) {

	        View.call(this, name);

	        /**
	         * Map type
	         * @type {string}
	         */
	        this.map = map;

	        this._nameCoordMap = {};

	        this.loadGeoJson(geoJson, specialAreas, nameMap);
	    }

	    Geo.prototype = {

	        constructor: Geo,

	        type: 'geo',

	        /**
	         * @param {Array.<string>}
	         * @readOnly
	         */
	        dimensions: ['lng', 'lat'],

	        /**
	         * If contain given lng,lat coord
	         * @param {Array.<number>}
	         * @readOnly
	         */
	        containCoord: function (coord) {
	            var regions = this.regions;
	            for (var i = 0; i < regions.length; i++) {
	                if (regions[i].contain(coord)) {
	                    return true;
	                }
	            }
	            return false;
	        },
	        /**
	         * @param {Object} geoJson
	         * @param {Object} [specialAreas]
	         *        Specify the positioned areas by left, top, width, height
	         * @param {Object.<string, string>} [nameMap]
	         *        Specify name alias
	         */
	        loadGeoJson: function (geoJson, specialAreas, nameMap) {
	            // https://jsperf.com/try-catch-performance-overhead
	            try {
	                this.regions = geoJson ? parseGeoJson(geoJson) : [];
	            }
	            catch (e) {
	                throw 'Invalid geoJson format\n' + e;
	            }
	            specialAreas = specialAreas || {};
	            nameMap = nameMap || {};
	            var regions = this.regions;
	            var regionsMap = {};
	            for (var i = 0; i < regions.length; i++) {
	                var regionName = regions[i].name;
	                // Try use the alias in nameMap
	                regionName = nameMap[regionName] || regionName;
	                regions[i].name = regionName;

	                regionsMap[regionName] = regions[i];
	                // Add geoJson
	                this.addGeoCoord(regionName, regions[i].center);

	                // Some area like Alaska in USA map needs to be tansformed
	                // to look better
	                var specialArea = specialAreas[regionName];
	                if (specialArea) {
	                    regions[i].transformTo(
	                        specialArea.left, specialArea.top, specialArea.width, specialArea.height
	                    );
	                }
	            }

	            this._regionsMap = regionsMap;

	            this._rect = null;

	            zrUtil.each(geoFixFuncs, function (fixFunc) {
	                fixFunc(this);
	            }, this);
	        },

	        // Overwrite
	        transformTo: function (x, y, width, height) {
	            var rect = this.getBoundingRect();

	            rect = rect.clone();
	            // Longitute is inverted
	            rect.y = -rect.y - rect.height;

	            var viewTransform = this._viewTransform;

	            viewTransform.transform = rect.calculateTransform(
	                new BoundingRect(x, y, width, height)
	            );

	            viewTransform.decomposeTransform();

	            var scale = viewTransform.scale;
	            scale[1] = -scale[1];

	            viewTransform.updateTransform();

	            this._updateTransform();
	        },

	        /**
	         * @param {string} name
	         * @return {module:echarts/coord/geo/Region}
	         */
	        getRegion: function (name) {
	            return this._regionsMap[name];
	        },

	        getRegionByCoord: function (coord) {
	            var regions = this.regions;
	            for (var i = 0; i < regions.length; i++) {
	                if (regions[i].contain(coord)) {
	                    return regions[i];
	                }
	            }
	        },

	        /**
	         * Add geoCoord for indexing by name
	         * @param {string} name
	         * @param {Array.<number>} geoCoord
	         */
	        addGeoCoord: function (name, geoCoord) {
	            this._nameCoordMap[name] = geoCoord;
	        },

	        /**
	         * Get geoCoord by name
	         * @param {string} name
	         * @return {Array.<number>}
	         */
	        getGeoCoord: function (name) {
	            return this._nameCoordMap[name];
	        },

	        // Overwrite
	        getBoundingRect: function () {
	            if (this._rect) {
	                return this._rect;
	            }
	            var rect;

	            var regions = this.regions;
	            for (var i = 0; i < regions.length; i++) {
	                var regionRect = regions[i].getBoundingRect();
	                rect = rect || regionRect.clone();
	                rect.union(regionRect);
	            }
	            // FIXME Always return new ?
	            return (this._rect = rect || new BoundingRect(0, 0, 0, 0));
	        },

	        /**
	         * Convert series data to a list of points
	         * @param {module:echarts/data/List} data
	         * @param {boolean} stack
	         * @return {Array}
	         *  Return list of points. For example:
	         *  `[[10, 10], [20, 20], [30, 30]]`
	         */
	        dataToPoints: function (data) {
	            var item = [];
	            return data.mapArray(['lng', 'lat'], function (lon, lat) {
	                item[0] = lon;
	                item[1] = lat;
	                return this.dataToPoint(item);
	            }, this);
	        },

	        // Overwrite
	        /**
	         * @param {string|Array.<number>} data
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (data) {
	            if (typeof data === 'string') {
	                // Map area name to geoCoord
	                data = this.getGeoCoord(data);
	            }
	            if (data) {
	                return View.prototype.dataToPoint.call(this, data);
	            }
	        },

	        /**
	         * @override
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),

	        /**
	         * @override
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        convertFromPixel: zrUtil.curry(doConvert, 'pointToData')

	    };

	    zrUtil.mixin(Geo, View);

	    function doConvert(methodName, ecModel, finder, value) {
	        var geoModel = finder.geoModel;
	        var seriesModel = finder.seriesModel;

	        var coordSys = geoModel
	            ? geoModel.coordinateSystem
	            : seriesModel
	            ? (
	                seriesModel.coordinateSystem // For map.
	                || (seriesModel.getReferringComponents('geo')[0] || {}).coordinateSystem
	            )
	            : null;

	        return coordSys === this ? coordSys[methodName](value) : null;
	    }

	    module.exports = Geo;


/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Parse and decode geo json
	 * @module echarts/coord/geo/parseGeoJson
	 */


	    var zrUtil = __webpack_require__(243);

	    var Region = __webpack_require__(408);

	    function decode(json) {
	        if (!json.UTF8Encoding) {
	            return json;
	        }
	        var features = json.features;

	        for (var f = 0; f < features.length; f++) {
	            var feature = features[f];
	            var geometry = feature.geometry;
	            var coordinates = geometry.coordinates;
	            var encodeOffsets = geometry.encodeOffsets;

	            for (var c = 0; c < coordinates.length; c++) {
	                var coordinate = coordinates[c];

	                if (geometry.type === 'Polygon') {
	                    coordinates[c] = decodePolygon(
	                        coordinate,
	                        encodeOffsets[c]
	                    );
	                }
	                else if (geometry.type === 'MultiPolygon') {
	                    for (var c2 = 0; c2 < coordinate.length; c2++) {
	                        var polygon = coordinate[c2];
	                        coordinate[c2] = decodePolygon(
	                            polygon,
	                            encodeOffsets[c][c2]
	                        );
	                    }
	                }
	            }
	        }
	        // Has been decoded
	        json.UTF8Encoding = false;
	        return json;
	    }

	    function decodePolygon(coordinate, encodeOffsets) {
	        var result = [];
	        var prevX = encodeOffsets[0];
	        var prevY = encodeOffsets[1];

	        for (var i = 0; i < coordinate.length; i += 2) {
	            var x = coordinate.charCodeAt(i) - 64;
	            var y = coordinate.charCodeAt(i + 1) - 64;
	            // ZigZag decoding
	            x = (x >> 1) ^ (-(x & 1));
	            y = (y >> 1) ^ (-(y & 1));
	            // Delta deocding
	            x += prevX;
	            y += prevY;

	            prevX = x;
	            prevY = y;
	            // Dequantize
	            result.push([x / 1024, y / 1024]);
	        }

	        return result;
	    }

	    /**
	     * @inner
	     */
	    function flattern2D(array) {
	        var ret = [];
	        for (var i = 0; i < array.length; i++) {
	            for (var k = 0; k < array[i].length; k++) {
	                ret.push(array[i][k]);
	            }
	        }
	        return ret;
	    }

	    /**
	     * @alias module:echarts/coord/geo/parseGeoJson
	     * @param {Object} geoJson
	     * @return {module:zrender/container/Group}
	     */
	    module.exports = function (geoJson) {

	        decode(geoJson);

	        return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {
	            // Output of mapshaper may have geometry null
	            return featureObj.geometry && featureObj.properties;
	        }), function (featureObj) {
	            var properties = featureObj.properties;
	            var geometry = featureObj.geometry;

	            var coordinates = geometry.coordinates;

	            if (geometry.type === 'MultiPolygon') {
	                coordinates = flattern2D(coordinates);
	            }

	            return new Region(
	                properties.name,
	                coordinates,
	                properties.cp
	            );
	        });
	    };


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/coord/geo/Region
	 */


	    var polygonContain = __webpack_require__(409);

	    var BoundingRect = __webpack_require__(248);

	    var bbox = __webpack_require__(290);
	    var vec2 = __webpack_require__(249);

	    /**
	     * @param {string} name
	     * @param {Array} contours
	     * @param {Array.<number>} cp
	     */
	    function Region(name, contours, cp) {

	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.name = name;

	        /**
	         * @type {Array.<Array>}
	         * @readOnly
	         */
	        this.contours = contours;

	        if (!cp) {
	            var rect = this.getBoundingRect();
	            cp = [
	                rect.x + rect.width / 2,
	                rect.y + rect.height / 2
	            ];
	        }
	        else {
	            cp = [cp[0], cp[1]];
	        }
	        /**
	         * @type {Array.<number>}
	         */
	        this.center = cp;
	    }

	    Region.prototype = {

	        constructor: Region,

	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getBoundingRect: function () {
	            var rect = this._rect;
	            if (rect) {
	                return rect;
	            }

	            var MAX_NUMBER = Number.MAX_VALUE;
	            var min = [MAX_NUMBER, MAX_NUMBER];
	            var max = [-MAX_NUMBER, -MAX_NUMBER];
	            var min2 = [];
	            var max2 = [];
	            var contours = this.contours;
	            for (var i = 0; i < contours.length; i++) {
	                bbox.fromPoints(contours[i], min2, max2);
	                vec2.min(min, min, min2);
	                vec2.max(max, max, max2);
	            }
	            // No data
	            if (i === 0) {
	                min[0] = min[1] = max[0] = max[1] = 0;
	            }

	            return (this._rect = new BoundingRect(
	                min[0], min[1], max[0] - min[0], max[1] - min[1]
	            ));
	        },

	        /**
	         * @param {<Array.<number>} coord
	         * @return {boolean}
	         */
	        contain: function (coord) {
	            var rect = this.getBoundingRect();
	            var contours = this.contours;
	            if (rect.contain(coord[0], coord[1])) {
	                for (var i = 0, len = contours.length; i < len; i++) {
	                    if (polygonContain.contain(contours[i], coord[0], coord[1])) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        },

	        transformTo: function (x, y, width, height) {
	            var rect = this.getBoundingRect();
	            var aspect = rect.width / rect.height;
	            if (!width) {
	                width = aspect * height;
	            }
	            else if (!height) {
	                height = width / aspect ;
	            }
	            var target = new BoundingRect(x, y, width, height);
	            var transform = rect.calculateTransform(target);
	            var contours = this.contours;
	            for (var i = 0; i < contours.length; i++) {
	                for (var p = 0; p < contours[i].length; p++) {
	                    vec2.applyTransform(contours[i][p], contours[i][p], transform);
	                }
	            }
	            rect = this._rect;
	            rect.copy(target);
	            // Update center
	            this.center = [
	                rect.x + rect.width / 2,
	                rect.y + rect.height / 2
	            ];
	        }
	    };

	    module.exports = Region;


/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	

	    var windingLine = __webpack_require__(297);

	    var EPSILON = 1e-8;

	    function isAroundEqual(a, b) {
	        return Math.abs(a - b) < EPSILON;
	    }

	    function contain(points, x, y) {
	        var w = 0;
	        var p = points[0];

	        if (!p) {
	            return false;
	        }

	        for (var i = 1; i < points.length; i++) {
	            var p2 = points[i];
	            w += windingLine(p[0], p[1], p2[0], p2[1], x, y);
	            p = p2;
	        }

	        // Close polygon
	        var p0 = points[0];
	        if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {
	            w += windingLine(p[0], p[1], p0[0], p0[1], x, y);
	        }

	        return w !== 0;
	    }


	    module.exports = {
	        contain: contain
	    };


/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Simple view coordinate system
	 * Mapping given x, y to transformd view x, y
	 */


	    var vector = __webpack_require__(249);
	    var matrix = __webpack_require__(250);

	    var Transformable = __webpack_require__(273);
	    var zrUtil = __webpack_require__(243);

	    var BoundingRect = __webpack_require__(248);

	    var v2ApplyTransform = vector.applyTransform;

	    // Dummy transform node
	    function TransformDummy() {
	        Transformable.call(this);
	    }
	    zrUtil.mixin(TransformDummy, Transformable);

	    function View(name) {
	        /**
	         * @type {string}
	         */
	        this.name = name;

	        /**
	         * @type {Object}
	         */
	        this.zoomLimit;

	        Transformable.call(this);

	        this._roamTransform = new TransformDummy();

	        this._viewTransform = new TransformDummy();

	        this._center;
	        this._zoom;
	    }

	    View.prototype = {

	        constructor: View,

	        type: 'view',

	        /**
	         * @param {Array.<string>}
	         * @readOnly
	         */
	        dimensions: ['x', 'y'],

	        /**
	         * Set bounding rect
	         * @param {number} x
	         * @param {number} y
	         * @param {number} width
	         * @param {number} height
	         */

	        // PENDING to getRect
	        setBoundingRect: function (x, y, width, height) {
	            this._rect = new BoundingRect(x, y, width, height);
	            return this._rect;
	        },

	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        // PENDING to getRect
	        getBoundingRect: function () {
	            return this._rect;
	        },

	        /**
	         * @param {number} x
	         * @param {number} y
	         * @param {number} width
	         * @param {number} height
	         */
	        setViewRect: function (x, y, width, height) {
	            this.transformTo(x, y, width, height);
	            this._viewRect = new BoundingRect(x, y, width, height);
	        },

	        /**
	         * Transformed to particular position and size
	         * @param {number} x
	         * @param {number} y
	         * @param {number} width
	         * @param {number} height
	         */
	        transformTo: function (x, y, width, height) {
	            var rect = this.getBoundingRect();
	            var viewTransform = this._viewTransform;

	            viewTransform.transform = rect.calculateTransform(
	                new BoundingRect(x, y, width, height)
	            );

	            viewTransform.decomposeTransform();

	            this._updateTransform();
	        },

	        /**
	         * Set center of view
	         * @param {Array.<number>} [centerCoord]
	         */
	        setCenter: function (centerCoord) {
	            if (!centerCoord) {
	                return;
	            }
	            this._center = centerCoord;

	            this._updateCenterAndZoom();
	        },

	        /**
	         * @param {number} zoom
	         */
	        setZoom: function (zoom) {
	            zoom = zoom || 1;

	            var zoomLimit = this.zoomLimit;
	            if (zoomLimit) {
	                if (zoomLimit.max != null) {
	                    zoom = Math.min(zoomLimit.max, zoom);
	                }
	                if (zoomLimit.min != null) {
	                    zoom = Math.max(zoomLimit.min, zoom);
	                }
	            }
	            this._zoom = zoom;

	            this._updateCenterAndZoom();
	        },

	        /**
	         * Get default center without roam
	         */
	        getDefaultCenter: function () {
	            // Rect before any transform
	            var rawRect = this.getBoundingRect();
	            var cx = rawRect.x + rawRect.width / 2;
	            var cy = rawRect.y + rawRect.height / 2;

	            return [cx, cy];
	        },

	        getCenter: function () {
	            return this._center || this.getDefaultCenter();
	        },

	        getZoom: function () {
	            return this._zoom || 1;
	        },

	        /**
	         * @return {Array.<number}
	         */
	        getRoamTransform: function () {
	            return this._roamTransform;
	        },

	        _updateCenterAndZoom: function () {
	            // Must update after view transform updated
	            var viewTransformMatrix = this._viewTransform.getLocalTransform();
	            var roamTransform = this._roamTransform;
	            var defaultCenter = this.getDefaultCenter();
	            var center = this.getCenter();
	            var zoom = this.getZoom();

	            center = vector.applyTransform([], center, viewTransformMatrix);
	            defaultCenter = vector.applyTransform([], defaultCenter, viewTransformMatrix);

	            roamTransform.origin = center;
	            roamTransform.position = [
	                defaultCenter[0] - center[0],
	                defaultCenter[1] - center[1]
	            ];
	            roamTransform.scale = [zoom, zoom];

	            this._updateTransform();
	        },

	        /**
	         * Update transform from roam and mapLocation
	         * @private
	         */
	        _updateTransform: function () {
	            var roamTransform = this._roamTransform;
	            var viewTransform = this._viewTransform;

	            viewTransform.parent = roamTransform;
	            roamTransform.updateTransform();
	            viewTransform.updateTransform();

	            viewTransform.transform
	                && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);

	            if (this.transform) {
	                this.invTransform = this.invTransform || [];
	                matrix.invert(this.invTransform, this.transform);
	            }
	            else {
	                this.invTransform = null;
	            }
	            this.decomposeTransform();
	        },

	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getViewRect: function () {
	            return this._viewRect;
	        },

	        /**
	         * Get view rect after roam transform
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getViewRectAfterRoam: function () {
	            var rect = this.getBoundingRect().clone();
	            rect.applyTransform(this.transform);
	            return rect;
	        },

	        /**
	         * Convert a single (lon, lat) data item to (x, y) point.
	         * @param {Array.<number>} data
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (data) {
	            var transform = this.transform;
	            return transform
	                ? v2ApplyTransform([], data, transform)
	                : [data[0], data[1]];
	        },

	        /**
	         * Convert a (x, y) point to (lon, lat) data
	         * @param {Array.<number>} point
	         * @return {Array.<number>}
	         */
	        pointToData: function (point) {
	            var invTransform = this.invTransform;
	            return invTransform
	                ? v2ApplyTransform([], point, invTransform)
	                : [point[0], point[1]];
	        },

	        /**
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        convertToPixel: zrUtil.curry(doConvert, 'dataToPoint'),

	        /**
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        convertFromPixel: zrUtil.curry(doConvert, 'pointToData'),

	        /**
	         * @implements
	         * see {module:echarts/CoodinateSystem}
	         */
	        containPoint: function (point) {
	            return this.getViewRectAfterRoam().contain(point[0], point[1]);
	        }

	        /**
	         * @return {number}
	         */
	        // getScalarScale: function () {
	        //     // Use determinant square root of transform to mutiply scalar
	        //     var m = this.transform;
	        //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));
	        //     return det;
	        // }
	    };

	    zrUtil.mixin(View, Transformable);

	    function doConvert(methodName, ecModel, finder, value) {
	        var seriesModel = finder.seriesModel;
	        var coordSys = seriesModel ? seriesModel.coordinateSystem : null; // e.g., graph.
	        return coordSys === this ? coordSys[methodName](value) : null;
	    }

	    module.exports = View;


/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	// Fix for 南海诸岛


	    var Region = __webpack_require__(408);

	    var geoCoord = [126, 25];

	    var points = [
	        [[0,3.5],[7,11.2],[15,11.9],[30,7],[42,0.7],[52,0.7],
	         [56,7.7],[59,0.7],[64,0.7],[64,0],[5,0],[0,3.5]],
	        [[13,16.1],[19,14.7],[16,21.7],[11,23.1],[13,16.1]],
	        [[12,32.2],[14,38.5],[15,38.5],[13,32.2],[12,32.2]],
	        [[16,47.6],[12,53.2],[13,53.2],[18,47.6],[16,47.6]],
	        [[6,64.4],[8,70],[9,70],[8,64.4],[6,64.4]],
	        [[23,82.6],[29,79.8],[30,79.8],[25,82.6],[23,82.6]],
	        [[37,70.7],[43,62.3],[44,62.3],[39,70.7],[37,70.7]],
	        [[48,51.1],[51,45.5],[53,45.5],[50,51.1],[48,51.1]],
	        [[51,35],[51,28.7],[53,28.7],[53,35],[51,35]],
	        [[52,22.4],[55,17.5],[56,17.5],[53,22.4],[52,22.4]],
	        [[58,12.6],[62,7],[63,7],[60,12.6],[58,12.6]],
	        [[0,3.5],[0,93.1],[64,93.1],[64,0],[63,0],[63,92.4],
	         [1,92.4],[1,3.5],[0,3.5]]
	    ];
	    for (var i = 0; i < points.length; i++) {
	        for (var k = 0; k < points[i].length; k++) {
	            points[i][k][0] /= 10.5;
	            points[i][k][1] /= -10.5 / 0.75;

	            points[i][k][0] += geoCoord[0];
	            points[i][k][1] += geoCoord[1];
	        }
	    }
	    module.exports = function (geo) {
	        if (geo.map === 'china') {
	            geo.regions.push(new Region(
	                '南海诸岛', points, geoCoord
	            ));
	        }
	    };


/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    var coordsOffsetMap = {
	        '南海诸岛' : [32, 80],
	        // 全国
	        '广东': [0, -10],
	        '香港': [10, 5],
	        '澳门': [-10, 10],
	        //'北京': [-10, 0],
	        '天津': [5, 5]
	    };

	    module.exports = function (geo) {
	        zrUtil.each(geo.regions, function (region) {
	            var coordFix = coordsOffsetMap[region.name];
	            if (coordFix) {
	                var cp = region.center;
	                cp[0] += coordFix[0] / 10.5;
	                cp[1] += -coordFix[1] / (10.5 / 0.75);
	            }
	        });
	    };


/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    var geoCoordMap = {
	        'Russia': [100, 60],
	        'United States of America': [-99, 38]
	    };

	    module.exports = function (geo) {
	        zrUtil.each(geo.regions, function (region) {
	            var geoCoord = geoCoordMap[region.name];
	            if (geoCoord) {
	                var cp = region.center;
	                cp[0] = geoCoord[0];
	                cp[1] = geoCoord[1];
	            }
	        });
	    };


/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	

	    // var zrUtil = require('zrender/lib/core/util');
	    var graphic = __webpack_require__(282);

	    var MapDraw = __webpack_require__(415);

	    __webpack_require__(240).extendChartView({

	        type: 'map',

	        render: function (mapModel, ecModel, api, payload) {
	            // Not render if it is an toggleSelect action from self
	            if (payload && payload.type === 'mapToggleSelect'
	                && payload.from === this.uid
	            ) {
	                return;
	            }

	            var group = this.group;
	            group.removeAll();

	            if (mapModel.getHostGeoModel()) {
	                return;
	            }

	            // Not update map if it is an roam action from self
	            if (!(payload && payload.type === 'geoRoam'
	                    && payload.componentType === 'series'
	                    && payload.seriesId === mapModel.id
	                )
	            ) {
	                if (mapModel.needsDrawMap) {
	                    var mapDraw = this._mapDraw || new MapDraw(api, true);
	                    group.add(mapDraw.group);

	                    mapDraw.draw(mapModel, ecModel, api, this, payload);

	                    this._mapDraw = mapDraw;
	                }
	                else {
	                    // Remove drawed map
	                    this._mapDraw && this._mapDraw.remove();
	                    this._mapDraw = null;
	                }
	            }
	            else {
	                var mapDraw = this._mapDraw;
	                mapDraw && group.add(mapDraw.group);
	            }

	            mapModel.get('showLegendSymbol') && ecModel.getComponent('legend')
	                && this._renderSymbols(mapModel, ecModel, api);
	        },

	        remove: function () {
	            this._mapDraw && this._mapDraw.remove();
	            this._mapDraw = null;
	            this.group.removeAll();
	        },

	        dispose: function () {
	            this._mapDraw && this._mapDraw.remove();
	            this._mapDraw = null;
	        },

	        _renderSymbols: function (mapModel, ecModel, api) {
	            var originalData = mapModel.originalData;
	            var group = this.group;

	            originalData.each('value', function (value, idx) {
	                if (isNaN(value)) {
	                    return;
	                }

	                var layout = originalData.getItemLayout(idx);

	                if (!layout || !layout.point) {
	                    // Not exists in map
	                    return;
	                }

	                var point = layout.point;
	                var offset = layout.offset;

	                var circle = new graphic.Circle({
	                    style: {
	                        // Because the special of map draw.
	                        // Which needs statistic of multiple series and draw on one map.
	                        // And each series also need a symbol with legend color
	                        //
	                        // Layout and visual are put one the different data
	                        fill: mapModel.getData().getVisual('color')
	                    },
	                    shape: {
	                        cx: point[0] + offset * 9,
	                        cy: point[1],
	                        r: 3
	                    },
	                    silent: true,
	                    z2: 10
	                });

	                // First data on the same region
	                if (!offset) {
	                    var fullData = mapModel.mainSeries.getData();
	                    var name = originalData.getName(idx);
	                    var labelText = name;
	                    var fullIndex = fullData.indexOfName(name);

	                    var itemModel = originalData.getItemModel(idx);
	                    var labelModel = itemModel.getModel('label.normal');
	                    var hoverLabelModel = itemModel.getModel('label.emphasis');

	                    var textStyleModel = labelModel.getModel('textStyle');
	                    var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');

	                    var polygonGroups = fullData.getItemGraphicEl(fullIndex);
	                    circle.setStyle({
	                        textPosition: 'bottom'
	                    });

	                    var onEmphasis = function () {
	                        circle.setStyle({
	                            text: hoverLabelModel.get('show') ? labelText : '',
	                            textFill: hoverTextStyleModel.getTextColor(),
	                            textFont: hoverTextStyleModel.getFont()
	                        });
	                    };

	                    var onNormal = function () {
	                        circle.setStyle({
	                            text: labelModel.get('show') ? labelText : '',
	                            textFill: textStyleModel.getTextColor(),
	                            textFont: textStyleModel.getFont()
	                        });
	                    };

	                    polygonGroups.on('mouseover', onEmphasis)
	                        .on('mouseout', onNormal)
	                        .on('emphasis', onEmphasis)
	                        .on('normal', onNormal);

	                    onNormal();
	                }

	                group.add(circle);
	            });
	        }
	    });


/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/component/helper/MapDraw
	 */


	    var RoamController = __webpack_require__(416);
	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);

	    function getFixedItemStyle(model, scale) {
	        var itemStyle = model.getItemStyle();
	        var areaColor = model.get('areaColor');

	        // If user want the color not to be changed when hover,
	        // they should both set areaColor and color to be null.
	        if (areaColor != null) {
	            itemStyle.fill = areaColor;
	        }

	        return itemStyle;
	    }

	    function updateMapSelectHandler(mapDraw, mapOrGeoModel, group, api, fromView) {
	        group.off('click');
	        group.off('mousedown');

	        if (mapOrGeoModel.get('selectedMode')) {

	            group.on('mousedown', function () {
	                mapDraw._mouseDownFlag = true;
	            });

	            group.on('click', function (e) {
	                if (!mapDraw._mouseDownFlag) {
	                    return;
	                }
	                mapDraw._mouseDownFlag = false;

	                var el = e.target;
	                while (!el.__region) {
	                    el = el.parent;
	                }
	                if (!el) {
	                    return;
	                }

	                var region = el.__region;
	                var action = {
	                    type: (mapOrGeoModel.mainType === 'geo' ? 'geo' : 'map') + 'ToggleSelect',
	                    name: region.name,
	                    from: fromView.uid
	                };
	                action[mapOrGeoModel.mainType + 'Id'] = mapOrGeoModel.id;

	                api.dispatchAction(action);

	                updateMapSelected(mapOrGeoModel, group);
	            });
	        }
	    }

	    function updateMapSelected(mapOrGeoModel, group) {
	        // FIXME
	        group.eachChild(function (otherRegionEl) {
	            if (otherRegionEl.__region) {
	                otherRegionEl.trigger(mapOrGeoModel.isSelected(otherRegionEl.__region.name) ? 'emphasis' : 'normal');
	            }
	        });
	    }

	    /**
	     * @alias module:echarts/component/helper/MapDraw
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {boolean} updateGroup
	     */
	    function MapDraw(api, updateGroup) {

	        var group = new graphic.Group();

	        /**
	         * @type {module:echarts/component/helper/RoamController}
	         * @private
	         */
	        this._controller = new RoamController(
	            api.getZr(), updateGroup ? group : null, null
	        );

	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = group;

	        /**
	         * @type {boolean}
	         * @private
	         */
	        this._updateGroup = updateGroup;

	        /**
	         * This flag is used to make sure that only one among
	         * `pan`, `zoom`, `click` can occurs, otherwise 'selected'
	         * action may be triggered when `pan`, which is unexpected.
	         * @type {booelan}
	         */
	        this._mouseDownFlag;
	    }

	    MapDraw.prototype = {

	        constructor: MapDraw,

	        draw: function (mapOrGeoModel, ecModel, api, fromView, payload) {

	            var isGeo = mapOrGeoModel.mainType === 'geo';

	            // map series has data, geo model that controlled by map series
	            // has no data, otherwise data exists.
	            var data = mapOrGeoModel.getData && mapOrGeoModel.getData();
	            isGeo && ecModel.eachComponent({mainType: 'series', subType: 'map'}, function (mapSeries) {
	                if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {
	                    data = mapSeries.getData();
	                }
	            });

	            var geo = mapOrGeoModel.coordinateSystem;

	            var group = this.group;

	            var scale = geo.scale;
	            var groupNewProp = {
	                position: geo.position,
	                scale: scale
	            };

	            // No animation when first draw or in action
	            if (!group.childAt(0) || payload) {
	                group.attr(groupNewProp);
	            }
	            else {
	                graphic.updateProps(group, groupNewProp, mapOrGeoModel);
	            }

	            group.removeAll();

	            var itemStyleAccessPath = ['itemStyle', 'normal'];
	            var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];
	            var labelAccessPath = ['label', 'normal'];
	            var hoverLabelAccessPath = ['label', 'emphasis'];

	            zrUtil.each(geo.regions, function (region) {

	                var regionGroup = new graphic.Group();
	                var compoundPath = new graphic.CompoundPath({
	                    shape: {
	                        paths: []
	                    }
	                });
	                regionGroup.add(compoundPath);

	                var regionModel = mapOrGeoModel.getRegionModel(region.name) || mapOrGeoModel;

	                var itemStyleModel = regionModel.getModel(itemStyleAccessPath);
	                var hoverItemStyleModel = regionModel.getModel(hoverItemStyleAccessPath);
	                var itemStyle = getFixedItemStyle(itemStyleModel, scale);
	                var hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);

	                var labelModel = regionModel.getModel(labelAccessPath);
	                var hoverLabelModel = regionModel.getModel(hoverLabelAccessPath);

	                var dataIdx;
	                // Use the itemStyle in data if has data
	                if (data) {
	                    dataIdx = data.indexOfName(region.name);
	                    // Only visual color of each item will be used. It can be encoded by dataRange
	                    // But visual color of series is used in symbol drawing
	                    //
	                    // Visual color for each series is for the symbol draw
	                    var visualColor = data.getItemVisual(dataIdx, 'color', true);
	                    if (visualColor) {
	                        itemStyle.fill = visualColor;
	                    }
	                }

	                var textStyleModel = labelModel.getModel('textStyle');
	                var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');

	                zrUtil.each(region.contours, function (contour) {

	                    var polygon = new graphic.Polygon({
	                        shape: {
	                            points: contour
	                        }
	                    });

	                    compoundPath.shape.paths.push(polygon);
	                });

	                compoundPath.setStyle(itemStyle);
	                compoundPath.style.strokeNoScale = true;
	                compoundPath.culling = true;
	                // Label
	                var showLabel = labelModel.get('show');
	                var hoverShowLabel = hoverLabelModel.get('show');

	                var isDataNaN = data && isNaN(data.get('value', dataIdx));
	                var itemLayout = data && data.getItemLayout(dataIdx);
	                // In the following cases label will be drawn
	                // 1. In map series and data value is NaN
	                // 2. In geo component
	                // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout
	                if (
	                    (isGeo || isDataNaN && (showLabel || hoverShowLabel))
	                 || (itemLayout && itemLayout.showLabel)
	                 ) {
	                    var query = data ? dataIdx : region.name;
	                    var formattedStr = mapOrGeoModel.getFormattedLabel(query, 'normal');
	                    var hoverFormattedStr = mapOrGeoModel.getFormattedLabel(query, 'emphasis');
	                    var text = new graphic.Text({
	                        style: {
	                            text: showLabel ? (formattedStr || region.name) : '',
	                            fill: textStyleModel.getTextColor(),
	                            textFont: textStyleModel.getFont(),
	                            textAlign: 'center',
	                            textVerticalAlign: 'middle'
	                        },
	                        hoverStyle: {
	                            text: hoverShowLabel ? (hoverFormattedStr || region.name) : '',
	                            fill: hoverTextStyleModel.getTextColor(),
	                            textFont: hoverTextStyleModel.getFont()
	                        },
	                        position: region.center.slice(),
	                        scale: [1 / scale[0], 1 / scale[1]],
	                        z2: 10,
	                        silent: true
	                    });

	                    regionGroup.add(text);
	                }

	                // setItemGraphicEl, setHoverStyle after all polygons and labels
	                // are added to the rigionGroup
	                if (data) {
	                    data.setItemGraphicEl(dataIdx, regionGroup);
	                }
	                else {
	                    var regionModel = mapOrGeoModel.getRegionModel(region.name);
	                    // Package custom mouse event for geo component
	                    compoundPath.eventData = {
	                        componentType: 'geo',
	                        geoIndex: mapOrGeoModel.componentIndex,
	                        name: region.name,
	                        region: (regionModel && regionModel.option) || {}
	                    };
	                }

	                regionGroup.__region = region;

	                graphic.setHoverStyle(
	                    regionGroup,
	                    hoverItemStyle,
	                    {hoverSilentOnTouch: !!mapOrGeoModel.get('selectedMode')}
	                );

	                group.add(regionGroup);
	            });

	            this._updateController(mapOrGeoModel, ecModel, api);

	            updateMapSelectHandler(this, mapOrGeoModel, group, api, fromView);

	            updateMapSelected(mapOrGeoModel, group);
	        },

	        remove: function () {
	            this.group.removeAll();
	            this._controller.dispose();
	        },

	        _updateController: function (mapOrGeoModel, ecModel, api) {
	            var geo = mapOrGeoModel.coordinateSystem;
	            var controller = this._controller;
	            controller.zoomLimit = mapOrGeoModel.get('scaleLimit');
	            // Update zoom from model
	            controller.zoom = geo.getZoom();
	            // roamType is will be set default true if it is null
	            controller.enable(mapOrGeoModel.get('roam') || false);
	            var mainType = mapOrGeoModel.mainType;

	            function makeActionBase() {
	                var action = {
	                    type: 'geoRoam',
	                    componentType: mainType
	                };
	                action[mainType + 'Id'] = mapOrGeoModel.id;
	                return action;
	            }

	            controller.off('pan').on('pan', function (dx, dy) {
	                this._mouseDownFlag = false;

	                api.dispatchAction(zrUtil.extend(makeActionBase(), {
	                    dx: dx,
	                    dy: dy
	                }));
	            }, this);

	            controller.off('zoom').on('zoom', function (zoom, mouseX, mouseY) {
	                this._mouseDownFlag = false;

	                api.dispatchAction(zrUtil.extend(makeActionBase(), {
	                    zoom: zoom,
	                    originX: mouseX,
	                    originY: mouseY
	                }));

	                if (this._updateGroup) {
	                    var group = this.group;
	                    var scale = group.scale;
	                    group.traverse(function (el) {
	                        if (el.type === 'text') {
	                            el.attr('scale', [1 / scale[0], 1 / scale[1]]);
	                        }
	                    });
	                }
	            }, this);

	            controller.setContainsPoint(function (x, y) {
	                return geo.getViewRectAfterRoam().contain(x, y);
	            });
	        }
	    };

	    module.exports = MapDraw;


/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/component/helper/RoamController
	 */



	    var Eventful = __webpack_require__(272);
	    var zrUtil = __webpack_require__(243);
	    var eventTool = __webpack_require__(327);
	    var interactionMutex = __webpack_require__(417);

	    function mousedown(e) {
	        if (e.target && e.target.draggable) {
	            return;
	        }

	        var x = e.offsetX;
	        var y = e.offsetY;

	        if (this.containsPoint && this.containsPoint(x, y)) {
	            this._x = x;
	            this._y = y;
	            this._dragging = true;
	        }
	    }

	    function mousemove(e) {
	        if (!this._dragging) {
	            return;
	        }

	        eventTool.stop(e.event);

	        if (e.gestureEvent !== 'pinch') {

	            if (interactionMutex.isTaken(this._zr, 'globalPan')) {
	                return;
	            }

	            var x = e.offsetX;
	            var y = e.offsetY;

	            var oldX = this._x;
	            var oldY = this._y;

	            var dx = x - oldX;
	            var dy = y - oldY;

	            this._x = x;
	            this._y = y;

	            var target = this.target;

	            if (target) {
	                var pos = target.position;
	                pos[0] += dx;
	                pos[1] += dy;
	                target.dirty();
	            }

	            eventTool.stop(e.event);
	            this.trigger('pan', dx, dy, oldX, oldY, x, y);
	        }
	    }

	    function mouseup(e) {
	        this._dragging = false;
	    }

	    function mousewheel(e) {
	        // Convenience:
	        // Mac and VM Windows on Mac: scroll up: zoom out.
	        // Windows: scroll up: zoom in.
	        var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;
	        zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);
	    }

	    function pinch(e) {
	        if (interactionMutex.isTaken(this._zr, 'globalPan')) {
	            return;
	        }
	        var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
	        zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);
	    }

	    function zoom(e, zoomDelta, zoomX, zoomY) {
	        if (this.containsPoint && this.containsPoint(zoomX, zoomY)) {
	            // When mouse is out of roamController rect,
	            // default befavoius should be be disabled, otherwise
	            // page sliding is disabled, contrary to expectation.
	            eventTool.stop(e.event);

	            var target = this.target;
	            var zoomLimit = this.zoomLimit;

	            if (target) {
	                var pos = target.position;
	                var scale = target.scale;

	                var newZoom = this.zoom = this.zoom || 1;
	                newZoom *= zoomDelta;
	                if (zoomLimit) {
	                    var zoomMin = zoomLimit.min || 0;
	                    var zoomMax = zoomLimit.max || Infinity;
	                    newZoom = Math.max(
	                        Math.min(zoomMax, newZoom),
	                        zoomMin
	                    );
	                }
	                var zoomScale = newZoom / this.zoom;
	                this.zoom = newZoom;
	                // Keep the mouse center when scaling
	                pos[0] -= (zoomX - pos[0]) * (zoomScale - 1);
	                pos[1] -= (zoomY - pos[1]) * (zoomScale - 1);
	                scale[0] *= zoomScale;
	                scale[1] *= zoomScale;

	                target.dirty();
	            }

	            this.trigger('zoom', zoomDelta, zoomX, zoomY);
	        }
	    }

	    /**
	     * @alias module:echarts/component/helper/RoamController
	     * @constructor
	     * @mixin {module:zrender/mixin/Eventful}
	     *
	     * @param {module:zrender/zrender~ZRender} zr
	     * @param {module:zrender/Element} target
	     */
	    function RoamController(zr, target) {

	        /**
	         * @type {module:zrender/Element}
	         */
	        this.target = target;

	        /**
	         * @type {Function}
	         */
	        this.containsPoint;

	        /**
	         * { min: 1, max: 2 }
	         * @type {Object}
	         */
	        this.zoomLimit;

	        /**
	         * @type {number}
	         */
	        this.zoom;
	        /**
	         * @type {module:zrender}
	         */
	        this._zr = zr;

	        // Avoid two roamController bind the same handler
	        var bind = zrUtil.bind;
	        var mousedownHandler = bind(mousedown, this);
	        var mousemoveHandler = bind(mousemove, this);
	        var mouseupHandler = bind(mouseup, this);
	        var mousewheelHandler = bind(mousewheel, this);
	        var pinchHandler = bind(pinch, this);

	        Eventful.call(this);

	        /**
	         * @param {Function} containsPoint
	         *                   input: x, y
	         *                   output: boolean
	         */
	        this.setContainsPoint = function (containsPoint) {
	            this.containsPoint = containsPoint;
	        };

	        /**
	         * Notice: only enable needed types. For example, if 'zoom'
	         * is not needed, 'zoom' should not be enabled, otherwise
	         * default mousewheel behaviour (scroll page) will be disabled.
	         *
	         * @param  {boolean|string} [controlType=true] Specify the control type,
	         *                          which can be null/undefined or true/false
	         *                          or 'pan/move' or 'zoom'/'scale'
	         */
	        this.enable = function (controlType) {
	            // Disable previous first
	            this.disable();

	            if (controlType == null) {
	                controlType = true;
	            }

	            if (controlType === true || (controlType === 'move' || controlType === 'pan')) {
	                zr.on('mousedown', mousedownHandler);
	                zr.on('mousemove', mousemoveHandler);
	                zr.on('mouseup', mouseupHandler);
	            }
	            if (controlType === true || (controlType === 'scale' || controlType === 'zoom')) {
	                zr.on('mousewheel', mousewheelHandler);
	                zr.on('pinch', pinchHandler);
	            }
	        };

	        this.disable = function () {
	            zr.off('mousedown', mousedownHandler);
	            zr.off('mousemove', mousemoveHandler);
	            zr.off('mouseup', mouseupHandler);
	            zr.off('mousewheel', mousewheelHandler);
	            zr.off('pinch', pinchHandler);
	        };

	        this.dispose = this.disable;

	        this.isDragging = function () {
	            return this._dragging;
	        };

	        this.isPinching = function () {
	            return this._pinching;
	        };
	    }

	    zrUtil.mixin(RoamController, Eventful);

	    module.exports = RoamController;


/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	

	    var ATTR = '\0_ec_interaction_mutex';

	    var interactionMutex = {

	        take: function (zr, resourceKey, userKey) {
	            var store = getStore(zr);
	            store[resourceKey] = userKey;
	        },

	        release: function (zr, resourceKey, userKey) {
	            var store = getStore(zr);
	            var uKey = store[resourceKey];

	            if (uKey === userKey) {
	                store[resourceKey] = null;
	            }
	        },

	        isTaken: function (zr, resourceKey) {
	            return !!getStore(zr)[resourceKey];
	        }
	    };

	    function getStore(zr) {
	        return zr[ATTR] || (zr[ATTR] = {});
	    }

	    /**
	     * payload: {
	     *     type: 'takeGlobalCursor',
	     *     key: 'dataZoomSelect', or 'brush', or ...,
	     *         If no userKey, release global cursor.
	     * }
	     */
	    __webpack_require__(240).registerAction(
	        {type: 'takeGlobalCursor', event: 'globalCursorTaken', update: 'update'},
	        function () {}
	    );

	    module.exports = interactionMutex;


/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var roamHelper = __webpack_require__(419);

	    var echarts = __webpack_require__(240);

	    /**
	     * @payload
	     * @property {string} [componentType=series]
	     * @property {number} [dx]
	     * @property {number} [dy]
	     * @property {number} [zoom]
	     * @property {number} [originX]
	     * @property {number} [originY]
	     */
	    echarts.registerAction({
	        type: 'geoRoam',
	        event: 'geoRoam',
	        update: 'updateLayout'
	    }, function (payload, ecModel) {
	        var componentType = payload.componentType || 'series';

	        ecModel.eachComponent(
	            { mainType: componentType, query: payload },
	            function (componentModel) {
	                var geo = componentModel.coordinateSystem;
	                if (geo.type !== 'geo') {
	                    return;
	                }

	                var res = roamHelper.updateCenterAndZoom(
	                    geo, payload, componentModel.get('scaleLimit')
	                );

	                componentModel.setCenter
	                    && componentModel.setCenter(res.center);

	                componentModel.setZoom
	                    && componentModel.setZoom(res.zoom);

	                // All map series with same `map` use the same geo coordinate system
	                // So the center and zoom must be in sync. Include the series not selected by legend
	                if (componentType === 'series') {
	                    zrUtil.each(componentModel.seriesGroup, function (seriesModel) {
	                        seriesModel.setCenter(res.center);
	                        seriesModel.setZoom(res.zoom);
	                    });
	                }
	            }
	        );
	    });


/***/ },
/* 419 */
/***/ function(module, exports) {

	

	    var roamHelper = {};

	    /**
	     * @param {module:echarts/coord/View} view
	     * @param {Object} payload
	     * @param {Object} [zoomLimit]
	     */
	    roamHelper.updateCenterAndZoom = function (
	        view, payload, zoomLimit
	    ) {
	        var previousZoom = view.getZoom();
	        var center = view.getCenter();
	        var zoom = payload.zoom;

	        var point = view.dataToPoint(center);

	        if (payload.dx != null && payload.dy != null) {
	            point[0] -= payload.dx;
	            point[1] -= payload.dy;

	            var center = view.pointToData(point);
	            view.setCenter(center);
	        }
	        if (zoom != null) {
	            if (zoomLimit) {
	                var zoomMin = zoomLimit.min || 0;
	                var zoomMax = zoomLimit.max || Infinity;
	                zoom = Math.max(
	                    Math.min(previousZoom * zoom, zoomMax),
	                    zoomMin
	                ) / previousZoom;
	            }

	            // Zoom on given point(originX, originY)
	            view.scale[0] *= zoom;
	            view.scale[1] *= zoom;
	            var position = view.position;
	            var fixX = (payload.originX - position[0]) * (zoom - 1);
	            var fixY = (payload.originY - position[1]) * (zoom - 1);

	            position[0] -= fixX;
	            position[1] -= fixY;

	            view.updateTransform();
	            // Get the new center
	            var center = view.pointToData(point);
	            view.setCenter(center);
	            view.setZoom(zoom * previousZoom);
	        }

	        return {
	            center: view.getCenter(),
	            zoom: view.getZoom()
	        };
	    };

	    module.exports = roamHelper;


/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    module.exports = function (ecModel) {

	        var processedMapType = {};

	        ecModel.eachSeriesByType('map', function (mapSeries) {
	            var mapType = mapSeries.getMapType();
	            if (mapSeries.getHostGeoModel() || processedMapType[mapType]) {
	                return;
	            }

	            var mapSymbolOffsets = {};

	            zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {
	                var geo = subMapSeries.coordinateSystem;
	                var data = subMapSeries.originalData;
	                if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {
	                    data.each('value', function (value, idx) {
	                        var name = data.getName(idx);
	                        var region = geo.getRegion(name);

	                        // If input series.data is [11, 22, '-'/null/undefined, 44],
	                        // it will be filled with NaN: [11, 22, NaN, 44] and NaN will
	                        // not be drawn. So here must validate if value is NaN.
	                        if (!region || isNaN(value)) {
	                            return;
	                        }

	                        var offset = mapSymbolOffsets[name] || 0;

	                        var point = geo.dataToPoint(region.center);

	                        mapSymbolOffsets[name] = offset + 1;

	                        data.setItemLayout(idx, {
	                            point: point,
	                            offset: offset
	                        });
	                    });
	                }
	            });

	            // Show label of those region not has legendSymbol(which is offset 0)
	            var data = mapSeries.getData();
	            data.each(function (idx) {
	                var name = data.getName(idx);
	                var layout = data.getItemLayout(idx) || {};
	                layout.showLabel = !mapSymbolOffsets[name];
	                data.setItemLayout(idx, layout);
	            });

	            processedMapType[mapType] = true;
	        });
	    };


/***/ },
/* 421 */
/***/ function(module, exports) {

	
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('map', function (seriesModel) {
	            var colorList = seriesModel.get('color');
	            var itemStyleModel = seriesModel.getModel('itemStyle.normal');

	            var areaColor = itemStyleModel.get('areaColor');
	            var color = itemStyleModel.get('color')
	                || colorList[seriesModel.seriesIndex % colorList.length];

	            seriesModel.getData().setVisual({
	                'areaColor': areaColor,
	                'color': color
	            });
	        });
	    };


/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    // FIXME 公用？
	    /**
	     * @param {Array.<module:echarts/data/List>} datas
	     * @param {string} statisticType 'average' 'sum'
	     * @inner
	     */
	    function dataStatistics(datas, statisticType) {
	        var dataNameMap = {};
	        var dims = ['value'];

	        zrUtil.each(datas, function (data) {
	            data.each(dims, function (value, idx) {
	                var name = data.getName(idx);
	                dataNameMap[name] = dataNameMap[name] || [];
	                if (!isNaN(value)) {
	                    dataNameMap[name].push(value);
	                }
	            });
	        });

	        return datas[0].map(dims, function (value, idx) {
	            var name = datas[0].getName(idx);
	            var sum = 0;
	            var min = Infinity;
	            var max = -Infinity;
	            var len = dataNameMap[name].length;
	            for (var i = 0; i < len; i++) {
	                min = Math.min(min, dataNameMap[name][i]);
	                max = Math.max(max, dataNameMap[name][i]);
	                sum += dataNameMap[name][i];
	            }
	            var result;
	            if (statisticType === 'min') {
	                result = min;
	            }
	            else if (statisticType === 'max') {
	                result = max;
	            }
	            else if (statisticType === 'average') {
	                result = sum / len;
	            }
	            else {
	                result = sum;
	            }
	            return len === 0 ? NaN : result;
	        });
	    }

	    module.exports = function (ecModel) {
	        var seriesGroups = {};
	        ecModel.eachSeriesByType('map', function (seriesModel) {
	            var hostGeoModel = seriesModel.getHostGeoModel();
	            var key = hostGeoModel ? 'o' + hostGeoModel.id : 'i' + seriesModel.getMapType();
	            (seriesGroups[key] = seriesGroups[key] || []).push(seriesModel);
	        });

	        zrUtil.each(seriesGroups, function (seriesList, key) {
	            var data = dataStatistics(
	                zrUtil.map(seriesList, function (seriesModel) {
	                    return seriesModel.getData();
	                }),
	                seriesList[0].get('mapValueCalculation')
	            );

	            for (var i = 0; i < seriesList.length; i++) {
	                seriesList[i].originalData = seriesList[i].getData();
	            }

	            // FIXME Put where?
	            for (var i = 0; i < seriesList.length; i++) {
	                seriesList[i].seriesGroup = seriesList;
	                seriesList[i].needsDrawMap = i === 0 && !seriesList[i].getHostGeoModel();

	                seriesList[i].setData(data.cloneShallow());
	                seriesList[i].mainSeries = seriesList[0];
	            }
	        });
	    };


/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    module.exports = function (option) {
	        // Save geoCoord
	        var mapSeries = [];
	        zrUtil.each(option.series, function (seriesOpt) {
	            if (seriesOpt.type === 'map') {
	                mapSeries.push(seriesOpt);
	            }
	        });

	        zrUtil.each(mapSeries, function (seriesOpt) {
	            seriesOpt.map = seriesOpt.map || seriesOpt.mapType;
	            // Put x, y, width, height, x2, y2 in the top level
	            zrUtil.defaults(seriesOpt, seriesOpt.mapLocation);
	        });
	    };


/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);

	    __webpack_require__(425);
	    __webpack_require__(429);
	    __webpack_require__(432);

	    echarts.registerVisual(__webpack_require__(433));

	    echarts.registerLayout(__webpack_require__(435));


/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	

	    var SeriesModel = __webpack_require__(267);
	    var Tree = __webpack_require__(426);
	    var zrUtil = __webpack_require__(243);
	    var Model = __webpack_require__(251);
	    var formatUtil = __webpack_require__(245);
	    var helper = __webpack_require__(428);
	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;


	    module.exports = SeriesModel.extend({

	        type: 'series.treemap',

	        layoutMode: 'box',

	        dependencies: ['grid', 'polar'],

	        /**
	         * @type {module:echarts/data/Tree~Node}
	         */
	        _viewRoot: null,

	        defaultOption: {
	            // Disable progressive rendering
	            progressive: 0,
	            hoverLayerThreshold: Infinity,
	            // center: ['50%', '50%'],          // not supported in ec3.
	            // size: ['80%', '80%'],            // deprecated, compatible with ec2.
	            left: 'center',
	            top: 'middle',
	            right: null,
	            bottom: null,
	            width: '80%',
	            height: '80%',
	            sort: true,                         // Can be null or false or true
	                                                // (order by desc default, asc not supported yet (strange effect))
	            clipWindow: 'origin',               // Size of clipped window when zooming. 'origin' or 'fullscreen'
	            squareRatio: 0.5 * (1 + Math.sqrt(5)), // golden ratio
	            leafDepth: null,                    // Nodes on depth from root are regarded as leaves.
	                                                // Count from zero (zero represents only view root).
	            drillDownIcon: '▶',                 // Use html character temporarily because it is complicated
	                                                // to align specialized icon. ▷▶❒❐▼✚

	            zoomToNodeRatio: 0.32 * 0.32,       // Be effective when using zoomToNode. Specify the proportion of the
	                                                // target node area in the view area.
	            roam: true,                         // true, false, 'scale' or 'zoom', 'move'.
	            nodeClick: 'zoomToNode',            // Leaf node click behaviour: 'zoomToNode', 'link', false.
	                                                // If leafDepth is set and clicking a node which has children but
	                                                // be on left depth, the behaviour would be changing root. Otherwise
	                                                // use behavious defined above.
	            animation: true,
	            animationDurationUpdate: 900,
	            animationEasing: 'quinticInOut',
	            breadcrumb: {
	                show: true,
	                height: 22,
	                left: 'center',
	                top: 'bottom',
	                // right
	                // bottom
	                emptyItemWidth: 25,             // Width of empty node.
	                itemStyle: {
	                    normal: {
	                        color: 'rgba(0,0,0,0.7)', //'#5793f3',
	                        borderColor: 'rgba(255,255,255,0.7)',
	                        borderWidth: 1,
	                        shadowColor: 'rgba(150,150,150,1)',
	                        shadowBlur: 3,
	                        shadowOffsetX: 0,
	                        shadowOffsetY: 0,
	                        textStyle: {
	                            color: '#fff'
	                        }
	                    },
	                    emphasis: {
	                        textStyle: {}
	                    }
	                }
	            },
	            label: {
	                normal: {
	                    show: true,
	                    position: 'inside', // Can be [5, '5%'] or position stirng like 'insideTopLeft', ...
	                    textStyle: {
	                        color: '#fff',
	                        ellipsis: true
	                    }
	                }
	            },
	            itemStyle: {
	                normal: {
	                    color: null,            // Can be 'none' if not necessary.
	                    colorAlpha: null,       // Can be 'none' if not necessary.
	                    colorSaturation: null,  // Can be 'none' if not necessary.
	                    borderWidth: 0,
	                    gapWidth: 0,
	                    borderColor: '#fff',
	                    borderColorSaturation: null // If specified, borderColor will be ineffective, and the
	                                                // border color is evaluated by color of current node and
	                                                // borderColorSaturation.
	                },
	                emphasis: {

	                }
	            },

	            visualDimension: 0,                 // Can be 0, 1, 2, 3.
	            visualMin: null,
	            visualMax: null,

	            color: [],                  // + treemapSeries.color should not be modified. Please only modified
	                                        // level[n].color (if necessary).
	                                        // + Specify color list of each level. level[0].color would be global
	                                        // color list if not specified. (see method `setDefault`).
	                                        // + But set as a empty array to forbid fetch color from global palette
	                                        // when using nodeModel.get('color'), otherwise nodes on deep level
	                                        // will always has color palette set and are not able to inherit color
	                                        // from parent node.
	                                        // + TreemapSeries.color can not be set as 'none', otherwise effect
	                                        // legend color fetching (see seriesColor.js).
	            colorAlpha: null,           // Array. Specify color alpha range of each level, like [0.2, 0.8]
	            colorSaturation: null,      // Array. Specify color saturation of each level, like [0.2, 0.5]
	            colorMappingBy: 'index',    // 'value' or 'index' or 'id'.
	            visibleMin: 10,             // If area less than this threshold (unit: pixel^2), node will not
	                                        // be rendered. Only works when sort is 'asc' or 'desc'.
	            childrenVisibleMin: null,   // If area of a node less than this threshold (unit: pixel^2),
	                                        // grandchildren will not show.
	                                        // Why grandchildren? If not grandchildren but children,
	                                        // some siblings show children and some not,
	                                        // the appearance may be mess and not consistent,
	            levels: []                  // Each item: {
	                                        //     visibleMin, itemStyle, visualDimension, label
	                                        // }
	            // data: {
	            //      value: [],
	            //      children: [],
	            //      link: 'http://xxx.xxx.xxx',
	            //      target: 'blank' or 'self'
	            // }
	        },

	        /**
	         * @override
	         */
	        getInitialData: function (option, ecModel) {
	            var data = option.data || [];
	            var rootName = option.name;
	            rootName == null && (rootName = option.name);

	            // Create a virtual root.
	            var root = {name: rootName, children: option.data};
	            var value0 = (data[0] || {}).value;

	            completeTreeValue(root, zrUtil.isArray(value0) ? value0.length : -1);

	            // FIXME
	            // sereis.mergeOption 的 getInitData是否放在merge后，从而能直接获取merege后的结果而非手动判断。
	            var levels = option.levels || [];

	            levels = option.levels = setDefault(levels, ecModel);

	            // Make sure always a new tree is created when setOption,
	            // in TreemapView, we check whether oldTree === newTree
	            // to choose mappings approach among old shapes and new shapes.
	            return Tree.createTree(root, this, levels).data;
	        },

	        optionUpdated: function () {
	            this.resetViewRoot();
	        },

	        /**
	         * @override
	         * @param {number} dataIndex
	         * @param {boolean} [mutipleSeries=false]
	         */
	        formatTooltip: function (dataIndex) {
	            var data = this.getData();
	            var value = this.getRawValue(dataIndex);
	            var formattedValue = zrUtil.isArray(value)
	                ? addCommas(value[0]) : addCommas(value);
	            var name = data.getName(dataIndex);

	            return encodeHTML(name + ': ' + formattedValue);
	        },

	        /**
	         * Add tree path to tooltip param
	         *
	         * @override
	         * @param {number} dataIndex
	         * @return {Object}
	         */
	        getDataParams: function (dataIndex) {
	            var params = SeriesModel.prototype.getDataParams.apply(this, arguments);

	            var node = this.getData().tree.getNodeByDataIndex(dataIndex);
	            params.treePathInfo = helper.wrapTreePathInfo(node, this);

	            return params;
	        },

	        /**
	         * @public
	         * @param {Object} layoutInfo {
	         *                                x: containerGroup x
	         *                                y: containerGroup y
	         *                                width: containerGroup width
	         *                                height: containerGroup height
	         *                            }
	         */
	        setLayoutInfo: function (layoutInfo) {
	            /**
	             * @readOnly
	             * @type {Object}
	             */
	            this.layoutInfo = this.layoutInfo || {};
	            zrUtil.extend(this.layoutInfo, layoutInfo);
	        },

	        /**
	         * @param  {string} id
	         * @return {number} index
	         */
	        mapIdToIndex: function (id) {
	            // A feature is implemented:
	            // index is monotone increasing with the sequence of
	            // input id at the first time.
	            // This feature can make sure that each data item and its
	            // mapped color have the same index between data list and
	            // color list at the beginning, which is useful for user
	            // to adjust data-color mapping.

	            /**
	             * @private
	             * @type {Object}
	             */
	            var idIndexMap = this._idIndexMap;

	            if (!idIndexMap) {
	                idIndexMap = this._idIndexMap = {};
	                /**
	                 * @private
	                 * @type {number}
	                 */
	                this._idIndexMapCount = 0;
	            }

	            var index = idIndexMap[id];
	            if (index == null) {
	                idIndexMap[id] = index = this._idIndexMapCount++;
	            }

	            return index;
	        },

	        getViewRoot: function () {
	            return this._viewRoot;
	        },

	        /**
	         * @param {module:echarts/data/Tree~Node} [viewRoot]
	         */
	        resetViewRoot: function (viewRoot) {
	            viewRoot
	                ? (this._viewRoot = viewRoot)
	                : (viewRoot = this._viewRoot);

	            var root = this.getData().tree.root;

	            if (!viewRoot
	                || (viewRoot !== root && !root.contains(viewRoot))
	            ) {
	                this._viewRoot = root;
	            }
	        }
	    });

	    /**
	     * @param {Object} dataNode
	     */
	    function completeTreeValue(dataNode, arrValueLength) {
	        // Postorder travel tree.
	        // If value of none-leaf node is not set,
	        // calculate it by suming up the value of all children.
	        var sum = 0;

	        zrUtil.each(dataNode.children, function (child) {

	            completeTreeValue(child, arrValueLength);

	            var childValue = child.value;
	            zrUtil.isArray(childValue) && (childValue = childValue[0]);

	            sum += childValue;
	        });

	        var thisValue = dataNode.value;

	        if (arrValueLength >= 0) {
	            if (!zrUtil.isArray(thisValue)) {
	                dataNode.value = new Array(arrValueLength);
	            }
	            else {
	                thisValue = thisValue[0];
	            }
	        }

	        if (thisValue == null || isNaN(thisValue)) {
	            thisValue = sum;
	        }
	        // Value should not less than 0.
	        if (thisValue < 0) {
	            thisValue = 0;
	        }

	        arrValueLength >= 0
	            ? (dataNode.value[0] = thisValue)
	            : (dataNode.value = thisValue);
	    }

	    /**
	     * set default to level configuration
	     */
	    function setDefault(levels, ecModel) {
	        var globalColorList = ecModel.get('color');

	        if (!globalColorList) {
	            return;
	        }

	        levels = levels || [];
	        var hasColorDefine;
	        zrUtil.each(levels, function (levelDefine) {
	            var model = new Model(levelDefine);
	            var modelColor = model.get('color');

	            if (model.get('itemStyle.normal.color')
	                || (modelColor && modelColor !== 'none')
	            ) {
	                hasColorDefine = true;
	            }
	        });

	        if (!hasColorDefine) {
	            var level0 = levels[0] || (levels[0] = {});
	            level0.color = globalColorList.slice();
	        }

	        return levels;
	    }



/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Tree data structure
	 *
	 * @module echarts/data/Tree
	 */


	    var zrUtil = __webpack_require__(243);
	    var Model = __webpack_require__(251);
	    var List = __webpack_require__(337);
	    var linkList = __webpack_require__(427);
	    var completeDimensions = __webpack_require__(342);

	    /**
	     * @constructor module:echarts/data/Tree~TreeNode
	     * @param {string} name
	     * @param {module:echarts/data/Tree} hostTree
	     */
	    var TreeNode = function (name, hostTree) {
	        /**
	         * @type {string}
	         */
	        this.name = name || '';

	        /**
	         * Depth of node
	         *
	         * @type {number}
	         * @readOnly
	         */
	        this.depth = 0;

	        /**
	         * Height of the subtree rooted at this node.
	         * @type {number}
	         * @readOnly
	         */
	        this.height = 0;

	        /**
	         * @type {module:echarts/data/Tree~TreeNode}
	         * @readOnly
	         */
	        this.parentNode = null;

	        /**
	         * Reference to list item.
	         * Do not persistent dataIndex outside,
	         * besause it may be changed by list.
	         * If dataIndex -1,
	         * this node is logical deleted (filtered) in list.
	         *
	         * @type {Object}
	         * @readOnly
	         */
	        this.dataIndex = -1;

	        /**
	         * @type {Array.<module:echarts/data/Tree~TreeNode>}
	         * @readOnly
	         */
	        this.children = [];

	        /**
	         * @type {Array.<module:echarts/data/Tree~TreeNode>}
	         * @pubilc
	         */
	        this.viewChildren = [];

	        /**
	         * @type {moduel:echarts/data/Tree}
	         * @readOnly
	         */
	        this.hostTree = hostTree;
	    };

	    TreeNode.prototype = {

	        constructor: TreeNode,

	        /**
	         * The node is removed.
	         * @return {boolean} is removed.
	         */
	        isRemoved: function () {
	            return this.dataIndex < 0;
	        },

	        /**
	         * Travel this subtree (include this node).
	         * Usage:
	         *    node.eachNode(function () { ... }); // preorder
	         *    node.eachNode('preorder', function () { ... }); // preorder
	         *    node.eachNode('postorder', function () { ... }); // postorder
	         *    node.eachNode(
	         *        {order: 'postorder', attr: 'viewChildren'},
	         *        function () { ... }
	         *    ); // postorder
	         *
	         * @param {(Object|string)} options If string, means order.
	         * @param {string=} options.order 'preorder' or 'postorder'
	         * @param {string=} options.attr 'children' or 'viewChildren'
	         * @param {Function} cb If in preorder and return false,
	         *                      its subtree will not be visited.
	         * @param {Object} [context]
	         */
	        eachNode: function (options, cb, context) {
	            if (typeof options === 'function') {
	                context = cb;
	                cb = options;
	                options = null;
	            }

	            options = options || {};
	            if (zrUtil.isString(options)) {
	                options = {order: options};
	            }

	            var order = options.order || 'preorder';
	            var children = this[options.attr || 'children'];

	            var suppressVisitSub;
	            order === 'preorder' && (suppressVisitSub = cb.call(context, this));

	            for (var i = 0; !suppressVisitSub && i < children.length; i++) {
	                children[i].eachNode(options, cb, context);
	            }

	            order === 'postorder' && cb.call(context, this);
	        },

	        /**
	         * Update depth and height of this subtree.
	         *
	         * @param  {number} depth
	         */
	        updateDepthAndHeight: function (depth) {
	            var height = 0;
	            this.depth = depth;
	            for (var i = 0; i < this.children.length; i++) {
	                var child = this.children[i];
	                child.updateDepthAndHeight(depth + 1);
	                if (child.height > height) {
	                    height = child.height;
	                }
	            }
	            this.height = height + 1;
	        },

	        /**
	         * @param  {string} id
	         * @return {module:echarts/data/Tree~TreeNode}
	         */
	        getNodeById: function (id) {
	            if (this.getId() === id) {
	                return this;
	            }
	            for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	                var res = children[i].getNodeById(id);
	                if (res) {
	                    return res;
	                }
	            }
	        },

	        /**
	         * @param {module:echarts/data/Tree~TreeNode} node
	         * @return {boolean}
	         */
	        contains: function (node) {
	            if (node === this) {
	                return true;
	            }
	            for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	                var res = children[i].contains(node);
	                if (res) {
	                    return res;
	                }
	            }
	        },

	        /**
	         * @param {boolean} includeSelf Default false.
	         * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]
	         */
	        getAncestors: function (includeSelf) {
	            var ancestors = [];
	            var node = includeSelf ? this : this.parentNode;
	            while (node) {
	                ancestors.push(node);
	                node = node.parentNode;
	            }
	            ancestors.reverse();
	            return ancestors;
	        },

	        /**
	         * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3
	         * @return {number} Value.
	         */
	        getValue: function (dimension) {
	            var data = this.hostTree.data;
	            return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	        },

	        /**
	         * @param {Object} layout
	         * @param {boolean=} [merge=false]
	         */
	        setLayout: function (layout, merge) {
	            this.dataIndex >= 0
	                && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);
	        },

	        /**
	         * @return {Object} layout
	         */
	        getLayout: function () {
	            return this.hostTree.data.getItemLayout(this.dataIndex);
	        },

	        /**
	         * @param {string} path
	         * @return {module:echarts/model/Model}
	         */
	        getModel: function (path) {
	            if (this.dataIndex < 0) {
	                return;
	            }
	            var hostTree = this.hostTree;
	            var itemModel = hostTree.data.getItemModel(this.dataIndex);
	            var levelModel = this.getLevelModel();

	            return itemModel.getModel(path, (levelModel || hostTree.hostModel).getModel(path));
	        },

	        /**
	         * @return {module:echarts/model/Model}
	         */
	        getLevelModel: function () {
	            return (this.hostTree.levelModels || [])[this.depth];
	        },

	        /**
	         * @example
	         *  setItemVisual('color', color);
	         *  setItemVisual({
	         *      'color': color
	         *  });
	         */
	        setVisual: function (key, value) {
	            this.dataIndex >= 0
	                && this.hostTree.data.setItemVisual(this.dataIndex, key, value);
	        },

	        /**
	         * Get item visual
	         */
	        getVisual: function (key, ignoreParent) {
	            return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);
	        },

	        /**
	         * @public
	         * @return {number}
	         */
	        getRawIndex: function () {
	            return this.hostTree.data.getRawIndex(this.dataIndex);
	        },

	        /**
	         * @public
	         * @return {string}
	         */
	        getId: function () {
	            return this.hostTree.data.getId(this.dataIndex);
	        }
	    };

	    /**
	     * @constructor
	     * @alias module:echarts/data/Tree
	     * @param {module:echarts/model/Model} hostModel
	     * @param {Array.<Object>} levelOptions
	     */
	    function Tree(hostModel, levelOptions) {
	        /**
	         * @type {module:echarts/data/Tree~TreeNode}
	         * @readOnly
	         */
	        this.root;

	        /**
	         * @type {module:echarts/data/List}
	         * @readOnly
	         */
	        this.data;

	        /**
	         * Index of each item is the same as the raw index of coresponding list item.
	         * @private
	         * @type {Array.<module:echarts/data/Tree~TreeNode}
	         */
	        this._nodes = [];

	        /**
	         * @private
	         * @readOnly
	         * @type {module:echarts/model/Model}
	         */
	        this.hostModel = hostModel;

	        /**
	         * @private
	         * @readOnly
	         * @type {Array.<module:echarts/model/Model}
	         */
	        this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {
	            return new Model(levelDefine, hostModel, hostModel.ecModel);
	        });
	    }

	    Tree.prototype = {

	        constructor: Tree,

	        type: 'tree',

	        /**
	         * Travel this subtree (include this node).
	         * Usage:
	         *    node.eachNode(function () { ... }); // preorder
	         *    node.eachNode('preorder', function () { ... }); // preorder
	         *    node.eachNode('postorder', function () { ... }); // postorder
	         *    node.eachNode(
	         *        {order: 'postorder', attr: 'viewChildren'},
	         *        function () { ... }
	         *    ); // postorder
	         *
	         * @param {(Object|string)} options If string, means order.
	         * @param {string=} options.order 'preorder' or 'postorder'
	         * @param {string=} options.attr 'children' or 'viewChildren'
	         * @param {Function} cb
	         * @param {Object}   [context]
	         */
	        eachNode: function(options, cb, context) {
	            this.root.eachNode(options, cb, context);
	        },

	        /**
	         * @param {number} dataIndex
	         * @return {module:echarts/data/Tree~TreeNode}
	         */
	        getNodeByDataIndex: function (dataIndex) {
	            var rawIndex = this.data.getRawIndex(dataIndex);
	            return this._nodes[rawIndex];
	        },

	        /**
	         * @param {string} name
	         * @return {module:echarts/data/Tree~TreeNode}
	         */
	        getNodeByName: function (name) {
	            return this.root.getNodeByName(name);
	        },

	        /**
	         * Update item available by list,
	         * when list has been performed options like 'filterSelf' or 'map'.
	         */
	        update: function () {
	            var data = this.data;
	            var nodes = this._nodes;

	            for (var i = 0, len = nodes.length; i < len; i++) {
	                nodes[i].dataIndex = -1;
	            }

	            for (var i = 0, len = data.count(); i < len; i++) {
	                nodes[data.getRawIndex(i)].dataIndex = i;
	            }
	        },

	        /**
	         * Clear all layouts
	         */
	        clearLayouts: function () {
	            this.data.clearItemLayouts();
	        }
	    };

	    /**
	     * data node format:
	     * {
	     *     name: ...
	     *     value: ...
	     *     children: [
	     *         {
	     *             name: ...
	     *             value: ...
	     *             children: ...
	     *         },
	     *         ...
	     *     ]
	     * }
	     *
	     * @static
	     * @param {Objec} dataRoot Root node.
	     * @param {module:echarts/model/Model} hostModel
	     * @param {Array.<Object>} levelOptions
	     * @return module:echarts/data/Tree
	     */
	    Tree.createTree = function (dataRoot, hostModel, levelOptions) {

	        var tree = new Tree(hostModel, levelOptions);
	        var listData = [];

	        buildHierarchy(dataRoot);

	        function buildHierarchy(dataNode, parentNode) {
	            listData.push(dataNode);

	            var node = new TreeNode(dataNode.name, tree);
	            parentNode
	                ? addChild(node, parentNode)
	                : (tree.root = node);

	            tree._nodes.push(node);

	            var children = dataNode.children;
	            if (children) {
	                for (var i = 0; i < children.length; i++) {
	                    buildHierarchy(children[i], node);
	                }
	            }
	        }

	        tree.root.updateDepthAndHeight(0);

	        var dimensions = completeDimensions([{name: 'value'}], listData);
	        var list = new List(dimensions, hostModel);
	        list.initData(listData);

	        linkList({
	            mainData: list,
	            struct: tree,
	            structAttr: 'tree'
	        });

	        tree.update();

	        return tree;
	    };

	    /**
	     * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,
	     * so this function is not ready and not necessary to be public.
	     *
	     * @param {(module:echarts/data/Tree~TreeNode|Object)} child
	     */
	    function addChild(child, node) {
	        var children = node.children;
	        if (child.parentNode === node) {
	            return;
	        }

	        children.push(child);
	        child.parentNode = node;
	    }

	    module.exports = Tree;


/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Link lists and struct (graph or tree)
	 */


	    var zrUtil = __webpack_require__(243);
	    var each = zrUtil.each;

	    var DATAS = '\0__link_datas';
	    var MAIN_DATA = '\0__link_mainData';

	    // Caution:
	    // In most case, either list or its shallow clones (see list.cloneShallow)
	    // is active in echarts process. So considering heap memory consumption,
	    // we do not clone tree or graph, but share them among list and its shallow clones.
	    // But in some rare case, we have to keep old list (like do animation in chart). So
	    // please take care that both the old list and the new list share the same tree/graph.

	    /**
	     * @param {Object} opt
	     * @param {module:echarts/data/List} opt.mainData
	     * @param {Object} [opt.struct] For example, instance of Graph or Tree.
	     * @param {string} [opt.structAttr] designation: list[structAttr] = struct;
	     * @param {Object} [opt.datas] {dataType: data},
	     *                 like: {node: nodeList, edge: edgeList}.
	     *                 Should contain mainData.
	     * @param {Object} [opt.datasAttr] {dataType: attr},
	     *                 designation: struct[datasAttr[dataType]] = list;
	     */
	    function linkList(opt) {
	        var mainData = opt.mainData;
	        var datas = opt.datas;

	        if (!datas) {
	            datas = {main: mainData};
	            opt.datasAttr = {main: 'data'};
	        }
	        opt.datas = opt.mainData = null;

	        linkAll(mainData, datas, opt);

	        // Porxy data original methods.
	        each(datas, function (data) {
	            each(mainData.TRANSFERABLE_METHODS, function (methodName) {
	                data.wrapMethod(methodName, zrUtil.curry(transferInjection, opt));
	            });

	        });

	        // Beyond transfer, additional features should be added to `cloneShallow`.
	        mainData.wrapMethod('cloneShallow', zrUtil.curry(cloneShallowInjection, opt));

	        // Only mainData trigger change, because struct.update may trigger
	        // another changable methods, which may bring about dead lock.
	        each(mainData.CHANGABLE_METHODS, function (methodName) {
	            mainData.wrapMethod(methodName, zrUtil.curry(changeInjection, opt));
	        });

	        // Make sure datas contains mainData.
	        zrUtil.assert(datas[mainData.dataType] === mainData);
	    }

	    function transferInjection(opt, res) {
	        if (isMainData(this)) {
	            // Transfer datas to new main data.
	            var datas = zrUtil.extend({}, this[DATAS]);
	            datas[this.dataType] = res;
	            linkAll(res, datas, opt);
	        }
	        else {
	            // Modify the reference in main data to point newData.
	            linkSingle(res, this.dataType, this[MAIN_DATA], opt);
	        }
	        return res;
	    }

	    function changeInjection(opt, res) {
	        opt.struct && opt.struct.update(this);
	        return res;
	    }

	    function cloneShallowInjection(opt, res) {
	        // cloneShallow, which brings about some fragilities, may be inappropriate
	        // to be exposed as an API. So for implementation simplicity we can make
	        // the restriction that cloneShallow of not-mainData should not be invoked
	        // outside, but only be invoked here.
	        each(res[DATAS], function (data, dataType) {
	            data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);
	        });
	        return res;
	    }

	    /**
	     * Supplement method to List.
	     *
	     * @public
	     * @param {string} [dataType] If not specified, return mainData.
	     * @return {module:echarts/data/List}
	     */
	    function getLinkedData(dataType) {
	        var mainData = this[MAIN_DATA];
	        return (dataType == null || mainData == null)
	            ? mainData
	            : mainData[DATAS][dataType];
	    }

	    function isMainData(data) {
	        return data[MAIN_DATA] === data;
	    }

	    function linkAll(mainData, datas, opt) {
	        mainData[DATAS] = {};
	        each(datas, function (data, dataType) {
	            linkSingle(data, dataType, mainData, opt);
	        });
	    }

	    function linkSingle(data, dataType, mainData, opt) {
	        mainData[DATAS][dataType] = data;
	        data[MAIN_DATA] = mainData;
	        data.dataType = dataType;

	        if (opt.struct) {
	            data[opt.structAttr] = opt.struct;
	            opt.struct[opt.datasAttr[dataType]] = data;
	        }

	        // Supplement method.
	        data.getLinkedData = getLinkedData;
	    }

	    module.exports = linkList;


/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    var helper = {

	        retrieveTargetInfo: function (payload, seriesModel) {
	            if (payload
	                && (
	                    payload.type === 'treemapZoomToNode'
	                    || payload.type === 'treemapRootToNode'
	                )
	            ) {
	                var root = seriesModel.getData().tree.root;
	                var targetNode = payload.targetNode;
	                if (targetNode && root.contains(targetNode)) {
	                    return {node: targetNode};
	                }

	                var targetNodeId = payload.targetNodeId;
	                if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {
	                    return {node: targetNode};
	                }
	            }
	        },

	        // Not includes the given node at the last item.
	        getPathToRoot: function (node) {
	            var path = [];
	            while (node) {
	                node = node.parentNode;
	                node && path.push(node);
	            }
	            return path.reverse();
	        },

	        aboveViewRoot: function (viewRoot, node) {
	            var viewPath = helper.getPathToRoot(viewRoot);
	            return zrUtil.indexOf(viewPath, node) >= 0;
	        },

	        // From root to the input node (the input node will be included).
	        wrapTreePathInfo: function (node, seriesModel) {
	            var treePathInfo = [];

	            while (node) {
	                var nodeDataIndex = node.dataIndex;
	                treePathInfo.push({
	                    name: node.name,
	                    dataIndex: nodeDataIndex,
	                    value: seriesModel.getRawValue(nodeDataIndex)
	                });
	                node = node.parentNode;
	            }

	            treePathInfo.reverse();

	            return treePathInfo;
	        }
	    };

	    module.exports = helper;


/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	 

	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var DataDiffer = __webpack_require__(338);
	    var helper = __webpack_require__(428);
	    var Breadcrumb = __webpack_require__(430);
	    var RoamController = __webpack_require__(416);
	    var BoundingRect = __webpack_require__(248);
	    var matrix = __webpack_require__(250);
	    var animationUtil = __webpack_require__(431);
	    var bind = zrUtil.bind;
	    var Group = graphic.Group;
	    var Rect = graphic.Rect;
	    var each = zrUtil.each;

	    var DRAG_THRESHOLD = 3;
	    var PATH_LABEL_NORMAL = ['label', 'normal'];
	    var PATH_LABEL_EMPHASIS = ['label', 'emphasis'];
	    var Z_BASE = 10; // Should bigger than every z.
	    var Z_BG = 1;
	    var Z_CONTENT = 2;

	    module.exports = __webpack_require__(240).extendChartView({

	        type: 'treemap',

	        /**
	         * @override
	         */
	        init: function (o, api) {

	            /**
	             * @private
	             * @type {module:zrender/container/Group}
	             */
	            this._containerGroup;

	            /**
	             * @private
	             * @type {Object.<string, Array.<module:zrender/container/Group>>}
	             */
	            this._storage = createStorage();

	            /**
	             * @private
	             * @type {module:echarts/data/Tree}
	             */
	            this._oldTree;

	            /**
	             * @private
	             * @type {module:echarts/chart/treemap/Breadcrumb}
	             */
	            this._breadcrumb;

	            /**
	             * @private
	             * @type {module:echarts/component/helper/RoamController}
	             */
	            this._controller;

	            /**
	             * 'ready', 'animating'
	             * @private
	             */
	            this._state = 'ready';

	            /**
	             * @private
	             * @type {boolean}
	             */
	            this._mayClick;
	        },

	        /**
	         * @override
	         */
	        render: function (seriesModel, ecModel, api, payload) {

	            var models = ecModel.findComponents({
	                mainType: 'series', subType: 'treemap', query: payload
	            });
	            if (zrUtil.indexOf(models, seriesModel) < 0) {
	                return;
	            }

	            this.seriesModel = seriesModel;
	            this.api = api;
	            this.ecModel = ecModel;

	            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	            var payloadType = payload && payload.type;
	            var layoutInfo = seriesModel.layoutInfo;
	            var isInit = !this._oldTree;
	            var thisStorage = this._storage;

	            // Mark new root when action is treemapRootToNode.
	            var reRoot = (payloadType === 'treemapRootToNode' && targetInfo && thisStorage)
	                ? {
	                    rootNodeGroup: thisStorage.nodeGroup[targetInfo.node.getRawIndex()],
	                    direction: payload.direction
	                }
	                : null;

	            var containerGroup = this._giveContainerGroup(layoutInfo);

	            var renderResult = this._doRender(containerGroup, seriesModel, reRoot);
	            (
	                !isInit && (
	                    !payloadType
	                    || payloadType === 'treemapZoomToNode'
	                    || payloadType === 'treemapRootToNode'
	                )
	            )
	                ? this._doAnimation(containerGroup, renderResult, seriesModel, reRoot)
	                : renderResult.renderFinally();

	            this._resetController(api);

	            this._renderBreadcrumb(seriesModel, api, targetInfo);
	        },

	        /**
	         * @private
	         */
	        _giveContainerGroup: function (layoutInfo) {
	            var containerGroup = this._containerGroup;
	            if (!containerGroup) {
	                // FIXME
	                // 加一层containerGroup是为了clip，但是现在clip功能并没有实现。
	                containerGroup = this._containerGroup = new Group();
	                this._initEvents(containerGroup);
	                this.group.add(containerGroup);
	            }
	            containerGroup.attr('position', [layoutInfo.x, layoutInfo.y]);

	            return containerGroup;
	        },

	        /**
	         * @private
	         */
	        _doRender: function (containerGroup, seriesModel, reRoot) {
	            var thisTree = seriesModel.getData().tree;
	            var oldTree = this._oldTree;

	            // Clear last shape records.
	            var lastsForAnimation = createStorage();
	            var thisStorage = createStorage();
	            var oldStorage = this._storage;
	            var willInvisibleEls = [];
	            var doRenderNode = zrUtil.curry(
	                renderNode, seriesModel,
	                thisStorage, oldStorage, reRoot,
	                lastsForAnimation, willInvisibleEls
	            );

	            // Notice: when thisTree and oldTree are the same tree (see list.cloneShadow),
	            // the oldTree is actually losted, so we can not find all of the old graphic
	            // elements from tree. So we use this stragegy: make element storage, move
	            // from old storage to new storage, clear old storage.

	            dualTravel(
	                thisTree.root ? [thisTree.root] : [],
	                (oldTree && oldTree.root) ? [oldTree.root] : [],
	                containerGroup,
	                thisTree === oldTree || !oldTree,
	                0
	            );

	            // Process all removing.
	            var willDeleteEls = clearStorage(oldStorage);

	            this._oldTree = thisTree;
	            this._storage = thisStorage;

	            return {
	                lastsForAnimation: lastsForAnimation,
	                willDeleteEls: willDeleteEls,
	                renderFinally: renderFinally
	            };

	            function dualTravel(thisViewChildren, oldViewChildren, parentGroup, sameTree, depth) {
	                // When 'render' is triggered by action,
	                // 'this' and 'old' may be the same tree,
	                // we use rawIndex in that case.
	                if (sameTree) {
	                    oldViewChildren = thisViewChildren;
	                    each(thisViewChildren, function (child, index) {
	                        !child.isRemoved() && processNode(index, index);
	                    });
	                }
	                // Diff hierarchically (diff only in each subtree, but not whole).
	                // because, consistency of view is important.
	                else {
	                    (new DataDiffer(oldViewChildren, thisViewChildren, getKey, getKey))
	                        .add(processNode)
	                        .update(processNode)
	                        .remove(zrUtil.curry(processNode, null))
	                        .execute();
	                }

	                function getKey(node) {
	                    // Identify by name or raw index.
	                    return node.getId();
	                }

	                function processNode(newIndex, oldIndex) {
	                    var thisNode = newIndex != null ? thisViewChildren[newIndex] : null;
	                    var oldNode = oldIndex != null ? oldViewChildren[oldIndex] : null;

	                    var group = doRenderNode(thisNode, oldNode, parentGroup, depth);

	                    group && dualTravel(
	                        thisNode && thisNode.viewChildren || [],
	                        oldNode && oldNode.viewChildren || [],
	                        group,
	                        sameTree,
	                        depth + 1
	                    );
	                }
	            }

	            function clearStorage(storage) {
	                var willDeleteEls = createStorage();
	                storage && each(storage, function (store, storageName) {
	                    var delEls = willDeleteEls[storageName];
	                    each(store, function (el) {
	                        el && (delEls.push(el), el.__tmWillDelete = 1);
	                    });
	                });
	                return willDeleteEls;
	            }

	            function renderFinally() {
	                each(willDeleteEls, function (els) {
	                    each(els, function (el) {
	                        el.parent && el.parent.remove(el);
	                    });
	                });
	                each(willInvisibleEls, function (el) {
	                    el.invisible = true;
	                    // Setting invisible is for optimizing, so no need to set dirty,
	                    // just mark as invisible.
	                    el.dirty();
	                });
	            }
	        },

	        /**
	         * @private
	         */
	        _doAnimation: function (containerGroup, renderResult, seriesModel, reRoot) {
	            if (!seriesModel.get('animation')) {
	                return;
	            }

	            var duration = seriesModel.get('animationDurationUpdate');
	            var easing = seriesModel.get('animationEasing');
	            var animationWrap = animationUtil.createWrap();

	            // Make delete animations.
	            each(renderResult.willDeleteEls, function (store, storageName) {
	                each(store, function (el, rawIndex) {
	                    if (el.invisible) {
	                        return;
	                    }

	                    var parent = el.parent; // Always has parent, and parent is nodeGroup.
	                    var target;

	                    if (reRoot && reRoot.direction === 'drillDown') {
	                        target = parent === reRoot.rootNodeGroup
	                            // This is the content element of view root.
	                            // Only `content` will enter this branch, because
	                            // `background` and `nodeGroup` will not be deleted.
	                            ? {
	                                shape: {
	                                    x: 0,
	                                    y: 0,
	                                    width: parent.__tmNodeWidth,
	                                    height: parent.__tmNodeHeight
	                                },
	                                style: {
	                                    opacity: 0
	                                }
	                            }
	                            // Others.
	                            : {style: {opacity: 0}};
	                    }
	                    else {
	                        var targetX = 0;
	                        var targetY = 0;

	                        if (!parent.__tmWillDelete) {
	                            // Let node animate to right-bottom corner, cooperating with fadeout,
	                            // which is appropriate for user understanding.
	                            // Divided by 2 for reRoot rolling up effect.
	                            targetX = parent.__tmNodeWidth / 2;
	                            targetY = parent.__tmNodeHeight / 2;
	                        }

	                        target = storageName === 'nodeGroup'
	                            ? {position: [targetX, targetY], style: {opacity: 0}}
	                            : {
	                                shape: {x: targetX, y: targetY, width: 0, height: 0},
	                                style: {opacity: 0}
	                            };
	                    }

	                    target && animationWrap.add(el, target, duration, easing);
	                });
	            });

	            // Make other animations
	            each(this._storage, function (store, storageName) {
	                each(store, function (el, rawIndex) {
	                    var last = renderResult.lastsForAnimation[storageName][rawIndex];
	                    var target = {};

	                    if (!last) {
	                        return;
	                    }

	                    if (storageName === 'nodeGroup') {
	                        if (last.old) {
	                            target.position = el.position.slice();
	                            el.attr('position', last.old);
	                        }
	                    }
	                    else {
	                        if (last.old) {
	                            target.shape = zrUtil.extend({}, el.shape);
	                            el.setShape(last.old);
	                        }

	                        if (last.fadein) {
	                            el.setStyle('opacity', 0);
	                            target.style = {opacity: 1};
	                        }
	                        // When animation is stopped for succedent animation starting,
	                        // el.style.opacity might not be 1
	                        else if (el.style.opacity !== 1) {
	                            target.style = {opacity: 1};
	                        }
	                    }

	                    animationWrap.add(el, target, duration, easing);
	                });
	            }, this);

	            this._state = 'animating';

	            animationWrap
	                .done(bind(function () {
	                    this._state = 'ready';
	                    renderResult.renderFinally();
	                }, this))
	                .start();
	        },

	        /**
	         * @private
	         */
	        _resetController: function (api) {
	            var controller = this._controller;

	            // Init controller.
	            if (!controller) {
	                controller = this._controller = new RoamController(api.getZr());
	                controller.enable(this.seriesModel.get('roam'));
	                controller.on('pan', bind(this._onPan, this));
	                controller.on('zoom', bind(this._onZoom, this));
	            }

	            var rect = new BoundingRect(0, 0, api.getWidth(), api.getHeight());
	            controller.setContainsPoint(function (x, y) {
	                return rect.contain(x, y);
	            });
	        },

	        /**
	         * @private
	         */
	        _clearController: function () {
	            var controller = this._controller;
	            if (controller) {
	                controller.dispose();
	                controller = null;
	            }
	        },

	        /**
	         * @private
	         */
	        _onPan: function (dx, dy) {
	            this._mayClick = false;

	            if (this._state !== 'animating'
	                && (Math.abs(dx) > DRAG_THRESHOLD || Math.abs(dy) > DRAG_THRESHOLD)
	            ) {
	                // These param must not be cached.
	                var root = this.seriesModel.getData().tree.root;

	                if (!root) {
	                    return;
	                }

	                var rootLayout = root.getLayout();

	                if (!rootLayout) {
	                    return;
	                }

	                this.api.dispatchAction({
	                    type: 'treemapMove',
	                    from: this.uid,
	                    seriesId: this.seriesModel.id,
	                    rootRect: {
	                        x: rootLayout.x + dx, y: rootLayout.y + dy,
	                        width: rootLayout.width, height: rootLayout.height
	                    }
	                });
	            }
	        },

	        /**
	         * @private
	         */
	        _onZoom: function (scale, mouseX, mouseY) {
	            this._mayClick = false;

	            if (this._state !== 'animating') {
	                // These param must not be cached.
	                var root = this.seriesModel.getData().tree.root;

	                if (!root) {
	                    return;
	                }

	                var rootLayout = root.getLayout();

	                if (!rootLayout) {
	                    return;
	                }

	                var rect = new BoundingRect(
	                    rootLayout.x, rootLayout.y, rootLayout.width, rootLayout.height
	                );
	                var layoutInfo = this.seriesModel.layoutInfo;

	                // Transform mouse coord from global to containerGroup.
	                mouseX -= layoutInfo.x;
	                mouseY -= layoutInfo.y;

	                // Scale root bounding rect.
	                var m = matrix.create();
	                matrix.translate(m, m, [-mouseX, -mouseY]);
	                matrix.scale(m, m, [scale, scale]);
	                matrix.translate(m, m, [mouseX, mouseY]);

	                rect.applyTransform(m);

	                this.api.dispatchAction({
	                    type: 'treemapRender',
	                    from: this.uid,
	                    seriesId: this.seriesModel.id,
	                    rootRect: {
	                        x: rect.x, y: rect.y,
	                        width: rect.width, height: rect.height
	                    }
	                });
	            }
	        },

	        /**
	         * @private
	         */
	        _initEvents: function (containerGroup) {
	            // FIXME
	            // 不用click以及silent的原因是，animate时视图设置silent true来避免click生效，
	            // 但是animate中，按下鼠标，animate结束后（silent设回为false）松开鼠标，
	            // 还是会触发click，期望是不触发。

	            // Mousedown occurs when drag start, and mouseup occurs when drag end,
	            // click event should not be triggered in that case.

	            containerGroup.on('mousedown', function (e) {
	                this._state === 'ready' && (this._mayClick = true);
	            }, this);
	            containerGroup.on('mouseup', function (e) {
	                if (this._mayClick) {
	                    this._mayClick = false;
	                    this._state === 'ready' && onClick.call(this, e);
	                }
	            }, this);

	            function onClick(e) {
	                var nodeClick = this.seriesModel.get('nodeClick', true);

	                if (!nodeClick) {
	                    return;
	                }

	                var targetInfo = this.findTarget(e.offsetX, e.offsetY);

	                if (!targetInfo) {
	                    return;
	                }

	                var node = targetInfo.node;
	                if (node.getLayout().isLeafRoot) {
	                    this._rootToNode(targetInfo);
	                }
	                else {
	                    if (nodeClick === 'zoomToNode') {
	                        this._zoomToNode(targetInfo);
	                    }
	                    else if (nodeClick === 'link') {
	                        var itemModel = node.hostTree.data.getItemModel(node.dataIndex);
	                        var link = itemModel.get('link', true);
	                        var linkTarget = itemModel.get('target', true) || 'blank';
	                        link && window.open(link, linkTarget);
	                    }
	                }
	            }
	        },

	        /**
	         * @private
	         */
	        _renderBreadcrumb: function (seriesModel, api, targetInfo) {
	            if (!targetInfo) {
	                targetInfo = seriesModel.get('leafDepth', true) != null
	                    ? {node: seriesModel.getViewRoot()}
	                    // FIXME
	                    // better way?
	                    // Find breadcrumb tail on center of containerGroup.
	                    : this.findTarget(api.getWidth() / 2, api.getHeight() / 2);

	                if (!targetInfo) {
	                    targetInfo = {node: seriesModel.getData().tree.root};
	                }
	            }

	            (this._breadcrumb || (this._breadcrumb = new Breadcrumb(this.group)))
	                .render(seriesModel, api, targetInfo.node, bind(onSelect, this));

	            function onSelect(node) {
	                if (this._state !== 'animating') {
	                    helper.aboveViewRoot(seriesModel.getViewRoot(), node)
	                        ? this._rootToNode({node: node})
	                        : this._zoomToNode({node: node});
	                }
	            }
	        },

	        /**
	         * @override
	         */
	        remove: function () {
	            this._clearController();
	            this._containerGroup && this._containerGroup.removeAll();
	            this._storage = createStorage();
	            this._state = 'ready';
	            this._breadcrumb && this._breadcrumb.remove();
	        },

	        dispose: function () {
	            this._clearController();
	        },

	        /**
	         * @private
	         */
	        _zoomToNode: function (targetInfo) {
	            this.api.dispatchAction({
	                type: 'treemapZoomToNode',
	                from: this.uid,
	                seriesId: this.seriesModel.id,
	                targetNode: targetInfo.node
	            });
	        },

	        /**
	         * @private
	         */
	        _rootToNode: function (targetInfo) {
	            this.api.dispatchAction({
	                type: 'treemapRootToNode',
	                from: this.uid,
	                seriesId: this.seriesModel.id,
	                targetNode: targetInfo.node
	            });
	        },

	        /**
	         * @public
	         * @param {number} x Global coord x.
	         * @param {number} y Global coord y.
	         * @return {Object} info If not found, return undefined;
	         * @return {number} info.node Target node.
	         * @return {number} info.offsetX x refer to target node.
	         * @return {number} info.offsetY y refer to target node.
	         */
	        findTarget: function (x, y) {
	            var targetInfo;
	            var viewRoot = this.seriesModel.getViewRoot();

	            viewRoot.eachNode({attr: 'viewChildren', order: 'preorder'}, function (node) {
	                var bgEl = this._storage.background[node.getRawIndex()];
	                // If invisible, there might be no element.
	                if (bgEl) {
	                    var point = bgEl.transformCoordToLocal(x, y);
	                    var shape = bgEl.shape;

	                    // For performance consideration, dont use 'getBoundingRect'.
	                    if (shape.x <= point[0]
	                        && point[0] <= shape.x + shape.width
	                        && shape.y <= point[1]
	                        && point[1] <= shape.y + shape.height
	                    ) {
	                        targetInfo = {node: node, offsetX: point[0], offsetY: point[1]};
	                    }
	                    else {
	                        return false; // Suppress visit subtree.
	                    }
	                }
	            }, this);

	            return targetInfo;
	        }

	    });

	    /**
	     * @inner
	     */
	    function createStorage() {
	        return {nodeGroup: [], background: [], content: []};
	    }

	    /**
	     * @inner
	     * @return Return undefined means do not travel further.
	     */
	    function renderNode(
	        seriesModel, thisStorage, oldStorage, reRoot,
	        lastsForAnimation, willInvisibleEls,
	        thisNode, oldNode, parentGroup, depth
	    ) {
	        // Whether under viewRoot.
	        if (!thisNode) {
	            // Deleting nodes will be performed finally. This method just find
	            // element from old storage, or create new element, set them to new
	            // storage, and set styles.
	            return;
	        }

	        var thisLayout = thisNode.getLayout();

	        if (!thisLayout || !thisLayout.isInView) {
	            return;
	        }

	        var thisWidth = thisLayout.width;
	        var thisHeight = thisLayout.height;
	        var thisInvisible = thisLayout.invisible;

	        var thisRawIndex = thisNode.getRawIndex();
	        var oldRawIndex = oldNode && oldNode.getRawIndex();

	        // Node group
	        var group = giveGraphic('nodeGroup', Group);

	        if (!group) {
	            return;
	        }

	        parentGroup.add(group);
	        // x,y are not set when el is above view root.
	        group.attr('position', [thisLayout.x || 0, thisLayout.y || 0]);
	        group.__tmNodeWidth = thisWidth;
	        group.__tmNodeHeight = thisHeight;

	        if (thisLayout.isAboveViewRoot) {
	            return group;
	        }

	        // Background
	        var bg = giveGraphic('background', Rect, depth, Z_BG);
	        if (bg) {
	            bg.setShape({x: 0, y: 0, width: thisWidth, height: thisHeight});
	            updateStyle(bg, function () {
	                bg.setStyle('fill', thisNode.getVisual('borderColor', true));
	            });
	            group.add(bg);
	        }

	        var thisViewChildren = thisNode.viewChildren;

	        // No children, render content.
	        if (!thisViewChildren || !thisViewChildren.length) {
	            var content = giveGraphic('content', Rect, depth, Z_CONTENT);
	            content && renderContent(group);
	        }

	        return group;

	        // ----------------------------
	        // | Procedures in renderNode |
	        // ----------------------------

	        function renderContent(group) {
	            // For tooltip.
	            content.dataIndex = thisNode.dataIndex;
	            content.seriesIndex = seriesModel.seriesIndex;

	            var borderWidth = thisLayout.borderWidth;
	            var contentWidth = Math.max(thisWidth - 2 * borderWidth, 0);
	            var contentHeight = Math.max(thisHeight - 2 * borderWidth, 0);

	            content.culling = true;
	            content.setShape({
	                x: borderWidth,
	                y: borderWidth,
	                width: contentWidth,
	                height: contentHeight
	            });

	            var visualColor = thisNode.getVisual('color', true);
	            updateStyle(content, function () {
	                var normalStyle = {fill: visualColor};
	                var emphasisStyle = thisNode.getModel('itemStyle.emphasis').getItemStyle();

	                prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight);

	                content.setStyle(normalStyle);
	                graphic.setHoverStyle(content, emphasisStyle);
	            });

	            group.add(content);
	        }

	        function updateStyle(element, cb) {
	            if (!thisInvisible) {
	                // If invisible, do not set visual, otherwise the element will
	                // change immediately before animation. We think it is OK to
	                // remain its origin color when moving out of the view window.
	                cb();

	                if (!element.__tmWillVisible) {
	                    element.invisible = false;
	                }
	            }
	            else {
	                // Delay invisible setting utill animation finished,
	                // avoid element vanish suddenly before animation.
	                !element.invisible && willInvisibleEls.push(element);
	            }
	        }

	        function prepareText(normalStyle, emphasisStyle, visualColor, contentWidth, contentHeight) {
	            var nodeModel = thisNode.getModel();
	            var text = nodeModel.get('name');
	            if (thisLayout.isLeafRoot) {
	                var iconChar = seriesModel.get('drillDownIcon', true);
	                text = iconChar ? iconChar + ' ' + text : text;
	            }

	            setText(
	                text, normalStyle, nodeModel, PATH_LABEL_NORMAL,
	                visualColor, contentWidth, contentHeight
	            );
	            setText(
	                text, emphasisStyle, nodeModel, PATH_LABEL_EMPHASIS,
	                visualColor, contentWidth, contentHeight
	            );
	        }

	        function setText(text, style, nodeModel, labelPath, visualColor, contentWidth, contentHeight) {
	            var labelModel = nodeModel.getModel(labelPath);
	            var labelTextStyleModel = labelModel.getModel('textStyle');

	            graphic.setText(style, labelModel, visualColor);

	            // text.align and text.baseline is not included by graphic.setText,
	            // because in most cases the two attributes are not exposed to user,
	            // except in treemap.
	            style.textAlign = labelTextStyleModel.get('align');
	            style.textVerticalAlign = labelTextStyleModel.get('baseline');

	            var textRect = labelTextStyleModel.getTextRect(text);
	            if (!labelModel.getShallow('show') || textRect.height > contentHeight) {
	                style.text = '';
	            }
	            else if (textRect.width > contentWidth) {
	                style.text = labelTextStyleModel.get('ellipsis')
	                    ? labelTextStyleModel.truncateText(
	                        text, contentWidth, null, {minChar: 2}
	                    )
	                    : '';
	            }
	            else {
	                style.text = text;
	            }
	        }

	        function giveGraphic(storageName, Ctor, depth, z) {
	            var element = oldRawIndex != null && oldStorage[storageName][oldRawIndex];
	            var lasts = lastsForAnimation[storageName];

	            if (element) {
	                // Remove from oldStorage
	                oldStorage[storageName][oldRawIndex] = null;
	                prepareAnimationWhenHasOld(lasts, element, storageName);
	            }
	            // If invisible and no old element, do not create new element (for optimizing).
	            else if (!thisInvisible) {
	                element = new Ctor({z: calculateZ(depth, z)});
	                element.__tmDepth = depth;
	                element.__tmStorageName = storageName;
	                prepareAnimationWhenNoOld(lasts, element, storageName);
	            }

	            // Set to thisStorage
	            return (thisStorage[storageName][thisRawIndex] = element);
	        }

	        function prepareAnimationWhenHasOld(lasts, element, storageName) {
	            var lastCfg = lasts[thisRawIndex] = {};
	            lastCfg.old = storageName === 'nodeGroup'
	                ? element.position.slice()
	                : zrUtil.extend({}, element.shape);
	        }

	        // If a element is new, we need to find the animation start point carefully,
	        // otherwise it will looks strange when 'zoomToNode'.
	        function prepareAnimationWhenNoOld(lasts, element, storageName) {
	            var lastCfg = lasts[thisRawIndex] = {};
	            var parentNode = thisNode.parentNode;

	            if (parentNode && (!reRoot || reRoot.direction === 'drillDown')) {
	                var parentOldX = 0;
	                var parentOldY = 0;

	                // New nodes appear from right-bottom corner in 'zoomToNode' animation.
	                // For convenience, get old bounding rect from background.
	                var parentOldBg = lastsForAnimation.background[parentNode.getRawIndex()];
	                if (!reRoot && parentOldBg && parentOldBg.old) {
	                    parentOldX = parentOldBg.old.width;
	                    parentOldY = parentOldBg.old.height;
	                }

	                // When no parent old shape found, its parent is new too,
	                // so we can just use {x:0, y:0}.
	                lastCfg.old = storageName === 'nodeGroup'
	                    ? [0, parentOldY]
	                    : {x: parentOldX, y: parentOldY, width: 0, height: 0};
	            }

	            // Fade in, user can be aware that these nodes are new.
	            lastCfg.fadein = storageName !== 'nodeGroup';
	        }
	    }

	    // We can not set all backgroud with the same z, Because the behaviour of
	    // drill down and roll up differ background creation sequence from tree
	    // hierarchy sequence, which cause that lowser background element overlap
	    // upper ones. So we calculate z based on depth.
	    // Moreover, we try to shrink down z interval to [0, 1] to avoid that
	    // treemap with large z overlaps other components.
	    function calculateZ(depth, zInLevel) {
	        var zb = depth * Z_BASE + zInLevel;
	        return (zb - 1) / zb;
	    }



/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	 

	    var graphic = __webpack_require__(282);
	    var layout = __webpack_require__(260);
	    var zrUtil = __webpack_require__(243);
	    var helper = __webpack_require__(428);

	    var TEXT_PADDING = 8;
	    var ITEM_GAP = 8;
	    var ARRAY_LENGTH = 5;

	    function Breadcrumb(containerGroup) {
	        /**
	         * @private
	         * @type {module:zrender/container/Group}
	         */
	        this.group = new graphic.Group();

	        containerGroup.add(this.group);
	    }

	    Breadcrumb.prototype = {

	        constructor: Breadcrumb,

	        render: function (seriesModel, api, targetNode, onSelect) {
	            var model = seriesModel.getModel('breadcrumb');
	            var thisGroup = this.group;

	            thisGroup.removeAll();

	            if (!model.get('show') || !targetNode) {
	                return;
	            }

	            var normalStyleModel = model.getModel('itemStyle.normal');
	            // var emphasisStyleModel = model.getModel('itemStyle.emphasis');
	            var textStyleModel = normalStyleModel.getModel('textStyle');

	            var layoutParam = {
	                pos: {
	                    left: model.get('left'),
	                    right: model.get('right'),
	                    top: model.get('top'),
	                    bottom: model.get('bottom')
	                },
	                box: {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                },
	                emptyItemWidth: model.get('emptyItemWidth'),
	                totalWidth: 0,
	                renderList: []
	            };

	            this._prepare(targetNode, layoutParam, textStyleModel);
	            this._renderContent(seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect);

	            layout.positionElement(thisGroup, layoutParam.pos, layoutParam.box);
	        },

	        /**
	         * Prepare render list and total width
	         * @private
	         */
	        _prepare: function (targetNode, layoutParam, textStyleModel) {
	            for (var node = targetNode; node; node = node.parentNode) {
	                var text = node.getModel().get('name');
	                var textRect = textStyleModel.getTextRect(text);
	                var itemWidth = Math.max(
	                    textRect.width + TEXT_PADDING * 2,
	                    layoutParam.emptyItemWidth
	                );
	                layoutParam.totalWidth += itemWidth + ITEM_GAP;
	                layoutParam.renderList.push({node: node, text: text, width: itemWidth});
	            }
	        },

	        /**
	         * @private
	         */
	        _renderContent: function (
	            seriesModel, layoutParam, normalStyleModel, textStyleModel, onSelect
	        ) {
	            // Start rendering.
	            var lastX = 0;
	            var emptyItemWidth = layoutParam.emptyItemWidth;
	            var height = seriesModel.get('breadcrumb.height');
	            var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);
	            var totalWidth = layoutParam.totalWidth;
	            var renderList = layoutParam.renderList;

	            for (var i = renderList.length - 1; i >= 0; i--) {
	                var item = renderList[i];
	                var itemNode = item.node;
	                var itemWidth = item.width;
	                var text = item.text;

	                // Hdie text and shorten width if necessary.
	                if (totalWidth > availableSize.width) {
	                    totalWidth -= itemWidth - emptyItemWidth;
	                    itemWidth = emptyItemWidth;
	                    text = '';
	                }

	                var el = new graphic.Polygon({
	                    shape: {
	                        points: makeItemPoints(
	                            lastX, 0, itemWidth, height,
	                            i === renderList.length - 1, i === 0
	                        )
	                    },
	                    style: zrUtil.defaults(
	                        normalStyleModel.getItemStyle(),
	                        {
	                            lineJoin: 'bevel',
	                            text: text,
	                            textFill: textStyleModel.getTextColor(),
	                            textFont: textStyleModel.getFont()
	                        }
	                    ),
	                    z: 10,
	                    onclick: zrUtil.curry(onSelect, itemNode)
	                });
	                this.group.add(el);

	                packEventData(el, seriesModel, itemNode);

	                lastX += itemWidth + ITEM_GAP;
	            }
	        },

	        /**
	         * @override
	         */
	        remove: function () {
	            this.group.removeAll();
	        }
	    };

	    function makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {
	        var points = [
	            [head ? x : x - ARRAY_LENGTH, y],
	            [x + itemWidth, y],
	            [x + itemWidth, y + itemHeight],
	            [head ? x : x - ARRAY_LENGTH, y + itemHeight]
	        ];
	        !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);
	        !head && points.push([x, y + itemHeight / 2]);
	        return points;
	    }

	    // Package custom mouse event.
	    function packEventData(el, seriesModel, itemNode) {
	        el.eventData = {
	            componentType: 'series',
	            componentSubType: 'treemap',
	            seriesIndex: seriesModel.componentIndex,
	            seriesName: seriesModel.name,
	            seriesType: 'treemap',
	            selfType: 'breadcrumb', // Distinguish with click event on treemap node.
	            nodeData: {
	                dataIndex: itemNode && itemNode.dataIndex,
	                name: itemNode && itemNode.name
	            },
	            treePathInfo: itemNode && helper.wrapTreePathInfo(itemNode, seriesModel)
	        };
	    }

	    module.exports = Breadcrumb;


/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	 

	    var zrUtil = __webpack_require__(243);

	    /**
	     * @param {number} [time=500] Time in ms
	     * @param {string} [easing='linear']
	     * @param {number} [delay=0]
	     * @param {Function} [callback]
	     *
	     * @example
	     *  // Animate position
	     *  animation
	     *      .createWrap()
	     *      .add(el1, {position: [10, 10]})
	     *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)
	     *      .done(function () { // done })
	     *      .start('cubicOut');
	     */
	    function createWrap() {

	        var storage = [];
	        var elExistsMap = {};
	        var doneCallback;

	        return {

	            /**
	             * Caution: a el can only be added once, otherwise 'done'
	             * might not be called. This method checks this (by el.id),
	             * suppresses adding and returns false when existing el found.
	             *
	             * @param {modele:zrender/Element} el
	             * @param {Object} target
	             * @param {number} [time=500]
	             * @param {number} [delay=0]
	             * @param {string} [easing='linear']
	             * @return {boolean} Whether adding succeeded.
	             *
	             * @example
	             *     add(el, target, time, delay, easing);
	             *     add(el, target, time, easing);
	             *     add(el, target, time);
	             *     add(el, target);
	             */
	            add: function (el, target, time, delay, easing) {
	                if (zrUtil.isString(delay)) {
	                    easing = delay;
	                    delay = 0;
	                }

	                if (elExistsMap[el.id]) {
	                    return false;
	                }
	                elExistsMap[el.id] = 1;

	                storage.push(
	                    {el: el, target: target, time: time, delay: delay, easing: easing}
	                );

	                return true;
	            },

	            /**
	             * Only execute when animation finished. Will not execute when any
	             * of 'stop' or 'stopAnimation' called.
	             *
	             * @param {Function} callback
	             */
	            done: function (callback) {
	                doneCallback = callback;
	                return this;
	            },

	            /**
	             * Will stop exist animation firstly.
	             */
	            start: function () {
	                var count = storage.length;

	                for (var i = 0, len = storage.length; i < len; i++) {
	                    var item = storage[i];
	                    item.el.animateTo(item.target, item.time, item.delay, item.easing, done);
	                }

	                return this;

	                function done() {
	                    count--;
	                    if (!count) {
	                        storage.length = 0;
	                        elExistsMap = {};
	                        doneCallback && doneCallback();
	                    }
	                }
	            }
	        };
	    }

	    module.exports = {createWrap: createWrap};


/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Treemap action
	 */


	    var echarts = __webpack_require__(240);
	    var helper = __webpack_require__(428);

	    var noop = function () {};

	    var actionTypes = [
	        'treemapZoomToNode',
	        'treemapRender',
	        'treemapMove'
	    ];

	    for (var i = 0; i < actionTypes.length; i++) {
	        echarts.registerAction({type: actionTypes[i], update: 'updateView'}, noop);
	    }

	    echarts.registerAction(
	        {type: 'treemapRootToNode', update: 'updateView'},
	        function (payload, ecModel) {

	            ecModel.eachComponent(
	                {mainType: 'series', subType: 'treemap', query: payload},
	                handleRootToNode
	            );

	            function handleRootToNode(model, index) {
	                var targetInfo = helper.retrieveTargetInfo(payload, model);

	                if (targetInfo) {
	                    var originViewRoot = model.getViewRoot();
	                    if (originViewRoot) {
	                        payload.direction = helper.aboveViewRoot(originViewRoot, targetInfo.node)
	                            ? 'rollUp' : 'drillDown';
	                    }
	                    model.resetViewRoot(targetInfo.node);
	                }
	            }
	        }
	    );



/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	

	    var VisualMapping = __webpack_require__(434);
	    var zrColor = __webpack_require__(278);
	    var zrUtil = __webpack_require__(243);
	    var isArray = zrUtil.isArray;

	    var ITEM_STYLE_NORMAL = 'itemStyle.normal';

	    module.exports = function (ecModel, api, payload) {

	        var condition = {mainType: 'series', subType: 'treemap', query: payload};
	        ecModel.eachComponent(condition, function (seriesModel) {

	            var tree = seriesModel.getData().tree;
	            var root = tree.root;
	            var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);

	            if (root.isRemoved()) {
	                return;
	            }

	            var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {
	                return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;
	            });

	            travelTree(
	                root, // Visual should calculate from tree root but not view root.
	                {},
	                levelItemStyles,
	                seriesItemStyleModel,
	                seriesModel.getViewRoot().getAncestors(),
	                seriesModel
	            );
	        });
	    };

	    function travelTree(
	        node, designatedVisual, levelItemStyles, seriesItemStyleModel,
	        viewRootAncestors, seriesModel
	    ) {
	        var nodeModel = node.getModel();
	        var nodeLayout = node.getLayout();

	        // Optimize
	        if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {
	            return;
	        }

	        var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);
	        var levelItemStyle = levelItemStyles[node.depth];
	        var visuals = buildVisuals(
	            nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel
	        );

	        // calculate border color
	        var borderColor = nodeItemStyleModel.get('borderColor');
	        var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');
	        var thisNodeColor;
	        if (borderColorSaturation != null) {
	            // For performance, do not always execute 'calculateColor'.
	            thisNodeColor = calculateColor(visuals, node);
	            borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);
	        }
	        node.setVisual('borderColor', borderColor);

	        var viewChildren = node.viewChildren;
	        if (!viewChildren || !viewChildren.length) {
	            thisNodeColor = calculateColor(visuals, node);
	            // Apply visual to this node.
	            node.setVisual('color', thisNodeColor);
	        }
	        else {
	            var mapping = buildVisualMapping(
	                node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren
	            );

	            // Designate visual to children.
	            zrUtil.each(viewChildren, function (child, index) {
	                // If higher than viewRoot, only ancestors of viewRoot is needed to visit.
	                if (child.depth >= viewRootAncestors.length
	                    || child === viewRootAncestors[child.depth]
	                ) {
	                    var childVisual = mapVisual(
	                        nodeModel, visuals, child, index, mapping, seriesModel
	                    );
	                    travelTree(
	                        child, childVisual, levelItemStyles, seriesItemStyleModel,
	                        viewRootAncestors, seriesModel
	                    );
	                }
	            });
	        }
	    }

	    function buildVisuals(
	        nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel
	    ) {
	        var visuals = zrUtil.extend({}, designatedVisual);

	        zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {
	            // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel
	            var val = nodeItemStyleModel.get(visualName, true); // Ignore parent
	            val == null && levelItemStyle && (val = levelItemStyle[visualName]);
	            val == null && (val = designatedVisual[visualName]);
	            val == null && (val = seriesItemStyleModel.get(visualName));

	            val != null && (visuals[visualName] = val);
	        });

	        return visuals;
	    }

	    function calculateColor(visuals) {
	        var color = getValueVisualDefine(visuals, 'color');

	        if (color) {
	            var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');
	            var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');
	            if (colorSaturation) {
	                color = zrColor.modifyHSL(color, null, null, colorSaturation);
	            }
	            if (colorAlpha) {
	                color = zrColor.modifyAlpha(color, colorAlpha);
	            }

	            return color;
	        }
	    }

	    function calculateBorderColor(borderColorSaturation, thisNodeColor) {
	        return thisNodeColor != null
	             ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation)
	             : null;
	    }

	    function getValueVisualDefine(visuals, name) {
	        var value = visuals[name];
	        if (value != null && value !== 'none') {
	            return value;
	        }
	    }

	    function buildVisualMapping(
	        node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren
	    ) {
	        if (!viewChildren || !viewChildren.length) {
	            return;
	        }

	        var rangeVisual = getRangeVisual(nodeModel, 'color')
	            || (
	                visuals.color != null
	                && visuals.color !== 'none'
	                && (
	                    getRangeVisual(nodeModel, 'colorAlpha')
	                    || getRangeVisual(nodeModel, 'colorSaturation')
	                )
	            );

	        if (!rangeVisual) {
	            return;
	        }

	        var visualMin = nodeModel.get('visualMin');
	        var visualMax = nodeModel.get('visualMax');
	        var dataExtent = nodeLayout.dataExtent.slice();
	        visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);
	        visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);

	        var colorMappingBy = nodeModel.get('colorMappingBy');
	        var opt = {
	            type: rangeVisual.name,
	            dataExtent: dataExtent,
	            visual: rangeVisual.range
	        };
	        if (opt.type === 'color'
	            && (colorMappingBy === 'index' || colorMappingBy === 'id')
	        ) {
	            opt.mappingMethod = 'category';
	            opt.loop = true;
	            // categories is ordinal, so do not set opt.categories.
	        }
	        else {
	            opt.mappingMethod = 'linear';
	        }

	        var mapping = new VisualMapping(opt);
	        mapping.__drColorMappingBy = colorMappingBy;

	        return mapping;
	    }

	    // Notice: If we dont have the attribute 'colorRange', but only use
	    // attribute 'color' to represent both concepts of 'colorRange' and 'color',
	    // (It means 'colorRange' when 'color' is Array, means 'color' when not array),
	    // this problem will be encountered:
	    // If a level-1 node dont have children, and its siblings has children,
	    // and colorRange is set on level-1, then the node can not be colored.
	    // So we separate 'colorRange' and 'color' to different attributes.
	    function getRangeVisual(nodeModel, name) {
	        // 'colorRange', 'colorARange', 'colorSRange'.
	        // If not exsits on this node, fetch from levels and series.
	        var range = nodeModel.get(name);
	        return (isArray(range) && range.length) ? {name: name, range: range} : null;
	    }

	    function mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {
	        var childVisuals = zrUtil.extend({}, visuals);

	        if (mapping) {
	            var mappingType = mapping.type;
	            var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;
	            var value =
	                colorMappingBy === 'index'
	                ? index
	                : colorMappingBy === 'id'
	                ? seriesModel.mapIdToIndex(child.getId())
	                : child.getValue(nodeModel.get('visualDimension'));

	            childVisuals[mappingType] = mapping.mapValueToVisual(value);
	        }

	        return childVisuals;
	    }



/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Visual mapping.
	 */


	    var zrUtil = __webpack_require__(243);
	    var zrColor = __webpack_require__(278);
	    var linearMap = __webpack_require__(246).linearMap;
	    var each = zrUtil.each;
	    var isObject = zrUtil.isObject;

	    var CATEGORY_DEFAULT_VISUAL_INDEX = -1;

	    /**
	     * @param {Object} option
	     * @param {string} [option.type] See visualHandlers.
	     * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category' or 'fixed'
	     * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],
	     *                                              required when mappingMethod is 'linear'
	     * @param {Array.<Object>=} [option.pieceList] [
	     *                                             {value: someValue},
	     *                                             {interval: [min1, max1], visual: {...}},
	     *                                             {interval: [min2, max2]}
	     *                                             ],
	     *                                            required when mappingMethod is 'piecewise'.
	     *                                            Visual for only each piece can be specified.
	     * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']
	     *                                            required when mappingMethod is 'category'.
	     *                                            If no option.categories, categories is set
	     *                                            as [0, 1, 2, ...].
	     * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.
	     * @param {(Array|Object|*)} [option.visual]  Visual data.
	     *                                            when mappingMethod is 'category',
	     *                                            visual data can be array or object
	     *                                            (like: {cate1: '#222', none: '#fff'})
	     *                                            or primary types (which represents
	     *                                            defualt category visual), otherwise visual
	     *                                            can be array or primary (which will be
	     *                                            normalized to array).
	     *
	     */
	    var VisualMapping = function (option) {
	        var mappingMethod = option.mappingMethod;
	        var visualType = option.type;

	        /**
	         * @readOnly
	         * @type {Object}
	         */
	        var thisOption = this.option = zrUtil.clone(option);

	        /**
	         * @readOnly
	         * @type {string}
	         */
	        this.type = visualType;

	        /**
	         * @readOnly
	         * @type {string}
	         */
	        this.mappingMethod = mappingMethod;

	        /**
	         * @private
	         * @type {Function}
	         */
	        this._normalizeData = normalizers[mappingMethod];

	        var visualHandler = visualHandlers[visualType];

	        /**
	         * @public
	         * @type {Function}
	         */
	        this.applyVisual = visualHandler.applyVisual;

	        /**
	         * @public
	         * @type {Function}
	         */
	        this.getColorMapper = visualHandler.getColorMapper;

	        /**
	         * @private
	         * @type {Function}
	         */
	        this._doMap = visualHandler._doMap[mappingMethod];

	        if (mappingMethod === 'piecewise') {
	            normalizeVisualRange(thisOption);
	            preprocessForPiecewise(thisOption);
	        }
	        else if (mappingMethod === 'category') {
	            thisOption.categories
	                ? preprocessForSpecifiedCategory(thisOption)
	                // categories is ordinal when thisOption.categories not specified,
	                // which need no more preprocess except normalize visual.
	                : normalizeVisualRange(thisOption, true);
	        }
	        else { // mappingMethod === 'linear' or 'fixed'
	            zrUtil.assert(mappingMethod !== 'linear' || thisOption.dataExtent);
	            normalizeVisualRange(thisOption);
	        }
	    };

	    VisualMapping.prototype = {

	        constructor: VisualMapping,

	        mapValueToVisual: function (value) {
	            var normalized = this._normalizeData(value);
	            return this._doMap(normalized, value);
	        },

	        getNormalizer: function () {
	            return zrUtil.bind(this._normalizeData, this);
	        }
	    };

	    var visualHandlers = VisualMapping.visualHandlers = {

	        color: {

	            applyVisual: makeApplyVisual('color'),

	            /**
	             * Create a mapper function
	             * @return {Function}
	             */
	            getColorMapper: function () {
	                var thisOption = this.option;
	                var parsedVisual = zrUtil.map(thisOption.visual, zrColor.parse);

	                return zrUtil.bind(
	                    thisOption.mappingMethod === 'category'
	                        ? function (value, isNormalized) {
	                            !isNormalized && (value = this._normalizeData(value));
	                            return doMapCategory.call(this, value);
	                        }
	                        : function (value, isNormalized, out) {
	                            // If output rgb array
	                            // which will be much faster and useful in pixel manipulation
	                            var returnRGBArray = !!out;
	                            !isNormalized && (value = this._normalizeData(value));
	                            out = zrColor.fastMapToColor(value, parsedVisual, out);
	                            return returnRGBArray ? out : zrUtil.stringify(out, 'rgba');
	                        },
	                    this
	                );
	            },

	            _doMap: {
	                linear: function (normalized) {
	                    return zrColor.mapToColor(normalized, this.option.visual);
	                },
	                category: doMapCategory,
	                piecewise: function (normalized, value) {
	                    var result = getSpecifiedVisual.call(this, value);
	                    if (result == null) {
	                        result = zrColor.mapToColor(normalized, this.option.visual);
	                    }
	                    return result;
	                },
	                fixed: doMapFixed
	            }
	        },

	        colorHue: makePartialColorVisualHandler(function (color, value) {
	            return zrColor.modifyHSL(color, value);
	        }),

	        colorSaturation: makePartialColorVisualHandler(function (color, value) {
	            return zrColor.modifyHSL(color, null, value);
	        }),

	        colorLightness: makePartialColorVisualHandler(function (color, value) {
	            return zrColor.modifyHSL(color, null, null, value);
	        }),

	        colorAlpha: makePartialColorVisualHandler(function (color, value) {
	            return zrColor.modifyAlpha(color, value);
	        }),

	        opacity: {
	            applyVisual: makeApplyVisual('opacity'),
	            _doMap: makeDoMap([0, 1])
	        },

	        symbol: {
	            applyVisual: function (value, getter, setter) {
	                var symbolCfg = this.mapValueToVisual(value);
	                if (zrUtil.isString(symbolCfg)) {
	                    setter('symbol', symbolCfg);
	                }
	                else if (isObject(symbolCfg)) {
	                    for (var name in symbolCfg) {
	                        if (symbolCfg.hasOwnProperty(name)) {
	                            setter(name, symbolCfg[name]);
	                        }
	                    }
	                }
	            },
	            _doMap: {
	                linear: doMapToArray,
	                category: doMapCategory,
	                piecewise: function (normalized, value) {
	                    var result = getSpecifiedVisual.call(this, value);
	                    if (result == null) {
	                        result = doMapToArray.call(this, normalized);
	                    }
	                    return result;
	                },
	                fixed: doMapFixed
	            }
	        },

	        symbolSize: {
	            applyVisual: makeApplyVisual('symbolSize'),
	            _doMap: makeDoMap([0, 1])
	        }
	    };


	    function preprocessForPiecewise(thisOption) {
	        var pieceList = thisOption.pieceList;
	        thisOption.hasSpecialVisual = false;

	        zrUtil.each(pieceList, function (piece, index) {
	            piece.originIndex = index;
	            // piece.visual is "result visual value" but not
	            // a visual range, so it does not need to be normalized.
	            if (piece.visual != null) {
	                thisOption.hasSpecialVisual = true;
	            }
	        });
	    }

	    function preprocessForSpecifiedCategory(thisOption) {
	        // Hash categories.
	        var categories = thisOption.categories;
	        var visual = thisOption.visual;

	        var categoryMap = thisOption.categoryMap = {};
	        each(categories, function (cate, index) {
	            categoryMap[cate] = index;
	        });

	        // Process visual map input.
	        if (!zrUtil.isArray(visual)) {
	            var visualArr = [];

	            if (zrUtil.isObject(visual)) {
	                each(visual, function (v, cate) {
	                    var index = categoryMap[cate];
	                    visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;
	                });
	            }
	            else { // Is primary type, represents default visual.
	                visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;
	            }

	            visual = thisOption.visual = visualArr;
	        }

	        // Remove categories that has no visual,
	        // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.
	        for (var i = categories.length - 1; i >= 0; i--) {
	            if (visual[i] == null) {
	                delete categoryMap[categories[i]];
	                categories.pop();
	            }
	        }
	    }

	    function normalizeVisualRange(thisOption, isCategory) {
	        var visual = thisOption.visual;
	        var visualArr = [];

	        if (zrUtil.isObject(visual)) {
	            each(visual, function (v) {
	                visualArr.push(v);
	            });
	        }
	        else if (visual != null) {
	            visualArr.push(visual);
	        }

	        var doNotNeedPair = {color: 1, symbol: 1};

	        if (!isCategory
	            && visualArr.length === 1
	            && !doNotNeedPair.hasOwnProperty(thisOption.type)
	        ) {
	            // Do not care visualArr.length === 0, which is illegal.
	            visualArr[1] = visualArr[0];
	        }

	        thisOption.visual = visualArr;
	    }

	    function makePartialColorVisualHandler(applyValue) {
	        return {
	            applyVisual: function (value, getter, setter) {
	                value = this.mapValueToVisual(value);
	                // Must not be array value
	                setter('color', applyValue(getter('color'), value));
	            },
	            _doMap: makeDoMap([0, 1])
	        };
	    }

	    function doMapToArray(normalized) {
	        var visual = this.option.visual;
	        return visual[
	            Math.round(linearMap(normalized, [0, 1], [0, visual.length - 1], true))
	        ] || {};
	    }

	    function makeApplyVisual(visualType) {
	        return function (value, getter, setter) {
	            setter(visualType, this.mapValueToVisual(value));
	        };
	    }

	    function doMapCategory(normalized) {
	        var visual = this.option.visual;
	        return visual[
	            (this.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX)
	                ? normalized % visual.length
	                : normalized
	        ];
	    }

	    function doMapFixed() {
	        return this.option.visual[0];
	    }

	    function makeDoMap(sourceExtent) {
	        return {
	            linear: function (normalized) {
	                return linearMap(normalized, sourceExtent, this.option.visual, true);
	            },
	            category: doMapCategory,
	            piecewise: function (normalized, value) {
	                var result = getSpecifiedVisual.call(this, value);
	                if (result == null) {
	                    result = linearMap(normalized, sourceExtent, this.option.visual, true);
	                }
	                return result;
	            },
	            fixed: doMapFixed
	        };
	    }

	    function getSpecifiedVisual(value) {
	        var thisOption = this.option;
	        var pieceList = thisOption.pieceList;
	        if (thisOption.hasSpecialVisual) {
	            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);
	            var piece = pieceList[pieceIndex];
	            if (piece && piece.visual) {
	                return piece.visual[this.type];
	            }
	        }
	    }


	    /**
	     * Normalizers by mapping methods.
	     */
	    var normalizers = {

	        linear: function (value) {
	            return linearMap(value, this.option.dataExtent, [0, 1], true);
	        },

	        piecewise: function (value) {
	            var pieceList = this.option.pieceList;
	            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList, true);
	            if (pieceIndex != null) {
	                return linearMap(pieceIndex, [0, pieceList.length - 1], [0, 1], true);
	            }
	        },

	        category: function (value) {
	            var index = this.option.categories
	                ? this.option.categoryMap[value]
	                : value; // ordinal
	            return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;
	        },

	        fixed: zrUtil.noop
	    };



	    /**
	     * List available visual types.
	     *
	     * @public
	     * @return {Array.<string>}
	     */
	    VisualMapping.listVisualTypes = function () {
	        var visualTypes = [];
	        zrUtil.each(visualHandlers, function (handler, key) {
	            visualTypes.push(key);
	        });
	        return visualTypes;
	    };

	    /**
	     * @public
	     */
	    VisualMapping.addVisualHandler = function (name, handler) {
	        visualHandlers[name] = handler;
	    };

	    /**
	     * @public
	     */
	    VisualMapping.isValidType = function (visualType) {
	        return visualHandlers.hasOwnProperty(visualType);
	    };

	    /**
	     * Convinent method.
	     * Visual can be Object or Array or primary type.
	     *
	     * @public
	     */
	    VisualMapping.eachVisual = function (visual, callback, context) {
	        if (zrUtil.isObject(visual)) {
	            zrUtil.each(visual, callback, context);
	        }
	        else {
	            callback.call(context, visual);
	        }
	    };

	    VisualMapping.mapVisual = function (visual, callback, context) {
	        var isPrimary;
	        var newVisual = zrUtil.isArray(visual)
	            ? []
	            : zrUtil.isObject(visual)
	            ? {}
	            : (isPrimary = true, null);

	        VisualMapping.eachVisual(visual, function (v, key) {
	            var newVal = callback.call(context, v, key);
	            isPrimary ? (newVisual = newVal) : (newVisual[key] = newVal);
	        });
	        return newVisual;
	    };

	    /**
	     * @public
	     * @param {Object} obj
	     * @return {Oject} new object containers visual values.
	     *                 If no visuals, return null.
	     */
	    VisualMapping.retrieveVisuals = function (obj) {
	        var ret = {};
	        var hasVisual;

	        obj && each(visualHandlers, function (h, visualType) {
	            if (obj.hasOwnProperty(visualType)) {
	                ret[visualType] = obj[visualType];
	                hasVisual = true;
	            }
	        });

	        return hasVisual ? ret : null;
	    };

	    /**
	     * Give order to visual types, considering colorSaturation, colorAlpha depends on color.
	     *
	     * @public
	     * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}
	     *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']
	     * @return {Array.<string>} Sorted visual types.
	     */
	    VisualMapping.prepareVisualTypes = function (visualTypes) {
	        if (isObject(visualTypes)) {
	            var types = [];
	            each(visualTypes, function (item, type) {
	                types.push(type);
	            });
	            visualTypes = types;
	        }
	        else if (zrUtil.isArray(visualTypes)) {
	            visualTypes = visualTypes.slice();
	        }
	        else {
	            return [];
	        }

	        visualTypes.sort(function (type1, type2) {
	            // color should be front of colorSaturation, colorAlpha, ...
	            // symbol and symbolSize do not matter.
	            return (type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0)
	                ? 1 : -1;
	        });

	        return visualTypes;
	    };

	    /**
	     * 'color', 'colorSaturation', 'colorAlpha', ... are depends on 'color'.
	     * Other visuals are only depends on themself.
	     *
	     * @public
	     * @param {string} visualType1
	     * @param {string} visualType2
	     * @return {boolean}
	     */
	    VisualMapping.dependsOn = function (visualType1, visualType2) {
	        return visualType2 === 'color'
	            ? !!(visualType1 && visualType1.indexOf(visualType2) === 0)
	            : visualType1 === visualType2;
	    };

	    /**
	     * @param {number} value
	     * @param {Array.<Object>} pieceList [{value: ..., interval: [min, max]}, ...]
	     *                         Always from small to big.
	     * @param {boolean} [findClosestWhenOutside=false]
	     * @return {number} index
	     */
	    VisualMapping.findPieceIndex = function (value, pieceList, findClosestWhenOutside) {
	        var possibleI;
	        var abs = Infinity;

	        // value has the higher priority.
	        for (var i = 0, len = pieceList.length; i < len; i++) {
	            var pieceValue = pieceList[i].value;
	            if (pieceValue != null) {
	                if (pieceValue === value) {
	                    return i;
	                }
	                findClosestWhenOutside && updatePossible(pieceValue, i);
	            }
	        }

	        for (var i = 0, len = pieceList.length; i < len; i++) {
	            var piece = pieceList[i];
	            var interval = piece.interval;
	            var close = piece.close;

	            if (interval) {
	                if (interval[0] === -Infinity) {
	                    if (littleThan(close[1], value, interval[1])) {
	                        return i;
	                    }
	                }
	                else if (interval[1] === Infinity) {
	                    if (littleThan(close[0], interval[0], value)) {
	                        return i;
	                    }
	                }
	                else if (
	                    littleThan(close[0], interval[0], value)
	                    && littleThan(close[1], value, interval[1])
	                ) {
	                    return i;
	                }
	                findClosestWhenOutside && updatePossible(interval[0], i);
	                findClosestWhenOutside && updatePossible(interval[1], i);
	            }
	        }

	        if (findClosestWhenOutside) {
	            return value === Infinity
	                ? pieceList.length - 1
	                : value === -Infinity
	                ? 0
	                : possibleI;
	        }

	        function updatePossible(val, index) {
	            var newAbs = Math.abs(val - value);
	            if (newAbs < abs) {
	                abs = newAbs;
	                possibleI = index;
	            }
	        }

	    };

	    function littleThan(close, a, b) {
	        return close ? a <= b : a < b;
	    }

	    module.exports = VisualMapping;



/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);
	    var layout = __webpack_require__(260);
	    var helper = __webpack_require__(428);
	    var BoundingRect = __webpack_require__(248);
	    var helper = __webpack_require__(428);

	    var mathMax = Math.max;
	    var mathMin = Math.min;
	    var parsePercent = numberUtil.parsePercent;
	    var retrieveValue = zrUtil.retrieve;
	    var each = zrUtil.each;

	    /**
	     * @public
	     */
	    function update(ecModel, api, payload) {
	        // Layout result in each node:
	        // {x, y, width, height, area, borderWidth}
	        var condition = {mainType: 'series', subType: 'treemap', query: payload};
	        ecModel.eachComponent(condition, function (seriesModel) {

	            var ecWidth = api.getWidth();
	            var ecHeight = api.getHeight();
	            var seriesOption = seriesModel.option;

	            var layoutInfo = layout.getLayoutRect(
	                seriesModel.getBoxLayoutParams(),
	                {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }
	            );

	            var size = seriesOption.size || []; // Compatible with ec2.
	            var containerWidth = parsePercent(
	                retrieveValue(layoutInfo.width, size[0]),
	                ecWidth
	            );
	            var containerHeight = parsePercent(
	                retrieveValue(layoutInfo.height, size[1]),
	                ecHeight
	            );

	            // Fetch payload info.
	            var payloadType = payload && payload.type;
	            var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	            var rootRect = (payloadType === 'treemapRender' || payloadType === 'treemapMove')
	                ? payload.rootRect : null;
	            var viewRoot = seriesModel.getViewRoot();
	            var viewAbovePath = helper.getPathToRoot(viewRoot);

	            if (payloadType !== 'treemapMove') {
	                var rootSize = payloadType === 'treemapZoomToNode'
	                    ? estimateRootSize(
	                        seriesModel, targetInfo, viewRoot, containerWidth, containerHeight
	                    )
	                    : rootRect
	                    ? [rootRect.width, rootRect.height]
	                    : [containerWidth, containerHeight];

	                var sort = seriesOption.sort;
	                if (sort && sort !== 'asc' && sort !== 'desc') {
	                    sort = 'desc';
	                }
	                var options = {
	                    squareRatio: seriesOption.squareRatio,
	                    sort: sort,
	                    leafDepth: seriesOption.leafDepth
	                };

	                // layout should be cleared because using updateView but not update.
	                viewRoot.hostTree.clearLayouts();

	                // TODO
	                // optimize: if out of view clip, do not layout.
	                // But take care that if do not render node out of view clip,
	                // how to calculate start po

	                var viewRootLayout = {
	                    x: 0, y: 0,
	                    width: rootSize[0], height: rootSize[1],
	                    area: rootSize[0] * rootSize[1]
	                };
	                viewRoot.setLayout(viewRootLayout);

	                squarify(viewRoot, options, false, 0);
	                // Supplement layout.
	                var viewRootLayout = viewRoot.getLayout();
	                each(viewAbovePath, function (node, index) {
	                    var childValue = (viewAbovePath[index + 1] || viewRoot).getValue();
	                    node.setLayout(zrUtil.extend(
	                        {dataExtent: [childValue, childValue], borderWidth: 0},
	                        viewRootLayout
	                    ));
	                });
	            }

	            var treeRoot = seriesModel.getData().tree.root;

	            treeRoot.setLayout(
	                calculateRootPosition(layoutInfo, rootRect, targetInfo),
	                true
	            );

	            seriesModel.setLayoutInfo(layoutInfo);

	            // FIXME
	            // 现在没有clip功能，暂时取ec高宽。
	            prunning(
	                treeRoot,
	                // Transform to base element coordinate system.
	                new BoundingRect(-layoutInfo.x, -layoutInfo.y, ecWidth, ecHeight),
	                viewAbovePath,
	                viewRoot,
	                0
	            );
	        });
	    }

	    /**
	     * Layout treemap with squarify algorithm.
	     * @see https://graphics.ethz.ch/teaching/scivis_common/Literature/squarifiedTreeMaps.pdf
	     * @see https://github.com/mbostock/d3/blob/master/src/layout/treemap.js
	     *
	     * @protected
	     * @param {module:echarts/data/Tree~TreeNode} node
	     * @param {Object} options
	     * @param {string} options.sort 'asc' or 'desc'
	     * @param {number} options.squareRatio
	     * @param {boolean} hideChildren
	     * @param {number} depth
	     */
	    function squarify(node, options, hideChildren, depth) {
	        var width;
	        var height;

	        if (node.isRemoved()) {
	            return;
	        }

	        var thisLayout = node.getLayout();
	        width = thisLayout.width;
	        height = thisLayout.height;

	        // Considering border and gap
	        var itemStyleModel = node.getModel('itemStyle.normal');
	        var borderWidth = itemStyleModel.get('borderWidth');
	        var halfGapWidth = itemStyleModel.get('gapWidth') / 2;
	        var layoutOffset = borderWidth - halfGapWidth;
	        var nodeModel = node.getModel();

	        node.setLayout({borderWidth: borderWidth}, true);

	        width = mathMax(width - 2 * layoutOffset, 0);
	        height = mathMax(height - 2 * layoutOffset, 0);

	        var totalArea = width * height;
	        var viewChildren = initChildren(
	            node, nodeModel, totalArea, options, hideChildren, depth
	        );

	        if (!viewChildren.length) {
	            return;
	        }

	        var rect = {x: layoutOffset, y: layoutOffset, width: width, height: height};
	        var rowFixedLength = mathMin(width, height);
	        var best = Infinity; // the best row score so far
	        var row = [];
	        row.area = 0;

	        for (var i = 0, len = viewChildren.length; i < len;) {
	            var child = viewChildren[i];

	            row.push(child);
	            row.area += child.getLayout().area;
	            var score = worst(row, rowFixedLength, options.squareRatio);

	            // continue with this orientation
	            if (score <= best) {
	                i++;
	                best = score;
	            }
	            // abort, and try a different orientation
	            else {
	                row.area -= row.pop().getLayout().area;
	                position(row, rowFixedLength, rect, halfGapWidth, false);
	                rowFixedLength = mathMin(rect.width, rect.height);
	                row.length = row.area = 0;
	                best = Infinity;
	            }
	        }

	        if (row.length) {
	            position(row, rowFixedLength, rect, halfGapWidth, true);
	        }

	        if (!hideChildren) {
	            var childrenVisibleMin = nodeModel.get('childrenVisibleMin');
	            if (childrenVisibleMin != null && totalArea < childrenVisibleMin) {
	                hideChildren = true;
	            }
	        }

	        for (var i = 0, len = viewChildren.length; i < len; i++) {
	            squarify(viewChildren[i], options, hideChildren, depth + 1);
	        }
	    }

	    /**
	     * Set area to each child, and calculate data extent for visual coding.
	     */
	    function initChildren(node, nodeModel, totalArea, options, hideChildren, depth) {
	        var viewChildren = node.children || [];
	        var orderBy = options.sort;
	        orderBy !== 'asc' && orderBy !== 'desc' && (orderBy = null);

	        var overLeafDepth = options.leafDepth != null && options.leafDepth <= depth;

	        // leafDepth has higher priority.
	        if (hideChildren && !overLeafDepth) {
	            return (node.viewChildren = []);
	        }

	        // Sort children, order by desc.
	        viewChildren = zrUtil.filter(viewChildren, function (child) {
	            return !child.isRemoved();
	        });

	        sort(viewChildren, orderBy);

	        var info = statistic(nodeModel, viewChildren, orderBy);

	        if (info.sum === 0) {
	            return (node.viewChildren = []);
	        }

	        info.sum = filterByThreshold(nodeModel, totalArea, info.sum, orderBy, viewChildren);

	        if (info.sum === 0) {
	            return (node.viewChildren = []);
	        }

	        // Set area to each child.
	        for (var i = 0, len = viewChildren.length; i < len; i++) {
	            var area = viewChildren[i].getValue() / info.sum * totalArea;
	            // Do not use setLayout({...}, true), because it is needed to clear last layout.
	            viewChildren[i].setLayout({area: area});
	        }

	        if (overLeafDepth) {
	            viewChildren.length && node.setLayout({isLeafRoot: true}, true);
	            viewChildren.length = 0;
	        }

	        node.viewChildren = viewChildren;
	        node.setLayout({dataExtent: info.dataExtent}, true);

	        return viewChildren;
	    }

	    /**
	     * Consider 'visibleMin'. Modify viewChildren and get new sum.
	     */
	    function filterByThreshold(nodeModel, totalArea, sum, orderBy, orderedChildren) {

	        // visibleMin is not supported yet when no option.sort.
	        if (!orderBy) {
	            return sum;
	        }

	        var visibleMin = nodeModel.get('visibleMin');
	        var len = orderedChildren.length;
	        var deletePoint = len;

	        // Always travel from little value to big value.
	        for (var i = len - 1; i >= 0; i--) {
	            var value = orderedChildren[
	                orderBy === 'asc' ? len - i - 1 : i
	            ].getValue();

	            if (value / sum * totalArea < visibleMin) {
	                deletePoint = i;
	                sum -= value;
	            }
	        }

	        orderBy === 'asc'
	            ? orderedChildren.splice(0, len - deletePoint)
	            : orderedChildren.splice(deletePoint, len - deletePoint);

	        return sum;
	    }

	    /**
	     * Sort
	     */
	    function sort(viewChildren, orderBy) {
	        if (orderBy) {
	            viewChildren.sort(function (a, b) {
	                return orderBy === 'asc'
	                    ?  a.getValue() - b.getValue() : b.getValue() - a.getValue();
	            });
	        }
	        return viewChildren;
	    }

	    /**
	     * Statistic
	     */
	    function statistic(nodeModel, children, orderBy) {
	        // Calculate sum.
	        var sum = 0;
	        for (var i = 0, len = children.length; i < len; i++) {
	            sum += children[i].getValue();
	        }

	        // Statistic data extent for latter visual coding.
	        // Notice: data extent should be calculate based on raw children
	        // but not filtered view children, otherwise visual mapping will not
	        // be stable when zoom (where children is filtered by visibleMin).

	        var dimension = nodeModel.get('visualDimension');
	        var dataExtent;

	        // The same as area dimension.
	        if (!children || !children.length) {
	            dataExtent = [NaN, NaN];
	        }
	        else if (dimension === 'value' && orderBy) {
	            dataExtent = [
	                children[children.length - 1].getValue(),
	                children[0].getValue()
	            ];
	            orderBy === 'asc' && dataExtent.reverse();
	        }
	        // Other dimension.
	        else {
	            var dataExtent = [Infinity, -Infinity];
	            each(children, function (child) {
	                var value = child.getValue(dimension);
	                value < dataExtent[0] && (dataExtent[0] = value);
	                value > dataExtent[1] && (dataExtent[1] = value);
	            });
	        }

	        return {sum: sum, dataExtent: dataExtent};
	    }

	    /**
	     * Computes the score for the specified row,
	     * as the worst aspect ratio.
	     */
	    function worst(row, rowFixedLength, ratio) {
	        var areaMax = 0;
	        var areaMin = Infinity;

	        for (var i = 0, area, len = row.length; i < len; i++) {
	            area = row[i].getLayout().area;
	            if (area) {
	                area < areaMin && (areaMin = area);
	                area > areaMax && (areaMax = area);
	            }
	        }

	        var squareArea = row.area * row.area;
	        var f = rowFixedLength * rowFixedLength * ratio;

	        return squareArea
	            ? mathMax(
	                (f * areaMax) / squareArea,
	                squareArea / (f * areaMin)
	            )
	            : Infinity;
	    }

	    /**
	     * Positions the specified row of nodes. Modifies `rect`.
	     */
	    function position(row, rowFixedLength, rect, halfGapWidth, flush) {
	        // When rowFixedLength === rect.width,
	        // it is horizontal subdivision,
	        // rowFixedLength is the width of the subdivision,
	        // rowOtherLength is the height of the subdivision,
	        // and nodes will be positioned from left to right.

	        // wh[idx0WhenH] means: when horizontal,
	        //      wh[idx0WhenH] => wh[0] => 'width'.
	        //      xy[idx1WhenH] => xy[1] => 'y'.
	        var idx0WhenH = rowFixedLength === rect.width ? 0 : 1;
	        var idx1WhenH = 1 - idx0WhenH;
	        var xy = ['x', 'y'];
	        var wh = ['width', 'height'];

	        var last = rect[xy[idx0WhenH]];
	        var rowOtherLength = rowFixedLength
	            ? row.area / rowFixedLength : 0;

	        if (flush || rowOtherLength > rect[wh[idx1WhenH]]) {
	            rowOtherLength = rect[wh[idx1WhenH]]; // over+underflow
	        }
	        for (var i = 0, rowLen = row.length; i < rowLen; i++) {
	            var node = row[i];
	            var nodeLayout = {};
	            var step = rowOtherLength
	                ? node.getLayout().area / rowOtherLength : 0;

	            var wh1 = nodeLayout[wh[idx1WhenH]] = mathMax(rowOtherLength - 2 * halfGapWidth, 0);

	            // We use Math.max/min to avoid negative width/height when considering gap width.
	            var remain = rect[xy[idx0WhenH]] + rect[wh[idx0WhenH]] - last;
	            var modWH = (i === rowLen - 1 || remain < step) ? remain : step;
	            var wh0 = nodeLayout[wh[idx0WhenH]] = mathMax(modWH - 2 * halfGapWidth, 0);

	            nodeLayout[xy[idx1WhenH]] = rect[xy[idx1WhenH]] + mathMin(halfGapWidth, wh1 / 2);
	            nodeLayout[xy[idx0WhenH]] = last + mathMin(halfGapWidth, wh0 / 2);

	            last += modWH;
	            node.setLayout(nodeLayout, true);
	        }

	        rect[xy[idx1WhenH]] += rowOtherLength;
	        rect[wh[idx1WhenH]] -= rowOtherLength;
	    }

	    // Return [containerWidth, containerHeight] as defualt.
	    function estimateRootSize(seriesModel, targetInfo, viewRoot, containerWidth, containerHeight) {
	        // If targetInfo.node exists, we zoom to the node,
	        // so estimate whold width and heigth by target node.
	        var currNode = (targetInfo || {}).node;
	        var defaultSize = [containerWidth, containerHeight];

	        if (!currNode || currNode === viewRoot) {
	            return defaultSize;
	        }

	        var parent;
	        var viewArea = containerWidth * containerHeight;
	        var area = viewArea * seriesModel.option.zoomToNodeRatio;

	        while (parent = currNode.parentNode) { // jshint ignore:line
	            var sum = 0;
	            var siblings = parent.children;

	            for (var i = 0, len = siblings.length; i < len; i++) {
	                sum += siblings[i].getValue();
	            }
	            var currNodeValue = currNode.getValue();
	            if (currNodeValue === 0) {
	                return defaultSize;
	            }
	            area *= sum / currNodeValue;

	            var borderWidth = parent.getModel('itemStyle.normal').get('borderWidth');

	            if (isFinite(borderWidth)) {
	                // Considering border, suppose aspect ratio is 1.
	                area += 4 * borderWidth * borderWidth + 4 * borderWidth * Math.pow(area, 0.5);
	            }

	            area > numberUtil.MAX_SAFE_INTEGER && (area = numberUtil.MAX_SAFE_INTEGER);

	            currNode = parent;
	        }

	        area < viewArea && (area = viewArea);
	        var scale = Math.pow(area / viewArea, 0.5);

	        return [containerWidth * scale, containerHeight * scale];
	    }

	    // Root postion base on coord of containerGroup
	    function calculateRootPosition(layoutInfo, rootRect, targetInfo) {
	        if (rootRect) {
	            return {x: rootRect.x, y: rootRect.y};
	        }

	        var defaultPosition = {x: 0, y: 0};
	        if (!targetInfo) {
	            return defaultPosition;
	        }

	        // If targetInfo is fetched by 'retrieveTargetInfo',
	        // old tree and new tree are the same tree,
	        // so the node still exists and we can visit it.

	        var targetNode = targetInfo.node;
	        var layout = targetNode.getLayout();

	        if (!layout) {
	            return defaultPosition;
	        }

	        // Transform coord from local to container.
	        var targetCenter = [layout.width / 2, layout.height / 2];
	        var node = targetNode;
	        while (node) {
	            var nodeLayout = node.getLayout();
	            targetCenter[0] += nodeLayout.x;
	            targetCenter[1] += nodeLayout.y;
	            node = node.parentNode;
	        }

	        return {
	            x: layoutInfo.width / 2 - targetCenter[0],
	            y: layoutInfo.height / 2 - targetCenter[1]
	        };
	    }

	    // Mark nodes visible for prunning when visual coding and rendering.
	    // Prunning depends on layout and root position, so we have to do it after layout.
	    function prunning(node, clipRect, viewAbovePath, viewRoot, depth) {
	        var nodeLayout = node.getLayout();
	        var nodeInViewAbovePath = viewAbovePath[depth];
	        var isAboveViewRoot = nodeInViewAbovePath && nodeInViewAbovePath === node;

	        if (
	            (nodeInViewAbovePath && !isAboveViewRoot)
	            || (depth === viewAbovePath.length && node !== viewRoot)
	        ) {
	            return;
	        }

	        node.setLayout({
	            // isInView means: viewRoot sub tree + viewAbovePath
	            isInView: true,
	            // invisible only means: outside view clip so that the node can not
	            // see but still layout for animation preparation but not render.
	            invisible: !isAboveViewRoot && !clipRect.intersect(nodeLayout),
	            isAboveViewRoot: isAboveViewRoot
	        }, true);

	        // Transform to child coordinate.
	        var childClipRect = new BoundingRect(
	            clipRect.x - nodeLayout.x,
	            clipRect.y - nodeLayout.y,
	            clipRect.width,
	            clipRect.height
	        );

	        each(node.viewChildren || [], function (child) {
	            prunning(child, childClipRect, viewAbovePath, viewRoot, depth + 1);
	        });
	    }

	    module.exports = update;


/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);

	    __webpack_require__(437);
	    __webpack_require__(440);

	    __webpack_require__(445);

	    echarts.registerProcessor(__webpack_require__(446));

	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(349), 'graph', 'circle', null
	    ));
	    echarts.registerVisual(__webpack_require__(447));
	    echarts.registerVisual(__webpack_require__(448));

	    echarts.registerLayout(__webpack_require__(449));
	    echarts.registerLayout(__webpack_require__(452));
	    echarts.registerLayout(__webpack_require__(454));

	    // Graph view coordinate system
	    echarts.registerCoordinateSystem('graphView', {
	        create: __webpack_require__(456)
	    });


/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var List = __webpack_require__(337);
	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);
	    var Model = __webpack_require__(251);
	    var formatUtil = __webpack_require__(245);

	    var createGraphFromNodeEdge = __webpack_require__(438);

	    var GraphSeries = __webpack_require__(240).extendSeriesModel({

	        type: 'series.graph',

	        init: function (option) {
	            GraphSeries.superApply(this, 'init', arguments);

	            // Provide data for legend select
	            this.legendDataProvider = function () {
	                return this._categoriesData;
	            };

	            this.fillDataTextStyle(option.edges || option.links);

	            this._updateCategoriesData();
	        },

	        mergeOption: function (option) {
	            GraphSeries.superApply(this, 'mergeOption', arguments);

	            this.fillDataTextStyle(option.edges || option.links);

	            this._updateCategoriesData();
	        },

	        mergeDefaultAndTheme: function (option) {
	            GraphSeries.superApply(this, 'mergeDefaultAndTheme', arguments);
	            modelUtil.defaultEmphasis(option.edgeLabel, modelUtil.LABEL_OPTIONS);
	        },

	        getInitialData: function (option, ecModel) {
	            var edges = option.edges || option.links || [];
	            var nodes = option.data || option.nodes || [];
	            var self = this;

	            if (nodes && edges) {
	                return createGraphFromNodeEdge(nodes, edges, this, true, beforeLink).data;
	            }

	            function beforeLink(nodeData, edgeData) {
	                // Overwrite nodeData.getItemModel to
	                nodeData.wrapMethod('getItemModel', function (model) {
	                    var categoriesModels = self._categoriesModels;
	                    var categoryIdx = model.getShallow('category');
	                    var categoryModel = categoriesModels[categoryIdx];
	                    if (categoryModel) {
	                        categoryModel.parentModel = model.parentModel;
	                        model.parentModel = categoryModel;
	                    }
	                    return model;
	                });

	                var edgeLabelModel = self.getModel('edgeLabel');
	                // For option `edgeLabel` can be found by label.xxx.xxx on item mode.
	                var fakeSeriesModel = new Model(
	                    {label: edgeLabelModel.option},
	                    edgeLabelModel.parentModel,
	                    ecModel
	                );

	                edgeData.wrapMethod('getItemModel', function (model) {
	                    model.customizeGetParent(edgeGetParent);
	                    return model;
	                });

	                function edgeGetParent(path) {
	                    path = this.parsePath(path);
	                    return (path && path[0] === 'label')
	                        ? fakeSeriesModel
	                        : this.parentModel;
	                }
	            }
	        },

	        /**
	         * @return {module:echarts/data/Graph}
	         */
	        getGraph: function () {
	            return this.getData().graph;
	        },

	        /**
	         * @return {module:echarts/data/List}
	         */
	        getEdgeData: function () {
	            return this.getGraph().edgeData;
	        },

	        /**
	         * @return {module:echarts/data/List}
	         */
	        getCategoriesData: function () {
	            return this._categoriesData;
	        },

	        /**
	         * @override
	         */
	        formatTooltip: function (dataIndex, multipleSeries, dataType) {
	            if (dataType === 'edge') {
	                var nodeData = this.getData();
	                var params = this.getDataParams(dataIndex, dataType);
	                var edge = nodeData.graph.getEdgeByIndex(dataIndex);
	                var sourceName = nodeData.getName(edge.node1.dataIndex);
	                var targetName = nodeData.getName(edge.node2.dataIndex);

	                var html = [];
	                sourceName != null && html.push(sourceName);
	                targetName != null && html.push(targetName);
	                html = formatUtil.encodeHTML(html.join(' > '));

	                if (params.value) {
	                    html += ' : ' + formatUtil.encodeHTML(params.value);
	                }
	                return html;
	            }
	            else { // dataType === 'node' or empty
	                return GraphSeries.superApply(this, 'formatTooltip', arguments);
	            }
	        },

	        _updateCategoriesData: function () {
	            var categories = zrUtil.map(this.option.categories || [], function (category) {
	                // Data must has value
	                return category.value != null ? category : zrUtil.extend({
	                    value: 0
	                }, category);
	            });
	            var categoriesData = new List(['value'], this);
	            categoriesData.initData(categories);

	            this._categoriesData = categoriesData;

	            this._categoriesModels = categoriesData.mapArray(function (idx) {
	                return categoriesData.getItemModel(idx, true);
	            });
	        },

	        setZoom: function (zoom) {
	            this.option.zoom = zoom;
	        },

	        setCenter: function (center) {
	            this.option.center = center;
	        },

	        isAnimationEnabled: function () {
	            return GraphSeries.superCall(this, 'isAnimationEnabled')
	                // Not enable animation when do force layout
	                && !(this.get('layout') === 'force' && this.get('force.layoutAnimation'));
	        },

	        defaultOption: {
	            zlevel: 0,
	            z: 2,

	            coordinateSystem: 'view',

	            // Default option for all coordinate systems
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,
	            // polarIndex: 0,
	            // geoIndex: 0,

	            legendHoverLink: true,

	            hoverAnimation: true,

	            layout: null,

	            focusNodeAdjacency: false,

	            // Configuration of circular layout
	            circular: {
	                rotateLabel: false
	            },
	            // Configuration of force directed layout
	            force: {
	                initLayout: null,
	                // Node repulsion. Can be an array to represent range.
	                repulsion: [0, 50],
	                gravity: 0.1,

	                // Edge length. Can be an array to represent range.
	                edgeLength: 30,

	                layoutAnimation: true
	            },

	            left: 'center',
	            top: 'center',
	            // right: null,
	            // bottom: null,
	            // width: '80%',
	            // height: '80%',

	            symbol: 'circle',
	            symbolSize: 10,

	            edgeSymbol: ['none', 'none'],
	            edgeSymbolSize: 10,
	            edgeLabel: {
	                normal: {
	                    position: 'middle'
	                },
	                emphasis: {}
	            },

	            draggable: false,

	            roam: false,

	            // Default on center of graph
	            center: null,

	            zoom: 1,
	            // Symbol size scale ratio in roam
	            nodeScaleRatio: 0.6,

	            // categories: [],

	            // data: []
	            // Or
	            // nodes: []
	            //
	            // links: []
	            // Or
	            // edges: []

	            label: {
	                normal: {
	                    show: false,
	                    formatter: '{b}'
	                },
	                emphasis: {
	                    show: true
	                }
	            },

	            itemStyle: {
	                normal: {},
	                emphasis: {}
	            },

	            lineStyle: {
	                normal: {
	                    color: '#aaa',
	                    width: 1,
	                    curveness: 0,
	                    opacity: 0.5
	                },
	                emphasis: {}
	            }
	        }
	    });

	    module.exports = GraphSeries;


/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	

	    var List = __webpack_require__(337);
	    var Graph = __webpack_require__(439);
	    var linkList = __webpack_require__(427);
	    var completeDimensions = __webpack_require__(342);
	    var CoordinateSystem = __webpack_require__(265);
	    var zrUtil = __webpack_require__(243);
	    var createListFromArray = __webpack_require__(341);

	    module.exports = function (nodes, edges, hostModel, directed, beforeLink) {
	        var graph = new Graph(directed);
	        for (var i = 0; i < nodes.length; i++) {
	            graph.addNode(zrUtil.retrieve(
	                // Id, name, dataIndex
	                nodes[i].id, nodes[i].name, i
	            ), i);
	        }

	        var linkNameList = [];
	        var validEdges = [];
	        var linkCount = 0;
	        for (var i = 0; i < edges.length; i++) {
	            var link = edges[i];
	            var source = link.source;
	            var target = link.target;
	            // addEdge may fail when source or target not exists
	            if (graph.addEdge(source, target, linkCount)) {
	                validEdges.push(link);
	                linkNameList.push(zrUtil.retrieve(link.id, source + ' > ' + target));
	                linkCount++;
	            }
	        }

	        var coordSys = hostModel.get('coordinateSystem');
	        var nodeData;
	        if (coordSys === 'cartesian2d' || coordSys === 'polar') {
	            nodeData = createListFromArray(nodes, hostModel, hostModel.ecModel);
	        }
	        else {
	            // FIXME
	            var coordSysCtor = CoordinateSystem.get(coordSys);
	            // FIXME
	            var dimensionNames = completeDimensions(
	                ((coordSysCtor && coordSysCtor.type !== 'view') ? (coordSysCtor.dimensions || []) : []).concat(['value']),
	                nodes
	            );
	            nodeData = new List(dimensionNames, hostModel);
	            nodeData.initData(nodes);
	        }

	        var edgeData = new List(['value'], hostModel);
	        edgeData.initData(validEdges, linkNameList);

	        beforeLink && beforeLink(nodeData, edgeData);

	        linkList({
	            mainData: nodeData,
	            struct: graph,
	            structAttr: 'graph',
	            datas: {node: nodeData, edge: edgeData},
	            datasAttr: {node: 'data', edge: 'edgeData'}
	        });

	        // Update dataIndex of nodes and edges because invalid edge may be removed
	        graph.update();

	        return graph;
	    };


/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Graph data structure
	 *
	 * @module echarts/data/Graph
	 * @author Yi Shen(https://www.github.com/pissang)
	 */


	    var zrUtil = __webpack_require__(243);

	    /**
	     * @alias module:echarts/data/Graph
	     * @constructor
	     * @param {boolean} directed
	     */
	    var Graph = function(directed) {
	        /**
	         * 是否是有向图
	         * @type {boolean}
	         * @private
	         */
	        this._directed = directed || false;

	        /**
	         * @type {Array.<module:echarts/data/Graph.Node>}
	         * @readOnly
	         */
	        this.nodes = [];

	        /**
	         * @type {Array.<module:echarts/data/Graph.Edge>}
	         * @readOnly
	         */
	        this.edges = [];

	        /**
	         * @type {Object.<string, module:echarts/data/Graph.Node>}
	         * @private
	         */
	        this._nodesMap = {};
	        /**
	         * @type {Object.<string, module:echarts/data/Graph.Edge>}
	         * @private
	         */
	        this._edgesMap = {};

	        /**
	         * @type {module:echarts/data/List}
	         * @readOnly
	         */
	        this.data;

	        /**
	         * @type {module:echarts/data/List}
	         * @readOnly
	         */
	        this.edgeData;
	    };

	    var graphProto = Graph.prototype;
	    /**
	     * @type {string}
	     */
	    graphProto.type = 'graph';

	    /**
	     * If is directed graph
	     * @return {boolean}
	     */
	    graphProto.isDirected = function () {
	        return this._directed;
	    };

	    /**
	     * Add a new node
	     * @param {string} id
	     * @param {number} [dataIndex]
	     */
	    graphProto.addNode = function (id, dataIndex) {
	        id = id || ('' + dataIndex);

	        var nodesMap = this._nodesMap;

	        if (nodesMap[id]) {
	            return;
	        }

	        var node = new Node(id, dataIndex);
	        node.hostGraph = this;

	        this.nodes.push(node);

	        nodesMap[id] = node;
	        return node;
	    };

	    /**
	     * Get node by data index
	     * @param  {number} dataIndex
	     * @return {module:echarts/data/Graph~Node}
	     */
	    graphProto.getNodeByIndex = function (dataIndex) {
	        var rawIdx = this.data.getRawIndex(dataIndex);
	        return this.nodes[rawIdx];
	    };
	    /**
	     * Get node by id
	     * @param  {string} id
	     * @return {module:echarts/data/Graph.Node}
	     */
	    graphProto.getNodeById = function (id) {
	        return this._nodesMap[id];
	    };

	    /**
	     * Add a new edge
	     * @param {number|string|module:echarts/data/Graph.Node} n1
	     * @param {number|string|module:echarts/data/Graph.Node} n2
	     * @param {number} [dataIndex=-1]
	     * @return {module:echarts/data/Graph.Edge}
	     */
	    graphProto.addEdge = function (n1, n2, dataIndex) {
	        var nodesMap = this._nodesMap;
	        var edgesMap = this._edgesMap;

	        // PNEDING
	        if (typeof n1 === 'number') {
	            n1 = this.nodes[n1];
	        }
	        if (typeof n2 === 'number') {
	            n2 = this.nodes[n2];
	        }

	        if (!(n1 instanceof Node)) {
	            n1 = nodesMap[n1];
	        }
	        if (!(n2 instanceof Node)) {
	            n2 = nodesMap[n2];
	        }
	        if (!n1 || !n2) {
	            return;
	        }

	        var key = n1.id + '-' + n2.id;
	        // PENDING
	        if (edgesMap[key]) {
	            return;
	        }

	        var edge = new Edge(n1, n2, dataIndex);
	        edge.hostGraph = this;

	        if (this._directed) {
	            n1.outEdges.push(edge);
	            n2.inEdges.push(edge);
	        }
	        n1.edges.push(edge);
	        if (n1 !== n2) {
	            n2.edges.push(edge);
	        }

	        this.edges.push(edge);
	        edgesMap[key] = edge;

	        return edge;
	    };

	    /**
	     * Get edge by data index
	     * @param  {number} dataIndex
	     * @return {module:echarts/data/Graph~Node}
	     */
	    graphProto.getEdgeByIndex = function (dataIndex) {
	        var rawIdx = this.edgeData.getRawIndex(dataIndex);
	        return this.edges[rawIdx];
	    };
	    /**
	     * Get edge by two linked nodes
	     * @param  {module:echarts/data/Graph.Node|string} n1
	     * @param  {module:echarts/data/Graph.Node|string} n2
	     * @return {module:echarts/data/Graph.Edge}
	     */
	    graphProto.getEdge = function (n1, n2) {
	        if (n1 instanceof Node) {
	            n1 = n1.id;
	        }
	        if (n2 instanceof Node) {
	            n2 = n2.id;
	        }

	        var edgesMap = this._edgesMap;

	        if (this._directed) {
	            return edgesMap[n1 + '-' + n2];
	        } else {
	            return edgesMap[n1 + '-' + n2]
	                || edgesMap[n2 + '-' + n1];
	        }
	    };

	    /**
	     * Iterate all nodes
	     * @param  {Function} cb
	     * @param  {*} [context]
	     */
	    graphProto.eachNode = function (cb, context) {
	        var nodes = this.nodes;
	        var len = nodes.length;
	        for (var i = 0; i < len; i++) {
	            if (nodes[i].dataIndex >= 0) {
	                cb.call(context, nodes[i], i);
	            }
	        }
	    };

	    /**
	     * Iterate all edges
	     * @param  {Function} cb
	     * @param  {*} [context]
	     */
	    graphProto.eachEdge = function (cb, context) {
	        var edges = this.edges;
	        var len = edges.length;
	        for (var i = 0; i < len; i++) {
	            if (edges[i].dataIndex >= 0
	                && edges[i].node1.dataIndex >= 0
	                && edges[i].node2.dataIndex >= 0
	            ) {
	                cb.call(context, edges[i], i);
	            }
	        }
	    };

	    /**
	     * Breadth first traverse
	     * @param {Function} cb
	     * @param {module:echarts/data/Graph.Node} startNode
	     * @param {string} [direction='none'] 'none'|'in'|'out'
	     * @param {*} [context]
	     */
	    graphProto.breadthFirstTraverse = function (
	        cb, startNode, direction, context
	    ) {
	        if (!(startNode instanceof Node)) {
	            startNode = this._nodesMap[startNode];
	        }
	        if (!startNode) {
	            return;
	        }

	        var edgeType = direction === 'out'
	            ? 'outEdges' : (direction === 'in' ? 'inEdges' : 'edges');

	        for (var i = 0; i < this.nodes.length; i++) {
	            this.nodes[i].__visited = false;
	        }

	        if (cb.call(context, startNode, null)) {
	            return;
	        }

	        var queue = [startNode];
	        while (queue.length) {
	            var currentNode = queue.shift();
	            var edges = currentNode[edgeType];

	            for (var i = 0; i < edges.length; i++) {
	                var e = edges[i];
	                var otherNode = e.node1 === currentNode
	                    ? e.node2 : e.node1;
	                if (!otherNode.__visited) {
	                    if (cb.call(otherNode, otherNode, currentNode)) {
	                        // Stop traversing
	                        return;
	                    }
	                    queue.push(otherNode);
	                    otherNode.__visited = true;
	                }
	            }
	        }
	    };

	    // TODO
	    // graphProto.depthFirstTraverse = function (
	    //     cb, startNode, direction, context
	    // ) {

	    // };

	    // Filter update
	    graphProto.update = function () {
	        var data = this.data;
	        var edgeData = this.edgeData;
	        var nodes = this.nodes;
	        var edges = this.edges;

	        for (var i = 0, len = nodes.length; i < len; i++) {
	            nodes[i].dataIndex = -1;
	        }
	        for (var i = 0, len = data.count(); i < len; i++) {
	            nodes[data.getRawIndex(i)].dataIndex = i;
	        }

	        edgeData.filterSelf(function (idx) {
	            var edge = edges[edgeData.getRawIndex(idx)];
	            return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;
	        });

	        // Update edge
	        for (var i = 0, len = edges.length; i < len; i++) {
	            edges[i].dataIndex = -1;
	        }
	        for (var i = 0, len = edgeData.count(); i < len; i++) {
	            edges[edgeData.getRawIndex(i)].dataIndex = i;
	        }
	    };

	    /**
	     * @return {module:echarts/data/Graph}
	     */
	    graphProto.clone = function () {
	        var graph = new Graph(this._directed);
	        var nodes = this.nodes;
	        var edges = this.edges;
	        for (var i = 0; i < nodes.length; i++) {
	            graph.addNode(nodes[i].id, nodes[i].dataIndex);
	        }
	        for (var i = 0; i < edges.length; i++) {
	            var e = edges[i];
	            graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);
	        }
	        return graph;
	    };


	    /**
	     * @alias module:echarts/data/Graph.Node
	     */
	    function Node(id, dataIndex) {
	        /**
	        * @type {string}
	        */
	        this.id = id == null ? '' : id;

	        /**
	        * @type {Array.<module:echarts/data/Graph.Edge>}
	        */
	        this.inEdges = [];
	        /**
	        * @type {Array.<module:echarts/data/Graph.Edge>}
	        */
	        this.outEdges = [];
	        /**
	        * @type {Array.<module:echarts/data/Graph.Edge>}
	        */
	        this.edges = [];
	        /**
	         * @type {module:echarts/data/Graph}
	         */
	        this.hostGraph;

	        /**
	         * @type {number}
	         */
	        this.dataIndex = dataIndex == null ? -1 : dataIndex;
	    }

	    Node.prototype = {

	        constructor: Node,

	        /**
	         * @return {number}
	         */
	        degree: function () {
	            return this.edges.length;
	        },

	        /**
	         * @return {number}
	         */
	        inDegree: function () {
	            return this.inEdges.length;
	        },

	        /**
	        * @return {number}
	        */
	        outDegree: function () {
	            return this.outEdges.length;
	        },

	        /**
	         * @param {string} [path]
	         * @return {module:echarts/model/Model}
	         */
	        getModel: function (path) {
	            if (this.dataIndex < 0) {
	                return;
	            }
	            var graph = this.hostGraph;
	            var itemModel = graph.data.getItemModel(this.dataIndex);

	            return itemModel.getModel(path);
	        }
	    };

	    /**
	     * 图边
	     * @alias module:echarts/data/Graph.Edge
	     * @param {module:echarts/data/Graph.Node} n1
	     * @param {module:echarts/data/Graph.Node} n2
	     * @param {number} [dataIndex=-1]
	     */
	    function Edge(n1, n2, dataIndex) {

	        /**
	         * 节点1，如果是有向图则为源节点
	         * @type {module:echarts/data/Graph.Node}
	         */
	        this.node1 = n1;

	        /**
	         * 节点2，如果是有向图则为目标节点
	         * @type {module:echarts/data/Graph.Node}
	         */
	        this.node2 = n2;

	        this.dataIndex = dataIndex == null ? -1 : dataIndex;
	    }

	    /**
	     * @param {string} [path]
	     * @return {module:echarts/model/Model}
	     */
	     Edge.prototype.getModel = function (path) {
	        if (this.dataIndex < 0) {
	            return;
	        }
	        var graph = this.hostGraph;
	        var itemModel = graph.edgeData.getItemModel(this.dataIndex);

	        return itemModel.getModel(path);
	    };

	    var createGraphDataProxyMixin = function (hostName, dataName) {
	        return {
	            /**
	             * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.
	             * @return {number}
	             */
	            getValue: function (dimension) {
	                var data = this[hostName][dataName];
	                return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	            },

	            /**
	             * @param {Object|string} key
	             * @param {*} [value]
	             */
	            setVisual: function (key, value) {
	                this.dataIndex >= 0
	                    && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);
	            },

	            /**
	             * @param {string} key
	             * @return {boolean}
	             */
	            getVisual: function (key, ignoreParent) {
	                return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);
	            },

	            /**
	             * @param {Object} layout
	             * @return {boolean} [merge=false]
	             */
	            setLayout: function (layout, merge) {
	                this.dataIndex >= 0
	                    && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);
	            },

	            /**
	             * @return {Object}
	             */
	            getLayout: function () {
	                return this[hostName][dataName].getItemLayout(this.dataIndex);
	            },

	            /**
	             * @return {module:zrender/Element}
	             */
	            getGraphicEl: function () {
	                return this[hostName][dataName].getItemGraphicEl(this.dataIndex);
	            },

	            /**
	             * @return {number}
	             */
	            getRawIndex: function () {
	                return this[hostName][dataName].getRawIndex(this.dataIndex);
	            }
	        };
	    };

	    zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));
	    zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));

	    Graph.Node = Node;
	    Graph.Edge = Edge;

	    module.exports = Graph;


/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	


	    var SymbolDraw = __webpack_require__(344);
	    var LineDraw = __webpack_require__(441);
	    var RoamController = __webpack_require__(416);

	    var graphic = __webpack_require__(282);
	    var adjustEdge = __webpack_require__(444);
	    var zrUtil = __webpack_require__(243);

	    var nodeOpacityPath = ['itemStyle', 'normal', 'opacity'];
	    var lineOpacityPath = ['lineStyle', 'normal', 'opacity'];

	    function getItemOpacity(item, opacityPath) {
	        return item.getVisual('opacity') || item.getModel().get(opacityPath);
	    }

	    __webpack_require__(240).extendChartView({

	        type: 'graph',

	        init: function (ecModel, api) {
	            var symbolDraw = new SymbolDraw();
	            var lineDraw = new LineDraw();
	            var group = this.group;

	            var controller = new RoamController(api.getZr(), group);

	            group.add(symbolDraw.group);
	            group.add(lineDraw.group);

	            this._symbolDraw = symbolDraw;
	            this._lineDraw = lineDraw;
	            this._controller = controller;

	            this._firstRender = true;
	        },

	        render: function (seriesModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;

	            this._model = seriesModel;
	            this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');

	            var symbolDraw = this._symbolDraw;
	            var lineDraw = this._lineDraw;

	            var group = this.group;

	            if (coordSys.type === 'view') {
	                var groupNewProp = {
	                    position: coordSys.position,
	                    scale: coordSys.scale
	                };
	                if (this._firstRender) {
	                    group.attr(groupNewProp);
	                }
	                else {
	                    graphic.updateProps(group, groupNewProp, seriesModel);
	                }
	            }
	            // Fix edge contact point with node
	            adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));

	            var data = seriesModel.getData();
	            symbolDraw.updateData(data);

	            var edgeData = seriesModel.getEdgeData();
	            lineDraw.updateData(edgeData);

	            this._updateNodeAndLinkScale();

	            this._updateController(seriesModel, api);

	            clearTimeout(this._layoutTimeout);
	            var forceLayout = seriesModel.forceLayout;
	            var layoutAnimation = seriesModel.get('force.layoutAnimation');
	            if (forceLayout) {
	                this._startForceLayoutIteration(forceLayout, layoutAnimation);
	            }
	            data.eachItemGraphicEl(function (el, idx) {
	                var itemModel = data.getItemModel(idx);
	                // Update draggable
	                el.off('drag').off('dragend');
	                var draggable = data.getItemModel(idx).get('draggable');
	                if (draggable) {
	                    el.on('drag', function () {
	                        if (forceLayout) {
	                            forceLayout.warmUp();
	                            !this._layouting
	                                && this._startForceLayoutIteration(forceLayout, layoutAnimation);
	                            forceLayout.setFixed(idx);
	                            // Write position back to layout
	                            data.setItemLayout(idx, el.position);
	                        }
	                    }, this).on('dragend', function () {
	                        if (forceLayout) {
	                            forceLayout.setUnfixed(idx);
	                        }
	                    }, this);
	                }
	                el.setDraggable(draggable && forceLayout);

	                el.off('mouseover', el.__focusNodeAdjacency);
	                el.off('mouseout', el.__unfocusNodeAdjacency);

	                if (itemModel.get('focusNodeAdjacency')) {
	                    el.on('mouseover', el.__focusNodeAdjacency = function () {
	                        api.dispatchAction({
	                            type: 'focusNodeAdjacency',
	                            seriesId: seriesModel.id,
	                            dataIndex: el.dataIndex
	                        });
	                    });
	                    el.on('mouseout', el.__unfocusNodeAdjacency = function () {
	                        api.dispatchAction({
	                            type: 'unfocusNodeAdjacency',
	                            seriesId: seriesModel.id
	                        });
	                    });
	                }

	            }, this);

	            var circularRotateLabel = seriesModel.get('layout') === 'circular' && seriesModel.get('circular.rotateLabel');
	            var cx = data.getLayout('cx');
	            var cy = data.getLayout('cy');
	            data.eachItemGraphicEl(function (el, idx) {
	                var symbolPath = el.getSymbolPath();
	                if (circularRotateLabel) {
	                    var pos = data.getItemLayout(idx);
	                    var rad = Math.atan2(pos[1] - cy, pos[0] - cx);
	                    if (rad < 0) {
	                        rad = Math.PI * 2 + rad;
	                    }
	                    var isLeft = pos[0] < cx;
	                    if (isLeft) {
	                        rad = rad - Math.PI;
	                    }
	                    var textPosition = isLeft ? 'left' : 'right';
	                    symbolPath.setStyle({
	                        textRotation: rad,
	                        textPosition: textPosition
	                    });
	                    symbolPath.hoverStyle && (symbolPath.hoverStyle.textPosition = textPosition);
	                }
	                else {
	                    symbolPath.setStyle({
	                        textRotation: 0
	                    });
	                }
	            });

	            this._firstRender = false;
	        },

	        dispose: function () {
	            this._controller && this._controller.dispose();
	        },

	        focusNodeAdjacency: function (seriesModel, ecModel, api, payload) {
	            var data = this._model.getData();
	            var dataIndex = payload.dataIndex;
	            var el = data.getItemGraphicEl(dataIndex);

	            if (!el) {
	                return;
	            }

	            var graph = data.graph;
	            var dataType = el.dataType;

	            function fadeOutItem(item, opacityPath) {
	                var opacity = getItemOpacity(item, opacityPath);
	                var el = item.getGraphicEl();
	                if (opacity == null) {
	                    opacity = 1;
	                }

	                el.traverse(function (child) {
	                    child.trigger('normal');
	                    if (child.type !== 'group') {
	                        child.setStyle('opacity', opacity * 0.1);
	                    }
	                });
	            }

	            function fadeInItem(item, opacityPath) {
	                var opacity = getItemOpacity(item, opacityPath);
	                var el = item.getGraphicEl();

	                el.traverse(function (child) {
	                    child.trigger('emphasis');
	                    if (child.type !== 'group') {
	                        child.setStyle('opacity', opacity);
	                    }
	                });
	            }
	            if (dataIndex !== null && dataType !== 'edge') {
	                graph.eachNode(function (node) {
	                    fadeOutItem(node, nodeOpacityPath);
	                });
	                graph.eachEdge(function (edge) {
	                    fadeOutItem(edge, lineOpacityPath);
	                });

	                var node = graph.getNodeByIndex(dataIndex);
	                fadeInItem(node, nodeOpacityPath);
	                zrUtil.each(node.edges, function (edge) {
	                    if (edge.dataIndex < 0) {
	                        return;
	                    }
	                    fadeInItem(edge, lineOpacityPath);
	                    fadeInItem(edge.node1, nodeOpacityPath);
	                    fadeInItem(edge.node2, nodeOpacityPath);
	                });
	            }
	        },

	        unfocusNodeAdjacency: function (seriesModel, ecModel, api, payload) {
	            var graph = this._model.getData().graph;
	            graph.eachNode(function (node) {
	                var opacity = getItemOpacity(node, nodeOpacityPath);
	                node.getGraphicEl().traverse(function (child) {
	                    child.trigger('normal');
	                    if (child.type !== 'group') {
	                        child.setStyle('opacity', opacity);
	                    }
	                });
	            });
	            graph.eachEdge(function (edge) {
	                var opacity = getItemOpacity(edge, lineOpacityPath);
	                edge.getGraphicEl().traverse(function (child) {
	                    child.trigger('normal');
	                    if (child.type !== 'group') {
	                        child.setStyle('opacity', opacity);
	                    }
	                });
	            });
	        },

	        _startForceLayoutIteration: function (forceLayout, layoutAnimation) {
	            var self = this;
	            (function step() {
	                forceLayout.step(function (stopped) {
	                    self.updateLayout(self._model);
	                    (self._layouting = !stopped) && (
	                        layoutAnimation
	                            ? (self._layoutTimeout = setTimeout(step, 16))
	                            : step()
	                    );
	                });
	            })();
	        },

	        _updateController: function (seriesModel, api) {
	            var controller = this._controller;
	            var group = this.group;

	            controller.setContainsPoint(function (x, y) {
	                var rect = group.getBoundingRect();
	                rect.applyTransform(group.transform);
	                return rect.contain(x, y);
	            });

	            if (seriesModel.coordinateSystem.type !== 'view') {
	                controller.disable();
	                return;
	            }
	            controller.enable(seriesModel.get('roam'));
	            controller.zoomLimit = seriesModel.get('scaleLimit');
	            // Update zoom from model
	            controller.zoom = seriesModel.coordinateSystem.getZoom();

	            controller
	                .off('pan')
	                .off('zoom')
	                .on('pan', function (dx, dy) {
	                    api.dispatchAction({
	                        seriesId: seriesModel.id,
	                        type: 'graphRoam',
	                        dx: dx,
	                        dy: dy
	                    });
	                })
	                .on('zoom', function (zoom, mouseX, mouseY) {
	                    api.dispatchAction({
	                        seriesId: seriesModel.id,
	                        type: 'graphRoam',
	                        zoom:  zoom,
	                        originX: mouseX,
	                        originY: mouseY
	                    });
	                    this._updateNodeAndLinkScale();
	                    adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));
	                    this._lineDraw.updateLayout();
	                }, this);
	        },

	        _updateNodeAndLinkScale: function () {
	            var seriesModel = this._model;
	            var data = seriesModel.getData();

	            var nodeScale = this._getNodeGlobalScale(seriesModel);
	            var invScale = [nodeScale, nodeScale];

	            data.eachItemGraphicEl(function (el, idx) {
	                el.attr('scale', invScale);
	            });
	        },

	        _getNodeGlobalScale: function (seriesModel) {
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys.type !== 'view') {
	                return 1;
	            }

	            var nodeScaleRatio = this._nodeScaleRatio;

	            var groupScale = coordSys.scale;
	            var groupZoom = (groupScale && groupScale[0]) || 1;
	            // Scale node when zoom changes
	            var roamZoom = coordSys.getZoom();
	            var nodeScale = (roamZoom - 1) * nodeScaleRatio + 1;

	            return nodeScale / groupZoom;
	        },

	        updateLayout: function (seriesModel) {
	            adjustEdge(seriesModel.getGraph(), this._getNodeGlobalScale(seriesModel));

	            this._symbolDraw.updateLayout();
	            this._lineDraw.updateLayout();
	        },

	        remove: function (ecModel, api) {
	            this._symbolDraw && this._symbolDraw.remove();
	            this._lineDraw && this._lineDraw.remove();
	        }
	    });


/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/LineDraw
	 */


	    var graphic = __webpack_require__(282);
	    var LineGroup = __webpack_require__(442);


	    function isPointNaN(pt) {
	        return isNaN(pt[0]) || isNaN(pt[1]);
	    }
	    function lineNeedsDraw(pts) {
	        return !isPointNaN(pts[0]) && !isPointNaN(pts[1]);
	    }
	    /**
	     * @alias module:echarts/component/marker/LineDraw
	     * @constructor
	     */
	    function LineDraw(ctor) {
	        this._ctor = ctor || LineGroup;
	        this.group = new graphic.Group();
	    }

	    var lineDrawProto = LineDraw.prototype;

	    /**
	     * @param {module:echarts/data/List} lineData
	     */
	    lineDrawProto.updateData = function (lineData) {

	        var oldLineData = this._lineData;
	        var group = this.group;
	        var LineCtor = this._ctor;

	        var hostModel = lineData.hostModel;

	        var seriesScope = {
	            lineStyle: hostModel.getModel('lineStyle.normal').getLineStyle(),
	            hoverLineStyle: hostModel.getModel('lineStyle.emphasis').getLineStyle(),
	            labelModel: hostModel.getModel('label.normal'),
	            hoverLabelModel: hostModel.getModel('label.emphasis')
	        };

	        lineData.diff(oldLineData)
	            .add(function (idx) {
	                if (!lineNeedsDraw(lineData.getItemLayout(idx))) {
	                    return;
	                }
	                var lineGroup = new LineCtor(lineData, idx, seriesScope);

	                lineData.setItemGraphicEl(idx, lineGroup);

	                group.add(lineGroup);
	            })
	            .update(function (newIdx, oldIdx) {
	                var lineGroup = oldLineData.getItemGraphicEl(oldIdx);
	                if (!lineNeedsDraw(lineData.getItemLayout(newIdx))) {
	                    group.remove(lineGroup);
	                    return;
	                }

	                if (!lineGroup) {
	                    lineGroup = new LineCtor(lineData, newIdx, seriesScope);
	                }
	                else {
	                    lineGroup.updateData(lineData, newIdx, seriesScope);
	                }

	                lineData.setItemGraphicEl(newIdx, lineGroup);

	                group.add(lineGroup);
	            })
	            .remove(function (idx) {
	                group.remove(oldLineData.getItemGraphicEl(idx));
	            })
	            .execute();

	        this._lineData = lineData;
	    };

	    lineDrawProto.updateLayout = function () {
	        var lineData = this._lineData;
	        lineData.eachItemGraphicEl(function (el, idx) {
	            el.updateLayout(lineData, idx);
	        }, this);
	    };

	    lineDrawProto.remove = function () {
	        this.group.removeAll();
	    };

	    module.exports = LineDraw;


/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/Line
	 */


	    var symbolUtil = __webpack_require__(346);
	    var vector = __webpack_require__(249);
	    // var matrix = require('zrender/lib/core/matrix');
	    var LinePath = __webpack_require__(443);
	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);

	    var SYMBOL_CATEGORIES = ['fromSymbol', 'toSymbol'];
	    function makeSymbolTypeKey(symbolCategory) {
	        return '_' + symbolCategory + 'Type';
	    }
	    /**
	     * @inner
	     */
	    function createSymbol(name, lineData, idx) {
	        var color = lineData.getItemVisual(idx, 'color');
	        var symbolType = lineData.getItemVisual(idx, name);
	        var symbolSize = lineData.getItemVisual(idx, name + 'Size');

	        if (!symbolType || symbolType === 'none') {
	            return;
	        }

	        if (!zrUtil.isArray(symbolSize)) {
	            symbolSize = [symbolSize, symbolSize];
	        }
	        var symbolPath = symbolUtil.createSymbol(
	            symbolType, -symbolSize[0] / 2, -symbolSize[1] / 2,
	            symbolSize[0], symbolSize[1], color
	        );

	        symbolPath.name = name;

	        return symbolPath;
	    }

	    function createLine(points) {
	        var line = new LinePath({
	            name: 'line'
	        });
	        setLinePoints(line.shape, points);
	        return line;
	    }

	    function setLinePoints(targetShape, points) {
	        var p1 = points[0];
	        var p2 = points[1];
	        var cp1 = points[2];
	        targetShape.x1 = p1[0];
	        targetShape.y1 = p1[1];
	        targetShape.x2 = p2[0];
	        targetShape.y2 = p2[1];
	        targetShape.percent = 1;

	        if (cp1) {
	            targetShape.cpx1 = cp1[0];
	            targetShape.cpy1 = cp1[1];
	        }
	        else {
	            targetShape.cpx1 = NaN;
	            targetShape.cpy1 = NaN;
	        }
	    }

	    function updateSymbolAndLabelBeforeLineUpdate () {
	        var lineGroup = this;
	        var symbolFrom = lineGroup.childOfName('fromSymbol');
	        var symbolTo = lineGroup.childOfName('toSymbol');
	        var label = lineGroup.childOfName('label');
	        // Quick reject
	        if (!symbolFrom && !symbolTo && label.ignore) {
	            return;
	        }

	        var invScale = 1;
	        var parentNode = this.parent;
	        while (parentNode) {
	            if (parentNode.scale) {
	                invScale /= parentNode.scale[0];
	            }
	            parentNode = parentNode.parent;
	        }

	        var line = lineGroup.childOfName('line');
	        // If line not changed
	        // FIXME Parent scale changed
	        if (!this.__dirty && !line.__dirty) {
	            return;
	        }

	        var percent = line.shape.percent;
	        var fromPos = line.pointAt(0);
	        var toPos = line.pointAt(percent);

	        var d = vector.sub([], toPos, fromPos);
	        vector.normalize(d, d);

	        if (symbolFrom) {
	            symbolFrom.attr('position', fromPos);
	            var tangent = line.tangentAt(0);
	            symbolFrom.attr('rotation', Math.PI / 2 - Math.atan2(
	                tangent[1], tangent[0]
	            ));
	            symbolFrom.attr('scale', [invScale * percent, invScale * percent]);
	        }
	        if (symbolTo) {
	            symbolTo.attr('position', toPos);
	            var tangent = line.tangentAt(1);
	            symbolTo.attr('rotation', -Math.PI / 2 - Math.atan2(
	                tangent[1], tangent[0]
	            ));
	            symbolTo.attr('scale', [invScale * percent, invScale * percent]);
	        }

	        if (!label.ignore) {
	            label.attr('position', toPos);

	            var textPosition;
	            var textAlign;
	            var textVerticalAlign;

	            var distance = 5 * invScale;
	            // End
	            if (label.__position === 'end') {
	                textPosition = [d[0] * distance + toPos[0], d[1] * distance + toPos[1]];
	                textAlign = d[0] > 0.8 ? 'left' : (d[0] < -0.8 ? 'right' : 'center');
	                textVerticalAlign = d[1] > 0.8 ? 'top' : (d[1] < -0.8 ? 'bottom' : 'middle');
	            }
	            // Middle
	            else if (label.__position === 'middle') {
	                var halfPercent = percent / 2;
	                var tangent = line.tangentAt(halfPercent);
	                var n = [tangent[1], -tangent[0]];
	                var cp = line.pointAt(halfPercent);
	                if (n[1] > 0) {
	                    n[0] = -n[0];
	                    n[1] = -n[1];
	                }
	                textPosition = [cp[0] + n[0] * distance, cp[1] + n[1] * distance];
	                textAlign = 'center';
	                textVerticalAlign = 'bottom';
	                var rotation = -Math.atan2(tangent[1], tangent[0]);
	                if (toPos[0] < fromPos[0]) {
	                    rotation = Math.PI + rotation;
	                }
	                label.attr('rotation', rotation);
	            }
	            // Start
	            else {
	                textPosition = [-d[0] * distance + fromPos[0], -d[1] * distance + fromPos[1]];
	                textAlign = d[0] > 0.8 ? 'right' : (d[0] < -0.8 ? 'left' : 'center');
	                textVerticalAlign = d[1] > 0.8 ? 'bottom' : (d[1] < -0.8 ? 'top' : 'middle');
	            }
	            label.attr({
	                style: {
	                    // Use the user specified text align and baseline first
	                    textVerticalAlign: label.__verticalAlign || textVerticalAlign,
	                    textAlign: label.__textAlign || textAlign
	                },
	                position: textPosition,
	                scale: [invScale, invScale]
	            });
	        }
	    }

	    /**
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     * @alias {module:echarts/chart/helper/Line}
	     */
	    function Line(lineData, idx, seriesScope) {
	        graphic.Group.call(this);

	        this._createLine(lineData, idx, seriesScope);
	    }

	    var lineProto = Line.prototype;

	    // Update symbol position and rotation
	    lineProto.beforeUpdate = updateSymbolAndLabelBeforeLineUpdate;

	    lineProto._createLine = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;
	        var linePoints = lineData.getItemLayout(idx);

	        var line = createLine(linePoints);
	        line.shape.percent = 0;
	        graphic.initProps(line, {
	            shape: {
	                percent: 1
	            }
	        }, seriesModel, idx);

	        this.add(line);

	        var label = new graphic.Text({
	            name: 'label'
	        });
	        this.add(label);

	        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	            var symbol = createSymbol(symbolCategory, lineData, idx);
	            // symbols must added after line to make sure
	            // it will be updated after line#update.
	            // Or symbol position and rotation update in line#beforeUpdate will be one frame slow
	            this.add(symbol);
	            this[makeSymbolTypeKey(symbolCategory)] = lineData.getItemVisual(idx, symbolCategory);
	        }, this);

	        this._updateCommonStl(lineData, idx, seriesScope);
	    };

	    lineProto.updateData = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;

	        var line = this.childOfName('line');
	        var linePoints = lineData.getItemLayout(idx);
	        var target = {
	            shape: {}
	        };
	        setLinePoints(target.shape, linePoints);
	        graphic.updateProps(line, target, seriesModel, idx);

	        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	            var symbolType = lineData.getItemVisual(idx, symbolCategory);
	            var key = makeSymbolTypeKey(symbolCategory);
	            // Symbol changed
	            if (this[key] !== symbolType) {
	                this.remove(this.childOfName(symbolCategory));
	                var symbol = createSymbol(symbolCategory, lineData, idx);
	                this.add(symbol);
	            }
	            this[key] = symbolType;
	        }, this);

	        this._updateCommonStl(lineData, idx, seriesScope);
	    };

	    lineProto._updateCommonStl = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;

	        var line = this.childOfName('line');

	        var lineStyle = seriesScope && seriesScope.lineStyle;
	        var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;
	        var labelModel = seriesScope && seriesScope.labelModel;
	        var hoverLabelModel = seriesScope && seriesScope.hoverLabelModel;

	        // Optimization for large dataset
	        if (!seriesScope || lineData.hasItemOption) {
	            var itemModel = lineData.getItemModel(idx);

	            lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	            hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();

	            labelModel = itemModel.getModel('label.normal');
	            hoverLabelModel = itemModel.getModel('label.emphasis');
	        }

	        var visualColor = lineData.getItemVisual(idx, 'color');
	        var visualOpacity = zrUtil.retrieve(
	            lineData.getItemVisual(idx, 'opacity'),
	            lineStyle.opacity,
	            1
	        );

	        line.useStyle(zrUtil.defaults(
	            {
	                strokeNoScale: true,
	                fill: 'none',
	                stroke: visualColor,
	                opacity: visualOpacity
	            },
	            lineStyle
	        ));
	        line.hoverStyle = hoverLineStyle;

	        // Update symbol
	        zrUtil.each(SYMBOL_CATEGORIES, function (symbolCategory) {
	            var symbol = this.childOfName(symbolCategory);
	            if (symbol) {
	                symbol.setColor(visualColor);
	                symbol.setStyle({
	                    opacity: visualOpacity
	                });
	            }
	        }, this);

	        var showLabel = labelModel.getShallow('show');
	        var hoverShowLabel = hoverLabelModel.getShallow('show');

	        var label = this.childOfName('label');
	        var defaultLabelColor;
	        var defaultText;

	        if (showLabel || hoverShowLabel) {
	            var rawVal = seriesModel.getRawValue(idx);
	            defaultText = rawVal == null
	                ? defaultText = lineData.getName(idx)
	                : isFinite(rawVal)
	                ? numberUtil.round(rawVal)
	                : rawVal;
	            defaultLabelColor = visualColor || '#000';
	        }

	        // label.afterUpdate = lineAfterUpdate;
	        if (showLabel) {
	            var textStyleModel = labelModel.getModel('textStyle');
	            label.setStyle({
	                text: zrUtil.retrieve(
	                    seriesModel.getFormattedLabel(idx, 'normal', lineData.dataType),
	                    defaultText
	                ),
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor() || defaultLabelColor
	            });

	            label.__textAlign = textStyleModel.get('align');
	            label.__verticalAlign = textStyleModel.get('baseline');
	            label.__position = labelModel.get('position');
	        }
	        else {
	            label.setStyle('text', '');
	        }
	        if (hoverShowLabel) {
	            var textStyleHoverModel = hoverLabelModel.getModel('textStyle');

	            label.hoverStyle = {
	                text: zrUtil.retrieve(
	                    seriesModel.getFormattedLabel(idx, 'emphasis', lineData.dataType),
	                    defaultText
	                ),
	                textFont: textStyleHoverModel.getFont(),
	                fill: textStyleHoverModel.getTextColor() || defaultLabelColor
	            };
	        }
	        else {
	            label.hoverStyle = {
	                text: ''
	            };
	        }

	        label.ignore = !showLabel && !hoverShowLabel;

	        graphic.setHoverStyle(this);
	    };

	    lineProto.updateLayout = function (lineData, idx) {
	        this.setLinePoints(lineData.getItemLayout(idx));
	    };

	    lineProto.setLinePoints = function (points) {
	        var linePath = this.childOfName('line');
	        setLinePoints(linePath.shape, points);
	        linePath.dirty();
	    };

	    zrUtil.inherits(Line, graphic.Group);

	    module.exports = Line;


/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Line path for bezier and straight line draw
	 */

	    var graphic = __webpack_require__(282);
	    var vec2 = __webpack_require__(249);

	    var straightLineProto = graphic.Line.prototype;
	    var bezierCurveProto = graphic.BezierCurve.prototype;

	    function isLine(shape) {
	        return isNaN(+shape.cpx1) || isNaN(+shape.cpy1);
	    }

	    module.exports = graphic.extendShape({

	        type: 'ec-line',

	        style: {
	            stroke: '#000',
	            fill: null
	        },

	        shape: {
	            x1: 0,
	            y1: 0,
	            x2: 0,
	            y2: 0,
	            percent: 1,
	            cpx1: null,
	            cpy1: null
	        },

	        buildPath: function (ctx, shape) {
	            (isLine(shape) ? straightLineProto : bezierCurveProto).buildPath(ctx, shape);
	        },

	        pointAt: function (t) {
	            return isLine(this.shape)
	                ? straightLineProto.pointAt.call(this, t)
	                : bezierCurveProto.pointAt.call(this, t);
	        },

	        tangentAt: function (t) {
	            var shape = this.shape;
	            var p = isLine(shape)
	                ? [shape.x2 - shape.x1, shape.y2 - shape.y1]
	                : bezierCurveProto.tangentAt.call(this, t);
	            return vec2.normalize(p, p);
	        }
	    });


/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	

	    var curveTool = __webpack_require__(289);
	    var vec2 = __webpack_require__(249);

	    var v1 = [];
	    var v2 = [];
	    var v3 = [];
	    var quadraticAt = curveTool.quadraticAt;
	    var v2DistSquare = vec2.distSquare;
	    var mathAbs = Math.abs;
	    function intersectCurveCircle(curvePoints, center, radius) {
	        var p0 = curvePoints[0];
	        var p1 = curvePoints[1];
	        var p2 = curvePoints[2];

	        var d = Infinity;
	        var t;
	        var radiusSquare = radius * radius;
	        var interval = 0.1;

	        for (var _t = 0.1; _t <= 0.9; _t += 0.1) {
	            v1[0] = quadraticAt(p0[0], p1[0], p2[0], _t);
	            v1[1] = quadraticAt(p0[1], p1[1], p2[1], _t);
	            var diff = mathAbs(v2DistSquare(v1, center) - radiusSquare);
	            if (diff < d) {
	                d = diff;
	                t = _t;
	            }
	        }

	        // Assume the segment is monotone，Find root through Bisection method
	        // At most 32 iteration
	        for (var i = 0; i < 32; i++) {
	            // var prev = t - interval;
	            var next = t + interval;
	            // v1[0] = quadraticAt(p0[0], p1[0], p2[0], prev);
	            // v1[1] = quadraticAt(p0[1], p1[1], p2[1], prev);
	            v2[0] = quadraticAt(p0[0], p1[0], p2[0], t);
	            v2[1] = quadraticAt(p0[1], p1[1], p2[1], t);
	            v3[0] = quadraticAt(p0[0], p1[0], p2[0], next);
	            v3[1] = quadraticAt(p0[1], p1[1], p2[1], next);

	            var diff = v2DistSquare(v2, center) - radiusSquare;
	            if (mathAbs(diff) < 1e-2) {
	                break;
	            }

	            // var prevDiff = v2DistSquare(v1, center) - radiusSquare;
	            var nextDiff = v2DistSquare(v3, center) - radiusSquare;

	            interval /= 2;
	            if (diff < 0) {
	                if (nextDiff >= 0) {
	                    t = t + interval;
	                }
	                else {
	                    t = t - interval;
	                }
	            }
	            else {
	                if (nextDiff >= 0) {
	                    t = t - interval;
	                }
	                else {
	                    t = t + interval;
	                }
	            }
	        }

	        return t;
	    }
	    // Adjust edge to avoid
	    module.exports = function (graph, scale) {
	        var tmp0 = [];
	        var quadraticSubdivide = curveTool.quadraticSubdivide;
	        var pts = [[], [], []];
	        var pts2 = [[], []];
	        var v = [];
	        scale /= 2;

	        function getSymbolSize(node) {
	            var symbolSize = node.getVisual('symbolSize');
	            if (symbolSize instanceof Array) {
	                symbolSize = (symbolSize[0] + symbolSize[1]) / 2;
	            }
	            return symbolSize;
	        }
	        graph.eachEdge(function (edge, idx) {
	            var linePoints = edge.getLayout();
	            var fromSymbol = edge.getVisual('fromSymbol');
	            var toSymbol = edge.getVisual('toSymbol');

	            if (!linePoints.__original) {
	                linePoints.__original = [
	                    vec2.clone(linePoints[0]),
	                    vec2.clone(linePoints[1])
	                ];
	                if (linePoints[2]) {
	                    linePoints.__original.push(vec2.clone(linePoints[2]));
	                }
	            }
	            var originalPoints = linePoints.__original;
	            // Quadratic curve
	            if (linePoints[2] != null) {
	                vec2.copy(pts[0], originalPoints[0]);
	                vec2.copy(pts[1], originalPoints[2]);
	                vec2.copy(pts[2], originalPoints[1]);
	                if (fromSymbol && fromSymbol != 'none') {
	                    var symbolSize = getSymbolSize(edge.node1);

	                    var t = intersectCurveCircle(pts, originalPoints[0], symbolSize * scale);
	                    // Subdivide and get the second
	                    quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
	                    pts[0][0] = tmp0[3];
	                    pts[1][0] = tmp0[4];
	                    quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
	                    pts[0][1] = tmp0[3];
	                    pts[1][1] = tmp0[4];
	                }
	                if (toSymbol && toSymbol != 'none') {
	                    var symbolSize = getSymbolSize(edge.node2);

	                    var t = intersectCurveCircle(pts, originalPoints[1], symbolSize * scale);
	                    // Subdivide and get the first
	                    quadraticSubdivide(pts[0][0], pts[1][0], pts[2][0], t, tmp0);
	                    pts[1][0] = tmp0[1];
	                    pts[2][0] = tmp0[2];
	                    quadraticSubdivide(pts[0][1], pts[1][1], pts[2][1], t, tmp0);
	                    pts[1][1] = tmp0[1];
	                    pts[2][1] = tmp0[2];
	                }
	                // Copy back to layout
	                vec2.copy(linePoints[0], pts[0]);
	                vec2.copy(linePoints[1], pts[2]);
	                vec2.copy(linePoints[2], pts[1]);
	            }
	            // Line
	            else {
	                vec2.copy(pts2[0], originalPoints[0]);
	                vec2.copy(pts2[1], originalPoints[1]);

	                vec2.sub(v, pts2[1], pts2[0]);
	                vec2.normalize(v, v);
	                if (fromSymbol && fromSymbol != 'none') {

	                    var symbolSize = getSymbolSize(edge.node1);

	                    vec2.scaleAndAdd(pts2[0], pts2[0], v, symbolSize * scale);
	                }
	                if (toSymbol && toSymbol != 'none') {
	                    var symbolSize = getSymbolSize(edge.node2);

	                    vec2.scaleAndAdd(pts2[1], pts2[1], v, -symbolSize * scale);
	                }
	                vec2.copy(linePoints[0], pts2[0]);
	                vec2.copy(linePoints[1], pts2[1]);
	            }
	        });
	    };


/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);
	    var roamHelper = __webpack_require__(419);

	    var actionInfo = {
	        type: 'graphRoam',
	        event: 'graphRoam',
	        update: 'none'
	    };

	    /**
	     * @payload
	     * @property {string} name Series name
	     * @property {number} [dx]
	     * @property {number} [dy]
	     * @property {number} [zoom]
	     * @property {number} [originX]
	     * @property {number} [originY]
	     */
	    echarts.registerAction(actionInfo, function (payload, ecModel) {
	        ecModel.eachComponent({mainType: 'series', query: payload}, function (seriesModel) {
	            var coordSys = seriesModel.coordinateSystem;

	            var res = roamHelper.updateCenterAndZoom(coordSys, payload);

	            seriesModel.setCenter
	                && seriesModel.setCenter(res.center);

	            seriesModel.setZoom
	                && seriesModel.setZoom(res.zoom);
	        });
	    });


	    /**
	     * @payload
	     * @property {number} [seriesIndex]
	     * @property {string} [seriesId]
	     * @property {string} [seriesName]
	     * @property {number} [dataIndex]
	     */
	    echarts.registerAction({
	        type: 'focusNodeAdjacency',
	        event: 'focusNodeAdjacency',
	        update: 'series.graph:focusNodeAdjacency'
	    }, function () {});

	    /**
	     * @payload
	     * @property {number} [seriesIndex]
	     * @property {string} [seriesId]
	     * @property {string} [seriesName]
	     */
	    echarts.registerAction({
	        type: 'unfocusNodeAdjacency',
	        event: 'unfocusNodeAdjacency',
	        update: 'series.graph:unfocusNodeAdjacency'
	    }, function () {});



/***/ },
/* 446 */
/***/ function(module, exports) {

	

	    module.exports = function (ecModel) {
	        var legendModels = ecModel.findComponents({
	            mainType: 'legend'
	        });
	        if (!legendModels || !legendModels.length) {
	            return;
	        }
	        ecModel.eachSeriesByType('graph', function (graphSeries) {
	            var categoriesData = graphSeries.getCategoriesData();
	            var graph = graphSeries.getGraph();
	            var data = graph.data;

	            var categoryNames = categoriesData.mapArray(categoriesData.getName);

	            data.filterSelf(function (idx) {
	                var model = data.getItemModel(idx);
	                var category = model.getShallow('category');
	                if (category != null) {
	                    if (typeof category === 'number') {
	                        category = categoryNames[category];
	                    }
	                    // If in any legend component the status is not selected.
	                    for (var i = 0; i < legendModels.length; i++) {
	                        if (!legendModels[i].isSelected(category)) {
	                            return false;
	                        }
	                    }
	                }
	                return true;
	            });
	        }, this);
	    };


/***/ },
/* 447 */
/***/ function(module, exports) {

	

	    module.exports = function (ecModel) {

	        var paletteScope = {};
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            var categoriesData = seriesModel.getCategoriesData();
	            var data = seriesModel.getData();

	            var categoryNameIdxMap = {};

	            categoriesData.each(function (idx) {
	                var name = categoriesData.getName(idx);
	                categoryNameIdxMap[name] = idx;

	                var itemModel = categoriesData.getItemModel(idx);
	                var color = itemModel.get('itemStyle.normal.color')
	                    || seriesModel.getColorFromPalette(name, paletteScope);
	                categoriesData.setItemVisual(idx, 'color', color);
	            });

	            // Assign category color to visual
	            if (categoriesData.count()) {
	                data.each(function (idx) {
	                    var model = data.getItemModel(idx);
	                    var category = model.getShallow('category');
	                    if (category != null) {
	                        if (typeof category === 'string') {
	                            category = categoryNameIdxMap[category];
	                        }
	                        if (!data.getItemVisual(idx, 'color', true)) {
	                            data.setItemVisual(
	                                idx, 'color',
	                                categoriesData.getItemVisual(category, 'color')
	                            );
	                        }
	                    }
	                });
	            }
	        });
	    };


/***/ },
/* 448 */
/***/ function(module, exports) {

	

	    function normalize(a) {
	        if (!(a instanceof Array)) {
	            a = [a, a];
	        }
	        return a;
	    }
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            var graph = seriesModel.getGraph();
	            var edgeData = seriesModel.getEdgeData();
	            var symbolType = normalize(seriesModel.get('edgeSymbol'));
	            var symbolSize = normalize(seriesModel.get('edgeSymbolSize'));

	            var colorQuery = 'lineStyle.normal.color'.split('.');
	            var opacityQuery = 'lineStyle.normal.opacity'.split('.');

	            edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);
	            edgeData.setVisual('toSymbol', symbolType && symbolType[1]);
	            edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);
	            edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);
	            edgeData.setVisual('color', seriesModel.get(colorQuery));
	            edgeData.setVisual('opacity', seriesModel.get(opacityQuery));

	            edgeData.each(function (idx) {
	                var itemModel = edgeData.getItemModel(idx);
	                var edge = graph.getEdgeByIndex(idx);
	                var symbolType = normalize(itemModel.getShallow('symbol', true));
	                var symbolSize = normalize(itemModel.getShallow('symbolSize', true));
	                // Edge visual must after node visual
	                var color = itemModel.get(colorQuery);
	                var opacity = itemModel.get(opacityQuery);
	                switch (color) {
	                    case 'source':
	                        color = edge.node1.getVisual('color');
	                        break;
	                    case 'target':
	                        color = edge.node2.getVisual('color');
	                        break;
	                }

	                symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);
	                symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);
	                symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);
	                symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);

	                edge.setVisual('color', color);
	                edge.setVisual('opacity', opacity);
	            });
	        });
	    };


/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	

	    var simpleLayoutHelper = __webpack_require__(450);
	    var simpleLayoutEdge = __webpack_require__(451);
	    module.exports = function (ecModel, api) {
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            var layout = seriesModel.get('layout');
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys && coordSys.type !== 'view') {
	                var data = seriesModel.getData();
	                data.each(coordSys.dimensions, function (x, y, idx) {
	                    if (!isNaN(x) && !isNaN(y)) {
	                        data.setItemLayout(idx, coordSys.dataToPoint([x, y]));
	                    }
	                    else {
	                        // Also {Array.<number>}, not undefined to avoid if...else... statement
	                        data.setItemLayout(idx, [NaN, NaN]);
	                    }
	                });

	                simpleLayoutEdge(data.graph);
	            }
	            else if (!layout || layout === 'none') {
	                simpleLayoutHelper(seriesModel);
	            }
	        });
	    };


/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	

	    var simpleLayoutEdge = __webpack_require__(451);

	    module.exports = function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys && coordSys.type !== 'view') {
	            return;
	        }
	        var graph = seriesModel.getGraph();

	        graph.eachNode(function (node) {
	            var model = node.getModel();
	            node.setLayout([+model.get('x'), +model.get('y')]);
	        });

	        simpleLayoutEdge(graph);
	    };


/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	
	    var vec2 = __webpack_require__(249);
	    module.exports = function (graph) {
	        graph.eachEdge(function (edge) {
	            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	            var p1 = vec2.clone(edge.node1.getLayout());
	            var p2 = vec2.clone(edge.node2.getLayout());
	            var points = [p1, p2];
	            if (+curveness) {
	                points.push([
	                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness,
	                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness
	                ]);
	            }
	            edge.setLayout(points);
	        });
	    };


/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	
	    var circularLayoutHelper = __webpack_require__(453);
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            if (seriesModel.get('layout') === 'circular') {
	                circularLayoutHelper(seriesModel);
	            }
	        });
	    };


/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	
	    var vec2 = __webpack_require__(249);
	    module.exports = function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys && coordSys.type !== 'view') {
	            return;
	        }

	        var rect = coordSys.getBoundingRect();

	        var nodeData = seriesModel.getData();
	        var graph = nodeData.graph;

	        var angle = 0;
	        var sum = nodeData.getSum('value');
	        var unitAngle = Math.PI * 2 / (sum || nodeData.count());

	        var cx = rect.width / 2 + rect.x;
	        var cy = rect.height / 2 + rect.y;

	        var r = Math.min(rect.width, rect.height) / 2;

	        graph.eachNode(function (node) {
	            var value = node.getValue('value');

	            angle += unitAngle * (sum ? value : 1) / 2;

	            node.setLayout([
	                r * Math.cos(angle) + cx,
	                r * Math.sin(angle) + cy
	            ]);

	            angle += unitAngle * (sum ? value : 1) / 2;
	        });

	        nodeData.setLayout({
	            cx: cx,
	            cy: cy
	        });

	        graph.eachEdge(function (edge) {
	            var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	            var p1 = vec2.clone(edge.node1.getLayout());
	            var p2 = vec2.clone(edge.node2.getLayout());
	            var cp1;
	            var x12 = (p1[0] + p2[0]) / 2;
	            var y12 = (p1[1] + p2[1]) / 2;
	            if (+curveness) {
	                curveness *= 3;
	                cp1 = [
	                    cx * curveness + x12 * (1 - curveness),
	                    cy * curveness + y12 * (1 - curveness)
	                ];
	            }
	            edge.setLayout([p1, p2, cp1]);
	        });
	    };


/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	

	    var forceHelper = __webpack_require__(455);
	    var numberUtil = __webpack_require__(246);
	    var simpleLayoutHelper = __webpack_require__(450);
	    var circularLayoutHelper = __webpack_require__(453);
	    var vec2 = __webpack_require__(249);
	    var zrUtil = __webpack_require__(243);

	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('graph', function (graphSeries) {
	            var coordSys = graphSeries.coordinateSystem;
	            if (coordSys && coordSys.type !== 'view') {
	                return;
	            }
	            if (graphSeries.get('layout') === 'force') {
	                var preservedPoints = graphSeries.preservedPoints || {};
	                var graph = graphSeries.getGraph();
	                var nodeData = graph.data;
	                var edgeData = graph.edgeData;
	                var forceModel = graphSeries.getModel('force');
	                var initLayout = forceModel.get('initLayout');
	                if (graphSeries.preservedPoints) {
	                    nodeData.each(function (idx) {
	                        var id = nodeData.getId(idx);
	                        nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);
	                    });
	                }
	                else if (!initLayout || initLayout === 'none') {
	                    simpleLayoutHelper(graphSeries);
	                }
	                else if (initLayout === 'circular') {
	                    circularLayoutHelper(graphSeries);
	                }

	                var nodeDataExtent = nodeData.getDataExtent('value');
	                var edgeDataExtent = edgeData.getDataExtent('value');
	                // var edgeDataExtent = edgeData.getDataExtent('value');
	                var repulsion = forceModel.get('repulsion');
	                var edgeLength = forceModel.get('edgeLength');
	                if (!zrUtil.isArray(repulsion)) {
	                    repulsion = [repulsion, repulsion];
	                }
	                if (!zrUtil.isArray(edgeLength)) {
	                    edgeLength = [edgeLength, edgeLength];
	                }
	                // Larger value has smaller length
	                edgeLength = [edgeLength[1], edgeLength[0]];

	                var nodes = nodeData.mapArray('value', function (value, idx) {
	                    var point = nodeData.getItemLayout(idx);
	                    // var w = numberUtil.linearMap(value, nodeDataExtent, [0, 50]);
	                    var rep = numberUtil.linearMap(value, nodeDataExtent, repulsion);
	                    if (isNaN(rep)) {
	                        rep = (repulsion[0] + repulsion[1]) / 2;
	                    }
	                    return {
	                        w: rep,
	                        rep: rep,
	                        p: (!point || isNaN(point[0]) || isNaN(point[1])) ? null : point
	                    };
	                });
	                var edges = edgeData.mapArray('value', function (value, idx) {
	                    var edge = graph.getEdgeByIndex(idx);
	                    var d = numberUtil.linearMap(value, edgeDataExtent, edgeLength);
	                    if (isNaN(d)) {
	                        d = (edgeLength[0] + edgeLength[1]) / 2;
	                    }
	                    return {
	                        n1: nodes[edge.node1.dataIndex],
	                        n2: nodes[edge.node2.dataIndex],
	                        d: d,
	                        curveness: edge.getModel().get('lineStyle.normal.curveness') || 0
	                    };
	                });

	                var coordSys = graphSeries.coordinateSystem;
	                var rect = coordSys.getBoundingRect();
	                var forceInstance = forceHelper(nodes, edges, {
	                    rect: rect,
	                    gravity: forceModel.get('gravity')
	                });
	                var oldStep = forceInstance.step;
	                forceInstance.step = function (cb) {
	                    for (var i = 0, l = nodes.length; i < l; i++) {
	                        if (nodes[i].fixed) {
	                            // Write back to layout instance
	                            vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());
	                        }
	                    }
	                    oldStep(function (nodes, edges, stopped) {
	                        for (var i = 0, l = nodes.length; i < l; i++) {
	                            if (!nodes[i].fixed) {
	                                graph.getNodeByIndex(i).setLayout(nodes[i].p);
	                            }
	                            preservedPoints[nodeData.getId(i)] = nodes[i].p;
	                        }
	                        for (var i = 0, l = edges.length; i < l; i++) {
	                            var e = edges[i];
	                            var edge = graph.getEdgeByIndex(i);
	                            var p1 = e.n1.p;
	                            var p2 = e.n2.p;
	                            var points = edge.getLayout();
	                            points = points ? points.slice() : [];
	                            points[0] = points[0] || [];
	                            points[1] = points[1] || [];
	                            vec2.copy(points[0], p1);
	                            vec2.copy(points[1], p2);
	                            if (+e.curveness) {
	                                points[2] = [
	                                    (p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness,
	                                    (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness
	                                ];
	                            }
	                            edge.setLayout(points);
	                        }
	                        // Update layout

	                        cb && cb(stopped);
	                    });
	                };
	                graphSeries.forceLayout = forceInstance;
	                graphSeries.preservedPoints = preservedPoints;

	                // Step to get the layout
	                forceInstance.step();
	            }
	            else {
	                // Remove prev injected forceLayout instance
	                graphSeries.forceLayout = null;
	            }
	        });
	    };


/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	

	    var vec2 = __webpack_require__(249);
	    var scaleAndAdd = vec2.scaleAndAdd;

	    // function adjacentNode(n, e) {
	    //     return e.n1 === n ? e.n2 : e.n1;
	    // }

	    module.exports = function (nodes, edges, opts) {
	        var rect = opts.rect;
	        var width = rect.width;
	        var height = rect.height;
	        var center = [rect.x + width / 2, rect.y + height / 2];
	        // var scale = opts.scale || 1;
	        var gravity = opts.gravity == null ? 0.1 : opts.gravity;

	        // for (var i = 0; i < edges.length; i++) {
	        //     var e = edges[i];
	        //     var n1 = e.n1;
	        //     var n2 = e.n2;
	        //     n1.edges = n1.edges || [];
	        //     n2.edges = n2.edges || [];
	        //     n1.edges.push(e);
	        //     n2.edges.push(e);
	        // }
	        // Init position
	        for (var i = 0; i < nodes.length; i++) {
	            var n = nodes[i];
	            if (!n.p) {
	                // Use the position from first adjecent node with defined position
	                // Or use a random position
	                // From d3
	                // if (n.edges) {
	                //     var j = -1;
	                //     while (++j < n.edges.length) {
	                //         var e = n.edges[j];
	                //         var other = adjacentNode(n, e);
	                //         if (other.p) {
	                //             n.p = vec2.clone(other.p);
	                //             break;
	                //         }
	                //     }
	                // }
	                // if (!n.p) {
	                    n.p = vec2.create(
	                        width * (Math.random() - 0.5) + center[0],
	                        height * (Math.random() - 0.5) + center[1]
	                    );
	                // }
	            }
	            n.pp = vec2.clone(n.p);
	            n.edges = null;
	        }

	        // Formula in 'Graph Drawing by Force-directed Placement'
	        // var k = scale * Math.sqrt(width * height / nodes.length);
	        // var k2 = k * k;

	        var friction = 0.6;

	        return {
	            warmUp: function () {
	                friction = 0.5;
	            },

	            setFixed: function (idx) {
	                nodes[idx].fixed = true;
	            },

	            setUnfixed: function (idx) {
	                nodes[idx].fixed = false;
	            },

	            step: function (cb) {
	                var v12 = [];
	                var nLen = nodes.length;
	                for (var i = 0; i < edges.length; i++) {
	                    var e = edges[i];
	                    var n1 = e.n1;
	                    var n2 = e.n2;

	                    vec2.sub(v12, n2.p, n1.p);
	                    var d = vec2.len(v12) - e.d;
	                    var w = n2.w / (n1.w + n2.w);
	                    vec2.normalize(v12, v12);

	                    !n1.fixed && scaleAndAdd(n1.p, n1.p, v12, w * d * friction);
	                    !n2.fixed && scaleAndAdd(n2.p, n2.p, v12, -(1 - w) * d * friction);
	                }
	                // Gravity
	                for (var i = 0; i < nLen; i++) {
	                    var n = nodes[i];
	                    if (!n.fixed) {
	                        vec2.sub(v12, center, n.p);
	                        // var d = vec2.len(v12);
	                        // vec2.scale(v12, v12, 1 / d);
	                        // var gravityFactor = gravity;
	                        vec2.scaleAndAdd(n.p, n.p, v12, gravity * friction);
	                    }
	                }

	                // Repulsive
	                // PENDING
	                for (var i = 0; i < nLen; i++) {
	                    var n1 = nodes[i];
	                    for (var j = i + 1; j < nLen; j++) {
	                        var n2 = nodes[j];
	                        vec2.sub(v12, n2.p, n1.p);
	                        var d = vec2.len(v12);
	                        if (d === 0) {
	                            // Random repulse
	                            vec2.set(v12, Math.random() - 0.5, Math.random() - 0.5);
	                            d = 1;
	                        }
	                        var repFact = (n1.rep + n2.rep) / d / d;
	                        !n1.fixed && scaleAndAdd(n1.pp, n1.pp, v12, repFact);
	                        !n2.fixed && scaleAndAdd(n2.pp, n2.pp, v12, -repFact);
	                    }
	                }
	                var v = [];
	                for (var i = 0; i < nLen; i++) {
	                    var n = nodes[i];
	                    if (!n.fixed) {
	                        vec2.sub(v, n.p, n.pp);
	                        vec2.scaleAndAdd(n.p, n.p, v, friction);
	                        vec2.copy(n.pp, n.p);
	                    }
	                }

	                friction = friction * 0.992;

	                cb && cb(nodes, edges, friction < 0.01);
	            }
	        };
	    };


/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	
	    // FIXME Where to create the simple view coordinate system
	    var View = __webpack_require__(410);
	    var layout = __webpack_require__(260);
	    var bbox = __webpack_require__(290);

	    function getViewRect(seriesModel, api, aspect) {
	        var option = seriesModel.getBoxLayoutParams();
	        option.aspect = aspect;
	        return layout.getLayoutRect(option, {
	            width: api.getWidth(),
	            height: api.getHeight()
	        });
	    }

	    module.exports = function (ecModel, api) {
	        var viewList = [];
	        ecModel.eachSeriesByType('graph', function (seriesModel) {
	            var coordSysType = seriesModel.get('coordinateSystem');
	            if (!coordSysType || coordSysType === 'view') {

	                var data = seriesModel.getData();
	                var positions = data.mapArray(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    return [+itemModel.get('x'), +itemModel.get('y')];
	                });

	                var min = [];
	                var max = [];

	                bbox.fromPoints(positions, min, max);

	                // If width or height is 0
	                if (max[0] - min[0] === 0) {
	                    max[0] += 1;
	                    min[0] -= 1;
	                }
	                if (max[1] - min[1] === 0) {
	                    max[1] += 1;
	                    min[1] -= 1;
	                }
	                var aspect = (max[0] - min[0]) / (max[1] - min[1]);
	                // FIXME If get view rect after data processed?
	                var viewRect = getViewRect(seriesModel, api, aspect);
	                // Position may be NaN, use view rect instead
	                if (isNaN(aspect)) {
	                    min = [viewRect.x, viewRect.y];
	                    max = [viewRect.x + viewRect.width, viewRect.y + viewRect.height];
	                }

	                var bbWidth = max[0] - min[0];
	                var bbHeight = max[1] - min[1];

	                var viewWidth = viewRect.width;
	                var viewHeight = viewRect.height;

	                var viewCoordSys = seriesModel.coordinateSystem = new View();
	                viewCoordSys.zoomLimit = seriesModel.get('scaleLimit');

	                viewCoordSys.setBoundingRect(
	                    min[0], min[1], bbWidth, bbHeight
	                );
	                viewCoordSys.setViewRect(
	                    viewRect.x, viewRect.y, viewWidth, viewHeight
	                );

	                // Update roam info
	                viewCoordSys.setCenter(seriesModel.get('center'));
	                viewCoordSys.setZoom(seriesModel.get('zoom'));

	                viewList.push(viewCoordSys);
	            }
	        });
	        return viewList;
	    };


/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	
	    __webpack_require__(458);
	    __webpack_require__(459);


/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	

	    var List = __webpack_require__(337);
	    var SeriesModel = __webpack_require__(267);
	    var zrUtil = __webpack_require__(243);

	    var GaugeSeries = SeriesModel.extend({

	        type: 'series.gauge',

	        getInitialData: function (option, ecModel) {
	            var list = new List(['value'], this);
	            var dataOpt = option.data || [];
	            if (!zrUtil.isArray(dataOpt)) {
	                dataOpt = [dataOpt];
	            }
	            // Only use the first data item
	            list.initData(dataOpt);
	            return list;
	        },

	        defaultOption: {
	            zlevel: 0,
	            z: 2,
	            // 默认全局居中
	            center: ['50%', '50%'],
	            legendHoverLink: true,
	            radius: '75%',
	            startAngle: 225,
	            endAngle: -45,
	            clockwise: true,
	            // 最小值
	            min: 0,
	            // 最大值
	            max: 100,
	            // 分割段数，默认为10
	            splitNumber: 10,
	            // 坐标轴线
	            axisLine: {
	                // 默认显示，属性show控制显示与否
	                show: true,
	                lineStyle: {       // 属性lineStyle控制线条样式
	                    color: [[0.2, '#91c7ae'], [0.8, '#63869e'], [1, '#c23531']],
	                    width: 30
	                }
	            },
	            // 分隔线
	            splitLine: {
	                // 默认显示，属性show控制显示与否
	                show: true,
	                // 属性length控制线长
	                length: 30,
	                // 属性lineStyle（详见lineStyle）控制线条样式
	                lineStyle: {
	                    color: '#eee',
	                    width: 2,
	                    type: 'solid'
	                }
	            },
	            // 坐标轴小标记
	            axisTick: {
	                // 属性show控制显示与否，默认不显示
	                show: true,
	                // 每份split细分多少段
	                splitNumber: 5,
	                // 属性length控制线长
	                length: 8,
	                // 属性lineStyle控制线条样式
	                lineStyle: {
	                    color: '#eee',
	                    width: 1,
	                    type: 'solid'
	                }
	            },
	            axisLabel: {
	                show: true,
	                distance: 5,
	                // formatter: null,
	                textStyle: {       // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                    color: 'auto'
	                }
	            },
	            pointer: {
	                show: true,
	                length: '80%',
	                width: 8
	            },
	            itemStyle: {
	                normal: {
	                    color: 'auto'
	                }
	            },
	            title: {
	                show: true,
	                // x, y，单位px
	                offsetCenter: [0, '-40%'],
	                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                textStyle: {
	                    color: '#333',
	                    fontSize: 15
	                }
	            },
	            detail: {
	                show: true,
	                backgroundColor: 'rgba(0,0,0,0)',
	                borderWidth: 0,
	                borderColor: '#ccc',
	                width: 100,
	                height: 40,
	                // x, y，单位px
	                offsetCenter: [0, '40%'],
	                // formatter: null,
	                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                textStyle: {
	                    color: 'auto',
	                    fontSize: 30
	                }
	            }
	        }
	    });

	    module.exports = GaugeSeries;


/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	

	    var PointerPath = __webpack_require__(460);

	    var graphic = __webpack_require__(282);
	    var numberUtil = __webpack_require__(246);
	    var parsePercent = numberUtil.parsePercent;

	    function parsePosition(seriesModel, api) {
	        var center = seriesModel.get('center');
	        var width = api.getWidth();
	        var height = api.getHeight();
	        var size = Math.min(width, height);
	        var cx = parsePercent(center[0], api.getWidth());
	        var cy = parsePercent(center[1], api.getHeight());
	        var r = parsePercent(seriesModel.get('radius'), size / 2);

	        return {
	            cx: cx,
	            cy: cy,
	            r: r
	        };
	    }

	    function formatLabel(label, labelFormatter) {
	        if (labelFormatter) {
	            if (typeof labelFormatter === 'string') {
	                label = labelFormatter.replace('{value}', label != null ? label : '');
	            }
	            else if (typeof labelFormatter === 'function') {
	                label = labelFormatter(label);
	            }
	        }

	        return label;
	    }

	    var PI2 = Math.PI * 2;

	    var GaugeView = __webpack_require__(281).extend({

	        type: 'gauge',

	        render: function (seriesModel, ecModel, api) {

	            this.group.removeAll();

	            var colorList = seriesModel.get('axisLine.lineStyle.color');
	            var posInfo = parsePosition(seriesModel, api);

	            this._renderMain(
	                seriesModel, ecModel, api, colorList, posInfo
	            );
	        },

	        dispose: function () {},

	        _renderMain: function (seriesModel, ecModel, api, colorList, posInfo) {
	            var group = this.group;

	            var axisLineModel = seriesModel.getModel('axisLine');
	            var lineStyleModel = axisLineModel.getModel('lineStyle');

	            var clockwise = seriesModel.get('clockwise');
	            var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;
	            var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;

	            var angleRangeSpan = (endAngle - startAngle) % PI2;

	            var prevEndAngle = startAngle;
	            var axisLineWidth = lineStyleModel.get('width');

	            for (var i = 0; i < colorList.length; i++) {
	                // Clamp
	                var percent = Math.min(Math.max(colorList[i][0], 0), 1);
	                var endAngle = startAngle + angleRangeSpan * percent;
	                var sector = new graphic.Sector({
	                    shape: {
	                        startAngle: prevEndAngle,
	                        endAngle: endAngle,
	                        cx: posInfo.cx,
	                        cy: posInfo.cy,
	                        clockwise: clockwise,
	                        r0: posInfo.r - axisLineWidth,
	                        r: posInfo.r
	                    },
	                    silent: true
	                });

	                sector.setStyle({
	                    fill: colorList[i][1]
	                });

	                sector.setStyle(lineStyleModel.getLineStyle(
	                    // Because we use sector to simulate arc
	                    // so the properties for stroking are useless
	                    ['color', 'borderWidth', 'borderColor']
	                ));

	                group.add(sector);

	                prevEndAngle = endAngle;
	            }

	            var getColor = function (percent) {
	                // Less than 0
	                if (percent <= 0) {
	                    return colorList[0][1];
	                }
	                for (var i = 0; i < colorList.length; i++) {
	                    if (colorList[i][0] >= percent
	                        && (i === 0 ? 0 : colorList[i - 1][0]) < percent
	                    ) {
	                        return colorList[i][1];
	                    }
	                }
	                // More than 1
	                return colorList[i - 1][1];
	            };

	            if (!clockwise) {
	                var tmp = startAngle;
	                startAngle = endAngle;
	                endAngle = tmp;
	            }

	            this._renderTicks(
	                seriesModel, ecModel, api, getColor, posInfo,
	                startAngle, endAngle, clockwise
	            );

	            this._renderPointer(
	                seriesModel, ecModel, api, getColor, posInfo,
	                startAngle, endAngle, clockwise
	            );

	            this._renderTitle(
	                seriesModel, ecModel, api, getColor, posInfo
	            );
	            this._renderDetail(
	                seriesModel, ecModel, api, getColor, posInfo
	            );
	        },

	        _renderTicks: function (
	            seriesModel, ecModel, api, getColor, posInfo,
	            startAngle, endAngle, clockwise
	        ) {
	            var group = this.group;
	            var cx = posInfo.cx;
	            var cy = posInfo.cy;
	            var r = posInfo.r;

	            var minVal = +seriesModel.get('min');
	            var maxVal = +seriesModel.get('max');

	            var splitLineModel = seriesModel.getModel('splitLine');
	            var tickModel = seriesModel.getModel('axisTick');
	            var labelModel = seriesModel.getModel('axisLabel');

	            var splitNumber = seriesModel.get('splitNumber');
	            var subSplitNumber = tickModel.get('splitNumber');

	            var splitLineLen = parsePercent(
	                splitLineModel.get('length'), r
	            );
	            var tickLen = parsePercent(
	                tickModel.get('length'), r
	            );

	            var angle = startAngle;
	            var step = (endAngle - startAngle) / splitNumber;
	            var subStep = step / subSplitNumber;

	            var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();
	            var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();
	            var textStyleModel = labelModel.getModel('textStyle');

	            for (var i = 0; i <= splitNumber; i++) {
	                var unitX = Math.cos(angle);
	                var unitY = Math.sin(angle);
	                // Split line
	                if (splitLineModel.get('show')) {
	                    var splitLine = new graphic.Line({
	                        shape: {
	                            x1: unitX * r + cx,
	                            y1: unitY * r + cy,
	                            x2: unitX * (r - splitLineLen) + cx,
	                            y2: unitY * (r - splitLineLen) + cy
	                        },
	                        style: splitLineStyle,
	                        silent: true
	                    });
	                    if (splitLineStyle.stroke === 'auto') {
	                        splitLine.setStyle({
	                            stroke: getColor(i / splitNumber)
	                        });
	                    }

	                    group.add(splitLine);
	                }

	                // Label
	                if (labelModel.get('show')) {
	                    var label = formatLabel(
	                        numberUtil.round(i / splitNumber * (maxVal - minVal) + minVal),
	                        labelModel.get('formatter')
	                    );
	                    var distance = labelModel.get('distance');

	                    var text = new graphic.Text({
	                        style: {
	                            text: label,
	                            x: unitX * (r - splitLineLen - distance) + cx,
	                            y: unitY * (r - splitLineLen - distance) + cy,
	                            fill: textStyleModel.getTextColor(),
	                            textFont: textStyleModel.getFont(),
	                            textVerticalAlign: unitY < -0.4 ? 'top' : (unitY > 0.4 ? 'bottom' : 'middle'),
	                            textAlign: unitX < -0.4 ? 'left' : (unitX > 0.4 ? 'right' : 'center')
	                        },
	                        silent: true
	                    });
	                    if (text.style.fill === 'auto') {
	                        text.setStyle({
	                            fill: getColor(i / splitNumber)
	                        });
	                    }

	                    group.add(text);
	                }

	                // Axis tick
	                if (tickModel.get('show') && i !== splitNumber) {
	                    for (var j = 0; j <= subSplitNumber; j++) {
	                        var unitX = Math.cos(angle);
	                        var unitY = Math.sin(angle);
	                        var tickLine = new graphic.Line({
	                            shape: {
	                                x1: unitX * r + cx,
	                                y1: unitY * r + cy,
	                                x2: unitX * (r - tickLen) + cx,
	                                y2: unitY * (r - tickLen) + cy
	                            },
	                            silent: true,
	                            style: tickLineStyle
	                        });

	                        if (tickLineStyle.stroke === 'auto') {
	                            tickLine.setStyle({
	                                stroke: getColor((i + j / subSplitNumber) / splitNumber)
	                            });
	                        }

	                        group.add(tickLine);
	                        angle += subStep;
	                    }
	                    angle -= subStep;
	                }
	                else {
	                    angle += step;
	                }
	            }
	        },

	        _renderPointer: function (
	            seriesModel, ecModel, api, getColor, posInfo,
	            startAngle, endAngle, clockwise
	        ) {

	            var group = this.group;
	            var oldData = this._data;

	            if (!seriesModel.get('pointer.show')) {
	                // Remove old element
	                oldData.eachItemGraphicEl(function (el) {
	                    group.remove(el);
	                });
	                return;
	            }

	            var valueExtent = [+seriesModel.get('min'), +seriesModel.get('max')];
	            var angleExtent = [startAngle, endAngle];

	            var data = seriesModel.getData();

	            data.diff(oldData)
	                .add(function (idx) {
	                    var pointer = new PointerPath({
	                        shape: {
	                            angle: startAngle
	                        }
	                    });

	                    graphic.updateProps(pointer, {
	                        shape: {
	                            angle: numberUtil.linearMap(data.get('value', idx), valueExtent, angleExtent, true)
	                        }
	                    }, seriesModel);

	                    group.add(pointer);
	                    data.setItemGraphicEl(idx, pointer);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var pointer = oldData.getItemGraphicEl(oldIdx);

	                    graphic.updateProps(pointer, {
	                        shape: {
	                            angle: numberUtil.linearMap(data.get('value', newIdx), valueExtent, angleExtent, true)
	                        }
	                    }, seriesModel);

	                    group.add(pointer);
	                    data.setItemGraphicEl(newIdx, pointer);
	                })
	                .remove(function (idx) {
	                    var pointer = oldData.getItemGraphicEl(idx);
	                    group.remove(pointer);
	                })
	                .execute();

	            data.eachItemGraphicEl(function (pointer, idx) {
	                var itemModel = data.getItemModel(idx);
	                var pointerModel = itemModel.getModel('pointer');

	                pointer.setShape({
	                    x: posInfo.cx,
	                    y: posInfo.cy,
	                    width: parsePercent(
	                        pointerModel.get('width'), posInfo.r
	                    ),
	                    r: parsePercent(pointerModel.get('length'), posInfo.r)
	                });

	                pointer.useStyle(itemModel.getModel('itemStyle.normal').getItemStyle());

	                if (pointer.style.fill === 'auto') {
	                    pointer.setStyle('fill', getColor(
	                        (data.get('value', idx) - valueExtent[0]) / (valueExtent[1] - valueExtent[0])
	                    ));
	                }

	                graphic.setHoverStyle(
	                    pointer, itemModel.getModel('itemStyle.emphasis').getItemStyle()
	                );
	            });

	            this._data = data;
	        },

	        _renderTitle: function (
	            seriesModel, ecModel, api, getColor, posInfo
	        ) {
	            var titleModel = seriesModel.getModel('title');
	            if (titleModel.get('show')) {
	                var textStyleModel = titleModel.getModel('textStyle');
	                var offsetCenter = titleModel.get('offsetCenter');
	                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	                var text = new graphic.Text({
	                    style: {
	                        x: x,
	                        y: y,
	                        // FIXME First data name ?
	                        text: seriesModel.getData().getName(0),
	                        fill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont(),
	                        textAlign: 'center',
	                        textVerticalAlign: 'middle'
	                    }
	                });
	                this.group.add(text);
	            }
	        },

	        _renderDetail: function (
	            seriesModel, ecModel, api, getColor, posInfo
	        ) {
	            var detailModel = seriesModel.getModel('detail');
	            var minVal = +seriesModel.get('min');
	            var maxVal = +seriesModel.get('max');
	            if (detailModel.get('show')) {
	                var textStyleModel = detailModel.getModel('textStyle');
	                var offsetCenter = detailModel.get('offsetCenter');
	                var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	                var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	                var width = parsePercent(detailModel.get('width'), posInfo.r);
	                var height = parsePercent(detailModel.get('height'), posInfo.r);
	                var value = seriesModel.getData().get('value', 0);
	                var rect = new graphic.Rect({
	                    shape: {
	                        x: x - width / 2,
	                        y: y - height / 2,
	                        width: width,
	                        height: height
	                    },
	                    style: {
	                        text: formatLabel(
	                            // FIXME First data name ?
	                            value, detailModel.get('formatter')
	                        ),
	                        fill: detailModel.get('backgroundColor'),
	                        textFill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont()
	                    }
	                });
	                if (rect.style.textFill === 'auto') {
	                    rect.setStyle('textFill', getColor(
	                        numberUtil.linearMap(value, [minVal, maxVal], [0, 1], true)
	                    ));
	                }
	                rect.setStyle(detailModel.getItemStyle(['color']));
	                this.group.add(rect);
	            }
	        }
	    });

	    module.exports = GaugeView;


/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	

	    module.exports = __webpack_require__(284).extend({

	        type: 'echartsGaugePointer',

	        shape: {
	            angle: 0,

	            width: 10,

	            r: 10,

	            x: 0,

	            y: 0
	        },

	        buildPath: function (ctx, shape) {
	            var mathCos = Math.cos;
	            var mathSin = Math.sin;

	            var r = shape.r;
	            var width = shape.width;
	            var angle = shape.angle;
	            var x = shape.x - mathCos(angle) * width * (width >= r / 3 ? 1 : 2);
	            var y = shape.y - mathSin(angle) * width * (width >= r / 3 ? 1 : 2);

	            angle = shape.angle - Math.PI / 2;
	            ctx.moveTo(x, y);
	            ctx.lineTo(
	                shape.x + mathCos(angle) * width,
	                shape.y + mathSin(angle) * width
	            );
	            ctx.lineTo(
	                shape.x + mathCos(shape.angle) * r,
	                shape.y + mathSin(shape.angle) * r
	            );
	            ctx.lineTo(
	                shape.x - mathCos(angle) * width,
	                shape.y - mathSin(angle) * width
	            );
	            ctx.lineTo(x, y);
	            return;
	        }
	    });


/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var echarts = __webpack_require__(240);

	    __webpack_require__(462);
	    __webpack_require__(463);

	    echarts.registerVisual(zrUtil.curry(__webpack_require__(385), 'funnel'));
	    echarts.registerLayout(__webpack_require__(464));

	    echarts.registerProcessor(zrUtil.curry(__webpack_require__(388), 'funnel'));


/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var List = __webpack_require__(337);
	    var modelUtil = __webpack_require__(244);
	    var completeDimensions = __webpack_require__(342);

	    var FunnelSeries = __webpack_require__(240).extendSeriesModel({

	        type: 'series.funnel',

	        init: function (option) {
	            FunnelSeries.superApply(this, 'init', arguments);

	            // Enable legend selection for each data item
	            // Use a function instead of direct access because data reference may changed
	            this.legendDataProvider = function () {
	                return this.getRawData();
	            };
	            // Extend labelLine emphasis
	            this._defaultLabelLine(option);
	        },

	        getInitialData: function (option, ecModel) {
	            var dimensions = completeDimensions(['value'], option.data);
	            var list = new List(dimensions, this);
	            list.initData(option.data);
	            return list;
	        },

	        _defaultLabelLine: function (option) {
	            // Extend labelLine emphasis
	            modelUtil.defaultEmphasis(option.labelLine, ['show']);

	            var labelLineNormalOpt = option.labelLine.normal;
	            var labelLineEmphasisOpt = option.labelLine.emphasis;
	            // Not show label line if `label.normal.show = false`
	            labelLineNormalOpt.show = labelLineNormalOpt.show
	                && option.label.normal.show;
	            labelLineEmphasisOpt.show = labelLineEmphasisOpt.show
	                && option.label.emphasis.show;
	        },

	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            legendHoverLink: true,
	            left: 80,
	            top: 60,
	            right: 80,
	            bottom: 60,
	            // width: {totalWidth} - left - right,
	            // height: {totalHeight} - top - bottom,

	            // 默认取数据最小最大值
	            // min: 0,
	            // max: 100,
	            minSize: '0%',
	            maxSize: '100%',
	            sort: 'descending', // 'ascending', 'descending'
	            gap: 0,
	            funnelAlign: 'center',
	            label: {
	                normal: {
	                    show: true,
	                    position: 'outer'
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                    // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                },
	                emphasis: {
	                    show: true
	                }
	            },
	            labelLine: {
	                normal: {
	                    show: true,
	                    length: 20,
	                    lineStyle: {
	                        // color: 各异,
	                        width: 1,
	                        type: 'solid'
	                    }
	                },
	                emphasis: {}
	            },
	            itemStyle: {
	                normal: {
	                    // color: 各异,
	                    borderColor: '#fff',
	                    borderWidth: 1
	                },
	                emphasis: {
	                    // color: 各异,
	                }
	            }
	        }
	    });

	    module.exports = FunnelSeries;


/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	

	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);

	    /**
	     * Piece of pie including Sector, Label, LabelLine
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     */
	    function FunnelPiece(data, idx) {

	        graphic.Group.call(this);

	        var polygon = new graphic.Polygon();
	        var labelLine = new graphic.Polyline();
	        var text = new graphic.Text();
	        this.add(polygon);
	        this.add(labelLine);
	        this.add(text);

	        this.updateData(data, idx, true);

	        // Hover to change label and labelLine
	        function onEmphasis() {
	            labelLine.ignore = labelLine.hoverIgnore;
	            text.ignore = text.hoverIgnore;
	        }
	        function onNormal() {
	            labelLine.ignore = labelLine.normalIgnore;
	            text.ignore = text.normalIgnore;
	        }
	        this.on('emphasis', onEmphasis)
	            .on('normal', onNormal)
	            .on('mouseover', onEmphasis)
	            .on('mouseout', onNormal);
	    }

	    var funnelPieceProto = FunnelPiece.prototype;

	    function getLabelStyle(data, idx, state, labelModel) {
	        var textStyleModel = labelModel.getModel('textStyle');
	        var position = labelModel.get('position');
	        var isLabelInside = position === 'inside' || position === 'inner' || position === 'center';
	        return {
	            fill: textStyleModel.getTextColor()
	                || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	            textFont: textStyleModel.getFont(),
	            text: zrUtil.retrieve(
	                data.hostModel.getFormattedLabel(idx, state),
	                data.getName(idx)
	            )
	        };
	    }

	    var opacityAccessPath = ['itemStyle', 'normal', 'opacity'];
	    funnelPieceProto.updateData = function (data, idx, firstCreate) {

	        var polygon = this.childAt(0);

	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var opacity = data.getItemModel(idx).get(opacityAccessPath);
	        opacity = opacity == null ? 1 : opacity;

	        // Reset style
	        polygon.useStyle({});

	        if (firstCreate) {
	            polygon.setShape({
	                points: layout.points
	            });
	            polygon.setStyle({ opacity : 0 });
	            graphic.initProps(polygon, {
	                style: {
	                    opacity: opacity
	                }
	            }, seriesModel, idx);
	        }
	        else {
	            graphic.updateProps(polygon, {
	                style: {
	                    opacity: opacity
	                },
	                shape: {
	                    points: layout.points
	                }
	            }, seriesModel, idx);
	        }

	        // Update common style
	        var itemStyleModel = itemModel.getModel('itemStyle');
	        var visualColor = data.getItemVisual(idx, 'color');

	        polygon.setStyle(
	            zrUtil.defaults(
	                {
	                    lineJoin: 'round',
	                    fill: visualColor
	                },
	                itemStyleModel.getModel('normal').getItemStyle(['opacity'])
	            )
	        );
	        polygon.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();

	        this._updateLabel(data, idx);

	        graphic.setHoverStyle(this);
	    };

	    funnelPieceProto._updateLabel = function (data, idx) {

	        var labelLine = this.childAt(1);
	        var labelText = this.childAt(2);

	        var seriesModel = data.hostModel;
	        var itemModel = data.getItemModel(idx);
	        var layout = data.getItemLayout(idx);
	        var labelLayout = layout.label;
	        var visualColor = data.getItemVisual(idx, 'color');

	        graphic.updateProps(labelLine, {
	            shape: {
	                points: labelLayout.linePoints || labelLayout.linePoints
	            }
	        }, seriesModel, idx);

	        graphic.updateProps(labelText, {
	            style: {
	                x: labelLayout.x,
	                y: labelLayout.y
	            }
	        }, seriesModel, idx);
	        labelText.attr({
	            style: {
	                textAlign: labelLayout.textAlign,
	                textVerticalAlign: labelLayout.verticalAlign,
	                textFont: labelLayout.font
	            },
	            rotation: labelLayout.rotation,
	            origin: [labelLayout.x, labelLayout.y],
	            z2: 10
	        });

	        var labelModel = itemModel.getModel('label.normal');
	        var labelHoverModel = itemModel.getModel('label.emphasis');
	        var labelLineModel = itemModel.getModel('labelLine.normal');
	        var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');

	        labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel));

	        labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	        labelText.hoverIgnore = !labelHoverModel.get('show');

	        labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	        labelLine.hoverIgnore = !labelLineHoverModel.get('show');

	        // Default use item visual color
	        labelLine.setStyle({
	            stroke: visualColor
	        });
	        labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());

	        labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel);
	        labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	    };

	    zrUtil.inherits(FunnelPiece, graphic.Group);


	    var Funnel = __webpack_require__(281).extend({

	        type: 'funnel',

	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var oldData = this._data;

	            var group = this.group;

	            data.diff(oldData)
	                .add(function (idx) {
	                    var funnelPiece = new FunnelPiece(data, idx);

	                    data.setItemGraphicEl(idx, funnelPiece);

	                    group.add(funnelPiece);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var piePiece = oldData.getItemGraphicEl(oldIdx);

	                    piePiece.updateData(data, newIdx);

	                    group.add(piePiece);
	                    data.setItemGraphicEl(newIdx, piePiece);
	                })
	                .remove(function (idx) {
	                    var piePiece = oldData.getItemGraphicEl(idx);
	                    group.remove(piePiece);
	                })
	                .execute();

	            this._data = data;
	        },

	        remove: function () {
	            this.group.removeAll();
	            this._data = null;
	        },

	        dispose: function () {}
	    });

	    module.exports = Funnel;


/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	

	    var layout = __webpack_require__(260);
	    var number = __webpack_require__(246);

	    var parsePercent = number.parsePercent;

	    function getViewRect(seriesModel, api) {
	        return layout.getLayoutRect(
	            seriesModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            }
	        );
	    }

	    function getSortedIndices(data, sort) {
	        var valueArr = data.mapArray('value', function (val) {
	            return val;
	        });
	        var indices = [];
	        var isAscending = sort === 'ascending';
	        for (var i = 0, len = data.count(); i < len; i++) {
	            indices[i] = i;
	        }
	        indices.sort(function (a, b) {
	            return isAscending ? valueArr[a] - valueArr[b] : valueArr[b] - valueArr[a];
	        });
	        return indices;
	    }

	    function labelLayout (data) {
	        data.each(function (idx) {
	            var itemModel = data.getItemModel(idx);
	            var labelModel = itemModel.getModel('label.normal');
	            var labelPosition = labelModel.get('position');

	            var labelLineModel = itemModel.getModel('labelLine.normal');

	            var layout = data.getItemLayout(idx);
	            var points = layout.points;

	            var isLabelInside = labelPosition === 'inner'
	                || labelPosition === 'inside' || labelPosition === 'center';

	            var textAlign;
	            var textX;
	            var textY;
	            var linePoints;

	            if (isLabelInside) {
	                textX = (points[0][0] + points[1][0] + points[2][0] + points[3][0]) / 4;
	                textY = (points[0][1] + points[1][1] + points[2][1] + points[3][1]) / 4;
	                textAlign = 'center';
	                linePoints = [
	                    [textX, textY], [textX, textY]
	                ];
	            }
	            else {
	                var x1;
	                var y1;
	                var x2;
	                var labelLineLen = labelLineModel.get('length');
	                if (labelPosition === 'left') {
	                    // Left side
	                    x1 = (points[3][0] + points[0][0]) / 2;
	                    y1 = (points[3][1] + points[0][1]) / 2;
	                    x2 = x1 - labelLineLen;
	                    textX = x2 - 5;
	                    textAlign = 'right';
	                }
	                else {
	                    // Right side
	                    x1 = (points[1][0] + points[2][0]) / 2;
	                    y1 = (points[1][1] + points[2][1]) / 2;
	                    x2 = x1 + labelLineLen;
	                    textX = x2 + 5;
	                    textAlign = 'left';
	                }
	                var y2 = y1;

	                linePoints = [[x1, y1], [x2, y2]];
	                textY = y2;
	            }

	            layout.label = {
	                linePoints: linePoints,
	                x: textX,
	                y: textY,
	                verticalAlign: 'middle',
	                textAlign: textAlign,
	                inside: isLabelInside
	            };
	        });
	    }

	    module.exports = function (ecModel, api, payload) {
	        ecModel.eachSeriesByType('funnel', function (seriesModel) {
	            var data = seriesModel.getData();
	            var sort = seriesModel.get('sort');
	            var viewRect = getViewRect(seriesModel, api);
	            var indices = getSortedIndices(data, sort);

	            var sizeExtent = [
	                parsePercent(seriesModel.get('minSize'), viewRect.width),
	                parsePercent(seriesModel.get('maxSize'), viewRect.width)
	            ];
	            var dataExtent = data.getDataExtent('value');
	            var min = seriesModel.get('min');
	            var max = seriesModel.get('max');
	            if (min == null) {
	                min = Math.min(dataExtent[0], 0);
	            }
	            if (max == null) {
	                max = dataExtent[1];
	            }

	            var funnelAlign = seriesModel.get('funnelAlign');
	            var gap = seriesModel.get('gap');
	            var itemHeight = (viewRect.height - gap * (data.count() - 1)) / data.count();

	            var y = viewRect.y;

	            var getLinePoints = function (idx, offY) {
	                // End point index is data.count() and we assign it 0
	                var val = data.get('value', idx) || 0;
	                var itemWidth = number.linearMap(val, [min, max], sizeExtent, true);
	                var x0;
	                switch (funnelAlign) {
	                    case 'left':
	                        x0 = viewRect.x;
	                        break;
	                    case 'center':
	                        x0 = viewRect.x + (viewRect.width - itemWidth) / 2;
	                        break;
	                    case 'right':
	                        x0 = viewRect.x + viewRect.width - itemWidth;
	                        break;
	                }
	                return [
	                    [x0, offY],
	                    [x0 + itemWidth, offY]
	                ];
	            };

	            if (sort === 'ascending') {
	                // From bottom to top
	                itemHeight = -itemHeight;
	                gap = -gap;
	                y += viewRect.height;
	                indices = indices.reverse();
	            }

	            for (var i = 0; i < indices.length; i++) {
	                var idx = indices[i];
	                var nextIdx = indices[i + 1];
	                var start = getLinePoints(idx, y);
	                var end = getLinePoints(nextIdx, y + itemHeight);

	                y += itemHeight + gap;

	                data.setItemLayout(idx, {
	                    points: start.concat(end.slice().reverse())
	                });
	            }

	            labelLayout(data);
	        });
	    };


/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);

	    __webpack_require__(466);

	    __webpack_require__(477);
	    __webpack_require__(478);

	    echarts.registerVisual(__webpack_require__(479));



/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(467);
	    __webpack_require__(470);
	    __webpack_require__(472);

	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);

	    var CLICK_THRESHOLD = 5; // > 4

	    // Parallel view
	    echarts.extendComponentView({
	        type: 'parallel',

	        render: function (parallelModel, ecModel, api) {
	            var zr = api.getZr();

	            if (!this.__onMouseDown) {
	                // FIXME
	                // click: mousemove check. otherwise confilct with drag brush.
	                var mousedownPoint;
	                zr.on('mousedown', this.__onMouseDown = function (e) {
	                    mousedownPoint = [e.offsetX, e.offsetY];
	                });
	                zr.on('mouseup', this.__onMouseUp = function (e) {
	                    var point = [e.offsetX, e.offsetY];
	                    var dist = Math.pow(mousedownPoint[0] - point[0], 2)
	                        + Math.pow(mousedownPoint[1] - point[1], 2);

	                    if (!parallelModel.get('axisExpandable') || dist > CLICK_THRESHOLD) {
	                        return;
	                    }

	                    var coordSys = parallelModel.coordinateSystem;
	                    var closestDim = coordSys.findClosestAxisDim(point);
	                    if (closestDim) {
	                        var axisIndex = zrUtil.indexOf(coordSys.dimensions, closestDim);
	                        api.dispatchAction({
	                            type: 'parallelAxisExpand',
	                            axisExpandCenter: axisIndex
	                        });
	                    }
	                });
	            }
	        },

	        dispose: function (ecModel, api) {
	            api.getZr().off(this.__onMouseDown);
	            api.getZr().off(this.__onMouseUp);
	        }
	    });

	    echarts.registerPreprocessor(
	        __webpack_require__(476)
	    );



/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Parallel coordinate system creater.
	 */


	    var Parallel = __webpack_require__(468);

	    function create(ecModel, api) {
	        var coordSysList = [];

	        ecModel.eachComponent('parallel', function (parallelModel, idx) {
	            var coordSys = new Parallel(parallelModel, ecModel, api);

	            coordSys.name = 'parallel_' + idx;
	            coordSys.resize(parallelModel, api);

	            parallelModel.coordinateSystem = coordSys;
	            coordSys.model = parallelModel;

	            coordSysList.push(coordSys);
	        });

	        // Inject the coordinateSystems into seriesModel
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'parallel') {
	                var parallelModel = ecModel.queryComponents({
	                    mainType: 'parallel',
	                    index: seriesModel.get('parallelIndex'),
	                    id: seriesModel.get('parallelId')
	                })[0];
	                seriesModel.coordinateSystem = parallelModel.coordinateSystem;
	            }
	        });

	        return coordSysList;
	    }

	    __webpack_require__(265).register('parallel', {create: create});



/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Parallel Coordinates
	 * <https://en.wikipedia.org/wiki/Parallel_coordinates>
	 */


	    var layout = __webpack_require__(260);
	    var axisHelper = __webpack_require__(354);
	    var zrUtil = __webpack_require__(243);
	    var ParallelAxis = __webpack_require__(469);
	    var graphic = __webpack_require__(282);
	    var matrix = __webpack_require__(250);

	    var each = zrUtil.each;

	    var PI = Math.PI;

	    function Parallel(parallelModel, ecModel, api) {

	        /**
	         * key: dimension
	         * @type {Object.<string, module:echarts/coord/parallel/Axis>}
	         * @private
	         */
	        this._axesMap = {};

	        /**
	         * key: dimension
	         * value: {position: [], rotation, }
	         * @type {Object.<string, Object>}
	         * @private
	         */
	        this._axesLayout = {};

	        /**
	         * Always follow axis order.
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        this.dimensions = parallelModel.dimensions;

	        /**
	         * @type {module:zrender/core/BoundingRect}
	         */
	        this._rect;

	        /**
	         * @type {module:echarts/coord/parallel/ParallelModel}
	         */
	        this._model = parallelModel;

	        this._init(parallelModel, ecModel, api);
	    }

	    Parallel.prototype = {

	        type: 'parallel',

	        constructor: Parallel,

	        /**
	         * Initialize cartesian coordinate systems
	         * @private
	         */
	        _init: function (parallelModel, ecModel, api) {

	            var dimensions = parallelModel.dimensions;
	            var parallelAxisIndex = parallelModel.parallelAxisIndex;

	            each(dimensions, function (dim, idx) {

	                var axisIndex = parallelAxisIndex[idx];
	                var axisModel = ecModel.getComponent('parallelAxis', axisIndex);

	                var axis = this._axesMap[dim] = new ParallelAxis(
	                    dim,
	                    axisHelper.createScaleByModel(axisModel),
	                    [0, 0],
	                    axisModel.get('type'),
	                    axisIndex
	                );

	                var isCategory = axis.type === 'category';
	                axis.onBand = isCategory && axisModel.get('boundaryGap');
	                axis.inverse = axisModel.get('inverse');

	                // Inject axis into axisModel
	                axisModel.axis = axis;

	                // Inject axisModel into axis
	                axis.model = axisModel;
	            }, this);
	        },

	        /**
	         * Update axis scale after data processed
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        update: function (ecModel, api) {
	            this._updateAxesFromSeries(this._model, ecModel);
	        },

	        /**
	         * Update properties from series
	         * @private
	         */
	        _updateAxesFromSeries: function (parallelModel, ecModel) {
	            ecModel.eachSeries(function (seriesModel) {

	                if (!parallelModel.contains(seriesModel, ecModel)) {
	                    return;
	                }

	                var data = seriesModel.getData();

	                each(this.dimensions, function (dim) {
	                    var axis = this._axesMap[dim];
	                    axis.scale.unionExtentFromData(data, dim);
	                    axisHelper.niceScaleExtent(axis, axis.model);
	                }, this);
	            }, this);
	        },

	        /**
	         * Resize the parallel coordinate system.
	         * @param {module:echarts/coord/parallel/ParallelModel} parallelModel
	         * @param {module:echarts/ExtensionAPI} api
	         */
	        resize: function (parallelModel, api) {
	            this._rect = layout.getLayoutRect(
	                parallelModel.getBoxLayoutParams(),
	                {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }
	            );

	            this._layoutAxes(parallelModel);
	        },

	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getRect: function () {
	            return this._rect;
	        },

	        /**
	         * @private
	         */
	        _layoutAxes: function (parallelModel) {
	            var rect = this._rect;
	            var layout = parallelModel.get('layout');
	            var axes = this._axesMap;
	            var dimensions = this.dimensions;

	            var size = [rect.width, rect.height];
	            var sizeIdx = layout === 'horizontal' ? 0 : 1;
	            var layoutLength = size[sizeIdx];
	            var axisLength = size[1 - sizeIdx];
	            var axisExtent = [0, axisLength];

	            each(axes, function (axis) {
	                var idx = axis.inverse ? 1 : 0;
	                axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);
	            });

	            var axisExpandable = parallelModel.get('axisExpandable');
	            var axisExpandWidth = parallelModel.get('axisExpandWidth');
	            var axisExpandCenter = parallelModel.get('axisExpandCenter');
	            var axisExpandCount = parallelModel.get('axisExpandCount') || 0;
	            var axisExpandWindow;

	            if (axisExpandCenter != null) {
	                // Clamp
	                var left = Math.max(0, Math.floor(axisExpandCenter - (axisExpandCount - 1) / 2));
	                var right = left + axisExpandCount - 1;
	                if (right >= dimensions.length) {
	                    right = dimensions.length - 1;
	                    left = Math.max(0, Math.floor(right - axisExpandCount + 1));
	                }
	                axisExpandWindow = [left, right];
	            }

	            var calcPos = (axisExpandable && axisExpandWindow && axisExpandWidth)
	                ? function (axisIndex, layoutLength, axisCount) {
	                    var peekIntervalCount = axisExpandWindow[1] - axisExpandWindow[0];
	                    var otherWidth = (
	                        layoutLength - axisExpandWidth * peekIntervalCount
	                    ) / (axisCount - 1 - peekIntervalCount);

	                    var position;

	                    if (axisIndex < axisExpandWindow[0]) {
	                        position = (axisIndex - 1) * otherWidth;
	                    }
	                    else if (axisIndex <= axisExpandWindow[1]) {
	                        position = axisExpandWindow[0] * otherWidth
	                            + (axisIndex - axisExpandWindow[0]) * axisExpandWidth;
	                    }
	                    else if (axisIndex === axisCount - 1) {
	                        position = layoutLength;
	                    }
	                    else {
	                        position = axisExpandWindow[0] * otherWidth
	                            + peekIntervalCount * axisExpandWidth
	                            + (axisIndex - axisExpandWindow[1]) * otherWidth;
	                    }

	                    return {
	                        position: position,
	                        axisNameAvailableWidth: (
	                            axisExpandWindow[0] < axisIndex && axisIndex < axisExpandWindow[1]
	                        ) ? axisExpandWidth : otherWidth
	                    };
	                }
	                : function (axisIndex, layoutLength, axisCount) {
	                    var step = layoutLength / (axisCount - 1);
	                    return {
	                        position: step * axisIndex,
	                        axisNameAvailableWidth: step
	                    };
	                };

	            each(dimensions, function (dim, idx) {
	                var posInfo = calcPos(idx, layoutLength, dimensions.length);

	                var positionTable = {
	                    horizontal: {
	                        x: posInfo.position,
	                        y: axisLength
	                    },
	                    vertical: {
	                        x: 0,
	                        y: posInfo.position
	                    }
	                };
	                var rotationTable = {
	                    horizontal: PI / 2,
	                    vertical: 0
	                };

	                var position = [
	                    positionTable[layout].x + rect.x,
	                    positionTable[layout].y + rect.y
	                ];

	                var rotation = rotationTable[layout];
	                var transform = matrix.create();
	                matrix.rotate(transform, transform, rotation);
	                matrix.translate(transform, transform, position);

	                // TODO
	                // tick等排布信息。

	                // TODO
	                // 根据axis order 更新 dimensions顺序。

	                this._axesLayout[dim] = {
	                    position: position,
	                    rotation: rotation,
	                    transform: transform,
	                    axisNameAvailableWidth: posInfo.axisNameAvailableWidth,
	                    tickDirection: 1,
	                    labelDirection: 1,
	                    axisExpandWindow: axisExpandWindow
	                };
	            }, this);
	        },

	        /**
	         * Get axis by dim.
	         * @param {string} dim
	         * @return {module:echarts/coord/parallel/ParallelAxis} [description]
	         */
	        getAxis: function (dim) {
	            return this._axesMap[dim];
	        },

	        /**
	         * Convert a dim value of a single item of series data to Point.
	         * @param {*} value
	         * @param {string} dim
	         * @return {Array}
	         */
	        dataToPoint: function (value, dim) {
	            return this.axisCoordToPoint(
	                this._axesMap[dim].dataToCoord(value),
	                dim
	            );
	        },

	        /**
	         * Travel data for one time, get activeState of each data item.
	         * @param {module:echarts/data/List} data
	         * @param {Functio} cb param: {string} activeState 'active' or 'inactive' or 'normal'
	         *                            {number} dataIndex
	         * @param {Object} context
	         */
	        eachActiveState: function (data, callback, context) {
	            var dimensions = this.dimensions;
	            var axesMap = this._axesMap;
	            var hasActiveSet = this.hasAxisbrushed();

	            for (var i = 0, len = data.count(); i < len; i++) {
	                var values = data.getValues(dimensions, i);
	                var activeState;

	                if (!hasActiveSet) {
	                    activeState = 'normal';
	                }
	                else {
	                    activeState = 'active';
	                    for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	                        var dimName = dimensions[j];
	                        var state = axesMap[dimName].model.getActiveState(values[j], j);

	                        if (state === 'inactive') {
	                            activeState = 'inactive';
	                            break;
	                        }
	                    }
	                }

	                callback.call(context, activeState, i);
	            }
	        },

	        /**
	         * Whether has any activeSet.
	         * @return {boolean}
	         */
	        hasAxisbrushed: function () {
	            var dimensions = this.dimensions;
	            var axesMap = this._axesMap;
	            var hasActiveSet = false;

	            for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	                if (axesMap[dimensions[j]].model.getActiveState() !== 'normal') {
	                    hasActiveSet = true;
	                }
	            }

	            return hasActiveSet;
	        },

	        /**
	         * Convert coords of each axis to Point.
	         *  Return point. For example: [10, 20]
	         * @param {Array.<number>} coords
	         * @param {string} dim
	         * @return {Array.<number>}
	         */
	        axisCoordToPoint: function (coord, dim) {
	            var axisLayout = this._axesLayout[dim];
	            return graphic.applyTransform([coord, 0], axisLayout.transform);
	        },

	        /**
	         * Get axis layout.
	         */
	        getAxisLayout: function (dim) {
	            return zrUtil.clone(this._axesLayout[dim]);
	        },

	        findClosestAxisDim: function (point) {
	            var axisDim;
	            var minDist = Infinity;

	            zrUtil.each(this._axesLayout, function (axisLayout, dim) {
	                var localPoint = graphic.applyTransform(point, axisLayout.transform, true);
	                var extent = this._axesMap[dim].getExtent();

	                if (localPoint[0] < extent[0] || localPoint[0] > extent[1]) {
	                    return;
	                }

	                var dist = Math.abs(localPoint[1]);
	                if (dist < minDist) {
	                    minDist = dist;
	                    axisDim = dim;
	                }
	            }, this);

	            return axisDim;
	        }

	    };

	    module.exports = Parallel;


/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var Axis = __webpack_require__(363);

	    /**
	     * @constructor module:echarts/coord/parallel/ParallelAxis
	     * @extends {module:echarts/coord/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     */
	    var ParallelAxis = function (dim, scale, coordExtent, axisType, axisIndex) {

	        Axis.call(this, dim, scale, coordExtent);

	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';

	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.axisIndex = axisIndex;
	    };

	    ParallelAxis.prototype = {

	        constructor: ParallelAxis,

	        /**
	         * Axis model
	         * @param {module:echarts/coord/parallel/AxisModel}
	         */
	        model: null

	    };

	    zrUtil.inherits(ParallelAxis, Axis);

	    module.exports = ParallelAxis;


/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var Component = __webpack_require__(258);

	    __webpack_require__(471);

	    Component.extend({

	        type: 'parallel',

	        dependencies: ['parallelAxis'],

	        /**
	         * @type {module:echarts/coord/parallel/Parallel}
	         */
	        coordinateSystem: null,

	        /**
	         * Each item like: 'dim0', 'dim1', 'dim2', ...
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        dimensions: null,

	        /**
	         * Coresponding to dimensions.
	         * @type {Array.<number>}
	         * @readOnly
	         */
	        parallelAxisIndex: null,

	        layoutMode: 'box',

	        defaultOption: {
	            zlevel: 0,
	            z: 0,
	            left: 80,
	            top: 60,
	            right: 80,
	            bottom: 60,
	            // width: {totalWidth} - left - right,
	            // height: {totalHeight} - top - bottom,

	            layout: 'horizontal',      // 'horizontal' or 'vertical'

	            // FIXME
	            // naming?
	            axisExpandable: false,
	            axisExpandCenter: null,
	            axisExpandCount: 0,
	            axisExpandWidth: 50,      // FIXME '10%' ?

	            parallelAxisDefault: null
	        },

	        /**
	         * @override
	         */
	        init: function () {
	            Component.prototype.init.apply(this, arguments);

	            this.mergeOption({});
	        },

	        /**
	         * @override
	         */
	        mergeOption: function (newOption) {
	            var thisOption = this.option;

	            newOption && zrUtil.merge(thisOption, newOption, true);

	            this._initDimensions();
	        },

	        /**
	         * Whether series or axis is in this coordinate system.
	         * @param {module:echarts/model/Series|module:echarts/coord/parallel/AxisModel} model
	         * @param {module:echarts/model/Global} ecModel
	         */
	        contains: function (model, ecModel) {
	            var parallelIndex = model.get('parallelIndex');
	            return parallelIndex != null
	                && ecModel.getComponent('parallel', parallelIndex) === this;
	        },

	        setAxisExpand: function (opt) {
	            zrUtil.each(
	                ['axisExpandable', 'axisExpandCenter', 'axisExpandCount', 'axisExpandWidth'],
	                function (name) {
	                    if (opt.hasOwnProperty(name)) {
	                        this.option[name] = opt[name];
	                    }
	                },
	                this
	            );
	        },

	        /**
	         * @private
	         */
	        _initDimensions: function () {
	            var dimensions = this.dimensions = [];
	            var parallelAxisIndex = this.parallelAxisIndex = [];

	            var axisModels = zrUtil.filter(this.dependentModels.parallelAxis, function (axisModel) {
	                // Can not use this.contains here, because
	                // initialization has not been completed yet.
	                return axisModel.get('parallelIndex') === this.componentIndex;
	            });

	            zrUtil.each(axisModels, function (axisModel) {
	                dimensions.push('dim' + axisModel.get('dim'));
	                parallelAxisIndex.push(axisModel.componentIndex);
	            });
	        }

	    });



/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	

	    var ComponentModel = __webpack_require__(258);
	    var zrUtil = __webpack_require__(243);
	    var makeStyleMapper = __webpack_require__(254);
	    var axisModelCreator = __webpack_require__(367);
	    var numberUtil = __webpack_require__(246);

	    var AxisModel = ComponentModel.extend({

	        type: 'baseParallelAxis',

	        /**
	         * @type {module:echarts/coord/parallel/Axis}
	         */
	        axis: null,

	        /**
	         * @type {Array.<Array.<number>}
	         * @readOnly
	         */
	        activeIntervals: [],

	        /**
	         * @return {Object}
	         */
	        getAreaSelectStyle: function () {
	            return makeStyleMapper(
	                [
	                    ['fill', 'color'],
	                    ['lineWidth', 'borderWidth'],
	                    ['stroke', 'borderColor'],
	                    ['width', 'width'],
	                    ['opacity', 'opacity']
	                ]
	            ).call(this.getModel('areaSelectStyle'));
	        },

	        /**
	         * The code of this feature is put on AxisModel but not ParallelAxis,
	         * because axisModel can be alive after echarts updating but instance of
	         * ParallelAxis having been disposed. this._activeInterval should be kept
	         * when action dispatched (i.e. legend click).
	         *
	         * @param {Array.<Array<number>>} intervals interval.length === 0
	         *                                          means set all active.
	         * @public
	         */
	        setActiveIntervals: function (intervals) {
	            var activeIntervals = this.activeIntervals = zrUtil.clone(intervals);

	            // Normalize
	            if (activeIntervals) {
	                for (var i = activeIntervals.length - 1; i >= 0; i--) {
	                    numberUtil.asc(activeIntervals[i]);
	                }
	            }
	        },

	        /**
	         * @param {number|string} [value] When attempting to detect 'no activeIntervals set',
	         *                         value can not be input.
	         * @return {string} 'normal': no activeIntervals set,
	         *                  'active',
	         *                  'inactive'.
	         * @public
	         */
	        getActiveState: function (value) {
	            var activeIntervals = this.activeIntervals;

	            if (!activeIntervals.length) {
	                return 'normal';
	            }

	            if (value == null) {
	                return 'inactive';
	            }

	            for (var i = 0, len = activeIntervals.length; i < len; i++) {
	                if (activeIntervals[i][0] <= value && value <= activeIntervals[i][1]) {
	                    return 'active';
	                }
	            }
	            return 'inactive';
	        }

	    });

	    var defaultOption = {

	        type: 'value',

	        /**
	         * @type {Array.<number>}
	         */
	        dim: null, // 0, 1, 2, ...

	        // parallelIndex: null,

	        areaSelectStyle: {
	            width: 20,
	            borderWidth: 1,
	            borderColor: 'rgba(160,197,232)',
	            color: 'rgba(160,197,232)',
	            opacity: 0.3
	        },

	        realtime: true, // Whether realtime update view when select.

	        z: 10
	    };

	    zrUtil.merge(AxisModel.prototype, __webpack_require__(369));

	    function getAxisType(axisName, option) {
	        return option.type || (option.data ? 'category' : 'value');
	    }

	    axisModelCreator('parallel', AxisModel, getAxisType, defaultOption);

	    module.exports = AxisModel;


/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(467);
	    __webpack_require__(473);
	    __webpack_require__(474);



/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);

	    /**
	     * @payload
	     * @property {string} parallelAxisId
	     * @property {Array.<Array.<number>>} intervals
	     */
	    var actionInfo = {
	        type: 'axisAreaSelect',
	        event: 'axisAreaSelected',
	        update: 'updateVisual'
	    };
	    echarts.registerAction(actionInfo, function (payload, ecModel) {
	        ecModel.eachComponent(
	            {mainType: 'parallelAxis', query: payload},
	            function (parallelAxisModel) {
	                parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);
	            }
	        );
	    });

	    /**
	     * @payload
	     */
	    echarts.registerAction('parallelAxisExpand', function (payload, ecModel) {
	        ecModel.eachComponent(
	            {mainType: 'parallel', query: payload},
	            function (parallelModel) {
	                parallelModel.setAxisExpand(payload);
	            }
	        );

	    });


/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var AxisBuilder = __webpack_require__(372);
	    var BrushController = __webpack_require__(475);
	    var graphic = __webpack_require__(282);

	    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];

	    var AxisView = __webpack_require__(240).extendComponentView({

	        type: 'parallelAxis',

	        /**
	         * @override
	         */
	        init: function (ecModel, api) {
	            AxisView.superApply(this, 'init', arguments);

	            /**
	             * @type {module:echarts/component/helper/BrushController}
	             */
	            (this._brushController = new BrushController(api.getZr()))
	                .on('brush', zrUtil.bind(this._onBrush, this));
	        },

	        /**
	         * @override
	         */
	        render: function (axisModel, ecModel, api, payload) {
	            if (fromAxisAreaSelect(axisModel, ecModel, payload)) {
	                return;
	            }

	            this.axisModel = axisModel;
	            this.api = api;

	            this.group.removeAll();

	            var oldAxisGroup = this._axisGroup;
	            this._axisGroup = new graphic.Group();
	            this.group.add(this._axisGroup);

	            if (!axisModel.get('show')) {
	                return;
	            }

	            var coordSys = ecModel.getComponent(
	                'parallel', axisModel.get('parallelIndex')
	            ).coordinateSystem;

	            var areaSelectStyle = axisModel.getAreaSelectStyle();
	            var areaWidth = areaSelectStyle.width;

	            var dim = axisModel.axis.dim;
	            var axisLayout = coordSys.getAxisLayout(dim);

	            // Fetch from axisModel by default.
	            var axisLabelShow;
	            var axisIndex = zrUtil.indexOf(coordSys.dimensions, dim);

	            var axisExpandWindow = axisLayout.axisExpandWindow;
	            if (axisExpandWindow
	                && (axisIndex <= axisExpandWindow[0] || axisIndex >= axisExpandWindow[1])
	            ) {
	                axisLabelShow = false;
	            }

	            var builderOpt = zrUtil.extend(
	                {
	                    axisLabelShow: axisLabelShow,
	                    strokeContainThreshold: areaWidth
	                },
	                axisLayout
	            );

	            var axisBuilder = new AxisBuilder(axisModel, builderOpt);

	            zrUtil.each(elementList, axisBuilder.add, axisBuilder);

	            this._axisGroup.add(axisBuilder.getGroup());

	            this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, areaWidth);

	            graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);
	        },

	        _refreshBrushController: function (builderOpt, areaSelectStyle, axisModel, areaWidth) {
	            // After filtering, axis may change, select area needs to be update.
	            var axis = axisModel.axis;
	            var coverInfoList = zrUtil.map(axisModel.activeIntervals, function (interval) {
	                return {
	                    brushType: 'lineX',
	                    panelId: 'pl',
	                    range: [
	                        axis.dataToCoord(interval[0], true),
	                        axis.dataToCoord(interval[1], true)
	                    ]
	                };
	            });

	            var extent = axis.getExtent();
	            var extentLen = extent[1] - extent[0];
	            var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.

	            // width/height might be negative, which will be
	            // normalized in BoundingRect.
	            var rect = graphic.BoundingRect.create({
	                x: extent[0],
	                y: -areaWidth / 2,
	                width: extentLen,
	                height: areaWidth
	            });
	            rect.x -= extra;
	            rect.width += 2 * extra;

	            this._brushController
	                .mount({
	                    enableGlobalPan: true,
	                    rotation: builderOpt.rotation,
	                    position: builderOpt.position
	                })
	                .setPanels([{
	                    panelId: 'pl',
	                    rect: rect
	                }])
	                .enableBrush({
	                    brushType: 'lineX',
	                    brushStyle: areaSelectStyle,
	                    removeOnClick: true
	                })
	                .updateCovers(coverInfoList);
	        },

	        _onBrush: function (coverInfoList, opt) {
	            // Do not cache these object, because the mey be changed.
	            var axisModel = this.axisModel;
	            var axis = axisModel.axis;

	            var intervals = zrUtil.map(coverInfoList, function (coverInfo) {
	                return [
	                    axis.coordToData(coverInfo.range[0], true),
	                    axis.coordToData(coverInfo.range[1], true)
	                ];
	            });

	            // If realtime is true, action is not dispatched on drag end, because
	            // the drag end emits the same params with the last drag move event,
	            // and may have some delay when using touch pad.
	            if (!axisModel.option.realtime === opt.isEnd || opt.removeOnClick) { // jshint ignore:line
	                this.api.dispatchAction({
	                    type: 'axisAreaSelect',
	                    parallelAxisId: axisModel.id,
	                    intervals: intervals
	                });
	            }
	        },

	        /**
	         * @override
	         */
	        dispose: function () {
	            this._brushController.dispose();
	        }
	    });

	    function fromAxisAreaSelect(axisModel, ecModel, payload) {
	        return payload
	            && payload.type === 'axisAreaSelect'
	            && ecModel.findComponents(
	                {mainType: 'parallelAxis', query: payload}
	            )[0] === axisModel;
	    }

	    module.exports = AxisView;


/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Box selection tool.
	 *
	 * @module echarts/component/helper/BrushController
	 */



	    var Eventful = __webpack_require__(272);
	    var zrUtil = __webpack_require__(243);
	    var BoundingRect = __webpack_require__(248);
	    var graphic = __webpack_require__(282);
	    var interactionMutex = __webpack_require__(417);
	    var DataDiffer = __webpack_require__(338);

	    var curry = zrUtil.curry;
	    var each = zrUtil.each;
	    var map = zrUtil.map;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var mathPow = Math.pow;

	    var COVER_Z = 10000;
	    var UNSELECT_THRESHOLD = 6;
	    var MIN_RESIZE_LINE_WIDTH = 6;
	    var MUTEX_RESOURCE_KEY = 'globalPan';

	    var DIRECTION_MAP = {
	        w: [0, 0],
	        e: [0, 1],
	        n: [1, 0],
	        s: [1, 1]
	    };
	    var CURSOR_MAP = {
	        w: 'ew',
	        e: 'ew',
	        n: 'ns',
	        s: 'ns',
	        ne: 'nesw',
	        sw: 'nesw',
	        nw: 'nwse',
	        se: 'nwse'
	    };
	    var DEFAULT_BRUSH_OPT = {
	        brushStyle: {
	            lineWidth: 2,
	            stroke: 'rgba(0,0,0,0.3)',
	            fill: 'rgba(0,0,0,0.1)'
	        },
	        transformable: true,
	        brushMode: 'single',
	        removeOnClick: false
	    };

	    var baseUID = 0;

	    /**
	     * @alias module:echarts/component/helper/BrushController
	     * @constructor
	     * @mixin {module:zrender/mixin/Eventful}
	     * @event module:echarts/component/helper/BrushController#brush
	     *        params:
	     *            areas: Array.<Array>, coord relates to container group,
	     *                                    If no container specified, to global.
	     *            opt {
	     *                isEnd: boolean,
	     *                removeOnClick: boolean
	     *            }
	     *
	     * @param {module:zrender/zrender~ZRender} zr
	     */
	    function BrushController(zr) {

	        if (__DEV__) {
	            zrUtil.assert(zr);
	        }

	        Eventful.call(this);

	        /**
	         * @type {module:zrender/zrender~ZRender}
	         * @private
	         */
	        this._zr = zr;

	        /**
	         * @type {module:zrender/container/Group}
	         * @readOnly
	         */
	        this.group = new graphic.Group();

	        /**
	         * Only for drawing (after enabledBrush).
	         * @private
	         * @type {string}
	         */
	        this._brushType;

	        /**
	         * Only for drawing (after enabledBrush).
	         * @private
	         * @type {Object}
	         */
	        this._brushOption;

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._panels;

	        /**
	         * @private
	         * @type {Array.<nubmer>}
	         */
	        this._track = [];

	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._dragging;

	        /**
	         * @private
	         * @type {Array}
	         */
	        this._covers = [];

	        /**
	         * @private
	         * @type {moudule:zrender/container/Group}
	         */
	        this._creatingCover;

	        /**
	         * true means global panel
	         * @private
	         * @type {module:zrender/container/Group|boolean}
	         */
	        this._creatingPanel;

	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._enableGlobalPan;

	        /**
	         * @private
	         * @type {boolean}
	         */
	        if (__DEV__) {
	            this._mounted;
	        }

	        /**
	         * @private
	         * @type {string}
	         */
	        this._uid = 'brushController_' + baseUID++;

	        /**
	         * @private
	         * @type {Object}
	         */
	        this._handlers = {};
	        each(mouseHandlers, function (handler, eventName) {
	            this._handlers[eventName] = zrUtil.bind(handler, this);
	        }, this);
	    }

	    BrushController.prototype = {

	        constructor: BrushController,

	        /**
	         * If set to null/undefined/false, select disabled.
	         * @param {Object} brushOption
	         * @param {string|boolean} brushOption.brushType 'line', 'rect', 'polygon' or false
	         *                          If pass false/null/undefined, disable brush.
	         * @param {number} [brushOption.brushMode='single'] 'single' or 'multiple'
	         * @param {boolean} [brushOption.transformable=true]
	         * @param {boolean} [brushOption.removeOnClick=false]
	         * @param {Object} [brushOption.brushStyle]
	         * @param {number} [brushOption.brushStyle.width]
	         * @param {number} [brushOption.brushStyle.lineWidth]
	         * @param {string} [brushOption.brushStyle.stroke]
	         * @param {string} [brushOption.brushStyle.fill]
	         */
	        enableBrush: function (brushOption) {
	            if (__DEV__) {
	                zrUtil.assert(this._mounted);
	            }

	            this._brushType && doDisableBrush(this);
	            brushOption.brushType && doEnableBrush(this, brushOption);

	            return this;
	        },

	        /**
	         * @param {Array.<Object>} panelOpts If not pass, it is global brush.
	         *        Each items: {panelId, rect}
	         */
	        setPanels: function (panelOpts) {
	            var oldPanels = this._panels || {};
	            var newPanels = this._panels = panelOpts && panelOpts.length && {};
	            var thisGroup = this.group;

	            newPanels && each(panelOpts, function (panelOpt) {
	                var panelId = panelOpt.panelId;
	                var panel = oldPanels[panelId];
	                if (!panel) {
	                    panel = new graphic.Rect({
	                        silent: true,
	                        invisible: true
	                    });
	                    thisGroup.add(panel);
	                }

	                var rect = panelOpt.rect;
	                // Using BoundingRect to normalize negative width/height.
	                if (!(rect instanceof BoundingRect)) {
	                    rect = BoundingRect.create(rect);
	                }

	                panel.attr('shape', rect.plain());
	                panel.__brushPanelId = panelId;
	                newPanels[panelId] = panel;
	                oldPanels[panelId] = null;
	            });

	            each(oldPanels, function (panel) {
	                panel && thisGroup.remove(panel);
	            });

	            return this;
	        },

	        /**
	         * @param {Object} [opt]
	         * @return {boolean} [opt.enableGlobalPan=false]
	         * @return {boolean} [opt.position=[0, 0]]
	         * @return {boolean} [opt.rotation=0]
	         * @return {boolean} [opt.scale=[1, 1]]
	         */
	        mount: function (opt) {
	            opt = opt || {};

	            if (__DEV__) {
	                this._mounted = true; // should be at first.
	            }

	            this._enableGlobalPan = opt.enableGlobalPan;

	            var thisGroup = this.group;
	            this._zr.add(thisGroup);

	            thisGroup.attr({
	                position: opt.position || [0, 0],
	                rotation: opt.rotation || 0,
	                scale: opt.scale || [1, 1]
	            });

	            return this;
	        },

	        eachCover: function (cb, context) {
	            each(this._covers, cb, context);
	        },

	        /**
	         * Update covers.
	         * @param {Array.<Object>} brushOptionList Like:
	         *        [
	         *            {id: 'xx', brushType: 'line', range: [23, 44], brushStyle, transformable},
	         *            {id: 'yy', brushType: 'rect', range: [[23, 44], [23, 54]]},
	         *            ...
	         *        ]
	         *        `brushType` is required in each cover info.
	         *        `id` is not mandatory.
	         *        `brushStyle`, `transformable` is not mandatory, use DEFAULT_BRUSH_OPT by default.
	         *        If brushOptionList is null/undefined, all covers removed.
	         */
	        updateCovers: function (brushOptionList) {
	            if (__DEV__) {
	                zrUtil.assert(this._mounted);
	            }

	            brushOptionList = zrUtil.map(brushOptionList, function (brushOption) {
	                return zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	            });

	            var tmpIdPrefix = '\0-brush-index-';
	            var oldCovers = this._covers;
	            var newCovers = this._covers = [];
	            var controller = this;
	            var creatingCover = this._creatingCover;

	            (new DataDiffer(oldCovers, brushOptionList, oldGetKey, getKey))
	                .add(addOrUpdate)
	                .update(addOrUpdate)
	                .remove(remove)
	                .execute();

	            return this;

	            function getKey(brushOption, index) {
	                return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index)
	                    + '-' + brushOption.brushType;
	            }

	            function oldGetKey(cover, index) {
	                return getKey(cover.__brushOption, index);
	            }

	            function addOrUpdate(newIndex, oldIndex) {
	                var newBrushOption = brushOptionList[newIndex];
	                // Consider setOption in event listener of brushSelect,
	                // where updating cover when creating should be forbiden.
	                if (oldIndex != null && oldCovers[oldIndex] === creatingCover) {
	                    newCovers[newIndex] = oldCovers[oldIndex];
	                }
	                else {
	                    var cover = newCovers[newIndex] = oldIndex != null
	                        ? (
	                            oldCovers[oldIndex].__brushOption = newBrushOption,
	                            oldCovers[oldIndex]
	                        )
	                        : endCreating(controller, createCover(controller, newBrushOption));
	                    updateCoverAfterCreation(controller, cover);
	                }
	            }

	            function remove(oldIndex) {
	                if (oldCovers[oldIndex] !== creatingCover) {
	                    controller.group.remove(oldCovers[oldIndex]);
	                }
	            }
	        },

	        unmount: function () {
	            this.enableBrush(false);

	            // container may 'removeAll' outside.
	            clearCovers(this);
	            this._zr.remove(this.group);

	            if (__DEV__) {
	                this._mounted = false; // should be at last.
	            }

	            return this;
	        },

	        dispose: function () {
	            this.unmount();
	            this.off();
	        }
	    };

	    zrUtil.mixin(BrushController, Eventful);


	    function doEnableBrush(controller, brushOption) {
	        var zr = controller._zr;

	        // Consider roam, which takes globalPan too.
	        if (!controller._enableGlobalPan) {
	            interactionMutex.take(zr, MUTEX_RESOURCE_KEY, controller._uid);
	        }

	        each(controller._handlers, function (handler, eventName) {
	            zr.on(eventName, handler);
	        });

	        controller._brushType = brushOption.brushType;
	        controller._brushOption = zrUtil.merge(zrUtil.clone(DEFAULT_BRUSH_OPT), brushOption, true);
	    }

	    function doDisableBrush(controller) {
	        var zr = controller._zr;

	        interactionMutex.release(zr, MUTEX_RESOURCE_KEY, controller._uid);

	        each(controller._handlers, function (handler, eventName) {
	            zr.off(eventName, handler);
	        });

	        controller._brushType = controller._brushOption = null;
	    }

	    function createCover(controller, brushOption) {
	        var cover = coverRenderers[brushOption.brushType].createCover(controller, brushOption);
	        updateZ(cover);
	        cover.__brushOption = brushOption;
	        controller.group.add(cover);
	        return cover;
	    }

	    function endCreating(controller, creatingCover) {
	        var coverRenderer = getCoverRenderer(creatingCover);
	        if (coverRenderer.endCreating) {
	            coverRenderer.endCreating(controller, creatingCover);
	            updateZ(creatingCover);
	        }
	        return creatingCover;
	    }

	    function updateCoverShape(controller, cover) {
	        var brushOption = cover.__brushOption;
	        getCoverRenderer(cover).updateCoverShape(
	            controller, cover, brushOption.range, brushOption
	        );
	    }

	    function updateZ(group) {
	        group.traverse(function (el) {
	            el.z = COVER_Z;
	            el.z2 = COVER_Z; // Consider in given container.
	        });
	    }

	    function updateCoverAfterCreation(controller, cover) {
	        getCoverRenderer(cover).updateCommon(controller, cover);
	        updateCoverShape(controller, cover);
	    }

	    function getCoverRenderer(cover) {
	        return coverRenderers[cover.__brushOption.brushType];
	    }

	    function getPanelByPoint(controller, x, y) {
	        var panels = controller._panels;
	        if (!panels) {
	            return true; // Global panel
	        }
	        var panel;
	        each(panels, function (pn) {
	            pn.contain(x, y) && (panel = pn);
	        });
	        return panel;
	    }

	    function getPanelByCover(controller, cover) {
	        var panels = controller._panels;
	        if (!panels) {
	            return true; // Global panel
	        }
	        var panelId = cover.__brushOption.panelId;
	        // User may give cover without coord sys info,
	        // which is then treated as global panel.
	        return panelId != null ? panels[panelId] : true;
	    }

	    function clearCovers(controller) {
	        var covers = controller._covers;
	        var originalLength = covers.length;
	        each(covers, function (cover) {
	            controller.group.remove(cover);
	        }, controller);
	        covers.length = 0;

	        return !!originalLength;
	    }

	    function trigger(controller, opt) {
	        var areas = map(controller._covers, function (cover) {
	            var brushOption = cover.__brushOption;
	            var range = zrUtil.clone(brushOption.range);

	            return {
	                brushType: brushOption.brushType,
	                panelId: brushOption.panelId,
	                range: range
	            };
	        });

	        controller.trigger('brush', areas, {
	            isEnd: !!opt.isEnd,
	            removeOnClick: !!opt.removeOnClick
	        });
	    }

	    function shouldShowCover(controller) {
	        var track = controller._track;

	        if (!track.length) {
	            return false;
	        }

	        var p2 = track[track.length - 1];
	        var p1 = track[0];
	        var dx = p2[0] - p1[0];
	        var dy = p2[1] - p1[1];
	        var dist = mathPow(dx * dx + dy * dy, 0.5);

	        return dist > UNSELECT_THRESHOLD;
	    }

	    function getTrackEnds(track) {
	        var tail = track.length - 1;
	        tail < 0 && (tail = 0);
	        return [track[0], track[tail]];
	    }

	    function createBaseRectCover(doDrift, controller, brushOption, edgeNames) {
	        var cover = new graphic.Group();

	        cover.add(new graphic.Rect({
	            name: 'main',
	            style: makeStyle(brushOption),
	            silent: true,
	            draggable: true,
	            cursor: 'move',
	            drift: curry(doDrift, controller, cover, 'nswe'),
	            ondragend: curry(trigger, controller, {isEnd: true})
	        }));

	        each(
	            edgeNames,
	            function (name) {
	                cover.add(new graphic.Rect({
	                    name: name,
	                    style: {opacity: 0},
	                    draggable: true,
	                    silent: true,
	                    invisible: true,
	                    drift: curry(doDrift, controller, cover, name),
	                    ondragend: curry(trigger, controller, {isEnd: true})
	                }));
	            }
	        );

	        return cover;
	    }

	    function updateBaseRect(controller, cover, localRange, brushOption) {
	        var lineWidth = brushOption.brushStyle.lineWidth || 0;
	        var handleSize = mathMax(lineWidth, MIN_RESIZE_LINE_WIDTH);
	        var x = localRange[0][0];
	        var y = localRange[1][0];
	        var xa = x - lineWidth / 2;
	        var ya = y - lineWidth / 2;
	        var x2 = localRange[0][1];
	        var y2 = localRange[1][1];
	        var x2a = x2 - handleSize + lineWidth / 2;
	        var y2a = y2 - handleSize + lineWidth / 2;
	        var width = x2 - x;
	        var height = y2 - y;
	        var widtha = width + lineWidth;
	        var heighta = height + lineWidth;

	        updateRectShape(controller, cover, 'main', x, y, width, height);

	        if (brushOption.transformable) {
	            updateRectShape(controller, cover, 'w', xa, ya, handleSize, heighta);
	            updateRectShape(controller, cover, 'e', x2a, ya, handleSize, heighta);
	            updateRectShape(controller, cover, 'n', xa, ya, widtha, handleSize);
	            updateRectShape(controller, cover, 's', xa, y2a, widtha, handleSize);

	            updateRectShape(controller, cover, 'nw', xa, ya, handleSize, handleSize);
	            updateRectShape(controller, cover, 'ne', x2a, ya, handleSize, handleSize);
	            updateRectShape(controller, cover, 'sw', xa, y2a, handleSize, handleSize);
	            updateRectShape(controller, cover, 'se', x2a, y2a, handleSize, handleSize);
	        }
	    }

	    function updateCommon(controller, cover) {
	        var brushOption = cover.__brushOption;
	        var transformable = brushOption.transformable;

	        var mainEl = cover.childAt(0);
	        mainEl.useStyle(makeStyle(brushOption));
	        mainEl.attr({
	            silent: !transformable,
	            cursor: transformable ? 'move' : 'default'
	        });

	        each(
	            ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw'],
	            function (name) {
	                var el = cover.childOfName(name);
	                var globalDir = getGlobalDirection(controller, name);

	                el && el.attr({
	                    silent: !transformable,
	                    invisible: !transformable,
	                    cursor: transformable ? CURSOR_MAP[globalDir] + '-resize' : null
	                });
	            }
	        );
	    }

	    function updateRectShape(controller, cover, name, x, y, w, h) {
	        var el = cover.childOfName(name);
	        el && el.setShape(pointsToRect(
	            clipByPanel(controller, cover, [[x, y], [x + w, y + h]])
	        ));
	    }

	    function makeStyle(brushOption) {
	        return zrUtil.defaults({strokeNoScale: true}, brushOption.brushStyle);
	    }

	    function formatRectRange(x, y, x2, y2) {
	        var min = [mathMin(x, x2), mathMin(y, y2)];
	        var max = [mathMax(x, x2), mathMax(y, y2)];

	        return [
	            [min[0], max[0]], // x range
	            [min[1], max[1]] // y range
	        ];
	    }

	    function getTransform(controller) {
	        return graphic.getTransform(controller.group);
	    }

	    function getGlobalDirection(controller, localDirection) {
	        if (localDirection.length > 1) {
	            localDirection = localDirection.split('');
	            var globalDir = [
	                getGlobalDirection(controller, localDirection[0]),
	                getGlobalDirection(controller, localDirection[1])
	            ];
	            (globalDir[0] === 'e' || globalDir[0] === 'w') && globalDir.reverse();
	            return globalDir.join('');
	        }
	        else {
	            var map = {w: 'left', e: 'right', n: 'top', s: 'bottom'};
	            var inverseMap = {left: 'w', right: 'e', top: 'n', bottom: 's'};
	            var globalDir = graphic.transformDirection(
	                map[localDirection], getTransform(controller)
	            );
	            return inverseMap[globalDir];
	        }
	    }

	    function driftRect(toRectRange, fromRectRange, controller, cover, name, dx, dy, e) {
	        var brushOption = cover.__brushOption;
	        var rectRange = toRectRange(brushOption.range);
	        var localDelta = toLocalDelta(controller, dx, dy);

	        each(name.split(''), function (namePart) {
	            var ind = DIRECTION_MAP[namePart];
	            rectRange[ind[0]][ind[1]] += localDelta[ind[0]];
	        });

	        brushOption.range = fromRectRange(formatRectRange(
	            rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]
	        ));

	        updateCoverAfterCreation(controller, cover);
	        trigger(controller, {isEnd: false});
	    }

	    function driftPolygon(controller, cover, dx, dy, e) {
	        var range = cover.__brushOption.range;
	        var localDelta = toLocalDelta(controller, dx, dy);

	        each(range, function (point) {
	            point[0] += localDelta[0];
	            point[1] += localDelta[1];
	        });

	        updateCoverAfterCreation(controller, cover);
	        trigger(controller, {isEnd: false});
	    }

	    function toLocalDelta(controller, dx, dy) {
	        var thisGroup = controller.group;
	        var localD = thisGroup.transformCoordToLocal(dx, dy);
	        var localZero = thisGroup.transformCoordToLocal(0, 0);

	        return [localD[0] - localZero[0], localD[1] - localZero[1]];
	    }

	    function clipByPanel(controller, cover, data) {
	        var panel = getPanelByCover(controller, cover);
	        if (panel === true) { // Global panel
	            return zrUtil.clone(data);
	        }

	        var panelRect = panel.getBoundingRect();

	        return zrUtil.map(data, function (point) {
	            var x = point[0];
	            x = mathMax(x, panelRect.x);
	            x = mathMin(x, panelRect.x + panelRect.width);
	            var y = point[1];
	            y = mathMax(y, panelRect.y);
	            y = mathMin(y, panelRect.y + panelRect.height);
	            return [x, y];
	        });
	    }

	    function pointsToRect(points) {
	        var xmin = mathMin(points[0][0], points[1][0]);
	        var ymin = mathMin(points[0][1], points[1][1]);
	        var xmax = mathMax(points[0][0], points[1][0]);
	        var ymax = mathMax(points[0][1], points[1][1]);

	        return {
	            x: xmin,
	            y: ymin,
	            width: xmax - xmin,
	            height: ymax - ymin
	        };
	    }

	    function resetCursor(controller, e) {
	        var x = e.offsetX;
	        var y = e.offsetY;
	        var zr = controller._zr;

	        if (controller._brushType) { // If active
	            var panels = controller._panels;
	            var covers = controller._covers;
	            var inCover;

	            for (var i = 0; i < covers.length; i++) {
	                if (coverRenderers[covers[i].__brushOption.brushType].contain(covers[i], x, y)) {
	                    inCover = true;
	                    break;
	                }
	            }

	            if (!inCover) {
	                if (panels) { // Brush on panels
	                    each(panels, function (panel) {
	                        panel.contain(x, y) && zr.setCursorStyle('crosshair');
	                    });
	                }
	                else { // Global brush
	                    zr.setCursorStyle('crosshair');
	                }
	            }
	        }
	    }

	    function preventDefault(e) {
	        var rawE = e.event;
	        rawE.preventDefault && rawE.preventDefault();
	    }

	    function mainShapeContain(cover, x, y) {
	        return cover.childOfName('main').contain(x, y);
	    }

	    function updateCoverByMouse(controller, e, isEnd) {
	        var x = e.offsetX;
	        var y = e.offsetY;
	        var creatingCover = controller._creatingCover;
	        var panel = controller._creatingPanel;
	        var thisBrushOption = controller._brushOption;
	        var eventParams;

	        controller._track.push(controller.group.transformCoordToLocal(x, y));

	        if (shouldShowCover(controller) || creatingCover) {

	            if (panel && !creatingCover) {
	                thisBrushOption.brushMode === 'single' && clearCovers(controller);
	                var brushOption = zrUtil.clone(thisBrushOption);
	                brushOption.panelId = panel === true ? null : panel.__brushPanelId;
	                creatingCover = controller._creatingCover = createCover(controller, brushOption);
	                controller._covers.push(creatingCover);
	            }

	            if (creatingCover) {
	                var coverRenderer = coverRenderers[controller._brushType];
	                var coverBrushOption = creatingCover.__brushOption;

	                coverBrushOption.range = coverRenderer.getCreatingRange(
	                    clipByPanel(controller, creatingCover, controller._track)
	                );

	                if (isEnd) {
	                    endCreating(controller, creatingCover);
	                    coverRenderer.updateCommon(controller, creatingCover);
	                }

	                updateCoverShape(controller, creatingCover);

	                eventParams = {isEnd: isEnd};
	            }
	        }
	        else if (
	            isEnd
	            && thisBrushOption.brushMode === 'single'
	            && thisBrushOption.removeOnClick
	        ) {
	            // Help user to remove covers easily, only by a tiny drag, in 'single' mode.
	            // But a single click do not clear covers, because user may have casual
	            // clicks (for example, click on other component and do not expect covers
	            // disappear).
	            // Only some cover removed, trigger action, but not every click trigger action.
	            if (getPanelByPoint(controller, x, y) && clearCovers(controller)) {
	                eventParams = {isEnd: isEnd, removeOnClick: true};
	            }
	        }

	        return eventParams;
	    }

	    var mouseHandlers = {

	        mousedown: function (e) {
	            if (this._dragging) {
	                // In case some browser do not support globalOut,
	                // and release mose out side the browser.
	                handleDragEnd.call(this, e);
	            }
	            else if (!e.target || !e.target.draggable) {

	                preventDefault(e);

	                var x = e.offsetX;
	                var y = e.offsetY;

	                this._creatingCover = null;
	                var panel = this._creatingPanel = getPanelByPoint(this, x, y);

	                if (panel) {
	                    this._dragging = true;
	                    this._track = [this.group.transformCoordToLocal(x, y)];
	                }
	            }
	        },

	        mousemove: function (e) {
	            // set Cursor
	            resetCursor(this, e);

	            if (this._dragging) {

	                preventDefault(e);

	                var eventParams = updateCoverByMouse(this, e, false);

	                eventParams && trigger(this, eventParams);
	            }
	        },

	        mouseup: handleDragEnd //,

	        // FIXME
	        // in tooltip, globalout should not be triggered.
	        // globalout: handleDragEnd
	    };

	    function handleDragEnd(e) {
	        if (this._dragging) {

	            preventDefault(e);

	            var eventParams = updateCoverByMouse(this, e, true);

	            this._dragging = false;
	            this._track = [];
	            this._creatingCover = null;

	            // trigger event shoule be at final, after procedure will be nested.
	            eventParams && trigger(this, eventParams);
	        }
	    }

	    /**
	     * key: brushType
	     * @type {Object}
	     */
	    var coverRenderers = {

	        lineX: getLineRenderer(0),

	        lineY: getLineRenderer(1),

	        rect: {
	            createCover: function (controller, brushOption) {
	                return createBaseRectCover(
	                    curry(
	                        driftRect,
	                        function (range) {
	                            return range;
	                        },
	                        function (range) {
	                            return range;
	                        }
	                    ),
	                    controller,
	                    brushOption,
	                    ['w', 'e', 'n', 's', 'se', 'sw', 'ne', 'nw']
	                );
	            },
	            getCreatingRange: function (localTrack) {
	                var ends = getTrackEnds(localTrack);
	                return formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);
	            },
	            updateCoverShape: function (controller, cover, localRange, brushOption) {
	                updateBaseRect(controller, cover, localRange, brushOption);
	            },
	            updateCommon: updateCommon,
	            contain: mainShapeContain
	        },

	        polygon: {
	            createCover: function (controller, brushOption) {
	                var cover = new graphic.Group();

	                // Do not use graphic.Polygon because graphic.Polyline do not close the
	                // border of the shape when drawing, which is a better experience for user.
	                cover.add(new graphic.Polyline({
	                    name: 'main',
	                    style: makeStyle(brushOption),
	                    silent: true
	                }));

	                return cover;
	            },
	            getCreatingRange: function (localTrack) {
	                return localTrack;
	            },
	            endCreating: function (controller, cover) {
	                cover.remove(cover.childAt(0));
	                // Use graphic.Polygon close the shape.
	                cover.add(new graphic.Polygon({
	                    name: 'main',
	                    draggable: true,
	                    drift: curry(driftPolygon, controller, cover),
	                    ondragend: curry(trigger, controller, {isEnd: true})
	                }));
	            },
	            updateCoverShape: function (controller, cover, localRange, brushOption) {
	                cover.childAt(0).setShape({
	                    points: clipByPanel(controller, cover, localRange)
	                });
	            },
	            updateCommon: updateCommon,
	            contain: mainShapeContain
	        }
	    };

	    function getLineRenderer(xyIndex) {
	        return {
	            createCover: function (controller, brushOption) {
	                return createBaseRectCover(
	                    curry(
	                        driftRect,
	                        function (range) {
	                            var rectRange = [range, [0, 100]];
	                            xyIndex && rectRange.reverse();
	                            return rectRange;
	                        },
	                        function (rectRange) {
	                            return rectRange[xyIndex];
	                        }
	                    ),
	                    controller,
	                    brushOption,
	                    [['w', 'e'], ['n', 's']][xyIndex]
	                );
	            },
	            getCreatingRange: function (localTrack) {
	                var ends = getTrackEnds(localTrack);
	                var min = mathMin(ends[0][xyIndex], ends[1][xyIndex]);
	                var max = mathMax(ends[0][xyIndex], ends[1][xyIndex]);

	                return [min, max];
	            },
	            updateCoverShape: function (controller, cover, localRange, brushOption) {
	                var brushWidth = brushOption.brushStyle.width;
	                var otherExtent;
	                // If brushWidth not specified, fit the panel.
	                if (brushWidth == null) {
	                    var panel = getPanelByCover(controller, cover);
	                    var base = 0;
	                    if (panel !== true) {
	                        var rect = panel.getBoundingRect();
	                        brushWidth = xyIndex ? rect.width : rect.height;
	                        base = xyIndex ? rect.x : rect.y;
	                    }
	                    // FIXME
	                    // do not support global panel yet.
	                    otherExtent = [base, base + (brushWidth || 0)];
	                }
	                else {
	                    otherExtent = [-brushWidth / 2, brushWidth / 2];
	                }
	                var rectRange = [localRange, otherExtent];
	                xyIndex && rectRange.reverse();

	                updateBaseRect(controller, cover, rectRange, brushOption);
	            },
	            updateCommon: updateCommon,
	            contain: mainShapeContain
	        };
	    }

	    module.exports = BrushController;


/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);

	    module.exports = function (option) {
	        createParallelIfNeeded(option);
	        mergeAxisOptionFromParallel(option);
	    };

	    /**
	     * Create a parallel coordinate if not exists.
	     * @inner
	     */
	    function createParallelIfNeeded(option) {
	        if (option.parallel) {
	            return;
	        }

	        var hasParallelSeries = false;

	        zrUtil.each(option.series, function (seriesOpt) {
	            if (seriesOpt && seriesOpt.type === 'parallel') {
	                hasParallelSeries = true;
	            }
	        });

	        if (hasParallelSeries) {
	            option.parallel = [{}];
	        }
	    }

	    /**
	     * Merge aixs definition from parallel option (if exists) to axis option.
	     * @inner
	     */
	    function mergeAxisOptionFromParallel(option) {
	        var axes = modelUtil.normalizeToArray(option.parallelAxis);

	        zrUtil.each(axes, function (axisOption) {
	            if (!zrUtil.isObject(axisOption)) {
	                return;
	            }

	            var parallelIndex = axisOption.parallelIndex || 0;
	            var parallelOption = modelUtil.normalizeToArray(option.parallel)[parallelIndex];

	            if (parallelOption && parallelOption.parallelAxisDefault) {
	                zrUtil.merge(axisOption, parallelOption.parallelAxisDefault, false);
	            }
	        });
	    }



/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	

	    var List = __webpack_require__(337);
	    var zrUtil = __webpack_require__(243);
	    var SeriesModel = __webpack_require__(267);
	    var completeDimensions = __webpack_require__(342);

	    module.exports = SeriesModel.extend({

	        type: 'series.parallel',

	        dependencies: ['parallel'],

	        getInitialData: function (option, ecModel) {
	            var parallelModel = ecModel.getComponent(
	                'parallel', this.get('parallelIndex')
	            );
	            var parallelAxisIndices = parallelModel.parallelAxisIndex;

	            var rawData = option.data;
	            var modelDims = parallelModel.dimensions;

	            var dataDims = generateDataDims(modelDims, rawData);

	            var dataDimsInfo = zrUtil.map(dataDims, function (dim, dimIndex) {

	                var modelDimsIndex = zrUtil.indexOf(modelDims, dim);
	                var axisModel = modelDimsIndex >= 0 && ecModel.getComponent(
	                    'parallelAxis', parallelAxisIndices[modelDimsIndex]
	                );

	                if (axisModel && axisModel.get('type') === 'category') {
	                    translateCategoryValue(axisModel, dim, rawData);
	                    return {name: dim, type: 'ordinal'};
	                }
	                else if (modelDimsIndex < 0) {
	                    return completeDimensions.guessOrdinal(rawData, dimIndex)
	                        ? {name: dim, type: 'ordinal'}
	                        : dim;
	                }
	                else {
	                    return dim;
	                }
	            });

	            var list = new List(dataDimsInfo, this);
	            list.initData(rawData);

	            // Anication is forbiden in progressive data mode.
	            if (this.option.progressive) {
	                this.option.animation = false;
	            }

	            return list;
	        },

	        /**
	         * User can get data raw indices on 'axisAreaSelected' event received.
	         *
	         * @public
	         * @param {string} activeState 'active' or 'inactive' or 'normal'
	         * @return {Array.<number>} Raw indices
	         */
	        getRawIndicesByActiveState: function (activeState) {
	            var coordSys = this.coordinateSystem;
	            var data = this.getData();
	            var indices = [];

	            coordSys.eachActiveState(data, function (theActiveState, dataIndex) {
	                if (activeState === theActiveState) {
	                    indices.push(data.getRawIndex(dataIndex));
	                }
	            });

	            return indices;
	        },

	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠

	            coordinateSystem: 'parallel',
	            parallelIndex: 0,

	            label: {
	                normal: {
	                    show: false
	                },
	                emphasis: {
	                    show: false
	                }
	            },

	            inactiveOpacity: 0.05,
	            activeOpacity: 1,

	            lineStyle: {
	                normal: {
	                    width: 1,
	                    opacity: 0.45,
	                    type: 'solid'
	                }
	            },
	            progressive: false, // 100
	            smooth: false,

	            animationEasing: 'linear'
	        }
	    });

	    function translateCategoryValue(axisModel, dim, rawData) {
	        var axisData = axisModel.get('data');
	        var numberDim = convertDimNameToNumber(dim);

	        if (axisData && axisData.length) {
	            zrUtil.each(rawData, function (dataItem) {
	                if (!dataItem) {
	                    return;
	                }
	                // FIXME
	                // time consuming, should use hash?
	                var index = zrUtil.indexOf(axisData, dataItem[numberDim]);
	                dataItem[numberDim] = index >= 0 ? index : NaN;
	            });
	        }
	        // FIXME
	        // 如果没有设置axis data, 应自动算出，或者提示。
	    }

	    function convertDimNameToNumber(dimName) {
	        return +dimName.replace('dim', '');
	    }

	    function generateDataDims(modelDims, rawData) {
	        // parallelModel.dimension should not be regarded as data
	        // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];

	        // We detect max dim by parallelModel.dimensions and fist
	        // item in rawData arbitrarily.
	        var maxDimNum = 0;
	        zrUtil.each(modelDims, function (dimName) {
	            var numberDim = convertDimNameToNumber(dimName);
	            numberDim > maxDimNum && (maxDimNum = numberDim);
	        });

	        var firstItem = rawData[0];
	        if (firstItem && firstItem.length - 1 > maxDimNum) {
	            maxDimNum = firstItem.length - 1;
	        }

	        var dataDims = [];
	        for (var i = 0; i <= maxDimNum; i++) {
	            dataDims.push('dim' + i);
	        }

	        return dataDims;
	    }


/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	

	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);

	    var SMOOTH = 0.3;

	    var ParallelView = __webpack_require__(281).extend({

	        type: 'parallel',

	        init: function () {

	            /**
	             * @type {module:zrender/container/Group}
	             * @private
	             */
	            this._dataGroup = new graphic.Group();

	            this.group.add(this._dataGroup);

	            /**
	             * @type {module:echarts/data/List}
	             */
	            this._data;
	        },

	        /**
	         * @override
	         */
	        render: function (seriesModel, ecModel, api, payload) {
	            this._renderForNormal(seriesModel);
	            // this[
	            //     seriesModel.option.progressive
	            //         ? '_renderForProgressive'
	            //         : '_renderForNormal'
	            // ](seriesModel);
	        },

	        dispose: function () {},

	        /**
	         * @private
	         */
	        _renderForNormal: function (seriesModel) {
	            var dataGroup = this._dataGroup;
	            var data = seriesModel.getData();
	            var oldData = this._data;
	            var coordSys = seriesModel.coordinateSystem;
	            var dimensions = coordSys.dimensions;
	            var option = seriesModel.option;
	            var smooth = option.smooth ? SMOOTH : null;

	            // Consider switch between progressive and not.
	            // oldData && oldData.__plProgressive && dataGroup.removeAll();

	            data.diff(oldData)
	                .add(add)
	                .update(update)
	                .remove(remove)
	                .execute();

	            // Update style
	            updateElCommon(data, smooth);

	            // First create
	            if (!this._data) {
	                var clipPath = createGridClipShape(
	                    coordSys, seriesModel, function () {
	                        // Callback will be invoked immediately if there is no animation
	                        setTimeout(function () {
	                            dataGroup.removeClipPath();
	                        });
	                    }
	                );
	                dataGroup.setClipPath(clipPath);
	            }

	            this._data = data;

	            function add(newDataIndex) {
	                addEl(data, dataGroup, newDataIndex, dimensions, coordSys, null, smooth);
	            }

	            function update(newDataIndex, oldDataIndex) {
	                var line = oldData.getItemGraphicEl(oldDataIndex);
	                var points = createLinePoints(data, newDataIndex, dimensions, coordSys);
	                data.setItemGraphicEl(newDataIndex, line);
	                graphic.updateProps(line, {shape: {points: points}}, seriesModel, newDataIndex);
	            }

	            function remove(oldDataIndex) {
	                var line = oldData.getItemGraphicEl(oldDataIndex);
	                dataGroup.remove(line);
	            }

	        },

	        /**
	         * @private
	         */
	        // _renderForProgressive: function (seriesModel) {
	        //     var dataGroup = this._dataGroup;
	        //     var data = seriesModel.getData();
	        //     var oldData = this._data;
	        //     var coordSys = seriesModel.coordinateSystem;
	        //     var dimensions = coordSys.dimensions;
	        //     var option = seriesModel.option;
	        //     var progressive = option.progressive;
	        //     var smooth = option.smooth ? SMOOTH : null;

	        //     // In progressive animation is disabled, so use simple data diff,
	        //     // which effects performance less.
	        //     // (Typically performance for data with length 7000+ like:
	        //     // simpleDiff: 60ms, addEl: 184ms,
	        //     // in RMBP 2.4GHz intel i7, OSX 10.9 chrome 50.0.2661.102 (64-bit))
	        //     if (simpleDiff(oldData, data, dimensions)) {
	        //         dataGroup.removeAll();
	        //         data.each(function (dataIndex) {
	        //             addEl(data, dataGroup, dataIndex, dimensions, coordSys);
	        //         });
	        //     }

	        //     updateElCommon(data, progressive, smooth);

	        //     // Consider switch between progressive and not.
	        //     data.__plProgressive = true;
	        //     this._data = data;
	        // },

	        /**
	         * @override
	         */
	        remove: function () {
	            this._dataGroup && this._dataGroup.removeAll();
	            this._data = null;
	        }
	    });

	    function createGridClipShape(coordSys, seriesModel, cb) {
	        var parallelModel = coordSys.model;
	        var rect = coordSys.getRect();
	        var rectEl = new graphic.Rect({
	            shape: {
	                x: rect.x,
	                y: rect.y,
	                width: rect.width,
	                height: rect.height
	            }
	        });

	        var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';
	        rectEl.setShape(dim, 0);
	        graphic.initProps(rectEl, {
	            shape: {
	                width: rect.width,
	                height: rect.height
	            }
	        }, seriesModel, cb);
	        return rectEl;
	    }

	    function createLinePoints(data, dataIndex, dimensions, coordSys) {
	        var points = [];
	        for (var i = 0; i < dimensions.length; i++) {
	            var dimName = dimensions[i];
	            var value = data.get(dimName, dataIndex);
	            if (!isEmptyValue(value, coordSys.getAxis(dimName).type)) {
	                points.push(coordSys.dataToPoint(value, dimName));
	            }
	        }
	        return points;
	    }

	    function addEl(data, dataGroup, dataIndex, dimensions, coordSys) {
	        var points = createLinePoints(data, dataIndex, dimensions, coordSys);
	        var line = new graphic.Polyline({
	            shape: {points: points},
	            silent: true,
	            z2: 10
	        });
	        dataGroup.add(line);
	        data.setItemGraphicEl(dataIndex, line);
	    }

	    function updateElCommon(data, smooth) {
	        var seriesStyleModel = data.hostModel.getModel('lineStyle.normal');
	        var lineStyle = seriesStyleModel.getLineStyle();
	        data.eachItemGraphicEl(function (line, dataIndex) {
	            if (data.hasItemOption) {
	                var itemModel = data.getItemModel(dataIndex);
	                var lineStyleModel = itemModel.getModel('lineStyle.normal', seriesStyleModel);
	                lineStyle = lineStyleModel.getLineStyle();
	            }

	            line.useStyle(zrUtil.extend(
	                lineStyle,
	                {
	                    fill: null,
	                    stroke: data.getItemVisual(dataIndex, 'color'),
	                    opacity: data.getItemVisual(dataIndex, 'opacity')
	                }
	            ));
	            line.shape.smooth = smooth;
	        });
	    }

	    // function simpleDiff(oldData, newData, dimensions) {
	    //     var oldLen;
	    //     if (!oldData
	    //         || !oldData.__plProgressive
	    //         || (oldLen = oldData.count()) !== newData.count()
	    //     ) {
	    //         return true;
	    //     }

	    //     var dimLen = dimensions.length;
	    //     for (var i = 0; i < oldLen; i++) {
	    //         for (var j = 0; j < dimLen; j++) {
	    //             if (oldData.get(dimensions[j], i) !== newData.get(dimensions[j], i)) {
	    //                 return true;
	    //             }
	    //         }
	    //     }

	    //     return false;
	    // }

	    // FIXME
	    // 公用方法?
	    function isEmptyValue(val, axisType) {
	        return axisType === 'category'
	            ? val == null
	            : (val == null || isNaN(val)); // axisType === 'value'
	    }

	    module.exports = ParallelView;


/***/ },
/* 479 */
/***/ function(module, exports) {

	

	    module.exports = function (ecModel) {

	        ecModel.eachSeriesByType('parallel', function (seriesModel) {

	            var itemStyleModel = seriesModel.getModel('itemStyle.normal');
	            var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	            var globalColors = ecModel.get('color');

	            var color = lineStyleModel.get('color')
	                || itemStyleModel.get('color')
	                || globalColors[seriesModel.seriesIndex % globalColors.length];
	            var inactiveOpacity = seriesModel.get('inactiveOpacity');
	            var activeOpacity = seriesModel.get('activeOpacity');
	            var lineStyle = seriesModel.getModel('lineStyle.normal').getLineStyle();

	            var coordSys = seriesModel.coordinateSystem;
	            var data = seriesModel.getData();

	            var opacityMap = {
	                normal: lineStyle.opacity,
	                active: activeOpacity,
	                inactive: inactiveOpacity
	            };

	            coordSys.eachActiveState(data, function (activeState, dataIndex) {
	                data.setItemVisual(dataIndex, 'opacity', opacityMap[activeState]);
	            });

	            data.setVisual('color', color);
	        });
	    };


/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);

	    __webpack_require__(481);
	    __webpack_require__(482);
	    echarts.registerLayout(__webpack_require__(483));
	    echarts.registerVisual(__webpack_require__(485));


/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Get initial data and define sankey view's series model
	 * @author Deqing Li(annong035@gmail.com)
	 */


	    var SeriesModel = __webpack_require__(267);
	    var createGraphFromNodeEdge = __webpack_require__(438);
	    var encodeHTML = __webpack_require__(245).encodeHTML;

	    var SankeySeries = SeriesModel.extend({

	        type: 'series.sankey',

	        layoutInfo: null,

	        /**
	         * Init a graph data structure from data in option series
	         *
	         * @param  {Object} option  the object used to config echarts view
	         * @return {module:echarts/data/List} storage initial data
	         */
	        getInitialData: function (option) {
	            var links = option.edges || option.links;
	            var nodes = option.data || option.nodes;
	            if (nodes && links) {
	                var graph = createGraphFromNodeEdge(nodes, links, this, true);
	                return graph.data;
	            }
	        },

	        /**
	         * Return the graphic data structure
	         *
	         * @return {module:echarts/data/Graph} graphic data structure
	         */
	        getGraph: function () {
	            return this.getData().graph;
	        },

	        /**
	         * Get edge data of graphic data structure
	         *
	         * @return {module:echarts/data/List} data structure of list
	         */
	        getEdgeData: function () {
	            return this.getGraph().edgeData;
	        },

	        /**
	         * @override
	         */
	        formatTooltip: function (dataIndex, multipleSeries, dataType) {
	            // dataType === 'node' or empty do not show tooltip by default
	            if (dataType === 'edge') {
	                var params = this.getDataParams(dataIndex, dataType);
	                var rawDataOpt = params.data;
	                var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;
	                if (params.value) {
	                    html += ' : ' + params.value;
	                }
	                return encodeHTML(html);
	            }

	            return SankeySeries.superCall(this, 'formatTooltip', dataIndex, multipleSeries);
	        },

	        defaultOption: {
	            zlevel: 0,
	            z: 2,

	            coordinateSystem: 'view',

	            layout: null,

	            // the position of the whole view
	            left: '5%',
	            top: '5%',
	            right: '20%',
	            bottom: '5%',

	            // the dx of the node
	            nodeWidth: 20,

	            // the vertical distance between two nodes
	            nodeGap: 8,

	            // the number of iterations to change the position of the node
	            layoutIterations: 32,

	            label: {
	                normal: {
	                    show: true,
	                    position: 'right',
	                    textStyle: {
	                        color: '#000',
	                        fontSize: 12
	                    }
	                },
	                emphasis: {
	                    show: true
	                }
	            },

	            itemStyle: {
	                normal: {
	                    borderWidth: 1,
	                    borderColor: '#333'
	                }
	            },

	            lineStyle: {
	                normal: {
	                    color: '#314656',
	                    opacity: 0.2,
	                    curveness: 0.5
	                },
	                emphasis: {
	                    opacity: 0.6
	                }
	            },

	            animationEasing: 'linear',

	            animationDuration: 1000
	        }

	    });

	    module.exports = SankeySeries;



/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file  The file used to draw sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */


	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);

	    var SankeyShape = graphic.extendShape({
	        shape: {
	            x1: 0, y1: 0,
	            x2: 0, y2: 0,
	            cpx1: 0, cpy1: 0,
	            cpx2: 0, cpy2: 0,

	            extent: 0
	        },

	        buildPath: function (ctx, shape) {
	            var halfExtent = shape.extent / 2;
	            ctx.moveTo(shape.x1, shape.y1 - halfExtent);
	            ctx.bezierCurveTo(
	                shape.cpx1, shape.cpy1 - halfExtent,
	                shape.cpx2, shape.cpy2 - halfExtent,
	                shape.x2, shape.y2 - halfExtent
	            );
	            ctx.lineTo(shape.x2, shape.y2 + halfExtent);
	            ctx.bezierCurveTo(
	                shape.cpx2, shape.cpy2 + halfExtent,
	                shape.cpx1, shape.cpy1 + halfExtent,
	                shape.x1, shape.y1 + halfExtent
	            );
	            ctx.closePath();
	        }
	    });

	    module.exports = __webpack_require__(240).extendChartView({

	        type: 'sankey',

	        /**
	         * @private
	         * @type {module:echarts/chart/sankey/SankeySeries}
	         */
	        _model: null,

	        render: function (seriesModel, ecModel, api) {
	            var graph = seriesModel.getGraph();
	            var group = this.group;
	            var layoutInfo = seriesModel.layoutInfo;
	            var nodeData = seriesModel.getData();
	            var edgeData = seriesModel.getData('edge');

	            this._model = seriesModel;

	            group.removeAll();

	            group.position = [layoutInfo.x, layoutInfo.y];

	            // generate a bezire Curve for each edge
	            graph.eachEdge(function (edge) {
	                var curve = new SankeyShape();

	                curve.dataIndex = edge.dataIndex;
	                curve.seriesIndex = seriesModel.seriesIndex;
	                curve.dataType = 'edge';

	                var lineStyleModel = edge.getModel('lineStyle.normal');
	                var curvature = lineStyleModel.get('curveness');
	                var n1Layout = edge.node1.getLayout();
	                var n2Layout = edge.node2.getLayout();
	                var edgeLayout = edge.getLayout();

	                curve.shape.extent = Math.max(1, edgeLayout.dy);

	                var x1 = n1Layout.x + n1Layout.dx;
	                var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;
	                var x2 = n2Layout.x;
	                var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy / 2;
	                var cpx1 = x1 * (1 - curvature) + x2 * curvature;
	                var cpy1 = y1;
	                var cpx2 = x1 * curvature + x2 * (1 - curvature);
	                var cpy2 = y2;

	                curve.setShape({
	                    x1: x1,
	                    y1: y1,
	                    x2: x2,
	                    y2: y2,
	                    cpx1: cpx1,
	                    cpy1: cpy1,
	                    cpx2: cpx2,
	                    cpy2: cpy2
	                });

	                curve.setStyle(lineStyleModel.getItemStyle());
	                // Special color, use source node color or target node color
	                switch (curve.style.fill) {
	                    case 'source':
	                        curve.style.fill = edge.node1.getVisual('color');
	                        break;
	                    case 'target':
	                        curve.style.fill = edge.node2.getVisual('color');
	                        break;
	                }

	                graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());

	                group.add(curve);

	                edgeData.setItemGraphicEl(edge.dataIndex, curve);
	            });

	            // generate a rect  for each node
	            graph.eachNode(function (node) {
	                var layout = node.getLayout();
	                var itemModel = node.getModel();
	                var labelModel = itemModel.getModel('label.normal');
	                var textStyleModel = labelModel.getModel('textStyle');
	                var labelHoverModel = itemModel.getModel('label.emphasis');
	                var textStyleHoverModel = labelHoverModel.getModel('textStyle');

	                var rect = new graphic.Rect({
	                    shape: {
	                        x: layout.x,
	                        y: layout.y,
	                        width: node.getLayout().dx,
	                        height: node.getLayout().dy
	                    },
	                    style: {
	                        // Get formatted label in label.normal option
	                        //  Use node id if it is not specified
	                        text: labelModel.get('show')
	                            ? seriesModel.getFormattedLabel(node.dataIndex, 'normal') || node.id
	                            // Use empty string to hide the label
	                            : '',
	                        textFont: textStyleModel.getFont(),
	                        textFill: textStyleModel.getTextColor(),
	                        textPosition: labelModel.get('position')
	                    }
	                });

	                rect.setStyle(zrUtil.defaults(
	                    {
	                        fill: node.getVisual('color')
	                    },
	                    itemModel.getModel('itemStyle.normal').getItemStyle()
	                ));

	                graphic.setHoverStyle(rect, zrUtil.extend(
	                    node.getModel('itemStyle.emphasis'),
	                    {
	                        text: labelHoverModel.get('show')
	                            ? seriesModel.getFormattedLabel(node.dataIndex, 'emphasis') || node.id
	                            : '',
	                        textFont: textStyleHoverModel.getFont(),
	                        textFill: textStyleHoverModel.getTextColor(),
	                        textPosition: labelHoverModel.get('position')
	                    }
	                ));

	                group.add(rect);

	                nodeData.setItemGraphicEl(node.dataIndex, rect);

	                rect.dataType = 'node';
	            });

	            if (!this._data && seriesModel.get('animation')) {
	                group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {
	                    group.removeClipPath();
	                }));
	            }

	            this._data = seriesModel.getData();
	        },

	        dispose: function () {}
	    });

	    // add animation to the view
	    function createGridClipShape(rect, seriesModel, cb) {
	        var rectEl = new graphic.Rect({
	            shape: {
	                x: rect.x - 10,
	                y: rect.y - 10,
	                width: 0,
	                height: rect.height + 20
	            }
	        });
	        graphic.initProps(rectEl, {
	            shape: {
	                width: rect.width + 20,
	                height: rect.height + 20
	            }
	        }, seriesModel, cb);

	        return rectEl;
	    }



/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file The layout algorithm of sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */


	    var layout = __webpack_require__(260);
	    var nest = __webpack_require__(484);
	    var zrUtil = __webpack_require__(243);

	    module.exports = function (ecModel, api, payload) {

	        ecModel.eachSeriesByType('sankey', function (seriesModel) {

	            var nodeWidth = seriesModel.get('nodeWidth');
	            var nodeGap = seriesModel.get('nodeGap');

	            var layoutInfo = getViewRect(seriesModel, api);

	            seriesModel.layoutInfo = layoutInfo;

	            var width = layoutInfo.width;
	            var height = layoutInfo.height;

	            var graph = seriesModel.getGraph();

	            var nodes = graph.nodes;
	            var edges = graph.edges;

	            computeNodeValues(nodes);

	            var filteredNodes = nodes.filter(function (node) {
	                return node.getLayout().value === 0;
	            });

	            var iterations = filteredNodes.length !== 0
	                ? 0 : seriesModel.get('layoutIterations');

	            layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);
	        });
	    };

	    /**
	     * Get the layout position of the whole view
	     *
	     * @param {module:echarts/model/Series} seriesModel  the model object of sankey series
	     * @param {module:echarts/ExtensionAPI} api  provide the API list that the developer can call
	     * @return {module:zrender/core/BoundingRect}  size of rect to draw the sankey view
	     */
	    function getViewRect(seriesModel, api) {
	        return layout.getLayoutRect(
	            seriesModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            }
	        );
	    }

	    function layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {
	        computeNodeBreadths(nodes, nodeWidth, width);
	        computeNodeDepths(nodes, edges, height, nodeGap, iterations);
	        computeEdgeDepths(nodes);
	    }

	    /**
	     * Compute the value of each node by summing the associated edge's value
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     */
	    function computeNodeValues(nodes) {
	        zrUtil.each(nodes, function (node) {
	            var value1 = sum(node.outEdges, getEdgeValue);
	            var value2 = sum(node.inEdges, getEdgeValue);
	            var value = Math.max(value1, value2);
	            node.setLayout({value: value}, true);
	        });
	    }

	    /**
	     * Compute the x-position for each node
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param  {number} nodeWidth  the dx of the node
	     * @param  {number} width  the whole width of the area to draw the view
	     */
	    function computeNodeBreadths(nodes, nodeWidth, width) {
	        var remainNodes = nodes;
	        var nextNode = null;
	        var x = 0;
	        var kx = 0;

	        while (remainNodes.length) {
	            nextNode = [];
	            for (var i = 0, len = remainNodes.length; i < len; i++) {
	                var node = remainNodes[i];
	                node.setLayout({x: x}, true);
	                node.setLayout({dx: nodeWidth}, true);
	                for (var j = 0, lenj = node.outEdges.length; j < lenj; j++) {
	                    nextNode.push(node.outEdges[j].node2);
	                }
	            }
	            remainNodes = nextNode;
	            ++x;
	        }

	        moveSinksRight(nodes, x);
	        kx = (width - nodeWidth) / (x - 1);

	        scaleNodeBreadths(nodes, kx);
	    }

	    /**
	     * All the node without outEgdes are assigned maximum x-position and
	     *     be aligned in the last column.
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param {number} x  value (x-1) use to assign to node without outEdges
	     *     as x-position
	     */
	    function moveSinksRight(nodes, x) {
	        zrUtil.each(nodes, function (node) {
	            if (!node.outEdges.length) {
	                node.setLayout({x: x - 1}, true);
	            }
	        });
	    }

	    /**
	     * Scale node x-position to the width
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param {number} kx   multiple used to scale nodes
	     */
	    function scaleNodeBreadths(nodes, kx) {
	        zrUtil.each(nodes, function (node) {
	            var nodeX = node.getLayout().x * kx;
	            node.setLayout({x: nodeX}, true);
	        });
	    }

	    /**
	     * Using Gauss-Seidel iterations method to compute the node depth(y-position)
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view
	     * @param {number} height  the whole height of the area to draw the view
	     * @param {numbber} nodeGap  the vertical distance between two nodes
	     *     in the same column.
	     * @param {number} iterations  the number of iterations for the algorithm
	     */
	    function computeNodeDepths(nodes, edges, height, nodeGap, iterations) {
	        var nodesByBreadth = nest()
	            .key(function (d) {
	                return d.getLayout().x;
	            })
	            .sortKeys(ascending)
	            .entries(nodes)
	            .map(function (d) {
	                return d.values;
	            });

	        initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);
	        resolveCollisions(nodesByBreadth, nodeGap, height);

	        for (var alpha = 1; iterations > 0; iterations--) {
	            // 0.99 is a experience parameter, ensure that each iterations of
	            // changes as small as possible.
	            alpha *= 0.99;
	            relaxRightToLeft(nodesByBreadth, alpha);
	            resolveCollisions(nodesByBreadth, nodeGap, height);
	            relaxLeftToRight(nodesByBreadth, alpha);
	            resolveCollisions(nodesByBreadth, nodeGap, height);
	        }
	    }

	    /**
	     * Compute the original y-position for each node
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	     *     group by the array of all sankey nodes based on the nodes x-position.
	     * @param {module:echarts/data/Graph~Edge} edges  edge of sankey view
	     * @param {number} height  the whole height of the area to draw the view
	     * @param {number} nodeGap  the vertical distance between two nodes
	     */
	    function initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {
	        var kyArray = [];
	        zrUtil.each(nodesByBreadth, function (nodes) {
	            var n = nodes.length;
	            var sum = 0;
	            zrUtil.each(nodes, function (node) {
	                sum += node.getLayout().value;
	            });
	            var ky = (height - (n - 1) * nodeGap) / sum;
	            kyArray.push(ky);
	        });

	        kyArray.sort(function (a, b) {
	            return a - b;
	        });
	        var ky0 = kyArray[0];

	        zrUtil.each(nodesByBreadth, function (nodes) {
	            zrUtil.each(nodes, function (node, i) {
	                node.setLayout({y: i}, true);
	                var nodeDy = node.getLayout().value * ky0;
	                node.setLayout({dy: nodeDy}, true);
	            });
	        });

	        zrUtil.each(edges, function (edge) {
	            var edgeDy = +edge.getValue() * ky0;
	            edge.setLayout({dy: edgeDy}, true);
	        });
	    }

	    /**
	     * Resolve the collision of initialized depth (y-position)
	     *
	     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	     *     group by the array of all sankey nodes based on the nodes x-position.
	     * @param {number} nodeGap  the vertical distance between two nodes
	     * @param {number} height  the whole height of the area to draw the view
	     */
	    function resolveCollisions(nodesByBreadth, nodeGap, height) {
	        zrUtil.each(nodesByBreadth, function (nodes) {
	            var node;
	            var dy;
	            var y0 = 0;
	            var n = nodes.length;
	            var i;

	            nodes.sort(ascendingDepth);

	            for (i = 0; i < n; i++) {
	                node = nodes[i];
	                dy = y0 - node.getLayout().y;
	                if (dy > 0) {
	                    var nodeY = node.getLayout().y + dy;
	                    node.setLayout({y: nodeY}, true);
	                }
	                y0 = node.getLayout().y + node.getLayout().dy + nodeGap;
	            }

	            // if the bottommost node goes outside the bounds, push it back up
	            dy = y0 - nodeGap - height;
	            if (dy > 0) {
	                var nodeY = node.getLayout().y - dy;
	                node.setLayout({y: nodeY}, true);
	                y0 = node.getLayout().y;
	                for (i = n - 2; i >= 0; --i) {
	                    node = nodes[i];
	                    dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;
	                    if (dy > 0) {
	                        nodeY = node.getLayout().y - dy;
	                        node.setLayout({y: nodeY}, true);
	                    }
	                    y0 = node.getLayout().y;
	                }
	            }
	        });
	    }

	    /**
	     * Change the y-position of the nodes, except most the right side nodes
	     *
	     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	     *     group by the array of all sankey nodes based on the node x-position.
	     * @param {number} alpha  parameter used to adjust the nodes y-position
	     */
	    function relaxRightToLeft(nodesByBreadth, alpha) {
	        zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {
	            zrUtil.each(nodes, function (node) {
	                if (node.outEdges.length) {
	                    var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);
	                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	                    node.setLayout({y: nodeY}, true);
	                }
	            });
	        });
	    }

	    function weightedTarget(edge) {
	        return center(edge.node2) * edge.getValue();
	    }

	    /**
	     * Change the y-position of the nodes, except most the left side nodes
	     *
	     * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	     *     group by the array of all sankey nodes based on the node x-position.
	     * @param {number} alpha  parameter used to adjust the nodes y-position
	     */
	    function relaxLeftToRight(nodesByBreadth, alpha) {
	        zrUtil.each(nodesByBreadth, function (nodes) {
	            zrUtil.each(nodes, function (node) {
	                if (node.inEdges.length) {
	                    var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);
	                    var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	                    node.setLayout({y: nodeY}, true);
	                }
	            });
	        });
	    }

	    function weightedSource(edge) {
	        return center(edge.node1) * edge.getValue();
	    }

	    /**
	     * Compute the depth(y-position) of each edge
	     *
	     * @param {module:echarts/data/Graph~Node} nodes  node of sankey view
	     */
	    function computeEdgeDepths(nodes) {
	        zrUtil.each(nodes, function (node) {
	            node.outEdges.sort(ascendingTargetDepth);
	            node.inEdges.sort(ascendingSourceDepth);
	        });
	        zrUtil.each(nodes, function (node) {
	            var sy = 0;
	            var ty = 0;
	            zrUtil.each(node.outEdges, function (edge) {
	                edge.setLayout({sy: sy}, true);
	                sy += edge.getLayout().dy;
	            });
	            zrUtil.each(node.inEdges, function (edge) {
	                edge.setLayout({ty: ty}, true);
	                ty += edge.getLayout().dy;
	            });
	        });
	    }

	    function ascendingTargetDepth(a, b) {
	        return a.node2.getLayout().y - b.node2.getLayout().y;
	    }

	    function ascendingSourceDepth(a, b) {
	        return a.node1.getLayout().y - b.node1.getLayout().y;
	    }

	    function sum(array, f) {
	        var sum = 0;
	        var len = array.length;
	        var i = -1;
	        while (++i < len) {
	            var value = +f.call(array, array[i], i);
	            if (!isNaN(value)) {
	                sum += value;
	            }
	        }
	        return sum;
	    }

	    function center(node) {
	        return node.getLayout().y + node.getLayout().dy / 2;
	    }

	    function ascendingDepth(a, b) {
	        return a.getLayout().y - b.getLayout().y;
	    }

	    function ascending(a, b) {
	        return a < b ? -1 : a > b ? 1 : a === b ? 0 : NaN;
	    }

	    function getEdgeValue(edge) {
	        return edge.getValue();
	    }



/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    /**
	     * nest helper used to group by the array.
	     * can specified the keys and sort the keys.
	     */
	    function nest() {

	        var keysFunction = [];
	        var sortKeysFunction = [];

	        /**
	         * map an Array into the mapObject.
	         * @param {Array} array
	         * @param {number} depth
	         */
	        function map(array, depth) {
	            if (depth >= keysFunction.length) {
	                return array;
	            }
	            var i = -1;
	            var n = array.length;
	            var keyFunction = keysFunction[depth++];
	            var mapObject = {};
	            var valuesByKey = {};

	            while (++i < n) {
	                var keyValue = keyFunction(array[i]);
	                var values = valuesByKey[keyValue];

	                if (values) {
	                    values.push(array[i]);
	                }
	                else {
	                    valuesByKey[keyValue] = [array[i]];
	                }
	            }

	            zrUtil.each(valuesByKey, function (value, key) {
	                mapObject[key] = map(value, depth);
	            });

	            return mapObject;
	        }

	        /**
	         * transform the Map Object to multidimensional Array
	         * @param {Object} map
	         * @param {number} depth
	         */
	        function entriesMap(mapObject, depth) {
	            if (depth >= keysFunction.length) {
	                return mapObject;
	            }
	            var array = [];
	            var sortKeyFunction = sortKeysFunction[depth++];

	            zrUtil.each(mapObject, function (value, key) {
	                array.push({
	                    key: key, values: entriesMap(value, depth)
	                });
	            });

	            if (sortKeyFunction) {
	                return array.sort(function (a, b) {
	                    return sortKeyFunction(a.key, b.key);
	                });
	            }
	            else {
	                return array;
	            }
	        }

	        return {
	            /**
	             * specified the key to groupby the arrays.
	             * users can specified one more keys.
	             * @param {Function} d
	             */
	            key: function (d) {
	                keysFunction.push(d);
	                return this;
	            },

	            /**
	             * specified the comparator to sort the keys
	             * @param {Function} order
	             */
	            sortKeys: function (order) {
	                sortKeysFunction[keysFunction.length - 1] = order;
	                return this;
	            },

	            /**
	             * the array to be grouped by.
	             * @param {Array} array
	             */
	            entries: function (array) {
	                return entriesMap(map(array, 0), 0);
	            }
	        };
	    }
	    module.exports = nest;


/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Visual encoding for sankey view
	 * @author  Deqing Li(annong035@gmail.com)
	 */


	    var VisualMapping = __webpack_require__(434);
	    var zrUtil = __webpack_require__(243);

	    module.exports = function (ecModel, payload) {
	        ecModel.eachSeriesByType('sankey', function (seriesModel) {
	            var graph = seriesModel.getGraph();
	            var nodes = graph.nodes;

	            nodes.sort(function (a, b) {
	                return a.getLayout().value - b.getLayout().value;
	            });

	            var minValue = nodes[0].getLayout().value;
	            var maxValue = nodes[nodes.length - 1].getLayout().value;

	            zrUtil.each(nodes, function (node) {
	                var mapping = new VisualMapping({
	                    type: 'color',
	                    mappingMethod: 'linear',
	                    dataExtent: [minValue, maxValue],
	                    visual: seriesModel.get('color')
	                });

	                var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);
	                node.setVisual('color', mapValueToColor);
	                // If set itemStyle.normal.color
	                var itemModel = node.getModel();
	                var customColor = itemModel.get('itemStyle.normal.color');
	                if (customColor != null) {
	                    node.setVisual('color', customColor);
	                }
	            });

	        });
	    };



/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);

	    __webpack_require__(487);
	    __webpack_require__(490);

	    echarts.registerVisual(__webpack_require__(491));
	    echarts.registerLayout(__webpack_require__(492));



/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var SeriesModel = __webpack_require__(267);
	    var whiskerBoxCommon = __webpack_require__(488);

	    var BoxplotSeries = SeriesModel.extend({

	        type: 'series.boxplot',

	        dependencies: ['xAxis', 'yAxis', 'grid'],

	        // TODO
	        // box width represents group size, so dimension should have 'size'.

	        /**
	         * @see <https://en.wikipedia.org/wiki/Box_plot>
	         * The meanings of 'min' and 'max' depend on user,
	         * and echarts do not need to know it.
	         * @readOnly
	         */
	        valueDimensions: ['min', 'Q1', 'median', 'Q3', 'max'],

	        /**
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        dimensions: null,

	        /**
	         * @override
	         */
	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,

	            hoverAnimation: true,

	            // xAxisIndex: 0,
	            // yAxisIndex: 0,

	            layout: null,               // 'horizontal' or 'vertical'
	            boxWidth: [7, 50],       // [min, max] can be percent of band width.

	            itemStyle: {
	                normal: {
	                    color: '#fff',
	                    borderWidth: 1
	                },
	                emphasis: {
	                    borderWidth: 2,
	                    shadowBlur: 5,
	                    shadowOffsetX: 2,
	                    shadowOffsetY: 2,
	                    shadowColor: 'rgba(0,0,0,0.4)'
	                }
	            },

	            animationEasing: 'elasticOut',
	            animationDuration: 800
	        }
	    });

	    zrUtil.mixin(BoxplotSeries, whiskerBoxCommon.seriesModelMixin, true);

	    module.exports = BoxplotSeries;



/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var List = __webpack_require__(337);
	    var completeDimensions = __webpack_require__(342);
	    var WhiskerBoxDraw = __webpack_require__(489);
	    var zrUtil = __webpack_require__(243);

	    function getItemValue(item) {
	        return item.value == null ? item : item.value;
	    }

	    var seriesModelMixin = {

	        /**
	         * @private
	         * @type {string}
	         */
	        _baseAxisDim: null,

	        /**
	         * @override
	         */
	        getInitialData: function (option, ecModel) {
	            // When both types of xAxis and yAxis are 'value', layout is
	            // needed to be specified by user. Otherwise, layout can be
	            // judged by which axis is category.

	            var categories;

	            var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));
	            var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));
	            var xAxisType = xAxisModel.get('type');
	            var yAxisType = yAxisModel.get('type');
	            var addOrdinal;

	            // FIXME
	            // 考虑时间轴

	            if (xAxisType === 'category') {
	                option.layout = 'horizontal';
	                categories = xAxisModel.getCategories();
	                addOrdinal = true;
	            }
	            else if (yAxisType  === 'category') {
	                option.layout = 'vertical';
	                categories = yAxisModel.getCategories();
	                addOrdinal = true;
	            }
	            else {
	                option.layout = option.layout || 'horizontal';
	            }

	            this._baseAxisDim = option.layout === 'horizontal' ? 'x' : 'y';

	            var data = option.data;
	            var dimensions = this.dimensions = ['base'].concat(this.valueDimensions);
	            completeDimensions(dimensions, data);

	            var list = new List(dimensions, this);
	            list.initData(data, categories ? categories.slice() : null, function (dataItem, dimName, idx, dimIdx) {
	                var value = getItemValue(dataItem);
	                return addOrdinal ? (dimName === 'base' ? idx : value[dimIdx - 1]) : value[dimIdx];
	            });

	            return list;
	        },

	        /**
	         * Used by Gird.
	         * @param {string} axisDim 'x' or 'y'
	         * @return {Array.<string>} dimensions on the axis.
	         */
	        coordDimToDataDim: function (axisDim) {
	            var dims = this.valueDimensions.slice();
	            var baseDim = ['base'];
	            var map = {
	                horizontal: {x: baseDim, y: dims},
	                vertical: {x: dims, y: baseDim}
	            };
	            return map[this.get('layout')][axisDim];
	        },

	        /**
	         * @override
	         * @param {string|number} dataDim
	         * @return {string} coord dimension
	         */
	        dataDimToCoordDim: function (dataDim) {
	            var dim;

	            zrUtil.each(['x', 'y'], function (coordDim, index) {
	                var dataDims = this.coordDimToDataDim(coordDim);
	                if (zrUtil.indexOf(dataDims, dataDim) >= 0) {
	                    dim = coordDim;
	                }
	            }, this);

	            return dim;
	        },

	        /**
	         * If horizontal, base axis is x, otherwise y.
	         * @override
	         */
	        getBaseAxis: function () {
	            var dim = this._baseAxisDim;
	            return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;
	        }
	    };

	    var viewMixin = {

	        init: function () {
	            /**
	             * Old data.
	             * @private
	             * @type {module:echarts/chart/helper/WhiskerBoxDraw}
	             */
	            var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(
	                this.getStyleUpdater()
	            );
	            this.group.add(whiskerBoxDraw.group);
	        },

	        render: function (seriesModel, ecModel, api) {
	            this._whiskerBoxDraw.updateData(seriesModel.getData());
	        },

	        remove: function (ecModel) {
	            this._whiskerBoxDraw.remove();
	        }
	    };

	    module.exports = {
	        seriesModelMixin: seriesModelMixin,
	        viewMixin: viewMixin
	    };


/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/Symbol
	 */


	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var Path = __webpack_require__(284);

	    var WhiskerPath = Path.extend({

	        type: 'whiskerInBox',

	        shape: {},

	        buildPath: function (ctx, shape) {
	            for (var i in shape) {
	                if (shape.hasOwnProperty(i) && i.indexOf('ends') === 0) {
	                    var pts = shape[i];
	                    ctx.moveTo(pts[0][0], pts[0][1]);
	                    ctx.lineTo(pts[1][0], pts[1][1]);
	                }
	            }
	        }
	    });

	    /**
	     * @constructor
	     * @alias {module:echarts/chart/helper/WhiskerBox}
	     * @param {module:echarts/data/List} data
	     * @param {number} idx
	     * @param {Function} styleUpdater
	     * @param {boolean} isInit
	     * @extends {module:zrender/graphic/Group}
	     */
	    function WhiskerBox(data, idx, styleUpdater, isInit) {
	        graphic.Group.call(this);

	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.bodyIndex;

	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.whiskerIndex;

	        /**
	         * @type {Function}
	         */
	        this.styleUpdater = styleUpdater;

	        this._createContent(data, idx, isInit);

	        this.updateData(data, idx, isInit);

	        /**
	         * Last series model.
	         * @type {module:echarts/model/Series}
	         */
	        this._seriesModel;
	    }

	    var whiskerBoxProto = WhiskerBox.prototype;

	    whiskerBoxProto._createContent = function (data, idx, isInit) {
	        var itemLayout = data.getItemLayout(idx);
	        var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;
	        var count = 0;

	        // Whisker element.
	        this.add(new graphic.Polygon({
	            shape: {
	                points: isInit
	                    ? transInit(itemLayout.bodyEnds, constDim, itemLayout)
	                    : itemLayout.bodyEnds
	            },
	            style: {strokeNoScale: true},
	            z2: 100
	        }));
	        this.bodyIndex = count++;

	        // Box element.
	        var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {
	            return isInit ? transInit(ends, constDim, itemLayout) : ends;
	        });
	        this.add(new WhiskerPath({
	            shape: makeWhiskerEndsShape(whiskerEnds),
	            style: {strokeNoScale: true},
	            z2: 100
	        }));
	        this.whiskerIndex = count++;
	    };

	    function transInit(points, dim, itemLayout) {
	        return zrUtil.map(points, function (point) {
	            point = point.slice();
	            point[dim] = itemLayout.initBaseline;
	            return point;
	        });
	    }

	    function makeWhiskerEndsShape(whiskerEnds) {
	        // zr animation only support 2-dim array.
	        var shape = {};
	        zrUtil.each(whiskerEnds, function (ends, i) {
	            shape['ends' + i] = ends;
	        });
	        return shape;
	    }

	    /**
	     * Update symbol properties
	     * @param  {module:echarts/data/List} data
	     * @param  {number} idx
	     */
	    whiskerBoxProto.updateData = function (data, idx, isInit) {
	        var seriesModel = this._seriesModel = data.hostModel;
	        var itemLayout = data.getItemLayout(idx);
	        var updateMethod = graphic[isInit ? 'initProps' : 'updateProps'];
	        // this.childAt(this.bodyIndex).stopAnimation(true);
	        // this.childAt(this.whiskerIndex).stopAnimation(true);
	        updateMethod(
	            this.childAt(this.bodyIndex),
	            {shape: {points: itemLayout.bodyEnds}},
	            seriesModel, idx
	        );
	        updateMethod(
	            this.childAt(this.whiskerIndex),
	            {shape: makeWhiskerEndsShape(itemLayout.whiskerEnds)},
	            seriesModel, idx
	        );

	        this.styleUpdater.call(null, this, data, idx);
	    };

	    zrUtil.inherits(WhiskerBox, graphic.Group);


	    /**
	     * @constructor
	     * @alias module:echarts/chart/helper/WhiskerBoxDraw
	     */
	    function WhiskerBoxDraw(styleUpdater) {
	        this.group = new graphic.Group();
	        this.styleUpdater = styleUpdater;
	    }

	    var whiskerBoxDrawProto = WhiskerBoxDraw.prototype;

	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     */
	    whiskerBoxDrawProto.updateData = function (data) {
	        var group = this.group;
	        var oldData = this._data;
	        var styleUpdater = this.styleUpdater;

	        data.diff(oldData)
	            .add(function (newIdx) {
	                if (data.hasValue(newIdx)) {
	                    var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);
	                    data.setItemGraphicEl(newIdx, symbolEl);
	                    group.add(symbolEl);
	                }
	            })
	            .update(function (newIdx, oldIdx) {
	                var symbolEl = oldData.getItemGraphicEl(oldIdx);

	                // Empty data
	                if (!data.hasValue(newIdx)) {
	                    group.remove(symbolEl);
	                    return;
	                }

	                if (!symbolEl) {
	                    symbolEl = new WhiskerBox(data, newIdx, styleUpdater);
	                }
	                else {
	                    symbolEl.updateData(data, newIdx);
	                }

	                // Add back
	                group.add(symbolEl);

	                data.setItemGraphicEl(newIdx, symbolEl);
	            })
	            .remove(function (oldIdx) {
	                var el = oldData.getItemGraphicEl(oldIdx);
	                el && group.remove(el);
	            })
	            .execute();

	        this._data = data;
	    };

	    /**
	     * Remove symbols.
	     * @param {module:echarts/data/List} data
	     */
	    whiskerBoxDrawProto.remove = function () {
	        var group = this.group;
	        var data = this._data;
	        this._data = null;
	        data && data.eachItemGraphicEl(function (el) {
	            el && group.remove(el);
	        });
	    };

	    module.exports = WhiskerBoxDraw;


/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var ChartView = __webpack_require__(281);
	    var graphic = __webpack_require__(282);
	    var whiskerBoxCommon = __webpack_require__(488);

	    var BoxplotView = ChartView.extend({

	        type: 'boxplot',

	        getStyleUpdater: function () {
	            return updateStyle;
	        },

	        dispose: zrUtil.noop
	    });

	    zrUtil.mixin(BoxplotView, whiskerBoxCommon.viewMixin, true);

	    // Update common properties
	    var normalStyleAccessPath = ['itemStyle', 'normal'];
	    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];

	    function updateStyle(itemGroup, data, idx) {
	        var itemModel = data.getItemModel(idx);
	        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	        var borderColor = data.getItemVisual(idx, 'color');

	        // Exclude borderColor.
	        var itemStyle = normalItemStyleModel.getItemStyle(['borderColor']);

	        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	        whiskerEl.style.set(itemStyle);
	        whiskerEl.style.stroke = borderColor;
	        whiskerEl.dirty();

	        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	        bodyEl.style.set(itemStyle);
	        bodyEl.style.stroke = borderColor;
	        bodyEl.dirty();

	        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	        graphic.setHoverStyle(itemGroup, hoverStyle);
	    }

	    module.exports = BoxplotView;



/***/ },
/* 491 */
/***/ function(module, exports) {

	

	    var borderColorQuery = ['itemStyle', 'normal', 'borderColor'];

	    module.exports = function (ecModel, api) {

	        var globalColors = ecModel.get('color');

	        ecModel.eachRawSeriesByType('boxplot', function (seriesModel) {

	            var defaulColor = globalColors[seriesModel.seriesIndex % globalColors.length];
	            var data = seriesModel.getData();

	            data.setVisual({
	                legendSymbol: 'roundRect',
	                // Use name 'color' but not 'borderColor' for legend usage and
	                // visual coding from other component like dataRange.
	                color: seriesModel.get(borderColorQuery) || defaulColor
	            });

	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    data.setItemVisual(
	                        idx,
	                        {color: itemModel.get(borderColorQuery, true)}
	                    );
	                });
	            }
	        });

	    };


/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);
	    var parsePercent = numberUtil.parsePercent;
	    var each = zrUtil.each;

	    module.exports = function (ecModel) {

	        var groupResult = groupSeriesByAxis(ecModel);

	        each(groupResult, function (groupItem) {
	            var seriesModels = groupItem.seriesModels;

	            if (!seriesModels.length) {
	                return;
	            }

	            calculateBase(groupItem);

	            each(seriesModels, function (seriesModel, idx) {
	                layoutSingleSeries(
	                    seriesModel,
	                    groupItem.boxOffsetList[idx],
	                    groupItem.boxWidthList[idx]
	                );
	            });
	        });
	    };

	    /**
	     * Group series by axis.
	     */
	    function groupSeriesByAxis(ecModel) {
	        var result = [];
	        var axisList = [];

	        ecModel.eachSeriesByType('boxplot', function (seriesModel) {
	            var baseAxis = seriesModel.getBaseAxis();
	            var idx = zrUtil.indexOf(axisList, baseAxis);

	            if (idx < 0) {
	                idx = axisList.length;
	                axisList[idx] = baseAxis;
	                result[idx] = {axis: baseAxis, seriesModels: []};
	            }

	            result[idx].seriesModels.push(seriesModel);
	        });

	        return result;
	    }

	    /**
	     * Calculate offset and box width for each series.
	     */
	    function calculateBase(groupItem) {
	        var extent;
	        var baseAxis = groupItem.axis;
	        var seriesModels = groupItem.seriesModels;
	        var seriesCount = seriesModels.length;

	        var boxWidthList = groupItem.boxWidthList = [];
	        var boxOffsetList = groupItem.boxOffsetList = [];
	        var boundList = [];

	        var bandWidth;
	        if (baseAxis.type === 'category') {
	            bandWidth = baseAxis.getBandWidth();
	        }
	        else {
	            var maxDataCount = 0;
	            each(seriesModels, function (seriesModel) {
	                maxDataCount = Math.max(maxDataCount, seriesModel.getData().count());
	            });
	            extent = baseAxis.getExtent(),
	            Math.abs(extent[1] - extent[0]) / maxDataCount;
	        }

	        each(seriesModels, function (seriesModel) {
	            var boxWidthBound = seriesModel.get('boxWidth');
	            if (!zrUtil.isArray(boxWidthBound)) {
	                boxWidthBound = [boxWidthBound, boxWidthBound];
	            }
	            boundList.push([
	                parsePercent(boxWidthBound[0], bandWidth) || 0,
	                parsePercent(boxWidthBound[1], bandWidth) || 0
	            ]);
	        });

	        var availableWidth = bandWidth * 0.8 - 2;
	        var boxGap = availableWidth / seriesCount * 0.3;
	        var boxWidth = (availableWidth - boxGap * (seriesCount - 1)) / seriesCount;
	        var base = boxWidth / 2 - availableWidth / 2;

	        each(seriesModels, function (seriesModel, idx) {
	            boxOffsetList.push(base);
	            base += boxGap + boxWidth;

	            boxWidthList.push(
	                Math.min(Math.max(boxWidth, boundList[idx][0]), boundList[idx][1])
	            );
	        });
	    }

	    /**
	     * Calculate points location for each series.
	     */
	    function layoutSingleSeries(seriesModel, offset, boxWidth) {
	        var coordSys = seriesModel.coordinateSystem;
	        var data = seriesModel.getData();
	        var dimensions = seriesModel.dimensions;
	        var chartLayout = seriesModel.get('layout');
	        var halfWidth = boxWidth / 2;

	        data.each(dimensions, function () {
	            var args = arguments;
	            var dimLen = dimensions.length;
	            var axisDimVal = args[0];
	            var idx = args[dimLen];
	            var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	            var constDim = 1 - variableDim;

	            var median = getPoint(args[3]);
	            var end1 = getPoint(args[1]);
	            var end5 = getPoint(args[5]);
	            var whiskerEnds = [
	                [end1, getPoint(args[2])],
	                [end5, getPoint(args[4])]
	            ];
	            layEndLine(end1);
	            layEndLine(end5);
	            layEndLine(median);

	            var bodyEnds = [];
	            addBodyEnd(whiskerEnds[0][1], 0);
	            addBodyEnd(whiskerEnds[1][1], 1);

	            data.setItemLayout(idx, {
	                chartLayout: chartLayout,
	                initBaseline: median[constDim],
	                median: median,
	                bodyEnds: bodyEnds,
	                whiskerEnds: whiskerEnds
	            });

	            function getPoint(val) {
	                var p = [];
	                p[variableDim] = axisDimVal;
	                p[constDim] = val;
	                var point;
	                if (isNaN(axisDimVal) || isNaN(val)) {
	                    point = [NaN, NaN];
	                }
	                else {
	                    point = coordSys.dataToPoint(p);
	                    point[variableDim] += offset;
	                }
	                return point;
	            }

	            function addBodyEnd(point, start) {
	                var point1 = point.slice();
	                var point2 = point.slice();
	                point1[variableDim] += halfWidth;
	                point2[variableDim] -= halfWidth;
	                start
	                    ? bodyEnds.push(point1, point2)
	                    : bodyEnds.push(point2, point1);
	            }

	            function layEndLine(endCenter) {
	                var line = [endCenter.slice(), endCenter.slice()];
	                line[0][variableDim] -= halfWidth;
	                line[1][variableDim] += halfWidth;
	                whiskerEnds.push(line);
	            }
	        });
	    }



/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);

	    __webpack_require__(494);
	    __webpack_require__(495);

	    echarts.registerPreprocessor(
	        __webpack_require__(496)
	    );

	    echarts.registerVisual(__webpack_require__(497));
	    echarts.registerLayout(__webpack_require__(498));



/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var SeriesModel = __webpack_require__(267);
	    var whiskerBoxCommon = __webpack_require__(488);
	    var formatUtil = __webpack_require__(245);
	    var encodeHTML = formatUtil.encodeHTML;
	    var addCommas = formatUtil.addCommas;

	    var CandlestickSeries = SeriesModel.extend({

	        type: 'series.candlestick',

	        dependencies: ['xAxis', 'yAxis', 'grid'],

	        /**
	         * @readOnly
	         */
	        valueDimensions: ['open', 'close', 'lowest', 'highest'],

	        /**
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        dimensions: null,

	        /**
	         * @override
	         */
	        defaultOption: {
	            zlevel: 0,                  // 一级层叠
	            z: 2,                       // 二级层叠
	            coordinateSystem: 'cartesian2d',
	            legendHoverLink: true,

	            hoverAnimation: true,

	            // xAxisIndex: 0,
	            // yAxisIndex: 0,

	            layout: null, // 'horizontal' or 'vertical'

	            itemStyle: {
	                normal: {
	                    color: '#c23531', // 阳线 positive
	                    color0: '#314656', // 阴线 negative     '#c23531', '#314656'
	                    borderWidth: 1,
	                    // FIXME
	                    // ec2中使用的是lineStyle.color 和 lineStyle.color0
	                    borderColor: '#c23531',
	                    borderColor0: '#314656'
	                },
	                emphasis: {
	                    borderWidth: 2
	                }
	            },

	            barMaxWidth: null,
	            barMinWidth: null,
	            barWidth: null,

	            animationUpdate: false,
	            animationEasing: 'linear',
	            animationDuration: 300
	        },

	        /**
	         * Get dimension for shadow in dataZoom
	         * @return {string} dimension name
	         */
	        getShadowDim: function () {
	            return 'open';
	        },

	        /**
	         * @override
	         */
	        formatTooltip: function (dataIndex, mutipleSeries) {
	            // It rearly use mutiple candlestick series in one cartesian,
	            // so only consider one series in this default tooltip.
	            var valueHTML = zrUtil.map(this.valueDimensions, function (dim) {
	                return encodeHTML(dim + ': ' + addCommas(this.getData().get(dim, dataIndex)));
	            }, this).join('<br />');

	            var html = [];
	            this.name != null && html.push(encodeHTML(this.name));
	            valueHTML != null && html.push(valueHTML);

	            return html.join('<br />');
	        },

	        brushSelector: function (itemLayout, selectors) {
	            return selectors.rect(itemLayout.brushRect);
	        }

	    });

	    zrUtil.mixin(CandlestickSeries, whiskerBoxCommon.seriesModelMixin, true);

	    module.exports = CandlestickSeries;



/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var ChartView = __webpack_require__(281);
	    var graphic = __webpack_require__(282);
	    var whiskerBoxCommon = __webpack_require__(488);

	    var CandlestickView = ChartView.extend({

	        type: 'candlestick',

	        getStyleUpdater: function () {
	            return updateStyle;
	        },

	        dispose: zrUtil.noop
	    });

	    zrUtil.mixin(CandlestickView, whiskerBoxCommon.viewMixin, true);

	    // Update common properties
	    var normalStyleAccessPath = ['itemStyle', 'normal'];
	    var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];

	    function updateStyle(itemGroup, data, idx) {
	        var itemModel = data.getItemModel(idx);
	        var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	        var color = data.getItemVisual(idx, 'color');
	        var borderColor = data.getItemVisual(idx, 'borderColor') || color;

	        // Color must be excluded.
	        // Because symbol provide setColor individually to set fill and stroke
	        var itemStyle = normalItemStyleModel.getItemStyle(
	            ['color', 'color0', 'borderColor', 'borderColor0']
	        );

	        var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	        whiskerEl.useStyle(itemStyle);
	        whiskerEl.style.stroke = borderColor;

	        var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	        bodyEl.useStyle(itemStyle);
	        bodyEl.style.fill = color;
	        bodyEl.style.stroke = borderColor;

	        var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	        graphic.setHoverStyle(itemGroup, hoverStyle);
	    }


	    module.exports = CandlestickView;



/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    module.exports = function (option) {
	        if (!option || !zrUtil.isArray(option.series)) {
	            return;
	        }

	        // Translate 'k' to 'candlestick'.
	        zrUtil.each(option.series, function (seriesItem) {
	            if (zrUtil.isObject(seriesItem) && seriesItem.type === 'k') {
	                seriesItem.type = 'candlestick';
	            }
	        });
	    };



/***/ },
/* 497 */
/***/ function(module, exports) {

	

	    var positiveBorderColorQuery = ['itemStyle', 'normal', 'borderColor'];
	    var negativeBorderColorQuery = ['itemStyle', 'normal', 'borderColor0'];
	    var positiveColorQuery = ['itemStyle', 'normal', 'color'];
	    var negativeColorQuery = ['itemStyle', 'normal', 'color0'];

	    module.exports = function (ecModel, api) {

	        ecModel.eachRawSeriesByType('candlestick', function (seriesModel) {

	            var data = seriesModel.getData();

	            data.setVisual({
	                legendSymbol: 'roundRect'
	            });

	            // Only visible series has each data be visual encoded
	            if (!ecModel.isSeriesFiltered(seriesModel)) {
	                data.each(function (idx) {
	                    var itemModel = data.getItemModel(idx);
	                    var sign = data.getItemLayout(idx).sign;

	                    data.setItemVisual(
	                        idx,
	                        {
	                            color: itemModel.get(
	                                sign > 0 ? positiveColorQuery : negativeColorQuery
	                            ),
	                            borderColor: itemModel.get(
	                                sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery
	                            )
	                        }
	                    );
	                });
	            }
	        });

	    };


/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	

	    var retrieve = __webpack_require__(243).retrieve;
	    var parsePercent = __webpack_require__(246).parsePercent;

	    module.exports = function (ecModel) {

	        ecModel.eachSeriesByType('candlestick', function (seriesModel) {

	            var coordSys = seriesModel.coordinateSystem;
	            var data = seriesModel.getData();
	            var dimensions = seriesModel.dimensions;
	            var chartLayout = seriesModel.get('layout');

	            var candleWidth = calculateCandleWidth(seriesModel, data);

	            data.each(dimensions, function () {
	                var args = arguments;
	                var dimLen = dimensions.length;
	                var axisDimVal = args[0];
	                var idx = args[dimLen];
	                var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	                var constDim = 1 - variableDim;

	                var openVal = args[1];
	                var closeVal = args[2];
	                var lowestVal = args[3];
	                var highestVal = args[4];

	                var ocLow = Math.min(openVal, closeVal);
	                var ocHigh = Math.max(openVal, closeVal);

	                var ocLowPoint = getPoint(ocLow);
	                var ocHighPoint = getPoint(ocHigh);
	                var lowestPoint = getPoint(lowestVal);
	                var highestPoint = getPoint(highestVal);

	                var whiskerEnds = [
	                    [highestPoint, ocHighPoint],
	                    [lowestPoint, ocLowPoint]
	                ];

	                var bodyEnds = [];
	                addBodyEnd(ocHighPoint, 0);
	                addBodyEnd(ocLowPoint, 1);

	                data.setItemLayout(idx, {
	                    chartLayout: chartLayout,
	                    sign: openVal > closeVal ? -1 : openVal < closeVal ? 1 : 0,
	                    initBaseline: openVal > closeVal
	                        ? ocHighPoint[constDim] : ocLowPoint[constDim], // open point.
	                    bodyEnds: bodyEnds,
	                    whiskerEnds: whiskerEnds,
	                    brushRect: makeBrushRect()
	                });

	                function getPoint(val) {
	                    var p = [];
	                    p[variableDim] = axisDimVal;
	                    p[constDim] = val;
	                    return (isNaN(axisDimVal) || isNaN(val))
	                        ? [NaN, NaN]
	                        : coordSys.dataToPoint(p);
	                }

	                function addBodyEnd(point, start) {
	                    var point1 = point.slice();
	                    var point2 = point.slice();
	                    point1[variableDim] += candleWidth / 2;
	                    point2[variableDim] -= candleWidth / 2;
	                    start
	                        ? bodyEnds.push(point1, point2)
	                        : bodyEnds.push(point2, point1);
	                }

	                function makeBrushRect() {
	                    var pmin = getPoint(Math.min(openVal, closeVal, lowestVal, highestVal));
	                    var pmax = getPoint(Math.max(openVal, closeVal, lowestVal, highestVal));

	                    pmin[variableDim] -= candleWidth / 2;
	                    pmax[variableDim] -= candleWidth / 2;

	                    return {
	                        x: pmin[0],
	                        y: pmin[1],
	                        width: constDim ? candleWidth : pmax[0] - pmin[0],
	                        height: constDim ? pmax[1] - pmin[1] : candleWidth
	                    };
	                }

	            }, true);
	        });
	    };

	    function calculateCandleWidth(seriesModel, data) {
	        var baseAxis = seriesModel.getBaseAxis();
	        var extent;

	        var bandWidth = baseAxis.type === 'category'
	            ? baseAxis.getBandWidth()
	            : (
	                extent = baseAxis.getExtent(),
	                Math.abs(extent[1] - extent[0]) / data.count()
	            );

	        var barMaxWidth = parsePercent(
	            retrieve(seriesModel.get('barMaxWidth'), bandWidth),
	            bandWidth
	        );
	        var barMinWidth = parsePercent(
	            retrieve(seriesModel.get('barMinWidth'), 1),
	            bandWidth
	        );
	        var barWidth = seriesModel.get('barWidth');
	        return barWidth != null
	            ? parsePercent(barWidth, bandWidth)
	            // Put max outer to ensure bar visible in spite of overlap.
	            : Math.max(Math.min(bandWidth / 2, barMaxWidth), barMinWidth);
	    }



/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var echarts = __webpack_require__(240);

	    __webpack_require__(500);
	    __webpack_require__(501);

	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(349), 'effectScatter', 'circle', null
	    ));
	    echarts.registerLayout(zrUtil.curry(
	        __webpack_require__(350), 'effectScatter'
	    ));


/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var createListFromArray = __webpack_require__(341);
	    var SeriesModel = __webpack_require__(267);

	    module.exports = SeriesModel.extend({

	        type: 'series.effectScatter',

	        dependencies: ['grid', 'polar'],

	        getInitialData: function (option, ecModel) {
	            var list = createListFromArray(option.data, this, ecModel);
	            return list;
	        },

	        brushSelector: 'point',

	        defaultOption: {
	            coordinateSystem: 'cartesian2d',
	            zlevel: 0,
	            z: 2,
	            legendHoverLink: true,

	            effectType: 'ripple',

	            progressive: 0,

	            // When to show the effect, option: 'render'|'emphasis'
	            showEffectOn: 'render',

	            // Ripple effect config
	            rippleEffect: {
	                period: 4,
	                // Scale of ripple
	                scale: 2.5,
	                // Brush type can be fill or stroke
	                brushType: 'fill'
	            },

	            // Cartesian coordinate system
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,

	            // Polar coordinate system
	            // polarIndex: 0,

	            // Geo coordinate system
	            // geoIndex: 0,

	            // symbol: null,        // 图形类型
	            symbolSize: 10          // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	            // symbolRotate: null,  // 图形旋转控制

	            // large: false,
	            // Available when large is true
	            // largeThreshold: 2000,

	            // itemStyle: {
	            //     normal: {
	            //         opacity: 1
	            //     }
	            // }
	        }

	    });


/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	

	    var SymbolDraw = __webpack_require__(344);
	    var EffectSymbol = __webpack_require__(502);

	    __webpack_require__(240).extendChartView({

	        type: 'effectScatter',

	        init: function () {
	            this._symbolDraw = new SymbolDraw(EffectSymbol);
	        },

	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var effectSymbolDraw = this._symbolDraw;
	            effectSymbolDraw.updateData(data);
	            this.group.add(effectSymbolDraw.group);
	        },

	        updateLayout: function () {
	            this._symbolDraw.updateLayout();
	        },

	        remove: function (ecModel, api) {
	            this._symbolDraw && this._symbolDraw.remove(api);
	        },

	        dispose: function () {}
	    });


/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Symbol with ripple effect
	 * @module echarts/chart/helper/EffectSymbol
	 */


	    var zrUtil = __webpack_require__(243);
	    var symbolUtil = __webpack_require__(346);
	    var graphic = __webpack_require__(282);
	    var numberUtil = __webpack_require__(246);
	    var Symbol = __webpack_require__(345);
	    var Group = graphic.Group;

	    var EFFECT_RIPPLE_NUMBER = 3;

	    function normalizeSymbolSize(symbolSize) {
	        if (!zrUtil.isArray(symbolSize)) {
	            symbolSize = [+symbolSize, +symbolSize];
	        }
	        return symbolSize;
	    }

	    function updateRipplePath(rippleGroup, effectCfg) {
	        rippleGroup.eachChild(function (ripplePath) {
	            ripplePath.attr({
	                z: effectCfg.z,
	                zlevel: effectCfg.zlevel,
	                style: {
	                    stroke: effectCfg.brushType === 'stroke' ? effectCfg.color : null,
	                    fill: effectCfg.brushType === 'fill' ? effectCfg.color : null
	                }
	            });
	        });
	    }
	    /**
	     * @constructor
	     * @param {module:echarts/data/List} data
	     * @param {number} idx
	     * @extends {module:zrender/graphic/Group}
	     */
	    function EffectSymbol(data, idx) {
	        Group.call(this);

	        var symbol = new Symbol(data, idx);
	        var rippleGroup = new Group();
	        this.add(symbol);
	        this.add(rippleGroup);

	        rippleGroup.beforeUpdate = function () {
	            this.attr(symbol.getScale());
	        };
	        this.updateData(data, idx);
	    }

	    var effectSymbolProto = EffectSymbol.prototype;

	    effectSymbolProto.stopEffectAnimation = function () {
	        this.childAt(1).removeAll();
	    };

	    effectSymbolProto.startEffectAnimation = function (effectCfg) {
	        var symbolType = effectCfg.symbolType;
	        var color = effectCfg.color;
	        var rippleGroup = this.childAt(1);

	        for (var i = 0; i < EFFECT_RIPPLE_NUMBER; i++) {
	            // var ripplePath = symbolUtil.createSymbol(
	            //     symbolType, -0.5, -0.5, 1, 1, color
	            // );
	            // If width/height are set too small (e.g., set to 1) on ios10
	            // and macOS Sierra, a circle stroke become a rect, no matter what
	            // the scale is set. So we set width/height as 2. See #4136.
	            var ripplePath = symbolUtil.createSymbol(
	                symbolType, -1, -1, 2, 2, color
	            );
	            ripplePath.attr({
	                style: {
	                    strokeNoScale: true
	                },
	                z2: 99,
	                silent: true,
	                scale: [0.5, 0.5]
	            });

	            var delay = -i / EFFECT_RIPPLE_NUMBER * effectCfg.period + effectCfg.effectOffset;
	            // TODO Configurable effectCfg.period
	            ripplePath.animate('', true)
	                .when(effectCfg.period, {
	                    scale: [effectCfg.rippleScale / 2, effectCfg.rippleScale / 2]
	                })
	                .delay(delay)
	                .start();
	            ripplePath.animateStyle(true)
	                .when(effectCfg.period, {
	                    opacity: 0
	                })
	                .delay(delay)
	                .start();

	            rippleGroup.add(ripplePath);
	        }

	        updateRipplePath(rippleGroup, effectCfg);
	    };

	    /**
	     * Update effect symbol
	     */
	    effectSymbolProto.updateEffectAnimation = function (effectCfg) {
	        var oldEffectCfg = this._effectCfg;
	        var rippleGroup = this.childAt(1);

	        // Must reinitialize effect if following configuration changed
	        var DIFFICULT_PROPS = ['symbolType', 'period', 'rippleScale'];
	        for (var i = 0; i < DIFFICULT_PROPS; i++) {
	            var propName = DIFFICULT_PROPS[i];
	            if (oldEffectCfg[propName] !== effectCfg[propName]) {
	                this.stopEffectAnimation();
	                this.startEffectAnimation(effectCfg);
	                return;
	            }
	        }

	        updateRipplePath(rippleGroup, effectCfg);
	    };

	    /**
	     * Highlight symbol
	     */
	    effectSymbolProto.highlight = function () {
	        this.trigger('emphasis');
	    };

	    /**
	     * Downplay symbol
	     */
	    effectSymbolProto.downplay = function () {
	        this.trigger('normal');
	    };

	    /**
	     * Update symbol properties
	     * @param  {module:echarts/data/List} data
	     * @param  {number} idx
	     */
	    effectSymbolProto.updateData = function (data, idx) {
	        var seriesModel = data.hostModel;

	        this.childAt(0).updateData(data, idx);

	        var rippleGroup = this.childAt(1);
	        var itemModel = data.getItemModel(idx);
	        var symbolType = data.getItemVisual(idx, 'symbol');
	        var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	        var color = data.getItemVisual(idx, 'color');

	        rippleGroup.attr('scale', symbolSize);

	        rippleGroup.traverse(function (ripplePath) {
	            ripplePath.attr({
	                fill: color
	            });
	        });

	        var symbolOffset = itemModel.getShallow('symbolOffset');
	        if (symbolOffset) {
	            var pos = rippleGroup.position;
	            pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	            pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	        }
	        rippleGroup.rotation = (itemModel.getShallow('symbolRotate') || 0) * Math.PI / 180 || 0;

	        var effectCfg = {};

	        effectCfg.showEffectOn = seriesModel.get('showEffectOn');
	        effectCfg.rippleScale = itemModel.get('rippleEffect.scale');
	        effectCfg.brushType = itemModel.get('rippleEffect.brushType');
	        effectCfg.period = itemModel.get('rippleEffect.period') * 1000;
	        effectCfg.effectOffset = idx / data.count();
	        effectCfg.z = itemModel.getShallow('z') || 0;
	        effectCfg.zlevel = itemModel.getShallow('zlevel') || 0;
	        effectCfg.symbolType = symbolType;
	        effectCfg.color = color;

	        this.off('mouseover').off('mouseout').off('emphasis').off('normal');

	        if (effectCfg.showEffectOn === 'render') {
	            this._effectCfg
	                ? this.updateEffectAnimation(effectCfg)
	                : this.startEffectAnimation(effectCfg);

	            this._effectCfg = effectCfg;
	        }
	        else {
	            // Not keep old effect config
	            this._effectCfg = null;

	            this.stopEffectAnimation();
	            var symbol = this.childAt(0);
	            var onEmphasis = function () {
	                symbol.trigger('emphasis');
	                if (effectCfg.showEffectOn !== 'render') {
	                    this.startEffectAnimation(effectCfg);
	                }
	            };
	            var onNormal = function () {
	                symbol.trigger('normal');
	                if (effectCfg.showEffectOn !== 'render') {
	                    this.stopEffectAnimation();
	                }
	            };
	            this.on('mouseover', onEmphasis, this)
	                .on('mouseout', onNormal, this)
	                .on('emphasis', onEmphasis, this)
	                .on('normal', onNormal, this);
	        }

	        this._effectCfg = effectCfg;
	    };

	    effectSymbolProto.fadeOut = function (cb) {
	        this.off('mouseover').off('mouseout').off('emphasis').off('normal');
	        cb && cb();
	    };

	    zrUtil.inherits(EffectSymbol, Group);

	    module.exports = EffectSymbol;


/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(504);
	    __webpack_require__(505);

	    var echarts = __webpack_require__(240);
	    echarts.registerLayout(
	        __webpack_require__(510)
	    );
	    echarts.registerVisual(
	        __webpack_require__(511)
	    );


/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var SeriesModel = __webpack_require__(267);
	    var List = __webpack_require__(337);
	    var zrUtil = __webpack_require__(243);
	    var formatUtil = __webpack_require__(245);
	    var CoordinateSystem = __webpack_require__(265);

	    // Convert [ [{coord: []}, {coord: []}] ]
	    // to [ { coords: [[]] } ]
	    function preprocessOption (seriesOpt) {
	        var data = seriesOpt.data;
	        if (data && data[0] && data[0][0] && data[0][0].coord) {
	            if (__DEV__) {
	                console.warn('Lines data configuration has been changed to'
	                    + ' { coords:[[1,2],[2,3]] }');
	            }
	            seriesOpt.data = zrUtil.map(data, function (itemOpt) {
	                var coords = [
	                    itemOpt[0].coord, itemOpt[1].coord
	                ];
	                var target = {
	                    coords: coords
	                };
	                if (itemOpt[0].name) {
	                    target.fromName = itemOpt[0].name;
	                }
	                if (itemOpt[1].name) {
	                    target.toName = itemOpt[1].name;
	                }
	                return zrUtil.mergeAll([target, itemOpt[0], itemOpt[1]]);
	            });
	        }
	    }

	    var LinesSeries = SeriesModel.extend({

	        type: 'series.lines',

	        dependencies: ['grid', 'polar'],

	        visualColorAccessPath: 'lineStyle.normal.color',

	        init: function (option) {
	            // Not using preprocessor because mergeOption may not have series.type
	            preprocessOption(option);

	            LinesSeries.superApply(this, 'init', arguments);
	        },

	        mergeOption: function (option) {
	            preprocessOption(option);

	            LinesSeries.superApply(this, 'mergeOption', arguments);
	        },

	        getInitialData: function (option, ecModel) {
	            if (__DEV__) {
	                var CoordSys = CoordinateSystem.get(option.coordinateSystem);
	                if (!CoordSys) {
	                    throw new Error('Unkown coordinate system ' + option.coordinateSystem);
	                }
	            }

	            var lineData = new List(['value'], this);
	            lineData.hasItemOption = false;
	            lineData.initData(option.data, [], function (dataItem, dimName, dataIndex, dimIndex) {
	                // dataItem is simply coords
	                if (dataItem instanceof Array) {
	                    return NaN;
	                }
	                else {
	                    lineData.hasItemOption = true;
	                    var value = dataItem.value;
	                    if (value != null) {
	                        return value instanceof Array ? value[dimIndex] : value;
	                    }
	                }
	            });

	            return lineData;
	        },

	        formatTooltip: function (dataIndex) {
	            var data = this.getData();
	            var itemModel = data.getItemModel(dataIndex);
	            var name = itemModel.get('name');
	            if (name) {
	                return name;
	            }
	            var fromName = itemModel.get('fromName');
	            var toName = itemModel.get('toName');
	            var html = [];
	            fromName != null && html.push(fromName);
	            toName != null && html.push(toName);

	            return formatUtil.encodeHTML(html.join(' > '));
	        },

	        defaultOption: {
	            coordinateSystem: 'geo',
	            zlevel: 0,
	            z: 2,
	            legendHoverLink: true,

	            hoverAnimation: true,
	            // Cartesian coordinate system
	            xAxisIndex: 0,
	            yAxisIndex: 0,

	            symbol: ['none', 'none'],
	            symbolSize: [10, 10],
	            // Geo coordinate system
	            geoIndex: 0,

	            effect: {
	                show: false,
	                period: 4,
	                // Animation delay. support callback
	                // delay: 0,
	                // If move with constant speed px/sec
	                // period will be ignored if this property is > 0,
	                constantSpeed: 0,
	                symbol: 'circle',
	                symbolSize: 3,
	                loop: true,
	                // Length of trail, 0 - 1
	                trailLength: 0.2
	                // Same with lineStyle.normal.color
	                // color
	            },

	            large: false,
	            // Available when large is true
	            largeThreshold: 2000,

	            // If lines are polyline
	            // polyline not support curveness, label, animation
	            polyline: false,

	            label: {
	                normal: {
	                    show: false,
	                    position: 'end'
	                    // distance: 5,
	                    // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                }
	            },

	            lineStyle: {
	                normal: {
	                    opacity: 0.5
	                }
	            }
	        }
	    });


/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	

	    var LineDraw = __webpack_require__(441);
	    var EffectLine = __webpack_require__(506);
	    var Line = __webpack_require__(442);
	    var Polyline = __webpack_require__(507);
	    var EffectPolyline = __webpack_require__(508);
	    var LargeLineDraw = __webpack_require__(509);

	    __webpack_require__(240).extendChartView({

	        type: 'lines',

	        init: function () {},

	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var lineDraw = this._lineDraw;

	            var hasEffect = seriesModel.get('effect.show');
	            var isPolyline = seriesModel.get('polyline');
	            var isLarge = seriesModel.get('large') && data.count() >= seriesModel.get('largeThreshold');

	            if (__DEV__) {
	                if (hasEffect && isLarge) {
	                    console.warn('Large lines not support effect');
	                }
	            }
	            if (hasEffect !== this._hasEffet || isPolyline !== this._isPolyline || isLarge !== this._isLarge) {
	                if (lineDraw) {
	                    lineDraw.remove();
	                }
	                lineDraw = this._lineDraw = isLarge
	                    ? new LargeLineDraw()
	                    : new LineDraw(
	                        isPolyline
	                            ? (hasEffect ? EffectPolyline : Polyline)
	                            : (hasEffect ? EffectLine : Line)
	                    );
	                this._hasEffet = hasEffect;
	                this._isPolyline = isPolyline;
	                this._isLarge = isLarge;
	            }

	            var zlevel = seriesModel.get('zlevel');
	            var trailLength = seriesModel.get('effect.trailLength');

	            var zr = api.getZr();
	            // Avoid the drag cause ghost shadow
	            // FIXME Better way ?
	            zr.painter.getLayer(zlevel).clear(true);
	            // Config layer with motion blur
	            if (this._lastZlevel != null) {
	                zr.configLayer(this._lastZlevel, {
	                    motionBlur: false
	                });
	            }
	            if (hasEffect && trailLength) {
	                if (__DEV__) {
	                    var notInIndividual = false;
	                    ecModel.eachSeries(function (otherSeriesModel) {
	                        if (otherSeriesModel !== seriesModel && otherSeriesModel.get('zlevel') === zlevel) {
	                            notInIndividual = true;
	                        }
	                    });
	                    notInIndividual && console.warn('Lines with trail effect should have an individual zlevel');
	                }

	                zr.configLayer(zlevel, {
	                    motionBlur: true,
	                    lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)
	                });
	            }

	            this.group.add(lineDraw.group);

	            lineDraw.updateData(data);

	            this._lastZlevel = zlevel;
	        },

	        updateLayout: function (seriesModel, ecModel, api) {
	            this._lineDraw.updateLayout(seriesModel);
	            // Not use motion when dragging or zooming
	            var zr = api.getZr();
	            zr.painter.getLayer(this._lastZlevel).clear(true);
	        },

	        remove: function (ecModel, api) {
	            this._lineDraw && this._lineDraw.remove(api, true);
	        },

	        dispose: function () {}
	    });


/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Provide effect for line
	 * @module echarts/chart/helper/EffectLine
	 */


	    var graphic = __webpack_require__(282);
	    var Line = __webpack_require__(442);
	    var zrUtil = __webpack_require__(243);
	    var symbolUtil = __webpack_require__(346);
	    var vec2 = __webpack_require__(249);

	    var curveUtil = __webpack_require__(289);

	    /**
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     * @alias {module:echarts/chart/helper/Line}
	     */
	    function EffectLine(lineData, idx, seriesScope) {
	        graphic.Group.call(this);

	        this.add(this.createLine(lineData, idx, seriesScope));

	        this._updateEffectSymbol(lineData, idx);
	    }

	    var effectLineProto = EffectLine.prototype;

	    effectLineProto.createLine = function (lineData, idx, seriesScope) {
	        return new Line(lineData, idx, seriesScope);
	    };

	    effectLineProto._updateEffectSymbol = function (lineData, idx) {
	        var itemModel = lineData.getItemModel(idx);
	        var effectModel = itemModel.getModel('effect');
	        var size = effectModel.get('symbolSize');
	        var symbolType = effectModel.get('symbol');
	        if (!zrUtil.isArray(size)) {
	            size = [size, size];
	        }
	        var color = effectModel.get('color') || lineData.getItemVisual(idx, 'color');
	        var symbol = this.childAt(1);

	        if (this._symbolType !== symbolType) {
	            // Remove previous
	            this.remove(symbol);

	            symbol = symbolUtil.createSymbol(
	                symbolType, -0.5, -0.5, 1, 1, color
	            );
	            symbol.z2 = 100;
	            symbol.culling = true;

	            this.add(symbol);
	        }

	        // Symbol may be removed if loop is false
	        if (!symbol) {
	            return;
	        }

	        // Shadow color is same with color in default
	        symbol.setStyle('shadowColor', color);
	        symbol.setStyle(effectModel.getItemStyle(['color']));

	        symbol.attr('scale', size);

	        symbol.setColor(color);
	        symbol.attr('scale', size);

	        this._symbolType = symbolType;

	        this._updateEffectAnimation(lineData, effectModel, idx);
	    };

	    effectLineProto._updateEffectAnimation = function (lineData, effectModel, idx) {

	        var symbol = this.childAt(1);
	        if (!symbol) {
	            return;
	        }

	        var self = this;

	        var points = lineData.getItemLayout(idx);

	        var period = effectModel.get('period') * 1000;
	        var loop = effectModel.get('loop');
	        var constantSpeed = effectModel.get('constantSpeed');
	        var delayExpr = zrUtil.retrieve(effectModel.get('delay'), function (idx) {
	            return idx / lineData.count() * period / 3;
	        });
	        var isDelayFunc = typeof delayExpr === 'function';

	        // Ignore when updating
	        symbol.ignore = true;

	        this.updateAnimationPoints(symbol, points);

	        if (constantSpeed > 0) {
	            period = this.getLineLength(symbol) / constantSpeed * 1000;
	        }

	        if (period !== this._period || loop !== this._loop) {

	            symbol.stopAnimation();

	            var delay = delayExpr;
	            if (isDelayFunc) {
	                delay = delayExpr(idx);
	            }
	            if (symbol.__t > 0) {
	                delay = -period * symbol.__t;
	            }
	            symbol.__t = 0;
	            var animator = symbol.animate('', loop)
	                .when(period, {
	                    __t: 1
	                })
	                .delay(delay)
	                .during(function () {
	                    self.updateSymbolPosition(symbol);
	                });
	            if (!loop) {
	                animator.done(function () {
	                    self.remove(symbol);
	                });
	            }
	            animator.start();
	        }

	        this._period = period;
	        this._loop = loop;
	    };

	    effectLineProto.getLineLength = function (symbol) {
	        // Not so accurate
	        return (vec2.dist(symbol.__p1, symbol.__cp1)
	            + vec2.dist(symbol.__cp1, symbol.__p2));
	    };

	    effectLineProto.updateAnimationPoints = function (symbol, points) {
	        symbol.__p1 = points[0];
	        symbol.__p2 = points[1];
	        symbol.__cp1 = points[2] || [
	            (points[0][0] + points[1][0]) / 2,
	            (points[0][1] + points[1][1]) / 2
	        ];
	    };

	    effectLineProto.updateData = function (lineData, idx, seriesScope) {
	        this.childAt(0).updateData(lineData, idx, seriesScope);
	        this._updateEffectSymbol(lineData, idx);
	    };

	    effectLineProto.updateSymbolPosition = function (symbol) {
	        var p1 = symbol.__p1;
	        var p2 = symbol.__p2;
	        var cp1 = symbol.__cp1;
	        var t = symbol.__t;
	        var pos = symbol.position;
	        var quadraticAt = curveUtil.quadraticAt;
	        var quadraticDerivativeAt = curveUtil.quadraticDerivativeAt;
	        pos[0] = quadraticAt(p1[0], cp1[0], p2[0], t);
	        pos[1] = quadraticAt(p1[1], cp1[1], p2[1], t);

	        // Tangent
	        var tx = quadraticDerivativeAt(p1[0], cp1[0], p2[0], t);
	        var ty = quadraticDerivativeAt(p1[1], cp1[1], p2[1], t);

	        symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;

	        symbol.ignore = false;
	    };


	    effectLineProto.updateLayout = function (lineData, idx) {
	        this.childAt(0).updateLayout(lineData, idx);

	        var effectModel = lineData.getItemModel(idx).getModel('effect');
	        this._updateEffectAnimation(lineData, effectModel, idx);
	    };

	    zrUtil.inherits(EffectLine, graphic.Group);

	    module.exports = EffectLine;


/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/chart/helper/Line
	 */


	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);

	    /**
	     * @constructor
	     * @extends {module:zrender/graphic/Group}
	     * @alias {module:echarts/chart/helper/Polyline}
	     */
	    function Polyline(lineData, idx, seriesScope) {
	        graphic.Group.call(this);

	        this._createPolyline(lineData, idx, seriesScope);
	    }

	    var polylineProto = Polyline.prototype;

	    polylineProto._createPolyline = function (lineData, idx, seriesScope) {
	        // var seriesModel = lineData.hostModel;
	        var points = lineData.getItemLayout(idx);

	        var line = new graphic.Polyline({
	            shape: {
	                points: points
	            }
	        });

	        this.add(line);

	        this._updateCommonStl(lineData, idx, seriesScope);
	    };

	    polylineProto.updateData = function (lineData, idx, seriesScope) {
	        var seriesModel = lineData.hostModel;

	        var line = this.childAt(0);
	        var target = {
	            shape: {
	                points: lineData.getItemLayout(idx)
	            }
	        };
	        graphic.updateProps(line, target, seriesModel, idx);

	        this._updateCommonStl(lineData, idx, seriesScope);
	    };

	    polylineProto._updateCommonStl = function (lineData, idx, seriesScope) {
	        var line = this.childAt(0);
	        var itemModel = lineData.getItemModel(idx);

	        var visualColor = lineData.getItemVisual(idx, 'color');

	        var lineStyle = seriesScope && seriesScope.lineStyle;
	        var hoverLineStyle = seriesScope && seriesScope.hoverLineStyle;

	        if (!seriesScope || lineData.hasItemOption) {
	            lineStyle = itemModel.getModel('lineStyle.normal').getLineStyle();
	            hoverLineStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	        }
	        line.useStyle(zrUtil.defaults(
	            {
	                strokeNoScale: true,
	                fill: 'none',
	                stroke: visualColor
	            },
	            lineStyle
	        ));
	        line.hoverStyle = hoverLineStyle;

	        graphic.setHoverStyle(this);
	    };

	    polylineProto.updateLayout = function (lineData, idx) {
	        var polyline = this.childAt(0);
	        polyline.setShape('points', lineData.getItemLayout(idx));
	    };

	    zrUtil.inherits(Polyline, graphic.Group);

	    module.exports = Polyline;


/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Provide effect for line
	 * @module echarts/chart/helper/EffectLine
	 */


	    var Polyline = __webpack_require__(507);
	    var zrUtil = __webpack_require__(243);
	    var EffectLine = __webpack_require__(506);
	    var vec2 = __webpack_require__(249);

	    /**
	     * @constructor
	     * @extends {module:echarts/chart/helper/EffectLine}
	     * @alias {module:echarts/chart/helper/Polyline}
	     */
	    function EffectPolyline(lineData, idx, seriesScope) {
	        EffectLine.call(this, lineData, idx, seriesScope);
	        this._lastFrame = 0;
	        this._lastFramePercent = 0;
	    }

	    var effectPolylineProto = EffectPolyline.prototype;

	    // Overwrite
	    effectPolylineProto.createLine = function (lineData, idx, seriesScope) {
	        return new Polyline(lineData, idx, seriesScope);
	    };

	    // Overwrite
	    effectPolylineProto.updateAnimationPoints = function (symbol, points) {
	        this._points = points;
	        var accLenArr = [0];
	        var len = 0;
	        for (var i = 1; i < points.length; i++) {
	            var p1 = points[i - 1];
	            var p2 = points[i];
	            len += vec2.dist(p1, p2);
	            accLenArr.push(len);
	        }
	        if (len === 0) {
	            return;
	        }

	        for (var i = 0; i < accLenArr.length; i++) {
	            accLenArr[i] /= len;
	        }
	        this._offsets = accLenArr;
	        this._length = len;
	    };

	    // Overwrite
	    effectPolylineProto.getLineLength = function (symbol) {
	        return this._length;
	    };

	    // Overwrite
	    effectPolylineProto.updateSymbolPosition = function (symbol) {
	        var t = symbol.__t;
	        var points = this._points;
	        var offsets = this._offsets;
	        var len = points.length;

	        if (!offsets) {
	            // Has length 0
	            return;
	        }

	        var lastFrame = this._lastFrame;
	        var frame;

	        if (t < this._lastFramePercent) {
	            // Start from the next frame
	            // PENDING start from lastFrame ?
	            var start = Math.min(lastFrame + 1, len - 1);
	            for (frame = start; frame >= 0; frame--) {
	                if (offsets[frame] <= t) {
	                    break;
	                }
	            }
	            // PENDING really need to do this ?
	            frame = Math.min(frame, len - 2);
	        }
	        else {
	            for (var frame = lastFrame; frame < len; frame++) {
	                if (offsets[frame] > t) {
	                    break;
	                }
	            }
	            frame = Math.min(frame - 1, len - 2);
	        }

	        vec2.lerp(
	            symbol.position, points[frame], points[frame + 1],
	            (t - offsets[frame]) / (offsets[frame + 1] - offsets[frame])
	        );

	        var tx = points[frame + 1][0] - points[frame][0];
	        var ty = points[frame + 1][1] - points[frame][1];
	        symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;

	        this._lastFrame = frame;
	        this._lastFramePercent = t;

	        symbol.ignore = false;
	    };

	    zrUtil.inherits(EffectPolyline, EffectLine);

	    module.exports = EffectPolyline;


/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Batch by color



	    var graphic = __webpack_require__(282);

	    var quadraticContain = __webpack_require__(294);
	    var lineContain = __webpack_require__(292);

	    var LargeLineShape = graphic.extendShape({
	        shape: {
	            polyline: false,

	            segs: []
	        },

	        buildPath: function (path, shape) {
	            var segs = shape.segs;
	            var isPolyline = shape.polyline;

	            for (var i = 0; i < segs.length; i++) {
	                var seg = segs[i];
	                if (isPolyline) {
	                    path.moveTo(seg[0][0], seg[0][1]);
	                    for (var j = 1; j < seg.length; j++) {
	                        path.lineTo(seg[j][0], seg[j][1]);
	                    }
	                }
	                else {
	                    path.moveTo(seg[0][0], seg[0][1]);
	                    if (seg.length > 2) {
	                        path.quadraticCurveTo(seg[2][0], seg[2][1], seg[1][0], seg[1][1]);
	                    }
	                    else {
	                        path.lineTo(seg[1][0], seg[1][1]);
	                    }
	                }
	            }
	        },

	        findDataIndex: function (x, y) {
	            var shape = this.shape;
	            var segs = shape.segs;
	            var isPolyline = shape.polyline;
	            var lineWidth = Math.max(this.style.lineWidth, 1);

	            // Not consider transform
	            for (var i = 0; i < segs.length; i++) {
	                var seg = segs[i];
	                if (isPolyline) {
	                    for (var j = 1; j < seg.length; j++) {
	                        if (lineContain.containStroke(
	                            seg[j - 1][0], seg[j - 1][1], seg[j][0], seg[j][1], lineWidth, x, y
	                        )) {
	                            return i;
	                        }
	                    }
	                }
	                else {
	                    if (seg.length > 2) {
	                        if (quadraticContain.containStroke(
	                            seg[0][0], seg[0][1], seg[2][0], seg[2][1], seg[1][0], seg[1][1], lineWidth, x, y
	                        )) {
	                            return i;
	                        }
	                    }
	                    else {
	                        if (lineContain.containStroke(
	                            seg[0][0], seg[0][1], seg[1][0], seg[1][1], lineWidth, x, y
	                        )) {
	                            return i;
	                        }
	                    }
	                }
	            }

	            return -1;
	        }
	    });

	    function LargeLineDraw() {
	        this.group = new graphic.Group();

	        this._lineEl = new LargeLineShape();
	    }

	    var largeLineProto = LargeLineDraw.prototype;

	    /**
	     * Update symbols draw by new data
	     * @param {module:echarts/data/List} data
	     */
	    largeLineProto.updateData = function (data) {
	        this.group.removeAll();

	        var lineEl = this._lineEl;

	        var seriesModel = data.hostModel;

	        lineEl.setShape({
	            segs: data.mapArray(data.getItemLayout),
	            polyline: seriesModel.get('polyline')
	        });

	        lineEl.useStyle(
	            seriesModel.getModel('lineStyle.normal').getLineStyle()
	        );

	        var visualColor = data.getVisual('color');
	        if (visualColor) {
	            lineEl.setStyle('stroke', visualColor);
	        }
	        lineEl.setStyle('fill');

	        // Enable tooltip
	        // PENDING May have performance issue when path is extremely large
	        lineEl.seriesIndex = seriesModel.seriesIndex;
	        lineEl.on('mousemove', function (e) {
	            lineEl.dataIndex = null;
	            var dataIndex = lineEl.findDataIndex(e.offsetX, e.offsetY);
	            if (dataIndex > 0) {
	                // Provide dataIndex for tooltip
	                lineEl.dataIndex = dataIndex;
	            }
	        });

	        // Add back
	        this.group.add(lineEl);
	    };

	    largeLineProto.updateLayout = function (seriesModel) {
	        var data = seriesModel.getData();
	        this._lineEl.setShape({
	            segs: data.mapArray(data.getItemLayout)
	        });
	    };

	    largeLineProto.remove = function () {
	        this.group.removeAll();
	    };

	    module.exports = LargeLineDraw;


/***/ },
/* 510 */
/***/ function(module, exports) {

	

	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('lines', function (seriesModel) {
	            var coordSys = seriesModel.coordinateSystem;
	            var lineData = seriesModel.getData();

	            // FIXME Use data dimensions ?
	            lineData.each(function (idx) {
	                var itemModel = lineData.getItemModel(idx);
	                // TODO Support pure array
	                var coords = (itemModel.option instanceof Array) ?
	                    itemModel.option : itemModel.get('coords');

	                if (__DEV__) {
	                    if (!(coords instanceof Array && coords.length > 0 && coords[0] instanceof Array)) {
	                        throw new Error('Invalid coords ' + JSON.stringify(coords) + '. Lines must have 2d coords array in data item.');
	                    }
	                }
	                var pts = [];

	                if (seriesModel.get('polyline')) {
	                    for (var i = 0; i < coords.length; i++) {
	                        pts.push(coordSys.dataToPoint(coords[i]));
	                    }
	                }
	                else {
	                    pts[0] = coordSys.dataToPoint(coords[0]);
	                    pts[1] = coordSys.dataToPoint(coords[1]);

	                    var curveness = itemModel.get('lineStyle.normal.curveness');
	                    if (+curveness) {
	                        pts[2] = [
	                            (pts[0][0] + pts[1][0]) / 2 - (pts[0][1] - pts[1][1]) * curveness,
	                            (pts[0][1] + pts[1][1]) / 2 - (pts[1][0] - pts[0][0]) * curveness
	                        ];
	                    }
	                }
	                lineData.setItemLayout(idx, pts);
	            });
	        });
	    };


/***/ },
/* 511 */
/***/ function(module, exports) {

	

	    function normalize(a) {
	        if (!(a instanceof Array)) {
	            a = [a, a];
	        }
	        return a;
	    }
	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('lines', function (seriesModel) {
	            var data = seriesModel.getData();
	            var symbolType = normalize(seriesModel.get('symbol'));
	            var symbolSize = normalize(seriesModel.get('symbolSize'));

	            var opacityQuery = 'lineStyle.normal.opacity'.split('.');

	            data.setVisual('fromSymbol', symbolType && symbolType[0]);
	            data.setVisual('toSymbol', symbolType && symbolType[1]);
	            data.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);
	            data.setVisual('toSymbolSize', symbolSize && symbolSize[1]);
	            data.setVisual('opacity', seriesModel.get(opacityQuery));

	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var symbolType = normalize(itemModel.getShallow('symbol', true));
	                var symbolSize = normalize(itemModel.getShallow('symbolSize', true));
	                var opacity = itemModel.get(opacityQuery);

	                symbolType[0] && data.setItemVisual(idx, 'fromSymbol', symbolType[0]);
	                symbolType[1] && data.setItemVisual(idx, 'toSymbol', symbolType[1]);
	                symbolSize[0] && data.setItemVisual(idx, 'fromSymbolSize', symbolSize[0]);
	                symbolSize[1] && data.setItemVisual(idx, 'toSymbolSize', symbolSize[1]);

	                data.setItemVisual(idx, 'opacity', opacity);
	            });
	        });
	    };


/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(513);
	    __webpack_require__(514);


/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	

	    var SeriesModel = __webpack_require__(267);
	    var createListFromArray = __webpack_require__(341);

	    module.exports = SeriesModel.extend({
	        type: 'series.heatmap',

	        getInitialData: function (option, ecModel) {
	            return createListFromArray(option.data, this, ecModel);
	        },

	        defaultOption: {

	            // Cartesian2D or geo
	            coordinateSystem: 'cartesian2d',

	            zlevel: 0,

	            z: 2,

	            // Cartesian coordinate system
	            // xAxisIndex: 0,
	            // yAxisIndex: 0,

	            // Geo coordinate system
	            geoIndex: 0,

	            blurSize: 30,

	            pointSize: 20,

	            maxOpacity: 1,

	            minOpacity: 0
	        }
	    });


/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	

	    var graphic = __webpack_require__(282);
	    var HeatmapLayer = __webpack_require__(515);
	    var zrUtil = __webpack_require__(243);

	    function getIsInPiecewiseRange(dataExtent, pieceList, selected) {
	        var dataSpan = dataExtent[1] - dataExtent[0];
	        pieceList = zrUtil.map(pieceList, function (piece) {
	            return {
	                interval: [
	                    (piece.interval[0] - dataExtent[0]) / dataSpan,
	                    (piece.interval[1] - dataExtent[0]) / dataSpan
	                ]
	            };
	        });
	        var len = pieceList.length;
	        var lastIndex = 0;
	        return function (val) {
	            // Try to find in the location of the last found
	            for (var i = lastIndex; i < len; i++) {
	                var interval = pieceList[i].interval;
	                if (interval[0] <= val && val <= interval[1]) {
	                    lastIndex = i;
	                    break;
	                }
	            }
	            if (i === len) { // Not found, back interation
	                for (var i = lastIndex - 1; i >= 0; i--) {
	                    var interval = pieceList[i].interval;
	                    if (interval[0] <= val && val <= interval[1]) {
	                        lastIndex = i;
	                        break;
	                    }
	                }
	            }
	            return i >= 0 && i < len && selected[i];
	        };
	    }

	    function getIsInContinuousRange(dataExtent, range) {
	        var dataSpan = dataExtent[1] - dataExtent[0];
	        range = [
	            (range[0] - dataExtent[0]) / dataSpan,
	            (range[1] - dataExtent[0]) / dataSpan
	        ];
	        return function (val) {
	            return val >= range[0] && val <= range[1];
	        };
	    }

	    function isGeoCoordSys(coordSys) {
	        var dimensions = coordSys.dimensions;
	        // Not use coorSys.type === 'geo' because coordSys maybe extended
	        return dimensions[0] === 'lng' && dimensions[1] === 'lat';
	    }

	    module.exports = __webpack_require__(240).extendChartView({

	        type: 'heatmap',

	        render: function (seriesModel, ecModel, api) {
	            var visualMapOfThisSeries;
	            ecModel.eachComponent('visualMap', function (visualMap) {
	                visualMap.eachTargetSeries(function (targetSeries) {
	                    if (targetSeries === seriesModel) {
	                        visualMapOfThisSeries = visualMap;
	                    }
	                });
	            });

	            if (__DEV__) {
	                if (!visualMapOfThisSeries) {
	                    throw new Error('Heatmap must use with visualMap');
	                }
	            }

	            this.group.removeAll();
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys.type === 'cartesian2d') {
	                this._renderOnCartesian(coordSys, seriesModel, api);
	            }
	            else if (isGeoCoordSys(coordSys)) {
	                this._renderOnGeo(
	                    coordSys, seriesModel, visualMapOfThisSeries, api
	                );
	            }
	        },

	        dispose: function () {},

	        _renderOnCartesian: function (cartesian, seriesModel, api) {
	            var xAxis = cartesian.getAxis('x');
	            var yAxis = cartesian.getAxis('y');
	            var group = this.group;

	            if (__DEV__) {
	                if (!(xAxis.type === 'category' && yAxis.type === 'category')) {
	                    throw new Error('Heatmap on cartesian must have two category axes');
	                }
	                if (!(xAxis.onBand && yAxis.onBand)) {
	                    throw new Error('Heatmap on cartesian must have two axes with boundaryGap true');
	                }
	            }

	            var width = xAxis.getBandWidth();
	            var height = yAxis.getBandWidth();

	            var data = seriesModel.getData();

	            var itemStyleQuery = 'itemStyle.normal';
	            var hoverItemStyleQuery = 'itemStyle.emphasis';
	            var labelQuery = 'label.normal';
	            var hoverLabelQuery = 'label.emphasis';
	            var style = seriesModel.getModel(itemStyleQuery).getItemStyle(['color']);
	            var hoverStl = seriesModel.getModel(hoverItemStyleQuery).getItemStyle();
	            var labelModel = seriesModel.getModel('label.normal');
	            var hoverLabelModel = seriesModel.getModel('label.emphasis');

	            data.each(['x', 'y', 'z'], function (x, y, z, idx) {
	                var itemModel = data.getItemModel(idx);
	                var point = cartesian.dataToPoint([x, y]);
	                // Ignore empty data
	                if (isNaN(z)) {
	                    return;
	                }
	                var rect = new graphic.Rect({
	                    shape: {
	                        x: point[0] - width / 2,
	                        y: point[1] - height / 2,
	                        width: width,
	                        height: height
	                    },
	                    style: {
	                        fill: data.getItemVisual(idx, 'color'),
	                        opacity: data.getItemVisual(idx, 'opacity')
	                    }
	                });
	                // Optimization for large datset
	                if (data.hasItemOption) {
	                    style = itemModel.getModel(itemStyleQuery).getItemStyle(['color']);
	                    hoverStl = itemModel.getModel(hoverItemStyleQuery).getItemStyle();
	                    labelModel = itemModel.getModel(labelQuery);
	                    hoverLabelModel = itemModel.getModel(hoverLabelQuery);
	                }

	                var rawValue = seriesModel.getRawValue(idx);
	                var defaultText = '-';
	                if (rawValue && rawValue[2] != null) {
	                    defaultText = rawValue[2];
	                }
	                if (labelModel.getShallow('show')) {
	                    graphic.setText(style, labelModel);
	                    style.text = seriesModel.getFormattedLabel(idx, 'normal') || defaultText;
	                }
	                if (hoverLabelModel.getShallow('show')) {
	                    graphic.setText(hoverStl, hoverLabelModel);
	                    hoverStl.text = seriesModel.getFormattedLabel(idx, 'emphasis') || defaultText;
	                }

	                rect.setStyle(style);

	                graphic.setHoverStyle(rect, data.hasItemOption ? hoverStl : zrUtil.extend({}, hoverStl));

	                group.add(rect);
	                data.setItemGraphicEl(idx, rect);
	            });
	        },

	        _renderOnGeo: function (geo, seriesModel, visualMapModel, api) {
	            var inRangeVisuals = visualMapModel.targetVisuals.inRange;
	            var outOfRangeVisuals = visualMapModel.targetVisuals.outOfRange;
	            // if (!visualMapping) {
	            //     throw new Error('Data range must have color visuals');
	            // }

	            var data = seriesModel.getData();
	            var hmLayer = this._hmLayer || (this._hmLayer || new HeatmapLayer());
	            hmLayer.blurSize = seriesModel.get('blurSize');
	            hmLayer.pointSize = seriesModel.get('pointSize');
	            hmLayer.minOpacity = seriesModel.get('minOpacity');
	            hmLayer.maxOpacity = seriesModel.get('maxOpacity');

	            var rect = geo.getViewRect().clone();
	            var roamTransform = geo.getRoamTransform().transform;
	            rect.applyTransform(roamTransform);

	            // Clamp on viewport
	            var x = Math.max(rect.x, 0);
	            var y = Math.max(rect.y, 0);
	            var x2 = Math.min(rect.width + rect.x, api.getWidth());
	            var y2 = Math.min(rect.height + rect.y, api.getHeight());
	            var width = x2 - x;
	            var height = y2 - y;

	            var points = data.mapArray(['lng', 'lat', 'value'], function (lng, lat, value) {
	                var pt = geo.dataToPoint([lng, lat]);
	                pt[0] -= x;
	                pt[1] -= y;
	                pt.push(value);
	                return pt;
	            });

	            var dataExtent = visualMapModel.getExtent();
	            var isInRange = visualMapModel.type === 'visualMap.continuous'
	                ? getIsInContinuousRange(dataExtent, visualMapModel.option.range)
	                : getIsInPiecewiseRange(
	                    dataExtent, visualMapModel.getPieceList(), visualMapModel.option.selected
	                );

	            hmLayer.update(
	                points, width, height,
	                inRangeVisuals.color.getNormalizer(),
	                {
	                    inRange: inRangeVisuals.color.getColorMapper(),
	                    outOfRange: outOfRangeVisuals.color.getColorMapper()
	                },
	                isInRange
	            );
	            var img = new graphic.Image({
	                style: {
	                    width: width,
	                    height: height,
	                    x: x,
	                    y: y,
	                    image: hmLayer.canvas
	                },
	                silent: true
	            });
	            this.group.add(img);
	        }
	    });


/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file defines echarts Heatmap Chart
	 * @author Ovilia (me@zhangwenli.com)
	 * Inspired by https://github.com/mourner/simpleheat
	 *
	 * @module
	 */


	    var GRADIENT_LEVELS = 256;
	    var zrUtil = __webpack_require__(243);

	    /**
	     * Heatmap Chart
	     *
	     * @class
	     */
	    function Heatmap() {
	        var canvas = zrUtil.createCanvas();
	        this.canvas = canvas;

	        this.blurSize = 30;
	        this.pointSize = 20;

	        this.maxOpacity = 1;
	        this.minOpacity = 0;

	        this._gradientPixels = {};
	    }

	    Heatmap.prototype = {
	        /**
	         * Renders Heatmap and returns the rendered canvas
	         * @param {Array} data array of data, each has x, y, value
	         * @param {number} width canvas width
	         * @param {number} height canvas height
	         */
	        update: function(data, width, height, normalize, colorFunc, isInRange) {
	            var brush = this._getBrush();
	            var gradientInRange = this._getGradient(data, colorFunc, 'inRange');
	            var gradientOutOfRange = this._getGradient(data, colorFunc, 'outOfRange');
	            var r = this.pointSize + this.blurSize;

	            var canvas = this.canvas;
	            var ctx = canvas.getContext('2d');
	            var len = data.length;
	            canvas.width = width;
	            canvas.height = height;
	            for (var i = 0; i < len; ++i) {
	                var p = data[i];
	                var x = p[0];
	                var y = p[1];
	                var value = p[2];

	                // calculate alpha using value
	                var alpha = normalize(value);

	                // draw with the circle brush with alpha
	                ctx.globalAlpha = alpha;
	                ctx.drawImage(brush, x - r, y - r);
	            }

	            // colorize the canvas using alpha value and set with gradient
	            var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
	            var pixels = imageData.data;
	            var offset = 0;
	            var pixelLen = pixels.length;
	            var minOpacity = this.minOpacity;
	            var maxOpacity = this.maxOpacity;
	            var diffOpacity = maxOpacity - minOpacity;

	            while(offset < pixelLen) {
	                var alpha = pixels[offset + 3] / 256;
	                var gradientOffset = Math.floor(alpha * (GRADIENT_LEVELS - 1)) * 4;
	                // Simple optimize to ignore the empty data
	                if (alpha > 0) {
	                    var gradient = isInRange(alpha) ? gradientInRange : gradientOutOfRange;
	                    // Any alpha > 0 will be mapped to [minOpacity, maxOpacity]
	                    alpha > 0 && (alpha = alpha * diffOpacity + minOpacity);
	                    pixels[offset++] = gradient[gradientOffset];
	                    pixels[offset++] = gradient[gradientOffset + 1];
	                    pixels[offset++] = gradient[gradientOffset + 2];
	                    pixels[offset++] = gradient[gradientOffset + 3] * alpha * 256;
	                }
	                else {
	                    offset += 4;
	                }
	            }
	            ctx.putImageData(imageData, 0, 0);

	            return canvas;
	        },

	        /**
	         * get canvas of a black circle brush used for canvas to draw later
	         * @private
	         * @returns {Object} circle brush canvas
	         */
	        _getBrush: function() {
	            var brushCanvas = this._brushCanvas || (this._brushCanvas = zrUtil.createCanvas());
	            // set brush size
	            var r = this.pointSize + this.blurSize;
	            var d = r * 2;
	            brushCanvas.width = d;
	            brushCanvas.height = d;

	            var ctx = brushCanvas.getContext('2d');
	            ctx.clearRect(0, 0, d, d);

	            // in order to render shadow without the distinct circle,
	            // draw the distinct circle in an invisible place,
	            // and use shadowOffset to draw shadow in the center of the canvas
	            ctx.shadowOffsetX = d;
	            ctx.shadowBlur = this.blurSize;
	            // draw the shadow in black, and use alpha and shadow blur to generate
	            // color in color map
	            ctx.shadowColor = '#000';

	            // draw circle in the left to the canvas
	            ctx.beginPath();
	            ctx.arc(-r, r, this.pointSize, 0, Math.PI * 2, true);
	            ctx.closePath();
	            ctx.fill();
	            return brushCanvas;
	        },

	        /**
	         * get gradient color map
	         * @private
	         */
	        _getGradient: function (data, colorFunc, state) {
	            var gradientPixels = this._gradientPixels;
	            var pixelsSingleState = gradientPixels[state] || (gradientPixels[state] = new Uint8ClampedArray(256 * 4));
	            var color = [];
	            var off = 0;
	            for (var i = 0; i < 256; i++) {
	                colorFunc[state](i / 255, true, color);
	                pixelsSingleState[off++] = color[0];
	                pixelsSingleState[off++] = color[1];
	                pixelsSingleState[off++] = color[2];
	                pixelsSingleState[off++] = color[3];
	            }
	            return pixelsSingleState;
	        }
	    };

	    module.exports = Heatmap;



/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);

	    __webpack_require__(353);

	    __webpack_require__(517);
	    __webpack_require__(518);

	    var barLayoutGrid = __webpack_require__(379);
	    var echarts = __webpack_require__(240);

	    echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'pictorialBar'));

	    echarts.registerVisual(zrUtil.curry(
	        __webpack_require__(349), 'pictorialBar', 'roundRect', null
	    ));

	    // In case developer forget to include grid component
	    __webpack_require__(352);


/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	

	    var PictorialBarSeries = __webpack_require__(375).extend({

	        type: 'series.pictorialBar',

	        dependencies: ['grid'],

	        defaultOption: {
	            symbol: 'circle',     // Customized bar shape
	            symbolSize: null,     // Can be ['100%', '100%'], null means auto.
	            symbolRotate: null,

	            symbolPosition: null, // 'start' or 'end' or 'center', null means auto.
	            symbolOffset: null,
	            symbolMargin: null,   // start margin and end margin. Can be a number or a percent string.
	                                  // Auto margin by defualt.
	            symbolRepeat: false,  // false/null/undefined, means no repeat.
	                                  // Can be true, means auto calculate repeat times and cut by data.
	                                  // Can be a number, specifies repeat times, and do not cut by data.
	                                  // Can be 'fixed', means auto calculate repeat times but do not cut by data.
	            symbolRepeatDirection: 'end', // 'end' means from 'start' to 'end'.

	            symbolClip: false,
	            symbolBoundingData: null,
	            symbolPatternSize: 400, // 400 * 400 px

	            barGap: '-100%',      // In most case, overlap is needed.

	            // z can be set in data item, which is z2 actually.

	            // Disable progressive
	            progressive: 0,
	            hoverAnimation: false // Open only when needed.
	        },

	        getInitialData: function (option) {
	            // Disable stack.
	            option.stack = null;
	            return PictorialBarSeries.superApply(this, 'getInitialData', arguments);
	        }
	    });

	    module.exports = PictorialBarSeries;


/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var symbolUtil = __webpack_require__(346);
	    var numberUtil = __webpack_require__(246);
	    var helper = __webpack_require__(377);

	    var parsePercent = numberUtil.parsePercent;

	    var BAR_BORDER_WIDTH_QUERY = ['itemStyle', 'normal', 'borderWidth'];

	    // index: +isHorizontal
	    var LAYOUT_ATTRS = [
	        {xy: 'x', wh: 'width', index: 0, posDesc: ['left', 'right']},
	        {xy: 'y', wh: 'height', index: 1, posDesc: ['top', 'bottom']}
	    ];

	    var pathForLineWidth = new graphic.Circle();

	    var BarView = __webpack_require__(240).extendChartView({

	        type: 'pictorialBar',

	        render: function (seriesModel, ecModel, api) {
	            var group = this.group;
	            var data = seriesModel.getData();
	            var oldData = this._data;

	            var cartesian = seriesModel.coordinateSystem;
	            var baseAxis = cartesian.getBaseAxis();
	            var isHorizontal = !!baseAxis.isHorizontal();
	            var coordSysRect = cartesian.grid.getRect();

	            var opt = {
	                ecSize: {width: api.getWidth(), height: api.getHeight()},
	                seriesModel: seriesModel,
	                coordSys: cartesian,
	                coordSysExtent: [
	                    [coordSysRect.x, coordSysRect.x + coordSysRect.width],
	                    [coordSysRect.y, coordSysRect.y + coordSysRect.height]
	                ],
	                isHorizontal: isHorizontal,
	                valueDim: LAYOUT_ATTRS[+isHorizontal],
	                categoryDim: LAYOUT_ATTRS[1 - isHorizontal]
	            };

	            data.diff(oldData)
	                .add(function (dataIndex) {
	                    if (!data.hasValue(dataIndex)) {
	                        return;
	                    }

	                    var itemModel = getItemModel(data, dataIndex);
	                    var symbolMeta = getSymbolMeta(data, dataIndex, itemModel, opt);

	                    var bar = createBar(data, opt, symbolMeta);

	                    data.setItemGraphicEl(dataIndex, bar);
	                    group.add(bar);

	                    updateCommon(bar, opt, symbolMeta);
	                })
	                .update(function (newIndex, oldIndex) {
	                    var bar = oldData.getItemGraphicEl(oldIndex);

	                    if (!data.hasValue(newIndex)) {
	                        group.remove(bar);
	                        return;
	                    }

	                    var itemModel = getItemModel(data, newIndex);
	                    var symbolMeta = getSymbolMeta(data, newIndex, itemModel, opt);

	                    var pictorialShapeStr = getShapeStr(data, symbolMeta);
	                    if (bar && pictorialShapeStr !== bar.__pictorialShapeStr) {
	                        group.remove(bar);
	                        data.setItemGraphicEl(newIndex, null);
	                        bar = null;
	                    }

	                    if (bar) {
	                        updateBar(bar, opt, symbolMeta);
	                    }
	                    else {
	                        bar = createBar(data, opt, symbolMeta, true);
	                    }

	                    data.setItemGraphicEl(newIndex, bar);
	                    bar.__pictorialSymbolMeta = symbolMeta;
	                    // Add back
	                    group.add(bar);

	                    updateCommon(bar, opt, symbolMeta);
	                })
	                .remove(function (dataIndex) {
	                    var bar = oldData.getItemGraphicEl(dataIndex);
	                    bar && removeBar(oldData, dataIndex, bar.__pictorialSymbolMeta.animationModel, bar);
	                })
	                .execute();

	            this._data = data;

	            return this.group;
	        },

	        dispose: zrUtil.noop,

	        remove: function (ecModel, api) {
	            var group = this.group;
	            var data = this._data;
	            if (ecModel.get('animation')) {
	                if (data) {
	                    data.eachItemGraphicEl(function (bar) {
	                        removeBar(data, bar.dataIndex, ecModel, bar);
	                    });
	                }
	            }
	            else {
	                group.removeAll();
	            }
	        }
	    });


	    // Set or calculate default value about symbol, and calculate layout info.
	    function getSymbolMeta(data, dataIndex, itemModel, opt) {
	        var layout = data.getItemLayout(dataIndex);
	        var symbolRepeat = itemModel.get('symbolRepeat');
	        var symbolClip = itemModel.get('symbolClip');
	        var symbolPosition = itemModel.get('symbolPosition') || 'start';
	        var symbolRotate = itemModel.get('symbolRotate');
	        var rotation = (symbolRotate || 0) * Math.PI / 180 || 0;
	        var symbolPatternSize = itemModel.get('symbolPatternSize') || 2;
	        var isAnimationEnabled = itemModel.isAnimationEnabled();

	        var symbolMeta = {
	            dataIndex: dataIndex,
	            layout: layout,
	            itemModel: itemModel,
	            symbolType: data.getItemVisual(dataIndex, 'symbol') || 'circle',
	            color: data.getItemVisual(dataIndex, 'color'),
	            symbolClip: symbolClip,
	            symbolRepeat: symbolRepeat,
	            symbolRepeatDirection: itemModel.get('symbolRepeatDirection'),
	            symbolPatternSize: symbolPatternSize,
	            rotation: rotation,
	            animationModel: isAnimationEnabled ? itemModel : null,
	            hoverAnimation: isAnimationEnabled && itemModel.get('hoverAnimation'),
	            z2: itemModel.getShallow('z', true) || 0
	        };

	        prepareBarLength(itemModel, symbolRepeat, layout, opt, symbolMeta);

	        prepareSymbolSize(
	            data, dataIndex, layout, symbolRepeat, symbolClip, symbolMeta.boundingLength,
	            symbolMeta.pxSign, symbolPatternSize, opt, symbolMeta
	        );

	        prepareLineWidth(itemModel, symbolMeta.symbolScale, rotation, opt, symbolMeta);

	        var symbolSize = symbolMeta.symbolSize;
	        var symbolOffset = itemModel.get('symbolOffset');
	        if (zrUtil.isArray(symbolOffset)) {
	            symbolOffset = [
	                parsePercent(symbolOffset[0], symbolSize[0]),
	                parsePercent(symbolOffset[1], symbolSize[1])
	            ];
	        }

	        prepareLayoutInfo(
	            itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset,
	            symbolPosition, symbolMeta.valueLineWidth, symbolMeta.boundingLength, symbolMeta.repeatCutLength,
	            opt, symbolMeta
	        );

	        return symbolMeta;
	    }

	    // bar length can be negative.
	    function prepareBarLength(itemModel, symbolRepeat, layout, opt, output) {
	        var valueDim = opt.valueDim;
	        var symbolBoundingData = itemModel.get('symbolBoundingData');
	        var valueAxis = opt.coordSys.getOtherAxis(opt.coordSys.getBaseAxis());
	        var zeroPx = valueAxis.toGlobalCoord(valueAxis.dataToCoord(0));

	        var boundingLength = output.boundingLength = symbolBoundingData != null
	            ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.scale.parse(symbolBoundingData))) - zeroPx
	            : symbolRepeat
	            ? opt.coordSysExtent[valueDim.index][1 - +(layout[valueDim.wh] <= 0)] - zeroPx
	            : layout[valueDim.wh];

	        if (symbolRepeat) {
	            output.repeatCutLength = layout[valueDim.wh];
	        }

	        output.pxSign = boundingLength > 0 ? 1 : boundingLength < 0 ? -1 : 0;
	    }

	    // Support ['100%', '100%']
	    function prepareSymbolSize(
	        data, dataIndex, layout, symbolRepeat, symbolClip, boundingLength,
	        pxSign, symbolPatternSize, opt, output
	    ) {
	        var valueDim = opt.valueDim;
	        var categoryDim = opt.categoryDim;
	        var categorySize = Math.abs(layout[categoryDim.wh]);

	        var symbolSize = data.getItemVisual(dataIndex, 'symbolSize');
	        if (zrUtil.isArray(symbolSize)) {
	            symbolSize = symbolSize.slice();
	        }
	        else {
	            if (symbolSize == null) {
	                symbolSize = '100%';
	            }
	            symbolSize = [symbolSize, symbolSize];
	        }

	        // Note: percentage symbolSize (like '100%') do not consider lineWidth, because it is
	        // to complicated to calculate real percent value if considering scaled lineWidth.
	        // So the actual size will bigger than layout size if lineWidth is bigger than zero,
	        // which can be tolerated in pictorial chart.

	        symbolSize[categoryDim.index] = parsePercent(
	            symbolSize[categoryDim.index],
	            categorySize
	        );
	        symbolSize[valueDim.index] = parsePercent(
	            symbolSize[valueDim.index],
	            symbolRepeat ? categorySize : Math.abs(boundingLength)
	        );

	        output.symbolSize = symbolSize;

	        // If x or y is less than zero, show reversed shape.
	        var symbolScale = output.symbolScale = [
	            symbolSize[0] / symbolPatternSize,
	            symbolSize[1] / symbolPatternSize
	        ];
	        // Follow convention, 'right' and 'top' is the normal scale.
	        symbolScale[valueDim.index] *= (opt.isHorizontal ? -1 : 1) * pxSign;
	    }

	    function prepareLineWidth(itemModel, symbolScale, rotation, opt, output) {
	        // In symbols are drawn with scale, so do not need to care about the case that width
	        // or height are too small. But symbol use strokeNoScale, where acture lineWidth should
	        // be calculated.
	        var valueLineWidth = itemModel.get(BAR_BORDER_WIDTH_QUERY) || 0;

	        if (valueLineWidth) {
	            pathForLineWidth.attr({
	                scale: symbolScale.slice(),
	                rotation: rotation
	            });
	            pathForLineWidth.updateTransform();
	            valueLineWidth /= pathForLineWidth.getLineScale();
	            valueLineWidth *= symbolScale[opt.valueDim.index];
	        }

	        output.valueLineWidth = valueLineWidth;
	    }

	    function prepareLayoutInfo(
	        itemModel, symbolSize, layout, symbolRepeat, symbolClip, symbolOffset,
	        symbolPosition, valueLineWidth, boundingLength, repeatCutLength, opt, output
	    ) {
	        var categoryDim = opt.categoryDim;
	        var valueDim = opt.valueDim;
	        var pxSign = output.pxSign;

	        var unitLength = Math.max(symbolSize[valueDim.index] + valueLineWidth, 0);
	        var pathLen = unitLength;

	        // Note: rotation will not effect the layout of symbols, because user may
	        // want symbols to rotate on its center, which should not be translated
	        // when rotating.

	        if (symbolRepeat) {
	            var absBoundingLength = Math.abs(boundingLength);

	            var symbolMargin = zrUtil.retrieve(itemModel.get('symbolMargin'), '15%') + '';
	            var hasEndGap = false;
	            if (symbolMargin.lastIndexOf('!') === symbolMargin.length - 1) {
	                hasEndGap = true;
	                symbolMargin = symbolMargin.slice(0, symbolMargin.length - 1);
	            }
	            symbolMargin = parsePercent(symbolMargin, symbolSize[valueDim.index]);

	            var uLenWithMargin = Math.max(unitLength + symbolMargin * 2, 0);

	            // When symbol margin is less than 0, margin at both ends will be subtracted
	            // to ensure that all of the symbols will not be overflow the given area.
	            var endFix = hasEndGap ? 0 : symbolMargin * 2;

	            // Both final repeatTimes and final symbolMargin area calculated based on
	            // boundingLength.
	            var repeatSpecified = numberUtil.isNumeric(symbolRepeat);
	            var repeatTimes = repeatSpecified
	                ? symbolRepeat
	                : toIntTimes((absBoundingLength + endFix) / uLenWithMargin);

	            // Adjust calculate margin, to ensure each symbol is displayed
	            // entirely in the given layout area.
	            var mDiff = absBoundingLength - repeatTimes * unitLength;
	            symbolMargin = mDiff / 2 / (hasEndGap ? repeatTimes : repeatTimes - 1);
	            uLenWithMargin = unitLength + symbolMargin * 2;
	            endFix = hasEndGap ? 0 : symbolMargin * 2;

	            // Update repeatTimes when not all symbol will be shown.
	            if (!repeatSpecified && symbolRepeat !== 'fixed') {
	                repeatTimes = repeatCutLength
	                    ? toIntTimes((Math.abs(repeatCutLength) + endFix) / uLenWithMargin)
	                    : 0;
	            }

	            pathLen = repeatTimes * uLenWithMargin - endFix;
	            output.repeatTimes = repeatTimes;
	            output.symbolMargin = symbolMargin;
	        }

	        var sizeFix = pxSign * (pathLen / 2);
	        var pathPosition = output.pathPosition = [];
	        pathPosition[categoryDim.index] = layout[categoryDim.wh] / 2;
	        pathPosition[valueDim.index] = symbolPosition === 'start'
	            ? sizeFix
	            : symbolPosition === 'end'
	            ? boundingLength - sizeFix
	            : boundingLength / 2; // 'center'
	        if (symbolOffset) {
	            pathPosition[0] += symbolOffset[0];
	            pathPosition[1] += symbolOffset[1];
	        }

	        var bundlePosition = output.bundlePosition = [];
	        bundlePosition[categoryDim.index] = layout[categoryDim.xy];
	        bundlePosition[valueDim.index] = layout[valueDim.xy];

	        var barRectShape = output.barRectShape = zrUtil.extend({}, layout);
	        barRectShape[valueDim.wh] = pxSign * Math.max(
	            Math.abs(layout[valueDim.wh]), Math.abs(pathPosition[valueDim.index] + sizeFix)
	        );
	        barRectShape[categoryDim.wh] = layout[categoryDim.wh];

	        var clipShape = output.clipShape = {};
	        // Consider that symbol may be overflow layout rect.
	        clipShape[categoryDim.xy] = -layout[categoryDim.xy];
	        clipShape[categoryDim.wh] = opt.ecSize[categoryDim.wh];
	        clipShape[valueDim.xy] = 0;
	        clipShape[valueDim.wh] = layout[valueDim.wh];
	    }

	    function createPath(symbolMeta) {
	        var symbolPatternSize = symbolMeta.symbolPatternSize;
	        var path = symbolUtil.createSymbol(
	            // Consider texture img, make a big size.
	            symbolMeta.symbolType,
	            -symbolPatternSize / 2,
	            -symbolPatternSize / 2,
	            symbolPatternSize,
	            symbolPatternSize,
	            symbolMeta.color
	        );
	        path.attr({
	            culling: true
	        });
	        path.type !== 'image' && path.setStyle({
	            strokeNoScale: true
	        });

	        return path;
	    }

	    function createOrUpdateRepeatSymbols(bar, opt, symbolMeta, isUpdate) {
	        var bundle = bar.__pictorialBundle;
	        var symbolSize = symbolMeta.symbolSize;
	        var valueLineWidth = symbolMeta.valueLineWidth;
	        var pathPosition = symbolMeta.pathPosition;
	        var valueDim = opt.valueDim;
	        var repeatTimes = symbolMeta.repeatTimes || 0;

	        var index = 0;
	        var unit = symbolSize[opt.valueDim.index] + valueLineWidth + symbolMeta.symbolMargin * 2;

	        eachPath(bar, function (path) {
	            path.__pictorialAnimationIndex = index;
	            path.__pictorialRepeatTimes = repeatTimes;
	            if (index < repeatTimes) {
	                updateAttr(path, null, makeTarget(index), symbolMeta, isUpdate);
	            }
	            else {
	                updateAttr(path, null, {scale: [0, 0]}, symbolMeta, isUpdate, function () {
	                    bundle.remove(path);
	                });
	            }

	            updateHoverAnimation(path, symbolMeta);

	            index++;
	        });

	        for (; index < repeatTimes; index++) {
	            var path = createPath(symbolMeta);
	            path.__pictorialAnimationIndex = index;
	            path.__pictorialRepeatTimes = repeatTimes;
	            bundle.add(path);

	            var target = makeTarget(index, true);

	            updateAttr(
	                path,
	                {
	                    position: target.position,
	                    scale: [0, 0]
	                },
	                {
	                    scale: target.scale,
	                    rotation: target.rotation
	                },
	                symbolMeta,
	                isUpdate
	            );

	            // FIXME
	            // If all emphasis/normal through action.
	            path
	                .on('mouseover', onMouseOver)
	                .on('mouseout', onMouseOut);

	            updateHoverAnimation(path, symbolMeta);
	        }

	        function makeTarget(index) {
	            var position = pathPosition.slice();
	            // (start && pxSign > 0) || (end && pxSign < 0): i = repeatTimes - index
	            // Otherwise: i = index;
	            var pxSign = symbolMeta.pxSign;
	            var i = index;
	            if (symbolMeta.symbolRepeatDirection === 'start' ? pxSign > 0 : pxSign < 0) {
	                i = repeatTimes - 1 - index;
	            }
	            position[valueDim.index] = unit * (i - repeatTimes / 2 + 0.5) + pathPosition[valueDim.index];

	            return {
	                position: position,
	                scale: symbolMeta.symbolScale.slice(),
	                rotation: symbolMeta.rotation
	            };
	        }

	        function onMouseOver() {
	            eachPath(bar, function (path) {
	                path.trigger('emphasis');
	            });
	        }

	        function onMouseOut() {
	            eachPath(bar, function (path) {
	                path.trigger('normal');
	            });
	        }
	    }

	    function createOrUpdateSingleSymbol(bar, opt, symbolMeta, isUpdate) {
	        var bundle = bar.__pictorialBundle;
	        var mainPath = bar.__pictorialMainPath;

	        if (!mainPath) {
	            mainPath = bar.__pictorialMainPath = createPath(symbolMeta);
	            bundle.add(mainPath);

	            updateAttr(
	                mainPath,
	                {
	                    position: symbolMeta.pathPosition.slice(),
	                    scale: [0, 0],
	                    rotation: symbolMeta.rotation
	                },
	                {
	                    scale: symbolMeta.symbolScale.slice()
	                },
	                symbolMeta,
	                isUpdate
	            );

	            mainPath
	                .on('mouseover', onMouseOver)
	                .on('mouseout', onMouseOut);
	        }
	        else {
	            updateAttr(
	                mainPath,
	                null,
	                {
	                    position: symbolMeta.pathPosition.slice(),
	                    scale: symbolMeta.symbolScale.slice(),
	                    rotation: symbolMeta.rotation
	                },
	                symbolMeta,
	                isUpdate
	            );
	        }

	        updateHoverAnimation(mainPath, symbolMeta);

	        function onMouseOver() {
	            this.trigger('emphasis');
	        }

	        function onMouseOut() {
	            this.trigger('normal');
	        }
	    }

	    // bar rect is used for label.
	    function createOrUpdateBarRect(bar, symbolMeta, isUpdate) {
	        var rectShape = zrUtil.extend({}, symbolMeta.barRectShape);

	        var barRect = bar.__pictorialBarRect;
	        if (!barRect) {
	            barRect = bar.__pictorialBarRect = new graphic.Rect({
	                z2: 2,
	                shape: rectShape,
	                silent: true,
	                style: {
	                    stroke: 'transparent',
	                    fill: 'transparent',
	                    lineWidth: 0
	                }
	            });

	            bar.add(barRect);
	        }
	        else {
	            updateAttr(barRect, null, {shape: rectShape}, symbolMeta, isUpdate);
	        }
	    }

	    function createOrUpdateClip(bar, opt, symbolMeta, isUpdate) {
	        // If not clip, symbol will be remove and rebuilt.
	        if (symbolMeta.symbolClip) {
	            var clipPath = bar.__pictorialClipPath;
	            var clipShape = zrUtil.extend({}, symbolMeta.clipShape);
	            var valueDim = opt.valueDim;
	            var animationModel = symbolMeta.animationModel;
	            var dataIndex = symbolMeta.dataIndex;

	            if (clipPath) {
	                graphic.updateProps(
	                    clipPath, {shape: clipShape}, animationModel, dataIndex
	                );
	            }
	            else {
	                clipShape[valueDim.wh] = 0;
	                clipPath = new graphic.Rect({shape: clipShape});
	                bar.__pictorialBundle.setClipPath(clipPath);
	                bar.__pictorialClipPath = clipPath;

	                var target = {};
	                target[valueDim.wh] = symbolMeta.clipShape[valueDim.wh];

	                graphic[isUpdate ? 'updateProps' : 'initProps'](
	                    clipPath, {shape: target}, animationModel, dataIndex
	                );
	            }
	        }
	    }

	    function getItemModel(data, dataIndex) {
	        var itemModel = data.getItemModel(dataIndex);
	        itemModel.getAnimationDelayParams = getAnimationDelayParams;
	        itemModel.isAnimationEnabled = isAnimationEnabled;
	        return itemModel;
	    }

	    function getAnimationDelayParams(path) {
	        // The order is the same as the z-order, see `symbolRepeatDiretion`.
	        return {
	            index: path.__pictorialAnimationIndex,
	            count: path.__pictorialRepeatTimes
	        };
	    }

	    function isAnimationEnabled() {
	        // `animation` prop can be set on itemModel in pictorial bar chart.
	        return this.parentModel.isAnimationEnabled() && !!this.getShallow('animation');
	    }

	    function updateHoverAnimation(path, symbolMeta) {
	        path.off('emphasis').off('normal');

	        var scale = symbolMeta.symbolScale.slice();

	        symbolMeta.hoverAnimation && path
	            .on('emphasis', function() {
	                this.animateTo({
	                    scale: [scale[0] * 1.1, scale[1] * 1.1]
	                }, 400, 'elasticOut');
	            })
	            .on('normal', function() {
	                this.animateTo({
	                    scale: scale.slice()
	                }, 400, 'elasticOut');
	            });
	    }

	    function createBar(data, opt, symbolMeta, isUpdate) {
	        // bar is the main element for each data.
	        var bar = new graphic.Group();
	        // bundle is used for location and clip.
	        var bundle = new graphic.Group();
	        bar.add(bundle);
	        bar.__pictorialBundle = bundle;
	        bundle.attr('position', symbolMeta.bundlePosition.slice());

	        if (symbolMeta.symbolRepeat) {
	            createOrUpdateRepeatSymbols(bar, opt, symbolMeta);
	        }
	        else {
	            createOrUpdateSingleSymbol(bar, opt, symbolMeta);
	        }

	        createOrUpdateBarRect(bar, symbolMeta, isUpdate);

	        createOrUpdateClip(bar, opt, symbolMeta, isUpdate);

	        bar.__pictorialShapeStr = getShapeStr(data, symbolMeta);
	        bar.__pictorialSymbolMeta = symbolMeta;

	        return bar;
	    }

	    function updateBar(bar, opt, symbolMeta) {
	        var animationModel = symbolMeta.animationModel;
	        var dataIndex = symbolMeta.dataIndex;
	        var bundle = bar.__pictorialBundle;

	        graphic.updateProps(
	            bundle, {position: symbolMeta.bundlePosition.slice()}, animationModel, dataIndex
	        );

	        if (symbolMeta.symbolRepeat) {
	            createOrUpdateRepeatSymbols(bar, opt, symbolMeta, true);
	        }
	        else {
	            createOrUpdateSingleSymbol(bar, opt, symbolMeta, true);
	        }

	        createOrUpdateBarRect(bar, symbolMeta, true);

	        createOrUpdateClip(bar, opt, symbolMeta, true);
	    }

	    function removeBar(data, dataIndex, animationModel, bar) {
	        // Not show text when animating
	        var labelRect = bar.__pictorialBarRect;
	        labelRect && (labelRect.style.text = '');

	        var pathes = [];
	        eachPath(bar, function (path) {
	            pathes.push(path);
	        });
	        bar.__pictorialMainPath && pathes.push(bar.__pictorialMainPath);

	        // I do not find proper remove animation for clip yet.
	        bar.__pictorialClipPath && (animationModel = null);

	        zrUtil.each(pathes, function (path) {
	            graphic.updateProps(
	                path, {scale: [0, 0]}, animationModel, dataIndex,
	                function () {
	                    bar.parent && bar.parent.remove(bar);
	                }
	            );
	        });

	        data.setItemGraphicEl(dataIndex, null);
	    }

	    function getShapeStr(data, symbolMeta) {
	        return [
	            data.getItemVisual(symbolMeta.dataIndex, 'symbol') || 'none',
	            !!symbolMeta.symbolRepeat,
	            !!symbolMeta.symbolClip
	        ].join(':');
	    }

	    function eachPath(bar, cb, context) {
	        // Do not use Group#eachChild, because it do not support remove.
	        zrUtil.each(bar.__pictorialBundle.children(), function (el) {
	            el !== bar.__pictorialBarRect && cb.call(context, el);
	        });
	    }

	    function updateAttr(el, immediateAttrs, animationAttrs, symbolMeta, isUpdate, cb) {
	        immediateAttrs && el.attr(immediateAttrs);
	        // when symbolCip used, only clip path has init animation, otherwise it would be weird effect.
	        if (symbolMeta.symbolClip && !isUpdate) {
	            animationAttrs && el.attr(animationAttrs);
	        }
	        else {
	            animationAttrs && graphic[isUpdate ? 'updateProps' : 'initProps'](
	                el, animationAttrs, symbolMeta.animationModel, symbolMeta.dataIndex, cb
	            );
	        }
	    }

	    function updateCommon(bar, opt, symbolMeta) {
	        var color = symbolMeta.color;
	        var dataIndex = symbolMeta.dataIndex;
	        var itemModel = symbolMeta.itemModel;
	        // Color must be excluded.
	        // Because symbol provide setColor individually to set fill and stroke
	        var normalStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	        var hoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();

	        eachPath(bar, function (path) {
	            // PENDING setColor should be before setStyle!!!
	            path.setColor(color);
	            path.setStyle(zrUtil.defaults(
	                {
	                    fill: color,
	                    opacity: symbolMeta.opacity
	                },
	                normalStyle
	            ));
	            graphic.setHoverStyle(path, hoverStyle);

	            path.z2 = symbolMeta.z2;
	        });

	        var barRectHoverStyle = {};
	        var barPositionOutside = opt.valueDim.posDesc[+(symbolMeta.boundingLength > 0)];
	        var barRect = bar.__pictorialBarRect;

	        helper.setLabel(
	            barRect.style, barRectHoverStyle, itemModel,
	            color, opt.seriesModel, dataIndex, barPositionOutside
	        );

	        graphic.setHoverStyle(barRect, barRectHoverStyle);
	    }

	    function toIntTimes(times) {
	        var roundedTimes = Math.round(times);
	        // Escapse accurate error
	        return Math.abs(times - roundedTimes) < 1e-4
	            ? roundedTimes
	            : Math.ceil(times);
	    }

	    module.exports = BarView;


/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);

	    __webpack_require__(520);

	    __webpack_require__(526);

	    __webpack_require__(527);

	    echarts.registerLayout(__webpack_require__(528));

	    echarts.registerVisual(__webpack_require__(529));

	    echarts.registerProcessor(
	        zrUtil.curry(__webpack_require__(388), 'themeRiver')
	    );


/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(521);
	    __webpack_require__(524);
	    __webpack_require__(525);

	    var echarts = __webpack_require__(240);

	    echarts.extendComponentView({
	        type: 'single'
	    });



/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Single coordinate system creator.
	 */


	    var Single = __webpack_require__(522);

	    /**
	     * Create single coordinate system and inject it into seriesModel.
	     *
	     * @param {module:echarts/model/Global} ecModel
	     * @param {module:echarts/ExtensionAPI} api
	     * @return {Array.<module:echarts/coord/single/Single>}
	     */
	    function create(ecModel, api) {
	        var singles = [];

	        ecModel.eachComponent('singleAxis', function(axisModel, idx) {

	            var single = new Single(axisModel, ecModel, api);
	            single.name = 'single_' + idx;
	            single.resize(axisModel, api);
	            axisModel.coordinateSystem = single;
	            singles.push(single);

	        });

	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'singleAxis') {
	                var singleAxisModel = ecModel.queryComponents({
	                    mainType: 'singleAxis',
	                    index: seriesModel.get('singleAxisIndex'),
	                    id: seriesModel.get('singleAxisId')
	                })[0];
	                seriesModel.coordinateSystem = singleAxisModel && singleAxisModel.coordinateSystem;
	            }
	        });

	        return singles;
	    }

	    __webpack_require__(265).register('single', {
	        create: create,
	        dimensions: Single.prototype.dimensions
	    });


/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Single coordinates system.
	 */


	    var SingleAxis = __webpack_require__(523);
	    var axisHelper = __webpack_require__(354);
	    var layout = __webpack_require__(260);

	    /**
	     * Create a single coordinates system.
	     *
	     * @param {module:echarts/coord/single/AxisModel} axisModel
	     * @param {module:echarts/model/Global} ecModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function Single(axisModel, ecModel, api) {

	        /**
	         * @type {string}
	         * @readOnly
	         */
	        this.dimension = 'single';

	        /**
	         * Add it just for draw tooltip.
	         *
	         * @type {Array.<string>}
	         * @readOnly
	         */
	        this.dimensions = ['single'];

	        /**
	         * @private
	         * @type {module:echarts/coord/single/SingleAxis}.
	         */
	        this._axis = null;

	        /**
	         * @private
	         * @type {module:zrender/core/BoundingRect}
	         */
	        this._rect;

	        this._init(axisModel, ecModel, api);

	        /**
	         * @type {module:echarts/coord/single/AxisModel}
	         */
	        this._model = axisModel;
	    }

	    Single.prototype = {

	        type: 'singleAxis',

	        constructor: Single,

	        /**
	         * Initialize single coordinate system.
	         *
	         * @param  {module:echarts/coord/single/AxisModel} axisModel
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         * @private
	         */
	        _init: function (axisModel, ecModel, api) {

	            var dim = this.dimension;

	            var axis = new SingleAxis(
	                dim,
	                axisHelper.createScaleByModel(axisModel),
	                [0, 0],
	                axisModel.get('type'),
	                axisModel.get('position')
	            );

	            var isCategory = axis.type === 'category';
	            axis.onBand = isCategory && axisModel.get('boundaryGap');
	            axis.inverse = axisModel.get('inverse');
	            axis.orient = axisModel.get('orient');

	            axisModel.axis = axis;
	            axis.model = axisModel;
	            this._axis = axis;
	        },

	        /**
	         * Update axis scale after data processed
	         * @param  {module:echarts/model/Global} ecModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        update: function (ecModel, api) {
	            ecModel.eachSeries(function (seriesModel) {
	                if (seriesModel.coordinateSystem === this) {
	                    var data = seriesModel.getData();
	                    var dim = this.dimension;
	                    this._axis.scale.unionExtentFromData(
	                        data, seriesModel.coordDimToDataDim(dim)
	                    );
	                    axisHelper.niceScaleExtent(this._axis, this._axis.model);
	                }
	            }, this);
	        },

	        /**
	         * Resize the single coordinate system.
	         *
	         * @param  {module:echarts/coord/single/AxisModel} axisModel
	         * @param  {module:echarts/ExtensionAPI} api
	         */
	        resize: function (axisModel, api) {
	            this._rect = layout.getLayoutRect(
	                {
	                    left: axisModel.get('left'),
	                    top: axisModel.get('top'),
	                    right: axisModel.get('right'),
	                    bottom: axisModel.get('bottom'),
	                    width: axisModel.get('width'),
	                    height: axisModel.get('height')
	                },
	                {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }
	            );

	            this._adjustAxis();
	        },

	        /**
	         * @return {module:zrender/core/BoundingRect}
	         */
	        getRect: function () {
	            return this._rect;
	        },

	        /**
	         * @private
	         */
	        _adjustAxis: function () {

	            var rect = this._rect;
	            var axis = this._axis;

	            var isHorizontal = axis.isHorizontal();
	            var extent = isHorizontal ? [0, rect.width] : [0, rect.height];
	            var idx =  axis.reverse ? 1 : 0;

	            axis.setExtent(extent[idx], extent[1 - idx]);

	            this._updateAxisTransform(axis, isHorizontal ? rect.x : rect.y);

	        },

	        /**
	         * @param  {module:echarts/coord/single/SingleAxis} axis
	         * @param  {number} coordBase
	         */
	        _updateAxisTransform: function (axis, coordBase) {

	            var axisExtent = axis.getExtent();
	            var extentSum = axisExtent[0] + axisExtent[1];
	            var isHorizontal = axis.isHorizontal();

	            axis.toGlobalCoord = isHorizontal ?
	                function (coord) {
	                    return coord + coordBase;
	                } :
	                function (coord) {
	                    return extentSum - coord + coordBase;
	                };

	            axis.toLocalCoord = isHorizontal ?
	                function (coord) {
	                    return coord - coordBase;
	                } :
	                function (coord) {
	                    return extentSum - coord + coordBase;
	                };
	        },

	        /**
	         * Get axis.
	         *
	         * @return {module:echarts/coord/single/SingleAxis}
	         */
	        getAxis: function () {
	            return this._axis;
	        },

	        /**
	         * Get axis, add it just for draw tooltip.
	         *
	         * @return {[type]} [description]
	         */
	        getBaseAxis: function () {
	            return this._axis;
	        },

	        /**
	         * If contain point.
	         *
	         * @param  {Array.<number>} point
	         * @return {boolean}
	         */
	        containPoint: function (point) {
	            var rect = this.getRect();
	            var axis = this.getAxis();
	            var orient = axis.orient;
	            if (orient === 'horizontal') {
	                return axis.contain(axis.toLocalCoord(point[0]))
	                && (point[1] >= rect.y && point[1] <= (rect.y + rect.height));
	            }
	            else {
	                return axis.contain(axis.toLocalCoord(point[1]))
	                && (point[0] >= rect.y && point[0] <= (rect.y + rect.height));
	            }
	        },

	        /**
	         * @param {Array.<number>} point
	         * @return {Array.<number>}
	         */
	        pointToData: function (point) {
	            var axis = this.getAxis();
	            return [axis.coordToData(axis.toLocalCoord(
	                point[axis.orient === 'horizontal' ? 0 : 1]
	            ))];
	        },

	        /**
	         * Convert the series data to concrete point.
	         *
	         * @param  {number|Array.<number>} val
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (val) {
	            var axis = this.getAxis();
	            var rect = this.getRect();
	            var pt = [];
	            var idx = axis.orient === 'horizontal' ? 0 : 1;
	            pt[idx] = axis.toGlobalCoord(axis.dataToCoord(+val));
	            pt[1 - idx] = idx === 0 ? (rect.y + rect.height / 2) : (rect.x + rect.width / 2);
	            return pt;
	        }
	    };

	    module.exports = Single;



/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var Axis = __webpack_require__(363);
	    var axisHelper = __webpack_require__(354);

	    /**
	     * @constructor  module:echarts/coord/single/SingleAxis
	     * @extends {module:echarts/coord/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     * @param {string} position
	     */
	    var SingleAxis = function (dim, scale, coordExtent, axisType, position) {

	        Axis.call(this, dim, scale, coordExtent);

	        /**
	         * Axis type
	         * - 'category'
	         * - 'value'
	         * - 'time'
	         * - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';

	        /**
	         * Axis position
	         *  - 'top'
	         *  - 'bottom'
	         *  - 'left'
	         *  - 'right'
	         *  @type {string}
	         */
	        this.position = position || 'bottom';

	        /**
	         * Axis orient
	         *  - 'horizontal'
	         *  - 'vertical'
	         * @type {[type]}
	         */
	        this.orient = null;

	        /**
	         * @type {number}
	         */
	        this._labelInterval = null;

	    };

	    SingleAxis.prototype = {

	        constructor: SingleAxis,

	        /**
	         * Axis model
	         * @type {module:echarts/coord/single/AxisModel}
	         */
	        model: null,

	        /**
	         * Judge the orient of the axis.
	         * @return {boolean}
	         */
	        isHorizontal: function () {
	            var position = this.position;
	            return position === 'top' || position === 'bottom';

	        },

	        /**
	         * Get interval of the axis label.
	         * @return {number}
	         */
	        getLabelInterval: function () {
	            var labelInterval = this._labelInterval;
	            if (!labelInterval) {
	                var axisModel = this.model;
	                var labelModel = axisModel.getModel('axisLabel');
	                var interval = labelModel.get('interval');
	                if (!(this.type === 'category' && interval === 'auto')) {

	                    labelInterval = this._labelInterval = interval === 'auto' ? 0 : interval;
	                    return labelInterval;
	                }
	                labelInterval = this._labelInterval =
	                    axisHelper.getAxisLabelInterval(
	                        zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),
	                        axisModel.getFormattedLabels(),
	                        labelModel.getModel('textStyle').getFont(),
	                        this.isHorizontal()
	                    );
	            }
	            return labelInterval;
	        },

	        /**
	         * Convert the local coord(processed by dataToCoord())
	         * to global coord(concrete pixel coord).
	         * designated by module:echarts/coord/single/Single.
	         * @type {Function}
	         */
	        toGlobalCoord: null,

	        /**
	         * Convert the global coord to local coord.
	         * designated by module:echarts/coord/single/Single.
	         * @type {Function}
	         */
	        toLocalCoord: null

	    };

	    zrUtil.inherits(SingleAxis, Axis);

	    module.exports = SingleAxis;


/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	

	    var AxisBuilder = __webpack_require__(372);
	    var zrUtil =  __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var getInterval = AxisBuilder.getInterval;
	    var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;

	    var axisBuilderAttrs = [
	        'axisLine', 'axisLabel', 'axisTick', 'axisName'
	    ];

	    var selfBuilderAttr = 'splitLine';

	    var AxisView = __webpack_require__(240).extendComponentView({

	        type: 'singleAxis',

	        render: function (axisModel, ecModel) {

	            var group = this.group;

	            group.removeAll();

	            var layout =  axisLayout(axisModel);

	            var axisBuilder = new AxisBuilder(axisModel, layout);

	            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);

	            group.add(axisBuilder.getGroup());

	            if (axisModel.get(selfBuilderAttr + '.show')) {
	                this['_' + selfBuilderAttr](axisModel, layout.labelInterval);
	            }
	        },

	        _splitLine: function(axisModel, labelInterval) {
	            var axis = axisModel.axis;

	            if (axis.isBlank()) {
	                return;
	            }

	            var splitLineModel = axisModel.getModel('splitLine');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineWidth = lineStyleModel.get('width');
	            var lineColors = lineStyleModel.get('color');
	            var lineInterval = getInterval(splitLineModel, labelInterval);

	            lineColors = lineColors instanceof Array ? lineColors : [lineColors];

	            var gridRect = axisModel.coordinateSystem.getRect();
	            var isHorizontal = axis.isHorizontal();

	            var splitLines = [];
	            var lineCount = 0;

	            var ticksCoords = axis.getTicksCoords();

	            var p1 = [];
	            var p2 = [];

	            for (var i = 0; i < ticksCoords.length; ++i) {
	                if (ifIgnoreOnTick(axis, i, lineInterval)) {
	                    continue;
	                }
	                var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	                if (isHorizontal) {
	                    p1[0] = tickCoord;
	                    p1[1] = gridRect.y;
	                    p2[0] = tickCoord;
	                    p2[1] = gridRect.y + gridRect.height;
	                }
	                else {
	                    p1[0] = gridRect.x;
	                    p1[1] = tickCoord;
	                    p2[0] = gridRect.x + gridRect.width;
	                    p2[1] = tickCoord;
	                }
	                var colorIndex = (lineCount++) % lineColors.length;
	                splitLines[colorIndex] = splitLines[colorIndex] || [];
	                splitLines[colorIndex].push(new graphic.Line(
	                    graphic.subPixelOptimizeLine({
	                        shape: {
	                            x1: p1[0],
	                            y1: p1[1],
	                            x2: p2[0],
	                            y2: p2[1]
	                        },
	                        style: {
	                            lineWidth: lineWidth
	                        },
	                        silent: true
	                    })));
	            }

	            for (var i = 0; i < splitLines.length; ++i) {
	                this.group.add(graphic.mergePath(splitLines[i], {
	                    style: {
	                        stroke: lineColors[i % lineColors.length],
	                        lineDash: lineStyleModel.getLineDash(lineWidth),
	                        lineWidth: lineWidth
	                    },
	                    silent: true
	                }));
	            }
	        }
	    });

	    function axisLayout(axisModel) {

	        var single = axisModel.coordinateSystem;
	        var axis = axisModel.axis;
	        var layout = {};

	        var axisPosition = axis.position;
	        var orient = axis.orient;

	        var rect = single.getRect();
	        var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];

	        var positionMap = {
	            horizontal: {top: rectBound[2], bottom: rectBound[3]},
	            vertical: {left: rectBound[0], right: rectBound[1]}
	        };

	        layout.position = [
	            orient === 'vertical'
	                ? positionMap.vertical[axisPosition]
	                : rectBound[0],
	            orient === 'horizontal'
	                ? positionMap.horizontal[axisPosition]
	                : rectBound[3]
	        ];

	        var r = {horizontal: 0, vertical: 1};
	        layout.rotation = Math.PI / 2 * r[orient];

	        var directionMap = {top: -1, bottom: 1, right: 1, left: -1};

	        layout.labelDirection = layout.tickDirection
	            = layout.nameDirection
	            = directionMap[axisPosition];

	        if (axisModel.getModel('axisTick').get('inside')) {
	            layout.tickDirection = -layout.tickDirection;
	        }

	        if (axisModel.getModel('axisLabel').get('inside')) {
	            layout.labelDirection = -layout.labelDirection;
	        }

	        var labelRotation = axisModel.getModel('axisLabel').get('rotate');
	        layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;

	        layout.labelInterval = axis.getLabelInterval();

	        layout.z2 = 1;

	        return layout;
	    }

	    module.exports = AxisView;



/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	

	    var ComponentModel = __webpack_require__(258);
	    var axisModelCreator = __webpack_require__(367);
	    var zrUtil =  __webpack_require__(243);

	    var AxisModel = ComponentModel.extend({

	        type: 'singleAxis',

	        layoutMode: 'box',

	        /**
	         * @type {module:echarts/coord/single/SingleAxis}
	         */
	        axis: null,

	        /**
	         * @type {module:echarts/coord/single/Single}
	         */
	        coordinateSystem: null,

	        /**
	         * @override
	         */
	        getCoordSysModel: function () {
	            return this;
	        }

	    });

	    var defaultOption = {

	        left: '5%',
	        top: '5%',
	        right: '5%',
	        bottom: '5%',

	        type: 'value',

	        position: 'bottom',

	        orient: 'horizontal',

	        axisLine: {
	            show: true,
	            lineStyle: {
	                width: 2,
	                type: 'solid'
	            }
	        },

	        axisTick: {
	            show: true,
	            length: 6,
	            lineStyle: {
	                width: 2
	            }
	        },

	        axisLabel: {
	            show: true,
	            interval: 'auto'
	        },

	        splitLine: {
	            show: true,
	            lineStyle: {
	                type: 'dashed',
	                opacity: 0.2
	            }
	        }
	    };

	    function getAxisType(axisName, option) {
	        return option.type || (option.data ? 'category' : 'value');
	    }

	    zrUtil.merge(AxisModel.prototype, __webpack_require__(369));

	    axisModelCreator('single', AxisModel, getAxisType, defaultOption);

	    module.exports = AxisModel;


/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @file  Define the themeRiver view's series model
	 * @author Deqing Li(annong035@gmail.com)
	 */


	    var completeDimensions = __webpack_require__(342);
	    var SeriesModel = __webpack_require__(267);
	    var List = __webpack_require__(337);
	    var zrUtil = __webpack_require__(243);
	    var formatUtil = __webpack_require__(245);
	    var encodeHTML = formatUtil.encodeHTML;
	    var nest = __webpack_require__(484);

	    var DATA_NAME_INDEX = 2;

	    var ThemeRiverSeries = SeriesModel.extend({

	        type: 'series.themeRiver',

	        dependencies: ['singleAxis'],

	        /**
	         * @readOnly
	         * @type {Object}
	         */
	        nameMap: null,

	        /**
	         * @override
	         */
	        init: function (option) {
	            ThemeRiverSeries.superApply(this, 'init', arguments);

	            // Put this function here is for the sake of consistency of code
	            // Enable legend selection for each data item
	            // Use a function instead of direct access because data reference may changed
	            this.legendDataProvider = function () {
	                return this.getRawData();
	            };
	        },

	        /**
	         * If there is no value of a certain point in the time for some event,set it value to 0.
	         *
	         * @param {Array} data  initial data in the option
	         * @return {Array}
	         */
	        fixData: function (data) {
	            var rawDataLength = data.length;

	            // grouped data by name
	            var dataByName = nest()
	                .key(function (dataItem) {
	                    return dataItem[2];
	                })
	                .entries(data);

	            // data group in each layer
	            var layData = zrUtil.map(dataByName, function (d) {
	                return {
	                    name: d.key,
	                    dataList: d.values
	                };
	            });

	            var layerNum = layData.length;
	            var largestLayer = -1;
	            var index = -1;
	            for (var i = 0; i < layerNum; ++i) {
	                var len = layData[i].dataList.length;
	                if (len > largestLayer) {
	                    largestLayer = len;
	                    index = i;
	                }
	            }

	            for (var k = 0; k < layerNum; ++k) {
	                if (k === index) {
	                    continue;
	                }
	                var name = layData[k].name;
	                for (var j = 0; j < largestLayer; ++j) {
	                    var timeValue = layData[index].dataList[j][0];
	                    var length = layData[k].dataList.length;
	                    var keyIndex = -1;
	                    for (var l = 0; l < length; ++l) {
	                        var value = layData[k].dataList[l][0];
	                        if (value === timeValue) {
	                            keyIndex = l;
	                            break;
	                        }
	                    }
	                    if (keyIndex === -1) {
	                        data[rawDataLength] = [];
	                        data[rawDataLength][0] = timeValue;
	                        data[rawDataLength][1] = 0;
	                        data[rawDataLength][2] = name;
	                        rawDataLength++;

	                    }
	                }
	            }
	            return data;
	        },

	        /**
	         * @override
	         * @param  {Object} option  the initial option that user gived
	         * @param  {module:echarts/model/Model} ecModel  the model object for themeRiver option
	         * @return {module:echarts/data/List}
	         */
	        getInitialData: function (option, ecModel) {

	            var dimensions = [];

	            var singleAxisModel = ecModel.queryComponents({
	                mainType: 'singleAxis',
	                index: this.get('singleAxisIndex'),
	                id: this.get('singleAxisId')
	            })[0];

	            var axisType = singleAxisModel.get('type');

	            dimensions = [
	                {
	                    name: 'time',
	                    // FIXME common?
	                    type: axisType === 'category'
	                        ? 'ordinal'
	                        : axisType === 'time'
	                        ? 'time'
	                        : 'float'
	                },
	                {
	                    name: 'value',
	                    type: 'float'
	                },
	                {
	                    name: 'name',
	                    type: 'ordinal'
	                }
	            ];

	            // filter the data item with the value of label is undefined
	            var filterData = zrUtil.filter(option.data, function (dataItem) {
	                return dataItem[2] !== undefined;
	            });

	            var data = this.fixData(filterData || []);
	            var nameList = [];
	            var nameMap = this.nameMap = {};
	            var count = 0;

	            for (var i = 0; i < data.length; ++i) {
	                nameList.push(data[i][DATA_NAME_INDEX]);
	                if (!nameMap[data[i][DATA_NAME_INDEX]]) {
	                    nameMap[data[i][DATA_NAME_INDEX]] = count++;
	                }
	            }

	            completeDimensions(dimensions, data);

	            var list = new List(dimensions, this);

	            list.initData(data, nameList);

	            return list;
	        },

	        /**
	         * Used by single coordinate
	         *
	         * @param {string} axisDim  the dimension for single coordinate
	         * @return {Array.<string> } specified dimensions on the axis.
	         */
	        coordDimToDataDim: function (axisDim) {
	            return ['time'];
	        },

	        /**
	         * The raw data is divided into multiple layers and each layer
	         *     has same name.
	         *
	         * @return {Array.<Array.<number>>}
	         */
	        getLayerSeries: function () {
	            var data = this.getData();
	            var lenCount = data.count();
	            var indexArr = [];

	            for (var i = 0; i < lenCount; ++i) {
	                indexArr[i] = i;
	            }
	            // data group by name
	            var dataByName = nest()
	                .key(function (index) {
	                    return data.get('name', index);
	                })
	                .entries(indexArr);

	            var layerSeries = zrUtil.map(dataByName, function (d) {
	                return {
	                    name: d.key,
	                    indices: d.values
	                };
	            });

	            for (var j = 0; j < layerSeries.length; ++j) {
	                layerSeries[j].indices.sort(comparer);
	            }

	            function comparer(index1, index2) {
	                return data.get('time', index1) - data.get('time', index2);
	            }

	            return layerSeries;
	        },

	        /**
	         * Get data indices for show tooltip content
	         *
	         * @param {Array.<string>|string} dim  single coordinate dimension
	         * @param {Array.<number>} value  coordinate value
	         * @param {module:echarts/coord/single/SingleAxis} baseAxis  single Axis used
	         *     the themeRiver.
	         * @return {Array.<number>}
	         */
	        getAxisTooltipDataIndex: function (dim, value, baseAxis) {
	            if (!zrUtil.isArray(dim)) {
	                dim = dim ? [dim] : [];
	            }

	            var data = this.getData();

	            if (baseAxis.orient === 'horizontal') {
	                value = value[0];
	            }
	            else {
	                value = value[1];
	            }

	            var layerSeries = this.getLayerSeries();
	            var indices = [];
	            var layerNum = layerSeries.length;

	            for (var i = 0; i < layerNum; ++i) {
	                var minDist = Number.MAX_VALUE;
	                var nearestIdx = -1;
	                var pointNum = layerSeries[i].indices.length;
	                for (var j = 0; j < pointNum; ++j) {
	                    var dist = Math.abs(data.get(dim[0], layerSeries[i].indices[j]) - value);
	                    if (dist <= minDist) {
	                        minDist = dist;
	                        nearestIdx = layerSeries[i].indices[j];
	                    }
	                }
	                indices.push(nearestIdx);
	            }
	            return indices;
	        },

	        /**
	         * @override
	         * @param {Array.<number>} dataIndexs  index of data
	         */
	        formatTooltip: function (dataIndexs) {
	            var data = this.getData();
	            var len = dataIndexs.length;
	            var time = data.get('time', dataIndexs[0]);
	            var single = this.coordinateSystem;
	            var axis = single.getAxis();

	            if (axis.scale.type === 'time') {
	                time = formatUtil.formatTime('yyyy-MM-dd', time);
	            }

	            var html = encodeHTML(time) + '<br />';
	            for (var i = 0; i < len; ++i) {
	                var htmlName = data.get('name', dataIndexs[i]);
	                var htmlValue = data.get('value', dataIndexs[i]);
	                if (isNaN(htmlValue) || htmlValue == null) {
	                    htmlValue = '-';
	                }
	                html += encodeHTML(htmlName + ' : ' + htmlValue) + '<br />';
	            }
	            return html;
	        },

	        defaultOption: {
	            zlevel: 0,
	            z: 2,

	            coordinateSystem: 'singleAxis',

	            // gap in axis's orthogonal orientation
	            boundaryGap: ['10%', '10%'],

	            // legendHoverLink: true,

	            singleAxisIndex: 0,

	            animationEasing: 'linear',

	            label: {
	                normal: {
	                    margin: 4,
	                    textAlign: 'right',
	                    show: true,
	                    position: 'left',
	                    textStyle: {
	                        color: '#000',
	                        fontSize: 11
	                    }
	                },
	                emphasis: {
	                    show: true
	                }
	            }
	        }
	    });

	    module.exports = ThemeRiverSeries;



/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * @file  The file used to draw themeRiver view
	 * @author  Deqing Li(annong035@gmail.com)
	 */


	    var poly = __webpack_require__(348);
	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);
	    var DataDiffer = __webpack_require__(338);

	    module.exports = __webpack_require__(240).extendChartView({

	        type: 'themeRiver',

	        init: function () {
	            this._layers = [];
	        },

	        render: function (seriesModel, ecModel, api) {
	            var data = seriesModel.getData();
	            var rawData = seriesModel.getRawData();

	            if (!data.count()) {
	                return;
	            }

	            var group = this.group;

	            var layerSeries = seriesModel.getLayerSeries();

	            var layoutInfo = data.getLayout('layoutInfo');
	            var rect = layoutInfo.rect;
	            var boundaryGap = layoutInfo.boundaryGap;

	            group.attr('position', [0, rect.y + boundaryGap[0]]);

	            function keyGetter(item) {
	                return item.name;
	            }
	            var dataDiffer = new DataDiffer(
	                this._layersSeries || [], layerSeries,
	                keyGetter, keyGetter
	            );

	            var newLayersGroups = {};

	            dataDiffer.add(zrUtil.bind(zrUtil.curry(process, 'add'), this))
	                .update(zrUtil.bind(zrUtil.curry(process, 'update'), this))
	                .remove(zrUtil.bind(zrUtil.curry(process, 'remove'), this))
	                .execute();

	            function process(status, idx, oldIdx) {
	                var oldLayersGroups = this._layers;
	                if (status === 'remove') {
	                    group.remove(oldLayersGroups[idx]);
	                    return;
	                }
	                var points0 = [];
	                var points1 = [];
	                var color;
	                var indices = layerSeries[idx].indices;
	                for (var j = 0; j < indices.length; j++) {
	                    var layout = data.getItemLayout(indices[j]);
	                    var x = layout.x;
	                    var y0 = layout.y0;
	                    var y = layout.y;

	                    points0.push([x, y0]);
	                    points1.push([x, y0 + y]);

	                    color = rawData.getItemVisual(indices[j], 'color');
	                }

	                var polygon;
	                var text;
	                var textLayout = data.getItemLayout(indices[0]);
	                var itemModel = data.getItemModel(indices[j - 1]);
	                var labelModel = itemModel.getModel('label.normal');
	                var margin = labelModel.get('margin');
	                if (status === 'add') {
	                    var layerGroup = newLayersGroups[idx] = new graphic.Group();
	                    polygon = new poly.Polygon({
	                        shape: {
	                            points: points0,
	                            stackedOnPoints: points1,
	                            smooth: 0.4,
	                            stackedOnSmooth: 0.4,
	                            smoothConstraint: false
	                        },
	                        z2: 0
	                    });
	                    text = new graphic.Text({
	                        style: {
	                            x: textLayout.x - margin,
	                            y: textLayout.y0 + textLayout.y / 2
	                        }
	                    });
	                    layerGroup.add(polygon);
	                    layerGroup.add(text);
	                    group.add(layerGroup);

	                    polygon.setClipPath(createGridClipShape(polygon.getBoundingRect(), seriesModel, function () {
	                        polygon.removeClipPath();
	                    }));
	                }
	                else {
	                    var layerGroup = oldLayersGroups[oldIdx];
	                    polygon = layerGroup.childAt(0);
	                    text = layerGroup.childAt(1);
	                    group.add(layerGroup);

	                    newLayersGroups[idx] = layerGroup;

	                    graphic.updateProps(polygon, {
	                        shape: {
	                            points: points0,
	                            stackedOnPoints: points1
	                        }
	                    }, seriesModel);

	                    graphic.updateProps(text, {
	                        style: {
	                            x: textLayout.x - margin,
	                            y: textLayout.y0 + textLayout.y / 2
	                        }
	                    }, seriesModel);
	                }

	                var hoverItemStyleModel = itemModel.getModel('itemStyle.emphasis');
	                var itemStyleModel = itemModel.getModel('itemStyle.normal');
	                var textStyleModel = labelModel.getModel('textStyle');

	                text.setStyle({
	                    text: labelModel.get('show')
	                        ? seriesModel.getFormattedLabel(indices[j - 1], 'normal')
	                            || data.getName(indices[j - 1])
	                        : '',
	                    textFont: textStyleModel.getFont(),
	                    textAlign: labelModel.get('textAlign'),
	                    textVerticalAlign: 'middle'
	                });

	                polygon.setStyle(zrUtil.extend({
	                    fill: color
	                }, itemStyleModel.getItemStyle(['color'])));

	                graphic.setHoverStyle(polygon, hoverItemStyleModel.getItemStyle());
	            }

	            this._layersSeries = layerSeries;
	            this._layers = newLayersGroups;
	        },

	        dispose: function () {}
	    });

	    // add animation to the view
	    function createGridClipShape(rect, seriesModel, cb) {
	        var rectEl = new graphic.Rect({
	            shape: {
	                x: rect.x - 10,
	                y: rect.y - 10,
	                width: 0,
	                height: rect.height + 20
	            }
	        });
	        graphic.initProps(rectEl, {
	            shape: {
	                width: rect.width + 20,
	                height: rect.height + 20
	            }
	        }, seriesModel, cb);

	        return rectEl;
	    }



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file  Using layout algorithm transform the raw data to layout information.
	 * @author Deqing Li(annong035@gmail.com)
	 */


	    var zrUtil = __webpack_require__(243);
	    var numberUtil =  __webpack_require__(246);


	    module.exports = function (ecModel, api) {

	        ecModel.eachSeriesByType('themeRiver', function (seriesModel) {

	            var data = seriesModel.getData();

	            var single = seriesModel.coordinateSystem;

	            var layoutInfo = {};

	            // use the axis boundingRect for view
	            var rect = single.getRect();

	            layoutInfo.rect = rect;

	            var boundaryGap = seriesModel.get('boundaryGap');

	            var axis = single.getAxis();

	            layoutInfo.boundaryGap = boundaryGap;

	            if (axis.orient === 'horizontal') {
	                boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.height);
	                boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.height);
	                var height = rect.height - boundaryGap[0] - boundaryGap[1];
	                themeRiverLayout(data, seriesModel, height);
	            }
	            else {
	                boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], rect.width);
	                boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], rect.width);
	                var width = rect.width - boundaryGap[0] - boundaryGap[1];
	                themeRiverLayout(data, seriesModel, width);
	            }

	            data.setLayout('layoutInfo', layoutInfo);
	        });
	    };

	    /**
	     * The layout information about themeriver
	     *
	     * @param {module:echarts/data/List} data  data in the series
	     * @param {module:echarts/model/Series} seriesModel  the model object of themeRiver series
	     * @param {number} height  value used to compute every series height
	     */
	    function themeRiverLayout(data, seriesModel, height) {
	        if (!data.count()) {
	            return;
	        }
	        var coordSys = seriesModel.coordinateSystem;
	        // the data in each layer are organized into a series.
	        var layerSeries = seriesModel.getLayerSeries();

	        // the points in each layer.
	        var layerPoints = zrUtil.map(layerSeries, function (singleLayer) {
	            return zrUtil.map(singleLayer.indices, function (idx) {
	                var pt = coordSys.dataToPoint(data.get('time', idx));
	                pt[1] = data.get('value', idx);
	                return pt;
	            });
	        });

	        var base = computeBaseline(layerPoints);
	        var baseLine = base.y0;
	        var ky = height / base.max;

	        // set layout information for each item.
	        var n = layerSeries.length;
	        var m = layerSeries[0].indices.length;
	        var baseY0;
	        for (var j = 0; j < m; ++j) {
	            baseY0 = baseLine[j] * ky;
	            data.setItemLayout(layerSeries[0].indices[j], {
	                layerIndex: 0,
	                x: layerPoints[0][j][0],
	                y0: baseY0,
	                y: layerPoints[0][j][1] * ky
	            });
	            for (var i = 1; i < n; ++i) {
	                baseY0 += layerPoints[i - 1][j][1] * ky;
	                data.setItemLayout(layerSeries[i].indices[j], {
	                    layerIndex: i,
	                    x: layerPoints[i][j][0],
	                    y0: baseY0,
	                    y: layerPoints[i][j][1] * ky
	                });
	            }
	        }
	    }

	    /**
	     * Compute the baseLine of the rawdata
	     * Inspired by Lee Byron's paper Stacked Graphs - Geometry & Aesthetics
	     *
	     * @param  {Array.<Array>} data  the points in each layer
	     * @return {Array}
	     */
	    function computeBaseline(data) {
	        var layerNum = data.length;
	        var pointNum = data[0].length;
	        var sums = [];
	        var y0 = [];
	        var max = 0;
	        var temp;
	        var base = {};

	        for (var i = 0; i < pointNum; ++i) {
	            for (var j = 0, temp = 0; j < layerNum; ++j) {
	                temp += data[j][i][1];
	            }
	            if (temp > max) {
	                max = temp;
	            }
	            sums.push(temp);
	        }

	        for (var k = 0; k < pointNum; ++k) {
	            y0[k] = (max - sums[k]) / 2;
	        }
	        max = 0;

	        for (var l = 0; l < pointNum; ++l) {
	            var sum = sums[l] + y0[l];
	            if (sum > max) {
	                max = sum;
	            }
	        }
	        base.y0 = y0;
	        base.max = max;

	        return base;
	    }



/***/ },
/* 529 */
/***/ function(module, exports) {

	/**
	 * @file Visual encoding for themeRiver view
	 * @author  Deqing Li(annong035@gmail.com)
	 */


	    module.exports = function (ecModel) {
	        ecModel.eachSeriesByType('themeRiver', function (seriesModel) {
	            var data = seriesModel.getData();
	            var rawData = seriesModel.getRawData();
	            var colorList = seriesModel.get('color');

	            data.each(function (index) {
	                var name = data.getName(index);
	                var color = colorList[(seriesModel.nameMap[name] - 1) % colorList.length];
	                rawData.setItemVisual(index, 'color', color);
	            });
	        });
	    };



/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	

	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);
	    var graphicUtil = __webpack_require__(282);
	    var layoutUtil = __webpack_require__(260);

	    // -------------
	    // Preprocessor
	    // -------------

	    echarts.registerPreprocessor(function (option) {
	        var graphicOption = option && option.graphic;

	        // Convert
	        // {graphic: [{left: 10, type: 'circle'}, ...]}
	        // or
	        // {graphic: {left: 10, type: 'circle'}}
	        // to
	        // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}
	        if (zrUtil.isArray(graphicOption)) {
	            if (!graphicOption[0] || !graphicOption[0].elements) {
	                option.graphic = [{elements: graphicOption}];
	            }
	            else {
	                // Only one graphic instance can be instantiated. (We dont
	                // want that too many views are created in echarts._viewMap)
	                option.graphic = [option.graphic[0]];
	            }
	        }
	        else if (graphicOption && !graphicOption.elements) {
	            option.graphic = [{elements: [graphicOption]}];
	        }
	    });

	    // ------
	    // Model
	    // ------

	    var GraphicModel = echarts.extendComponentModel({

	        type: 'graphic',

	        defaultOption: {

	            // Extra properties for each elements:
	            //
	            // left/right/top/bottom: (like 12, '22%', 'center', default undefined)
	            //      If left/rigth is set, shape.x/shape.cx/position will not be used.
	            //      If top/bottom is set, shape.y/shape.cy/position will not be used.
	            //      This mechanism is useful when you want to position a group/element
	            //      against the right side or the center of this container.
	            //
	            // width/height: (can only be pixel value, default 0)
	            //      Only be used to specify contianer(group) size, if needed. And
	            //      can not be percentage value (like '33%'). See the reason in the
	            //      layout algorithm below.
	            //
	            // bounding: (enum: 'all' (default) | 'raw')
	            //      Specify how to calculate boundingRect when locating.
	            //      'all': Get uioned and transformed boundingRect
	            //          from both itself and its descendants.
	            //          This mode simplies confining a group of elements in the bounding
	            //          of their ancester container (e.g., using 'right: 0').
	            //      'raw': Only use the boundingRect of itself and before transformed.
	            //          This mode is similar to css behavior, which is useful when you
	            //          want an element to be able to overflow its container. (Consider
	            //          a rotated circle needs to be located in a corner.)

	            // Note: elements is always behind its ancestors in this elements array.
	            elements: [],
	            parentId: null
	        },

	        /**
	         * Save el options for the sake of the performance (only update modified graphics).
	         * The order is the same as those in option. (ancesters -> descendants)
	         *
	         * @private
	         * @type {Array.<Object>}
	         */
	        _elOptionsToUpdate: null,

	        /**
	         * @override
	         */
	        mergeOption: function (option) {
	            // Prevent default merge to elements
	            var elements = this.option.elements;
	            this.option.elements = null;

	            GraphicModel.superApply(this, 'mergeOption', arguments);

	            this.option.elements = elements;
	        },

	        /**
	         * @override
	         */
	        optionUpdated: function (newOption, isInit) {
	            var thisOption = this.option;
	            var newList = (isInit ? thisOption : newOption).elements;
	            var existList = thisOption.elements = isInit ? [] : thisOption.elements;

	            var flattenedList = [];
	            this._flatten(newList, flattenedList);

	            var mappingResult = modelUtil.mappingToExists(existList, flattenedList);
	            modelUtil.makeIdAndName(mappingResult);

	            // Clear elOptionsToUpdate
	            var elOptionsToUpdate = this._elOptionsToUpdate = [];

	            zrUtil.each(mappingResult, function (resultItem, index) {
	                var existElOption = resultItem.exist;
	                var newElOption = resultItem.option;

	                if (__DEV__) {
	                    zrUtil.assert(
	                        zrUtil.isObject(newElOption) || existElOption,
	                        'Empty graphic option definition'
	                    );
	                }

	                if (!newElOption) {
	                    return;
	                }

	                // Set id and parent id after id assigned.
	                newElOption.id = resultItem.keyInfo.id;
	                var newElParentId = newElOption.parentId;
	                var newElParentOption = newElOption.parentOption;
	                var existElParentId = existElOption && existElOption.parentId;
	                !newElOption.type && existElOption && (newElOption.type = existElOption.type);
	                newElOption.parentId = newElParentId // parent id specified
	                    ? newElParentId
	                    : newElParentOption
	                    ? newElParentOption.id
	                    : existElParentId // parent not specified
	                    ? existElParentId
	                    : null;
	                newElOption.parentOption = null; // Clear
	                elOptionsToUpdate.push(newElOption);

	                // Update existing options, for `getOption` feature.
	                var newElOptCopy = zrUtil.extend({}, newElOption);
	                var $action = newElOption.$action;
	                if (!$action || $action === 'merge') {
	                    if (existElOption) {

	                        if (__DEV__) {
	                            var newType = newElOption.type;
	                            zrUtil.assert(
	                                !newType || existElOption.type === newType,
	                                'Please set $action: "replace" to change `type`'
	                            );
	                        }

	                        // We can ensure that newElOptCopy and existElOption are not
	                        // the same object, so `merge` will not change newElOptCopy.
	                        zrUtil.merge(existElOption, newElOptCopy, true);
	                        // Rigid body, use ignoreSize.
	                        layoutUtil.mergeLayoutParam(existElOption, newElOptCopy, {ignoreSize: true});
	                        // Will be used in render.
	                        layoutUtil.copyLayoutParams(newElOption, existElOption);
	                    }
	                    else {
	                        existList[index] = newElOptCopy;
	                    }
	                }
	                else if ($action === 'replace') {
	                    existList[index] = newElOptCopy;
	                }
	                else if ($action === 'remove') {
	                    // null will be cleaned later.
	                    existElOption && (existList[index] = null);
	                }

	                if (existList[index]) {
	                    existList[index].hv = newElOption.hv = [
	                        // Rigid body, dont care `width`.
	                        isSetLoc(newElOption, ['left', 'right']),
	                        // Rigid body, dont care `height`.
	                        isSetLoc(newElOption, ['top', 'bottom'])
	                    ];
	                    // Give default group size. Otherwise layout error may occur.
	                    if (existList[index].type === 'group') {
	                        existList[index].width == null && (existList[index].width = newElOption.width = 0);
	                        existList[index].height == null && (existList[index].height = newElOption.height = 0);
	                    }
	                }

	            }, this);

	            // Clean
	            for (var i = existList.length - 1; i >= 0; i--) {
	                if (existList[i] == null) {
	                    existList.splice(i, 1);
	                }
	                else {
	                    // $action should be volatile, otherwise option gotten from
	                    // `getOption` will contain unexpected $action.
	                    delete existList[i].$action;
	                }
	            }
	        },

	        /**
	         * Convert
	         * [{
	         *  type: 'group',
	         *  id: 'xx',
	         *  children: [{type: 'circle'}, {type: 'polygon'}]
	         * }]
	         * to
	         * [
	         *  {type: 'group', id: 'xx'},
	         *  {type: 'circle', parentId: 'xx'},
	         *  {type: 'polygon', parentId: 'xx'}
	         * ]
	         *
	         * @private
	         * @param {Array.<Object>} optionList option list
	         * @param {Array.<Object>} result result of flatten
	         * @param {Object} parentOption parent option
	         */
	        _flatten: function (optionList, result, parentOption) {
	            zrUtil.each(optionList, function (option) {
	                if (option) {
	                    if (parentOption) {
	                        option.parentOption = parentOption;
	                    }

	                    result.push(option);

	                    var children = option.children;
	                    if (option.type === 'group' && children) {
	                        this._flatten(children, result, option);
	                    }
	                    // Deleting for JSON output, and for not affecting group creation.
	                    delete option.children;
	                }
	            }, this);
	        },

	        // FIXME
	        // Pass to view using payload? setOption has a payload?
	        useElOptionsToUpdate: function () {
	            var els = this._elOptionsToUpdate;
	            // Clear to avoid render duplicately when zooming.
	            this._elOptionsToUpdate = null;
	            return els;
	        }
	    });

	    // -----
	    // View
	    // -----

	    echarts.extendComponentView({

	        type: 'graphic',

	        /**
	         * @override
	         */
	        init: function (ecModel, api) {

	            /**
	             * @private
	             * @type {Object}
	             */
	            this._elMap = {};

	            /**
	             * @private
	             * @type {module:echarts/graphic/GraphicModel}
	             */
	            this._lastGraphicModel;
	        },

	        /**
	         * @override
	         */
	        render: function (graphicModel, ecModel, api) {

	            // Having leveraged between use cases and algorithm complexity, a very
	            // simple layout mechanism is used:
	            // The size(width/height) can be determined by itself or its parent (not
	            // implemented yet), but can not by its children. (Top-down travel)
	            // The location(x/y) can be determined by the bounding rect of itself
	            // (can including its descendants or not) and the size of its parent.
	            // (Bottom-up travel)

	            // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,
	            // view will be reused.
	            if (graphicModel !== this._lastGraphicModel) {
	                this._clear();
	            }
	            this._lastGraphicModel = graphicModel;

	            this._updateElements(graphicModel, api);
	            this._relocate(graphicModel, api);
	        },

	        /**
	         * Update graphic elements.
	         *
	         * @private
	         * @param {Object} graphicModel graphic model
	         * @param {module:echarts/ExtensionAPI} api extension API
	         */
	        _updateElements: function (graphicModel, api) {
	            var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();

	            if (!elOptionsToUpdate) {
	                return;
	            }

	            var elMap = this._elMap;
	            var rootGroup = this.group;

	            // Top-down tranverse to assign graphic settings to each elements.
	            zrUtil.each(elOptionsToUpdate, function (elOption) {
	                var $action = elOption.$action;
	                var id = elOption.id;
	                var existEl = elMap[id];
	                var parentId = elOption.parentId;
	                var targetElParent = parentId != null ? elMap[parentId] : rootGroup;

	                // In top/bottom mode, textVertical should not be used. And textBaseline
	                // should not be 'alphabetic', which cause inaccurately locating.
	                if (elOption.hv && elOption.hv[1] && elOption.type === 'text') {
	                    elOption.style = zrUtil.defaults({textBaseline: 'middle'}, elOption.style);
	                    elOption.style.textVerticalAlign = null;
	                }

	                // Remove unnecessary props to avoid potential problems.
	                var elOptionCleaned = getCleanedElOption(elOption);

	                // For simple, do not support parent change, otherwise reorder is needed.
	                if (__DEV__) {
	                    existEl && zrUtil.assert(
	                        targetElParent === existEl.parent,
	                        'Changing parent is not supported.'
	                    );
	                }

	                if (!$action || $action === 'merge') {
	                    existEl
	                        ? existEl.attr(elOptionCleaned)
	                        : createEl(id, targetElParent, elOptionCleaned, elMap);
	                }
	                else if ($action === 'replace') {
	                    removeEl(existEl, elMap);
	                    createEl(id, targetElParent, elOptionCleaned, elMap);
	                }
	                else if ($action === 'remove') {
	                    removeEl(existEl, elMap);
	                }

	                if (elMap[id]) {
	                    elMap[id].__ecGraphicWidth = elOption.width;
	                    elMap[id].__ecGraphicHeight = elOption.height;
	                }
	            });
	        },

	        /**
	         * Locate graphic elements.
	         *
	         * @private
	         * @param {Object} graphicModel graphic model
	         * @param {module:echarts/ExtensionAPI} api extension API
	         */
	        _relocate: function (graphicModel, api) {
	            var elOptions = graphicModel.option.elements;
	            var rootGroup = this.group;
	            var elMap = this._elMap;

	            // Bottom-up tranvese all elements (consider ec resize) to locate elements.
	            for (var i = elOptions.length - 1; i >= 0; i--) {
	                var elOption = elOptions[i];
	                var el = elMap[elOption.id];

	                if (!el) {
	                    continue;
	                }

	                var parentEl = el.parent;
	                var containerInfo = parentEl === rootGroup
	                    ? {
	                        width: api.getWidth(),
	                        height: api.getHeight()
	                    }
	                    : { // Like 'position:absolut' in css, default 0.
	                        width: parentEl.__ecGraphicWidth || 0,
	                        height: parentEl.__ecGraphicHeight || 0
	                    };

	                layoutUtil.positionElement(
	                    el, elOption, containerInfo, null,
	                    {hv: elOption.hv, boundingMode: elOption.bounding}
	                );
	            }
	        },

	        /**
	         * Clear all elements.
	         *
	         * @private
	         */
	        _clear: function () {
	            var elMap = this._elMap;
	            zrUtil.each(elMap, function (el) {
	                removeEl(el, elMap);
	            });
	            this._elMap = {};
	        },

	        /**
	         * @override
	         */
	        dispose: function () {
	            this._clear();
	        }
	    });

	    function createEl(id, targetElParent, elOption, elMap) {
	        var graphicType = elOption.type;

	        if (__DEV__) {
	            zrUtil.assert(graphicType, 'graphic type MUST be set');
	        }

	        var Clz = graphicUtil[graphicType.charAt(0).toUpperCase() + graphicType.slice(1)];

	        if (__DEV__) {
	            zrUtil.assert(Clz, 'graphic type can not be found');
	        }

	        var el = new Clz(elOption);
	        targetElParent.add(el);
	        elMap[id] = el;
	        el.__ecGraphicId = id;
	    }

	    function removeEl(existEl, elMap) {
	        var existElParent = existEl && existEl.parent;
	        if (existElParent) {
	            existEl.type === 'group' && existEl.traverse(function (el) {
	                removeEl(el, elMap);
	            });
	            delete elMap[existEl.__ecGraphicId];
	            existElParent.remove(existEl);
	        }
	    }

	    // Remove unnecessary props to avoid potential problems.
	    function getCleanedElOption(elOption) {
	        elOption = zrUtil.extend({}, elOption);
	        zrUtil.each(
	            ['id', 'parentId', '$action', 'hv', 'bounding'].concat(layoutUtil.LOCATION_PARAMS),
	            function (name) {
	                delete elOption[name];
	            }
	        );
	        return elOption;
	    }

	    function isSetLoc(obj, props) {
	        var isSet;
	        zrUtil.each(props, function (prop) {
	            obj[prop] != null && obj[prop] !== 'auto' && (isSet = true);
	        });
	        return isSet;
	    }



/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Legend component entry file8
	 */


	    __webpack_require__(532);
	    __webpack_require__(533);
	    __webpack_require__(534);

	    var echarts = __webpack_require__(240);
	    // Series Filter
	    echarts.registerProcessor(__webpack_require__(536));


/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var Model = __webpack_require__(251);

	    var LegendModel = __webpack_require__(240).extendComponentModel({

	        type: 'legend',

	        dependencies: ['series'],

	        layoutMode: {
	            type: 'box',
	            ignoreSize: true
	        },

	        init: function (option, parentModel, ecModel) {
	            this.mergeDefaultAndTheme(option, ecModel);

	            option.selected = option.selected || {};
	        },

	        mergeOption: function (option) {
	            LegendModel.superCall(this, 'mergeOption', option);
	        },

	        optionUpdated: function () {
	            this._updateData(this.ecModel);

	            var legendData = this._data;

	            // If selectedMode is single, try to select one
	            if (legendData[0] && this.get('selectedMode') === 'single') {
	                var hasSelected = false;
	                // If has any selected in option.selected
	                for (var i = 0; i < legendData.length; i++) {
	                    var name = legendData[i].get('name');
	                    if (this.isSelected(name)) {
	                        // Force to unselect others
	                        this.select(name);
	                        hasSelected = true;
	                        break;
	                    }
	                }
	                // Try select the first if selectedMode is single
	                !hasSelected && this.select(legendData[0].get('name'));
	            }
	        },

	        _updateData: function (ecModel) {
	            var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {
	                // Can be string or number
	                if (typeof dataItem === 'string' || typeof dataItem === 'number') {
	                    dataItem = {
	                        name: dataItem
	                    };
	                }
	                return new Model(dataItem, this, this.ecModel);
	            }, this);
	            this._data = legendData;

	            var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {
	                return series.name;
	            });
	            ecModel.eachSeries(function (seriesModel) {
	                if (seriesModel.legendDataProvider) {
	                    var data = seriesModel.legendDataProvider();
	                    availableNames = availableNames.concat(data.mapArray(data.getName));
	                }
	            });
	            /**
	             * @type {Array.<string>}
	             * @private
	             */
	            this._availableNames = availableNames;
	        },

	        /**
	         * @return {Array.<module:echarts/model/Model>}
	         */
	        getData: function () {
	            return this._data;
	        },

	        /**
	         * @param {string} name
	         */
	        select: function (name) {
	            var selected = this.option.selected;
	            var selectedMode = this.get('selectedMode');
	            if (selectedMode === 'single') {
	                var data = this._data;
	                zrUtil.each(data, function (dataItem) {
	                    selected[dataItem.get('name')] = false;
	                });
	            }
	            selected[name] = true;
	        },

	        /**
	         * @param {string} name
	         */
	        unSelect: function (name) {
	            if (this.get('selectedMode') !== 'single') {
	                this.option.selected[name] = false;
	            }
	        },

	        /**
	         * @param {string} name
	         */
	        toggleSelected: function (name) {
	            var selected = this.option.selected;
	            // Default is true
	            if (!selected.hasOwnProperty(name)) {
	                selected[name] = true;
	            }
	            this[selected[name] ? 'unSelect' : 'select'](name);
	        },

	        /**
	         * @param {string} name
	         */
	        isSelected: function (name) {
	            var selected = this.option.selected;
	            return !(selected.hasOwnProperty(name) && !selected[name])
	                && zrUtil.indexOf(this._availableNames, name) >= 0;
	        },

	        defaultOption: {
	            // 一级层叠
	            zlevel: 0,
	            // 二级层叠
	            z: 4,
	            show: true,

	            // 布局方式，默认为水平布局，可选为：
	            // 'horizontal' | 'vertical'
	            orient: 'horizontal',

	            left: 'center',
	            // right: 'center',

	            top: 'top',
	            // bottom: 'top',

	            // 水平对齐
	            // 'auto' | 'left' | 'right'
	            // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐
	            align: 'auto',

	            backgroundColor: 'rgba(0,0,0,0)',
	            // 图例边框颜色
	            borderColor: '#ccc',
	            // 图例边框线宽，单位px，默认为0（无边框）
	            borderWidth: 0,
	            // 图例内边距，单位px，默认各方向内边距为5，
	            // 接受数组分别设定上右下左边距，同css
	            padding: 5,
	            // 各个item之间的间隔，单位px，默认为10，
	            // 横向布局时为水平间隔，纵向布局时为纵向间隔
	            itemGap: 10,
	            // 图例图形宽度
	            itemWidth: 25,
	            // 图例图形高度
	            itemHeight: 14,

	            // 图例关闭时候的颜色
	            inactiveColor: '#ccc',

	            textStyle: {
	                // 图例文字颜色
	                color: '#333'
	            },
	            // formatter: '',
	            // 选择模式，默认开启图例开关
	            selectedMode: true,
	            // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	            // selected: null,
	            // 图例内容（详见legend.data，数组中每一项代表一个item
	            // data: [],

	            // Tooltip 相关配置
	            tooltip: {
	                show: false
	            }
	        }
	    });

	    module.exports = LegendModel;


/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Legend action
	 */


	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);

	    function legendSelectActionHandler(methodName, payload, ecModel) {
	        var selectedMap = {};
	        var isToggleSelect = methodName === 'toggleSelected';
	        var isSelected;
	        // Update all legend components
	        ecModel.eachComponent('legend', function (legendModel) {
	            if (isToggleSelect && isSelected != null) {
	                // Force other legend has same selected status
	                // Or the first is toggled to true and other are toggled to false
	                // In the case one legend has some item unSelected in option. And if other legend
	                // doesn't has the item, they will assume it is selected.
	                legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
	            }
	            else {
	                legendModel[methodName](payload.name);
	                isSelected = legendModel.isSelected(payload.name);
	            }
	            var legendData = legendModel.getData();
	            zrUtil.each(legendData, function (model) {
	                var name = model.get('name');
	                // Wrap element
	                if (name === '\n' || name === '') {
	                    return;
	                }
	                var isItemSelected = legendModel.isSelected(name);
	                if (name in selectedMap) {
	                    // Unselected if any legend is unselected
	                    selectedMap[name] = selectedMap[name] && isItemSelected;
	                }
	                else {
	                    selectedMap[name] = isItemSelected;
	                }
	            });
	        });
	        // Return the event explicitly
	        return {
	            name: payload.name,
	            selected: selectedMap
	        };
	    }
	    /**
	     * @event legendToggleSelect
	     * @type {Object}
	     * @property {string} type 'legendToggleSelect'
	     * @property {string} [from]
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction(
	        'legendToggleSelect', 'legendselectchanged',
	        zrUtil.curry(legendSelectActionHandler, 'toggleSelected')
	    );

	    /**
	     * @event legendSelect
	     * @type {Object}
	     * @property {string} type 'legendSelect'
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction(
	        'legendSelect', 'legendselected',
	        zrUtil.curry(legendSelectActionHandler, 'select')
	    );

	    /**
	     * @event legendUnSelect
	     * @type {Object}
	     * @property {string} type 'legendUnSelect'
	     * @property {string} name Series name or data item name
	     */
	    echarts.registerAction(
	        'legendUnSelect', 'legendunselected',
	        zrUtil.curry(legendSelectActionHandler, 'unSelect')
	    );


/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var symbolCreator = __webpack_require__(346);
	    var graphic = __webpack_require__(282);
	    var listComponentHelper = __webpack_require__(535);

	    var curry = zrUtil.curry;

	    function dispatchSelectAction(name, api) {
	        api.dispatchAction({
	            type: 'legendToggleSelect',
	            name: name
	        });
	    }

	    function dispatchHighlightAction(seriesModel, dataName, api) {
	        // If element hover will move to a hoverLayer.
	        var el = api.getZr().storage.getDisplayList()[0];
	        if (!(el && el.useHoverLayer)) {
	            seriesModel.get('legendHoverLink') && api.dispatchAction({
	                type: 'highlight',
	                seriesName: seriesModel.name,
	                name: dataName
	            });
	        }
	    }

	    function dispatchDownplayAction(seriesModel, dataName, api) {
	        // If element hover will move to a hoverLayer.
	        var el = api.getZr().storage.getDisplayList()[0];
	        if (!(el && el.useHoverLayer)) {
	            seriesModel.get('legendHoverLink') && api.dispatchAction({
	                type: 'downplay',
	                seriesName: seriesModel.name,
	                name: dataName
	            });
	        }
	    }

	    module.exports = __webpack_require__(240).extendComponentView({

	        type: 'legend',

	        init: function () {
	            this._symbolTypeStore = {};
	        },

	        render: function (legendModel, ecModel, api) {
	            var group = this.group;
	            group.removeAll();

	            if (!legendModel.get('show')) {
	                return;
	            }

	            var selectMode = legendModel.get('selectedMode');
	            var itemAlign = legendModel.get('align');

	            if (itemAlign === 'auto') {
	                itemAlign = (legendModel.get('left') === 'right'
	                    && legendModel.get('orient') === 'vertical')
	                    ? 'right' : 'left';
	            }

	            var legendDrawedMap = {};

	            zrUtil.each(legendModel.getData(), function (itemModel) {
	                var name = itemModel.get('name');

	                // Use empty string or \n as a newline string
	                if (name === '' || name === '\n') {
	                    group.add(new graphic.Group({
	                        newline: true
	                    }));
	                    return;
	                }

	                var seriesModel = ecModel.getSeriesByName(name)[0];

	                if (legendDrawedMap[name]) {
	                    // Have been drawed
	                    return;
	                }

	                // Series legend
	                if (seriesModel) {
	                    var data = seriesModel.getData();
	                    var color = data.getVisual('color');

	                    // If color is a callback function
	                    if (typeof color === 'function') {
	                        // Use the first data
	                        color = color(seriesModel.getDataParams(0));
	                    }

	                    // Using rect symbol defaultly
	                    var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
	                    var symbolType = data.getVisual('symbol');

	                    var itemGroup = this._createItem(
	                        name, itemModel, legendModel,
	                        legendSymbolType, symbolType,
	                        itemAlign, color,
	                        selectMode
	                    );

	                    itemGroup.on('click', curry(dispatchSelectAction, name, api))
	                        .on('mouseover', curry(dispatchHighlightAction, seriesModel, null, api))
	                        .on('mouseout', curry(dispatchDownplayAction, seriesModel, null, api));

	                    legendDrawedMap[name] = true;
	                }
	                else {
	                    // Data legend of pie, funnel
	                    ecModel.eachRawSeries(function (seriesModel) {
	                        // In case multiple series has same data name
	                        if (legendDrawedMap[name]) {
	                            return;
	                        }
	                        if (seriesModel.legendDataProvider) {
	                            var data = seriesModel.legendDataProvider();
	                            var idx = data.indexOfName(name);
	                            if (idx < 0) {
	                                return;
	                            }

	                            var color = data.getItemVisual(idx, 'color');

	                            var legendSymbolType = 'roundRect';

	                            var itemGroup = this._createItem(
	                                name, itemModel, legendModel,
	                                legendSymbolType, null,
	                                itemAlign, color,
	                                selectMode
	                            );

	                            itemGroup.on('click', curry(dispatchSelectAction, name, api))
	                                // FIXME Should not specify the series name
	                                .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api))
	                                .on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));

	                            legendDrawedMap[name] = true;
	                        }
	                    }, this);
	                }

	                if (__DEV__) {
	                    if (!legendDrawedMap[name]) {
	                        console.warn(name + ' series not exists. Legend data should be same with series name or data name.');
	                    }
	                }
	            }, this);

	            listComponentHelper.layout(group, legendModel, api);
	            // Render background after group is layout
	            // FIXME
	            listComponentHelper.addBackground(group, legendModel);
	        },

	        _createItem: function (
	            name, itemModel, legendModel,
	            legendSymbolType, symbolType,
	            itemAlign, color, selectMode
	        ) {
	            var itemWidth = legendModel.get('itemWidth');
	            var itemHeight = legendModel.get('itemHeight');
	            var inactiveColor = legendModel.get('inactiveColor');

	            var isSelected = legendModel.isSelected(name);
	            var itemGroup = new graphic.Group();

	            var textStyleModel = itemModel.getModel('textStyle');

	            var itemIcon = itemModel.get('icon');

	            var tooltipModel = itemModel.getModel('tooltip');
	            var legendGlobalTooltipModel = tooltipModel.parentModel;

	            // Use user given icon first
	            legendSymbolType = itemIcon || legendSymbolType;
	            itemGroup.add(symbolCreator.createSymbol(
	                legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : inactiveColor
	            ));

	            // Compose symbols
	            // PENDING
	            if (!itemIcon && symbolType
	                // At least show one symbol, can't be all none
	                && ((symbolType !== legendSymbolType) || symbolType == 'none')
	            ) {
	                var size = itemHeight * 0.8;
	                if (symbolType === 'none') {
	                    symbolType = 'circle';
	                }
	                // Put symbol in the center
	                itemGroup.add(symbolCreator.createSymbol(
	                    symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size,
	                    isSelected ? color : inactiveColor
	                ));
	            }

	            // Text
	            var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
	            var textAlign = itemAlign;

	            var formatter = legendModel.get('formatter');
	            var content = name;
	            if (typeof formatter === 'string' && formatter) {
	                content = formatter.replace('{name}', name != null ? name : '');
	            }
	            else if (typeof formatter === 'function') {
	                content = formatter(name);
	            }

	            var text = new graphic.Text({
	                style: {
	                    text: content,
	                    x: textX,
	                    y: itemHeight / 2,
	                    fill: isSelected ? textStyleModel.getTextColor() : inactiveColor,
	                    textFont: textStyleModel.getFont(),
	                    textAlign: textAlign,
	                    textVerticalAlign: 'middle'
	                }
	            });
	            itemGroup.add(text);

	            // Add a invisible rect to increase the area of mouse hover
	            var hitRect = new graphic.Rect({
	                shape: itemGroup.getBoundingRect(),
	                invisible: true,
	                tooltip: tooltipModel.get('show') ? zrUtil.extend({
	                    content: name,
	                    // Defaul formatter
	                    formatter: legendGlobalTooltipModel.get('formatter', true) || function () {
	                        return name;
	                    },
	                    formatterParams: {
	                        componentType: 'legend',
	                        legendIndex: legendModel.componentIndex,
	                        name: name,
	                        $vars: ['name']
	                    }
	                }, tooltipModel.option) : null
	            });
	            itemGroup.add(hitRect);

	            itemGroup.eachChild(function (child) {
	                child.silent = true;
	            });

	            hitRect.silent = !selectMode;



	            this.group.add(itemGroup);

	            graphic.setHoverStyle(itemGroup);

	            return itemGroup;
	        }
	    });


/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	
	    // List layout
	    var layout = __webpack_require__(260);
	    var formatUtil = __webpack_require__(245);
	    var graphic = __webpack_require__(282);

	    function positionGroup(group, model, api) {
	        layout.positionElement(
	            group, model.getBoxLayoutParams(),
	            {
	                width: api.getWidth(),
	                height: api.getHeight()
	            },
	            model.get('padding')
	        );
	    }

	    module.exports = {
	        /**
	         * Layout list like component.
	         * It will box layout each items in group of component and then position the whole group in the viewport
	         * @param {module:zrender/group/Group} group
	         * @param {module:echarts/model/Component} componentModel
	         * @param {module:echarts/ExtensionAPI}
	         */
	        layout: function (group, componentModel, api) {
	            var rect = layout.getLayoutRect(componentModel.getBoxLayoutParams(), {
	                width: api.getWidth(),
	                height: api.getHeight()
	            }, componentModel.get('padding'));
	            layout.box(
	                componentModel.get('orient'),
	                group,
	                componentModel.get('itemGap'),
	                rect.width,
	                rect.height
	            );

	            positionGroup(group, componentModel, api);
	        },

	        addBackground: function (group, componentModel) {
	            var padding = formatUtil.normalizeCssArray(
	                componentModel.get('padding')
	            );
	            var boundingRect = group.getBoundingRect();
	            var style = componentModel.getItemStyle(['color', 'opacity']);
	            style.fill = componentModel.get('backgroundColor');
	            var rect = new graphic.Rect({
	                shape: {
	                    x: boundingRect.x - padding[3],
	                    y: boundingRect.y - padding[0],
	                    width: boundingRect.width + padding[1] + padding[3],
	                    height: boundingRect.height + padding[0] + padding[2]
	                },
	                style: style,
	                silent: true,
	                z2: -1
	            });
	            graphic.subPixelOptimizeRect(rect);

	            group.add(rect);
	        }
	    };


/***/ },
/* 536 */
/***/ function(module, exports) {

	
	   module.exports = function (ecModel) {
	        var legendModels = ecModel.findComponents({
	            mainType: 'legend'
	        });
	        if (legendModels && legendModels.length) {
	            ecModel.filterSeries(function (series) {
	                // If in any legend component the status is not selected.
	                // Because in legend series is assumed selected when it is not in the legend data.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(series.name)) {
	                        return false;
	                    }
	                }
	                return true;
	            });
	        }
	    };


/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	// FIXME Better way to pack data in graphic element


	    __webpack_require__(538);

	    __webpack_require__(539);

	    // Show tip action
	    /**
	     * @action
	     * @property {string} type
	     * @property {number} seriesIndex
	     * @property {number} dataIndex
	     * @property {number} [x]
	     * @property {number} [y]
	     */
	    __webpack_require__(240).registerAction(
	        {
	            type: 'showTip',
	            event: 'showTip',
	            update: 'tooltip:manuallyShowTip'
	        },
	        // noop
	        function () {}
	    );
	    // Hide tip action
	    __webpack_require__(240).registerAction(
	        {
	            type: 'hideTip',
	            event: 'hideTip',
	            update: 'tooltip:manuallyHideTip'
	        },
	        // noop
	        function () {}
	    );


/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(240).extendComponentModel({

	        type: 'tooltip',

	        defaultOption: {
	            zlevel: 0,

	            z: 8,

	            show: true,

	            // tooltip主体内容
	            showContent: true,

	            // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'
	            trigger: 'item',

	            // 触发条件，支持 'click' | 'mousemove' | 'none'
	            triggerOn: 'mousemove',

	            // 是否永远显示 content
	            alwaysShowContent: false,

	            // 位置 {Array} | {Function}
	            // position: null

	            // 是否约束 content 在 viewRect 中。默认 false 是为了兼容以前版本。
	            confine: false,

	            // 内容格式器：{string}（Template） ¦ {Function}
	            // formatter: null

	            showDelay: 0,

	            // 隐藏延迟，单位ms
	            hideDelay: 100,

	            // 动画变换时间，单位s
	            transitionDuration: 0.4,

	            enterable: false,

	            // 提示背景颜色，默认为透明度为0.7的黑色
	            backgroundColor: 'rgba(50,50,50,0.7)',

	            // 提示边框颜色
	            borderColor: '#333',

	            // 提示边框圆角，单位px，默认为4
	            borderRadius: 4,

	            // 提示边框线宽，单位px，默认为0（无边框）
	            borderWidth: 0,

	            // 提示内边距，单位px，默认各方向内边距为5，
	            // 接受数组分别设定上右下左边距，同css
	            padding: 5,

	            // Extra css text
	            extraCssText: '',

	            // 坐标轴指示器，坐标轴触发有效
	            axisPointer: {
	                // 默认为直线
	                // 可选为：'line' | 'shadow' | 'cross'
	                type: 'line',

	                // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
	                // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
	                // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
	                // 极坐标系会默认选择 angle 轴
	                axis: 'auto',

	                animation: true,
	                animationDurationUpdate: 200,
	                animationEasingUpdate: 'exponentialOut',

	                // 直线指示器样式设置
	                lineStyle: {
	                    color: '#555',
	                    width: 1,
	                    type: 'solid'
	                },

	                crossStyle: {
	                    color: '#555',
	                    width: 1,
	                    type: 'dashed',

	                    // TODO formatter
	                    textStyle: {}
	                },

	                // 阴影指示器样式设置
	                shadowStyle: {
	                    color: 'rgba(150,150,150,0.3)'
	                }
	            },
	            textStyle: {
	                color: '#fff',
	                fontSize: 14
	            }
	        }
	    });


/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	

	    var TooltipContent = __webpack_require__(540);
	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);
	    var formatUtil = __webpack_require__(245);
	    var numberUtil = __webpack_require__(246);
	    var modelUtil = __webpack_require__(244);
	    var parsePercent = numberUtil.parsePercent;
	    var env = __webpack_require__(241);
	    var Model = __webpack_require__(251);

	    function dataEqual(a, b) {
	        if (!a || !b) {
	            return false;
	        }
	        var round = numberUtil.round;
	        return round(a[0]) === round(b[0])
	            && round(a[1]) === round(b[1]);
	    }
	    /**
	     * @inner
	     */
	    function makeLineShape(x1, y1, x2, y2) {
	        return {
	            x1: x1,
	            y1: y1,
	            x2: x2,
	            y2: y2
	        };
	    }

	    /**
	     * @inner
	     */
	    function makeRectShape(x, y, width, height) {
	        return {
	            x: x,
	            y: y,
	            width: width,
	            height: height
	        };
	    }

	    /**
	     * @inner
	     */
	    function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
	        return {
	            cx: cx,
	            cy: cy,
	            r0: r0,
	            r: r,
	            startAngle: startAngle,
	            endAngle: endAngle,
	            clockwise: true
	        };
	    }

	    function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
	        var width = el.clientWidth;
	        var height = el.clientHeight;
	        var gap = 20;

	        if (x + width + gap > viewWidth) {
	            x -= width + gap;
	        }
	        else {
	            x += gap;
	        }
	        if (y + height + gap > viewHeight) {
	            y -= height + gap;
	        }
	        else {
	            y += gap;
	        }
	        return [x, y];
	    }

	    function confineTooltipPosition(x, y, el, viewWidth, viewHeight) {
	        var width = el.clientWidth;
	        var height = el.clientHeight;

	        x = Math.min(x + width, viewWidth) - width;
	        y = Math.min(y + height, viewHeight) - height;
	        x = Math.max(x, 0);
	        y = Math.max(y, 0);

	        return [x, y];
	    }

	    function calcTooltipPosition(position, rect, dom) {
	        var domWidth = dom.clientWidth;
	        var domHeight = dom.clientHeight;
	        var gap = 5;
	        var x = 0;
	        var y = 0;
	        var rectWidth = rect.width;
	        var rectHeight = rect.height;
	        switch (position) {
	            case 'inside':
	                x = rect.x + rectWidth / 2 - domWidth / 2;
	                y = rect.y + rectHeight / 2 - domHeight / 2;
	                break;
	            case 'top':
	                x = rect.x + rectWidth / 2 - domWidth / 2;
	                y = rect.y - domHeight - gap;
	                break;
	            case 'bottom':
	                x = rect.x + rectWidth / 2 - domWidth / 2;
	                y = rect.y + rectHeight + gap;
	                break;
	            case 'left':
	                x = rect.x - domWidth - gap;
	                y = rect.y + rectHeight / 2 - domHeight / 2;
	                break;
	            case 'right':
	                x = rect.x + rectWidth + gap;
	                y = rect.y + rectHeight / 2 - domHeight / 2;
	        }
	        return [x, y];
	    }

	    /**
	     * @param  {string|Function|Array.<number>} positionExpr
	     * @param  {number} x Mouse x
	     * @param  {number} y Mouse y
	     * @param  {boolean} confine Whether confine tooltip content in view rect.
	     * @param  {module:echarts/component/tooltip/TooltipContent} content
	     * @param  {Object|<Array.<Object>} params
	     * @param  {module:zrender/Element} el target element
	     * @param  {module:echarts/ExtensionAPI} api
	     * @return {Array.<number>}
	     */
	    function updatePosition(positionExpr, x, y, confine, content, params, el, api) {
	        var viewWidth = api.getWidth();
	        var viewHeight = api.getHeight();

	        var rect = el && el.getBoundingRect().clone();
	        el && rect.applyTransform(el.transform);
	        if (typeof positionExpr === 'function') {
	            // Callback of position can be an array or a string specify the position
	            positionExpr = positionExpr([x, y], params, content.el, rect);
	        }

	        if (zrUtil.isArray(positionExpr)) {
	            x = parsePercent(positionExpr[0], viewWidth);
	            y = parsePercent(positionExpr[1], viewHeight);
	        }
	        // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
	        else if (typeof positionExpr === 'string' && el) {
	            var pos = calcTooltipPosition(
	                positionExpr, rect, content.el
	            );
	            x = pos[0];
	            y = pos[1];
	        }
	        else {
	            var pos = refixTooltipPosition(
	                x, y, content.el, viewWidth, viewHeight
	            );
	            x = pos[0];
	            y = pos[1];
	        }

	        if (confine) {
	            var pos = confineTooltipPosition(
	                x, y, content.el, viewWidth, viewHeight
	            );
	            x = pos[0];
	            y = pos[1];
	        }

	        content.moveTo(x, y);
	    }

	    function ifSeriesSupportAxisTrigger(seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        var trigger = seriesModel.get('tooltip.trigger', true);
	        // Ignore series use item tooltip trigger and series coordinate system is not cartesian or
	        return !(!coordSys
	            || (coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'singleAxis')
	            || trigger === 'item');
	    }

	    __webpack_require__(240).extendComponentView({

	        type: 'tooltip',

	        _axisPointers: {},

	        init: function (ecModel, api) {
	            if (env.node) {
	                return;
	            }
	            var tooltipContent = new TooltipContent(api.getDom(), api);
	            this._tooltipContent = tooltipContent;
	        },

	        render: function (tooltipModel, ecModel, api) {
	            if (env.node) {
	                return;
	            }

	            // Reset
	            this.group.removeAll();

	            /**
	             * @type {Object}
	             * @private
	             */
	            this._axisPointers = {};

	            /**
	             * @private
	             * @type {module:echarts/component/tooltip/TooltipModel}
	             */
	            this._tooltipModel = tooltipModel;

	            /**
	             * @private
	             * @type {module:echarts/model/Global}
	             */
	            this._ecModel = ecModel;

	            /**
	             * @private
	             * @type {module:echarts/ExtensionAPI}
	             */
	            this._api = api;

	            /**
	             * @type {Object}
	             * @private
	             */
	            this._lastHover = {
	                // data
	                // payloadBatch
	            };

	            var tooltipContent = this._tooltipContent;
	            tooltipContent.update();
	            tooltipContent.enterable = tooltipModel.get('enterable');
	            this._alwaysShowContent = tooltipModel.get('alwaysShowContent');

	            /**
	             * @type {Object.<string, Array>}
	             */
	            this._seriesGroupByAxis = this._prepareAxisTriggerData(
	                tooltipModel, ecModel
	            );

	            var crossText = this._crossText;
	            if (crossText) {
	                this.group.add(crossText);
	            }

	            var triggerOn = tooltipModel.get('triggerOn');

	            // Try to keep the tooltip show when refreshing
	            if (this._lastX != null
	                && this._lastY != null
	                // When user is willing to control tooltip totally using API,
	                // self.manuallyShowTip({x, y}) might cause tooltip hide,
	                // which is not expected.
	                && triggerOn !== 'none'
	            ) {
	                var self = this;
	                clearTimeout(this._refreshUpdateTimeout);
	                this._refreshUpdateTimeout = setTimeout(function () {
	                    // Show tip next tick after other charts are rendered
	                    // In case highlight action has wrong result
	                    // FIXME
	                    self.manuallyShowTip(tooltipModel, ecModel, api, {
	                        x: self._lastX,
	                        y: self._lastY
	                    });
	                });
	            }

	            var zr = this._api.getZr();
	            zr.off('click', this._tryShow);
	            zr.off('mousemove', this._mousemove);
	            zr.off('mouseout', this._hide);
	            zr.off('globalout', this._hide);

	            if (triggerOn === 'click') {
	                zr.on('click', this._tryShow, this);
	            }
	            else if (triggerOn === 'mousemove') {
	                zr.on('mousemove', this._mousemove, this);
	                zr.on('mouseout', this._hide, this);
	                zr.on('globalout', this._hide, this);
	            }
	            // else triggerOn is 'none', which enable user
	            // to control tooltip totally using API.
	        },

	        _mousemove: function (e) {
	            var showDelay = this._tooltipModel.get('showDelay');
	            var self = this;
	            clearTimeout(this._showTimeout);
	            if (showDelay > 0) {
	                this._showTimeout = setTimeout(function () {
	                    self._tryShow(e);
	                }, showDelay);
	            }
	            else {
	                this._tryShow(e);
	            }
	        },

	        /**
	         * Show tip manually by
	         * dispatchAction({
	         *     type: 'showTip',
	         *     x: 10,
	         *     y: 10
	         * });
	         * Or
	         * dispatchAction({
	         *      type: 'showTip',
	         *      seriesIndex: 0,
	         *      dataIndex or dataIndexInside or name
	         * });
	         *
	         *  TODO Batch
	         */
	        manuallyShowTip: function (tooltipModel, ecModel, api, payload) {
	            // From self
	            if (payload.from === this.uid) {
	                return;
	            }

	            var ecModel = this._ecModel;
	            var seriesIndex = payload.seriesIndex;
	            var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
	            var api = this._api;

	            var isTriggerAxis = this._tooltipModel.get('trigger') === 'axis';
	            function seriesHaveDataOnIndex(_series) {
	                var data = _series.getData();
	                var dataIndex = modelUtil.queryDataIndex(data, payload);
	                // Have single dataIndex
	                if (dataIndex != null && !zrUtil.isArray(dataIndex)
	                    && data.hasValue(dataIndex)
	                ) {
	                    return true;
	                }
	            }

	            if (payload.x == null || payload.y == null) {
	                if (isTriggerAxis) {
	                    // Find another series.
	                    if (seriesModel && !seriesHaveDataOnIndex(seriesModel)) {
	                        seriesModel = null;
	                    }
	                    if (!seriesModel) {
	                        // Find the first series can use axis trigger And data is not null
	                        ecModel.eachSeries(function (_series) {
	                            if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {
	                                if (seriesHaveDataOnIndex(_series)) {
	                                    seriesModel = _series;
	                                }
	                            }
	                        });
	                    }
	                }
	                else {
	                    // Use the first series by default.
	                    seriesModel = seriesModel || ecModel.getSeriesByIndex(0);
	                }
	                if (seriesModel) {
	                    var data = seriesModel.getData();
	                    var dataIndex = modelUtil.queryDataIndex(data, payload);

	                    if (dataIndex == null || zrUtil.isArray(dataIndex)) {
	                        return;
	                    }

	                    var el = data.getItemGraphicEl(dataIndex);
	                    var cx;
	                    var cy;
	                    // Try to get the point in coordinate system
	                    var coordSys = seriesModel.coordinateSystem;
	                    if (seriesModel.getTooltipPosition) {
	                        var point = seriesModel.getTooltipPosition(dataIndex) || [];
	                        cx = point[0];
	                        cy = point[1];
	                    }
	                    else if (coordSys && coordSys.dataToPoint) {
	                        var point = coordSys.dataToPoint(
	                            data.getValues(
	                                zrUtil.map(coordSys.dimensions, function (dim) {
	                                    return seriesModel.coordDimToDataDim(dim)[0];
	                                }), dataIndex, true
	                            )
	                        );
	                        cx = point && point[0];
	                        cy = point && point[1];
	                    }
	                    else if (el) {
	                        // Use graphic bounding rect
	                        var rect = el.getBoundingRect().clone();
	                        rect.applyTransform(el.transform);
	                        cx = rect.x + rect.width / 2;
	                        cy = rect.y + rect.height / 2;
	                    }

	                    if (cx != null && cy != null) {
	                        this._tryShow({
	                            offsetX: cx,
	                            offsetY: cy,
	                            position: payload.position,
	                            target: el,
	                            event: {}
	                        });
	                    }
	                }
	            }
	            else {
	                var el = api.getZr().handler.findHover(payload.x, payload.y);
	                this._tryShow({
	                    offsetX: payload.x,
	                    offsetY: payload.y,
	                    position: payload.position,
	                    target: el,
	                    event: {}
	                });
	            }
	        },

	        manuallyHideTip: function (tooltipModel, ecModel, api, payload) {
	            if (payload.from === this.uid) {
	                return;
	            }

	            this._hide();
	        },

	        _prepareAxisTriggerData: function (tooltipModel, ecModel) {
	            // Prepare data for axis trigger
	            var seriesGroupByAxis = {};
	            ecModel.eachSeries(function (seriesModel) {
	                if (ifSeriesSupportAxisTrigger(seriesModel)) {
	                    var coordSys = seriesModel.coordinateSystem;
	                    var baseAxis;
	                    var key;

	                    // Only cartesian2d, polar and single support axis trigger
	                    if (coordSys.type === 'cartesian2d') {
	                        // FIXME `axisPointer.axis` is not baseAxis
	                        baseAxis = coordSys.getBaseAxis();
	                        key = baseAxis.dim + baseAxis.index;
	                    }
	                    else if (coordSys.type === 'singleAxis') {
	                        baseAxis = coordSys.getAxis();
	                        key = baseAxis.dim + baseAxis.type;
	                    }
	                    else {
	                        baseAxis = coordSys.getBaseAxis();
	                        key = baseAxis.dim + coordSys.name;
	                    }

	                    seriesGroupByAxis[key] = seriesGroupByAxis[key] || {
	                        coordSys: [],
	                        series: []
	                    };
	                    seriesGroupByAxis[key].coordSys.push(coordSys);
	                    seriesGroupByAxis[key].series.push(seriesModel);
	                }
	            }, this);

	            return seriesGroupByAxis;
	        },

	        /**
	         * mousemove handler
	         * @param {Object} e
	         * @private
	         */
	        _tryShow: function (e) {
	            var el = e.target;
	            var tooltipModel = this._tooltipModel;
	            var globalTrigger = tooltipModel.get('trigger');
	            var ecModel = this._ecModel;
	            var api = this._api;

	            if (!tooltipModel) {
	                return;
	            }

	            // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed
	            this._lastX = e.offsetX;
	            this._lastY = e.offsetY;

	            // Always show item tooltip if mouse is on the element with dataIndex
	            if (el && el.dataIndex != null) {
	                // Use dataModel in element if possible
	                // Used when mouseover on a element like markPoint or edge
	                // In which case, the data is not main data in series.
	                var dataModel = el.dataModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                var dataIndex = el.dataIndex;
	                var data = dataModel.getData();
	                var itemModel = data.getItemModel(dataIndex);
	                // Series or single data may use item trigger when global is axis trigger
	                if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {
	                    this._showAxisTooltip(tooltipModel, ecModel, e);
	                }
	                else {
	                    // Reset ticket
	                    this._ticket = '';
	                    // If either single data or series use item trigger
	                    this._hideAxisPointer();
	                    // Reset last hover and dispatch downplay action
	                    this._resetLastHover();

	                    this._showItemTooltipContent(dataModel, dataIndex, el.dataType, e);
	                }

	                api.dispatchAction({
	                    type: 'showTip',
	                    from: this.uid,
	                    dataIndexInside: dataIndex,
	                    dataIndex: data.getRawIndex(dataIndex), // expose to user.
	                    seriesIndex: el.seriesIndex
	                });
	            }
	            // Tooltip provided directly. Like legend
	            else if (el && el.tooltip) {
	                var tooltipOpt = el.tooltip;
	                if (typeof tooltipOpt === 'string') {
	                    var content = tooltipOpt;
	                    tooltipOpt = {
	                        content: content,
	                        // Fixed formatter
	                        formatter: content
	                    };
	                }
	                var subTooltipModel = new Model(tooltipOpt, tooltipModel);
	                var defaultHtml = subTooltipModel.get('content');
	                var asyncTicket = Math.random();
	                this._showTooltipContent(
	                    // TODO params
	                    subTooltipModel, defaultHtml, subTooltipModel.get('formatterParams') || {},
	                    asyncTicket, e.offsetX, e.offsetY, e.position, el, api
	                );
	            }
	            else {
	                if (globalTrigger === 'item') {
	                    this._hide();
	                }
	                else {
	                    // Try show axis tooltip
	                    this._showAxisTooltip(tooltipModel, ecModel, e);
	                }

	                // Action of cross pointer
	                // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method
	                if (tooltipModel.get('axisPointer.type') === 'cross') {
	                    api.dispatchAction({
	                        type: 'showTip',
	                        from: this.uid,
	                        x: e.offsetX,
	                        y: e.offsetY
	                    });
	                }
	            }
	        },

	        /**
	         * Show tooltip on axis
	         * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel
	         * @param {module:echarts/model/Global} ecModel
	         * @param {Object} e
	         * @private
	         */
	        _showAxisTooltip: function (tooltipModel, ecModel, e) {
	            var axisPointerModel = tooltipModel.getModel('axisPointer');
	            var axisPointerType = axisPointerModel.get('type');

	            if (axisPointerType === 'cross') {
	                var el = e.target;
	                if (el && el.dataIndex != null) {
	                    var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);
	                    var dataIndex = el.dataIndex;
	                    this._showItemTooltipContent(seriesModel, dataIndex, el.dataType, e);
	                }
	            }

	            this._showAxisPointer();
	            var allNotShow = true;
	            zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {
	                // Try show the axis pointer
	                var allCoordSys = seriesCoordSysSameAxis.coordSys;
	                var coordSys = allCoordSys[0];

	                // If mouse position is not in the grid or polar
	                var point = [e.offsetX, e.offsetY];

	                if (!coordSys.containPoint(point)) {
	                    // Hide axis pointer
	                    this._hideAxisPointer(coordSys.name);
	                    return;
	                }

	                allNotShow = false;
	                // Make sure point is discrete on cateogry axis
	                var dimensions = coordSys.dimensions;
	                var value = coordSys.pointToData(point, true);
	                point = coordSys.dataToPoint(value);

	                var baseAxis = coordSys.getBaseAxis();
	                var axisType = axisPointerModel.get('axis');
	                if (axisType === 'auto') {
	                    axisType = baseAxis.dim;
	                }

	                if (baseAxis.isBlank() || zrUtil.eqNaN(point[0]) || zrUtil.eqNaN(point[1])) {
	                    this._hideAxisPointer(coordSys.name);
	                    return;
	                }

	                var contentNotChange = false;
	                var lastHover = this._lastHover;
	                if (axisPointerType === 'cross') {
	                    // If hover data not changed
	                    // Possible when two axes are all category
	                    if (dataEqual(lastHover.data, value)) {
	                        contentNotChange = true;
	                    }
	                    lastHover.data = value;
	                }
	                else {
	                    var valIndex = zrUtil.indexOf(dimensions, axisType);

	                    // If hover data not changed on the axis dimension
	                    if (lastHover.data === value[valIndex]) {
	                        contentNotChange = true;
	                    }
	                    lastHover.data = value[valIndex];
	                }

	                var enableAnimation = tooltipModel.get('animation');

	                if (coordSys.type === 'cartesian2d' && !contentNotChange) {
	                    this._showCartesianPointer(
	                        axisPointerModel, coordSys, axisType, point, enableAnimation
	                    );
	                }
	                else if (coordSys.type === 'polar' && !contentNotChange) {
	                    this._showPolarPointer(
	                        axisPointerModel, coordSys, axisType, point, enableAnimation
	                    );
	                }
	                else if (coordSys.type === 'singleAxis' && !contentNotChange) {
	                    this._showSinglePointer(
	                        axisPointerModel, coordSys, axisType, point, enableAnimation
	                    );
	                }

	                if (axisPointerType !== 'cross') {
	                    this._dispatchAndShowSeriesTooltipContent(
	                        coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange, e.position
	                    );
	                }
	            }, this);

	            if (!this._tooltipModel.get('show')) {
	                this._hideAxisPointer();
	            }

	            if (allNotShow) {
	                this._hide();
	            }
	        },

	        /**
	         * Show tooltip on axis of cartesian coordinate
	         * @param {module:echarts/model/Model} axisPointerModel
	         * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians
	         * @param {string} axisType
	         * @param {Array.<number>} point
	         * @private
	         */
	        _showCartesianPointer: function (axisPointerModel, cartesian, axisType, point, enableAnimation) {
	            var self = this;

	            var axisPointerType = axisPointerModel.get('type');
	            var baseAxis = cartesian.getBaseAxis();
	            var moveAnimation = enableAnimation
	                && axisPointerType !== 'cross'
	                && baseAxis.type === 'category'
	                && baseAxis.getBandWidth() > 20;

	            if (axisPointerType === 'cross') {
	                moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());
	                moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());

	                this._updateCrossText(cartesian, point, axisPointerModel);
	            }
	            else {
	                var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');
	                var otherExtent = otherAxis.getGlobalExtent();

	                if (cartesian.type === 'cartesian2d') {
	                    (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(
	                        axisType, point, otherExtent
	                    );
	                }
	            }

	            /**
	             * @inner
	             */
	            function moveGridLine(axisType, point, otherExtent) {
	                var targetShape = axisType === 'x'
	                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])
	                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);

	                var pointerEl = self._getPointerElement(
	                    cartesian, axisPointerModel, axisType, targetShape
	                );
	                graphic.subPixelOptimizeLine({
	                    shape: targetShape,
	                    style: pointerEl.style
	                });

	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }

	            /**
	             * @inner
	             */
	            function moveGridShadow(axisType, point, otherExtent) {
	                var axis = cartesian.getAxis(axisType);
	                var bandWidth = axis.getBandWidth();
	                var span = otherExtent[1] - otherExtent[0];
	                var targetShape = axisType === 'x'
	                    ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span)
	                    : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);

	                var pointerEl = self._getPointerElement(
	                    cartesian, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }
	        },

	        _showSinglePointer: function (axisPointerModel, single, axisType, point, enableAnimation) {
	            var self = this;
	            var axisPointerType = axisPointerModel.get('type');
	            var moveAnimation =
	                enableAnimation
	                && axisPointerType !== 'cross'
	                && single.getBaseAxis().type === 'category';
	            var rect = single.getRect();
	            var otherExtent = [rect.y, rect.y + rect.height];

	            moveSingleLine(axisType, point, otherExtent);

	            /**
	             * @inner
	             */
	            function moveSingleLine(axisType, point, otherExtent) {
	                var axis = single.getAxis();
	                var orient = axis.orient;

	                var targetShape = orient === 'horizontal'
	                    ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1])
	                    : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);

	                var pointerEl = self._getPointerElement(
	                    single, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }

	        },

	        /**
	         * Show tooltip on axis of polar coordinate
	         * @param {module:echarts/model/Model} axisPointerModel
	         * @param {Array.<module:echarts/coord/polar/Polar>} polar
	         * @param {string} axisType
	         * @param {Array.<number>} point
	         */
	        _showPolarPointer: function (axisPointerModel, polar, axisType, point, enableAnimation) {
	            var self = this;

	            var axisPointerType = axisPointerModel.get('type');

	            var angleAxis = polar.getAngleAxis();
	            var radiusAxis = polar.getRadiusAxis();

	            var moveAnimation = enableAnimation
	                && axisPointerType !== 'cross'
	                && polar.getBaseAxis().type === 'category';

	            if (axisPointerType === 'cross') {
	                movePolarLine('angle', point, radiusAxis.getExtent());
	                movePolarLine('radius', point, angleAxis.getExtent());

	                this._updateCrossText(polar, point, axisPointerModel);
	            }
	            else {
	                var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');
	                var otherExtent = otherAxis.getExtent();

	                (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(
	                    axisType, point, otherExtent
	                );
	            }
	            /**
	             * @inner
	             */
	            function movePolarLine(axisType, point, otherExtent) {
	                var mouseCoord = polar.pointToCoord(point);

	                var targetShape;

	                if (axisType === 'angle') {
	                    var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);
	                    var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);
	                    targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);
	                }
	                else {
	                    targetShape = {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r: mouseCoord[0]
	                    };
	                }

	                var pointerEl = self._getPointerElement(
	                    polar, axisPointerModel, axisType, targetShape
	                );

	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }

	            /**
	             * @inner
	             */
	            function movePolarShadow(axisType, point, otherExtent) {
	                var axis = polar.getAxis(axisType);
	                var bandWidth = axis.getBandWidth();

	                var mouseCoord = polar.pointToCoord(point);

	                var targetShape;

	                var radian = Math.PI / 180;

	                if (axisType === 'angle') {
	                    targetShape = makeSectorShape(
	                        polar.cx, polar.cy,
	                        otherExtent[0], otherExtent[1],
	                        // In ECharts y is negative if angle is positive
	                        (-mouseCoord[1] - bandWidth / 2) * radian,
	                        (-mouseCoord[1] + bandWidth / 2) * radian
	                    );
	                }
	                else {
	                    targetShape = makeSectorShape(
	                        polar.cx, polar.cy,
	                        mouseCoord[0] - bandWidth / 2,
	                        mouseCoord[0] + bandWidth / 2,
	                        0, Math.PI * 2
	                    );
	                }

	                var pointerEl = self._getPointerElement(
	                    polar, axisPointerModel, axisType, targetShape
	                );
	                moveAnimation
	                    ? graphic.updateProps(pointerEl, {
	                        shape: targetShape
	                    }, axisPointerModel)
	                    :  pointerEl.attr({
	                        shape: targetShape
	                    });
	            }
	        },

	        _updateCrossText: function (coordSys, point, axisPointerModel) {
	            var crossStyleModel = axisPointerModel.getModel('crossStyle');
	            var textStyleModel = crossStyleModel.getModel('textStyle');

	            var tooltipModel = this._tooltipModel;

	            var text = this._crossText;
	            if (!text) {
	                text = this._crossText = new graphic.Text({
	                    style: {
	                        textAlign: 'left',
	                        textVerticalAlign: 'bottom'
	                    }
	                });
	                this.group.add(text);
	            }

	            var value = coordSys.pointToData(point);

	            var dims = coordSys.dimensions;
	            value = zrUtil.map(value, function (val, idx) {
	                var axis = coordSys.getAxis(dims[idx]);
	                if (axis.type === 'category' || axis.type === 'time') {
	                    val = axis.scale.getLabel(val);
	                }
	                else {
	                    val = formatUtil.addCommas(
	                        val.toFixed(axis.getPixelPrecision())
	                    );
	                }
	                return val;
	            });

	            text.setStyle({
	                fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),
	                textFont: textStyleModel.getFont(),
	                text: value.join(', '),
	                x: point[0] + 5,
	                y: point[1] - 5
	            });
	            text.z = tooltipModel.get('z');
	            text.zlevel = tooltipModel.get('zlevel');
	        },

	        _getPointerElement: function (coordSys, pointerModel, axisType, initShape) {
	            var tooltipModel = this._tooltipModel;
	            var z = tooltipModel.get('z');
	            var zlevel = tooltipModel.get('zlevel');
	            var axisPointers = this._axisPointers;
	            var coordSysName = coordSys.name;
	            axisPointers[coordSysName] = axisPointers[coordSysName] || {};
	            if (axisPointers[coordSysName][axisType]) {
	                return axisPointers[coordSysName][axisType];
	            }

	            // Create if not exists
	            var pointerType = pointerModel.get('type');
	            var styleModel = pointerModel.getModel(pointerType + 'Style');
	            var isShadow = pointerType === 'shadow';
	            var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();

	            var elementType = coordSys.type === 'polar'
	                ? (isShadow ? 'Sector' : (axisType === 'radius' ? 'Circle' : 'Line'))
	                : (isShadow ? 'Rect' : 'Line');

	            isShadow ? (style.stroke = null) : (style.fill = null);

	            var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({
	                style: style,
	                z: z,
	                zlevel: zlevel,
	                silent: true,
	                shape: initShape
	            });

	            this.group.add(el);
	            return el;
	        },

	        /**
	         * Dispatch actions and show tooltip on series
	         * @param {Array.<module:echarts/model/Series>} seriesList
	         * @param {Array.<number>} point
	         * @param {Array.<number>} value
	         * @param {boolean} contentNotChange
	         * @param {Array.<number>|string|Function} [positionExpr]
	         */
	        _dispatchAndShowSeriesTooltipContent: function (
	            coordSys, seriesList, point, value, contentNotChange, positionExpr
	        ) {

	            var rootTooltipModel = this._tooltipModel;

	            var baseAxis = coordSys.getBaseAxis();
	            var baseDimIndex = ({x: 1, radius: 1, single: 1})[baseAxis.dim] ? 0 : 1;

	            if (!seriesList.length) {
	                return;
	            }

	            var payloadBatch = zrUtil.map(seriesList, function (series) {
	                return {
	                    seriesIndex: series.seriesIndex,
	                    dataIndexInside: series.getAxisTooltipDataIndex
	                        ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis)
	                        : series.getData().indexOfNearest(
	                            series.coordDimToDataDim(baseAxis.dim)[0],
	                            value[baseDimIndex],
	                            // Add a threshold to avoid find the wrong dataIndex when data length is not same
	                            false, baseAxis.type === 'category' ? 0.5 : null
	                        )
	                };
	            });
	            var sampleSeriesIndex;
	            zrUtil.each(payloadBatch, function (payload, idx) {
	                if (seriesList[idx].getData().hasValue(payload.dataIndexInside)) {
	                    sampleSeriesIndex = idx;
	                }
	            });
	            // Fallback to 0.
	            sampleSeriesIndex = sampleSeriesIndex || 0;

	            var lastHover = this._lastHover;
	            var api = this._api;
	            // Dispatch downplay action
	            if (lastHover.payloadBatch && !contentNotChange) {
	                api.dispatchAction({
	                    type: 'downplay',
	                    batch: lastHover.payloadBatch
	                });
	            }
	            // Dispatch highlight action
	            if (!contentNotChange) {
	                api.dispatchAction({
	                    type: 'highlight',
	                    batch: payloadBatch
	                });
	                lastHover.payloadBatch = payloadBatch;
	            }
	            // Dispatch showTip action
	            var dataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;
	            api.dispatchAction({
	                type: 'showTip',
	                dataIndexInside: dataIndex,
	                // expose to user.
	                dataIndex: seriesList[sampleSeriesIndex].getData().getRawIndex(dataIndex),
	                seriesIndex: payloadBatch[sampleSeriesIndex].seriesIndex,
	                from: this.uid
	            });

	            if (baseAxis && rootTooltipModel.get('showContent') && rootTooltipModel.get('show')) {
	                var paramsList = zrUtil.map(seriesList, function (series, index) {
	                    return series.getDataParams(payloadBatch[index].dataIndexInside);
	                });

	                if (!contentNotChange) {
	                    // Update html content
	                    var firstDataIndex = payloadBatch[sampleSeriesIndex].dataIndexInside;

	                    // Default tooltip content
	                    // FIXME
	                    // (1) shold be the first data which has name?
	                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.
	                    var firstLine = baseAxis.type === 'time'
	                        ? baseAxis.scale.getLabel(value[baseDimIndex])
	                        : seriesList[sampleSeriesIndex].getData().getName(firstDataIndex);
	                    var defaultHtml = (firstLine ? formatUtil.encodeHTML(firstLine) + '<br />' : '')
	                        + zrUtil.map(seriesList, function (series, index) {
	                            return series.formatTooltip(payloadBatch[index].dataIndexInside, true);
	                        }).join('<br />');

	                    var asyncTicket = 'axis_' + coordSys.name + '_' + firstDataIndex;

	                    this._showTooltipContent(
	                        rootTooltipModel, defaultHtml, paramsList, asyncTicket,
	                        point[0], point[1], positionExpr, null, api
	                    );
	                }
	                else {
	                    updatePosition(
	                        positionExpr || rootTooltipModel.get('position'),
	                        point[0], point[1],
	                        rootTooltipModel.get('confine'),
	                        this._tooltipContent, paramsList, null, api
	                    );
	                }
	            }
	        },

	        /**
	         * Show tooltip on item
	         * @param {module:echarts/model/Series} seriesModel
	         * @param {number} dataIndex
	         * @param {string} dataType
	         * @param {Object} e
	         */
	        _showItemTooltipContent: function (seriesModel, dataIndex, dataType, e) {
	            // FIXME Graph data
	            var api = this._api;
	            var data = seriesModel.getData(dataType);
	            var itemModel = data.getItemModel(dataIndex);

	            var tooltipOpt = itemModel.get('tooltip', true);
	            if (typeof tooltipOpt === 'string') {
	                // In each data item tooltip can be simply write:
	                // {
	                //  value: 10,
	                //  tooltip: 'Something you need to know'
	                // }
	                var tooltipContent = tooltipOpt;
	                tooltipOpt = {
	                    formatter: tooltipContent
	                };
	            }
	            var rootTooltipModel = this._tooltipModel;
	            var seriesTooltipModel = seriesModel.getModel(
	                'tooltip', rootTooltipModel
	            );
	            var tooltipModel = new Model(tooltipOpt, seriesTooltipModel, seriesTooltipModel.ecModel);

	            var params = seriesModel.getDataParams(dataIndex, dataType);
	            var defaultHtml = seriesModel.formatTooltip(dataIndex, false, dataType);

	            var asyncTicket = 'item_' + seriesModel.name + '_' + dataIndex;

	            this._showTooltipContent(
	                tooltipModel, defaultHtml, params, asyncTicket,
	                e.offsetX, e.offsetY, e.position, e.target, api
	            );
	        },

	        _showTooltipContent: function (
	            tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, target, api
	        ) {
	            // Reset ticket
	            this._ticket = '';

	            if (tooltipModel.get('showContent') && tooltipModel.get('show')) {
	                var tooltipContent = this._tooltipContent;
	                var confine = tooltipModel.get('confine');

	                var formatter = tooltipModel.get('formatter');
	                positionExpr = positionExpr || tooltipModel.get('position');
	                var html = defaultHtml;

	                if (formatter) {
	                    if (typeof formatter === 'string') {
	                        html = formatUtil.formatTpl(formatter, params, true);
	                    }
	                    else if (typeof formatter === 'function') {
	                        var self = this;
	                        var ticket = asyncTicket;
	                        var callback = function (cbTicket, html) {
	                            if (cbTicket === self._ticket) {
	                                tooltipContent.setContent(html);

	                                updatePosition(
	                                    positionExpr, x, y, confine,
	                                    tooltipContent, params, target, api
	                                );
	                            }
	                        };
	                        self._ticket = ticket;
	                        html = formatter(params, ticket, callback);
	                    }
	                }

	                tooltipContent.show(tooltipModel);
	                tooltipContent.setContent(html);

	                updatePosition(
	                    positionExpr, x, y, confine,
	                    tooltipContent, params, target, api
	                );
	            }
	        },

	        /**
	         * Show axis pointer
	         * @param {string} [coordSysName]
	         */
	        _showAxisPointer: function (coordSysName) {
	            if (coordSysName) {
	                var axisPointers = this._axisPointers[coordSysName];
	                axisPointers && zrUtil.each(axisPointers, function (el) {
	                    el.show();
	                });
	            }
	            else {
	                this.group.eachChild(function (child) {
	                    child.show();
	                });
	                this.group.show();
	            }
	        },

	        _resetLastHover: function () {
	            var lastHover = this._lastHover;
	            if (lastHover.payloadBatch) {
	                this._api.dispatchAction({
	                    type: 'downplay',
	                    batch: lastHover.payloadBatch
	                });
	            }
	            // Reset lastHover
	            this._lastHover = {};
	        },
	        /**
	         * Hide axis pointer
	         * @param {string} [coordSysName]
	         */
	        _hideAxisPointer: function (coordSysName) {
	            if (coordSysName) {
	                var axisPointers = this._axisPointers[coordSysName];
	                axisPointers && zrUtil.each(axisPointers, function (el) {
	                    el.hide();
	                });
	            }
	            else {
	                if (this.group.children().length) {
	                    this.group.hide();
	                }
	            }
	        },

	        _hide: function () {
	            clearTimeout(this._showTimeout);

	            this._hideAxisPointer();
	            this._resetLastHover();
	            if (!this._alwaysShowContent) {
	                this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
	            }

	            this._api.dispatchAction({
	                type: 'hideTip',
	                from: this.uid
	            });

	            this._lastX = this._lastY = null;
	        },

	        dispose: function (ecModel, api) {
	            if (env.node) {
	                return;
	            }
	            var zr = api.getZr();
	            this._tooltipContent.hide();

	            zr.off('click', this._tryShow);
	            zr.off('mousemove', this._mousemove);
	            zr.off('mouseout', this._hide);
	            zr.off('globalout', this._hide);
	        }
	    });


/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/component/tooltip/TooltipContent
	 */


	    var zrUtil = __webpack_require__(243);
	    var zrColor = __webpack_require__(278);
	    var eventUtil = __webpack_require__(327);
	    var formatUtil = __webpack_require__(245);
	    var each = zrUtil.each;
	    var toCamelCase = formatUtil.toCamelCase;
	    var env = __webpack_require__(241);

	    var vendors = ['', '-webkit-', '-moz-', '-o-'];

	    var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;';

	    /**
	     * @param {number} duration
	     * @return {string}
	     * @inner
	     */
	    function assembleTransition(duration) {
	        var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
	        var transitionText = 'left ' + duration + 's ' + transitionCurve + ','
	                            + 'top ' + duration + 's ' + transitionCurve;
	        return zrUtil.map(vendors, function (vendorPrefix) {
	            return vendorPrefix + 'transition:' + transitionText;
	        }).join(';');
	    }

	    /**
	     * @param {Object} textStyle
	     * @return {string}
	     * @inner
	     */
	    function assembleFont(textStyleModel) {
	        var cssText = [];

	        var fontSize = textStyleModel.get('fontSize');
	        var color = textStyleModel.getTextColor();

	        color && cssText.push('color:' + color);

	        cssText.push('font:' + textStyleModel.getFont());

	        fontSize &&
	            cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');

	        each(['decoration', 'align'], function (name) {
	            var val = textStyleModel.get(name);
	            val && cssText.push('text-' + name + ':' + val);
	        });

	        return cssText.join(';');
	    }

	    /**
	     * @param {Object} tooltipModel
	     * @return {string}
	     * @inner
	     */
	    function assembleCssText(tooltipModel) {

	        tooltipModel = tooltipModel;

	        var cssText = [];

	        var transitionDuration = tooltipModel.get('transitionDuration');
	        var backgroundColor = tooltipModel.get('backgroundColor');
	        var textStyleModel = tooltipModel.getModel('textStyle');
	        var padding = tooltipModel.get('padding');

	        // Animation transition
	        transitionDuration &&
	            cssText.push(assembleTransition(transitionDuration));

	        if (backgroundColor) {
	            if (env.canvasSupported) {
	                cssText.push('background-Color:' + backgroundColor);
	            }
	            else {
	                // for ie
	                cssText.push(
	                    'background-Color:#' + zrColor.toHex(backgroundColor)
	                );
	                cssText.push('filter:alpha(opacity=70)');
	            }
	        }

	        // Border style
	        each(['width', 'color', 'radius'], function (name) {
	            var borderName = 'border-' + name;
	            var camelCase = toCamelCase(borderName);
	            var val = tooltipModel.get(camelCase);
	            val != null &&
	                cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
	        });

	        // Text style
	        cssText.push(assembleFont(textStyleModel));

	        // Padding
	        if (padding != null) {
	            cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
	        }

	        return cssText.join(';') + ';';
	    }

	    /**
	     * @alias module:echarts/component/tooltip/TooltipContent
	     * @constructor
	     */
	    function TooltipContent(container, api) {
	        var el = document.createElement('div');
	        var zr = api.getZr();

	        this.el = el;

	        this._x = api.getWidth() / 2;
	        this._y = api.getHeight() / 2;

	        container.appendChild(el);

	        this._container = container;

	        this._show = false;

	        /**
	         * @private
	         */
	        this._hideTimeout;

	        var self = this;
	        el.onmouseenter = function () {
	            // clear the timeout in hideLater and keep showing tooltip
	            if (self.enterable) {
	                clearTimeout(self._hideTimeout);
	                self._show = true;
	            }
	            self._inContent = true;
	        };
	        el.onmousemove = function (e) {
	            e = e || window.event;
	            if (!self.enterable) {
	                // Try trigger zrender event to avoid mouse
	                // in and out shape too frequently
	                var handler = zr.handler;
	                eventUtil.normalizeEvent(container, e, true);
	                handler.dispatch('mousemove', e);
	            }
	        };
	        el.onmouseleave = function () {
	            if (self.enterable) {
	                if (self._show) {
	                    self.hideLater(self._hideDelay);
	                }
	            }
	            self._inContent = false;
	        };
	    }

	    TooltipContent.prototype = {

	        constructor: TooltipContent,

	        enterable: true,

	        /**
	         * Update when tooltip is rendered
	         */
	        update: function () {
	            var container = this._container;
	            var stl = container.currentStyle
	                || document.defaultView.getComputedStyle(container);
	            var domStyle = container.style;
	            if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
	                domStyle.position = 'relative';
	            }
	            // Hide the tooltip
	            // PENDING
	            // this.hide();
	        },

	        show: function (tooltipModel) {
	            clearTimeout(this._hideTimeout);
	            var el = this.el;

	            el.style.cssText = gCssText + assembleCssText(tooltipModel)
	                // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
	                + ';left:' + this._x + 'px;top:' + this._y + 'px;'
	                + (tooltipModel.get('extraCssText') || '');

	            el.style.display = el.innerHTML ?  'block' : 'none';

	            this._show = true;
	        },

	        setContent: function (content) {
	            var el = this.el;
	            el.innerHTML = content;
	            el.style.display = content ? 'block' : 'none';
	        },

	        moveTo: function (x, y) {
	            var style = this.el.style;
	            style.left = x + 'px';
	            style.top = y + 'px';

	            this._x = x;
	            this._y = y;
	        },

	        hide: function () {
	            this.el.style.display = 'none';
	            this._show = false;
	        },

	        // showLater: function ()

	        hideLater: function (time) {
	            if (this._show && !(this._inContent && this.enterable)) {
	                if (time) {
	                    this._hideDelay = time;
	                    // Set show false to avoid invoke hideLater mutiple times
	                    this._show = false;
	                    this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
	                }
	                else {
	                    this.hide();
	                }
	            }
	        },

	        isShow: function () {
	            return this._show;
	        }
	    };

	    module.exports = TooltipContent;


/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    __webpack_require__(542);
	    __webpack_require__(548);
	    __webpack_require__(550);

	    // Polar view
	    __webpack_require__(240).extendComponentView({
	        type: 'polar'
	    });


/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Axis scale


	    var Polar = __webpack_require__(543);
	    var numberUtil = __webpack_require__(246);
	    var zrUtil = __webpack_require__(243);

	    var axisHelper = __webpack_require__(354);
	    var niceScaleExtent = axisHelper.niceScaleExtent;

	    // 依赖 PolarModel 做预处理
	    __webpack_require__(546);

	    /**
	     * Resize method bound to the polar
	     * @param {module:echarts/coord/polar/PolarModel} polarModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    function resizePolar(polarModel, api) {
	        var center = polarModel.get('center');
	        var radius = polarModel.get('radius');
	        var width = api.getWidth();
	        var height = api.getHeight();
	        var parsePercent = numberUtil.parsePercent;

	        this.cx = parsePercent(center[0], width);
	        this.cy = parsePercent(center[1], height);

	        var radiusAxis = this.getRadiusAxis();
	        var size = Math.min(width, height) / 2;
	        // var idx = radiusAxis.inverse ? 1 : 0;
	        radiusAxis.setExtent(0, parsePercent(radius, size));
	    }

	    /**
	     * Update polar
	     */
	    function updatePolarScale(ecModel, api) {
	        var polar = this;
	        var angleAxis = polar.getAngleAxis();
	        var radiusAxis = polar.getRadiusAxis();
	        // Reset scale
	        angleAxis.scale.setExtent(Infinity, -Infinity);
	        radiusAxis.scale.setExtent(Infinity, -Infinity);

	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.coordinateSystem === polar) {
	                var data = seriesModel.getData();
	                radiusAxis.scale.unionExtentFromData(data, 'radius');
	                angleAxis.scale.unionExtentFromData(data, 'angle');
	            }
	        });

	        niceScaleExtent(angleAxis, angleAxis.model);
	        niceScaleExtent(radiusAxis, radiusAxis.model);

	        // Fix extent of category angle axis
	        if (angleAxis.type === 'category' && !angleAxis.onBand) {
	            var extent = angleAxis.getExtent();
	            var diff = 360 / angleAxis.scale.count();
	            angleAxis.inverse ? (extent[1] += diff) : (extent[1] -= diff);
	            angleAxis.setExtent(extent[0], extent[1]);
	        }
	    }

	    /**
	     * Set common axis properties
	     * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	     * @param {module:echarts/coord/polar/AxisModel}
	     * @inner
	     */
	    function setAxis(axis, axisModel) {
	        axis.type = axisModel.get('type');
	        axis.scale = axisHelper.createScaleByModel(axisModel);
	        axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';

	        // FIXME Radius axis not support inverse axis
	        if (axisModel.mainType === 'angleAxis') {
	            var startAngle = axisModel.get('startAngle');
	            axis.inverse = axisModel.get('inverse') ^ axisModel.get('clockwise');
	            axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));
	        }

	        // Inject axis instance
	        axisModel.axis = axis;
	        axis.model = axisModel;
	    }


	    var polarCreator = {

	        dimensions: Polar.prototype.dimensions,

	        create: function (ecModel, api) {
	            var polarList = [];
	            ecModel.eachComponent('polar', function (polarModel, idx) {
	                var polar = new Polar(idx);
	                // Inject resize and update method
	                polar.resize = resizePolar;
	                polar.update = updatePolarScale;

	                var radiusAxis = polar.getRadiusAxis();
	                var angleAxis = polar.getAngleAxis();

	                var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
	                var angleAxisModel = polarModel.findAxisModel('angleAxis');

	                setAxis(radiusAxis, radiusAxisModel);
	                setAxis(angleAxis, angleAxisModel);

	                polar.resize(polarModel, api);
	                polarList.push(polar);

	                polarModel.coordinateSystem = polar;
	            });
	            // Inject coordinateSystem to series
	            ecModel.eachSeries(function (seriesModel) {
	                if (seriesModel.get('coordinateSystem') === 'polar') {
	                    var polarModel = ecModel.queryComponents({
	                        mainType: 'polar',
	                        index: seriesModel.get('polarIndex'),
	                        id: seriesModel.get('polarId')
	                    })[0];

	                    if (__DEV__) {
	                        if (!polarModel) {
	                            throw new Error(
	                                'Polar "' + zrUtil.retrieve(
	                                    seriesModel.get('polarIndex'),
	                                    seriesModel.get('polarId'),
	                                    0
	                                ) + '" not found'
	                            );
	                        }
	                    }
	                    seriesModel.coordinateSystem = polarModel.coordinateSystem;
	                }
	            });

	            return polarList;
	        }
	    };

	    __webpack_require__(265).register('polar', polarCreator);


/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/coord/polar/Polar
	 */


	    var RadiusAxis = __webpack_require__(544);
	    var AngleAxis = __webpack_require__(545);

	    /**
	     * @alias {module:echarts/coord/polar/Polar}
	     * @constructor
	     * @param {string} name
	     */
	    var Polar = function (name) {

	        /**
	         * @type {string}
	         */
	        this.name = name || '';

	        /**
	         * x of polar center
	         * @type {number}
	         */
	        this.cx = 0;

	        /**
	         * y of polar center
	         * @type {number}
	         */
	        this.cy = 0;

	        /**
	         * @type {module:echarts/coord/polar/RadiusAxis}
	         * @private
	         */
	        this._radiusAxis = new RadiusAxis();

	        /**
	         * @type {module:echarts/coord/polar/AngleAxis}
	         * @private
	         */
	        this._angleAxis = new AngleAxis();
	    };

	    Polar.prototype = {

	        constructor: Polar,

	        type: 'polar',

	        /**
	         * @param {Array.<string>}
	         * @readOnly
	         */
	        dimensions: ['radius', 'angle'],

	        /**
	         * If contain coord
	         * @param {Array.<number>} point
	         * @return {boolean}
	         */
	        containPoint: function (point) {
	            var coord = this.pointToCoord(point);
	            return this._radiusAxis.contain(coord[0])
	                && this._angleAxis.contain(coord[1]);
	        },

	        /**
	         * If contain data
	         * @param {Array.<number>} data
	         * @return {boolean}
	         */
	        containData: function (data) {
	            return this._radiusAxis.containData(data[0])
	                && this._angleAxis.containData(data[1]);
	        },

	        /**
	         * @param {string} axisType
	         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	         */
	        getAxis: function (axisType) {
	            return this['_' + axisType + 'Axis'];
	        },

	        /**
	         * Get axes by type of scale
	         * @param {string} scaleType
	         * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	         */
	        getAxesByScale: function (scaleType) {
	            var axes = [];
	            var angleAxis = this._angleAxis;
	            var radiusAxis = this._radiusAxis;
	            angleAxis.scale.type === scaleType && axes.push(angleAxis);
	            radiusAxis.scale.type === scaleType && axes.push(radiusAxis);

	            return axes;
	        },

	        /**
	         * @return {module:echarts/coord/polar/AngleAxis}
	         */
	        getAngleAxis: function () {
	            return this._angleAxis;
	        },

	        /**
	         * @return {module:echarts/coord/polar/RadiusAxis}
	         */
	        getRadiusAxis: function () {
	            return this._radiusAxis;
	        },

	        /**
	         * @param {module:echarts/coord/polar/Axis}
	         * @return {module:echarts/coord/polar/Axis}
	         */
	        getOtherAxis: function (axis) {
	            var angleAxis = this._angleAxis;
	            return axis === angleAxis ? this._radiusAxis : angleAxis;
	        },

	        /**
	         * Base axis will be used on stacking.
	         *
	         * @return {module:echarts/coord/polar/Axis}
	         */
	        getBaseAxis: function () {
	            return this.getAxesByScale('ordinal')[0]
	                || this.getAxesByScale('time')[0]
	                || this.getAngleAxis();
	        },

	        /**
	         * Convert series data to a list of (x, y) points
	         * @param {module:echarts/data/List} data
	         * @return {Array}
	         *  Return list of coordinates. For example:
	         *  `[[10, 10], [20, 20], [30, 30]]`
	         */
	        dataToPoints: function (data) {
	            return data.mapArray(this.dimensions, function (radius, angle) {
	                return this.dataToPoint([radius, angle]);
	            }, this);
	        },

	        /**
	         * Convert a single data item to (x, y) point.
	         * Parameter data is an array which the first element is radius and the second is angle
	         * @param {Array.<number>} data
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        dataToPoint: function (data, clamp) {
	            return this.coordToPoint([
	                this._radiusAxis.dataToRadius(data[0], clamp),
	                this._angleAxis.dataToAngle(data[1], clamp)
	            ]);
	        },

	        /**
	         * Convert a (x, y) point to data
	         * @param {Array.<number>} point
	         * @param {boolean} [clamp=false]
	         * @return {Array.<number>}
	         */
	        pointToData: function (point, clamp) {
	            var coord = this.pointToCoord(point);
	            return [
	                this._radiusAxis.radiusToData(coord[0], clamp),
	                this._angleAxis.angleToData(coord[1], clamp)
	            ];
	        },

	        /**
	         * Convert a (x, y) point to (radius, angle) coord
	         * @param {Array.<number>} point
	         * @return {Array.<number>}
	         */
	        pointToCoord: function (point) {
	            var dx = point[0] - this.cx;
	            var dy = point[1] - this.cy;
	            var angleAxis = this.getAngleAxis();
	            var extent = angleAxis.getExtent();
	            var minAngle = Math.min(extent[0], extent[1]);
	            var maxAngle = Math.max(extent[0], extent[1]);
	            // Fix fixed extent in polarCreator
	            // FIXME
	            angleAxis.inverse
	                ? (minAngle = maxAngle - 360)
	                : (maxAngle = minAngle + 360);

	            var radius = Math.sqrt(dx * dx + dy * dy);
	            dx /= radius;
	            dy /= radius;

	            var radian = Math.atan2(-dy, dx) / Math.PI * 180;

	            // move to angleExtent
	            var dir = radian < minAngle ? 1 : -1;
	            while (radian < minAngle || radian > maxAngle) {
	                radian += dir * 360;
	            }

	            return [radius, radian];
	        },

	        /**
	         * Convert a (radius, angle) coord to (x, y) point
	         * @param {Array.<number>} coord
	         * @return {Array.<number>}
	         */
	        coordToPoint: function (coord) {
	            var radius = coord[0];
	            var radian = coord[1] / 180 * Math.PI;
	            var x = Math.cos(radian) * radius + this.cx;
	            // Inverse the y
	            var y = -Math.sin(radian) * radius + this.cy;

	            return [x, y];
	        }
	    };

	    module.exports = Polar;


/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var Axis = __webpack_require__(363);

	    function RadiusAxis(scale, radiusExtent) {

	        Axis.call(this, 'radius', scale, radiusExtent);

	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = 'category';
	    }

	    RadiusAxis.prototype = {

	        constructor: RadiusAxis,

	        dataToRadius: Axis.prototype.dataToCoord,

	        radiusToData: Axis.prototype.coordToData
	    };

	    zrUtil.inherits(RadiusAxis, Axis);

	    module.exports = RadiusAxis;


/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var Axis = __webpack_require__(363);

	    function AngleAxis(scale, angleExtent) {

	        angleExtent = angleExtent || [0, 360];

	        Axis.call(this, 'angle', scale, angleExtent);

	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = 'category';
	    }

	    AngleAxis.prototype = {

	        constructor: AngleAxis,

	        dataToAngle: Axis.prototype.dataToCoord,

	        angleToData: Axis.prototype.coordToData
	    };

	    zrUtil.inherits(AngleAxis, Axis);

	    module.exports = AngleAxis;


/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    __webpack_require__(547);

	    __webpack_require__(240).extendComponentModel({

	        type: 'polar',

	        dependencies: ['polarAxis', 'angleAxis'],

	        /**
	         * @type {module:echarts/coord/polar/Polar}
	         */
	        coordinateSystem: null,

	        /**
	         * @param {string} axisType
	         * @return {module:echarts/coord/polar/AxisModel}
	         */
	        findAxisModel: function (axisType) {
	            var foundAxisModel;
	            var ecModel = this.ecModel;

	            ecModel.eachComponent(axisType, function (axisModel) {
	                if (axisModel.getCoordSysModel() === this) {
	                    foundAxisModel = axisModel;
	                }
	            }, this);
	            return foundAxisModel;
	        },

	        defaultOption: {

	            zlevel: 0,

	            z: 0,

	            center: ['50%', '50%'],

	            radius: '80%'
	        }
	    });


/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var ComponentModel = __webpack_require__(258);
	    var axisModelCreator = __webpack_require__(367);

	    var PolarAxisModel = ComponentModel.extend({

	        type: 'polarAxis',

	        /**
	         * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	         */
	        axis: null,

	        /**
	         * @override
	         */
	        getCoordSysModel: function () {
	            return this.ecModel.queryComponents({
	                mainType: 'polar',
	                index: this.option.polarIndex,
	                id: this.option.polarId
	            })[0];
	        }

	    });

	    zrUtil.merge(PolarAxisModel.prototype, __webpack_require__(369));

	    var polarAxisDefaultExtendedOption = {
	        angle: {
	            // polarIndex: 0,
	            // polarId: '',

	            startAngle: 90,

	            clockwise: true,

	            splitNumber: 12,

	            axisLabel: {
	                rotate: false
	            }
	        },
	        radius: {
	            // polarIndex: 0,
	            // polarId: '',

	            splitNumber: 5
	        }
	    };

	    function getAxisType(axisDim, option) {
	        // Default axis with data is category axis
	        return option.type || (option.data ? 'category' : 'value');
	    }

	    axisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);
	    axisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);



/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    __webpack_require__(542);

	    __webpack_require__(549);


/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var Model = __webpack_require__(251);

	    var elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];

	    function getAxisLineShape(polar, r0, r, angle) {
	        var start = polar.coordToPoint([r0, angle]);
	        var end = polar.coordToPoint([r, angle]);

	        return {
	            x1: start[0],
	            y1: start[1],
	            x2: end[0],
	            y2: end[1]
	        };
	    }
	    __webpack_require__(240).extendComponentView({

	        type: 'angleAxis',

	        render: function (angleAxisModel, ecModel) {
	            this.group.removeAll();
	            if (!angleAxisModel.get('show')) {
	                return;
	            }

	            var polarModel = ecModel.getComponent('polar', angleAxisModel.get('polarIndex'));
	            var angleAxis = angleAxisModel.axis;
	            var polar = polarModel.coordinateSystem;
	            var radiusExtent = polar.getRadiusAxis().getExtent();
	            var ticksAngles = angleAxis.getTicksCoords();

	            if (angleAxis.type !== 'category') {
	                // Remove the last tick which will overlap the first tick
	                ticksAngles.pop();
	            }

	            zrUtil.each(elementList, function (name) {
	                if (angleAxisModel.get(name +'.show')
	                    && (!angleAxis.isBlank() || name === 'axisLine')
	                ) {
	                    this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);
	                }
	            }, this);
	        },

	        /**
	         * @private
	         */
	        _axisLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	            var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');

	            var circle = new graphic.Circle({
	                shape: {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r: radiusExtent[1]
	                },
	                style: lineStyleModel.getLineStyle(),
	                z2: 1,
	                silent: true
	            });
	            circle.style.fill = null;

	            this.group.add(circle);
	        },

	        /**
	         * @private
	         */
	        _axisTick: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	            var tickModel = angleAxisModel.getModel('axisTick');

	            var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');

	            var lines = zrUtil.map(ticksAngles, function (tickAngle) {
	                return new graphic.Line({
	                    shape: getAxisLineShape(polar, radiusExtent[1], radiusExtent[1] + tickLen, tickAngle)
	                });
	            });
	            this.group.add(graphic.mergePath(
	                lines, {
	                    style: zrUtil.defaults(
	                        tickModel.getModel('lineStyle').getLineStyle(),
	                        {
	                            stroke: angleAxisModel.get('axisLine.lineStyle.color')
	                        }
	                    )
	                }
	            ));
	        },

	        /**
	         * @private
	         */
	        _axisLabel: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	            var axis = angleAxisModel.axis;

	            var categoryData = angleAxisModel.get('data');

	            var labelModel = angleAxisModel.getModel('axisLabel');
	            var axisTextStyleModel = labelModel.getModel('textStyle');

	            var labels = angleAxisModel.getFormattedLabels();

	            var labelMargin = labelModel.get('margin');
	            var labelsAngles = axis.getLabelsCoords();

	            // Use length of ticksAngles because it may remove the last tick to avoid overlapping
	            for (var i = 0; i < ticksAngles.length; i++) {
	                var r = radiusExtent[1];
	                var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);
	                var cx = polar.cx;
	                var cy = polar.cy;

	                var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3
	                    ? 'center' : (p[0] > cx ? 'left' : 'right');
	                var labelTextBaseline = Math.abs(p[1] - cy) / r < 0.3
	                    ? 'middle' : (p[1] > cy ? 'top' : 'bottom');

	                var textStyleModel = axisTextStyleModel;
	                if (categoryData && categoryData[i] && categoryData[i].textStyle) {
	                    textStyleModel = new Model(
	                        categoryData[i].textStyle, axisTextStyleModel
	                    );
	                }
	                this.group.add(new graphic.Text({
	                    style: {
	                        x: p[0],
	                        y: p[1],
	                        fill: textStyleModel.getTextColor() || angleAxisModel.get('axisLine.lineStyle.color'),
	                        text: labels[i],
	                        textAlign: labelTextAlign,
	                        textVerticalAlign: labelTextBaseline,
	                        textFont: textStyleModel.getFont()
	                    },
	                    silent: true
	                }));
	            }
	        },

	        /**
	         * @private
	         */
	        _splitLine: function (angleAxisModel, polar, ticksAngles, radiusExtent) {
	            var splitLineModel = angleAxisModel.getModel('splitLine');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineColors = lineStyleModel.get('color');
	            var lineCount = 0;

	            lineColors = lineColors instanceof Array ? lineColors : [lineColors];

	            var splitLines = [];

	            for (var i = 0; i < ticksAngles.length; i++) {
	                var colorIndex = (lineCount++) % lineColors.length;
	                splitLines[colorIndex] = splitLines[colorIndex] || [];
	                splitLines[colorIndex].push(new graphic.Line({
	                    shape: getAxisLineShape(polar, radiusExtent[0], radiusExtent[1], ticksAngles[i])
	                }));
	            }

	            // Simple optimization
	            // Batching the lines if color are the same
	            for (var i = 0; i < splitLines.length; i++) {
	                this.group.add(graphic.mergePath(splitLines[i], {
	                    style: zrUtil.defaults({
	                        stroke: lineColors[i % lineColors.length]
	                    }, lineStyleModel.getLineStyle()),
	                    silent: true,
	                    z: angleAxisModel.get('z')
	                }));
	            }
	        },

	        /**
	         * @private
	         */
	        _splitArea: function (angleAxisModel, polar, ticksAngles, radiusExtent) {

	            var splitAreaModel = angleAxisModel.getModel('splitArea');
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');
	            var areaColors = areaStyleModel.get('color');
	            var lineCount = 0;

	            areaColors = areaColors instanceof Array ? areaColors : [areaColors];

	            var splitAreas = [];

	            var RADIAN = Math.PI / 180;
	            var prevAngle = -ticksAngles[0] * RADIAN;
	            var r0 = Math.min(radiusExtent[0], radiusExtent[1]);
	            var r1 = Math.max(radiusExtent[0], radiusExtent[1]);

	            var clockwise = angleAxisModel.get('clockwise');

	            for (var i = 1; i < ticksAngles.length; i++) {
	                var colorIndex = (lineCount++) % areaColors.length;
	                splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	                splitAreas[colorIndex].push(new graphic.Sector({
	                    shape: {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r0: r0,
	                        r: r1,
	                        startAngle: prevAngle,
	                        endAngle: -ticksAngles[i] * RADIAN,
	                        clockwise: clockwise
	                    },
	                    silent: true
	                }));
	                prevAngle = -ticksAngles[i] * RADIAN;
	            }

	            // Simple optimization
	            // Batching the lines if color are the same
	            for (var i = 0; i < splitAreas.length; i++) {
	                this.group.add(graphic.mergePath(splitAreas[i], {
	                    style: zrUtil.defaults({
	                        fill: areaColors[i % areaColors.length]
	                    }, areaStyleModel.getAreaStyle()),
	                    silent: true
	                }));
	            }
	        }
	    });


/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(542);

	    __webpack_require__(551);


/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var AxisBuilder = __webpack_require__(372);

	    var axisBuilderAttrs = [
	        'axisLine', 'axisLabel', 'axisTick', 'axisName'
	    ];
	    var selfBuilderAttrs = [
	        'splitLine', 'splitArea'
	    ];

	    __webpack_require__(240).extendComponentView({

	        type: 'radiusAxis',

	        render: function (radiusAxisModel, ecModel) {
	            this.group.removeAll();
	            if (!radiusAxisModel.get('show')) {
	                return;
	            }
	            var polarModel = ecModel.getComponent('polar', radiusAxisModel.get('polarIndex'));
	            var angleAxis = polarModel.coordinateSystem.getAngleAxis();
	            var radiusAxis = radiusAxisModel.axis;
	            var polar = polarModel.coordinateSystem;
	            var ticksCoords = radiusAxis.getTicksCoords();
	            var axisAngle = angleAxis.getExtent()[0];
	            var radiusExtent = radiusAxis.getExtent();

	            var layout = layoutAxis(polar, radiusAxisModel, axisAngle);
	            var axisBuilder = new AxisBuilder(radiusAxisModel, layout);
	            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	            this.group.add(axisBuilder.getGroup());

	            zrUtil.each(selfBuilderAttrs, function (name) {
	                if (radiusAxisModel.get(name +'.show') && !radiusAxis.isBlank()) {
	                    this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);
	                }
	            }, this);
	        },

	        /**
	         * @private
	         */
	        _splitLine: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {
	            var splitLineModel = radiusAxisModel.getModel('splitLine');
	            var lineStyleModel = splitLineModel.getModel('lineStyle');
	            var lineColors = lineStyleModel.get('color');
	            var lineCount = 0;

	            lineColors = lineColors instanceof Array ? lineColors : [lineColors];

	            var splitLines = [];

	            for (var i = 0; i < ticksCoords.length; i++) {
	                var colorIndex = (lineCount++) % lineColors.length;
	                splitLines[colorIndex] = splitLines[colorIndex] || [];
	                splitLines[colorIndex].push(new graphic.Circle({
	                    shape: {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r: ticksCoords[i]
	                    },
	                    silent: true
	                }));
	            }

	            // Simple optimization
	            // Batching the lines if color are the same
	            for (var i = 0; i < splitLines.length; i++) {
	                this.group.add(graphic.mergePath(splitLines[i], {
	                    style: zrUtil.defaults({
	                        stroke: lineColors[i % lineColors.length],
	                        fill: null
	                    }, lineStyleModel.getLineStyle()),
	                    silent: true
	                }));
	            }
	        },

	        /**
	         * @private
	         */
	        _splitArea: function (radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {

	            var splitAreaModel = radiusAxisModel.getModel('splitArea');
	            var areaStyleModel = splitAreaModel.getModel('areaStyle');
	            var areaColors = areaStyleModel.get('color');
	            var lineCount = 0;

	            areaColors = areaColors instanceof Array ? areaColors : [areaColors];

	            var splitAreas = [];

	            var prevRadius = ticksCoords[0];
	            for (var i = 1; i < ticksCoords.length; i++) {
	                var colorIndex = (lineCount++) % areaColors.length;
	                splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	                splitAreas[colorIndex].push(new graphic.Sector({
	                    shape: {
	                        cx: polar.cx,
	                        cy: polar.cy,
	                        r0: prevRadius,
	                        r: ticksCoords[i],
	                        startAngle: 0,
	                        endAngle: Math.PI * 2
	                    },
	                    silent: true
	                }));
	                prevRadius = ticksCoords[i];
	            }

	            // Simple optimization
	            // Batching the lines if color are the same
	            for (var i = 0; i < splitAreas.length; i++) {
	                this.group.add(graphic.mergePath(splitAreas[i], {
	                    style: zrUtil.defaults({
	                        fill: areaColors[i % areaColors.length]
	                    }, areaStyleModel.getAreaStyle()),
	                    silent: true
	                }));
	            }
	        }
	    });

	    /**
	     * @inner
	     */
	    function layoutAxis(polar, radiusAxisModel, axisAngle) {
	        return {
	            position: [polar.cx, polar.cy],
	            rotation: axisAngle / 180 * Math.PI,
	            labelDirection: -1,
	            tickDirection: -1,
	            nameDirection: 1,
	            labelRotation: radiusAxisModel.getModel('axisLabel').get('rotate'),
	            // Over splitLine and splitArea
	            z2: 1
	        };
	    }


/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(553);

	    __webpack_require__(405);

	    __webpack_require__(554);

	    __webpack_require__(418);

	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);

	    function makeAction(method, actionInfo) {
	        actionInfo.update = 'updateView';
	        echarts.registerAction(actionInfo, function (payload, ecModel) {
	            var selected = {};

	            ecModel.eachComponent(
	                { mainType: 'geo', query: payload},
	                function (geoModel) {
	                    geoModel[method](payload.name);
	                    var geo = geoModel.coordinateSystem;
	                    zrUtil.each(geo.regions, function (region) {
	                        selected[region.name] = geoModel.isSelected(region.name) || false;
	                    });
	                }
	            );

	            return {
	                selected: selected,
	                name: payload.name
	            }
	        });
	    }

	    makeAction('toggleSelected', {
	        type: 'geoToggleSelect',
	        event: 'geoselectchanged'
	    });
	    makeAction('select', {
	        type: 'geoSelect',
	        event: 'geoselected'
	    });
	    makeAction('unSelect', {
	        type: 'geoUnSelect',
	        event: 'geounselected'
	    });


/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	    var modelUtil = __webpack_require__(244);
	    var ComponentModel = __webpack_require__(258);
	    var Model = __webpack_require__(251);
	    var zrUtil = __webpack_require__(243);

	    var selectableMixin = __webpack_require__(382);

	    var geoCreator = __webpack_require__(405);

	    var GeoModel = ComponentModel.extend({

	        type: 'geo',

	        /**
	         * @type {module:echarts/coord/geo/Geo}
	         */
	        coordinateSystem: null,

	        layoutMode: 'box',

	        init: function (option) {
	            ComponentModel.prototype.init.apply(this, arguments);

	            // Default label emphasis `position` and `show`
	            modelUtil.defaultEmphasis(
	                option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']
	            );
	        },

	        optionUpdated: function () {
	            var option = this.option;
	            var self = this;

	            option.regions = geoCreator.getFilledRegions(option.regions, option.map);

	            this._optionModelMap = zrUtil.reduce(option.regions || [], function (obj, regionOpt) {
	                if (regionOpt.name) {
	                    obj[regionOpt.name] = new Model(regionOpt, self);
	                }
	                return obj;
	            }, {});

	            this.updateSelectedMap(option.regions);
	        },

	        defaultOption: {

	            zlevel: 0,

	            z: 0,

	            show: true,

	            left: 'center',

	            top: 'center',


	            // width:,
	            // height:,
	            // right
	            // bottom

	            // Aspect is width / height. Inited to be geoJson bbox aspect
	            // This parameter is used for scale this aspect
	            aspectScale: 0.75,

	            ///// Layout with center and size
	            // If you wan't to put map in a fixed size box with right aspect ratio
	            // This two properties may more conveninet
	            // layoutCenter: [50%, 50%]
	            // layoutSize: 100


	            silent: false,

	            // Map type
	            map: '',

	            // Default on center of map
	            center: null,

	            zoom: 1,

	            scaleLimit: null,

	            // selectedMode: false

	            label: {
	                normal: {
	                    show: false,
	                    textStyle: {
	                        color: '#000'
	                    }
	                },
	                emphasis: {
	                    show: true,
	                    textStyle: {
	                        color: 'rgb(100,0,0)'
	                    }
	                }
	            },

	            itemStyle: {
	                normal: {
	                    // color: 各异,
	                    borderWidth: 0.5,
	                    borderColor: '#444',
	                    color: '#eee'
	                },
	                emphasis: {                 // 也是选中样式
	                    color: 'rgba(255,215,0,0.8)'
	                }
	            },

	            regions: []
	        },

	        /**
	         * Get model of region
	         * @param  {string} name
	         * @return {module:echarts/model/Model}
	         */
	        getRegionModel: function (name) {
	            return this._optionModelMap[name];
	        },

	        /**
	         * Format label
	         * @param {string} name Region name
	         * @param {string} [status='normal'] 'normal' or 'emphasis'
	         * @return {string}
	         */
	        getFormattedLabel: function (name, status) {
	            var formatter = this.get('label.' + status + '.formatter');
	            var params = {
	                name: name
	            };
	            if (typeof formatter === 'function') {
	                params.status = status;
	                return formatter(params);
	            }
	            else if (typeof formatter === 'string') {
	                var serName = params.seriesName;
	                return formatter.replace('{a}', serName != null ? serName : '');
	            }
	        },

	        setZoom: function (zoom) {
	            this.option.zoom = zoom;
	        },

	        setCenter: function (center) {
	            this.option.center = center;
	        }
	    });

	    zrUtil.mixin(GeoModel, selectableMixin);

	    module.exports = GeoModel;


/***/ },
/* 554 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var MapDraw = __webpack_require__(415);

	    module.exports = __webpack_require__(240).extendComponentView({

	        type: 'geo',

	        init: function (ecModel, api) {
	            var mapDraw = new MapDraw(api, true);
	            this._mapDraw = mapDraw;

	            this.group.add(mapDraw.group);
	        },

	        render: function (geoModel, ecModel, api, payload) {
	            // Not render if it is an toggleSelect action from self
	            if (payload && payload.type === 'geoToggleSelect'
	                && payload.from === this.uid
	            ) {
	                return;
	            }

	            var mapDraw = this._mapDraw;
	            if (geoModel.get('show')) {
	                mapDraw.draw(geoModel, ecModel, api, this, payload);
	            }
	            else {
	                this._mapDraw.group.removeAll();
	            }

	            this.group.silent = geoModel.get('silent');
	        },

	        dispose: function () {
	            this._mapDraw && this._mapDraw.remove();
	        }

	    });


/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Brush component entry
	 */


	    __webpack_require__(240).registerPreprocessor(
	        __webpack_require__(556)
	    );

	    __webpack_require__(557);
	    __webpack_require__(561);
	    __webpack_require__(562);
	    __webpack_require__(563);

	    __webpack_require__(564);



/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file brush preprocessor
	 */


	    var zrUtil = __webpack_require__(243);

	    var DEFAULT_TOOLBOX_BTNS = ['rect', 'polygon', 'keep', 'clear'];

	    module.exports = function (option, isNew) {
	        var brushComponents = option && option.brush;
	        if (!zrUtil.isArray(brushComponents)) {
	            brushComponents = brushComponents ? [brushComponents] : [];
	        }

	        if (!brushComponents.length) {
	            return;
	        }

	        var brushComponentSpecifiedBtns = [];

	        zrUtil.each(brushComponents, function (brushOpt) {
	            var tbs = brushOpt.hasOwnProperty('toolbox')
	                ? brushOpt.toolbox : [];

	            if (tbs instanceof Array) {
	                brushComponentSpecifiedBtns = brushComponentSpecifiedBtns.concat(tbs);
	            }
	        });

	        var toolbox = option && option.toolbox;

	        if (zrUtil.isArray(toolbox)) {
	            toolbox = toolbox[0];
	        }
	        if (!toolbox) {
	            toolbox = {feature: {}};
	            option.toolbox = [toolbox];
	        }

	        var toolboxFeature = (toolbox.feature || (toolbox.feature = {}));
	        var toolboxBrush = toolboxFeature.brush || (toolboxFeature.brush = {});
	        var brushTypes = toolboxBrush.type || (toolboxBrush.type = []);

	        brushTypes.push.apply(brushTypes, brushComponentSpecifiedBtns);

	        removeDuplicate(brushTypes);

	        if (isNew && !brushTypes.length) {
	            brushTypes.push.apply(brushTypes, DEFAULT_TOOLBOX_BTNS);
	        }
	    };

	    function removeDuplicate(arr) {
	        var map = {};
	        zrUtil.each(arr, function (val) {
	            map[val] = 1;
	        });
	        arr.length = 0;
	        zrUtil.each(map, function (flag, val) {
	            arr.push(val);
	        });
	    }



/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Brush visual coding.
	 */


	    var echarts = __webpack_require__(240);
	    var visualSolution = __webpack_require__(558);
	    var zrUtil = __webpack_require__(243);
	    var BoundingRect = __webpack_require__(248);
	    var selector = __webpack_require__(559);
	    var throttle = __webpack_require__(320);
	    var brushHelper = __webpack_require__(560);

	    var STATE_LIST = ['inBrush', 'outOfBrush'];
	    var DISPATCH_METHOD = '__ecBrushSelect';
	    var DISPATCH_FLAG = '__ecInBrushSelectEvent';
	    var PRIORITY_BRUSH = echarts.PRIORITY.VISUAL.BRUSH;

	    /**
	     * Layout for visual, the priority higher than other layout, and before brush visual.
	     */
	    echarts.registerLayout(PRIORITY_BRUSH, function (ecModel, api, payload) {
	        ecModel.eachComponent({mainType: 'brush'}, function (brushModel) {

	            payload && payload.type === 'takeGlobalCursor' && brushModel.setBrushOption(
	                payload.key === 'brush' ? payload.brushOption : {brushType: false}
	            );

	            brushModel.coordInfoList = brushHelper.makeCoordInfoList(brushModel.option, ecModel);

	            brushHelper.parseInputRanges(brushModel, ecModel);
	        });
	    });

	    /**
	     * Register the visual encoding if this modules required.
	     */
	    echarts.registerVisual(PRIORITY_BRUSH, function (ecModel, api, payload) {

	        var brushSelected = [];
	        var throttleType;
	        var throttleDelay;

	        ecModel.eachComponent({mainType: 'brush'}, function (brushModel, brushIndex) {

	            var thisBrushSelected = {
	                brushId: brushModel.id,
	                brushIndex: brushIndex,
	                brushName: brushModel.name,
	                areas: zrUtil.clone(brushModel.areas),
	                selected: []
	            };
	            // Every brush component exists in event params, convenient
	            // for user to find by index.
	            brushSelected.push(thisBrushSelected);

	            var brushOption = brushModel.option;
	            var brushLink = brushOption.brushLink;
	            var linkedSeriesMap = [];
	            var selectedDataIndexForLink = [];
	            var rangeInfoBySeries = [];
	            var hasBrushExists = 0;

	            if (!brushIndex) { // Only the first throttle setting works.
	                throttleType = brushOption.throttleType;
	                throttleDelay = brushOption.throttleDelay;
	            }

	            // Add boundingRect and selectors to range.
	            var areas = zrUtil.map(brushModel.areas, function (area) {
	                return bindSelector(
	                    zrUtil.defaults(
	                        {boundingRect: boundingRectBuilders[area.brushType](area)},
	                        area
	                    )
	                );
	            });

	            var visualMappings = visualSolution.createVisualMappings(
	                brushModel.option, STATE_LIST, function (mappingOption) {
	                    mappingOption.mappingMethod = 'fixed';
	                }
	            );

	            zrUtil.isArray(brushLink) && zrUtil.each(brushLink, function (seriesIndex) {
	                linkedSeriesMap[seriesIndex] = 1;
	            });

	            function linkOthers(seriesIndex) {
	                return brushLink === 'all' || linkedSeriesMap[seriesIndex];
	            }

	            // If no supported brush or no brush on the series,
	            // all visuals should be in original state.
	            function brushed(rangeInfoList) {
	                return !!rangeInfoList.length;
	            }

	            /**
	             * Logic for each series: (If the logic has to be modified one day, do it carefully!)
	             *
	             * ( brushed ┬ && ┬hasBrushExist ┬ && linkOthers  ) => StepA: ┬record, ┬ StepB: ┬visualByRecord.
	             *   !brushed┘    ├hasBrushExist ┤                            └nothing,┘        ├visualByRecord.
	             *                └!hasBrushExist┘                                              └nothing.
	             * ( !brushed  && ┬hasBrushExist ┬ && linkOthers  ) => StepA:  nothing,  StepB: ┬visualByRecord.
	             *                └!hasBrushExist┘                                              └nothing.
	             * ( brushed ┬ &&                     !linkOthers ) => StepA:  nothing,  StepB: ┬visualByCheck.
	             *   !brushed┘                                                                  └nothing.
	             * ( !brushed  &&                     !linkOthers ) => StepA:  nothing,  StepB:  nothing.
	             */

	            // Step A
	            ecModel.eachSeries(function (seriesModel, seriesIndex) {
	                var rangeInfoList = rangeInfoBySeries[seriesIndex] = [];

	                seriesModel.subType === 'parallel'
	                    ? stepAParallel(seriesModel, seriesIndex, rangeInfoList)
	                    : stepAOthers(seriesModel, seriesIndex, rangeInfoList);
	            });

	            function stepAParallel(seriesModel, seriesIndex) {
	                var coordSys = seriesModel.coordinateSystem;
	                hasBrushExists |= coordSys.hasAxisbrushed();

	                linkOthers(seriesIndex) && coordSys.eachActiveState(
	                    seriesModel.getData(),
	                    function (activeState, dataIndex) {
	                        activeState === 'active' && (selectedDataIndexForLink[dataIndex] = 1);
	                    }
	                );
	            }

	            function stepAOthers(seriesModel, seriesIndex, rangeInfoList) {
	                var selectorsByBrushType = getSelectorsByBrushType(seriesModel);
	                if (!selectorsByBrushType || brushModelNotControll(brushModel, seriesIndex)) {
	                    return;
	                }

	                zrUtil.each(areas, function (area) {
	                    selectorsByBrushType[area.brushType]
	                        && brushHelper.controlSeries(area, brushModel, seriesModel)
	                        && rangeInfoList.push(area);
	                    hasBrushExists |= brushed(rangeInfoList);
	                });

	                if (linkOthers(seriesIndex) && brushed(rangeInfoList)) {
	                    var data = seriesModel.getData();
	                    data.each(function (dataIndex) {
	                        if (checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)) {
	                            selectedDataIndexForLink[dataIndex] = 1;
	                        }
	                    });
	                }
	            }

	            // Step B
	            ecModel.eachSeries(function (seriesModel, seriesIndex) {
	                var seriesBrushSelected = {
	                    seriesId: seriesModel.id,
	                    seriesIndex: seriesIndex,
	                    seriesName: seriesModel.name,
	                    dataIndex: []
	                };
	                // Every series exists in event params, convenient
	                // for user to find series by seriesIndex.
	                thisBrushSelected.selected.push(seriesBrushSelected);

	                var selectorsByBrushType = getSelectorsByBrushType(seriesModel);
	                var rangeInfoList = rangeInfoBySeries[seriesIndex];

	                var data = seriesModel.getData();
	                var getValueState = linkOthers(seriesIndex)
	                    ? function (dataIndex) {
	                        return selectedDataIndexForLink[dataIndex]
	                            ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush')
	                            : 'outOfBrush';
	                    }
	                    : function (dataIndex) {
	                        return checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex)
	                            ? (seriesBrushSelected.dataIndex.push(data.getRawIndex(dataIndex)), 'inBrush')
	                            : 'outOfBrush';
	                    };

	                // If no supported brush or no brush, all visuals are in original state.
	                (linkOthers(seriesIndex) ? hasBrushExists : brushed(rangeInfoList))
	                    && visualSolution.applyVisual(
	                        STATE_LIST, visualMappings, data, getValueState
	                    );
	            });

	        });

	        dispatchAction(api, throttleType, throttleDelay, brushSelected, payload);
	    });

	    function dispatchAction(api, throttleType, throttleDelay, brushSelected, payload) {
	        // This event will not be triggered when `setOpion`, otherwise dead lock may
	        // triggered when do `setOption` in event listener, which we do not find
	        // satisfactory way to solve yet. Some considered resolutions:
	        // (a) Diff with prevoius selected data ant only trigger event when changed.
	        // But store previous data and diff precisely (i.e., not only by dataIndex, but
	        // also detect value changes in selected data) might bring complexity or fragility.
	        // (b) Use spectial param like `silent` to suppress event triggering.
	        // But such kind of volatile param may be weird in `setOption`.
	        if (!payload) {
	            return;
	        }

	        var zr = api.getZr();
	        if (zr[DISPATCH_FLAG]) {
	            return;
	        }

	        if (!zr[DISPATCH_METHOD]) {
	            zr[DISPATCH_METHOD] = doDispatch;
	        }

	        var fn = throttle.createOrUpdate(zr, DISPATCH_METHOD, throttleDelay, throttleType);

	        fn(api, brushSelected);
	    }

	    function doDispatch(api, brushSelected) {
	        if (!api.isDisposed()) {
	            var zr = api.getZr();
	            zr[DISPATCH_FLAG] = true;
	            api.dispatchAction({
	                type: 'brushSelect',
	                batch: brushSelected
	            });
	            zr[DISPATCH_FLAG] = false;
	        }
	    }

	    function checkInRange(selectorsByBrushType, rangeInfoList, data, dataIndex) {
	        var itemLayout = data.getItemLayout(dataIndex);
	        for (var i = 0, len = rangeInfoList.length; i < len; i++) {
	            var area = rangeInfoList[i];
	            if (selectorsByBrushType[area.brushType](
	                itemLayout, area.selectors, area
	            )) {
	                return true;
	            }
	        }
	    }

	    function getSelectorsByBrushType(seriesModel) {
	        var brushSelector = seriesModel.brushSelector;
	        if (zrUtil.isString(brushSelector)) {
	            var sels = [];
	            zrUtil.each(selector, function (selectorsByElementType, brushType) {
	                sels[brushType] = selectorsByElementType[brushSelector];
	            });
	            return sels;
	        }
	        else if (zrUtil.isFunction(brushSelector)) {
	            var bSelector = {};
	            zrUtil.each(selector, function (sel, brushType) {
	                bSelector[brushType] = brushSelector;
	            });
	            return bSelector;
	        }
	        return brushSelector;
	    }

	    function brushModelNotControll(brushModel, seriesIndex) {
	        var seriesIndices = brushModel.option.seriesIndex;
	        return seriesIndices != null
	            && seriesIndices !== 'all'
	            && (
	                zrUtil.isArray(seriesIndices)
	                ? zrUtil.indexOf(seriesIndices, seriesIndex) < 0
	                : seriesIndex !== seriesIndices
	            );
	    }

	    function bindSelector(area) {
	        var selectors = area.selectors = {};
	        zrUtil.each(selector[area.brushType], function (selFn, elType) {
	            // Do not use function binding or curry for performance.
	            selectors[elType] = function (itemLayout) {
	                return selFn(itemLayout, selectors, area);
	            };
	        });
	        return area;
	    }

	    var boundingRectBuilders = {

	        lineX: zrUtil.noop,

	        lineY: zrUtil.noop,

	        rect: function (area) {
	            return getBoundingRectFromMinMax(area.range);
	        },

	        polygon: function (area) {
	            var minMax;
	            var range = area.range;

	            for (var i = 0, len = range.length; i < len; i++) {
	                minMax = minMax || [[Infinity, -Infinity], [Infinity, -Infinity]];
	                var rg = range[i];
	                rg[0] < minMax[0][0] && (minMax[0][0] = rg[0]);
	                rg[0] > minMax[0][1] && (minMax[0][1] = rg[0]);
	                rg[1] < minMax[1][0] && (minMax[1][0] = rg[1]);
	                rg[1] > minMax[1][1] && (minMax[1][1] = rg[1]);
	            }

	            return minMax && getBoundingRectFromMinMax(minMax);
	        }
	    };

	    function getBoundingRectFromMinMax(minMax) {
	        return new BoundingRect(
	            minMax[0][0],
	            minMax[1][0],
	            minMax[0][1] - minMax[0][0],
	            minMax[1][1] - minMax[1][0]
	        );
	    }



/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Visual solution, for consistent option specification.
	 */


	    var zrUtil = __webpack_require__(243);
	    var VisualMapping = __webpack_require__(434);
	    var each = zrUtil.each;

	    function hasKeys(obj) {
	        if (obj) {
	            for (var name in obj){
	                if (obj.hasOwnProperty(name)) {
	                    return true;
	                }
	            }
	        }
	    }

	    var visualSolution = {

	        /**
	         * @param {Object} option
	         * @param {Array.<string>} stateList
	         * @param {Function} [supplementVisualOption]
	         * @return {Object} visualMappings <state, <visualType, module:echarts/visual/VisualMapping>>
	         */
	        createVisualMappings: function (option, stateList, supplementVisualOption) {
	            var visualMappings = {};

	            each(stateList, function (state) {
	                var mappings = visualMappings[state] = createMappings();

	                each(option[state], function (visualData, visualType) {
	                    if (!VisualMapping.isValidType(visualType)) {
	                        return;
	                    }
	                    var mappingOption = {
	                        type: visualType,
	                        visual: visualData
	                    };
	                    supplementVisualOption && supplementVisualOption(mappingOption, state);
	                    mappings[visualType] = new VisualMapping(mappingOption);

	                    // Prepare a alpha for opacity, for some case that opacity
	                    // is not supported, such as rendering using gradient color.
	                    if (visualType === 'opacity') {
	                        mappingOption = zrUtil.clone(mappingOption);
	                        mappingOption.type = 'colorAlpha';
	                        mappings.__hidden.__alphaForOpacity = new VisualMapping(mappingOption);
	                    }
	                });
	            });

	            return visualMappings;

	            function createMappings() {
	                var Creater = function () {};
	                // Make sure hidden fields will not be visited by
	                // object iteration (with hasOwnProperty checking).
	                Creater.prototype.__hidden = Creater.prototype;
	                var obj = new Creater();
	                return obj;
	            }
	        },

	        /**
	         * @param {Object} thisOption
	         * @param {Object} newOption
	         * @param {Array.<string>} keys
	         */
	        replaceVisualOption: function (thisOption, newOption, keys) {
	            // Visual attributes merge is not supported, otherwise it
	            // brings overcomplicated merge logic. See #2853. So if
	            // newOption has anyone of these keys, all of these keys
	            // will be reset. Otherwise, all keys remain.
	            var has;
	            zrUtil.each(keys, function (key) {
	                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	                    has = true;
	                }
	            });
	            has && zrUtil.each(keys, function (key) {
	                if (newOption.hasOwnProperty(key) && hasKeys(newOption[key])) {
	                    thisOption[key] = zrUtil.clone(newOption[key]);
	                }
	                else {
	                    delete thisOption[key];
	                }
	            });
	        },

	        /**
	         * @param {Array.<string>} stateList
	         * @param {Object} visualMappings <state, Object.<visualType, module:echarts/visual/VisualMapping>>
	         * @param {module:echarts/data/List} list
	         * @param {Function} getValueState param: valueOrIndex, return: state.
	         * @param {object} [scope] Scope for getValueState
	         * @param {string} [dimension] Concrete dimension, if used.
	         */
	        applyVisual: function (stateList, visualMappings, data, getValueState, scope, dimension) {
	            var visualTypesMap = {};
	            zrUtil.each(stateList, function (state) {
	                var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);
	                visualTypesMap[state] = visualTypes;
	            });

	            var dataIndex;

	            function getVisual(key) {
	                return data.getItemVisual(dataIndex, key);
	            }

	            function setVisual(key, value) {
	                data.setItemVisual(dataIndex, key, value);
	            }

	            if (dimension == null) {
	                data.each(eachItem, true);
	            }
	            else {
	                data.each([dimension], eachItem, true);
	            }

	            function eachItem(valueOrIndex, index) {
	                dataIndex = dimension == null ? valueOrIndex : index;

	                var rawDataItem = data.getRawDataItem(dataIndex);
	                // Consider performance
	                if (rawDataItem && rawDataItem.visualMap === false) {
	                    return;
	                }

	                var valueState = getValueState.call(scope, valueOrIndex);
	                var mappings = visualMappings[valueState];
	                var visualTypes = visualTypesMap[valueState];

	                for (var i = 0, len = visualTypes.length; i < len; i++) {
	                    var type = visualTypes[i];
	                    mappings[type] && mappings[type].applyVisual(
	                        valueOrIndex, getVisual, setVisual
	                    );
	                }
	            }
	        }
	    };

	    module.exports = visualSolution;



/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	

	    var polygonContain = __webpack_require__(409).contain;
	    var BoundingRect = __webpack_require__(248);

	    // Key of the first level is brushType: `line`, `rect`, `polygon`.
	    // Key of the second level is chart element type: `point`, `rect`.
	    // See moudule:echarts/component/helper/BrushController
	    // function param:
	    //      {Object} itemLayout fetch from data.getItemLayout(dataIndex)
	    //      {Object} selectors {point: selector, rect: selector, ...}
	    //      {Object} area {range: [[], [], ..], boudingRect}
	    // function return:
	    //      {boolean} Whether in the given brush.
	    var selector = {
	        lineX: getLineSelectors(0),
	        lineY: getLineSelectors(1),
	        rect: {
	            point: function (itemLayout, selectors, area) {
	                return area.boundingRect.contain(itemLayout[0], itemLayout[1]);
	            },
	            rect: function (itemLayout, selectors, area) {
	                return area.boundingRect.intersect(itemLayout);
	            }
	        },
	        polygon: {
	            point: function (itemLayout, selectors, area) {
	                return area.boundingRect.contain(itemLayout[0], itemLayout[1])
	                    && polygonContain(area.range, itemLayout[0], itemLayout[1]);
	            },
	            rect: function (itemLayout, selectors, area) {
	                // FIXME
	                // 随意写的，没有考察过效率。
	                var points = area.range;

	                if (points.length <= 1) {
	                    return false;
	                }

	                var x = itemLayout.x;
	                var y = itemLayout.y;
	                var width = itemLayout.width;
	                var height = itemLayout.height;
	                var p = points[0];

	                if (polygonContain(points, x, y)
	                    || polygonContain(points, x + width, y)
	                    || polygonContain(points, x, y + height)
	                    || polygonContain(points, x + width, y + height)
	                    || BoundingRect.create(itemLayout).contain(p[0], p[1])
	                    || lineIntersectPolygon(x, y, x + width, y, points)
	                    || lineIntersectPolygon(x, y, x, y + height, points)
	                    || lineIntersectPolygon(x + width, y, x + width, y + height, points)
	                    || lineIntersectPolygon(x, y + height, x + width, y + height, points)
	                ) {
	                    return true;
	                }
	            }
	        }
	    };

	    function getLineSelectors(xyIndex) {
	        var xy = ['x', 'y'];
	        var wh = ['width', 'height'];

	        return {
	            point: function (itemLayout, selectors, area) {
	                var range = area.range;
	                var p = itemLayout[xyIndex];
	                return inLineRange(p, range);
	            },
	            rect: function (itemLayout, selectors, area) {
	                var range = area.range;
	                return inLineRange(itemLayout[xy[xyIndex]], range)
	                    || inLineRange(itemLayout[xy[xyIndex]] + itemLayout[wh[xyIndex]], range);
	            }
	        };
	    }

	    function inLineRange(p, range) {
	        return range[0] <= p && p <= range[1];
	    }

	    // FIXME
	    // 随意写的，没考察过效率。
	    function lineIntersectPolygon(lx, ly, l2x, l2y, points) {
	        for (var i = 0, p2 = points[points.length - 1]; i < points.length; i++) {
	            var p = points[i];
	            if (lineIntersect(lx, ly, l2x, l2y, p[0], p[1], p2[0], p2[1])) {
	                return true;
	            }
	            p2 = p;
	        }
	    }

	    // Code from <http://blog.csdn.net/rickliuxiao/article/details/6259322> with some fix.
	    // See <https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection>
	    function lineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
	        var delta = determinant(a2x - a1x, b1x - b2x, a2y - a1y, b1y - b2y);
	        if (nearZero(delta)) { // parallel
	            return false;
	        }
	        var namenda = determinant(b1x - a1x, b1x - b2x, b1y - a1y, b1y - b2y) / delta;
	        if (namenda < 0 || namenda > 1) {
	            return false;
	        }
	        var miu = determinant(a2x - a1x, b1x - a1x, a2y - a1y, b1y - a1y) / delta;
	        if (miu < 0 || miu > 1) {
	            return false;
	        }
	        return true;
	    }

	    function nearZero(val) {
	        return val <= (1e-6) && val >= -(1e-6);
	    }

	    function determinant(v1, v2, v3, v4) {
	        return v1 * v4 - v2 * v3;
	    }

	    module.exports = selector;



/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);

	    var each = zrUtil.each;

	    var helper = {};

	    var COMPONENT_NAMES = ['geo', 'xAxis', 'yAxis'];
	    var PANEL_ID_SPLIT = '--';
	    var COORD_CONVERTS = ['dataToPoint', 'pointToData'];

	    helper.parseOutputRanges = function (areas, coordInfoList, ecModel, rangesCoordInfo) {
	        each(areas, function (area, index) {
	            var panelId = area.panelId;

	            if (panelId) {
	                panelId = panelId.split(PANEL_ID_SPLIT);

	                area[panelId[0] + 'Index'] = +panelId[1];

	                var coordInfo = findCoordInfo(area, coordInfoList);
	                area.coordRange = coordConvert[area.brushType](
	                    1, coordInfo, area.range
	                );
	                rangesCoordInfo && (rangesCoordInfo[index] = coordInfo);
	            }
	        });
	    };

	    helper.parseInputRanges = function (brushModel, ecModel) {
	        each(brushModel.areas, function (area) {
	            var coordInfo = findCoordInfo(area, brushModel.coordInfoList);

	            if (__DEV__) {
	                zrUtil.assert(
	                    !coordInfo || coordInfo === true || area.coordRange,
	                    'coordRange must be specified when coord index specified.'
	                );
	                zrUtil.assert(
	                    !coordInfo || coordInfo !== true || area.range,
	                    'range must be specified.'
	                );
	            }

	            area.range = area.range || [];

	            // convert coordRange to global range and set panelId.
	            if (coordInfo && coordInfo !== true) {
	                area.range = coordConvert[area.brushType](
	                    0, coordInfo, area.coordRange
	                );
	                area.panelId = coordInfo.panelId;
	            }
	        });
	    };

	    helper.makePanelOpts = function (coordInfoList) {
	        var panelOpts = [];

	        each(coordInfoList, function (coordInfo) {
	            var coordSys = coordInfo.coordSys;
	            var rect;

	            if (coordInfo.geoIndex >= 0) {
	                rect = coordSys.getBoundingRect().clone();
	                // geo roam and zoom transform
	                rect.applyTransform(graphic.getTransform(coordSys));
	            }
	            else { // xAxis or yAxis
	                // grid is not Transformable.
	                rect = coordSys.grid.getRect().clone();
	            }

	            panelOpts.push({panelId: coordInfo.panelId, rect: rect});
	        });

	        return panelOpts;
	    };

	    /**
	     * @param {Object} option {xAxisIndex, yAxisIndex, geoIndex}
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Array.<Obejct>} coordInfoList
	     */
	    helper.makeCoordInfoList = function (option, ecModel) {
	        var coordInfoList = [];

	        each(COMPONENT_NAMES, function (componentName) {
	            var componentIndices = option[componentName + 'Index'];
	            if (componentIndices == null || componentIndices === 'none') {
	                return;
	            }
	            if (componentIndices !== 'all' && !zrUtil.isArray(componentIndices)) {
	                componentIndices = [componentIndices];
	            }

	            ecModel.eachComponent({mainType: componentName}, function (componentModel, index) {
	                if (componentIndices !== 'all' && zrUtil.indexOf(componentIndices, index) < 0) {
	                    return;
	                }

	                var grid;
	                var coordSys;

	                (componentName === 'xAxis' || componentName === 'yAxis')
	                    ? (grid = componentModel.axis.grid)
	                    : (coordSys = componentModel.coordinateSystem); // geo

	                var coordInfo;

	                // Check duplicate and find cartesian when tranval to yAxis.
	                for (var i = 0, len = coordInfoList.length; i < len; i++) {
	                    var cInfo = coordInfoList[i];
	                    if (__DEV__) {
	                        zrUtil.assert(
	                            cInfo[componentName + 'Index'] != index,
	                            'Coord should not be defined duplicately: ' + componentName + index
	                        );
	                    }
	                    // CoordSys is always required for `rect brush` or `polygon brush`.
	                    // If both xAxisIndex and yAxisIndex specified, fetch cartesian by them.
	                    if (componentName === 'yAxis' && !cInfo.yAxis && cInfo.xAxis) {
	                        var aCoordSys = grid.getCartesian(cInfo.xAxisIndex, index);
	                        if (aCoordSys) { // The yAxis and xAxis are in the same cartesian.
	                            coordSys = aCoordSys;
	                            coordInfo = cInfo;
	                            break;
	                        }
	                    }
	                }

	                !coordInfo && coordInfoList.push(coordInfo = {});

	                coordInfo[componentName] = componentModel;
	                coordInfo[componentName + 'Index'] = index;
	                // If both xAxisIndex and yAxisIndex specified, panelId only use yAxisIndex,
	                // which is enough to index panel.
	                coordInfo.panelId = componentName + PANEL_ID_SPLIT + index;
	                coordInfo.coordSys = coordSys
	                    // If only xAxisIndex or only yAxisIndex specified, find its first cartesian.
	                    || grid.getCartesian(coordInfo.xAxisIndex, coordInfo.yAxisIndex);

	                coordInfo.coordSys
	                    ? (coordInfoList[componentName + 'Has'] = true)
	                    : coordInfoList.pop(); // If a coordInfo exists originally, existance of coordSys is ensured.
	            });
	        });

	        return coordInfoList;
	    };

	    helper.controlSeries = function (area, brushModel, seriesModel) {
	        // Check whether area is bound in coord, and series do not belong to that coord.
	        // If do not do this check, some brush (like lineX) will controll all axes.
	        var coordInfo = findCoordInfo(area, brushModel.coordInfoList);
	        return coordInfo === true || (coordInfo && coordInfo.coordSys === seriesModel.coordinateSystem);
	    };

	    function formatMinMax(minMax) {
	        minMax[0] > minMax[1] && minMax.reverse();
	        return minMax;
	    }

	    /**
	     * If return Object, a coord found.
	     * If reutrn true, global found.
	     * Otherwise nothing found.
	     *
	     * @param {Object} area {<componentName>Index}
	     * @param {Array} coordInfoList
	     * @return {Obejct|boolean}
	     */
	    function findCoordInfo(area, coordInfoList) {
	        var isGlobal = true;
	        for (var j = 0; j < COMPONENT_NAMES.length; j++) {
	            var indexAttr = COMPONENT_NAMES[j] + 'Index';
	            if (area[indexAttr] >= 0) {
	                isGlobal = false;
	                for (var i = 0; i < coordInfoList.length; i++) {
	                    if (coordInfoList[i][indexAttr] === area[indexAttr]) {
	                        return coordInfoList[i];
	                    }
	                }
	            }
	        }
	        return isGlobal;
	    }

	    function axisConvert(axisName, to, coordInfo, coordRange) {
	        var axis = coordInfo.coordSys.getAxis(axisName);

	        if (__DEV__) {
	            zrUtil.assert(axis, 'line brush is only available in cartesian (grid).');
	        }

	        return formatMinMax(zrUtil.map([0, 1], function (i) {
	            return to
	                ? axis.coordToData(axis.toLocalCoord(coordRange[i]))
	                : axis.toGlobalCoord(axis.dataToCoord(coordRange[i]));
	        }));
	    }

	    var coordConvert = {

	        lineX: zrUtil.curry(axisConvert, 'x'),

	        lineY: zrUtil.curry(axisConvert, 'y'),

	        rect: function (to, coordInfo, coordRange) {
	            var coordSys = coordInfo.coordSys;
	            var xminymin = coordSys[COORD_CONVERTS[to]]([coordRange[0][0], coordRange[1][0]]);
	            var xmaxymax = coordSys[COORD_CONVERTS[to]]([coordRange[0][1], coordRange[1][1]]);
	            return [
	                formatMinMax([xminymin[0], xmaxymax[0]]),
	                formatMinMax([xminymin[1], xmaxymax[1]])
	            ];
	        },

	        polygon: function (to, coordInfo, coordRange) {
	            var coordSys = coordInfo.coordSys;
	            return zrUtil.map(coordRange, coordSys[COORD_CONVERTS[to]], coordSys);
	        }
	    };

	    module.exports = helper;



/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Brush model
	 */


	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);
	    var visualSolution = __webpack_require__(558);
	    var Model = __webpack_require__(251);

	    var DEFAULT_OUT_OF_BRUSH_COLOR = ['#ddd'];

	    var BrushModel = echarts.extendComponentModel({

	        type: 'brush',

	        dependencies: ['geo', 'grid', 'xAxis', 'yAxis', 'parallel', 'series'],

	        /**
	         * @protected
	         */
	        defaultOption: {
	            // inBrush: null,
	            // outOfBrush: null,
	            toolbox: null,          // Default value see preprocessor.
	            brushLink: null,        // Series indices array, broadcast using dataIndex.
	                                    // or 'all', which means all series. 'none' or null means no series.
	            seriesIndex: 'all',     // seriesIndex array, specify series controlled by this brush component.
	            geoIndex: null,         //
	            xAxisIndex: null,
	            yAxisIndex: null,

	            brushType: 'rect',      // Default brushType, see BrushController.
	            brushMode: 'single',    // Default brushMode, 'single' or 'multiple'
	            transformable: true,    // Default transformable.
	            brushStyle: {           // Default brushStyle
	                borderWidth: 1,
	                color: 'rgba(120,140,180,0.3)',
	                borderColor: 'rgba(120,140,180,0.8)',
	                width: null         // do not use bursh width in line brush, but fetch from grid.
	            },

	            throttleType: 'fixRate',// Throttle in brushSelected event. 'fixRate' or 'debounce'.
	                                    // If null, no throttle. Valid only in the first brush component
	            throttleDelay: 0,       // Unit: ms, 0 means every event will be triggered.

	            // FIXME
	            // 试验效果
	            removeOnClick: true
	        },

	        /**
	         * @readOnly
	         * @type {Array.<Object>}
	         */
	        areas: [],

	        /**
	         * Current activated brush type.
	         * If null, brush is inactived.
	         * see module:echarts/component/helper/BrushController
	         * @readOnly
	         * @type {string}
	         */
	        brushType: null,

	        /**
	         * Current brush opt.
	         * see module:echarts/component/helper/BrushController
	         * @readOnly
	         * @type {Object}
	         */
	        brushOption: {},

	        /**
	         * @readOnly
	         * @type {Array.<Object>}
	         */
	        coordInfoList: [],

	        optionUpdated: function (newOption, isInit) {
	            var thisOption = this.option;

	            !isInit && visualSolution.replaceVisualOption(
	                thisOption, newOption, ['inBrush', 'outOfBrush']
	            );

	            thisOption.inBrush = thisOption.inBrush || {};
	            // Always give default visual, consider setOption at the second time.
	            thisOption.outOfBrush = thisOption.outOfBrush || {color: DEFAULT_OUT_OF_BRUSH_COLOR};
	        },

	        /**
	         * If ranges is null/undefined, range state remain.
	         *
	         * @param {Array.<Object>} [ranges]
	         */
	        setAreas: function (areas) {
	            if (__DEV__) {
	                zrUtil.assert(zrUtil.isArray(areas));
	                zrUtil.each(areas, function (area) {
	                    zrUtil.assert(area.brushType, 'Illegal areas');
	                });
	            }

	            // If ranges is null/undefined, range state remain.
	            // This helps user to dispatchAction({type: 'brush'}) with no areas
	            // set but just want to get the current brush select info from a `brush` event.
	            if (!areas) {
	                return;
	            }

	            this.areas = zrUtil.map(areas, function (area) {
	                return this._mergeBrushOption(area);
	            }, this);
	        },

	        /**
	         * see module:echarts/component/helper/BrushController
	         * @param {Object} brushOption
	         */
	        setBrushOption: function (brushOption) {
	            this.brushOption = this._mergeBrushOption(brushOption);
	            this.brushType = this.brushOption.brushType;
	        },

	        /**
	         * @private
	         */
	        _mergeBrushOption: function (brushOption) {
	            var option = this.option;
	            return zrUtil.merge(
	                {
	                    brushType: option.brushType,
	                    brushMode: option.brushMode,
	                    transformable: option.transformable,
	                    brushStyle: new Model(option.brushStyle).getItemStyle(),
	                    removeOnClick: option.removeOnClick
	                },
	                brushOption,
	                true
	            );
	        }

	    });

	    module.exports = BrushModel;



/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var BrushController = __webpack_require__(475);
	    var echarts = __webpack_require__(240);
	    var brushHelper = __webpack_require__(560);

	    module.exports = echarts.extendComponentView({

	        type: 'brush',

	        init: function (ecModel, api) {

	            /**
	             * @readOnly
	             * @type {module:echarts/model/Global}
	             */
	            this.ecModel = ecModel;

	            /**
	             * @readOnly
	             * @type {module:echarts/ExtensionAPI}
	             */
	            this.api = api;

	            /**
	             * @readOnly
	             * @type {module:echarts/component/brush/BrushModel}
	             */
	            this.model;

	            /**
	             * @private
	             * @type {module:echarts/component/helper/BrushController}
	             */
	            (this._brushController = new BrushController(api.getZr()))
	                .on('brush', zrUtil.bind(this._onBrush, this))
	                .mount();
	        },

	        /**
	         * @override
	         */
	        render: function (brushModel) {
	            this.model = brushModel;
	            return updateController.apply(this, arguments);
	        },

	        /**
	         * @override
	         */
	        updateView: updateController,

	        /**
	         * @override
	         */
	        updateLayout: updateController,

	        /**
	         * @override
	         */
	        updateVisual: updateController,

	        /**
	         * @override
	         */
	        dispose: function () {
	            this._brushController.dispose();
	        },

	        /**
	         * @private
	         */
	        _onBrush: function (areas, opt) {
	            var modelId = this.model.id;

	            brushHelper.parseOutputRanges(areas, this.model.coordInfoList, this.ecModel);

	            // Action is not dispatched on drag end, because the drag end
	            // emits the same params with the last drag move event, and
	            // may have some delay when using touch pad, which makes
	            // animation not smooth (when using debounce).
	            (!opt.isEnd || opt.removeOnClick) && this.api.dispatchAction({
	                type: 'brush',
	                brushId: modelId,
	                areas: zrUtil.clone(areas),
	                $from: modelId
	            });
	        }

	    });

	    function updateController(brushModel, ecModel, api, payload) {
	        // Do not update controller when drawing.
	        (!payload || payload.$from !== brushModel.id) && this._brushController
	            .setPanels(brushHelper.makePanelOpts(brushModel.coordInfoList))
	            .enableBrush(brushModel.brushOption)
	            .updateCovers(brushModel.areas.slice());
	    }



/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Brush action
	 */


	    var echarts = __webpack_require__(240);

	    /**
	     * payload: {
	     *      brushIndex: number, or,
	     *      brushId: string, or,
	     *      brushName: string,
	     *      globalRanges: Array
	     * }
	     */
	    echarts.registerAction(
	         {type: 'brush', event: 'brush', update: 'updateView'},
	        function (payload, ecModel) {
	            ecModel.eachComponent({mainType: 'brush', query: payload}, function (brushModel) {
	                brushModel.setAreas(payload.areas);
	            });
	        }
	    );

	    /**
	     * payload: {
	     *      brushComponents: [
	     *          {
	     *              brushId,
	     *              brushIndex,
	     *              brushName,
	     *              series: [
	     *                  {
	     *                      seriesId,
	     *                      seriesIndex,
	     *                      seriesName,
	     *                      rawIndices: [21, 34, ...]
	     *                  },
	     *                  ...
	     *              ]
	     *          },
	     *          ...
	     *      ]
	     * }
	     */
	    echarts.registerAction(
	         {type: 'brushSelect', event: 'brushSelected', update: 'none'},
	        function () {}
	    );


/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var featureManager = __webpack_require__(565);
	    var zrUtil = __webpack_require__(243);

	    function Brush(model, ecModel, api) {
	        this.model = model;
	        this.ecModel = ecModel;
	        this.api = api;

	        /**
	         * @private
	         * @type {string}
	         */
	        this._brushType;

	        /**
	         * @private
	         * @type {string}
	         */
	        this._brushMode;
	    }

	    Brush.defaultOption = {
	        show: true,
	        type: ['rect', 'polygon', 'lineX', 'lineY', 'keep', 'clear'],
	        icon: {
	            rect: 'M7.3,34.7 M0.4,10V-0.2h9.8 M89.6,10V-0.2h-9.8 M0.4,60v10.2h9.8 M89.6,60v10.2h-9.8 M12.3,22.4V10.5h13.1 M33.6,10.5h7.8 M49.1,10.5h7.8 M77.5,22.4V10.5h-13 M12.3,31.1v8.2 M77.7,31.1v8.2 M12.3,47.6v11.9h13.1 M33.6,59.5h7.6 M49.1,59.5 h7.7 M77.5,47.6v11.9h-13', // jshint ignore:line
	            polygon: 'M55.2,34.9c1.7,0,3.1,1.4,3.1,3.1s-1.4,3.1-3.1,3.1 s-3.1-1.4-3.1-3.1S53.5,34.9,55.2,34.9z M50.4,51c1.7,0,3.1,1.4,3.1,3.1c0,1.7-1.4,3.1-3.1,3.1c-1.7,0-3.1-1.4-3.1-3.1 C47.3,52.4,48.7,51,50.4,51z M55.6,37.1l1.5-7.8 M60.1,13.5l1.6-8.7l-7.8,4 M59,19l-1,5.3 M24,16.1l6.4,4.9l6.4-3.3 M48.5,11.6 l-5.9,3.1 M19.1,12.8L9.7,5.1l1.1,7.7 M13.4,29.8l1,7.3l6.6,1.6 M11.6,18.4l1,6.1 M32.8,41.9 M26.6,40.4 M27.3,40.2l6.1,1.6 M49.9,52.1l-5.6-7.6l-4.9-1.2', // jshint ignore:line
	            lineX: 'M15.2,30 M19.7,15.6V1.9H29 M34.8,1.9H40.4 M55.3,15.6V1.9H45.9 M19.7,44.4V58.1H29 M34.8,58.1H40.4 M55.3,44.4 V58.1H45.9 M12.5,20.3l-9.4,9.6l9.6,9.8 M3.1,29.9h16.5 M62.5,20.3l9.4,9.6L62.3,39.7 M71.9,29.9H55.4', // jshint ignore:line
	            lineY: 'M38.8,7.7 M52.7,12h13.2v9 M65.9,26.6V32 M52.7,46.3h13.2v-9 M24.9,12H11.8v9 M11.8,26.6V32 M24.9,46.3H11.8v-9 M48.2,5.1l-9.3-9l-9.4,9.2 M38.9-3.9V12 M48.2,53.3l-9.3,9l-9.4-9.2 M38.9,62.3V46.4', // jshint ignore:line
	            keep: 'M4,10.5V1h10.3 M20.7,1h6.1 M33,1h6.1 M55.4,10.5V1H45.2 M4,17.3v6.6 M55.6,17.3v6.6 M4,30.5V40h10.3 M20.7,40 h6.1 M33,40h6.1 M55.4,30.5V40H45.2 M21,18.9h62.9v48.6H21V18.9z', // jshint ignore:line
	            clear: 'M22,14.7l30.9,31 M52.9,14.7L22,45.7 M4.7,16.8V4.2h13.1 M26,4.2h7.8 M41.6,4.2h7.8 M70.3,16.8V4.2H57.2 M4.7,25.9v8.6 M70.3,25.9v8.6 M4.7,43.2v12.6h13.1 M26,55.8h7.8 M41.6,55.8h7.8 M70.3,43.2v12.6H57.2' // jshint ignore:line
	        },
	        title: {
	            rect: '矩形选择',
	            polygon: '圈选',
	            lineX: '横向选择',
	            lineY: '纵向选择',
	            keep: '保持选择',
	            clear: '清除选择'
	        }
	    };

	    var proto = Brush.prototype;

	    proto.render =
	    proto.updateView =
	    proto.updateLayout = function (featureModel, ecModel, api) {
	        var brushType;
	        var brushMode;
	        var isBrushed;

	        ecModel.eachComponent({mainType: 'brush'}, function (brushModel) {
	            brushType = brushModel.brushType;
	            brushMode = brushModel.brushOption.brushMode || 'single';
	            isBrushed |= brushModel.areas.length;
	        });
	        this._brushType = brushType;
	        this._brushMode = brushMode;

	        zrUtil.each(featureModel.get('type', true), function (type) {
	            featureModel.setIconStatus(
	                type,
	                (
	                    type === 'keep'
	                    ? brushMode === 'multiple'
	                    : type === 'clear'
	                    ? isBrushed
	                    : type === brushType
	                ) ? 'emphasis' : 'normal'
	            );
	        });
	    };

	    proto.getIcons = function () {
	        var model = this.model;
	        var availableIcons = model.get('icon', true);
	        var icons = {};
	        zrUtil.each(model.get('type', true), function (type) {
	            if (availableIcons[type]) {
	                icons[type] = availableIcons[type];
	            }
	        });
	        return icons;
	    };

	    proto.onclick = function (ecModel, api, type) {
	        var api = this.api;
	        var brushType = this._brushType;
	        var brushMode = this._brushMode;

	        if (type === 'clear') {
	            api.dispatchAction({
	                type: 'brush',
	                // Clear all areas of all brush components.
	                areas: []
	            });
	        }
	        else {
	            api.dispatchAction({
	                type: 'takeGlobalCursor',
	                key: 'brush',
	                brushOption: {
	                    brushType: type === 'keep'
	                        ? brushType
	                        : (brushType === type ? false : type),
	                    brushMode: type === 'keep'
	                        ? (brushMode === 'multiple' ? 'single' : 'multiple')
	                        : brushMode
	                }
	            });
	        }
	    };

	    featureManager.register('brush', Brush);

	    module.exports = Brush;


/***/ },
/* 565 */
/***/ function(module, exports) {

	'use strict';


	    var features = {};

	    module.exports = {
	        register: function (name, ctor) {
	            features[name] = ctor;
	        },

	        get: function (name) {
	            return features[name];
	        }
	    };


/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var echarts = __webpack_require__(240);
	    var graphic = __webpack_require__(282);
	    var layout = __webpack_require__(260);

	    // Model
	    echarts.extendComponentModel({

	        type: 'title',

	        layoutMode: {type: 'box', ignoreSize: true},

	        defaultOption: {
	            // 一级层叠
	            zlevel: 0,
	            // 二级层叠
	            z: 6,
	            show: true,

	            text: '',
	            // 超链接跳转
	            // link: null,
	            // 仅支持self | blank
	            target: 'blank',
	            subtext: '',

	            // 超链接跳转
	            // sublink: null,
	            // 仅支持self | blank
	            subtarget: 'blank',

	            // 'center' ¦ 'left' ¦ 'right'
	            // ¦ {number}（x坐标，单位px）
	            left: 0,
	            // 'top' ¦ 'bottom' ¦ 'center'
	            // ¦ {number}（y坐标，单位px）
	            top: 0,

	            // 水平对齐
	            // 'auto' | 'left' | 'right' | 'center'
	            // 默认根据 left 的位置判断是左对齐还是右对齐
	            // textAlign: null
	            //
	            // 垂直对齐
	            // 'auto' | 'top' | 'bottom' | 'middle'
	            // 默认根据 top 位置判断是上对齐还是下对齐
	            // textBaseline: null

	            backgroundColor: 'rgba(0,0,0,0)',

	            // 标题边框颜色
	            borderColor: '#ccc',

	            // 标题边框线宽，单位px，默认为0（无边框）
	            borderWidth: 0,

	            // 标题内边距，单位px，默认各方向内边距为5，
	            // 接受数组分别设定上右下左边距，同css
	            padding: 5,

	            // 主副标题纵向间隔，单位px，默认为10，
	            itemGap: 10,
	            textStyle: {
	                fontSize: 18,
	                fontWeight: 'bolder',
	                color: '#333'
	            },
	            subtextStyle: {
	                color: '#aaa'
	            }
	        }
	    });

	    // View
	    echarts.extendComponentView({

	        type: 'title',

	        render: function (titleModel, ecModel, api) {
	            this.group.removeAll();

	            if (!titleModel.get('show')) {
	                return;
	            }

	            var group = this.group;

	            var textStyleModel = titleModel.getModel('textStyle');
	            var subtextStyleModel = titleModel.getModel('subtextStyle');

	            var textAlign = titleModel.get('textAlign');
	            var textBaseline = titleModel.get('textBaseline');

	            var textEl = new graphic.Text({
	                style: {
	                    text: titleModel.get('text'),
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                },
	                z2: 10
	            });

	            var textRect = textEl.getBoundingRect();

	            var subText = titleModel.get('subtext');
	            var subTextEl = new graphic.Text({
	                style: {
	                    text: subText,
	                    textFont: subtextStyleModel.getFont(),
	                    fill: subtextStyleModel.getTextColor(),
	                    y: textRect.height + titleModel.get('itemGap'),
	                    textBaseline: 'top'
	                },
	                z2: 10
	            });

	            var link = titleModel.get('link');
	            var sublink = titleModel.get('sublink');

	            textEl.silent = !link;
	            subTextEl.silent = !sublink;

	            if (link) {
	                textEl.on('click', function () {
	                    window.open(link, '_' + titleModel.get('target'));
	                });
	            }
	            if (sublink) {
	                subTextEl.on('click', function () {
	                    window.open(sublink, '_' + titleModel.get('subtarget'));
	                });
	            }

	            group.add(textEl);
	            subText && group.add(subTextEl);
	            // If no subText, but add subTextEl, there will be an empty line.

	            var groupRect = group.getBoundingRect();
	            var layoutOption = titleModel.getBoxLayoutParams();
	            layoutOption.width = groupRect.width;
	            layoutOption.height = groupRect.height;
	            var layoutRect = layout.getLayoutRect(
	                layoutOption, {
	                    width: api.getWidth(),
	                    height: api.getHeight()
	                }, titleModel.get('padding')
	            );
	            // Adjust text align based on position
	            if (!textAlign) {
	                // Align left if title is on the left. center and right is same
	                textAlign = titleModel.get('left') || titleModel.get('right');
	                if (textAlign === 'middle') {
	                    textAlign = 'center';
	                }
	                // Adjust layout by text align
	                if (textAlign === 'right') {
	                    layoutRect.x += layoutRect.width;
	                }
	                else if (textAlign === 'center') {
	                    layoutRect.x += layoutRect.width / 2;
	                }
	            }
	            if (!textBaseline) {
	                textBaseline = titleModel.get('top') || titleModel.get('bottom');
	                if (textBaseline === 'center') {
	                    textBaseline = 'middle';
	                }
	                if (textBaseline === 'bottom') {
	                    layoutRect.y += layoutRect.height;
	                }
	                else if (textBaseline === 'middle') {
	                    layoutRect.y += layoutRect.height / 2;
	                }

	                textBaseline = textBaseline || 'top';
	            }

	            group.attr('position', [layoutRect.x, layoutRect.y]);
	            var alignStyle = {
	                textAlign: textAlign,
	                textVerticalAlign: textBaseline
	            };
	            textEl.setStyle(alignStyle);
	            subTextEl.setStyle(alignStyle);

	            // Render background
	            // Get groupRect again because textAlign has been changed
	            groupRect = group.getBoundingRect();
	            var padding = layoutRect.margin;
	            var style = titleModel.getItemStyle(['color', 'opacity']);
	            style.fill = titleModel.get('backgroundColor');
	            var rect = new graphic.Rect({
	                shape: {
	                    x: groupRect.x - padding[3],
	                    y: groupRect.y - padding[0],
	                    width: groupRect.width + padding[1] + padding[3],
	                    height: groupRect.height + padding[0] + padding[2]
	                },
	                style: style,
	                silent: true
	            });
	            graphic.subPixelOptimizeRect(rect);

	            group.add(rect);
	        }
	    });


/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */


	    __webpack_require__(568);

	    __webpack_require__(569);
	    __webpack_require__(572);

	    __webpack_require__(573);
	    __webpack_require__(574);

	    __webpack_require__(576);
	    __webpack_require__(577);

	    __webpack_require__(579);
	    __webpack_require__(580);



/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(258).registerSubTypeDefaulter('dataZoom', function (option) {
	        // Default 'slider' when no type specified.
	        return 'slider';
	    });



/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */


	    var zrUtil = __webpack_require__(243);
	    var env = __webpack_require__(241);
	    var echarts = __webpack_require__(240);
	    var modelUtil = __webpack_require__(244);
	    var helper = __webpack_require__(570);
	    var AxisProxy = __webpack_require__(571);
	    var each = zrUtil.each;
	    var eachAxisDim = helper.eachAxisDim;

	    var DataZoomModel = echarts.extendComponentModel({

	        type: 'dataZoom',

	        dependencies: [
	            'xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'singleAxis', 'series'
	        ],

	        /**
	         * @protected
	         */
	        defaultOption: {
	            zlevel: 0,
	            z: 4,                   // Higher than normal component (z: 2).
	            orient: null,           // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.
	            xAxisIndex: null,       // Default the first horizontal category axis.
	            yAxisIndex: null,       // Default the first vertical category axis.

	            filterMode: 'filter',   // Possible values: 'filter' or 'empty'.
	                                    // 'filter': data items which are out of window will be removed.
	                                    //           This option is applicable when filtering outliers.
	                                    // 'empty': data items which are out of window will be set to empty.
	                                    //          This option is applicable when user should not neglect
	                                    //          that there are some data items out of window.
	                                    // Taking line chart as an example, line will be broken in
	                                    // the filtered points when filterModel is set to 'empty', but
	                                    // be connected when set to 'filter'.

	            throttle: null,         // Dispatch action by the fixed rate, avoid frequency.
	                                    // default 100. Do not throttle when use null/undefined.
	                                    // If animation === true and animationDurationUpdate > 0,
	                                    // default value is 100, otherwise 20.
	            start: 0,               // Start percent. 0 ~ 100
	            end: 100,               // End percent. 0 ~ 100
	            startValue: null,       // Start value. If startValue specified, start is ignored.
	            endValue: null          // End value. If endValue specified, end is ignored.
	        },

	        /**
	         * @override
	         */
	        init: function (option, parentModel, ecModel) {

	            /**
	             * key like x_0, y_1
	             * @private
	             * @type {Object}
	             */
	            this._dataIntervalByAxis = {};

	            /**
	             * @private
	             */
	            this._dataInfo = {};

	            /**
	             * key like x_0, y_1
	             * @private
	             */
	            this._axisProxies = {};

	            /**
	             * @readOnly
	             */
	            this.textStyleModel;

	            /**
	             * @private
	             */
	            this._autoThrottle = true;

	            var rawOption = retrieveRaw(option);

	            this.mergeDefaultAndTheme(option, ecModel);

	            this.doInit(rawOption);
	        },

	        /**
	         * @override
	         */
	        mergeOption: function (newOption) {
	            var rawOption = retrieveRaw(newOption);

	            //FIX #2591
	            zrUtil.merge(this.option, newOption, true);

	            this.doInit(rawOption);
	        },

	        /**
	         * @protected
	         */
	        doInit: function (rawOption) {
	            var thisOption = this.option;

	            // Disable realtime view update if canvas is not supported.
	            if (!env.canvasSupported) {
	                thisOption.realtime = false;
	            }

	            this._setDefaultThrottle(rawOption);

	            processRangeProp('start', 'startValue', rawOption, thisOption);
	            processRangeProp('end', 'endValue', rawOption, thisOption);

	            this.textStyleModel = this.getModel('textStyle');

	            this._resetTarget();

	            this._giveAxisProxies();
	        },

	        /**
	         * @private
	         */
	        _giveAxisProxies: function () {
	            var axisProxies = this._axisProxies;

	            this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {
	                var axisModel = this.dependentModels[dimNames.axis][axisIndex];

	                // If exists, share axisProxy with other dataZoomModels.
	                var axisProxy = axisModel.__dzAxisProxy || (
	                    // Use the first dataZoomModel as the main model of axisProxy.
	                    axisModel.__dzAxisProxy = new AxisProxy(
	                        dimNames.name, axisIndex, this, ecModel
	                    )
	                );
	                // FIXME
	                // dispose __dzAxisProxy

	                axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;
	            }, this);
	        },

	        /**
	         * @private
	         */
	        _resetTarget: function () {
	            var thisOption = this.option;

	            var autoMode = this._judgeAutoMode();

	            eachAxisDim(function (dimNames) {
	                var axisIndexName = dimNames.axisIndex;
	                thisOption[axisIndexName] = modelUtil.normalizeToArray(
	                    thisOption[axisIndexName]
	                );
	            }, this);

	            if (autoMode === 'axisIndex') {
	                this._autoSetAxisIndex();
	            }
	            else if (autoMode === 'orient') {
	                this._autoSetOrient();
	            }
	        },

	        /**
	         * @private
	         */
	        _judgeAutoMode: function () {
	            // Auto set only works for setOption at the first time.
	            // The following is user's reponsibility. So using merged
	            // option is OK.
	            var thisOption = this.option;

	            var hasIndexSpecified = false;
	            eachAxisDim(function (dimNames) {
	                // When user set axisIndex as a empty array, we think that user specify axisIndex
	                // but do not want use auto mode. Because empty array may be encountered when
	                // some error occured.
	                if (thisOption[dimNames.axisIndex] != null) {
	                    hasIndexSpecified = true;
	                }
	            }, this);

	            var orient = thisOption.orient;

	            if (orient == null && hasIndexSpecified) {
	                return 'orient';
	            }
	            else if (!hasIndexSpecified) {
	                if (orient == null) {
	                    thisOption.orient = 'horizontal';
	                }
	                return 'axisIndex';
	            }
	        },

	        /**
	         * @private
	         */
	        _autoSetAxisIndex: function () {
	            var autoAxisIndex = true;
	            var orient = this.get('orient', true);
	            var thisOption = this.option;
	            var dependentModels = this.dependentModels;

	            if (autoAxisIndex) {
	                // Find axis that parallel to dataZoom as default.
	                var dimName = orient === 'vertical' ? 'y' : 'x';

	                if (dependentModels[dimName + 'Axis'].length) {
	                    thisOption[dimName + 'AxisIndex'] = [0];
	                    autoAxisIndex = false;
	                }
	                else {
	                    each(dependentModels.singleAxis, function (singleAxisModel) {
	                        if (autoAxisIndex && singleAxisModel.get('orient', true) === orient) {
	                            thisOption.singleAxisIndex = [singleAxisModel.componentIndex];
	                            autoAxisIndex = false;
	                        }
	                    });
	                }
	            }

	            if (autoAxisIndex) {
	                // Find the first category axis as default. (consider polar)
	                eachAxisDim(function (dimNames) {
	                    if (!autoAxisIndex) {
	                        return;
	                    }
	                    var axisIndices = [];
	                    var axisModels = this.dependentModels[dimNames.axis];
	                    if (axisModels.length && !axisIndices.length) {
	                        for (var i = 0, len = axisModels.length; i < len; i++) {
	                            if (axisModels[i].get('type') === 'category') {
	                                axisIndices.push(i);
	                            }
	                        }
	                    }
	                    thisOption[dimNames.axisIndex] = axisIndices;
	                    if (axisIndices.length) {
	                        autoAxisIndex = false;
	                    }
	                }, this);
	            }

	            if (autoAxisIndex) {
	                // FIXME
	                // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），
	                // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？

	                // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,
	                // dataZoom component auto adopts series that reference to
	                // both xAxis and yAxis which type is 'value'.
	                this.ecModel.eachSeries(function (seriesModel) {
	                    if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {
	                        eachAxisDim(function (dimNames) {
	                            var axisIndices = thisOption[dimNames.axisIndex];

	                            var axisIndex = seriesModel.get(dimNames.axisIndex);
	                            var axisId = seriesModel.get(dimNames.axisId);

	                            var axisModel = seriesModel.ecModel.queryComponents({
	                                mainType: dimNames.axis,
	                                index: axisIndex,
	                                id: axisId
	                            })[0];

	                            if (__DEV__) {
	                                if (!axisModel) {
	                                    throw new Error(
	                                        dimNames.axis + ' "' + zrUtil.retrieve(
	                                            axisIndex,
	                                            axisId,
	                                            0
	                                        ) + '" not found'
	                                    );
	                                }
	                            }
	                            axisIndex = axisModel.componentIndex;

	                            if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {
	                                axisIndices.push(axisIndex);
	                            }
	                        });
	                    }
	                }, this);
	            }
	        },

	        /**
	         * @private
	         */
	        _autoSetOrient: function () {
	            var dim;

	            // Find the first axis
	            this.eachTargetAxis(function (dimNames) {
	                !dim && (dim = dimNames.name);
	            }, this);

	            this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';
	        },

	        /**
	         * @private
	         */
	        _isSeriesHasAllAxesTypeOf: function (seriesModel, axisType) {
	            // FIXME
	            // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。
	            // 例如series.type === scatter时。

	            var is = true;
	            eachAxisDim(function (dimNames) {
	                var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);
	                var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];

	                if (!axisModel || axisModel.get('type') !== axisType) {
	                    is = false;
	                }
	            }, this);
	            return is;
	        },

	        /**
	         * @private
	         */
	        _setDefaultThrottle: function (rawOption) {
	            // When first time user set throttle, auto throttle ends.
	            if (rawOption.hasOwnProperty('throttle')) {
	                this._autoThrottle = false;
	            }
	            if (this._autoThrottle) {
	                var globalOption = this.ecModel.option;
	                this.option.throttle =
	                    (globalOption.animation && globalOption.animationDurationUpdate > 0)
	                    ? 100 : 20;
	            }
	        },

	        /**
	         * @public
	         */
	        getFirstTargetAxisModel: function () {
	            var firstAxisModel;
	            eachAxisDim(function (dimNames) {
	                if (firstAxisModel == null) {
	                    var indices = this.get(dimNames.axisIndex);
	                    if (indices.length) {
	                        firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];
	                    }
	                }
	            }, this);

	            return firstAxisModel;
	        },

	        /**
	         * @public
	         * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel
	         */
	        eachTargetAxis: function (callback, context) {
	            var ecModel = this.ecModel;
	            eachAxisDim(function (dimNames) {
	                each(
	                    this.get(dimNames.axisIndex),
	                    function (axisIndex) {
	                        callback.call(context, dimNames, axisIndex, this, ecModel);
	                    },
	                    this
	                );
	            }, this);
	        },

	        getAxisProxy: function (dimName, axisIndex) {
	            return this._axisProxies[dimName + '_' + axisIndex];
	        },

	        /**
	         * If not specified, set to undefined.
	         *
	         * @public
	         * @param {Object} opt
	         * @param {number} [opt.start]
	         * @param {number} [opt.end]
	         * @param {number} [opt.startValue]
	         * @param {number} [opt.endValue]
	         */
	        setRawRange: function (opt) {
	            each(['start', 'end', 'startValue', 'endValue'], function (name) {
	                // If any of those prop is null/undefined, we should alos set
	                // them, because only one pair between start/end and
	                // startValue/endValue can work.
	                this.option[name] = opt[name];
	            }, this);
	        },

	        /**
	         * @public
	         * @return {Array.<number>} [startPercent, endPercent]
	         */
	        getPercentRange: function () {
	            var axisProxy = this.findRepresentativeAxisProxy();
	            if (axisProxy) {
	                return axisProxy.getDataPercentWindow();
	            }
	        },

	        /**
	         * @public
	         * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);
	         *
	         * @param {string} [axisDimName]
	         * @param {number} [axisIndex]
	         * @return {Array.<number>} [startValue, endValue] value can only be '-' or finite number.
	         */
	        getValueRange: function (axisDimName, axisIndex) {
	            if (axisDimName == null && axisIndex == null) {
	                var axisProxy = this.findRepresentativeAxisProxy();
	                if (axisProxy) {
	                    return axisProxy.getDataValueWindow();
	                }
	            }
	            else {
	                return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();
	            }
	        },

	        /**
	         * @public
	         * @return {module:echarts/component/dataZoom/AxisProxy}
	         */
	        findRepresentativeAxisProxy: function () {
	            // Find the first hosted axisProxy
	            var axisProxies = this._axisProxies;
	            for (var key in axisProxies) {
	                if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {
	                    return axisProxies[key];
	                }
	            }

	            // If no hosted axis find not hosted axisProxy.
	            // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,
	            // and the option.start or option.end settings are different. The percentRange
	            // should follow axisProxy.
	            // (We encounter this problem in toolbox data zoom.)
	            for (var key in axisProxies) {
	                if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {
	                    return axisProxies[key];
	                }
	            }
	        }

	    });

	    function retrieveRaw(option) {
	        var ret = {};
	        each(
	            ['start', 'end', 'startValue', 'endValue', 'throttle'],
	            function (name) {
	                option.hasOwnProperty(name) && (ret[name] = option[name]);
	            }
	        );
	        return ret;
	    }

	    function processRangeProp(percentProp, valueProp, rawOption, thisOption) {
	        // start/end has higher priority over startValue/endValue,
	        // but we should make chart.setOption({endValue: 1000}) effective,
	        // rather than chart.setOption({endValue: 1000, end: null}).
	        if (rawOption[valueProp] != null && rawOption[percentProp] == null) {
	            thisOption[percentProp] = null;
	        }
	        // Otherwise do nothing and use the merge result.
	    }

	    module.exports = DataZoomModel;



/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	
	    var formatUtil = __webpack_require__(245);
	    var zrUtil = __webpack_require__(243);

	    var helper = {};

	    var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle', 'single'];
	    // Supported coords.
	    var COORDS = ['cartesian2d', 'polar', 'singleAxis'];

	    /**
	     * @param {string} coordType
	     * @return {boolean}
	     */
	    helper.isCoordSupported = function (coordType) {
	        return zrUtil.indexOf(COORDS, coordType) >= 0;
	    };

	    /**
	     * Create "each" method to iterate names.
	     *
	     * @pubilc
	     * @param  {Array.<string>} names
	     * @param  {Array.<string>=} attrs
	     * @return {Function}
	     */
	    helper.createNameEach = function (names, attrs) {
	        names = names.slice();
	        var capitalNames = zrUtil.map(names, formatUtil.capitalFirst);
	        attrs = (attrs || []).slice();
	        var capitalAttrs = zrUtil.map(attrs, formatUtil.capitalFirst);

	        return function (callback, context) {
	            zrUtil.each(names, function (name, index) {
	                var nameObj = {name: name, capital: capitalNames[index]};

	                for (var j = 0; j < attrs.length; j++) {
	                    nameObj[attrs[j]] = name + capitalAttrs[j];
	                }

	                callback.call(context, nameObj);
	            });
	        };
	    };

	    /**
	     * Iterate each dimension name.
	     *
	     * @public
	     * @param {Function} callback The parameter is like:
	     *                            {
	     *                                name: 'angle',
	     *                                capital: 'Angle',
	     *                                axis: 'angleAxis',
	     *                                axisIndex: 'angleAixs',
	     *                                index: 'angleIndex'
	     *                            }
	     * @param {Object} context
	     */
	    helper.eachAxisDim = helper.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index', 'id']);

	    /**
	     * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
	     * dataZoomModels and 'links' make up one or more graphics.
	     * This function finds the graphic where the source dataZoomModel is in.
	     *
	     * @public
	     * @param {Function} forEachNode Node iterator.
	     * @param {Function} forEachEdgeType edgeType iterator
	     * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
	     * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
	     */
	    helper.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {

	        return function (sourceNode) {
	            var result = {
	                nodes: [],
	                records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).
	            };

	            forEachEdgeType(function (edgeType) {
	                result.records[edgeType.name] = {};
	            });

	            if (!sourceNode) {
	                return result;
	            }

	            absorb(sourceNode, result);

	            var existsLink;
	            do {
	                existsLink = false;
	                forEachNode(processSingleNode);
	            }
	            while (existsLink);

	            function processSingleNode(node) {
	                if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
	                    absorb(node, result);
	                    existsLink = true;
	                }
	            }

	            return result;
	        };

	        function isNodeAbsorded(node, result) {
	            return zrUtil.indexOf(result.nodes, node) >= 0;
	        }

	        function isLinked(node, result) {
	            var hasLink = false;
	            forEachEdgeType(function (edgeType) {
	                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                    result.records[edgeType.name][edgeId] && (hasLink = true);
	                });
	            });
	            return hasLink;
	        }

	        function absorb(node, result) {
	            result.nodes.push(node);
	            forEachEdgeType(function (edgeType) {
	                zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                    result.records[edgeType.name][edgeId] = true;
	                });
	            });
	        }
	    };

	    module.exports = helper;


/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Axis operator
	 */


	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);
	    var helper = __webpack_require__(570);
	    var each = zrUtil.each;
	    var asc = numberUtil.asc;

	    /**
	     * Operate single axis.
	     * One axis can only operated by one axis operator.
	     * Different dataZoomModels may be defined to operate the same axis.
	     * (i.e. 'inside' data zoom and 'slider' data zoom components)
	     * So dataZoomModels share one axisProxy in that case.
	     *
	     * @class
	     */
	    var AxisProxy = function (dimName, axisIndex, dataZoomModel, ecModel) {

	        /**
	         * @private
	         * @type {string}
	         */
	        this._dimName = dimName;

	        /**
	         * @private
	         */
	        this._axisIndex = axisIndex;

	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._valueWindow;

	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._percentWindow;

	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._dataExtent;

	        /**
	         * @readOnly
	         * @type {module: echarts/model/Global}
	         */
	        this.ecModel = ecModel;

	        /**
	         * @private
	         * @type {module: echarts/component/dataZoom/DataZoomModel}
	         */
	        this._dataZoomModel = dataZoomModel;
	    };

	    AxisProxy.prototype = {

	        constructor: AxisProxy,

	        /**
	         * Whether the axisProxy is hosted by dataZoomModel.
	         *
	         * @public
	         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	         * @return {boolean}
	         */
	        hostedBy: function (dataZoomModel) {
	            return this._dataZoomModel === dataZoomModel;
	        },

	        /**
	         * @return {Array.<number>} Value can only be NaN or finite value.
	         */
	        getDataValueWindow: function () {
	            return this._valueWindow.slice();
	        },

	        /**
	         * @return {Array.<number>}
	         */
	        getDataPercentWindow: function () {
	            return this._percentWindow.slice();
	        },

	        /**
	         * @public
	         * @param {number} axisIndex
	         * @return {Array} seriesModels
	         */
	        getTargetSeriesModels: function () {
	            var seriesModels = [];
	            var ecModel = this.ecModel;

	            ecModel.eachSeries(function (seriesModel) {
	                if (helper.isCoordSupported(seriesModel.get('coordinateSystem'))) {
	                    var dimName = this._dimName;
	                    var axisModel = ecModel.queryComponents({
	                        mainType: dimName + 'Axis',
	                        index: seriesModel.get(dimName + 'AxisIndex'),
	                        id: seriesModel.get(dimName + 'AxisId')
	                    })[0];
	                    if (this._axisIndex === (axisModel && axisModel.componentIndex)) {
	                        seriesModels.push(seriesModel);
	                    }
	                }
	            }, this);

	            return seriesModels;
	        },

	        getAxisModel: function () {
	            return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
	        },

	        getOtherAxisModel: function () {
	            var axisDim = this._dimName;
	            var ecModel = this.ecModel;
	            var axisModel = this.getAxisModel();
	            var isCartesian = axisDim === 'x' || axisDim === 'y';
	            var otherAxisDim;
	            var coordSysIndexName;
	            if (isCartesian) {
	                coordSysIndexName = 'gridIndex';
	                otherAxisDim = axisDim === 'x' ? 'y' : 'x';
	            }
	            else {
	                coordSysIndexName = 'polarIndex';
	                otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';
	            }
	            var foundOtherAxisModel;
	            ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {
	                if ((otherAxisModel.get(coordSysIndexName) || 0)
	                    === (axisModel.get(coordSysIndexName) || 0)
	                ) {
	                    foundOtherAxisModel = otherAxisModel;
	                }
	            });
	            return foundOtherAxisModel;
	        },

	        /**
	         * Only calculate by given range and this._dataExtent, do not change anything.
	         *
	         * @param {Object} opt
	         * @param {number} [opt.start]
	         * @param {number} [opt.end]
	         * @param {number} [opt.startValue]
	         * @param {number} [opt.endValue]
	         */
	        calculateDataWindow: function (opt) {
	            var dataExtent = this._dataExtent;
	            var axisModel = this.getAxisModel();
	            var scale = axisModel.axis.scale;
	            var percentExtent = [0, 100];
	            var percentWindow = [
	                opt.start,
	                opt.end
	            ];
	            var valueWindow = [];

	            // In percent range is used and axis min/max/scale is set,
	            // window should be based on min/max/0, but should not be
	            // based on the extent of filtered data.
	            dataExtent = dataExtent.slice();
	            fixExtentByAxis(dataExtent, axisModel);

	            each(['startValue', 'endValue'], function (prop) {
	                valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);
	            });

	            // Normalize bound.
	            each([0, 1], function (idx) {
	                var boundValue = valueWindow[idx];
	                var boundPercent = percentWindow[idx];

	                // start/end has higher priority over startValue/endValue,
	                // because start/end can be consistent among different type
	                // of axis but startValue/endValue not.

	                if (boundPercent != null || boundValue == null) {
	                    if (boundPercent == null) {
	                        boundPercent = percentExtent[idx];
	                    }
	                    // Use scale.parse to math round for category or time axis.
	                    boundValue = scale.parse(numberUtil.linearMap(
	                        boundPercent, percentExtent, dataExtent, true
	                    ));
	                }
	                else { // boundPercent == null && boundValue != null
	                    boundPercent = numberUtil.linearMap(
	                        boundValue, dataExtent, percentExtent, true
	                    );
	                }
	                // valueWindow[idx] = round(boundValue);
	                // percentWindow[idx] = round(boundPercent);
	                valueWindow[idx] = boundValue;
	                percentWindow[idx] = boundPercent;
	            });

	            return {
	                valueWindow: asc(valueWindow),
	                percentWindow: asc(percentWindow)
	            };
	        },

	        /**
	         * Notice: reset should not be called before series.restoreData() called,
	         * so it is recommanded to be called in "process stage" but not "model init
	         * stage".
	         *
	         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	         */
	        reset: function (dataZoomModel) {
	            if (dataZoomModel !== this._dataZoomModel) {
	                return;
	            }

	            // Culculate data window and data extent, and record them.
	            this._dataExtent = calculateDataExtent(
	                this._dimName, this.getTargetSeriesModels()
	            );
	            var dataWindow = this.calculateDataWindow(dataZoomModel.option);
	            this._valueWindow = dataWindow.valueWindow;
	            this._percentWindow = dataWindow.percentWindow;

	            // Update axis setting then.
	            setAxisModel(this);
	        },

	        /**
	         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	         */
	        restore: function (dataZoomModel) {
	            if (dataZoomModel !== this._dataZoomModel) {
	                return;
	            }

	            this._valueWindow = this._percentWindow = null;
	            setAxisModel(this, true);
	        },

	        /**
	         * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	         */
	        filterData: function (dataZoomModel) {
	            if (dataZoomModel !== this._dataZoomModel) {
	                return;
	            }

	            var axisDim = this._dimName;
	            var seriesModels = this.getTargetSeriesModels();
	            var filterMode = dataZoomModel.get('filterMode');
	            var valueWindow = this._valueWindow;

	            // FIXME
	            // Toolbox may has dataZoom injected. And if there are stacked bar chart
	            // with NaN data, NaN will be filtered and stack will be wrong.
	            // So we need to force the mode to be set empty.
	            // In fect, it is not a big deal that do not support filterMode-'filter'
	            // when using toolbox#dataZoom, utill tooltip#dataZoom support "single axis
	            // selection" some day, which might need "adapt to data extent on the
	            // otherAxis", which is disabled by filterMode-'empty'.
	            var otherAxisModel = this.getOtherAxisModel();
	            if (dataZoomModel.get('$fromToolbox')
	                && otherAxisModel
	                && otherAxisModel.get('type') === 'category'
	            ) {
	                filterMode = 'empty';
	            }

	            // Process series data
	            each(seriesModels, function (seriesModel) {
	                var seriesData = seriesModel.getData();

	                seriesData && each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                    if (filterMode === 'empty') {
	                        seriesModel.setData(
	                            seriesData.map(dim, function (value) {
	                                return !isInWindow(value) ? NaN : value;
	                            })
	                        );
	                    }
	                    else {
	                        seriesData.filterSelf(dim, isInWindow);
	                    }
	                });
	            });

	            function isInWindow(value) {
	                return value >= valueWindow[0] && value <= valueWindow[1];
	            }
	        }
	    };

	    function calculateDataExtent(axisDim, seriesModels) {
	        var dataExtent = [Infinity, -Infinity];

	        each(seriesModels, function (seriesModel) {
	            var seriesData = seriesModel.getData();
	            if (seriesData) {
	                each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                    var seriesExtent = seriesData.getDataExtent(dim);
	                    seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
	                    seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
	                });
	            }
	        }, this);

	        if (dataExtent[1] < dataExtent[0]) {
	            dataExtent = [NaN, NaN];
	        }

	        return dataExtent;
	    }

	    function fixExtentByAxis(dataExtent, axisModel) {
	        var min = axisModel.getMin(true);
	        if (min != null && min !== 'dataMin') {
	            dataExtent[0] = min;
	        }
	        var max = axisModel.getMax(true);
	        if (max != null && max !== 'dataMax') {
	            dataExtent[1] = max;
	        }

	        if (!axisModel.get('scale', true)) {
	            dataExtent[0] > 0 && (dataExtent[0] = 0);
	            dataExtent[1] < 0 && (dataExtent[1] = 0);
	        }

	        return dataExtent;
	    }

	    function setAxisModel(axisProxy, isRestore) {
	        var axisModel = axisProxy.getAxisModel();

	        var percentWindow = axisProxy._percentWindow;
	        var valueWindow = axisProxy._valueWindow;

	        if (!percentWindow) {
	            return;
	        }

	        // [0, 500]: arbitrary value, guess axis extent.
	        var precision = numberUtil.getPixelPrecision(valueWindow, [0, 500]);
	        // isRestore or isFull
	        var useOrigin = isRestore || (percentWindow[0] === 0 && percentWindow[1] === 100);

	        axisModel.setRange(
	            useOrigin ? null : +valueWindow[0].toFixed(precision),
	            useOrigin ? null : +valueWindow[1].toFixed(precision)
	        );
	    }

	    module.exports = AxisProxy;



/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	

	    var ComponentView = __webpack_require__(268);

	    module.exports = ComponentView.extend({

	        type: 'dataZoom',

	        render: function (dataZoomModel, ecModel, api, payload) {
	            this.dataZoomModel = dataZoomModel;
	            this.ecModel = ecModel;
	            this.api = api;
	        },

	        /**
	         * Find the first target coordinate system.
	         *
	         * @protected
	         * @return {Object} {
	         *                   grid: [
	         *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},
	         *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},
	         *                       ...
	         *                   ],  // cartesians must not be null/undefined.
	         *                   polar: [
	         *                       {model: coord0, axisModels: [axis4], coordIndex: 0},
	         *                       ...
	         *                   ],  // polars must not be null/undefined.
	         *                   singleAxis: [
	         *                       {model: coord0, axisModels: [], coordIndex: 0}
	         *                   ]
	         */
	        getTargetCoordInfo: function () {
	            var dataZoomModel = this.dataZoomModel;
	            var ecModel = this.ecModel;
	            var coordSysLists = {};

	            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	                var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);
	                if (axisModel) {
	                    var coordModel = axisModel.getCoordSysModel();
	                    coordModel && save(
	                        coordModel,
	                        axisModel,
	                        coordSysLists[coordModel.mainType] || (coordSysLists[coordModel.mainType] = []),
	                        coordModel.componentIndex
	                    );
	                }
	            }, this);

	            function save(coordModel, axisModel, store, coordIndex) {
	                var item;
	                for (var i = 0; i < store.length; i++) {
	                    if (store[i].model === coordModel) {
	                        item = store[i];
	                        break;
	                    }
	                }
	                if (!item) {
	                    store.push(item = {
	                        model: coordModel, axisModels: [], coordIndex: coordIndex
	                    });
	                }
	                item.axisModels.push(axisModel);
	            }

	            return coordSysLists;
	        }

	    });



/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */


	    var DataZoomModel = __webpack_require__(569);

	    var SliderZoomModel = DataZoomModel.extend({

	        type: 'dataZoom.slider',

	        layoutMode: 'box',

	        /**
	         * @protected
	         */
	        defaultOption: {
	            show: true,

	            // ph => placeholder. Using placehoder here because
	            // deault value can only be drived in view stage.
	            right: 'ph',  // Default align to grid rect.
	            top: 'ph',    // Default align to grid rect.
	            width: 'ph',  // Default align to grid rect.
	            height: 'ph', // Default align to grid rect.
	            left: null,   // Default align to grid rect.
	            bottom: null, // Default align to grid rect.

	            backgroundColor: 'rgba(47,69,84,0)',    // Background of slider zoom component.
	            // dataBackgroundColor: '#ddd',         // Background coor of data shadow and border of box,
	                                                    // highest priority, remain for compatibility of
	                                                    // previous version, but not recommended any more.
	            dataBackground: {
	                lineStyle: {
	                    color: '#2f4554',
	                    width: 0.5,
	                    opacity: 0.3
	                },
	                areaStyle: {
	                    color: 'rgba(47,69,84,0.3)',
	                    opacity: 0.3
	                }
	            },
	            borderColor: '#ddd',                    // border color of the box. For compatibility,
	                                                    // if dataBackgroundColor is set, borderColor
	                                                    // is ignored.

	            fillerColor: 'rgba(167,183,204,0.4)',     // Color of selected area.
	            // handleColor: 'rgba(89,170,216,0.95)',     // Color of handle.
	            // handleIcon: 'path://M4.9,17.8c0-1.4,4.5-10.5,5.5-12.4c0-0.1,0.6-1.1,0.9-1.1c0.4,0,0.9,1,0.9,1.1c1.1,2.2,5.4,11,5.4,12.4v17.8c0,1.5-0.6,2.1-1.3,2.1H6.1c-0.7,0-1.3-0.6-1.3-2.1V17.8z',
	            handleIcon: 'M8.2,13.6V3.9H6.3v9.7H3.1v14.9h3.3v9.7h1.8v-9.7h3.3V13.6H8.2z M9.7,24.4H4.8v-1.4h4.9V24.4z M9.7,19.1H4.8v-1.4h4.9V19.1z',
	            // Percent of the slider height
	            handleSize: '100%',

	            handleStyle: {
	                color: '#a7b7cc'
	            },

	            labelPrecision: null,
	            labelFormatter: null,
	            showDetail: true,
	            showDataShadow: 'auto',                 // Default auto decision.
	            realtime: true,
	            zoomLock: false,                        // Whether disable zoom.
	            textStyle: {
	                color: '#333'
	            }
	        }

	    });

	    module.exports = SliderZoomModel;



/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var throttle = __webpack_require__(320);
	    var DataZoomView = __webpack_require__(572);
	    var Rect = graphic.Rect;
	    var numberUtil = __webpack_require__(246);
	    var linearMap = numberUtil.linearMap;
	    var layout = __webpack_require__(260);
	    var sliderMove = __webpack_require__(575);
	    var asc = numberUtil.asc;
	    var bind = zrUtil.bind;
	    // var mathMax = Math.max;
	    var each = zrUtil.each;

	    // Constants
	    var DEFAULT_LOCATION_EDGE_GAP = 7;
	    var DEFAULT_FRAME_BORDER_WIDTH = 1;
	    var DEFAULT_FILLER_SIZE = 30;
	    var HORIZONTAL = 'horizontal';
	    var VERTICAL = 'vertical';
	    var LABEL_GAP = 5;
	    var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];

	    var SliderZoomView = DataZoomView.extend({

	        type: 'dataZoom.slider',

	        init: function (ecModel, api) {

	            /**
	             * @private
	             * @type {Object}
	             */
	            this._displayables = {};

	            /**
	             * @private
	             * @type {string}
	             */
	            this._orient;

	            /**
	             * [0, 100]
	             * @private
	             */
	            this._range;

	            /**
	             * [coord of the first handle, coord of the second handle]
	             * @private
	             */
	            this._handleEnds;

	            /**
	             * [length, thick]
	             * @private
	             * @type {Array.<number>}
	             */
	            this._size;

	            /**
	             * @private
	             * @type {number}
	             */
	            this._handleWidth;

	            /**
	             * @private
	             * @type {number}
	             */
	            this._handleHeight;

	            /**
	             * @private
	             */
	            this._location;

	            /**
	             * @private
	             */
	            this._dragging;

	            /**
	             * @private
	             */
	            this._dataShadowInfo;

	            this.api = api;
	        },

	        /**
	         * @override
	         */
	        render: function (dataZoomModel, ecModel, api, payload) {
	            SliderZoomView.superApply(this, 'render', arguments);

	            throttle.createOrUpdate(
	                this,
	                '_dispatchZoomAction',
	                this.dataZoomModel.get('throttle'),
	                'fixRate'
	            );

	            this._orient = dataZoomModel.get('orient');

	            if (this.dataZoomModel.get('show') === false) {
	                this.group.removeAll();
	                return;
	            }

	            // Notice: this._resetInterval() should not be executed when payload.type
	            // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'
	            // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,
	            if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {
	                this._buildView();
	            }

	            this._updateView();
	        },

	        /**
	         * @override
	         */
	        remove: function () {
	            SliderZoomView.superApply(this, 'remove', arguments);
	            throttle.clear(this, '_dispatchZoomAction');
	        },

	        /**
	         * @override
	         */
	        dispose: function () {
	            SliderZoomView.superApply(this, 'dispose', arguments);
	            throttle.clear(this, '_dispatchZoomAction');
	        },

	        _buildView: function () {
	            var thisGroup = this.group;

	            thisGroup.removeAll();

	            this._resetLocation();
	            this._resetInterval();

	            var barGroup = this._displayables.barGroup = new graphic.Group();

	            this._renderBackground();

	            this._renderHandle();

	            this._renderDataShadow();

	            thisGroup.add(barGroup);

	            this._positionGroup();
	        },

	        /**
	         * @private
	         */
	        _resetLocation: function () {
	            var dataZoomModel = this.dataZoomModel;
	            var api = this.api;

	            // If some of x/y/width/height are not specified,
	            // auto-adapt according to target grid.
	            var coordRect = this._findCoordRect();
	            var ecSize = {width: api.getWidth(), height: api.getHeight()};
	            // Default align by coordinate system rect.
	            var positionInfo = this._orient === HORIZONTAL
	                ? {
	                    // Why using 'right', because right should be used in vertical,
	                    // and it is better to be consistent for dealing with position param merge.
	                    right: ecSize.width - coordRect.x - coordRect.width,
	                    top: (ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP),
	                    width: coordRect.width,
	                    height: DEFAULT_FILLER_SIZE
	                }
	                : { // vertical
	                    right: DEFAULT_LOCATION_EDGE_GAP,
	                    top: coordRect.y,
	                    width: DEFAULT_FILLER_SIZE,
	                    height: coordRect.height
	                };

	            // Do not write back to option and replace value 'ph', because
	            // the 'ph' value should be recalculated when resize.
	            var layoutParams = layout.getLayoutParams(dataZoomModel.option);

	            // Replace the placeholder value.
	            zrUtil.each(['right', 'top', 'width', 'height'], function (name) {
	                if (layoutParams[name] === 'ph') {
	                    layoutParams[name] = positionInfo[name];
	                }
	            });

	            var layoutRect = layout.getLayoutRect(
	                layoutParams,
	                ecSize,
	                dataZoomModel.padding
	            );

	            this._location = {x: layoutRect.x, y: layoutRect.y};
	            this._size = [layoutRect.width, layoutRect.height];
	            this._orient === VERTICAL && this._size.reverse();
	        },

	        /**
	         * @private
	         */
	        _positionGroup: function () {
	            var thisGroup = this.group;
	            var location = this._location;
	            var orient = this._orient;

	            // Just use the first axis to determine mapping.
	            var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
	            var inverse = targetAxisModel && targetAxisModel.get('inverse');

	            var barGroup = this._displayables.barGroup;
	            var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;

	            // Transform barGroup.
	            barGroup.attr(
	                (orient === HORIZONTAL && !inverse)
	                ? {scale: otherAxisInverse ? [1, 1] : [1, -1]}
	                : (orient === HORIZONTAL && inverse)
	                ? {scale: otherAxisInverse ? [-1, 1] : [-1, -1]}
	                : (orient === VERTICAL && !inverse)
	                ? {scale: otherAxisInverse ? [1, -1] : [1, 1], rotation: Math.PI / 2}
	                // Dont use Math.PI, considering shadow direction.
	                : {scale: otherAxisInverse ? [-1, -1] : [-1, 1], rotation: Math.PI / 2}
	            );

	            // Position barGroup
	            var rect = thisGroup.getBoundingRect([barGroup]);
	            thisGroup.attr('position', [location.x - rect.x, location.y - rect.y]);
	        },

	        /**
	         * @private
	         */
	        _getViewExtent: function () {
	            return [0, this._size[0]];
	        },

	        _renderBackground : function () {
	            var dataZoomModel = this.dataZoomModel;
	            var size = this._size;

	            this._displayables.barGroup.add(new Rect({
	                silent: true,
	                shape: {
	                    x: 0, y: 0, width: size[0], height: size[1]
	                },
	                style: {
	                    fill: dataZoomModel.get('backgroundColor')
	                },
	                z2: -40
	            }));
	        },

	        _renderDataShadow: function () {
	            var info = this._dataShadowInfo = this._prepareDataShadowInfo();

	            if (!info) {
	                return;
	            }

	            var size = this._size;
	            var seriesModel = info.series;
	            var data = seriesModel.getRawData();
	            var otherDim = seriesModel.getShadowDim
	                ? seriesModel.getShadowDim() // @see candlestick
	                : info.otherDim;

	            if (otherDim == null) {
	                return;
	            }

	            var otherDataExtent = data.getDataExtent(otherDim);
	            // Nice extent.
	            var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;
	            otherDataExtent = [
	                otherDataExtent[0] - otherOffset,
	                otherDataExtent[1] + otherOffset
	            ];
	            var otherShadowExtent = [0, size[1]];

	            var thisShadowExtent = [0, size[0]];

	            var areaPoints = [[size[0], 0], [0, 0]];
	            var linePoints = [];
	            var step = thisShadowExtent[1] / (data.count() - 1);
	            var thisCoord = 0;

	            // Optimize for large data shadow
	            var stride = Math.round(data.count() / size[0]);
	            var lastIsEmpty;
	            data.each([otherDim], function (value, index) {
	                if (stride > 0 && (index % stride)) {
	                    thisCoord += step;
	                    return;
	                }

	                // FIXME
	                // Should consider axis.min/axis.max when drawing dataShadow.

	                // FIXME
	                // 应该使用统一的空判断？还是在list里进行空判断？
	                var isEmpty = value == null || isNaN(value) || value === '';
	                // See #4235.
	                var otherCoord = isEmpty
	                    ? 0 : linearMap(value, otherDataExtent, otherShadowExtent, true);

	                // Attempt to draw data shadow precisely when there are empty value.
	                if (isEmpty && !lastIsEmpty && index) {
	                    areaPoints.push([areaPoints[areaPoints.length - 1][0], 0]);
	                    linePoints.push([linePoints[linePoints.length - 1][0], 0]);
	                }
	                else if (!isEmpty && lastIsEmpty) {
	                    areaPoints.push([thisCoord, 0]);
	                    linePoints.push([thisCoord, 0]);
	                }

	                areaPoints.push([thisCoord, otherCoord]);
	                linePoints.push([thisCoord, otherCoord]);

	                thisCoord += step;
	                lastIsEmpty = isEmpty;
	            });

	            var dataZoomModel = this.dataZoomModel;
	            // var dataBackgroundModel = dataZoomModel.getModel('dataBackground');
	            this._displayables.barGroup.add(new graphic.Polygon({
	                shape: {points: areaPoints},
	                style: zrUtil.defaults(
	                    {fill: dataZoomModel.get('dataBackgroundColor')},
	                    dataZoomModel.getModel('dataBackground.areaStyle').getAreaStyle()
	                ),
	                silent: true,
	                z2: -20
	            }));
	            this._displayables.barGroup.add(new graphic.Polyline({
	                shape: {points: linePoints},
	                style: dataZoomModel.getModel('dataBackground.lineStyle').getLineStyle(),
	                silent: true,
	                z2: -19
	            }));
	        },

	        _prepareDataShadowInfo: function () {
	            var dataZoomModel = this.dataZoomModel;
	            var showDataShadow = dataZoomModel.get('showDataShadow');

	            if (showDataShadow === false) {
	                return;
	            }

	            // Find a representative series.
	            var result;
	            var ecModel = this.ecModel;

	            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	                var seriesModels = dataZoomModel
	                    .getAxisProxy(dimNames.name, axisIndex)
	                    .getTargetSeriesModels();

	                zrUtil.each(seriesModels, function (seriesModel) {
	                    if (result) {
	                        return;
	                    }

	                    if (showDataShadow !== true && zrUtil.indexOf(
	                            SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')
	                        ) < 0
	                    ) {
	                        return;
	                    }

	                    var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;
	                    var otherDim = getOtherDim(dimNames.name);
	                    var otherAxisInverse;
	                    var coordSys = seriesModel.coordinateSystem;
	                    if (otherDim != null && coordSys.getOtherAxis) {
	                        otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;
	                    }

	                    result = {
	                        thisAxis: thisAxis,
	                        series: seriesModel,
	                        thisDim: dimNames.name,
	                        otherDim: otherDim,
	                        otherAxisInverse: otherAxisInverse
	                    };

	                }, this);

	            }, this);

	            return result;
	        },

	        _renderHandle: function () {
	            var displaybles = this._displayables;
	            var handles = displaybles.handles = [];
	            var handleLabels = displaybles.handleLabels = [];
	            var barGroup = this._displayables.barGroup;
	            var size = this._size;
	            var dataZoomModel = this.dataZoomModel;

	            barGroup.add(displaybles.filler = new Rect({
	                draggable: true,
	                cursor: 'move',
	                drift: bind(this._onDragMove, this, 'all'),
	                ondragstart: bind(this._showDataInfo, this, true),
	                ondragend: bind(this._onDragEnd, this),
	                onmouseover: bind(this._showDataInfo, this, true),
	                onmouseout: bind(this._showDataInfo, this, false),
	                style: {
	                    fill: dataZoomModel.get('fillerColor'),
	                    textPosition : 'inside'
	                }
	            }));

	            // Frame border.
	            barGroup.add(new Rect(graphic.subPixelOptimizeRect({
	                silent: true,
	                shape: {
	                    x: 0,
	                    y: 0,
	                    width: size[0],
	                    height: size[1]
	                },
	                style: {
	                    stroke: dataZoomModel.get('dataBackgroundColor')
	                        || dataZoomModel.get('borderColor'),
	                    lineWidth: DEFAULT_FRAME_BORDER_WIDTH,
	                    fill: 'rgba(0,0,0,0)'
	                }
	            })));

	            var iconStr = dataZoomModel.get('handleIcon');
	            each([0, 1], function (handleIndex) {
	                var path = graphic.makePath(iconStr, {
	                    style: {
	                        strokeNoScale: true
	                    },
	                    rectHover: true,
	                    cursor: this._orient === 'vertical' ? 'ns-resize' : 'ew-resize',
	                    draggable: true,
	                    drift: bind(this._onDragMove, this, handleIndex),
	                    ondragend: bind(this._onDragEnd, this),
	                    onmouseover: bind(this._showDataInfo, this, true),
	                    onmouseout: bind(this._showDataInfo, this, false)
	                }, {
	                    x: -0.5,
	                    y: 0,
	                    width: 1,
	                    height: 1
	                }, 'center');

	                var bRect = path.getBoundingRect();
	                this._handleHeight = numberUtil.parsePercent(dataZoomModel.get('handleSize'), this._size[1]);
	                this._handleWidth = bRect.width / bRect.height * this._handleHeight;

	                path.setStyle(dataZoomModel.getModel('handleStyle').getItemStyle());
	                var handleColor = dataZoomModel.get('handleColor');
	                // Compatitable with previous version
	                if (handleColor != null) {
	                    path.style.fill = handleColor;
	                }

	                barGroup.add(handles[handleIndex] = path);

	                var textStyleModel = dataZoomModel.textStyleModel;

	                this.group.add(
	                    handleLabels[handleIndex] = new graphic.Text({
	                    silent: true,
	                    invisible: true,
	                    style: {
	                        x: 0, y: 0, text: '',
	                        textVerticalAlign: 'middle',
	                        textAlign: 'center',
	                        fill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont()
	                    },
	                    z2: 10
	                }));

	            }, this);
	        },

	        /**
	         * @private
	         */
	        _resetInterval: function () {
	            var range = this._range = this.dataZoomModel.getPercentRange();
	            var viewExtent = this._getViewExtent();

	            this._handleEnds = [
	                linearMap(range[0], [0, 100], viewExtent, true),
	                linearMap(range[1], [0, 100], viewExtent, true)
	            ];
	        },

	        /**
	         * @private
	         * @param {(number|string)} handleIndex 0 or 1 or 'all'
	         * @param {number} dx
	         * @param {number} dy
	         */
	        _updateInterval: function (handleIndex, delta) {
	            var handleEnds = this._handleEnds;
	            var viewExtend = this._getViewExtent();

	            sliderMove(
	                delta,
	                handleEnds,
	                viewExtend,
	                (handleIndex === 'all' || this.dataZoomModel.get('zoomLock'))
	                    ? 'rigid' : 'cross',
	                handleIndex
	            );

	            this._range = asc([
	                linearMap(handleEnds[0], viewExtend, [0, 100], true),
	                linearMap(handleEnds[1], viewExtend, [0, 100], true)
	            ]);
	        },

	        /**
	         * @private
	         */
	        _updateView: function (nonRealtime) {
	            var displaybles = this._displayables;
	            var handleEnds = this._handleEnds;
	            var handleInterval = asc(handleEnds.slice());
	            var size = this._size;

	            each([0, 1], function (handleIndex) {
	                // Handles
	                var handle = displaybles.handles[handleIndex];
	                var handleHeight = this._handleHeight;
	                handle.attr({
	                    scale: [handleHeight, handleHeight],
	                    position: [handleEnds[handleIndex], size[1] / 2 - handleHeight / 2]
	                });
	            }, this);

	            // Filler
	            displaybles.filler.setShape({
	                x: handleInterval[0],
	                y: 0,
	                width: handleInterval[1] - handleInterval[0],
	                height: size[1]
	            });

	            this._updateDataInfo(nonRealtime);
	        },

	        /**
	         * @private
	         */
	        _updateDataInfo: function (nonRealtime) {
	            var dataZoomModel = this.dataZoomModel;
	            var displaybles = this._displayables;
	            var handleLabels = displaybles.handleLabels;
	            var orient = this._orient;
	            var labelTexts = ['', ''];

	            // FIXME
	            // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）
	            if (dataZoomModel.get('showDetail')) {
	                var axisProxy = dataZoomModel.findRepresentativeAxisProxy();

	                if (axisProxy) {
	                    var axis = axisProxy.getAxisModel().axis;
	                    var range = this._range;

	                    var dataInterval = nonRealtime
	                        // See #4434, data and axis are not processed and reset yet in non-realtime mode.
	                        ? axisProxy.calculateDataWindow({
	                            start: range[0], end: range[1]
	                        }).valueWindow
	                        : axisProxy.getDataValueWindow();

	                    labelTexts = [
	                        this._formatLabel(dataInterval[0], axis),
	                        this._formatLabel(dataInterval[1], axis)
	                    ];
	                }
	            }

	            var orderedHandleEnds = asc(this._handleEnds.slice());

	            setLabel.call(this, 0);
	            setLabel.call(this, 1);

	            function setLabel(handleIndex) {
	                // Label
	                // Text should not transform by barGroup.
	                // Ignore handlers transform
	                var barTransform = graphic.getTransform(
	                    displaybles.handles[handleIndex].parent, this.group
	                );
	                var direction = graphic.transformDirection(
	                    handleIndex === 0 ? 'right' : 'left', barTransform
	                );
	                var offset = this._handleWidth / 2 + LABEL_GAP;
	                var textPoint = graphic.applyTransform(
	                    [
	                        orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset),
	                        this._size[1] / 2
	                    ],
	                    barTransform
	                );
	                handleLabels[handleIndex].setStyle({
	                    x: textPoint[0],
	                    y: textPoint[1],
	                    textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,
	                    textAlign: orient === HORIZONTAL ? direction : 'center',
	                    text: labelTexts[handleIndex]
	                });
	            }
	        },

	        /**
	         * @private
	         */
	        _formatLabel: function (value, axis) {
	            var dataZoomModel = this.dataZoomModel;
	            var labelFormatter = dataZoomModel.get('labelFormatter');

	            var labelPrecision = dataZoomModel.get('labelPrecision');
	            if (labelPrecision == null || labelPrecision === 'auto') {
	                labelPrecision = axis.getPixelPrecision();
	            }

	            var valueStr = (value == null || isNaN(value))
	                ? ''
	                // FIXME Glue code
	                : (axis.type === 'category' || axis.type === 'time')
	                    ? axis.scale.getLabel(Math.round(value))
	                    // param of toFixed should less then 20.
	                    : value.toFixed(Math.min(labelPrecision, 20));

	            return zrUtil.isFunction(labelFormatter)
	                ? labelFormatter(value, valueStr)
	                : zrUtil.isString(labelFormatter)
	                ? labelFormatter.replace('{value}', valueStr)
	                : valueStr;
	        },

	        /**
	         * @private
	         * @param {boolean} showOrHide true: show, false: hide
	         */
	        _showDataInfo: function (showOrHide) {
	            // Always show when drgging.
	            showOrHide = this._dragging || showOrHide;

	            var handleLabels = this._displayables.handleLabels;
	            handleLabels[0].attr('invisible', !showOrHide);
	            handleLabels[1].attr('invisible', !showOrHide);
	        },

	        _onDragMove: function (handleIndex, dx, dy) {
	            this._dragging = true;

	            // Transform dx, dy to bar coordination.
	            var vertex = this._applyBarTransform([dx, dy], true);

	            this._updateInterval(handleIndex, vertex[0]);

	            var realtime = this.dataZoomModel.get('realtime');

	            this._updateView(!realtime);

	            if (realtime) {
	                realtime && this._dispatchZoomAction();
	            }
	        },

	        _onDragEnd: function () {
	            this._dragging = false;
	            this._showDataInfo(false);
	            this._dispatchZoomAction();
	        },

	        /**
	         * This action will be throttled.
	         * @private
	         */
	        _dispatchZoomAction: function () {
	            var range = this._range;

	            this.api.dispatchAction({
	                type: 'dataZoom',
	                from: this.uid,
	                dataZoomId: this.dataZoomModel.id,
	                start: range[0],
	                end: range[1]
	            });
	        },

	        /**
	         * @private
	         */
	        _applyBarTransform: function (vertex, inverse) {
	            var barTransform = this._displayables.barGroup.getLocalTransform();
	            return graphic.applyTransform(vertex, barTransform, inverse);
	        },

	        /**
	         * @private
	         */
	        _findCoordRect: function () {
	            // Find the grid coresponding to the first axis referred by dataZoom.
	            var rect;
	            each(this.getTargetCoordInfo(), function (coordInfoList) {
	                if (!rect && coordInfoList.length) {
	                    var coordSys = coordInfoList[0].model.coordinateSystem;
	                    rect = coordSys.getRect && coordSys.getRect();
	                }
	            });
	            if (!rect) {
	                var width = this.api.getWidth();
	                var height = this.api.getHeight();
	                rect = {
	                    x: width * 0.2,
	                    y: height * 0.2,
	                    width: width * 0.6,
	                    height: height * 0.6
	                };
	            }

	            return rect;
	        }

	    });

	    function getOtherDim(thisDim) {
	        // FIXME
	        // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好
	        var map = {x: 'y', y: 'x', radius: 'angle', angle: 'radius'};
	        return map[thisDim];
	    }

	    module.exports = SliderZoomView;



/***/ },
/* 575 */
/***/ function(module, exports) {

	

	    /**
	     * Calculate slider move result.
	     *
	     * @param {number} delta Move length.
	     * @param {Array.<number>} handleEnds handleEnds[0] and be bigger then handleEnds[1].
	     *                                    handleEnds will be modified in this method.
	     * @param {Array.<number>} extent handleEnds is restricted by extent.
	     *                                extent[0] should less or equals than extent[1].
	     * @param {string} mode 'rigid': Math.abs(handleEnds[0] - handleEnds[1]) remain unchanged,
	     *                      'cross' handleEnds[0] can be bigger then handleEnds[1],
	     *                      'push' handleEnds[0] can not be bigger then handleEnds[1],
	     *                              when they touch, one push other.
	     * @param {number} handleIndex If mode is 'rigid', handleIndex is not required.
	     * @param {Array.<number>} The input handleEnds.
	     */
	    module.exports = function (delta, handleEnds, extent, mode, handleIndex) {
	        if (!delta) {
	            return handleEnds;
	        }

	        if (mode === 'rigid') {
	            delta = getRealDelta(delta, handleEnds, extent);
	            handleEnds[0] += delta;
	            handleEnds[1] += delta;
	        }
	        else {
	            delta = getRealDelta(delta, handleEnds[handleIndex], extent);
	            handleEnds[handleIndex] += delta;

	            if (mode === 'push' && handleEnds[0] > handleEnds[1]) {
	                handleEnds[1 - handleIndex] = handleEnds[handleIndex];
	            }
	        }

	        return handleEnds;

	        function getRealDelta(delta, handleEnds, extent) {
	            var handleMinMax = !handleEnds.length
	                ? [handleEnds, handleEnds]
	                : handleEnds.slice();
	            handleEnds[0] > handleEnds[1] && handleMinMax.reverse();

	            if (delta < 0 && handleMinMax[0] + delta < extent[0]) {
	                delta = extent[0] - handleMinMax[0];
	            }
	            if (delta > 0 && handleMinMax[1] + delta > extent[1]) {
	                delta = extent[1] - handleMinMax[1];
	            }
	            return delta;
	        }
	    };


/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */


	    module.exports = __webpack_require__(569).extend({

	        type: 'dataZoom.inside',

	        /**
	         * @protected
	         */
	        defaultOption: {
	            disabled: false,   // Whether disable this inside zoom.
	            zoomLock: false  // Whether disable zoom but only pan.
	        }
	    });


/***/ },
/* 577 */
/***/ function(module, exports, __webpack_require__) {

	

	    var DataZoomView = __webpack_require__(572);
	    var zrUtil = __webpack_require__(243);
	    var sliderMove = __webpack_require__(575);
	    var roams = __webpack_require__(578);
	    var bind = zrUtil.bind;

	    var InsideZoomView = DataZoomView.extend({

	        type: 'dataZoom.inside',

	        /**
	         * @override
	         */
	        init: function (ecModel, api) {
	            /**
	             * 'throttle' is used in this.dispatchAction, so we save range
	             * to avoid missing some 'pan' info.
	             * @private
	             * @type {Array.<number>}
	             */
	            this._range;
	        },

	        /**
	         * @override
	         */
	        render: function (dataZoomModel, ecModel, api, payload) {
	            InsideZoomView.superApply(this, 'render', arguments);

	            // Notice: origin this._range should be maintained, and should not be re-fetched
	            // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'
	            // info will be missed because of 'throttle' of this.dispatchAction.
	            if (roams.shouldRecordRange(payload, dataZoomModel.id)) {
	                this._range = dataZoomModel.getPercentRange();
	            }

	            // Reset controllers.
	            zrUtil.each(this.getTargetCoordInfo(), function (coordInfoList, coordSysName) {

	                var allCoordIds = zrUtil.map(coordInfoList, function (coordInfo) {
	                    return roams.generateCoordId(coordInfo.model);
	                });

	                zrUtil.each(coordInfoList, function (coordInfo) {
	                    var coordModel = coordInfo.model;

	                    roams.register(
	                        api,
	                        {
	                            coordId: roams.generateCoordId(coordModel),
	                            allCoordIds: allCoordIds,
	                            containsPoint: function (x, y) {
	                                return coordModel.coordinateSystem.containPoint([x, y]);
	                            },
	                            dataZoomId: dataZoomModel.id,
	                            throttleRate: dataZoomModel.get('throttle', true),
	                            panGetRange: bind(this._onPan, this, coordInfo, coordSysName),
	                            zoomGetRange: bind(this._onZoom, this, coordInfo, coordSysName)
	                        }
	                    );
	                }, this);

	            }, this);
	        },

	        /**
	         * @override
	         */
	        dispose: function () {
	            roams.unregister(this.api, this.dataZoomModel.id);
	            InsideZoomView.superApply(this, 'dispose', arguments);
	            this._range = null;
	        },

	        /**
	         * @private
	         */
	        _onPan: function (coordInfo, coordSysName, controller, dx, dy, oldX, oldY, newX, newY) {
	            if (this.dataZoomModel.option.disabled) {
	                return this._range;
	            }

	            var range = this._range.slice();

	            // Calculate transform by the first axis.
	            var axisModel = coordInfo.axisModels[0];
	            if (!axisModel) {
	                return;
	            }

	            var directionInfo = getDirectionInfo[coordSysName](
	                [oldX, oldY], [newX, newY], axisModel, controller, coordInfo
	            );

	            var percentDelta = directionInfo.signal
	                * (range[1] - range[0])
	                * directionInfo.pixel / directionInfo.pixelLength;

	            sliderMove(percentDelta, range, [0, 100], 'rigid');

	            return (this._range = range);
	        },

	        /**
	         * @private
	         */
	        _onZoom: function (coordInfo, coordSysName, controller, scale, mouseX, mouseY) {
	            var option = this.dataZoomModel.option;

	            if (option.disabled || option.zoomLock) {
	                return this._range;
	            }

	            var range = this._range.slice();

	            // Calculate transform by the first axis.
	            var axisModel = coordInfo.axisModels[0];
	            if (!axisModel) {
	                return;
	            }

	            var directionInfo = getDirectionInfo[coordSysName](
	                null, [mouseX, mouseY], axisModel, controller, coordInfo
	            );

	            var percentPoint = (directionInfo.pixel - directionInfo.pixelStart) /
	                directionInfo.pixelLength * (range[1] - range[0]) + range[0];

	            scale = Math.max(1 / scale, 0);
	            range[0] = (range[0] - percentPoint) * scale + percentPoint;
	            range[1] = (range[1] - percentPoint) * scale + percentPoint;
	            return (this._range = fixRange(range));
	        }

	    });

	    var getDirectionInfo = {

	        grid: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	            var axis = axisModel.axis;
	            var ret = {};
	            var rect = coordInfo.model.coordinateSystem.getRect();
	            oldPoint = oldPoint || [0, 0];

	            if (axis.dim === 'x') {
	                ret.pixel = newPoint[0] - oldPoint[0];
	                ret.pixelLength = rect.width;
	                ret.pixelStart = rect.x;
	                ret.signal = axis.inverse ? 1 : -1;
	            }
	            else { // axis.dim === 'y'
	                ret.pixel = newPoint[1] - oldPoint[1];
	                ret.pixelLength = rect.height;
	                ret.pixelStart = rect.y;
	                ret.signal = axis.inverse ? -1 : 1;
	            }

	            return ret;
	        },

	        polar: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	            var axis = axisModel.axis;
	            var ret = {};
	            var polar = coordInfo.model.coordinateSystem;
	            var radiusExtent = polar.getRadiusAxis().getExtent();
	            var angleExtent = polar.getAngleAxis().getExtent();

	            oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [0, 0];
	            newPoint = polar.pointToCoord(newPoint);

	            if (axisModel.mainType === 'radiusAxis') {
	                ret.pixel = newPoint[0] - oldPoint[0];
	                // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);
	                // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);
	                ret.pixelLength = radiusExtent[1] - radiusExtent[0];
	                ret.pixelStart = radiusExtent[0];
	                ret.signal = axis.inverse ? 1 : -1;
	            }
	            else { // 'angleAxis'
	                ret.pixel = newPoint[1] - oldPoint[1];
	                // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);
	                // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);
	                ret.pixelLength = angleExtent[1] - angleExtent[0];
	                ret.pixelStart = angleExtent[0];
	                ret.signal = axis.inverse ? -1 : 1;
	            }

	            return ret;
	        },

	        singleAxis: function (oldPoint, newPoint, axisModel, controller, coordInfo) {
	            var axis = axisModel.axis;
	            var rect = coordInfo.model.coordinateSystem.getRect();
	            var ret = {};

	            oldPoint = oldPoint || [0, 0];

	            if (axis.orient === 'horizontal') {
	                ret.pixel = newPoint[0] - oldPoint[0];
	                ret.pixelLength = rect.width;
	                ret.pixelStart = rect.x;
	                ret.signal = axis.inverse ? 1 : -1;
	            }
	            else { // 'vertical'
	                ret.pixel = newPoint[1] - oldPoint[1];
	                ret.pixelLength = rect.height;
	                ret.pixelStart = rect.y;
	                ret.signal = axis.inverse ? -1 : 1;
	            }

	            return ret;
	        }
	    };

	    function fixRange(range) {
	        // Clamp, using !(<= or >=) to handle NaN.
	        // jshint ignore:start
	        var bound = [0, 100];
	        !(range[0] <= bound[1]) && (range[0] = bound[1]);
	        !(range[1] <= bound[1]) && (range[1] = bound[1]);
	        !(range[0] >= bound[0]) && (range[0] = bound[0]);
	        !(range[1] >= bound[0]) && (range[1] = bound[0]);
	        // jshint ignore:end

	        return range;
	    }

	    module.exports = InsideZoomView;


/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Roam controller manager.
	 */


	    // Only create one roam controller for each coordinate system.
	    // one roam controller might be refered by two inside data zoom
	    // components (for example, one for x and one for y). When user
	    // pan or zoom, only dispatch one action for those data zoom
	    // components.

	    var zrUtil = __webpack_require__(243);
	    var RoamController = __webpack_require__(416);
	    var throttle = __webpack_require__(320);
	    var curry = zrUtil.curry;

	    var ATTR = '\0_ec_dataZoom_roams';

	    var roams = {

	        /**
	         * @public
	         * @param {module:echarts/ExtensionAPI} api
	         * @param {Object} dataZoomInfo
	         * @param {string} dataZoomInfo.coordId
	         * @param {Function} dataZoomInfo.containsPoint
	         * @param {Array.<string>} dataZoomInfo.allCoordIds
	         * @param {string} dataZoomInfo.dataZoomId
	         * @param {number} dataZoomInfo.throttleRate
	         * @param {Function} dataZoomInfo.panGetRange
	         * @param {Function} dataZoomInfo.zoomGetRange
	         */
	        register: function (api, dataZoomInfo) {
	            var store = giveStore(api);
	            var theDataZoomId = dataZoomInfo.dataZoomId;
	            var theCoordId = dataZoomInfo.coordId;

	            // Do clean when a dataZoom changes its target coordnate system.
	            // Avoid memory leak, dispose all not-used-registered.
	            zrUtil.each(store, function (record, coordId) {
	                var dataZoomInfos = record.dataZoomInfos;
	                if (dataZoomInfos[theDataZoomId]
	                    && zrUtil.indexOf(dataZoomInfo.allCoordIds, theCoordId) < 0
	                ) {
	                    delete dataZoomInfos[theDataZoomId];
	                    record.count--;
	                }
	            });

	            cleanStore(store);

	            var record = store[theCoordId];
	            // Create if needed.
	            if (!record) {
	                record = store[theCoordId] = {
	                    coordId: theCoordId,
	                    dataZoomInfos: {},
	                    count: 0
	                };
	                record.controller = createController(api, dataZoomInfo, record);
	                record.dispatchAction = zrUtil.curry(dispatchAction, api);
	            }

	            // Consider resize, area should be always updated.
	            record.controller.setContainsPoint(dataZoomInfo.containsPoint);

	            // Update throttle.
	            throttle.createOrUpdate(
	                record,
	                'dispatchAction',
	                dataZoomInfo.throttleRate,
	                'fixRate'
	            );

	            // Update reference of dataZoom.
	            !(record.dataZoomInfos[theDataZoomId]) && record.count++;
	            record.dataZoomInfos[theDataZoomId] = dataZoomInfo;
	        },

	        /**
	         * @public
	         * @param {module:echarts/ExtensionAPI} api
	         * @param {string} dataZoomId
	         */
	        unregister: function (api, dataZoomId) {
	            var store = giveStore(api);

	            zrUtil.each(store, function (record) {
	                record.controller.dispose();
	                var dataZoomInfos = record.dataZoomInfos;
	                if (dataZoomInfos[dataZoomId]) {
	                    delete dataZoomInfos[dataZoomId];
	                    record.count--;
	                }
	            });

	            cleanStore(store);
	        },

	        /**
	         * @public
	         */
	        shouldRecordRange: function (payload, dataZoomId) {
	            if (payload && payload.type === 'dataZoom' && payload.batch) {
	                for (var i = 0, len = payload.batch.length; i < len; i++) {
	                    if (payload.batch[i].dataZoomId === dataZoomId) {
	                        return false;
	                    }
	                }
	            }
	            return true;
	        },

	        /**
	         * @public
	         */
	        generateCoordId: function (coordModel) {
	            return coordModel.type + '\0_' + coordModel.id;
	        }
	    };

	    /**
	     * Key: coordId, value: {dataZoomInfos: [], count, controller}
	     * @type {Array.<Object>}
	     */
	    function giveStore(api) {
	        // Mount store on zrender instance, so that we do not
	        // need to worry about dispose.
	        var zr = api.getZr();
	        return zr[ATTR] || (zr[ATTR] = {});
	    }

	    function createController(api, dataZoomInfo, newRecord) {
	        var controller = new RoamController(api.getZr());
	        controller.enable();
	        controller.on('pan', curry(onPan, newRecord));
	        controller.on('zoom', curry(onZoom, newRecord));

	        return controller;
	    }

	    function cleanStore(store) {
	        zrUtil.each(store, function (record, coordId) {
	            if (!record.count) {
	                record.controller.dispose();
	                delete store[coordId];
	            }
	        });
	    }

	    function onPan(record, dx, dy, oldX, oldY, newX, newY) {
	        wrapAndDispatch(record, function (info) {
	            return info.panGetRange(record.controller, dx, dy, oldX, oldY, newX, newY);
	        });
	    }

	    function onZoom(record, scale, mouseX, mouseY) {
	        wrapAndDispatch(record, function (info) {
	            return info.zoomGetRange(record.controller, scale, mouseX, mouseY);
	        });
	    }

	    function wrapAndDispatch(record, getRange) {
	        var batch = [];

	        zrUtil.each(record.dataZoomInfos, function (info) {
	            var range = getRange(info);
	            range && batch.push({
	                dataZoomId: info.dataZoomId,
	                start: range[0],
	                end: range[1]
	            });
	        });

	        record.dispatchAction(batch);
	    }

	    /**
	     * This action will be throttled.
	     */
	    function dispatchAction(api, batch) {
	        api.dispatchAction({
	            type: 'dataZoom',
	            batch: batch
	        });
	    }

	    module.exports = roams;



/***/ },
/* 579 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom processor
	 */


	    var echarts = __webpack_require__(240);

	    echarts.registerProcessor(function (ecModel, api) {

	        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	            // We calculate window and reset axis here but not in model
	            // init stage and not after action dispatch handler, because
	            // reset should be called after seriesData.restoreData.
	            dataZoomModel.eachTargetAxis(resetSingleAxis);

	            // Caution: data zoom filtering is order sensitive when using
	            // percent range and no min/max/scale set on axis.
	            // For example, we have dataZoom definition:
	            // [
	            //      {xAxisIndex: 0, start: 30, end: 70},
	            //      {yAxisIndex: 0, start: 20, end: 80}
	            // ]
	            // In this case, [20, 80] of y-dataZoom should be based on data
	            // that have filtered by x-dataZoom using range of [30, 70],
	            // but should not be based on full raw data. Thus sliding
	            // x-dataZoom will change both ranges of xAxis and yAxis,
	            // while sliding y-dataZoom will only change the range of yAxis.
	            // So we should filter x-axis after reset x-axis immediately,
	            // and then reset y-axis and filter y-axis.
	            dataZoomModel.eachTargetAxis(filterSingleAxis);
	        });

	        ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	            // Fullfill all of the range props so that user
	            // is able to get them from chart.getOption().
	            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
	            var percentRange = axisProxy.getDataPercentWindow();
	            var valueRange = axisProxy.getDataValueWindow();

	            dataZoomModel.setRawRange({
	                start: percentRange[0],
	                end: percentRange[1],
	                startValue: valueRange[0],
	                endValue: valueRange[1]
	            });
	        });
	    });

	    function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {
	        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);
	    }

	    function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {
	        dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);
	    }




/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom action
	 */


	    var zrUtil = __webpack_require__(243);
	    var helper = __webpack_require__(570);
	    var echarts = __webpack_require__(240);


	    echarts.registerAction('dataZoom', function (payload, ecModel) {

	        var linkedNodesFinder = helper.createLinkedNodesFinder(
	            zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'),
	            helper.eachAxisDim,
	            function (model, dimNames) {
	                return model.get(dimNames.axisIndex);
	            }
	        );

	        var effectedModels = [];

	        ecModel.eachComponent(
	            {mainType: 'dataZoom', query: payload},
	            function (model, index) {
	                effectedModels.push.apply(
	                    effectedModels, linkedNodesFinder(model).nodes
	                );
	            }
	        );

	        zrUtil.each(effectedModels, function (dataZoomModel, index) {
	            dataZoomModel.setRawRange({
	                start: payload.start,
	                end: payload.end,
	                startValue: payload.startValue,
	                endValue: payload.endValue
	            });
	        });

	    });



/***/ },
/* 581 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * visualMap component entry
	 */


	    __webpack_require__(582);
	    __webpack_require__(593);



/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */


	    __webpack_require__(240).registerPreprocessor(
	        __webpack_require__(583)
	    );

	    __webpack_require__(584);
	    __webpack_require__(585);
	    __webpack_require__(586);
	    __webpack_require__(589);
	    __webpack_require__(592);



/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file VisualMap preprocessor
	 */


	    var zrUtil = __webpack_require__(243);
	    var each = zrUtil.each;

	    module.exports = function (option) {
	        var visualMap = option && option.visualMap;

	        if (!zrUtil.isArray(visualMap)) {
	            visualMap = visualMap ? [visualMap] : [];
	        }

	        each(visualMap, function (opt) {
	            if (!opt) {
	                return;
	            }

	            // rename splitList to pieces
	            if (has(opt, 'splitList') && !has(opt, 'pieces')) {
	                opt.pieces = opt.splitList;
	                delete opt.splitList;
	            }

	            var pieces = opt.pieces;
	            if (pieces && zrUtil.isArray(pieces)) {
	                each(pieces, function (piece) {
	                    if (zrUtil.isObject(piece)) {
	                        if (has(piece, 'start') && !has(piece, 'min')) {
	                            piece.min = piece.start;
	                        }
	                        if (has(piece, 'end') && !has(piece, 'max')) {
	                            piece.max = piece.end;
	                        }
	                    }
	                });
	            }
	        });
	    };

	    function has(obj, name) {
	        return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);
	    }



/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(258).registerSubTypeDefaulter('visualMap', function (option) {
	        // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.
	        return (
	                !option.categories
	                && (
	                    !(
	                        option.pieces
	                            ? option.pieces.length > 0
	                            : option.splitNumber > 0
	                    )
	                    || option.calculable
	                )
	            )
	            ? 'continuous' : 'piecewise';
	    });



/***/ },
/* 585 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data range visual coding.
	 */


	    var echarts = __webpack_require__(240);
	    var visualSolution = __webpack_require__(558);
	    var VisualMapping = __webpack_require__(434);
	    var zrUtil = __webpack_require__(243);

	    echarts.registerVisual(echarts.PRIORITY.VISUAL.COMPONENT, function (ecModel) {
	        ecModel.eachComponent('visualMap', function (visualMapModel) {
	            processSingleVisualMap(visualMapModel, ecModel);
	        });

	        prepareVisualMeta(ecModel);
	    });

	    function processSingleVisualMap(visualMapModel, ecModel) {
	        visualMapModel.eachTargetSeries(function (seriesModel) {
	            var data = seriesModel.getData();

	            visualSolution.applyVisual(
	                visualMapModel.stateList,
	                visualMapModel.targetVisuals,
	                data,
	                visualMapModel.getValueState,
	                visualMapModel,
	                visualMapModel.getDataDimension(data)
	            );
	        });
	    }

	    // Only support color.
	    function prepareVisualMeta(ecModel) {
	        ecModel.eachSeries(function (seriesModel) {
	            var data = seriesModel.getData();
	            var visualMetaList = [];

	            ecModel.eachComponent('visualMap', function (visualMapModel) {
	                if (visualMapModel.isTargetSeries(seriesModel)) {
	                    var visualMeta = visualMapModel.getVisualMeta(
	                        zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)
	                    ) || {stops: [], outerColors: []};
	                    visualMeta.dimension = visualMapModel.getDataDimension(data);
	                    visualMetaList.push(visualMeta);
	                }
	            });

	            // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));
	            seriesModel.getData().setVisual('visualMeta', visualMetaList);
	        });
	    }

	    // FIXME
	    // performance and export for heatmap?
	    // value can be Infinity or -Infinity
	    function getColorVisual(seriesModel, visualMapModel, value, valueState) {
	        var mappings = visualMapModel.targetVisuals[valueState];
	        var visualTypes = VisualMapping.prepareVisualTypes(mappings);
	        var resultVisual = {
	            color: seriesModel.getData().getVisual('color') // default color.
	        };

	        for (var i = 0, len = visualTypes.length; i < len; i++) {
	            var type = visualTypes[i];
	            var mapping = mappings[
	                type === 'opacity' ? '__alphaForOpacity' : type
	            ];
	            mapping && mapping.applyVisual(value, getVisual, setVisual);
	        }

	        return resultVisual.color;

	        function getVisual(key) {
	            return resultVisual[key];
	        }

	        function setVisual(key, value) {
	            resultVisual[key] = value;
	        }
	    }




/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */


	    var VisualMapModel = __webpack_require__(587);
	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);

	    // Constant
	    var DEFAULT_BAR_BOUND = [20, 140];

	    var ContinuousModel = VisualMapModel.extend({

	        type: 'visualMap.continuous',

	        /**
	         * @protected
	         */
	        defaultOption: {
	            align: 'auto',          // 'auto', 'left', 'right', 'top', 'bottom'
	            calculable: false,      // This prop effect default component type determine,
	                                    // See echarts/component/visualMap/typeDefaulter.
	            range: null,            // selected range. In default case `range` is [min, max]
	                                    // and can auto change along with modification of min max,
	                                    // util use specifid a range.
	            realtime: true,         // Whether realtime update.
	            itemHeight: null,       // The length of the range control edge.
	            itemWidth: null,        // The length of the other side.
	            hoverLink: true,        // Enable hover highlight.
	            hoverLinkDataSize: null,// The size of hovered data.
	            hoverLinkOnHandle: true // Whether trigger hoverLink when hover handle.
	        },

	        /**
	         * @override
	         */
	        optionUpdated: function (newOption, isInit) {
	            ContinuousModel.superApply(this, 'optionUpdated', arguments);

	            this.resetTargetSeries();
	            this.resetExtent();

	            this.resetVisual(function (mappingOption) {
	                mappingOption.mappingMethod = 'linear';
	                mappingOption.dataExtent = this.getExtent();
	            });

	            this._resetRange();
	        },

	        /**
	         * @protected
	         * @override
	         */
	        resetItemSize: function () {
	            ContinuousModel.superApply(this, 'resetItemSize', arguments);

	            var itemSize = this.itemSize;

	            this._orient === 'horizontal' && itemSize.reverse();

	            (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);
	            (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);
	        },

	        /**
	         * @private
	         */
	        _resetRange: function () {
	            var dataExtent = this.getExtent();
	            var range = this.option.range;

	            if (!range || range.auto) {
	                // `range` should always be array (so we dont use other
	                // value like 'auto') for user-friend. (consider getOption).
	                dataExtent.auto = 1;
	                this.option.range = dataExtent;
	            }
	            else if (zrUtil.isArray(range)) {
	                if (range[0] > range[1]) {
	                    range.reverse();
	                }
	                range[0] = Math.max(range[0], dataExtent[0]);
	                range[1] = Math.min(range[1], dataExtent[1]);
	            }
	        },

	        /**
	         * @protected
	         * @override
	         */
	        completeVisualOption: function () {
	            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);

	            zrUtil.each(this.stateList, function (state) {
	                var symbolSize = this.option.controller[state].symbolSize;
	                if (symbolSize && symbolSize[0] !== symbolSize[1]) {
	                    symbolSize[0] = 0; // For good looking.
	                }
	            }, this);
	        },

	        /**
	         * @override
	         */
	        setSelected: function (selected) {
	            this.option.range = selected.slice();
	            this._resetRange();
	        },

	        /**
	         * @public
	         */
	        getSelected: function () {
	            var dataExtent = this.getExtent();

	            var dataInterval = numberUtil.asc(
	                (this.get('range') || []).slice()
	            );

	            // Clamp
	            dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);
	            dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);
	            dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);
	            dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);

	            return dataInterval;
	        },

	        /**
	         * @override
	         */
	        getValueState: function (value) {
	            var range = this.option.range;
	            var dataExtent = this.getExtent();

	            // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.
	            // range[1] is processed likewise.
	            return (
	                (range[0] <= dataExtent[0] || range[0] <= value)
	                && (range[1] >= dataExtent[1] || value <= range[1])
	            ) ? 'inRange' : 'outOfRange';
	        },

	        /**
	         * @params {Array.<number>} range target value: range[0] <= value && value <= range[1]
	         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	         */
	        findTargetDataIndices: function (range) {
	            var result = [];

	            this.eachTargetSeries(function (seriesModel) {
	                var dataIndices = [];
	                var data = seriesModel.getData();

	                data.each(this.getDataDimension(data), function (value, dataIndex) {
	                    range[0] <= value && value <= range[1] && dataIndices.push(dataIndex);
	                }, true, this);

	                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});
	            }, this);

	            return result;
	        },

	        /**
	         * @implement
	         */
	        getVisualMeta: function (getColorVisual) {
	            var oVals = getColorStopValues(this, 'outOfRange', this.getExtent());
	            var iVals = getColorStopValues(this, 'inRange', this.option.range.slice());
	            var stops = [];

	            function setStop(value, valueState) {
	                stops.push({
	                    value: value,
	                    color: getColorVisual(value, valueState)
	                });
	            }

	            // Format to: outOfRange -- inRange -- outOfRange.
	            var iIdx = 0;
	            var oIdx = 0;
	            var iLen = iVals.length;
	            var oLen = oVals.length;

	            for (; oIdx < oLen && (!iVals.length || oVals[oIdx] <= iVals[0]); oIdx++) {
	                // If oVal[oIdx] === iVals[iIdx], oVal[oIdx] should be ignored.
	                if (oVals[oIdx] < iVals[iIdx]) {
	                    setStop(oVals[oIdx], 'outOfRange');
	                }
	            }
	            for (var first = 1; iIdx < iLen; iIdx++, first = 0) {
	                // If range is full, value beyond min, max will be clamped.
	                // make a singularity
	                first && stops.length && setStop(iVals[iIdx], 'outOfRange');
	                setStop(iVals[iIdx], 'inRange');
	            }
	            for (var first = 1; oIdx < oLen; oIdx++) {
	                if (!iVals.length || iVals[iVals.length - 1] < oVals[oIdx]) {
	                    // make a singularity
	                    if (first) {
	                        stops.length && setStop(stops[stops.length - 1].value, 'outOfRange');
	                        first = 0;
	                    }
	                    setStop(oVals[oIdx], 'outOfRange');
	                }
	            }

	            var stopsLen = stops.length;

	            return {
	                stops: stops,
	                outerColors: [
	                    stopsLen ? stops[0].color : 'transparent',
	                    stopsLen ? stops[stopsLen - 1].color : 'transparent'
	                ]
	            };
	        }

	    });

	    function getColorStopValues(visualMapModel, valueState, dataExtent) {
	        if (dataExtent[0] === dataExtent[1]) {
	            return dataExtent.slice();
	        }

	        // When using colorHue mapping, it is not linear color any more.
	        // Moreover, canvas gradient seems not to be accurate linear.
	        // FIXME
	        // Should be arbitrary value 100? or based on pixel size?
	        var count = 200;
	        var step = (dataExtent[1] - dataExtent[0]) / count;

	        var value = dataExtent[0];
	        var stopValues = [];
	        for (var i = 0; i <= count && value < dataExtent[1]; i++) {
	            stopValues.push(value);
	            value += step;
	        }
	        stopValues.push(dataExtent[1]);

	        return stopValues;
	    }

	    module.exports = ContinuousModel;



/***/ },
/* 587 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Controller visual map model
	 */


	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);
	    var env = __webpack_require__(241);
	    var visualDefault = __webpack_require__(588);
	    var VisualMapping = __webpack_require__(434);
	    var visualSolution = __webpack_require__(558);
	    var mapVisual = VisualMapping.mapVisual;
	    var modelUtil = __webpack_require__(244);
	    var eachVisual = VisualMapping.eachVisual;
	    var numberUtil = __webpack_require__(246);
	    var isArray = zrUtil.isArray;
	    var each = zrUtil.each;
	    var asc = numberUtil.asc;
	    var linearMap = numberUtil.linearMap;
	    var noop = zrUtil.noop;

	    var DEFAULT_COLOR = ['#f6efa6', '#d88273', '#bf444c'];

	    var VisualMapModel = echarts.extendComponentModel({

	        type: 'visualMap',

	        dependencies: ['series'],

	        /**
	         * @readOnly
	         * @type {Array.<string>}
	         */
	        stateList: ['inRange', 'outOfRange'],

	        /**
	         * @readOnly
	         * @type {Array.<string>}
	         */
	        replacableOptionKeys: [
	            'inRange', 'outOfRange', 'target', 'controller', 'color'
	        ],

	        /**
	         * [lowerBound, upperBound]
	         *
	         * @readOnly
	         * @type {Array.<number>}
	         */
	        dataBound: [-Infinity, Infinity],

	        /**
	         * @readOnly
	         * @type {string|Object}
	         */
	        layoutMode: {type: 'box', ignoreSize: true},

	        /**
	         * @protected
	         */
	        defaultOption: {
	            show: true,

	            zlevel: 0,
	            z: 4,

	            seriesIndex: null,       // 所控制的series indices，默认所有有value的series.

	                                    // set min: 0, max: 200, only for campatible with ec2.
	                                    // In fact min max should not have default value.
	            min: 0,                 // min value, must specified if pieces is not specified.
	            max: 200,               // max value, must specified if pieces is not specified.

	            dimension: null,
	            inRange: null,          // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',
	                                    // 'symbol', 'symbolSize'
	            outOfRange: null,       // 'color', 'colorHue', 'colorSaturation',
	                                    // 'colorLightness', 'colorAlpha',
	                                    // 'symbol', 'symbolSize'

	            left: 0,                // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)
	            right: null,            // The same as left.
	            top: null,              // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)
	            bottom: 0,              // The same as top.

	            itemWidth: null,
	            itemHeight: null,
	            inverse: false,
	            orient: 'vertical',        // 'horizontal' ¦ 'vertical'

	            backgroundColor: 'rgba(0,0,0,0)',
	            borderColor: '#ccc',       // 值域边框颜色
	            contentColor: '#5793f3',
	            inactiveColor: '#aaa',
	            borderWidth: 0,            // 值域边框线宽，单位px，默认为0（无边框）
	            padding: 5,                // 值域内边距，单位px，默认各方向内边距为5，
	                                       // 接受数组分别设定上右下左边距，同css
	            textGap: 10,               //
	            precision: 0,              // 小数精度，默认为0，无小数点
	            color: null,               //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）

	            formatter: null,
	            text: null,                // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值
	            textStyle: {
	                color: '#333'          // 值域文字颜色
	            }
	        },

	        /**
	         * @protected
	         */
	        init: function (option, parentModel, ecModel) {

	            /**
	             * @private
	             * @type {Array.<number>}
	             */
	            this._dataExtent;

	            /**
	             * @readOnly
	             */
	            this.targetVisuals = {};

	            /**
	             * @readOnly
	             */
	            this.controllerVisuals = {};

	            /**
	             * @readOnly
	             */
	            this.textStyleModel;

	            /**
	             * [width, height]
	             * @readOnly
	             * @type {Array.<number>}
	             */
	            this.itemSize;

	            this.mergeDefaultAndTheme(option, ecModel);
	        },

	        /**
	         * @protected
	         */
	        optionUpdated: function (newOption, isInit) {
	            var thisOption = this.option;

	            // FIXME
	            // necessary?
	            // Disable realtime view update if canvas is not supported.
	            if (!env.canvasSupported) {
	                thisOption.realtime = false;
	            }

	            !isInit && visualSolution.replaceVisualOption(
	                thisOption, newOption, this.replacableOptionKeys
	            );

	            this.textStyleModel = this.getModel('textStyle');

	            this.resetItemSize();

	            this.completeVisualOption();
	        },

	        /**
	         * @protected
	         */
	        resetVisual: function (supplementVisualOption) {
	            var stateList = this.stateList;
	            supplementVisualOption = zrUtil.bind(supplementVisualOption, this);

	            this.controllerVisuals = visualSolution.createVisualMappings(
	                this.option.controller, stateList, supplementVisualOption
	            );
	            this.targetVisuals = visualSolution.createVisualMappings(
	                this.option.target, stateList, supplementVisualOption
	            );
	        },


	        /**
	         * @protected
	         */
	        resetTargetSeries: function () {
	            var thisOption = this.option;
	            var allSeriesIndex = thisOption.seriesIndex == null;
	            thisOption.seriesIndex = allSeriesIndex
	                ? [] : modelUtil.normalizeToArray(thisOption.seriesIndex);

	            allSeriesIndex && this.ecModel.eachSeries(function (seriesModel, index) {
	                thisOption.seriesIndex.push(index);
	            });
	        },

	        /**
	         * @public
	         */
	        eachTargetSeries: function (callback, context) {
	            zrUtil.each(this.option.seriesIndex, function (seriesIndex) {
	                callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));
	            }, this);
	        },

	        /**
	         * @pubilc
	         */
	        isTargetSeries: function (seriesModel) {
	            var is = false;
	            this.eachTargetSeries(function (model) {
	                model === seriesModel && (is = true);
	            });
	            return is;
	        },

	        /**
	         * @example
	         * this.formatValueText(someVal); // format single numeric value to text.
	         * this.formatValueText(someVal, true); // format single category value to text.
	         * this.formatValueText([min, max]); // format numeric min-max to text.
	         * this.formatValueText([this.dataBound[0], max]); // using data lower bound.
	         * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.
	         *
	         * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].
	         * @param {boolean} [isCategory=false] Only available when value is number.
	         * @param {Array.<string>} edgeSymbols Open-close symbol when value is interval.
	         * @return {string}
	         * @protected
	         */
	        formatValueText: function(value, isCategory, edgeSymbols) {
	            var option = this.option;
	            var precision = option.precision;
	            var dataBound = this.dataBound;
	            var formatter = option.formatter;
	            var isMinMax;
	            var textValue;
	            edgeSymbols = edgeSymbols || ['<', '>'];

	            if (zrUtil.isArray(value)) {
	                value = value.slice();
	                isMinMax = true;
	            }

	            textValue = isCategory
	                ? value
	                : (isMinMax
	                    ? [toFixed(value[0]), toFixed(value[1])]
	                    : toFixed(value)
	                );

	            if (zrUtil.isString(formatter)) {
	                return formatter
	                    .replace('{value}', isMinMax ? textValue[0] : textValue)
	                    .replace('{value2}', isMinMax ? textValue[1] : textValue);
	            }
	            else if (zrUtil.isFunction(formatter)) {
	                return isMinMax
	                    ? formatter(value[0], value[1])
	                    : formatter(value);
	            }

	            if (isMinMax) {
	                if (value[0] === dataBound[0]) {
	                    return edgeSymbols[0] + ' ' + textValue[1];
	                }
	                else if (value[1] === dataBound[1]) {
	                    return edgeSymbols[1] + ' ' + textValue[0];
	                }
	                else {
	                    return textValue[0] + ' - ' + textValue[1];
	                }
	            }
	            else { // Format single value (includes category case).
	                return textValue;
	            }

	            function toFixed(val) {
	                return val === dataBound[0]
	                    ? 'min'
	                    : val === dataBound[1]
	                    ? 'max'
	                    : (+val).toFixed(precision);
	            }
	        },

	        /**
	         * @protected
	         */
	        resetExtent: function () {
	            var thisOption = this.option;

	            // Can not calculate data extent by data here.
	            // Because series and data may be modified in processing stage.
	            // So we do not support the feature "auto min/max".

	            var extent = asc([thisOption.min, thisOption.max]);

	            this._dataExtent = extent;
	        },

	        /**
	         * @public
	         * @param {module:echarts/data/List} list
	         * @return {string} Concrete dimention. If return null/undefined,
	         *                  no dimension used.
	         */
	        getDataDimension: function (list) {
	            var optDim = this.option.dimension;
	            return optDim != null
	                ? optDim : list.dimensions.length - 1;
	        },

	        /**
	         * @public
	         * @override
	         */
	        getExtent: function () {
	            return this._dataExtent.slice();
	        },

	        /**
	         * @protected
	         */
	        completeVisualOption: function () {
	            var thisOption = this.option;
	            var base = {inRange: thisOption.inRange, outOfRange: thisOption.outOfRange};

	            var target = thisOption.target || (thisOption.target = {});
	            var controller = thisOption.controller || (thisOption.controller = {});

	            zrUtil.merge(target, base); // Do not override
	            zrUtil.merge(controller, base); // Do not override

	            var isCategory = this.isCategory();

	            completeSingle.call(this, target);
	            completeSingle.call(this, controller);
	            completeInactive.call(this, target, 'inRange', 'outOfRange');
	            // completeInactive.call(this, target, 'outOfRange', 'inRange');
	            completeController.call(this, controller);

	            function completeSingle(base) {
	                // Compatible with ec2 dataRange.color.
	                // The mapping order of dataRange.color is: [high value, ..., low value]
	                // whereas inRange.color and outOfRange.color is [low value, ..., high value]
	                // Notice: ec2 has no inverse.
	                if (isArray(thisOption.color)
	                    // If there has been inRange: {symbol: ...}, adding color is a mistake.
	                    // So adding color only when no inRange defined.
	                    && !base.inRange
	                ) {
	                    base.inRange = {color: thisOption.color.slice().reverse()};
	                }

	                // Compatible with previous logic, always give a defautl color, otherwise
	                // simple config with no inRange and outOfRange will not work.
	                // Originally we use visualMap.color as the default color, but setOption at
	                // the second time the default color will be erased. So we change to use
	                // constant DEFAULT_COLOR.
	                // If user do not want the defualt color, set inRange: {color: null}.
	                base.inRange = base.inRange || {color: DEFAULT_COLOR};

	                // If using shortcut like: {inRange: 'symbol'}, complete default value.
	                each(this.stateList, function (state) {
	                    var visualType = base[state];

	                    if (zrUtil.isString(visualType)) {
	                        var defa = visualDefault.get(visualType, 'active', isCategory);
	                        if (defa) {
	                            base[state] = {};
	                            base[state][visualType] = defa;
	                        }
	                        else {
	                            // Mark as not specified.
	                            delete base[state];
	                        }
	                    }
	                }, this);
	            }

	            function completeInactive(base, stateExist, stateAbsent) {
	                var optExist = base[stateExist];
	                var optAbsent = base[stateAbsent];

	                if (optExist && !optAbsent) {
	                    optAbsent = base[stateAbsent] = {};
	                    each(optExist, function (visualData, visualType) {
	                        if (!VisualMapping.isValidType(visualType)) {
	                            return;
	                        }

	                        var defa = visualDefault.get(visualType, 'inactive', isCategory);

	                        if (defa != null) {
	                            optAbsent[visualType] = defa;

	                            // Compatibable with ec2:
	                            // Only inactive color to rgba(0,0,0,0) can not
	                            // make label transparent, so use opacity also.
	                            if (visualType === 'color'
	                                && !optAbsent.hasOwnProperty('opacity')
	                                && !optAbsent.hasOwnProperty('colorAlpha')
	                            ) {
	                                optAbsent.opacity = [0, 0];
	                            }
	                        }
	                    });
	                }
	            }

	            function completeController(controller) {
	                var symbolExists = (controller.inRange || {}).symbol
	                    || (controller.outOfRange || {}).symbol;
	                var symbolSizeExists = (controller.inRange || {}).symbolSize
	                    || (controller.outOfRange || {}).symbolSize;
	                var inactiveColor = this.get('inactiveColor');

	                each(this.stateList, function (state) {

	                    var itemSize = this.itemSize;
	                    var visuals = controller[state];

	                    // Set inactive color for controller if no other color
	                    // attr (like colorAlpha) specified.
	                    if (!visuals) {
	                        visuals = controller[state] = {
	                            color: isCategory ? inactiveColor : [inactiveColor]
	                        };
	                    }

	                    // Consistent symbol and symbolSize if not specified.
	                    if (visuals.symbol == null) {
	                        visuals.symbol = symbolExists
	                            && zrUtil.clone(symbolExists)
	                            || (isCategory ? 'roundRect' : ['roundRect']);
	                    }
	                    if (visuals.symbolSize == null) {
	                        visuals.symbolSize = symbolSizeExists
	                            && zrUtil.clone(symbolSizeExists)
	                            || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);
	                    }

	                    // Filter square and none.
	                    visuals.symbol = mapVisual(visuals.symbol, function (symbol) {
	                        return (symbol === 'none' || symbol === 'square') ? 'roundRect' : symbol;
	                    });

	                    // Normalize symbolSize
	                    var symbolSize = visuals.symbolSize;

	                    if (symbolSize != null) {
	                        var max = -Infinity;
	                        // symbolSize can be object when categories defined.
	                        eachVisual(symbolSize, function (value) {
	                            value > max && (max = value);
	                        });
	                        visuals.symbolSize = mapVisual(symbolSize, function (value) {
	                            return linearMap(value, [0, max], [0, itemSize[0]], true);
	                        });
	                    }

	                }, this);
	            }
	        },

	        /**
	         * @protected
	         */
	        resetItemSize: function () {
	            this.itemSize = [
	                parseFloat(this.get('itemWidth')),
	                parseFloat(this.get('itemHeight'))
	            ];
	        },

	        /**
	         * @public
	         */
	        isCategory: function () {
	            return !!this.option.categories;
	        },

	        /**
	         * @public
	         * @abstract
	         */
	        setSelected: noop,

	        /**
	         * @public
	         * @abstract
	         * @param {*|module:echarts/data/List} valueOrData
	         * @param {number} dataIndex
	         * @return {string} state See this.stateList
	         */
	        getValueState: noop,

	        /**
	         * FIXME
	         * Do not publish to thirt-part-dev temporarily
	         * util the interface is stable. (Should it return
	         * a function but not visual meta?)
	         *
	         * @pubilc
	         * @abstract
	         * @param {Function} getColorVisual
	         *        params: value, valueState
	         *        return: color
	         * @return {Object} visualMeta
	         *        should includes {stops, outerColors}
	         *        outerColor means [colorBeyondMinValue, colorBeyondMaxValue]
	         */
	        getVisualMeta: noop

	    });

	    module.exports = VisualMapModel;



/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Visual mapping.
	 */


	    var zrUtil = __webpack_require__(243);

	    var visualDefault = {

	        /**
	         * @public
	         */
	        get: function (visualType, key, isCategory) {
	            var value = zrUtil.clone(
	                (defaultOption[visualType] || {})[key]
	            );

	            return isCategory
	                ? (zrUtil.isArray(value) ? value[value.length - 1] : value)
	                : value;
	        }

	    };

	    var defaultOption = {

	        color: {
	            active: ['#006edd', '#e0ffff'],
	            inactive: ['rgba(0,0,0,0)']
	        },

	        colorHue: {
	            active: [0, 360],
	            inactive: [0, 0]
	        },

	        colorSaturation: {
	            active: [0.3, 1],
	            inactive: [0, 0]
	        },

	        colorLightness: {
	            active: [0.9, 0.5],
	            inactive: [0, 0]
	        },

	        colorAlpha: {
	            active: [0.3, 1],
	            inactive: [0, 0]
	        },

	        opacity: {
	            active: [0.3, 1],
	            inactive: [0, 0]
	        },

	        symbol: {
	            active: ['circle', 'roundRect', 'diamond'],
	            inactive: ['none']
	        },

	        symbolSize: {
	            active: [10, 50],
	            inactive: [0, 0]
	        }
	    };

	    module.exports = visualDefault;




/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {

	

	    var VisualMapView = __webpack_require__(590);
	    var graphic = __webpack_require__(282);
	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);
	    var sliderMove = __webpack_require__(575);
	    var LinearGradient = __webpack_require__(317);
	    var helper = __webpack_require__(591);
	    var modelUtil = __webpack_require__(244);

	    var linearMap = numberUtil.linearMap;
	    var each = zrUtil.each;
	    var mathMin = Math.min;
	    var mathMax = Math.max;

	    // Arbitrary value
	    var HOVER_LINK_SIZE = 12;
	    var HOVER_LINK_OUT = 6;

	    // Notice:
	    // Any "interval" should be by the order of [low, high].
	    // "handle0" (handleIndex === 0) maps to
	    // low data value: this._dataInterval[0] and has low coord.
	    // "handle1" (handleIndex === 1) maps to
	    // high data value: this._dataInterval[1] and has high coord.
	    // The logic of transform is implemented in this._createBarGroup.

	    var ContinuousView = VisualMapView.extend({

	        type: 'visualMap.continuous',

	        /**
	         * @override
	         */
	        init: function () {

	            ContinuousView.superApply(this, 'init', arguments);

	            /**
	             * @private
	             */
	            this._shapes = {};

	            /**
	             * @private
	             */
	            this._dataInterval = [];

	            /**
	             * @private
	             */
	            this._handleEnds = [];

	            /**
	             * @private
	             */
	            this._orient;

	            /**
	             * @private
	             */
	            this._useHandle;

	            /**
	             * @private
	             */
	            this._hoverLinkDataIndices = [];

	            /**
	             * @private
	             */
	            this._dragging;

	            /**
	             * @private
	             */
	            this._hovering;
	        },

	        /**
	         * @protected
	         * @override
	         */
	        doRender: function (visualMapModel, ecModel, api, payload) {
	            if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {
	                this._buildView();
	            }
	        },

	        /**
	         * @private
	         */
	        _buildView: function () {
	            this.group.removeAll();

	            var visualMapModel = this.visualMapModel;
	            var thisGroup = this.group;

	            this._orient = visualMapModel.get('orient');
	            this._useHandle = visualMapModel.get('calculable');

	            this._resetInterval();

	            this._renderBar(thisGroup);

	            var dataRangeText = visualMapModel.get('text');
	            this._renderEndsText(thisGroup, dataRangeText, 0);
	            this._renderEndsText(thisGroup, dataRangeText, 1);

	            // Do this for background size calculation.
	            this._updateView(true);

	            // After updating view, inner shapes is built completely,
	            // and then background can be rendered.
	            this.renderBackground(thisGroup);

	            // Real update view
	            this._updateView();

	            this._enableHoverLinkToSeries();
	            this._enableHoverLinkFromSeries();

	            this.positionGroup(thisGroup);
	        },

	        /**
	         * @private
	         */
	        _renderEndsText: function (group, dataRangeText, endsIndex) {
	            if (!dataRangeText) {
	                return;
	            }

	            // Compatible with ec2, text[0] map to high value, text[1] map low value.
	            var text = dataRangeText[1 - endsIndex];
	            text = text != null ? text + '' : '';

	            var visualMapModel = this.visualMapModel;
	            var textGap = visualMapModel.get('textGap');
	            var itemSize = visualMapModel.itemSize;

	            var barGroup = this._shapes.barGroup;
	            var position = this._applyTransform(
	                [
	                    itemSize[0] / 2,
	                    endsIndex === 0 ? -textGap : itemSize[1] + textGap
	                ],
	                barGroup
	            );
	            var align = this._applyTransform(
	                endsIndex === 0 ? 'bottom' : 'top',
	                barGroup
	            );
	            var orient = this._orient;
	            var textStyleModel = this.visualMapModel.textStyleModel;

	            this.group.add(new graphic.Text({
	                style: {
	                    x: position[0],
	                    y: position[1],
	                    textVerticalAlign: orient === 'horizontal' ? 'middle' : align,
	                    textAlign: orient === 'horizontal' ? align : 'center',
	                    text: text,
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                }
	            }));
	        },

	        /**
	         * @private
	         */
	        _renderBar: function (targetGroup) {
	            var visualMapModel = this.visualMapModel;
	            var shapes = this._shapes;
	            var itemSize = visualMapModel.itemSize;
	            var orient = this._orient;
	            var useHandle = this._useHandle;
	            var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);
	            var barGroup = shapes.barGroup = this._createBarGroup(itemAlign);

	            // Bar
	            barGroup.add(shapes.outOfRange = createPolygon());
	            barGroup.add(shapes.inRange = createPolygon(
	                null,
	                useHandle ? 'move' : null,
	                zrUtil.bind(this._dragHandle, this, 'all', false),
	                zrUtil.bind(this._dragHandle, this, 'all', true)
	            ));

	            var textRect = visualMapModel.textStyleModel.getTextRect('国');
	            var textSize = mathMax(textRect.width, textRect.height);

	            // Handle
	            if (useHandle) {
	                shapes.handleThumbs = [];
	                shapes.handleLabels = [];
	                shapes.handleLabelPoints = [];

	                this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);
	                this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);
	            }

	            this._createIndicator(barGroup, itemSize, textSize, orient);

	            targetGroup.add(barGroup);
	        },

	        /**
	         * @private
	         */
	        _createHandle: function (barGroup, handleIndex, itemSize, textSize, orient) {
	            var onDrift = zrUtil.bind(this._dragHandle, this, handleIndex, false);
	            var onDragEnd = zrUtil.bind(this._dragHandle, this, handleIndex, true);
	            var handleThumb = createPolygon(
	                createHandlePoints(handleIndex, textSize),
	                'move',
	                onDrift,
	                onDragEnd
	            );
	            handleThumb.position[0] = itemSize[0];
	            barGroup.add(handleThumb);

	            // Text is always horizontal layout but should not be effected by
	            // transform (orient/inverse). So label is built separately but not
	            // use zrender/graphic/helper/RectText, and is located based on view
	            // group (according to handleLabelPoint) but not barGroup.
	            var textStyleModel = this.visualMapModel.textStyleModel;
	            var handleLabel = new graphic.Text({
	                draggable: true,
	                drift: onDrift,
	                ondragend: onDragEnd,
	                style: {
	                    x: 0, y: 0, text: '',
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                }
	            });
	            this.group.add(handleLabel);

	            var handleLabelPoint = [
	                orient === 'horizontal'
	                    ? textSize / 2
	                    : textSize * 1.5,
	                orient === 'horizontal'
	                    ? (handleIndex === 0 ? -(textSize * 1.5) : (textSize * 1.5))
	                    : (handleIndex === 0 ? -textSize / 2 : textSize / 2)
	            ];

	            var shapes = this._shapes;
	            shapes.handleThumbs[handleIndex] = handleThumb;
	            shapes.handleLabelPoints[handleIndex] = handleLabelPoint;
	            shapes.handleLabels[handleIndex] = handleLabel;
	        },

	        /**
	         * @private
	         */
	        _createIndicator: function (barGroup, itemSize, textSize, orient) {
	            var indicator = createPolygon([[0, 0]], 'move');
	            indicator.position[0] = itemSize[0];
	            indicator.attr({invisible: true, silent: true});
	            barGroup.add(indicator);

	            var textStyleModel = this.visualMapModel.textStyleModel;
	            var indicatorLabel = new graphic.Text({
	                silent: true,
	                invisible: true,
	                style: {
	                    x: 0, y: 0, text: '',
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                }
	            });
	            this.group.add(indicatorLabel);

	            var indicatorLabelPoint = [
	                orient === 'horizontal' ? textSize / 2 : HOVER_LINK_OUT + 3,
	                0
	            ];

	            var shapes = this._shapes;
	            shapes.indicator = indicator;
	            shapes.indicatorLabel = indicatorLabel;
	            shapes.indicatorLabelPoint = indicatorLabelPoint;
	        },

	        /**
	         * @private
	         */
	        _dragHandle: function (handleIndex, isEnd, dx, dy) {
	            if (!this._useHandle) {
	                return;
	            }

	            this._dragging = !isEnd;

	            if (!isEnd) {
	                // Transform dx, dy to bar coordination.
	                var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);
	                this._updateInterval(handleIndex, vertex[1]);

	                // Considering realtime, update view should be executed
	                // before dispatch action.
	                this._updateView();
	            }

	            // dragEnd do not dispatch action when realtime.
	            if (isEnd === !this.visualMapModel.get('realtime')) { // jshint ignore:line
	                this.api.dispatchAction({
	                    type: 'selectDataRange',
	                    from: this.uid,
	                    visualMapId: this.visualMapModel.id,
	                    selected: this._dataInterval.slice()
	                });
	            }

	            if (isEnd) {
	                !this._hovering && this._clearHoverLinkToSeries();
	            }
	            else if (useHoverLinkOnHandle(this.visualMapModel)) {
	                this._doHoverLinkToSeries(this._handleEnds[handleIndex], false);
	            }
	        },

	        /**
	         * @private
	         */
	        _resetInterval: function () {
	            var visualMapModel = this.visualMapModel;

	            var dataInterval = this._dataInterval = visualMapModel.getSelected();
	            var dataExtent = visualMapModel.getExtent();
	            var sizeExtent = [0, visualMapModel.itemSize[1]];

	            this._handleEnds = [
	                linearMap(dataInterval[0], dataExtent, sizeExtent, true),
	                linearMap(dataInterval[1], dataExtent, sizeExtent, true)
	            ];
	        },

	        /**
	         * @private
	         * @param {(number|string)} handleIndex 0 or 1 or 'all'
	         * @param {number} dx
	         * @param {number} dy
	         */
	        _updateInterval: function (handleIndex, delta) {
	            delta = delta || 0;
	            var visualMapModel = this.visualMapModel;
	            var handleEnds = this._handleEnds;

	            sliderMove(
	                delta,
	                handleEnds,
	                [0, visualMapModel.itemSize[1]],
	                handleIndex === 'all' ? 'rigid' : 'push',
	                handleIndex
	            );
	            var dataExtent = visualMapModel.getExtent();
	            var sizeExtent = [0, visualMapModel.itemSize[1]];
	            // Update data interval.
	            this._dataInterval = [
	                linearMap(handleEnds[0], sizeExtent, dataExtent, true),
	                linearMap(handleEnds[1], sizeExtent, dataExtent, true)
	            ];
	        },

	        /**
	         * @private
	         */
	        _updateView: function (forSketch) {
	            var visualMapModel = this.visualMapModel;
	            var dataExtent = visualMapModel.getExtent();
	            var shapes = this._shapes;

	            var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];
	            var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;

	            var visualInRange = this._createBarVisual(
	                this._dataInterval, dataExtent, inRangeHandleEnds, 'inRange'
	            );
	            var visualOutOfRange = this._createBarVisual(
	                dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange'
	            );

	            shapes.inRange
	                .setStyle({
	                    fill: visualInRange.barColor,
	                    opacity: visualInRange.opacity
	                })
	                .setShape('points', visualInRange.barPoints);
	            shapes.outOfRange
	                .setStyle({
	                    fill: visualOutOfRange.barColor,
	                    opacity: visualOutOfRange.opacity
	                })
	                .setShape('points', visualOutOfRange.barPoints);

	            this._updateHandle(inRangeHandleEnds, visualInRange);
	        },

	        /**
	         * @private
	         */
	        _createBarVisual: function (dataInterval, dataExtent, handleEnds, forceState) {
	            var opts = {
	                forceState: forceState,
	                convertOpacityToAlpha: true
	            };
	            var colorStops = this._makeColorGradient(dataInterval, opts);

	            var symbolSizes = [
	                this.getControllerVisual(dataInterval[0], 'symbolSize', opts),
	                this.getControllerVisual(dataInterval[1], 'symbolSize', opts)
	            ];
	            var barPoints = this._createBarPoints(handleEnds, symbolSizes);

	            return {
	                barColor: new LinearGradient(0, 0, 0, 1, colorStops),
	                barPoints: barPoints,
	                handlesColor: [
	                    colorStops[0].color,
	                    colorStops[colorStops.length - 1].color
	                ]
	            };
	        },

	        /**
	         * @private
	         */
	        _makeColorGradient: function (dataInterval, opts) {
	            // Considering colorHue, which is not linear, so we have to sample
	            // to calculate gradient color stops, but not only caculate head
	            // and tail.
	            var sampleNumber = 100; // Arbitrary value.
	            var colorStops = [];
	            var step = (dataInterval[1] - dataInterval[0]) / sampleNumber;

	            colorStops.push({
	                color: this.getControllerVisual(dataInterval[0], 'color', opts),
	                offset: 0
	            });

	            for (var i = 1; i < sampleNumber; i++) {
	                var currValue = dataInterval[0] + step * i;
	                if (currValue > dataInterval[1]) {
	                    break;
	                }
	                colorStops.push({
	                    color: this.getControllerVisual(currValue, 'color', opts),
	                    offset: i / sampleNumber
	                });
	            }

	            colorStops.push({
	                color: this.getControllerVisual(dataInterval[1], 'color', opts),
	                offset: 1
	            });

	            return colorStops;
	        },

	        /**
	         * @private
	         */
	        _createBarPoints: function (handleEnds, symbolSizes) {
	            var itemSize = this.visualMapModel.itemSize;

	            return [
	                [itemSize[0] - symbolSizes[0], handleEnds[0]],
	                [itemSize[0], handleEnds[0]],
	                [itemSize[0], handleEnds[1]],
	                [itemSize[0] - symbolSizes[1], handleEnds[1]]
	            ];
	        },

	        /**
	         * @private
	         */
	        _createBarGroup: function (itemAlign) {
	            var orient = this._orient;
	            var inverse = this.visualMapModel.get('inverse');

	            return new graphic.Group(
	                (orient === 'horizontal' && !inverse)
	                ? {scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1], rotation: Math.PI / 2}
	                : (orient === 'horizontal' && inverse)
	                ? {scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1], rotation: -Math.PI / 2}
	                : (orient === 'vertical' && !inverse)
	                ? {scale: itemAlign === 'left' ? [1, -1] : [-1, -1]}
	                : {scale: itemAlign === 'left' ? [1, 1] : [-1, 1]}
	            );
	        },

	        /**
	         * @private
	         */
	        _updateHandle: function (handleEnds, visualInRange) {
	            if (!this._useHandle) {
	                return;
	            }

	            var shapes = this._shapes;
	            var visualMapModel = this.visualMapModel;
	            var handleThumbs = shapes.handleThumbs;
	            var handleLabels = shapes.handleLabels;

	            each([0, 1], function (handleIndex) {
	                var handleThumb = handleThumbs[handleIndex];
	                handleThumb.setStyle('fill', visualInRange.handlesColor[handleIndex]);
	                handleThumb.position[1] = handleEnds[handleIndex];

	                // Update handle label position.
	                var textPoint = graphic.applyTransform(
	                    shapes.handleLabelPoints[handleIndex],
	                    graphic.getTransform(handleThumb, this.group)
	                );
	                handleLabels[handleIndex].setStyle({
	                    x: textPoint[0],
	                    y: textPoint[1],
	                    text: visualMapModel.formatValueText(this._dataInterval[handleIndex]),
	                    textVerticalAlign: 'middle',
	                    textAlign: this._applyTransform(
	                        this._orient === 'horizontal'
	                            ? (handleIndex === 0 ? 'bottom' : 'top')
	                            : 'left',
	                        shapes.barGroup
	                    )
	                });
	            }, this);
	        },

	        /**
	         * @private
	         * @param {number} cursorValue
	         * @param {number} textValue
	         * @param {string} [rangeSymbol]
	         * @param {number} [halfHoverLinkSize]
	         */
	        _showIndicator: function (cursorValue, textValue, rangeSymbol, halfHoverLinkSize) {
	            var visualMapModel = this.visualMapModel;
	            var dataExtent = visualMapModel.getExtent();
	            var itemSize = visualMapModel.itemSize;
	            var sizeExtent = [0, itemSize[1]];
	            var pos = linearMap(cursorValue, dataExtent, sizeExtent, true);

	            var shapes = this._shapes;
	            var indicator = shapes.indicator;
	            if (!indicator) {
	                return;
	            }

	            indicator.position[1] = pos;
	            indicator.attr('invisible', false);
	            indicator.setShape('points', createIndicatorPoints(
	                !!rangeSymbol, halfHoverLinkSize, pos, itemSize[1]
	            ));

	            var opts = {convertOpacityToAlpha: true};
	            var color = this.getControllerVisual(cursorValue, 'color', opts);
	            indicator.setStyle('fill', color);

	            // Update handle label position.
	            var textPoint = graphic.applyTransform(
	                shapes.indicatorLabelPoint,
	                graphic.getTransform(indicator, this.group)
	            );

	            var indicatorLabel = shapes.indicatorLabel;
	            indicatorLabel.attr('invisible', false);
	            var align = this._applyTransform('left', shapes.barGroup);
	            var orient = this._orient;
	            indicatorLabel.setStyle({
	                text: (rangeSymbol ? rangeSymbol : '') + visualMapModel.formatValueText(textValue),
	                textVerticalAlign: orient === 'horizontal' ? align : 'middle',
	                textAlign: orient === 'horizontal' ? 'center' : align,
	                x: textPoint[0],
	                y: textPoint[1]
	            });
	        },

	        /**
	         * @private
	         */
	        _enableHoverLinkToSeries: function () {
	            var self = this;
	            this._shapes.barGroup

	                .on('mousemove', function (e) {
	                    self._hovering = true;

	                    if (!self._dragging) {
	                        var itemSize = self.visualMapModel.itemSize;
	                        var pos = self._applyTransform(
	                            [e.offsetX, e.offsetY], self._shapes.barGroup, true, true
	                        );
	                        // For hover link show when hover handle, which might be
	                        // below or upper than sizeExtent.
	                        pos[1] = mathMin(mathMax(0, pos[1]), itemSize[1]);

	                        self._doHoverLinkToSeries(
	                            pos[1],
	                            0 <= pos[0] && pos[0] <= itemSize[0]
	                        );
	                    }
	                })

	                .on('mouseout', function () {
	                    // When mouse is out of handle, hoverLink still need
	                    // to be displayed when realtime is set as false.
	                    self._hovering = false;
	                    !self._dragging && self._clearHoverLinkToSeries();
	                });
	        },

	        /**
	         * @private
	         */
	        _enableHoverLinkFromSeries: function () {
	            var zr = this.api.getZr();

	            if (this.visualMapModel.option.hoverLink) {
	                zr.on('mouseover', this._hoverLinkFromSeriesMouseOver, this);
	                zr.on('mouseout', this._hideIndicator, this);
	            }
	            else {
	                this._clearHoverLinkFromSeries();
	            }
	        },

	        /**
	         * @private
	         */
	        _doHoverLinkToSeries: function (cursorPos, hoverOnBar) {
	            var visualMapModel = this.visualMapModel;
	            var itemSize = visualMapModel.itemSize;

	            if (!visualMapModel.option.hoverLink) {
	                return;
	            }

	            var sizeExtent = [0, itemSize[1]];
	            var dataExtent = visualMapModel.getExtent();

	            // For hover link show when hover handle, which might be below or upper than sizeExtent.
	            cursorPos = mathMin(mathMax(sizeExtent[0], cursorPos), sizeExtent[1]);

	            var halfHoverLinkSize = getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent);
	            var hoverRange = [cursorPos - halfHoverLinkSize, cursorPos + halfHoverLinkSize];
	            var cursorValue = linearMap(cursorPos, sizeExtent, dataExtent, true);
	            var valueRange = [
	                linearMap(hoverRange[0], sizeExtent, dataExtent, true),
	                linearMap(hoverRange[1], sizeExtent, dataExtent, true)
	            ];
	            // Consider data range is out of visualMap range, see test/visualMap-continuous.html,
	            // where china and india has very large population.
	            hoverRange[0] < sizeExtent[0] && (valueRange[0] = -Infinity);
	            hoverRange[1] > sizeExtent[1] && (valueRange[1] = Infinity);

	            // Do not show indicator when mouse is over handle,
	            // otherwise labels overlap, especially when dragging.
	            if (hoverOnBar) {
	                if (valueRange[0] === -Infinity) {
	                    this._showIndicator(cursorValue, valueRange[1], '< ', halfHoverLinkSize);
	                }
	                else if (valueRange[1] === Infinity) {
	                    this._showIndicator(cursorValue, valueRange[0], '> ', halfHoverLinkSize);
	                }
	                else {
	                    this._showIndicator(cursorValue, cursorValue, '≈ ', halfHoverLinkSize);
	                }
	            }

	            // When realtime is set as false, handles, which are in barGroup,
	            // also trigger hoverLink, which help user to realize where they
	            // focus on when dragging. (see test/heatmap-large.html)
	            // When realtime is set as true, highlight will not show when hover
	            // handle, because the label on handle, which displays a exact value
	            // but not range, might mislead users.
	            var oldBatch = this._hoverLinkDataIndices;
	            var newBatch = [];
	            if (hoverOnBar || useHoverLinkOnHandle(visualMapModel)) {
	                newBatch = this._hoverLinkDataIndices = visualMapModel.findTargetDataIndices(valueRange);
	            }

	            var resultBatches = modelUtil.compressBatches(oldBatch, newBatch);
	            this._dispatchHighDown('downplay', helper.convertDataIndex(resultBatches[0]));
	            this._dispatchHighDown('highlight', helper.convertDataIndex(resultBatches[1]));
	        },

	        /**
	         * @private
	         */
	        _hoverLinkFromSeriesMouseOver: function (e) {
	            var el = e.target;

	            if (!el || el.dataIndex == null) {
	                return;
	            }

	            var dataModel = el.dataModel || this.ecModel.getSeriesByIndex(el.seriesIndex);
	            var data = dataModel.getData(el.dataType);
	            var dim = data.getDimension(this.visualMapModel.getDataDimension(data));
	            var value = data.get(dim, el.dataIndex, true);

	            if (!isNaN(value)) {
	                this._showIndicator(value, value);
	            }
	        },

	        /**
	         * @private
	         */
	        _hideIndicator: function () {
	            var shapes = this._shapes;
	            shapes.indicator && shapes.indicator.attr('invisible', true);
	            shapes.indicatorLabel && shapes.indicatorLabel.attr('invisible', true);
	        },

	        /**
	         * @private
	         */
	        _clearHoverLinkToSeries: function () {
	            this._hideIndicator();

	            var indices = this._hoverLinkDataIndices;

	            this._dispatchHighDown('downplay', helper.convertDataIndex(indices));

	            indices.length = 0;
	        },

	        /**
	         * @private
	         */
	        _clearHoverLinkFromSeries: function () {
	            this._hideIndicator();

	            var zr = this.api.getZr();
	            zr.off('mouseover', this._hoverLinkFromSeriesMouseOver);
	            zr.off('mouseout', this._hideIndicator);
	        },

	        /**
	         * @private
	         */
	        _applyTransform: function (vertex, element, inverse, global) {
	            var transform = graphic.getTransform(element, global ? null : this.group);

	            return graphic[
	                zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'
	            ](vertex, transform, inverse);
	        },

	        /**
	         * @private
	         */
	        _dispatchHighDown: function (type, batch) {
	            batch && batch.length && this.api.dispatchAction({
	                type: type,
	                batch: batch
	            });
	        },

	        /**
	         * @override
	         */
	        dispose: function () {
	            this._clearHoverLinkFromSeries();
	            this._clearHoverLinkToSeries();
	        },

	        /**
	         * @override
	         */
	        remove: function () {
	            this._clearHoverLinkFromSeries();
	            this._clearHoverLinkToSeries();
	        }

	    });

	    function createPolygon(points, cursor, onDrift, onDragEnd) {
	        return new graphic.Polygon({
	            shape: {points: points},
	            draggable: !!onDrift,
	            cursor: cursor,
	            drift: onDrift,
	            ondragend: onDragEnd
	        });
	    }

	    function createHandlePoints(handleIndex, textSize) {
	        return handleIndex === 0
	            ? [[0, 0], [textSize, 0], [textSize, -textSize]]
	            : [[0, 0], [textSize, 0], [textSize, textSize]];
	    }

	    function createIndicatorPoints(isRange, halfHoverLinkSize, pos, extentMax) {
	        return isRange
	            ? [ // indicate range
	                [0, -mathMin(halfHoverLinkSize, mathMax(pos, 0))],
	                [HOVER_LINK_OUT, 0],
	                [0, mathMin(halfHoverLinkSize, mathMax(extentMax - pos, 0))]
	            ]
	            : [ // indicate single value
	                [0, 0], [5, -5], [5, 5]
	            ];
	    }

	    function getHalfHoverLinkSize(visualMapModel, dataExtent, sizeExtent) {
	        var halfHoverLinkSize = HOVER_LINK_SIZE / 2;
	        var hoverLinkDataSize = visualMapModel.get('hoverLinkDataSize');
	        if (hoverLinkDataSize) {
	            halfHoverLinkSize = linearMap(hoverLinkDataSize, dataExtent, sizeExtent, true) / 2;
	        }
	        return halfHoverLinkSize;
	    }

	    function useHoverLinkOnHandle(visualMapModel) {
	        return !visualMapModel.get('realtime') && visualMapModel.get('hoverLinkOnHandle');
	    }

	    module.exports = ContinuousView;



/***/ },
/* 590 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var formatUtil = __webpack_require__(245);
	    var layout = __webpack_require__(260);
	    var echarts = __webpack_require__(240);
	    var VisualMapping = __webpack_require__(434);

	    module.exports = echarts.extendComponentView({

	        type: 'visualMap',

	        /**
	         * @readOnly
	         * @type {Object}
	         */
	        autoPositionValues: {left: 1, right: 1, top: 1, bottom: 1},

	        init: function (ecModel, api) {
	            /**
	             * @readOnly
	             * @type {module:echarts/model/Global}
	             */
	            this.ecModel = ecModel;

	            /**
	             * @readOnly
	             * @type {module:echarts/ExtensionAPI}
	             */
	            this.api = api;

	            /**
	             * @readOnly
	             * @type {module:echarts/component/visualMap/visualMapModel}
	             */
	            this.visualMapModel;
	        },

	        /**
	         * @protected
	         */
	        render: function (visualMapModel, ecModel, api, payload) {
	            this.visualMapModel = visualMapModel;

	            if (visualMapModel.get('show') === false) {
	                this.group.removeAll();
	                return;
	            }

	            this.doRender.apply(this, arguments);
	        },

	        /**
	         * @protected
	         */
	        renderBackground: function (group) {
	            var visualMapModel = this.visualMapModel;
	            var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);
	            var rect = group.getBoundingRect();

	            group.add(new graphic.Rect({
	                z2: -1, // Lay background rect on the lowest layer.
	                silent: true,
	                shape: {
	                    x: rect.x - padding[3],
	                    y: rect.y - padding[0],
	                    width: rect.width + padding[3] + padding[1],
	                    height: rect.height + padding[0] + padding[2]
	                },
	                style: {
	                    fill: visualMapModel.get('backgroundColor'),
	                    stroke: visualMapModel.get('borderColor'),
	                    lineWidth: visualMapModel.get('borderWidth')
	                }
	            }));
	        },

	        /**
	         * @protected
	         * @param {number} targetValue can be Infinity or -Infinity
	         * @param {string=} visualCluster Only can be 'color' 'opacity' 'symbol' 'symbolSize'
	         * @param {Object} [opts]
	         * @param {string=} [opts.forceState] Specify state, instead of using getValueState method.
	         * @param {string=} [opts.convertOpacityToAlpha=false] For color gradient in controller widget.
	         * @return {*} Visual value.
	         */
	        getControllerVisual: function (targetValue, visualCluster, opts) {
	            opts = opts || {};

	            var forceState = opts.forceState;
	            var visualMapModel = this.visualMapModel;
	            var visualObj = {};

	            // Default values.
	            if (visualCluster === 'symbol') {
	                visualObj.symbol = visualMapModel.get('itemSymbol');
	            }
	            if (visualCluster === 'color') {
	                var defaultColor = visualMapModel.get('contentColor');
	                visualObj.color = defaultColor;
	            }

	            function getter(key) {
	                return visualObj[key];
	            }

	            function setter(key, value) {
	                visualObj[key] = value;
	            }

	            var mappings = visualMapModel.controllerVisuals[
	                forceState || visualMapModel.getValueState(targetValue)
	            ];
	            var visualTypes = VisualMapping.prepareVisualTypes(mappings);

	            zrUtil.each(visualTypes, function (type) {
	                var visualMapping = mappings[type];
	                if (opts.convertOpacityToAlpha && type === 'opacity') {
	                    type = 'colorAlpha';
	                    visualMapping = mappings.__alphaForOpacity;
	                }
	                if (VisualMapping.dependsOn(type, visualCluster)) {
	                    visualMapping && visualMapping.applyVisual(
	                        targetValue, getter, setter
	                    );
	                }
	            });

	            return visualObj[visualCluster];
	        },

	        /**
	         * @protected
	         */
	        positionGroup: function (group) {
	            var model = this.visualMapModel;
	            var api = this.api;

	            layout.positionElement(
	                group,
	                model.getBoxLayoutParams(),
	                {width: api.getWidth(), height: api.getHeight()}
	            );
	        },

	        /**
	         * @protected
	         * @abstract
	         */
	        doRender: zrUtil.noop

	    });



/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var layout = __webpack_require__(260);

	    var helper = {

	        /**
	         * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\
	         * @param {module:echarts/ExtensionAPI} api
	         * @param {Array.<number>} itemSize always [short, long]
	         * @return {string} 'left' or 'right' or 'top' or 'bottom'
	         */
	        getItemAlign: function (visualMapModel, api, itemSize) {
	            var modelOption = visualMapModel.option;
	            var itemAlign = modelOption.align;

	            if (itemAlign != null && itemAlign !== 'auto') {
	                return itemAlign;
	            }

	            // Auto decision align.
	            var ecSize = {width: api.getWidth(), height: api.getHeight()};
	            var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;

	            var paramsSet = [
	                ['left', 'right', 'width'],
	                ['top', 'bottom', 'height']
	            ];
	            var reals = paramsSet[realIndex];
	            var fakeValue = [0, null, 10];

	            var layoutInput = {};
	            for (var i = 0; i < 3; i++) {
	                layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];
	                layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];
	            }

	            var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];
	            var rect = layout.getLayoutRect(layoutInput, ecSize, modelOption.padding);

	            return reals[
	                (rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5
	                    < ecSize[rParam[1]] * 0.5 ? 0 : 1
	            ];
	        },

	        /**
	         * Prepare dataIndex for outside usage, where dataIndex means rawIndex, and
	         * dataIndexInside means filtered index.
	         */
	        convertDataIndex: function (batch) {
	            zrUtil.each(batch || [], function (batchItem) {
	                if (batch.dataIndex != null) {
	                    batch.dataIndexInside = batch.dataIndex;
	                    batch.dataIndex = null;
	                }
	            });
	            return batch;
	        }

	    };


	    module.exports = helper;



/***/ },
/* 592 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data range action
	 */


	    var echarts = __webpack_require__(240);

	    var actionInfo = {
	        type: 'selectDataRange',
	        event: 'dataRangeSelected',
	        // FIXME use updateView appears wrong
	        update: 'update'
	    };

	    echarts.registerAction(actionInfo, function (payload, ecModel) {

	        ecModel.eachComponent({mainType: 'visualMap', query: payload}, function (model) {
	            model.setSelected(payload.selected);
	        });

	    });



/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */


	    __webpack_require__(240).registerPreprocessor(
	        __webpack_require__(583)
	    );

	    __webpack_require__(584);
	    __webpack_require__(585);
	    __webpack_require__(594);
	    __webpack_require__(595);
	    __webpack_require__(592);



/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	

	    var VisualMapModel = __webpack_require__(587);
	    var zrUtil = __webpack_require__(243);
	    var VisualMapping = __webpack_require__(434);
	    var visualDefault = __webpack_require__(588);
	    var reformIntervals = __webpack_require__(246).reformIntervals;

	    var PiecewiseModel = VisualMapModel.extend({

	        type: 'visualMap.piecewise',

	        /**
	         * Order Rule:
	         *
	         * option.categories / option.pieces / option.text / option.selected:
	         *     If !option.inverse,
	         *     Order when vertical: ['top', ..., 'bottom'].
	         *     Order when horizontal: ['left', ..., 'right'].
	         *     If option.inverse, the meaning of
	         *     the order should be reversed.
	         *
	         * this._pieceList:
	         *     The order is always [low, ..., high].
	         *
	         * Mapping from location to low-high:
	         *     If !option.inverse
	         *     When vertical, top is high.
	         *     When horizontal, right is high.
	         *     If option.inverse, reverse.
	         */

	        /**
	         * @protected
	         */
	        defaultOption: {
	            selected: null,             // Object. If not specified, means selected.
	                                        // When pieces and splitNumber: {'0': true, '5': true}
	                                        // When categories: {'cate1': false, 'cate3': true}
	                                        // When selected === false, means all unselected.

	            minOpen: false,             // Whether include values that smaller than `min`.
	            maxOpen: false,             // Whether include values that bigger than `max`.

	            align: 'auto',              // 'auto', 'left', 'right'
	            itemWidth: 20,              // When put the controller vertically, it is the length of
	                                        // horizontal side of each item. Otherwise, vertical side.
	            itemHeight: 14,             // When put the controller vertically, it is the length of
	                                        // vertical side of each item. Otherwise, horizontal side.
	            itemSymbol: 'roundRect',
	            pieceList: null,            // Each item is Object, with some of those attrs:
	                                        // {min, max, lt, gt, lte, gte, value,
	                                        // color, colorSaturation, colorAlpha, opacity,
	                                        // symbol, symbolSize}, which customize the range or visual
	                                        // coding of the certain piece. Besides, see "Order Rule".
	            categories: null,           // category names, like: ['some1', 'some2', 'some3'].
	                                        // Attr min/max are ignored when categories set. See "Order Rule"
	            splitNumber: 5,             // If set to 5, auto split five pieces equally.
	                                        // If set to 0 and component type not set, component type will be
	                                        // determined as "continuous". (It is less reasonable but for ec2
	                                        // compatibility, see echarts/component/visualMap/typeDefaulter)
	            selectedMode: 'multiple',   // Can be 'multiple' or 'single'.
	            itemGap: 10,                // The gap between two items, in px.
	            hoverLink: true,            // Enable hover highlight.

	            showLabel: null             // By default, when text is used, label will hide (the logic
	                                        // is remained for compatibility reason)
	        },

	        /**
	         * @override
	         */
	        optionUpdated: function (newOption, isInit) {
	            PiecewiseModel.superApply(this, 'optionUpdated', arguments);

	            /**
	             * The order is always [low, ..., high].
	             * [{text: string, interval: Array.<number>}, ...]
	             * @private
	             * @type {Array.<Object>}
	             */
	            this._pieceList = [];

	            this.resetTargetSeries();
	            this.resetExtent();

	            /**
	             * 'pieces', 'categories', 'splitNumber'
	             * @type {string}
	             */
	            var mode = this._mode = this._determineMode();

	            resetMethods[this._mode].call(this);

	            this._resetSelected(newOption, isInit);

	            var categories = this.option.categories;

	            this.resetVisual(function (mappingOption, state) {
	                if (mode === 'categories') {
	                    mappingOption.mappingMethod = 'category';
	                    mappingOption.categories = zrUtil.clone(categories);
	                }
	                else {
	                    mappingOption.dataExtent = this.getExtent();
	                    mappingOption.mappingMethod = 'piecewise';
	                    mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {
	                        var piece = zrUtil.clone(piece);
	                        if (state !== 'inRange') {
	                            // FIXME
	                            // outOfRange do not support special visual in pieces.
	                            piece.visual = null;
	                        }
	                        return piece;
	                    });
	                }
	            });
	        },

	        /**
	         * @protected
	         * @override
	         */
	        completeVisualOption: function () {
	            // Consider this case:
	            // visualMap: {
	            //      pieces: [{symbol: 'circle', lt: 0}, {symbol: 'rect', gte: 0}]
	            // }
	            // where no inRange/outOfRange set but only pieces. So we should make
	            // default inRange/outOfRange for this case, otherwise visuals that only
	            // appear in `pieces` will not be taken into account in visual encoding.

	            var option = this.option;
	            var visualTypesInPieces = {};
	            var visualTypes = VisualMapping.listVisualTypes();
	            var isCategory = this.isCategory();

	            zrUtil.each(option.pieces, function (piece) {
	                zrUtil.each(visualTypes, function (visualType) {
	                    if (piece.hasOwnProperty(visualType)) {
	                        visualTypesInPieces[visualType] = 1;
	                    }
	                });
	            });

	            zrUtil.each(visualTypesInPieces, function (v, visualType) {
	                var exists = 0;
	                zrUtil.each(this.stateList, function (state) {
	                    exists |= has(option, state, visualType)
	                        || has(option.target, state, visualType);
	                }, this);

	                !exists && zrUtil.each(this.stateList, function (state) {
	                    (option[state] || (option[state] = {}))[visualType] = visualDefault.get(
	                        visualType, state === 'inRange' ? 'active' : 'inactive', isCategory
	                    );
	                });
	            }, this);

	            function has(obj, state, visualType) {
	                return obj && obj[state] && (
	                    zrUtil.isObject(obj[state])
	                        ? obj[state].hasOwnProperty(visualType)
	                        : obj[state] === visualType // e.g., inRange: 'symbol'
	                );
	            }

	            VisualMapModel.prototype.completeVisualOption.apply(this, arguments);
	        },

	        _resetSelected: function (newOption, isInit) {
	            var thisOption = this.option;
	            var pieceList = this._pieceList;

	            // Selected do not merge but all override.
	            var selected = (isInit ? thisOption : newOption).selected || {};
	            thisOption.selected = selected;

	            // Consider 'not specified' means true.
	            zrUtil.each(pieceList, function (piece, index) {
	                var key = this.getSelectedMapKey(piece);
	                if (!selected.hasOwnProperty(key)) {
	                    selected[key] = true;
	                }
	            }, this);

	            if (thisOption.selectedMode === 'single') {
	                // Ensure there is only one selected.
	                var hasSel = false;

	                zrUtil.each(pieceList, function (piece, index) {
	                    var key = this.getSelectedMapKey(piece);
	                    if (selected[key]) {
	                        hasSel
	                            ? (selected[key] = false)
	                            : (hasSel = true);
	                    }
	                }, this);
	            }
	            // thisOption.selectedMode === 'multiple', default: all selected.
	        },

	        /**
	         * @public
	         */
	        getSelectedMapKey: function (piece) {
	            return this._mode === 'categories'
	                ? piece.value + '' : piece.index + '';
	        },

	        /**
	         * @public
	         */
	        getPieceList: function () {
	            return this._pieceList;
	        },

	        /**
	         * @private
	         * @return {string}
	         */
	        _determineMode: function () {
	            var option = this.option;

	            return option.pieces && option.pieces.length > 0
	                ? 'pieces'
	                : this.option.categories
	                ? 'categories'
	                : 'splitNumber';
	        },

	        /**
	         * @public
	         * @override
	         */
	        setSelected: function (selected) {
	            this.option.selected = zrUtil.clone(selected);
	        },

	        /**
	         * @public
	         * @override
	         */
	        getValueState: function (value) {
	            var index = VisualMapping.findPieceIndex(value, this._pieceList);

	            return index != null
	                ? (this.option.selected[this.getSelectedMapKey(this._pieceList[index])]
	                    ? 'inRange' : 'outOfRange'
	                )
	                : 'outOfRange';
	        },

	        /**
	         * @public
	         * @params {number} pieceIndex piece index in visualMapModel.getPieceList()
	         * @return {Array.<Object>} [{seriesId, dataIndices: <Array.<number>>}, ...]
	         */
	        findTargetDataIndices: function (pieceIndex) {
	            var result = [];

	            this.eachTargetSeries(function (seriesModel) {
	                var dataIndices = [];
	                var data = seriesModel.getData();

	                data.each(this.getDataDimension(data), function (value, dataIndex) {
	                    // Should always base on model pieceList, because it is order sensitive.
	                    var pIdx = VisualMapping.findPieceIndex(value, this._pieceList);
	                    pIdx === pieceIndex && dataIndices.push(dataIndex);
	                }, true, this);

	                result.push({seriesId: seriesModel.id, dataIndex: dataIndices});
	            }, this);

	            return result;
	        },

	        /**
	         * @private
	         * @param {Object} piece piece.value or piece.interval is required.
	         * @return {number} Can be Infinity or -Infinity
	         */
	        getRepresentValue: function (piece) {
	            var representValue;
	            if (this.isCategory()) {
	                representValue = piece.value;
	            }
	            else {
	                if (piece.value != null) {
	                    representValue = piece.value;
	                }
	                else {
	                    var pieceInterval = piece.interval || [];
	                    representValue = (pieceInterval[0] === -Infinity && pieceInterval[1] === Infinity)
	                        ? 0
	                        : (pieceInterval[0] + pieceInterval[1]) / 2;
	                }
	            }
	            return representValue;
	        },

	        getVisualMeta: function (getColorVisual) {
	            // Do not support category. (category axis is ordinal, numerical)
	            if (this.isCategory()) {
	                return;
	            }

	            var stops = [];
	            var outerColors = [];
	            var visualMapModel = this;

	            function setStop(interval, valueState) {
	                var representValue = visualMapModel.getRepresentValue({interval: interval});
	                if (!valueState) {
	                    valueState = visualMapModel.getValueState(representValue);
	                }
	                var color = getColorVisual(representValue, valueState);
	                if (interval[0] === -Infinity) {
	                    outerColors[0] = color;
	                }
	                else if (interval[1] === Infinity) {
	                    outerColors[1] = color;
	                }
	                else {
	                    stops.push(
	                        {value: interval[0], color: color},
	                        {value: interval[1], color: color}
	                    );
	                }
	            }

	            // Suplement
	            var pieceList = this._pieceList.slice();
	            if (!pieceList.length) {
	                pieceList.push({interval: [-Infinity, Infinity]});
	            }
	            else {
	                var edge = pieceList[0].interval[0];
	                edge !== -Infinity && pieceList.unshift({interval: [-Infinity, edge]});
	                edge = pieceList[pieceList.length - 1].interval[1];
	                edge !== Infinity && pieceList.push({interval: [edge, Infinity]});
	            }

	            var curr = -Infinity;
	            zrUtil.each(pieceList, function (piece) {
	                var interval = piece.interval;
	                if (interval) {
	                    // Fulfill gap.
	                    interval[0] > curr && setStop([curr, interval[0]], 'outOfRange');
	                    setStop(interval.slice());
	                    curr = interval[1];
	                }
	            }, this);

	            return {stops: stops, outerColors: outerColors};
	        }

	    });

	    /**
	     * Key is this._mode
	     * @type {Object}
	     * @this {module:echarts/component/viusalMap/PiecewiseMode}
	     */
	    var resetMethods = {

	        splitNumber: function () {
	            var thisOption = this.option;
	            var pieceList = this._pieceList;
	            var precision = thisOption.precision;
	            var dataExtent = this.getExtent();
	            var splitNumber = thisOption.splitNumber;
	            splitNumber = Math.max(parseInt(splitNumber, 10), 1);
	            thisOption.splitNumber = splitNumber;

	            var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;
	            // Precision auto-adaption
	            while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {
	                precision++;
	            }
	            thisOption.precision = precision;
	            splitStep = +splitStep.toFixed(precision);

	            var index = 0;

	            if (thisOption.minOpen) {
	                pieceList.push({
	                    index: index++,
	                    interval: [-Infinity, dataExtent[0]],
	                    close: [0, 0]
	                });
	            }

	            for (
	                var curr = dataExtent[0], len = index + splitNumber;
	                index < len;
	                curr += splitStep
	            ) {
	                var max = index === splitNumber - 1 ? dataExtent[1] : (curr + splitStep);

	                pieceList.push({
	                    index: index++,
	                    interval: [curr, max],
	                    close: [1, 1]
	                });
	            }

	            if (thisOption.maxOpen) {
	                pieceList.push({
	                    index: index++,
	                    interval: [dataExtent[1], Infinity],
	                    close: [0, 0]
	                });
	            }

	            reformIntervals(pieceList);

	            zrUtil.each(pieceList, function (piece) {
	                piece.text = this.formatValueText(piece.interval);
	            }, this);
	        },

	        categories: function () {
	            var thisOption = this.option;
	            zrUtil.each(thisOption.categories, function (cate) {
	                // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。
	                // 是否改一致。
	                this._pieceList.push({
	                    text: this.formatValueText(cate, true),
	                    value: cate
	                });
	            }, this);

	            // See "Order Rule".
	            normalizeReverse(thisOption, this._pieceList);
	        },

	        pieces: function () {
	            var thisOption = this.option;
	            var pieceList = this._pieceList;

	            zrUtil.each(thisOption.pieces, function (pieceListItem, index) {

	                if (!zrUtil.isObject(pieceListItem)) {
	                    pieceListItem = {value: pieceListItem};
	                }

	                var item = {text: '', index: index};

	                if (pieceListItem.label != null) {
	                    item.text = pieceListItem.label;
	                }

	                if (pieceListItem.hasOwnProperty('value')) {
	                    var value = item.value = pieceListItem.value;
	                    item.interval = [value, value];
	                    item.close = [1, 1];
	                }
	                else {
	                    // `min` `max` is legacy option.
	                    // `lt` `gt` `lte` `gte` is recommanded.
	                    var interval = item.interval = [];
	                    var close = item.close = [0, 0];

	                    var closeList = [1, 0, 1];
	                    var infinityList = [-Infinity, Infinity];

	                    var useMinMax = [];
	                    for (var lg = 0; lg < 2; lg++) {
	                        var names = [['gte', 'gt', 'min'], ['lte', 'lt', 'max']][lg];
	                        for (var i = 0; i < 3 && interval[lg] == null; i++) {
	                            interval[lg] = pieceListItem[names[i]];
	                            close[lg] = closeList[i];
	                            useMinMax[lg] = i === 2;
	                        }
	                        interval[lg] == null && (interval[lg] = infinityList[lg]);
	                    }
	                    useMinMax[0] && interval[1] === Infinity && (close[0] = 0);
	                    useMinMax[1] && interval[0] === -Infinity && (close[1] = 0);

	                    if (__DEV__) {
	                        if (interval[0] > interval[1]) {
	                            console.warn(
	                                'Piece ' + index + 'is illegal: ' + interval
	                                + ' lower bound should not greater then uppper bound.'
	                            );
	                        }
	                    }

	                    if (interval[0] === interval[1] && close[0] && close[1]) {
	                        // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],
	                        // we use value to lift the priority when min === max
	                        item.value = interval[0];
	                    }
	                }

	                item.visual = VisualMapping.retrieveVisuals(pieceListItem);

	                pieceList.push(item);

	            }, this);

	            // See "Order Rule".
	            normalizeReverse(thisOption, pieceList);
	            // Only pieces
	            reformIntervals(pieceList);

	            zrUtil.each(pieceList, function (piece) {
	                var close = piece.close;
	                var edgeSymbols = [['<', '≤'][close[1]], ['>', '≥'][close[0]]];
	                piece.text = piece.text || this.formatValueText(
	                    piece.value != null ? piece.value : piece.interval,
	                    false,
	                    edgeSymbols
	                );
	            }, this);
	        }
	    };

	    function normalizeReverse(thisOption, pieceList) {
	        var inverse = thisOption.inverse;
	        if (thisOption.orient === 'vertical' ? !inverse : inverse) {
	             pieceList.reverse();
	        }
	    }

	    module.exports = PiecewiseModel;


/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	

	    var VisualMapView = __webpack_require__(590);
	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var symbolCreators = __webpack_require__(346);
	    var layout = __webpack_require__(260);
	    var helper = __webpack_require__(591);

	    var PiecewiseVisualMapView = VisualMapView.extend({

	        type: 'visualMap.piecewise',

	        /**
	         * @protected
	         * @override
	         */
	        doRender: function () {
	            var thisGroup = this.group;

	            thisGroup.removeAll();

	            var visualMapModel = this.visualMapModel;
	            var textGap = visualMapModel.get('textGap');
	            var textStyleModel = visualMapModel.textStyleModel;
	            var textFont = textStyleModel.getFont();
	            var textFill = textStyleModel.getTextColor();
	            var itemAlign = this._getItemAlign();
	            var itemSize = visualMapModel.itemSize;
	            var viewData = this._getViewData();
	            var endsText = viewData.endsText;
	            var showLabel = zrUtil.retrieve(visualMapModel.get('showLabel', true), !endsText);

	            endsText && this._renderEndsText(
	                thisGroup, endsText[0], itemSize, showLabel, itemAlign
	            );

	            zrUtil.each(viewData.viewPieceList, renderItem, this);

	            endsText && this._renderEndsText(
	                thisGroup, endsText[1], itemSize, showLabel, itemAlign
	            );

	            layout.box(
	                visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap')
	            );

	            this.renderBackground(thisGroup);

	            this.positionGroup(thisGroup);

	            function renderItem(item) {
	                var piece = item.piece;

	                var itemGroup = new graphic.Group();
	                itemGroup.onclick = zrUtil.bind(this._onItemClick, this, piece);

	                this._enableHoverLink(itemGroup, item.indexInModelPieceList);

	                var representValue = visualMapModel.getRepresentValue(piece);

	                this._createItemSymbol(
	                    itemGroup, representValue, [0, 0, itemSize[0], itemSize[1]]
	                );

	                if (showLabel) {
	                    var visualState = this.visualMapModel.getValueState(representValue);

	                    itemGroup.add(new graphic.Text({
	                        style: {
	                            x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,
	                            y: itemSize[1] / 2,
	                            text: piece.text,
	                            textVerticalAlign: 'middle',
	                            textAlign: itemAlign,
	                            textFont: textFont,
	                            fill: textFill,
	                            opacity: visualState === 'outOfRange' ? 0.5 : 1
	                        }
	                    }));
	                }

	                thisGroup.add(itemGroup);
	            }
	        },

	        /**
	         * @private
	         */
	        _enableHoverLink: function (itemGroup, pieceIndex) {
	            itemGroup
	                .on('mouseover', zrUtil.bind(onHoverLink, this, 'highlight'))
	                .on('mouseout', zrUtil.bind(onHoverLink, this, 'downplay'));

	            function onHoverLink(method) {
	                var visualMapModel = this.visualMapModel;

	                visualMapModel.option.hoverLink && this.api.dispatchAction({
	                    type: method,
	                    batch: helper.convertDataIndex(
	                        visualMapModel.findTargetDataIndices(pieceIndex)
	                    )
	                });
	            }
	        },

	        /**
	         * @private
	         */
	        _getItemAlign: function () {
	            var visualMapModel = this.visualMapModel;
	            var modelOption = visualMapModel.option;

	            if (modelOption.orient === 'vertical') {
	                return helper.getItemAlign(
	                    visualMapModel, this.api, visualMapModel.itemSize
	                );
	            }
	            else { // horizontal, most case left unless specifying right.
	                var align = modelOption.align;
	                if (!align || align === 'auto') {
	                    align = 'left';
	                }
	                return align;
	            }
	        },

	        /**
	         * @private
	         */
	        _renderEndsText: function (group, text, itemSize, showLabel, itemAlign) {
	            if (!text) {
	                return;
	            }

	            var itemGroup = new graphic.Group();
	            var textStyleModel = this.visualMapModel.textStyleModel;

	            itemGroup.add(new graphic.Text({
	                style: {
	                    x: showLabel ? (itemAlign === 'right' ? itemSize[0] : 0) : itemSize[0] / 2,
	                    y: itemSize[1] / 2,
	                    textVerticalAlign: 'middle',
	                    textAlign: showLabel ? itemAlign : 'center',
	                    text: text,
	                    textFont: textStyleModel.getFont(),
	                    fill: textStyleModel.getTextColor()
	                }
	            }));

	            group.add(itemGroup);
	        },

	        /**
	         * @private
	         * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.
	         */
	        _getViewData: function () {
	            var visualMapModel = this.visualMapModel;

	            var viewPieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {
	                return {piece: piece, indexInModelPieceList: index};
	            });
	            var endsText = visualMapModel.get('text');

	            // Consider orient and inverse.
	            var orient = visualMapModel.get('orient');
	            var inverse = visualMapModel.get('inverse');

	            // Order of model pieceList is always [low, ..., high]
	            if (orient === 'horizontal' ? inverse : !inverse) {
	                viewPieceList.reverse();
	            }
	            // Origin order of endsText is [high, low]
	            else if (endsText) {
	                endsText = endsText.slice().reverse();
	            }

	            return {viewPieceList: viewPieceList, endsText: endsText};
	        },

	        /**
	         * @private
	         */
	        _createItemSymbol: function (group, representValue, shapeParam) {
	            group.add(symbolCreators.createSymbol(
	                this.getControllerVisual(representValue, 'symbol'),
	                shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3],
	                this.getControllerVisual(representValue, 'color')
	            ));
	        },

	        /**
	         * @private
	         */
	        _onItemClick: function (piece) {
	            var visualMapModel = this.visualMapModel;
	            var option = visualMapModel.option;
	            var selected = zrUtil.clone(option.selected);
	            var newKey = visualMapModel.getSelectedMapKey(piece);

	            if (option.selectedMode === 'single') {
	                selected[newKey] = true;
	                zrUtil.each(selected, function (o, key) {
	                    selected[key] = key === newKey;
	                });
	            }
	            else {
	                selected[newKey] = !selected[newKey];
	            }

	            this.api.dispatchAction({
	                type: 'selectDataRange',
	                from: this.uid,
	                visualMapId: this.visualMapModel.id,
	                selected: selected
	            });
	        }
	    });

	    module.exports = PiecewiseVisualMapView;



/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	// HINT Markpoint can't be used too much


	    __webpack_require__(597);
	    __webpack_require__(599);

	    __webpack_require__(240).registerPreprocessor(function (opt) {
	        // Make sure markPoint component is enabled
	        opt.markPoint = opt.markPoint || {};
	    });


/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	

	    module.exports = __webpack_require__(598).extend({

	        type: 'markPoint',

	        defaultOption: {
	            zlevel: 0,
	            z: 5,
	            symbol: 'pin',
	            symbolSize: 50,
	            //symbolRotate: 0,
	            //symbolOffset: [0, 0]
	            tooltip: {
	                trigger: 'item'
	            },
	            label: {
	                normal: {
	                    show: true,
	                    position: 'inside'
	                },
	                emphasis: {
	                    show: true
	                }
	            },
	            itemStyle: {
	                normal: {
	                    borderWidth: 2
	                }
	            }
	        }
	    });


/***/ },
/* 598 */
/***/ function(module, exports, __webpack_require__) {

	

	    var modelUtil = __webpack_require__(244);
	    var zrUtil = __webpack_require__(243);
	    var env = __webpack_require__(241);

	    var formatUtil = __webpack_require__(245);
	    var addCommas = formatUtil.addCommas;
	    var encodeHTML = formatUtil.encodeHTML;

	    function fillLabel(opt) {
	        modelUtil.defaultEmphasis(
	            opt.label,
	            modelUtil.LABEL_OPTIONS
	        );
	    }
	    var MarkerModel = __webpack_require__(240).extendComponentModel({

	        type: 'marker',

	        dependencies: ['series', 'grid', 'polar', 'geo'],
	        /**
	         * @overrite
	         */
	        init: function (option, parentModel, ecModel, extraOpt) {

	            if (__DEV__) {
	                if (this.type === 'marker') {
	                    throw new Error('Marker component is abstract component. Use markLine, markPoint, markArea instead.');
	                }
	            }
	            this.mergeDefaultAndTheme(option, ecModel);
	            this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);
	        },

	        /**
	         * @return {boolean}
	         */
	        isAnimationEnabled: function () {
	            if (env.node) {
	                return false;
	            }

	            var hostSeries = this.__hostSeries;
	            return this.getShallow('animation') && hostSeries && hostSeries.isAnimationEnabled();
	        },

	        mergeOption: function (newOpt, ecModel, createdBySelf, isInit) {
	            var MarkerModel = this.constructor;
	            var modelPropName = this.mainType + 'Model';
	            if (!createdBySelf) {
	                ecModel.eachSeries(function (seriesModel) {

	                    var markerOpt = seriesModel.get(this.mainType);

	                    var markerModel = seriesModel[modelPropName];
	                    if (!markerOpt || !markerOpt.data) {
	                        seriesModel[modelPropName] = null;
	                        return;
	                    }
	                    if (!markerModel) {
	                        if (isInit) {
	                            // Default label emphasis `position` and `show`
	                            fillLabel(markerOpt);
	                        }
	                        zrUtil.each(markerOpt.data, function (item) {
	                            // FIXME Overwrite fillLabel method ?
	                            if (item instanceof Array) {
	                                fillLabel(item[0]);
	                                fillLabel(item[1]);
	                            }
	                            else {
	                                fillLabel(item);
	                            }
	                        });

	                        markerModel = new MarkerModel(
	                            markerOpt, this, ecModel
	                        );

	                        zrUtil.extend(markerModel, {
	                            mainType: this.mainType,
	                            // Use the same series index and name
	                            seriesIndex: seriesModel.seriesIndex,
	                            name: seriesModel.name,
	                            createdBySelf: true
	                        });

	                        markerModel.__hostSeries = seriesModel;
	                    }
	                    else {
	                        markerModel.mergeOption(markerOpt, ecModel, true);
	                    }
	                    seriesModel[modelPropName] = markerModel;
	                }, this);
	            }
	        },

	        formatTooltip: function (dataIndex) {
	            var data = this.getData();
	            var value = this.getRawValue(dataIndex);
	            var formattedValue = zrUtil.isArray(value)
	                ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
	            var name = data.getName(dataIndex);
	            var html = encodeHTML(this.name);
	            if (value != null || name) {
	                html += '<br />';
	            }
	            if (name) {
	                html += encodeHTML(name);
	                if (value != null) {
	                    html += ' : ';
	                }
	            }
	            if (value != null) {
	                html += encodeHTML(formattedValue);
	            }
	            return html;
	        },

	        getData: function () {
	            return this._data;
	        },

	        setData: function (data) {
	            this._data = data;
	        }
	    });

	    zrUtil.mixin(MarkerModel, modelUtil.dataFormatMixin);

	    module.exports = MarkerModel;


/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	

	    var SymbolDraw = __webpack_require__(344);
	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);

	    var List = __webpack_require__(337);

	    var markerHelper = __webpack_require__(600);

	    function updateMarkerLayout(mpData, seriesModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        mpData.each(function (idx) {
	            var itemModel = mpData.getItemModel(idx);
	            var point;
	            var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());
	            var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());
	            if (!isNaN(xPx) && !isNaN(yPx)) {
	                point = [xPx, yPx];
	            }
	            // Chart like bar may have there own marker positioning logic
	            else if (seriesModel.getMarkerPosition) {
	                // Use the getMarkerPoisition
	                point = seriesModel.getMarkerPosition(
	                    mpData.getValues(mpData.dimensions, idx)
	                );
	            }
	            else if (coordSys) {
	                var x = mpData.get(coordSys.dimensions[0], idx);
	                var y = mpData.get(coordSys.dimensions[1], idx);
	                point = coordSys.dataToPoint([x, y]);

	            }

	            // Use x, y if has any
	            if (!isNaN(xPx)) {
	                point[0] = xPx;
	            }
	            if (!isNaN(yPx)) {
	                point[1] = yPx;
	            }

	            mpData.setItemLayout(idx, point);
	        });
	    }

	    __webpack_require__(601).extend({

	        type: 'markPoint',

	        updateLayout: function (markPointModel, ecModel, api) {
	            ecModel.eachSeries(function (seriesModel) {
	                var mpModel = seriesModel.markPointModel;
	                if (mpModel) {
	                    updateMarkerLayout(mpModel.getData(), seriesModel, api);
	                    this.markerGroupMap[seriesModel.name].updateLayout(mpModel);
	                }
	            }, this);
	        },

	        renderSeries: function (seriesModel, mpModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var seriesName = seriesModel.name;
	            var seriesData = seriesModel.getData();

	            var symbolDrawMap = this.markerGroupMap;
	            var symbolDraw = symbolDrawMap[seriesName];
	            if (!symbolDraw) {
	                symbolDraw = symbolDrawMap[seriesName] = new SymbolDraw();
	            }

	            var mpData = createList(coordSys, seriesModel, mpModel);

	            // FIXME
	            mpModel.setData(mpData);

	            updateMarkerLayout(mpModel.getData(), seriesModel, api);

	            mpData.each(function (idx) {
	                var itemModel = mpData.getItemModel(idx);
	                var symbolSize = itemModel.getShallow('symbolSize');
	                if (typeof symbolSize === 'function') {
	                    // FIXME 这里不兼容 ECharts 2.x，2.x 貌似参数是整个数据？
	                    symbolSize = symbolSize(
	                        mpModel.getRawValue(idx), mpModel.getDataParams(idx)
	                    );
	                }
	                mpData.setItemVisual(idx, {
	                    symbolSize: symbolSize,
	                    color: itemModel.get('itemStyle.normal.color')
	                        || seriesData.getVisual('color'),
	                    symbol: itemModel.getShallow('symbol')
	                });
	            });

	            // TODO Text are wrong
	            symbolDraw.updateData(mpData);
	            this.group.add(symbolDraw.group);

	            // Set host model for tooltip
	            // FIXME
	            mpData.eachItemGraphicEl(function (el) {
	                el.traverse(function (child) {
	                    child.dataModel = mpModel;
	                });
	            });

	            symbolDraw.__keep = true;

	            symbolDraw.group.silent = mpModel.get('silent') || seriesModel.get('silent');
	        }
	    });

	    /**
	     * @inner
	     * @param {module:echarts/coord/*} [coordSys]
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {module:echarts/model/Model} mpModel
	     */
	    function createList(coordSys, seriesModel, mpModel) {
	        var coordDimsInfos;
	        if (coordSys) {
	            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	                var info = seriesModel.getData().getDimensionInfo(
	                    seriesModel.coordDimToDataDim(coordDim)[0]
	                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	                info.name = coordDim;
	                return info;
	            });
	        }
	        else {
	            coordDimsInfos =[{
	                name: 'value',
	                type: 'float'
	            }];
	        }

	        var mpData = new List(coordDimsInfos, mpModel);
	        var dataOpt = zrUtil.map(mpModel.get('data'), zrUtil.curry(
	                markerHelper.dataTransform, seriesModel
	            ));
	        if (coordSys) {
	            dataOpt = zrUtil.filter(
	                dataOpt, zrUtil.curry(markerHelper.dataFilter, coordSys)
	            );
	        }

	        mpData.initData(dataOpt, null,
	            coordSys ? markerHelper.dimValueGetter : function (item) {
	                return item.value;
	            }
	        );
	        return mpData;
	    }



/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var numberUtil = __webpack_require__(246);
	    var indexOf = zrUtil.indexOf;

	    function hasXOrY(item) {
	        return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));
	    }

	    function hasXAndY(item) {
	        return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));
	    }

	    function getPrecision(data, valueAxisDim, dataIndex) {
	        var precision = -1;
	        do {
	            precision = Math.max(
	                numberUtil.getPrecision(data.get(
	                    valueAxisDim, dataIndex
	                )),
	                precision
	            );
	            data = data.stackedOn;
	        } while (data);

	        return precision;
	    }

	    function markerTypeCalculatorWithExtent(
	        mlType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex
	    ) {
	        var coordArr = [];
	        var value = numCalculate(data, targetDataDim, mlType);

	        var dataIndex = data.indexOfNearest(targetDataDim, value, true);
	        coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex, true);
	        coordArr[targetCoordIndex] = data.get(targetDataDim, dataIndex, true);

	        var precision = getPrecision(data, targetDataDim, dataIndex);
	        if (precision >= 0) {
	            coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);
	        }

	        return coordArr;
	    }

	    var curry = zrUtil.curry;
	    // TODO Specified percent
	    var markerTypeCalculator = {
	        /**
	         * @method
	         * @param {module:echarts/data/List} data
	         * @param {string} baseAxisDim
	         * @param {string} valueAxisDim
	         */
	        min: curry(markerTypeCalculatorWithExtent, 'min'),
	        /**
	         * @method
	         * @param {module:echarts/data/List} data
	         * @param {string} baseAxisDim
	         * @param {string} valueAxisDim
	         */
	        max: curry(markerTypeCalculatorWithExtent, 'max'),

	        /**
	         * @method
	         * @param {module:echarts/data/List} data
	         * @param {string} baseAxisDim
	         * @param {string} valueAxisDim
	         */
	        average: curry(markerTypeCalculatorWithExtent, 'average')
	    };

	    /**
	     * Transform markPoint data item to format used in List by do the following
	     * 1. Calculate statistic like `max`, `min`, `average`
	     * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array
	     * @param  {module:echarts/model/Series} seriesModel
	     * @param  {module:echarts/coord/*} [coordSys]
	     * @param  {Object} item
	     * @return {Object}
	     */
	    var dataTransform = function (seriesModel, item) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;

	        // 1. If not specify the position with pixel directly
	        // 2. If `coord` is not a data array. Which uses `xAxis`,
	        // `yAxis` to specify the coord on each dimension

	        // parseFloat first because item.x and item.y can be percent string like '20%'
	        if (item && !hasXAndY(item) && !zrUtil.isArray(item.coord) && coordSys) {
	            var dims = coordSys.dimensions;
	            var axisInfo = getAxisInfo(item, data, coordSys, seriesModel);

	            // Clone the option
	            // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value
	            item = zrUtil.clone(item);

	            if (item.type
	                && markerTypeCalculator[item.type]
	                && axisInfo.baseAxis && axisInfo.valueAxis
	            ) {
	                var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);
	                var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);

	                item.coord = markerTypeCalculator[item.type](
	                    data, axisInfo.baseDataDim, axisInfo.valueDataDim,
	                    otherCoordIndex, targetCoordIndex
	                );
	                // Force to use the value of calculated value.
	                item.value = item.coord[targetCoordIndex];
	            }
	            else {
	                // FIXME Only has one of xAxis and yAxis.
	                var coord = [
	                    item.xAxis != null ? item.xAxis : item.radiusAxis,
	                    item.yAxis != null ? item.yAxis : item.angleAxis
	                ];
	                // Each coord support max, min, average
	                for (var i = 0; i < 2; i++) {
	                    if (markerTypeCalculator[coord[i]]) {
	                        var dataDim = seriesModel.coordDimToDataDim(dims[i])[0];
	                        coord[i] = numCalculate(data, dataDim, coord[i]);
	                    }
	                }
	                item.coord = coord;
	            }
	        }
	        return item;
	    };

	    var getAxisInfo = function (item, data, coordSys, seriesModel) {
	        var ret = {};

	        if (item.valueIndex != null || item.valueDim != null) {
	            ret.valueDataDim = item.valueIndex != null
	                ? data.getDimension(item.valueIndex) : item.valueDim;
	            ret.valueAxis = coordSys.getAxis(seriesModel.dataDimToCoordDim(ret.valueDataDim));
	            ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);
	            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	        }
	        else {
	            ret.baseAxis = seriesModel.getBaseAxis();
	            ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);
	            ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	            ret.valueDataDim = seriesModel.coordDimToDataDim(ret.valueAxis.dim)[0];
	        }

	        return ret;
	    };

	    /**
	     * Filter data which is out of coordinateSystem range
	     * [dataFilter description]
	     * @param  {module:echarts/coord/*} [coordSys]
	     * @param  {Object} item
	     * @return {boolean}
	     */
	    var dataFilter = function (coordSys, item) {
	        // Alwalys return true if there is no coordSys
	        return (coordSys && coordSys.containData && item.coord && !hasXOrY(item))
	            ? coordSys.containData(item.coord) : true;
	    };

	    var dimValueGetter = function (item, dimName, dataIndex, dimIndex) {
	        // x, y, radius, angle
	        if (dimIndex < 2) {
	            return item.coord && item.coord[dimIndex];
	        }
	        return item.value;
	    };

	    var numCalculate = function (data, valueDataDim, type) {
	        if (type === 'average') {
	            var sum = 0;
	            var count = 0;
	            data.each(valueDataDim, function (val, idx) {
	                if (!isNaN(val)) {
	                    sum += val;
	                    count++;
	                }
	            }, true);
	            return sum / count;
	        }
	        else {
	            return data.getDataExtent(valueDataDim, true)[type === 'max' ? 1 : 0];
	        }
	    };

	    module.exports = {
	        dataTransform: dataTransform,
	        dataFilter: dataFilter,
	        dimValueGetter: dimValueGetter,
	        getAxisInfo: getAxisInfo,
	        numCalculate: numCalculate
	    };


/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {

	

	    module.exports = __webpack_require__(240).extendComponentView({

	        type: 'marker',

	        init: function () {
	            /**
	             * Markline grouped by series
	             * @private
	             * @type {Object}
	             */
	            this.markerGroupMap = {};
	        },

	        render: function (markerModel, ecModel, api) {
	            var markerGroupMap = this.markerGroupMap;
	            for (var name in markerGroupMap) {
	                if (markerGroupMap.hasOwnProperty(name)) {
	                    markerGroupMap[name].__keep = false;
	                }
	            }

	            var markerModelKey = this.type + 'Model';
	            ecModel.eachSeries(function (seriesModel) {
	                var markerModel = seriesModel[markerModelKey];
	                markerModel && this.renderSeries(seriesModel, markerModel, ecModel, api);
	            }, this);

	            for (var name in markerGroupMap) {
	                if (markerGroupMap.hasOwnProperty(name) && !markerGroupMap[name].__keep) {
	                    this.group.remove(markerGroupMap[name].group);
	                }
	            }
	        },

	        renderSeries: function () {}
	    });


/***/ },
/* 602 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(603);
	    __webpack_require__(604);

	    __webpack_require__(240).registerPreprocessor(function (opt) {
	        // Make sure markLine component is enabled
	        opt.markLine = opt.markLine || {};
	    });


/***/ },
/* 603 */
/***/ function(module, exports, __webpack_require__) {

	

	    module.exports = __webpack_require__(598).extend({

	        type: 'markLine',

	        defaultOption: {
	            zlevel: 0,
	            z: 5,

	            symbol: ['circle', 'arrow'],
	            symbolSize: [8, 16],

	            //symbolRotate: 0,

	            precision: 2,
	            tooltip: {
	                trigger: 'item'
	            },
	            label: {
	                normal: {
	                    show: true,
	                    position: 'end'
	                },
	                emphasis: {
	                    show: true
	                }
	            },
	            lineStyle: {
	                normal: {
	                    type: 'dashed'
	                },
	                emphasis: {
	                    width: 3
	                }
	            },
	            animationEasing: 'linear'
	        }
	    });


/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var List = __webpack_require__(337);
	    var numberUtil = __webpack_require__(246);

	    var markerHelper = __webpack_require__(600);

	    var LineDraw = __webpack_require__(441);

	    var markLineTransform = function (seriesModel, coordSys, mlModel, item) {
	        var data = seriesModel.getData();
	        // Special type markLine like 'min', 'max', 'average'
	        var mlType = item.type;

	        if (!zrUtil.isArray(item)
	            && (
	                mlType === 'min' || mlType === 'max' || mlType === 'average'
	                // In case
	                // data: [{
	                //   yAxis: 10
	                // }]
	                || (item.xAxis != null || item.yAxis != null)
	            )
	        ) {
	            var valueAxis;
	            var valueDataDim;
	            var value;

	            if (item.yAxis != null || item.xAxis != null) {
	                valueDataDim = item.yAxis != null ? 'y' : 'x';
	                valueAxis = coordSys.getAxis(valueDataDim);

	                value = zrUtil.retrieve(item.yAxis, item.xAxis);
	            }
	            else {
	                var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);
	                valueDataDim = axisInfo.valueDataDim;
	                valueAxis = axisInfo.valueAxis;
	                value = markerHelper.numCalculate(data, valueDataDim, mlType);
	            }
	            var valueIndex = valueDataDim === 'x' ? 0 : 1;
	            var baseIndex = 1 - valueIndex;

	            var mlFrom = zrUtil.clone(item);
	            var mlTo = {};

	            mlFrom.type = null;

	            mlFrom.coord = [];
	            mlTo.coord = [];
	            mlFrom.coord[baseIndex] = -Infinity;
	            mlTo.coord[baseIndex] = Infinity;

	            var precision = mlModel.get('precision');
	            if (precision >= 0 && typeof value === 'number') {
	                value = +value.toFixed(precision);
	            }

	            mlFrom.coord[valueIndex] = mlTo.coord[valueIndex] = value;

	            item = [mlFrom, mlTo, { // Extra option for tooltip and label
	                type: mlType,
	                valueIndex: item.valueIndex,
	                // Force to use the value of calculated value.
	                value: value
	            }];
	        }

	        item = [
	            markerHelper.dataTransform(seriesModel, item[0]),
	            markerHelper.dataTransform(seriesModel, item[1]),
	            zrUtil.extend({}, item[2])
	        ];

	        // Avoid line data type is extended by from(to) data type
	        item[2].type = item[2].type || '';

	        // Merge from option and to option into line option
	        zrUtil.merge(item[2], item[0]);
	        zrUtil.merge(item[2], item[1]);

	        return item;
	    };

	    function isInifinity(val) {
	        return !isNaN(val) && !isFinite(val);
	    }

	    // If a markLine has one dim
	    function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
	        var otherDimIndex = 1 - dimIndex;
	        var dimName = coordSys.dimensions[dimIndex];
	        return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex])
	            && fromCoord[dimIndex] === toCoord[dimIndex] && coordSys.getAxis(dimName).containData(fromCoord[dimIndex]);
	    }

	    function markLineFilter(coordSys, item) {
	        if (coordSys.type === 'cartesian2d') {
	            var fromCoord = item[0].coord;
	            var toCoord = item[1].coord;
	            // In case
	            // {
	            //  markLine: {
	            //    data: [{ yAxis: 2 }]
	            //  }
	            // }
	            if (
	                fromCoord && toCoord &&
	                (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys)
	                || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))
	            ) {
	                return true;
	            }
	        }
	        return markerHelper.dataFilter(coordSys, item[0])
	            && markerHelper.dataFilter(coordSys, item[1]);
	    }

	    function updateSingleMarkerEndLayout(
	        data, idx, isFrom, seriesModel, api
	    ) {
	        var coordSys = seriesModel.coordinateSystem;
	        var itemModel = data.getItemModel(idx);

	        var point;
	        var xPx = numberUtil.parsePercent(itemModel.get('x'), api.getWidth());
	        var yPx = numberUtil.parsePercent(itemModel.get('y'), api.getHeight());
	        if (!isNaN(xPx) && !isNaN(yPx)) {
	            point = [xPx, yPx];
	        }
	        else {
	            // Chart like bar may have there own marker positioning logic
	            if (seriesModel.getMarkerPosition) {
	                // Use the getMarkerPoisition
	                point = seriesModel.getMarkerPosition(
	                    data.getValues(data.dimensions, idx)
	                );
	            }
	            else {
	                var dims = coordSys.dimensions;
	                var x = data.get(dims[0], idx);
	                var y = data.get(dims[1], idx);
	                point = coordSys.dataToPoint([x, y]);
	            }
	            // Expand line to the edge of grid if value on one axis is Inifnity
	            // In case
	            //  markLine: {
	            //    data: [{
	            //      yAxis: 2
	            //      // or
	            //      type: 'average'
	            //    }]
	            //  }
	            if (coordSys.type === 'cartesian2d') {
	                var xAxis = coordSys.getAxis('x');
	                var yAxis = coordSys.getAxis('y');
	                var dims = coordSys.dimensions;
	                if (isInifinity(data.get(dims[0], idx))) {
	                    point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[isFrom ? 0 : 1]);
	                }
	                else if (isInifinity(data.get(dims[1], idx))) {
	                    point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[isFrom ? 0 : 1]);
	                }
	            }

	            // Use x, y if has any
	            if (!isNaN(xPx)) {
	                point[0] = xPx;
	            }
	            if (!isNaN(yPx)) {
	                point[1] = yPx;
	            }
	        }

	        data.setItemLayout(idx, point);
	    }

	    __webpack_require__(601).extend({

	        type: 'markLine',

	        updateLayout: function (markLineModel, ecModel, api) {
	            ecModel.eachSeries(function (seriesModel) {
	                var mlModel = seriesModel.markLineModel;
	                if (mlModel) {
	                    var mlData = mlModel.getData();
	                    var fromData = mlModel.__from;
	                    var toData = mlModel.__to;
	                    // Update visual and layout of from symbol and to symbol
	                    fromData.each(function (idx) {
	                        updateSingleMarkerEndLayout(fromData, idx, true, seriesModel, api);
	                        updateSingleMarkerEndLayout(toData, idx, false, seriesModel, api);
	                    });
	                    // Update layout of line
	                    mlData.each(function (idx) {
	                        mlData.setItemLayout(idx, [
	                            fromData.getItemLayout(idx),
	                            toData.getItemLayout(idx)
	                        ]);
	                    });

	                    this.markerGroupMap[seriesModel.name].updateLayout();

	                }
	            }, this);
	        },

	        renderSeries: function (seriesModel, mlModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var seriesName = seriesModel.name;
	            var seriesData = seriesModel.getData();

	            var lineDrawMap = this.markerGroupMap;
	            var lineDraw = lineDrawMap[seriesName];
	            if (!lineDraw) {
	                lineDraw = lineDrawMap[seriesName] = new LineDraw();
	            }
	            this.group.add(lineDraw.group);

	            var mlData = createList(coordSys, seriesModel, mlModel);

	            var fromData = mlData.from;
	            var toData = mlData.to;
	            var lineData = mlData.line;

	            mlModel.__from = fromData;
	            mlModel.__to = toData;
	            // Line data for tooltip and formatter
	            mlModel.setData(lineData);

	            var symbolType = mlModel.get('symbol');
	            var symbolSize = mlModel.get('symbolSize');
	            if (!zrUtil.isArray(symbolType)) {
	                symbolType = [symbolType, symbolType];
	            }
	            if (typeof symbolSize === 'number') {
	                symbolSize = [symbolSize, symbolSize];
	            }

	            // Update visual and layout of from symbol and to symbol
	            mlData.from.each(function (idx) {
	                updateDataVisualAndLayout(fromData, idx, true);
	                updateDataVisualAndLayout(toData, idx, false);
	            });

	            // Update visual and layout of line
	            lineData.each(function (idx) {
	                var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');
	                lineData.setItemVisual(idx, {
	                    color: lineColor || fromData.getItemVisual(idx, 'color')
	                });
	                lineData.setItemLayout(idx, [
	                    fromData.getItemLayout(idx),
	                    toData.getItemLayout(idx)
	                ]);

	                lineData.setItemVisual(idx, {
	                    'fromSymbolSize': fromData.getItemVisual(idx, 'symbolSize'),
	                    'fromSymbol': fromData.getItemVisual(idx, 'symbol'),
	                    'toSymbolSize': toData.getItemVisual(idx, 'symbolSize'),
	                    'toSymbol': toData.getItemVisual(idx, 'symbol')
	                });
	            });

	            lineDraw.updateData(lineData);

	            // Set host model for tooltip
	            // FIXME
	            mlData.line.eachItemGraphicEl(function (el, idx) {
	                el.traverse(function (child) {
	                    child.dataModel = mlModel;
	                });
	            });

	            function updateDataVisualAndLayout(data, idx, isFrom) {
	                var itemModel = data.getItemModel(idx);

	                updateSingleMarkerEndLayout(
	                    data, idx, isFrom, seriesModel, api
	                );

	                data.setItemVisual(idx, {
	                    symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],
	                    symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],
	                    color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')
	                });
	            }

	            lineDraw.__keep = true;

	            lineDraw.group.silent = mlModel.get('silent') || seriesModel.get('silent');
	        }
	    });

	    /**
	     * @inner
	     * @param {module:echarts/coord/*} coordSys
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {module:echarts/model/Model} mpModel
	     */
	    function createList(coordSys, seriesModel, mlModel) {

	        var coordDimsInfos;
	        if (coordSys) {
	            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	                var info = seriesModel.getData().getDimensionInfo(
	                    seriesModel.coordDimToDataDim(coordDim)[0]
	                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	                info.name = coordDim;
	                return info;
	            });
	        }
	        else {
	            coordDimsInfos =[{
	                name: 'value',
	                type: 'float'
	            }];
	        }

	        var fromData = new List(coordDimsInfos, mlModel);
	        var toData = new List(coordDimsInfos, mlModel);
	        // No dimensions
	        var lineData = new List([], mlModel);

	        var optData = zrUtil.map(mlModel.get('data'), zrUtil.curry(
	            markLineTransform, seriesModel, coordSys, mlModel
	        ));
	        if (coordSys) {
	            optData = zrUtil.filter(
	                optData, zrUtil.curry(markLineFilter, coordSys)
	            );
	        }
	        var dimValueGetter = coordSys ? markerHelper.dimValueGetter : function (item) {
	            return item.value;
	        };
	        fromData.initData(
	            zrUtil.map(optData, function (item) { return item[0]; }),
	            null, dimValueGetter
	        );
	        toData.initData(
	            zrUtil.map(optData, function (item) { return item[1]; }),
	            null, dimValueGetter
	        );
	        lineData.initData(
	            zrUtil.map(optData, function (item) { return item[2]; })
	        );
	        lineData.hasItemOption = true;
	        return {
	            from: fromData,
	            to: toData,
	            line: lineData
	        };
	    }


/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(606);
	    __webpack_require__(607);

	    __webpack_require__(240).registerPreprocessor(function (opt) {
	        // Make sure markArea component is enabled
	        opt.markArea = opt.markArea || {};
	    });


/***/ },
/* 606 */
/***/ function(module, exports, __webpack_require__) {

	

	    module.exports = __webpack_require__(598).extend({

	        type: 'markArea',

	        defaultOption: {
	            zlevel: 0,
	            // PENDING
	            z: 1,
	            tooltip: {
	                trigger: 'item'
	            },
	            // markArea should fixed on the coordinate system
	            animation: false,
	            label: {
	                normal: {
	                    show: true,
	                    position: 'top'
	                },
	                emphasis: {
	                    show: true,
	                    position: 'top'
	                }
	            },
	            itemStyle: {
	                normal: {
	                    // color and borderColor default to use color from series
	                    // color: 'auto'
	                    // borderColor: 'auto'
	                    borderWidth: 0
	                }
	            }
	        }
	    });


/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	// TODO Better on polar


	    var zrUtil = __webpack_require__(243);
	    var List = __webpack_require__(337);
	    var numberUtil = __webpack_require__(246);
	    var graphic = __webpack_require__(282);
	    var colorUtil = __webpack_require__(278);

	    var markerHelper = __webpack_require__(600);

	    var markAreaTransform = function (seriesModel, coordSys, maModel, item) {
	        var lt = markerHelper.dataTransform(seriesModel, item[0]);
	        var rb = markerHelper.dataTransform(seriesModel, item[1]);
	        var retrieve = zrUtil.retrieve;

	        // FIXME make sure lt is less than rb
	        var ltCoord = lt.coord;
	        var rbCoord = rb.coord;
	        ltCoord[0] = retrieve(ltCoord[0], -Infinity);
	        ltCoord[1] = retrieve(ltCoord[1], -Infinity);

	        rbCoord[0] = retrieve(rbCoord[0], Infinity);
	        rbCoord[1] = retrieve(rbCoord[1], Infinity);

	        // Merge option into one
	        var result = zrUtil.mergeAll([{}, lt, rb]);

	        result.coord = [
	            lt.coord, rb.coord
	        ];
	        result.x0 = lt.x;
	        result.y0 = lt.y;
	        result.x1 = rb.x;
	        result.y1 = rb.y;
	        return result;
	    };

	    function isInifinity(val) {
	        return !isNaN(val) && !isFinite(val);
	    }

	    // If a markArea has one dim
	    function ifMarkLineHasOnlyDim(dimIndex, fromCoord, toCoord, coordSys) {
	        var otherDimIndex = 1 - dimIndex;
	        return isInifinity(fromCoord[otherDimIndex]) && isInifinity(toCoord[otherDimIndex]);
	    }

	    function markAreaFilter(coordSys, item) {
	        var fromCoord = item.coord[0];
	        var toCoord = item.coord[1];
	        if (coordSys.type === 'cartesian2d') {
	            // In case
	            // {
	            //  markArea: {
	            //    data: [{ yAxis: 2 }]
	            //  }
	            // }
	            if (
	                fromCoord && toCoord &&
	                (ifMarkLineHasOnlyDim(1, fromCoord, toCoord, coordSys)
	                || ifMarkLineHasOnlyDim(0, fromCoord, toCoord, coordSys))
	            ) {
	                return true;
	            }
	        }
	        return markerHelper.dataFilter(coordSys, {
	                coord: fromCoord,
	                x: item.x0,
	                y: item.y0
	            })
	            || markerHelper.dataFilter(coordSys, {
	                coord: toCoord,
	                x: item.x1,
	                y: item.y1
	            });
	    }

	    // dims can be ['x0', 'y0'], ['x1', 'y1'], ['x0', 'y1'], ['x1', 'y0']
	    function getSingleMarkerEndPoint(data, idx, dims, seriesModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var itemModel = data.getItemModel(idx);

	        var point;
	        var xPx = numberUtil.parsePercent(itemModel.get(dims[0]), api.getWidth());
	        var yPx = numberUtil.parsePercent(itemModel.get(dims[1]), api.getHeight());
	        if (!isNaN(xPx) && !isNaN(yPx)) {
	            point = [xPx, yPx];
	        }
	        else {
	            // Chart like bar may have there own marker positioning logic
	            if (seriesModel.getMarkerPosition) {
	                // Use the getMarkerPoisition
	                point = seriesModel.getMarkerPosition(
	                    data.getValues(dims, idx)
	                );
	            }
	            else {
	                var x = data.get(dims[0], idx);
	                var y = data.get(dims[1], idx);
	                point = coordSys.dataToPoint([x, y], true);
	            }
	            if (coordSys.type === 'cartesian2d') {
	                var xAxis = coordSys.getAxis('x');
	                var yAxis = coordSys.getAxis('y');
	                var x = data.get(dims[0], idx);
	                var y = data.get(dims[1], idx);
	                if (isInifinity(x)) {
	                    point[0] = xAxis.toGlobalCoord(xAxis.getExtent()[dims[0] === 'x0' ? 0 : 1]);
	                }
	                else if (isInifinity(y)) {
	                    point[1] = yAxis.toGlobalCoord(yAxis.getExtent()[dims[1] === 'y0' ? 0 : 1]);
	                }
	            }

	            // Use x, y if has any
	            if (!isNaN(xPx)) {
	                point[0] = xPx;
	            }
	            if (!isNaN(yPx)) {
	                point[1] = yPx;
	            }
	        }

	        return point;
	    }

	    var dimPermutations = [['x0', 'y0'], ['x1', 'y0'], ['x1', 'y1'], ['x0', 'y1']];

	    __webpack_require__(601).extend({

	        type: 'markArea',

	        updateLayout: function (markAreaModel, ecModel, api) {
	            ecModel.eachSeries(function (seriesModel) {
	                var maModel = seriesModel.markAreaModel;
	                if (maModel) {
	                    var areaData = maModel.getData();
	                    areaData.each(function (idx) {
	                        var points = zrUtil.map(dimPermutations, function (dim) {
	                            return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
	                        });
	                        // Layout
	                        areaData.setItemLayout(idx, points);
	                        var el = areaData.getItemGraphicEl(idx);
	                        el.setShape('points', points);
	                    });
	                }
	            }, this);
	        },

	        renderSeries: function (seriesModel, maModel, ecModel, api) {
	            var coordSys = seriesModel.coordinateSystem;
	            var seriesName = seriesModel.name;
	            var seriesData = seriesModel.getData();

	            var areaGroupMap = this.markerGroupMap;
	            var polygonGroup = areaGroupMap[seriesName];
	            if (!polygonGroup) {
	                polygonGroup = areaGroupMap[seriesName] = {
	                    group: new graphic.Group()
	                };
	            }
	            this.group.add(polygonGroup.group);
	            polygonGroup.__keep = true;

	            var areaData = createList(coordSys, seriesModel, maModel);

	            // Line data for tooltip and formatter
	            maModel.setData(areaData);

	            // Update visual and layout of line
	            areaData.each(function (idx) {
	                // Layout
	                areaData.setItemLayout(idx, zrUtil.map(dimPermutations, function (dim) {
	                    return getSingleMarkerEndPoint(areaData, idx, dim, seriesModel, api);
	                }));

	                // Visual
	                areaData.setItemVisual(idx, {
	                    color: seriesData.getVisual('color')
	                });
	            });


	            areaData.diff(polygonGroup.__data)
	                .add(function (idx) {
	                    var polygon = new graphic.Polygon({
	                        shape: {
	                            points: areaData.getItemLayout(idx)
	                        }
	                    });
	                    areaData.setItemGraphicEl(idx, polygon);
	                    polygonGroup.group.add(polygon);
	                })
	                .update(function (newIdx, oldIdx) {
	                    var polygon = polygonGroup.__data.getItemGraphicEl(oldIdx);
	                    graphic.updateProps(polygon, {
	                        shape: {
	                            points: areaData.getItemLayout(newIdx)
	                        }
	                    }, maModel, newIdx);
	                    polygonGroup.group.add(polygon);
	                    areaData.setItemGraphicEl(newIdx, polygon);
	                })
	                .remove(function (idx) {
	                    var polygon = polygonGroup.__data.getItemGraphicEl(idx);
	                    polygonGroup.group.remove(polygon);
	                })
	                .execute();

	            areaData.eachItemGraphicEl(function (polygon, idx) {
	                var itemModel = areaData.getItemModel(idx);
	                var labelModel = itemModel.getModel('label.normal');
	                var labelHoverModel = itemModel.getModel('label.emphasis');
	                var color = areaData.getItemVisual(idx, 'color');
	                polygon.useStyle(
	                    zrUtil.defaults(
	                        itemModel.getModel('itemStyle.normal').getItemStyle(),
	                        {
	                            fill: colorUtil.modifyAlpha(color, 0.4),
	                            stroke: color
	                        }
	                    )
	                );

	                polygon.hoverStyle = itemModel.getModel('itemStyle.normal').getItemStyle();

	                var defaultValue = areaData.getName(idx) || '';
	                var textColor = color || polygon.style.fill;

	                if (labelModel.getShallow('show')) {
	                    graphic.setText(polygon.style, labelModel, textColor);
	                    polygon.style.text = zrUtil.retrieve(
	                        maModel.getFormattedLabel(idx, 'normal'),
	                        defaultValue
	                    );
	                }
	                else {
	                    polygon.style.text = '';
	                }

	                if (labelHoverModel.getShallow('show')) {
	                    graphic.setText(polygon.hoverStyle, labelHoverModel, textColor);
	                    polygon.hoverStyle.text = zrUtil.retrieve(
	                        maModel.getFormattedLabel(idx, 'emphasis'),
	                        defaultValue
	                    );
	                }
	                else {
	                    polygon.hoverStyle.text = '';
	                }

	                graphic.setHoverStyle(polygon, {});

	                polygon.dataModel = maModel;
	            });

	            polygonGroup.__data = areaData;

	            polygonGroup.group.silent = maModel.get('silent') || seriesModel.get('silent');
	        }
	    });

	    /**
	     * @inner
	     * @param {module:echarts/coord/*} coordSys
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {module:echarts/model/Model} mpModel
	     */
	    function createList(coordSys, seriesModel, maModel) {

	        var coordDimsInfos;
	        var areaData;
	        var dims = ['x0', 'y0', 'x1', 'y1'];
	        if (coordSys) {
	            coordDimsInfos = zrUtil.map(coordSys && coordSys.dimensions, function (coordDim) {
	                var info = seriesModel.getData().getDimensionInfo(
	                    seriesModel.coordDimToDataDim(coordDim)[0]
	                ) || {}; // In map series data don't have lng and lat dimension. Fallback to same with coordSys
	                info.name = coordDim;
	                return info;
	            });
	            areaData = new List(zrUtil.map(dims, function (dim, idx) {
	                return {
	                    name: dim,
	                    type: coordDimsInfos[idx % 2].type
	                };
	            }), maModel);
	        }
	        else {
	            coordDimsInfos =[{
	                name: 'value',
	                type: 'float'
	            }];
	            areaData = new List(coordDimsInfos, maModel);
	        }

	        var optData = zrUtil.map(maModel.get('data'), zrUtil.curry(
	            markAreaTransform, seriesModel, coordSys, maModel
	        ));
	        if (coordSys) {
	            optData = zrUtil.filter(
	                optData, zrUtil.curry(markAreaFilter, coordSys)
	            );
	        }

	        var dimValueGetter = coordSys ? function (item, dimName, dataIndex, dimIndex) {
	            return item.coord[Math.floor(dimIndex / 2)][dimIndex % 2];
	        } : function (item) {
	            return item.value;
	        };
	        areaData.initData(optData, null, dimValueGetter);
	        areaData.hasItemOption = true;
	        return areaData;
	    }


/***/ },
/* 608 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */


	    var echarts = __webpack_require__(240);

	    echarts.registerPreprocessor(__webpack_require__(609));

	    __webpack_require__(610);
	    __webpack_require__(611);
	    __webpack_require__(612);
	    __webpack_require__(614);



/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Timeline preprocessor
	 */


	    var zrUtil = __webpack_require__(243);

	    module.exports = function (option) {
	        var timelineOpt = option && option.timeline;

	        if (!zrUtil.isArray(timelineOpt)) {
	            timelineOpt = timelineOpt ? [timelineOpt] : [];
	        }

	        zrUtil.each(timelineOpt, function (opt) {
	            if (!opt) {
	                return;
	            }

	            compatibleEC2(opt);
	        });
	    };

	    function compatibleEC2(opt) {
	        var type = opt.type;

	        var ec2Types = {'number': 'value', 'time': 'time'};

	        // Compatible with ec2
	        if (ec2Types[type]) {
	            opt.axisType = ec2Types[type];
	            delete opt.type;
	        }

	        transferItem(opt);

	        if (has(opt, 'controlPosition')) {
	            var controlStyle = opt.controlStyle || (opt.controlStyle = {});
	            if (!has(controlStyle, 'position')) {
	                controlStyle.position = opt.controlPosition;
	            }
	            if (controlStyle.position === 'none' && !has(controlStyle, 'show')) {
	                controlStyle.show = false;
	                delete controlStyle.position;
	            }
	            delete opt.controlPosition;
	        }

	        zrUtil.each(opt.data || [], function (dataItem) {
	            if (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem)) {
	                if (!has(dataItem, 'value') && has(dataItem, 'name')) {
	                    // In ec2, using name as value.
	                    dataItem.value = dataItem.name;
	                }
	                transferItem(dataItem);
	            }
	        });
	    }

	    function transferItem(opt) {
	        var itemStyle = opt.itemStyle || (opt.itemStyle = {});

	        var itemStyleEmphasis = itemStyle.emphasis || (itemStyle.emphasis = {});

	        // Transfer label out
	        var label = opt.label || (opt.label || {});
	        var labelNormal = label.normal || (label.normal = {});
	        var excludeLabelAttr = {normal: 1, emphasis: 1};

	        zrUtil.each(label, function (value, name) {
	            if (!excludeLabelAttr[name] && !has(labelNormal, name)) {
	                labelNormal[name] = value;
	            }
	        });

	        if (itemStyleEmphasis.label && !has(label, 'emphasis')) {
	            label.emphasis = itemStyleEmphasis.label;
	            delete itemStyleEmphasis.label;
	        }
	    }

	    function has(obj, attr) {
	        return obj.hasOwnProperty(attr);
	    }



/***/ },
/* 610 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(258).registerSubTypeDefaulter('timeline', function () {
	        // Only slider now.
	        return 'slider';
	    });



/***/ },
/* 611 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Timeilne action
	 */


	    var echarts = __webpack_require__(240);
	    var zrUtil = __webpack_require__(243);

	    echarts.registerAction(

	        {type: 'timelineChange', event: 'timelineChanged', update: 'prepareAndUpdate'},

	        function (payload, ecModel) {

	            var timelineModel = ecModel.getComponent('timeline');
	            if (timelineModel && payload.currentIndex != null) {
	                timelineModel.setCurrentIndex(payload.currentIndex);

	                if (!timelineModel.get('loop', true) && timelineModel.isIndexMax()) {
	                    timelineModel.setPlayState(false);
	                }
	            }

	            // Set normalized currentIndex to payload.
	            ecModel.resetOption('timeline');

	            return zrUtil.defaults({
	                currentIndex: timelineModel.option.currentIndex
	            }, payload);
	        }
	    );

	    echarts.registerAction(

	        {type: 'timelinePlayChange', event: 'timelinePlayChanged', update: 'update'},

	        function (payload, ecModel) {
	            var timelineModel = ecModel.getComponent('timeline');
	            if (timelineModel && payload.playState != null) {
	                timelineModel.setPlayState(payload.playState);
	            }
	        }
	    );



/***/ },
/* 612 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Silder timeline model
	 */


	    var TimelineModel = __webpack_require__(613);
	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);

	    var SliderTimelineModel = TimelineModel.extend({

	        type: 'timeline.slider',

	        /**
	         * @protected
	         */
	        defaultOption: {

	            backgroundColor: 'rgba(0,0,0,0)',   // 时间轴背景颜色
	            borderColor: '#ccc',               // 时间轴边框颜色
	            borderWidth: 0,                    // 时间轴边框线宽，单位px，默认为0（无边框）

	            orient: 'horizontal',              // 'vertical'
	            inverse: false,

	            tooltip: {                          // boolean or Object
	                trigger: 'item'                 // data item may also have tootip attr.
	            },

	            symbol: 'emptyCircle',
	            symbolSize: 10,

	            lineStyle: {
	                show: true,
	                width: 2,
	                color: '#304654'
	            },
	            label: {                            // 文本标签
	                position: 'auto',           // auto left right top bottom
	                                            // When using number, label position is not
	                                            // restricted by viewRect.
	                                            // positive: right/bottom, negative: left/top
	                normal: {
	                    show: true,
	                    interval: 'auto',
	                    rotate: 0,
	                    // formatter: null,
	                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                        color: '#304654'
	                    }
	                },
	                emphasis: {
	                    show: true,
	                    textStyle: {                // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                        color: '#c23531'
	                    }
	                }
	            },
	            itemStyle: {
	                normal: {
	                    color: '#304654',
	                    borderWidth: 1
	                },
	                emphasis: {
	                    color: '#c23531'
	                }
	            },

	            checkpointStyle: {
	                symbol: 'circle',
	                symbolSize: 13,
	                color: '#c23531',
	                borderWidth: 5,
	                borderColor: 'rgba(194,53,49, 0.5)',
	                animation: true,
	                animationDuration: 300,
	                animationEasing: 'quinticInOut'
	            },

	            controlStyle: {
	                show: true,
	                showPlayBtn: true,
	                showPrevBtn: true,
	                showNextBtn: true,
	                itemSize: 22,
	                itemGap: 12,
	                position: 'left',  // 'left' 'right' 'top' 'bottom'
	                playIcon: 'path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z', // jshint ignore:line
	                stopIcon: 'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z', // jshint ignore:line
	                nextIcon: 'path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z', // jshint ignore:line
	                prevIcon: 'path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z', // jshint ignore:line
	                normal: {
	                    color: '#304654',
	                    borderColor: '#304654',
	                    borderWidth: 1
	                },
	                emphasis: {
	                    color: '#c23531',
	                    borderColor: '#c23531',
	                    borderWidth: 2
	                }
	            },
	            data: []
	        }

	    });

	    zrUtil.mixin(SliderTimelineModel, modelUtil.dataFormatMixin);

	    module.exports = SliderTimelineModel;


/***/ },
/* 613 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Timeline model
	 */


	    var ComponentModel = __webpack_require__(258);
	    var List = __webpack_require__(337);
	    var zrUtil = __webpack_require__(243);
	    var modelUtil = __webpack_require__(244);

	    var TimelineModel = ComponentModel.extend({

	        type: 'timeline',

	        layoutMode: 'box',

	        /**
	         * @protected
	         */
	        defaultOption: {

	            zlevel: 0,                  // 一级层叠
	            z: 4,                       // 二级层叠
	            show: true,

	            axisType: 'time',  // 模式是时间类型，支持 value, category

	            realtime: true,

	            left: '20%',
	            top: null,
	            right: '20%',
	            bottom: 0,
	            width: null,
	            height: 40,
	            padding: 5,

	            controlPosition: 'left',           // 'left' 'right' 'top' 'bottom' 'none'
	            autoPlay: false,
	            rewind: false,                     // 反向播放
	            loop: true,
	            playInterval: 2000,                // 播放时间间隔，单位ms

	            currentIndex: 0,

	            itemStyle: {
	                normal: {},
	                emphasis: {}
	            },
	            label: {
	                normal: {
	                    textStyle: {
	                        color: '#000'
	                    }
	                },
	                emphasis: {}
	            },

	            data: []
	        },

	        /**
	         * @override
	         */
	        init: function (option, parentModel, ecModel) {

	            /**
	             * @private
	             * @type {module:echarts/data/List}
	             */
	            this._data;

	            /**
	             * @private
	             * @type {Array.<string>}
	             */
	            this._names;

	            this.mergeDefaultAndTheme(option, ecModel);
	            this._initData();
	        },

	        /**
	         * @override
	         */
	        mergeOption: function (option) {
	            TimelineModel.superApply(this, 'mergeOption', arguments);
	            this._initData();
	        },

	        /**
	         * @param {number} [currentIndex]
	         */
	        setCurrentIndex: function (currentIndex) {
	            if (currentIndex == null) {
	                currentIndex = this.option.currentIndex;
	            }
	            var count = this._data.count();

	            if (this.option.loop) {
	                currentIndex = (currentIndex % count + count) % count;
	            }
	            else {
	                currentIndex >= count && (currentIndex = count - 1);
	                currentIndex < 0 && (currentIndex = 0);
	            }

	            this.option.currentIndex = currentIndex;
	        },

	        /**
	         * @return {number} currentIndex
	         */
	        getCurrentIndex: function () {
	            return this.option.currentIndex;
	        },

	        /**
	         * @return {boolean}
	         */
	        isIndexMax: function () {
	            return this.getCurrentIndex() >= this._data.count() - 1;
	        },

	        /**
	         * @param {boolean} state true: play, false: stop
	         */
	        setPlayState: function (state) {
	            this.option.autoPlay = !!state;
	        },

	        /**
	         * @return {boolean} true: play, false: stop
	         */
	        getPlayState: function () {
	            return !!this.option.autoPlay;
	        },

	        /**
	         * @private
	         */
	        _initData: function () {
	            var thisOption = this.option;
	            var dataArr = thisOption.data || [];
	            var axisType = thisOption.axisType;
	            var names = this._names = [];

	            if (axisType === 'category') {
	                var idxArr = [];
	                zrUtil.each(dataArr, function (item, index) {
	                    var value = modelUtil.getDataItemValue(item);
	                    var newItem;

	                    if (zrUtil.isObject(item)) {
	                        newItem = zrUtil.clone(item);
	                        newItem.value = index;
	                    }
	                    else {
	                        newItem = index;
	                    }

	                    idxArr.push(newItem);

	                    if (!zrUtil.isString(value) && (value == null || isNaN(value))) {
	                        value = '';
	                    }

	                    names.push(value + '');
	                });
	                dataArr = idxArr;
	            }

	            var dimType = ({category: 'ordinal', time: 'time'})[axisType] || 'number';

	            var data = this._data = new List([{name: 'value', type: dimType}], this);

	            data.initData(dataArr, names);
	        },

	        getData: function () {
	            return this._data;
	        },

	        /**
	         * @public
	         * @return {Array.<string>} categoreis
	         */
	        getCategories: function () {
	            if (this.get('axisType') === 'category') {
	                return this._names.slice();
	            }
	        }

	    });

	    module.exports = TimelineModel;


/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Silder timeline view
	 */


	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var layout = __webpack_require__(260);
	    var TimelineView = __webpack_require__(615);
	    var TimelineAxis = __webpack_require__(616);
	    var symbolUtil = __webpack_require__(346);
	    var axisHelper = __webpack_require__(354);
	    var BoundingRect = __webpack_require__(248);
	    var matrix = __webpack_require__(250);
	    var numberUtil = __webpack_require__(246);
	    var formatUtil = __webpack_require__(245);
	    var encodeHTML = formatUtil.encodeHTML;

	    var bind = zrUtil.bind;
	    var each = zrUtil.each;

	    var PI = Math.PI;

	    module.exports = TimelineView.extend({

	        type: 'timeline.slider',

	        init: function (ecModel, api) {

	            this.api = api;

	            /**
	             * @private
	             * @type {module:echarts/component/timeline/TimelineAxis}
	             */
	            this._axis;

	            /**
	             * @private
	             * @type {module:zrender/core/BoundingRect}
	             */
	            this._viewRect;

	            /**
	             * @type {number}
	             */
	            this._timer;

	            /**
	             * @type {module:zrende/Element}
	             */
	            this._currentPointer;

	            /**
	             * @type {module:zrender/container/Group}
	             */
	            this._mainGroup;

	            /**
	             * @type {module:zrender/container/Group}
	             */
	            this._labelGroup;
	        },

	        /**
	         * @override
	         */
	        render: function (timelineModel, ecModel, api, payload) {
	            this.model = timelineModel;
	            this.api = api;
	            this.ecModel = ecModel;

	            this.group.removeAll();

	            if (timelineModel.get('show', true)) {

	                var layoutInfo = this._layout(timelineModel, api);
	                var mainGroup = this._createGroup('mainGroup');
	                var labelGroup = this._createGroup('labelGroup');

	                /**
	                 * @private
	                 * @type {module:echarts/component/timeline/TimelineAxis}
	                 */
	                var axis = this._axis = this._createAxis(layoutInfo, timelineModel);

	                timelineModel.formatTooltip = function (dataIndex) {
	                    return encodeHTML(axis.scale.getLabel(dataIndex));
	                };

	                each(
	                    ['AxisLine', 'AxisTick', 'Control', 'CurrentPointer'],
	                    function (name) {
	                        this['_render' + name](layoutInfo, mainGroup, axis, timelineModel);
	                    },
	                    this
	                );

	                this._renderAxisLabel(layoutInfo, labelGroup, axis, timelineModel);
	                this._position(layoutInfo, timelineModel);
	            }

	            this._doPlayStop();
	        },

	        /**
	         * @override
	         */
	        remove: function () {
	            this._clearTimer();
	            this.group.removeAll();
	        },

	        /**
	         * @override
	         */
	        dispose: function () {
	            this._clearTimer();
	        },

	        _layout: function (timelineModel, api) {
	            var labelPosOpt = timelineModel.get('label.normal.position');
	            var orient = timelineModel.get('orient');
	            var viewRect = getViewRect(timelineModel, api);
	            // Auto label offset.
	            if (labelPosOpt == null || labelPosOpt === 'auto') {
	                labelPosOpt = orient === 'horizontal'
	                    ? ((viewRect.y + viewRect.height / 2) < api.getHeight() / 2 ? '-' : '+')
	                    : ((viewRect.x + viewRect.width / 2) < api.getWidth() / 2 ? '+' : '-');
	            }
	            else if (isNaN(labelPosOpt)) {
	                labelPosOpt = ({
	                    horizontal: {top: '-', bottom: '+'},
	                    vertical: {left: '-', right: '+'}
	                })[orient][labelPosOpt];
	            }

	            // FIXME
	            // 暂没有实现用户传入
	            // var labelAlign = timelineModel.get('label.normal.textStyle.align');
	            // var labelBaseline = timelineModel.get('label.normal.textStyle.baseline');
	            var labelAlignMap = {
	                horizontal: 'center',
	                vertical: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'left' : 'right'
	            };

	            var labelBaselineMap = {
	                horizontal: (labelPosOpt >= 0 || labelPosOpt === '+') ? 'top' : 'bottom',
	                vertical: 'middle'
	            };
	            var rotationMap = {
	                horizontal: 0,
	                vertical: PI / 2
	            };

	            // Position
	            var mainLength = orient === 'vertical' ? viewRect.height : viewRect.width;

	            var controlModel = timelineModel.getModel('controlStyle');
	            var showControl = controlModel.get('show');
	            var controlSize = showControl ? controlModel.get('itemSize') : 0;
	            var controlGap = showControl ? controlModel.get('itemGap') : 0;
	            var sizePlusGap = controlSize + controlGap;

	            // Special label rotate.
	            var labelRotation = timelineModel.get('label.normal.rotate') || 0;
	            labelRotation = labelRotation * PI / 180; // To radian.

	            var playPosition;
	            var prevBtnPosition;
	            var nextBtnPosition;
	            var axisExtent;
	            var controlPosition = controlModel.get('position', true);
	            var showControl = controlModel.get('show', true);
	            var showPlayBtn = showControl && controlModel.get('showPlayBtn', true);
	            var showPrevBtn = showControl && controlModel.get('showPrevBtn', true);
	            var showNextBtn = showControl && controlModel.get('showNextBtn', true);
	            var xLeft = 0;
	            var xRight = mainLength;

	            // position[0] means left, position[1] means middle.
	            if (controlPosition === 'left' || controlPosition === 'bottom') {
	                showPlayBtn && (playPosition = [0, 0], xLeft += sizePlusGap);
	                showPrevBtn && (prevBtnPosition = [xLeft, 0], xLeft += sizePlusGap);
	                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	            }
	            else { // 'top' 'right'
	                showPlayBtn && (playPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	                showPrevBtn && (prevBtnPosition = [0, 0], xLeft += sizePlusGap);
	                showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	            }
	            axisExtent = [xLeft, xRight];

	            if (timelineModel.get('inverse')) {
	                axisExtent.reverse();
	            }

	            return {
	                viewRect: viewRect,
	                mainLength: mainLength,
	                orient: orient,

	                rotation: rotationMap[orient],
	                labelRotation: labelRotation,
	                labelPosOpt: labelPosOpt,
	                labelAlign: labelAlignMap[orient],
	                labelBaseline: labelBaselineMap[orient],

	                // Based on mainGroup.
	                playPosition: playPosition,
	                prevBtnPosition: prevBtnPosition,
	                nextBtnPosition: nextBtnPosition,
	                axisExtent: axisExtent,

	                controlSize: controlSize,
	                controlGap: controlGap
	            };
	        },

	        _position: function (layoutInfo, timelineModel) {
	            // Position is be called finally, because bounding rect is needed for
	            // adapt content to fill viewRect (auto adapt offset).

	            // Timeline may be not all in the viewRect when 'offset' is specified
	            // as a number, because it is more appropriate that label aligns at
	            // 'offset' but not the other edge defined by viewRect.

	            var mainGroup = this._mainGroup;
	            var labelGroup = this._labelGroup;

	            var viewRect = layoutInfo.viewRect;
	            if (layoutInfo.orient === 'vertical') {
	                // transfrom to horizontal, inverse rotate by left-top point.
	                var m = matrix.create();
	                var rotateOriginX = viewRect.x;
	                var rotateOriginY = viewRect.y + viewRect.height;
	                matrix.translate(m, m, [-rotateOriginX, -rotateOriginY]);
	                matrix.rotate(m, m, -PI / 2);
	                matrix.translate(m, m, [rotateOriginX, rotateOriginY]);
	                viewRect = viewRect.clone();
	                viewRect.applyTransform(m);
	            }

	            var viewBound = getBound(viewRect);
	            var mainBound = getBound(mainGroup.getBoundingRect());
	            var labelBound = getBound(labelGroup.getBoundingRect());

	            var mainPosition = mainGroup.position;
	            var labelsPosition = labelGroup.position;

	            labelsPosition[0] = mainPosition[0] = viewBound[0][0];

	            var labelPosOpt = layoutInfo.labelPosOpt;

	            if (isNaN(labelPosOpt)) { // '+' or '-'
	                var mainBoundIdx = labelPosOpt === '+' ? 0 : 1;
	                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	                toBound(labelsPosition, labelBound, viewBound, 1, 1 - mainBoundIdx);
	            }
	            else {
	                var mainBoundIdx = labelPosOpt >= 0 ? 0 : 1;
	                toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	                labelsPosition[1] = mainPosition[1] + labelPosOpt;
	            }

	            mainGroup.attr('position', mainPosition);
	            labelGroup.attr('position', labelsPosition);
	            mainGroup.rotation = labelGroup.rotation = layoutInfo.rotation;

	            setOrigin(mainGroup);
	            setOrigin(labelGroup);

	            function setOrigin(targetGroup) {
	                var pos = targetGroup.position;
	                targetGroup.origin = [
	                    viewBound[0][0] - pos[0],
	                    viewBound[1][0] - pos[1]
	                ];
	            }

	            function getBound(rect) {
	                // [[xmin, xmax], [ymin, ymax]]
	                return [
	                    [rect.x, rect.x + rect.width],
	                    [rect.y, rect.y + rect.height]
	                ];
	            }

	            function toBound(fromPos, from, to, dimIdx, boundIdx) {
	                fromPos[dimIdx] += to[dimIdx][boundIdx] - from[dimIdx][boundIdx];
	            }
	        },

	        _createAxis: function (layoutInfo, timelineModel) {
	            var data = timelineModel.getData();
	            var axisType = timelineModel.get('axisType');

	            var scale = axisHelper.createScaleByModel(timelineModel, axisType);
	            var dataExtent = data.getDataExtent('value');
	            scale.setExtent(dataExtent[0], dataExtent[1]);
	            this._customizeScale(scale, data);
	            scale.niceTicks();

	            var axis = new TimelineAxis('value', scale, layoutInfo.axisExtent, axisType);
	            axis.model = timelineModel;

	            return axis;
	        },

	        _customizeScale: function (scale, data) {

	            scale.getTicks = function () {
	                return data.mapArray(['value'], function (value) {
	                    return value;
	                });
	            };

	            scale.getTicksLabels = function () {
	                return zrUtil.map(this.getTicks(), scale.getLabel, scale);
	            };
	        },

	        _createGroup: function (name) {
	            var newGroup = this['_' + name] = new graphic.Group();
	            this.group.add(newGroup);
	            return newGroup;
	        },

	        _renderAxisLine: function (layoutInfo, group, axis, timelineModel) {
	            var axisExtent = axis.getExtent();

	            if (!timelineModel.get('lineStyle.show')) {
	                return;
	            }

	            group.add(new graphic.Line({
	                shape: {
	                    x1: axisExtent[0], y1: 0,
	                    x2: axisExtent[1], y2: 0
	                },
	                style: zrUtil.extend(
	                    {lineCap: 'round'},
	                    timelineModel.getModel('lineStyle').getLineStyle()
	                ),
	                silent: true,
	                z2: 1
	            }));
	        },

	        /**
	         * @private
	         */
	        _renderAxisTick: function (layoutInfo, group, axis, timelineModel) {
	            var data = timelineModel.getData();
	            var ticks = axis.scale.getTicks();

	            each(ticks, function (value, dataIndex) {

	                var tickCoord = axis.dataToCoord(value);
	                var itemModel = data.getItemModel(dataIndex);
	                var itemStyleModel = itemModel.getModel('itemStyle.normal');
	                var hoverStyleModel = itemModel.getModel('itemStyle.emphasis');
	                var symbolOpt = {
	                    position: [tickCoord, 0],
	                    onclick: bind(this._changeTimeline, this, dataIndex)
	                };
	                var el = giveSymbol(itemModel, itemStyleModel, group, symbolOpt);
	                graphic.setHoverStyle(el, hoverStyleModel.getItemStyle());

	                if (itemModel.get('tooltip')) {
	                    el.dataIndex = dataIndex;
	                    el.dataModel = timelineModel;
	                }
	                else {
	                    el.dataIndex = el.dataModel = null;
	                }

	            }, this);
	        },

	        /**
	         * @private
	         */
	        _renderAxisLabel: function (layoutInfo, group, axis, timelineModel) {
	            var labelModel = timelineModel.getModel('label.normal');

	            if (!labelModel.get('show')) {
	                return;
	            }

	            var data = timelineModel.getData();
	            var ticks = axis.scale.getTicks();
	            var labels = axisHelper.getFormattedLabels(
	                axis, labelModel.get('formatter')
	            );
	            var labelInterval = axis.getLabelInterval();

	            each(ticks, function (tick, dataIndex) {
	                if (axis.isLabelIgnored(dataIndex, labelInterval)) {
	                    return;
	                }

	                var itemModel = data.getItemModel(dataIndex);
	                var itemTextStyleModel = itemModel.getModel('label.normal.textStyle');
	                var hoverTextStyleModel = itemModel.getModel('label.emphasis.textStyle');
	                var tickCoord = axis.dataToCoord(tick);
	                var textEl = new graphic.Text({
	                    style: {
	                        text: labels[dataIndex],
	                        textAlign: layoutInfo.labelAlign,
	                        textVerticalAlign: layoutInfo.labelBaseline,
	                        textFont: itemTextStyleModel.getFont(),
	                        fill: itemTextStyleModel.getTextColor()
	                    },
	                    position: [tickCoord, 0],
	                    rotation: layoutInfo.labelRotation - layoutInfo.rotation,
	                    onclick: bind(this._changeTimeline, this, dataIndex),
	                    silent: false
	                });

	                group.add(textEl);
	                graphic.setHoverStyle(textEl, hoverTextStyleModel.getItemStyle());

	            }, this);
	        },

	        /**
	         * @private
	         */
	        _renderControl: function (layoutInfo, group, axis, timelineModel) {
	            var controlSize = layoutInfo.controlSize;
	            var rotation = layoutInfo.rotation;

	            var itemStyle = timelineModel.getModel('controlStyle.normal').getItemStyle();
	            var hoverStyle = timelineModel.getModel('controlStyle.emphasis').getItemStyle();
	            var rect = [0, -controlSize / 2, controlSize, controlSize];
	            var playState = timelineModel.getPlayState();
	            var inverse = timelineModel.get('inverse', true);

	            makeBtn(
	                layoutInfo.nextBtnPosition,
	                'controlStyle.nextIcon',
	                bind(this._changeTimeline, this, inverse ? '-' : '+')
	            );
	            makeBtn(
	                layoutInfo.prevBtnPosition,
	                'controlStyle.prevIcon',
	                bind(this._changeTimeline, this, inverse ? '+' : '-')
	            );
	            makeBtn(
	                layoutInfo.playPosition,
	                'controlStyle.' + (playState ? 'stopIcon' : 'playIcon'),
	                bind(this._handlePlayClick, this, !playState),
	                true
	            );

	            function makeBtn(position, iconPath, onclick, willRotate) {
	                if (!position) {
	                    return;
	                }
	                var opt = {
	                    position: position,
	                    origin: [controlSize / 2, 0],
	                    rotation: willRotate ? -rotation : 0,
	                    rectHover: true,
	                    style: itemStyle,
	                    onclick: onclick
	                };
	                var btn = makeIcon(timelineModel, iconPath, rect, opt);
	                group.add(btn);
	                graphic.setHoverStyle(btn, hoverStyle);
	            }
	        },

	        _renderCurrentPointer: function (layoutInfo, group, axis, timelineModel) {
	            var data = timelineModel.getData();
	            var currentIndex = timelineModel.getCurrentIndex();
	            var pointerModel = data.getItemModel(currentIndex).getModel('checkpointStyle');
	            var me = this;

	            var callback = {
	                onCreate: function (pointer) {
	                    pointer.draggable = true;
	                    pointer.drift = bind(me._handlePointerDrag, me);
	                    pointer.ondragend = bind(me._handlePointerDragend, me);
	                    pointerMoveTo(pointer, currentIndex, axis, timelineModel, true);
	                },
	                onUpdate: function (pointer) {
	                    pointerMoveTo(pointer, currentIndex, axis, timelineModel);
	                }
	            };

	            // Reuse when exists, for animation and drag.
	            this._currentPointer = giveSymbol(
	                pointerModel, pointerModel, this._mainGroup, {}, this._currentPointer, callback
	            );
	        },

	        _handlePlayClick: function (nextState) {
	            this._clearTimer();
	            this.api.dispatchAction({
	                type: 'timelinePlayChange',
	                playState: nextState,
	                from: this.uid
	            });
	        },

	        _handlePointerDrag: function (dx, dy, e) {
	            this._clearTimer();
	            this._pointerChangeTimeline([e.offsetX, e.offsetY]);
	        },

	        _handlePointerDragend: function (e) {
	            this._pointerChangeTimeline([e.offsetX, e.offsetY], true);
	        },

	        _pointerChangeTimeline: function (mousePos, trigger) {
	            var toCoord = this._toAxisCoord(mousePos)[0];

	            var axis = this._axis;
	            var axisExtent = numberUtil.asc(axis.getExtent().slice());

	            toCoord > axisExtent[1] && (toCoord = axisExtent[1]);
	            toCoord < axisExtent[0] && (toCoord = axisExtent[0]);

	            this._currentPointer.position[0] = toCoord;
	            this._currentPointer.dirty();

	            var targetDataIndex = this._findNearestTick(toCoord);
	            var timelineModel = this.model;

	            if (trigger || (
	                targetDataIndex !== timelineModel.getCurrentIndex()
	                && timelineModel.get('realtime')
	            )) {
	                this._changeTimeline(targetDataIndex);
	            }
	        },

	        _doPlayStop: function () {
	            this._clearTimer();

	            if (this.model.getPlayState()) {
	                this._timer = setTimeout(
	                    bind(handleFrame, this),
	                    this.model.get('playInterval')
	                );
	            }

	            function handleFrame() {
	                // Do not cache
	                var timelineModel = this.model;
	                this._changeTimeline(
	                    timelineModel.getCurrentIndex()
	                    + (timelineModel.get('rewind', true) ? -1 : 1)
	                );
	            }
	        },

	        _toAxisCoord: function (vertex) {
	            var trans = this._mainGroup.getLocalTransform();
	            return graphic.applyTransform(vertex, trans, true);
	        },

	        _findNearestTick: function (axisCoord) {
	            var data = this.model.getData();
	            var dist = Infinity;
	            var targetDataIndex;
	            var axis = this._axis;

	            data.each(['value'], function (value, dataIndex) {
	                var coord = axis.dataToCoord(value);
	                var d = Math.abs(coord - axisCoord);
	                if (d < dist) {
	                    dist = d;
	                    targetDataIndex = dataIndex;
	                }
	            });

	            return targetDataIndex;
	        },

	        _clearTimer: function () {
	            if (this._timer) {
	                clearTimeout(this._timer);
	                this._timer = null;
	            }
	        },

	        _changeTimeline: function (nextIndex) {
	            var currentIndex = this.model.getCurrentIndex();

	            if (nextIndex === '+') {
	                nextIndex = currentIndex + 1;
	            }
	            else if (nextIndex === '-') {
	                nextIndex = currentIndex - 1;
	            }

	            this.api.dispatchAction({
	                type: 'timelineChange',
	                currentIndex: nextIndex,
	                from: this.uid
	            });
	        }

	    });

	    function getViewRect(model, api) {
	        return layout.getLayoutRect(
	            model.getBoxLayoutParams(),
	            {
	                width: api.getWidth(),
	                height: api.getHeight()
	            },
	            model.get('padding')
	        );
	    }

	    function makeIcon(timelineModel, objPath, rect, opts) {
	        var icon = graphic.makePath(
	            timelineModel.get(objPath).replace(/^path:\/\//, ''),
	            zrUtil.clone(opts || {}),
	            new BoundingRect(rect[0], rect[1], rect[2], rect[3]),
	            'center'
	        );

	        return icon;
	    }

	    /**
	     * Create symbol or update symbol
	     * opt: basic position and event handlers
	     */
	    function giveSymbol(hostModel, itemStyleModel, group, opt, symbol, callback) {
	        var color = itemStyleModel.get('color');

	        if (!symbol) {
	            var symbolType = hostModel.get('symbol');
	            symbol = symbolUtil.createSymbol(symbolType, -1, -1, 2, 2, color);
	            symbol.setStyle('strokeNoScale', true);
	            group.add(symbol);
	            callback && callback.onCreate(symbol);
	        }
	        else {
	            symbol.setColor(color);
	            group.add(symbol); // Group may be new, also need to add.
	            callback && callback.onUpdate(symbol);
	        }

	        // Style
	        var itemStyle = itemStyleModel.getItemStyle(['color', 'symbol', 'symbolSize']);
	        symbol.setStyle(itemStyle);

	        // Transform and events.
	        opt = zrUtil.merge({
	            rectHover: true,
	            z2: 100
	        }, opt, true);

	        var symbolSize = hostModel.get('symbolSize');
	        symbolSize = symbolSize instanceof Array
	            ? symbolSize.slice()
	            : [+symbolSize, +symbolSize];
	        symbolSize[0] /= 2;
	        symbolSize[1] /= 2;
	        opt.scale = symbolSize;

	        var symbolOffset = hostModel.get('symbolOffset');
	        if (symbolOffset) {
	            var pos = opt.position = opt.position || [0, 0];
	            pos[0] += numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	            pos[1] += numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	        }

	        var symbolRotate = hostModel.get('symbolRotate');
	        opt.rotation = (symbolRotate || 0) * Math.PI / 180 || 0;

	        symbol.attr(opt);

	        // FIXME
	        // (1) When symbol.style.strokeNoScale is true and updateTransform is not performed,
	        // getBoundingRect will return wrong result.
	        // (This is supposed to be resolved in zrender, but it is a little difficult to
	        // leverage performance and auto updateTransform)
	        // (2) All of ancesters of symbol do not scale, so we can just updateTransform symbol.
	        symbol.updateTransform();

	        return symbol;
	    }

	    function pointerMoveTo(pointer, dataIndex, axis, timelineModel, noAnimation) {
	        if (pointer.dragging) {
	            return;
	        }

	        var pointerModel = timelineModel.getModel('checkpointStyle');
	        var toCoord = axis.dataToCoord(timelineModel.getData().get(['value'], dataIndex));

	        if (noAnimation || !pointerModel.get('animation', true)) {
	            pointer.attr({position: [toCoord, 0]});
	        }
	        else {
	            pointer.stopAnimation(true);
	            pointer.animateTo(
	                {position: [toCoord, 0]},
	                pointerModel.get('animationDuration', true),
	                pointerModel.get('animationEasing', true)
	            );
	        }
	    }



/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Timeline view
	 */


	    // var zrUtil = require('zrender/lib/core/util');
	    // var graphic = require('../../util/graphic');
	    var ComponentView = __webpack_require__(268);

	    module.exports = ComponentView.extend({

	        type: 'timeline'
	    });



/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	

	    var zrUtil = __webpack_require__(243);
	    var Axis = __webpack_require__(363);
	    var axisHelper = __webpack_require__(354);

	    /**
	     * Extend axis 2d
	     * @constructor module:echarts/coord/cartesian/Axis2D
	     * @extends {module:echarts/coord/cartesian/Axis}
	     * @param {string} dim
	     * @param {*} scale
	     * @param {Array.<number>} coordExtent
	     * @param {string} axisType
	     * @param {string} position
	     */
	    var TimelineAxis = function (dim, scale, coordExtent, axisType) {

	        Axis.call(this, dim, scale, coordExtent);

	        /**
	         * Axis type
	         *  - 'category'
	         *  - 'value'
	         *  - 'time'
	         *  - 'log'
	         * @type {string}
	         */
	        this.type = axisType || 'value';

	        /**
	         * @private
	         * @type {number}
	         */
	        this._autoLabelInterval;

	        /**
	         * Axis model
	         * @param {module:echarts/component/TimelineModel}
	         */
	        this.model = null;
	    };

	    TimelineAxis.prototype = {

	        constructor: TimelineAxis,

	        /**
	         * @public
	         * @return {number}
	         */
	        getLabelInterval: function () {
	            var timelineModel = this.model;
	            var labelModel = timelineModel.getModel('label.normal');
	            var labelInterval = labelModel.get('interval');

	            if (labelInterval != null && labelInterval != 'auto') {
	                return labelInterval;
	            }

	            var labelInterval = this._autoLabelInterval;

	            if (!labelInterval) {
	                labelInterval = this._autoLabelInterval = axisHelper.getAxisLabelInterval(
	                    zrUtil.map(this.scale.getTicks(), this.dataToCoord, this),
	                    axisHelper.getFormattedLabels(this, labelModel.get('formatter')),
	                    labelModel.getModel('textStyle').getFont(),
	                    timelineModel.get('orient') === 'horizontal'
	                );
	            }

	            return labelInterval;
	        },

	        /**
	         * If label is ignored.
	         * Automatically used when axis is category and label can not be all shown
	         * @public
	         * @param  {number} idx
	         * @return {boolean}
	         */
	        isLabelIgnored: function (idx) {
	            if (this.type === 'category') {
	                var labelInterval = this.getLabelInterval();
	                return ((typeof labelInterval === 'function')
	                    && !labelInterval(idx, this.scale.getLabel(idx)))
	                    || idx % (labelInterval + 1);
	            }
	        }

	    };

	    zrUtil.inherits(TimelineAxis, Axis);

	    module.exports = TimelineAxis;


/***/ },
/* 617 */
/***/ function(module, exports, __webpack_require__) {

	

	    __webpack_require__(618);
	    __webpack_require__(619);

	    __webpack_require__(620);
	    __webpack_require__(621);
	    __webpack_require__(622);
	    __webpack_require__(623);
	    __webpack_require__(628);


/***/ },
/* 618 */
/***/ function(module, exports, __webpack_require__) {

	

	    var featureManager = __webpack_require__(565);
	    var zrUtil = __webpack_require__(243);

	    var ToolboxModel = __webpack_require__(240).extendComponentModel({

	        type: 'toolbox',

	        layoutMode: {
	            type: 'box',
	            ignoreSize: true
	        },

	        mergeDefaultAndTheme: function (option) {
	            ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);

	            zrUtil.each(this.option.feature, function (featureOpt, featureName) {
	                var Feature = featureManager.get(featureName);
	                Feature && zrUtil.merge(featureOpt, Feature.defaultOption);
	            });
	        },

	        defaultOption: {

	            show: true,

	            z: 6,

	            zlevel: 0,

	            orient: 'horizontal',

	            left: 'right',

	            top: 'top',

	            // right
	            // bottom

	            backgroundColor: 'transparent',

	            borderColor: '#ccc',

	            borderWidth: 0,

	            padding: 5,

	            itemSize: 15,

	            itemGap: 8,

	            showTitle: true,

	            iconStyle: {
	                normal: {
	                    borderColor: '#666',
	                    color: 'none'
	                },
	                emphasis: {
	                    borderColor: '#3E98C5'
	                }
	            }
	            // textStyle: {},

	            // feature
	        }
	    });

	    module.exports = ToolboxModel;


/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {

	    var featureManager = __webpack_require__(565);
	    var zrUtil = __webpack_require__(243);
	    var graphic = __webpack_require__(282);
	    var Model = __webpack_require__(251);
	    var DataDiffer = __webpack_require__(338);
	    var listComponentHelper = __webpack_require__(535);
	    var textContain = __webpack_require__(247);

	    module.exports = __webpack_require__(240).extendComponentView({

	        type: 'toolbox',

	        render: function (toolboxModel, ecModel, api, payload) {
	            var group = this.group;
	            group.removeAll();

	            if (!toolboxModel.get('show')) {
	                return;
	            }

	            var itemSize = +toolboxModel.get('itemSize');
	            var featureOpts = toolboxModel.get('feature') || {};
	            var features = this._features || (this._features = {});

	            var featureNames = [];
	            zrUtil.each(featureOpts, function (opt, name) {
	                featureNames.push(name);
	            });

	            (new DataDiffer(this._featureNames || [], featureNames))
	                .add(process)
	                .update(process)
	                .remove(zrUtil.curry(process, null))
	                .execute();

	            // Keep for diff.
	            this._featureNames = featureNames;

	            function process(newIndex, oldIndex) {
	                var featureName = featureNames[newIndex];
	                var oldName = featureNames[oldIndex];
	                var featureOpt = featureOpts[featureName];
	                var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);
	                var feature;

	                if (featureName && !oldName) { // Create
	                    if (isUserFeatureName(featureName)) {
	                        feature = {
	                            model: featureModel,
	                            onclick: featureModel.option.onclick,
	                            featureName: featureName
	                        };
	                    }
	                    else {
	                        var Feature = featureManager.get(featureName);
	                        if (!Feature) {
	                            return;
	                        }
	                        feature = new Feature(featureModel, ecModel, api);
	                    }
	                    features[featureName] = feature;
	                }
	                else {
	                    feature = features[oldName];
	                    // If feature does not exsit.
	                    if (!feature) {
	                        return;
	                    }
	                    feature.model = featureModel;
	                    feature.ecModel = ecModel;
	                    feature.api = api;
	                }

	                if (!featureName && oldName) {
	                    feature.dispose && feature.dispose(ecModel, api);
	                    return;
	                }

	                if (!featureModel.get('show') || feature.unusable) {
	                    feature.remove && feature.remove(ecModel, api);
	                    return;
	                }

	                createIconPaths(featureModel, feature, featureName);

	                featureModel.setIconStatus = function (iconName, status) {
	                    var option = this.option;
	                    var iconPaths = this.iconPaths;
	                    option.iconStatus = option.iconStatus || {};
	                    option.iconStatus[iconName] = status;
	                    // FIXME
	                    iconPaths[iconName] && iconPaths[iconName].trigger(status);
	                };

	                if (feature.render) {
	                    feature.render(featureModel, ecModel, api, payload);
	                }
	            }

	            function createIconPaths(featureModel, feature, featureName) {
	                var iconStyleModel = featureModel.getModel('iconStyle');

	                // If one feature has mutiple icon. they are orginaized as
	                // {
	                //     icon: {
	                //         foo: '',
	                //         bar: ''
	                //     },
	                //     title: {
	                //         foo: '',
	                //         bar: ''
	                //     }
	                // }
	                var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');
	                var titles = featureModel.get('title') || {};
	                if (typeof icons === 'string') {
	                    var icon = icons;
	                    var title = titles;
	                    icons = {};
	                    titles = {};
	                    icons[featureName] = icon;
	                    titles[featureName] = title;
	                }
	                var iconPaths = featureModel.iconPaths = {};
	                zrUtil.each(icons, function (icon, iconName) {
	                    var normalStyle = iconStyleModel.getModel('normal').getItemStyle();
	                    var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();

	                    var style = {
	                        x: -itemSize / 2,
	                        y: -itemSize / 2,
	                        width: itemSize,
	                        height: itemSize
	                    };
	                    var path = icon.indexOf('image://') === 0
	                        ? (
	                            style.image = icon.slice(8),
	                            new graphic.Image({style: style})
	                        )
	                        : graphic.makePath(
	                            icon.replace('path://', ''),
	                            {
	                                style: normalStyle,
	                                hoverStyle: hoverStyle,
	                                rectHover: true
	                            },
	                            style,
	                            'center'
	                        );

	                    graphic.setHoverStyle(path);

	                    if (toolboxModel.get('showTitle')) {
	                        path.__title = titles[iconName];
	                        path.on('mouseover', function () {
	                                // Should not reuse above hoverStyle, which might be modified.
	                                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();
	                                path.setStyle({
	                                    text: titles[iconName],
	                                    textPosition: hoverStyle.textPosition || 'bottom',
	                                    textFill: hoverStyle.fill || hoverStyle.stroke || '#000',
	                                    textAlign: hoverStyle.textAlign || 'center'
	                                });
	                            })
	                            .on('mouseout', function () {
	                                path.setStyle({
	                                    textFill: null
	                                });
	                            });
	                    }
	                    path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');

	                    group.add(path);
	                    path.on('click', zrUtil.bind(
	                        feature.onclick, feature, ecModel, api, iconName
	                    ));

	                    iconPaths[iconName] = path;
	                });
	            }

	            listComponentHelper.layout(group, toolboxModel, api);
	            // Render background after group is layout
	            // FIXME
	            listComponentHelper.addBackground(group, toolboxModel);

	            // Adjust icon title positions to avoid them out of screen
	            group.eachChild(function (icon) {
	                var titleText = icon.__title;
	                var hoverStyle = icon.hoverStyle;
	                // May be background element
	                if (hoverStyle && titleText) {
	                    var rect = textContain.getBoundingRect(
	                        titleText, hoverStyle.font
	                    );
	                    var offsetX = icon.position[0] + group.position[0];
	                    var offsetY = icon.position[1] + group.position[1] + itemSize;

	                    var needPutOnTop = false;
	                    if (offsetY + rect.height > api.getHeight()) {
	                        hoverStyle.textPosition = 'top';
	                        needPutOnTop = true;
	                    }
	                    var topOffset = needPutOnTop ? (-5 - rect.height) : (itemSize + 8);
	                    if (offsetX + rect.width /  2 > api.getWidth()) {
	                        hoverStyle.textPosition = ['100%', topOffset];
	                        hoverStyle.textAlign = 'right';
	                    }
	                    else if (offsetX - rect.width / 2 < 0) {
	                        hoverStyle.textPosition = [0, topOffset];
	                        hoverStyle.textAlign = 'left';
	                    }
	                }
	            });
	        },

	        updateView: function (toolboxModel, ecModel, api, payload) {
	            zrUtil.each(this._features, function (feature) {
	                feature.updateView && feature.updateView(feature.model, ecModel, api, payload);
	            });
	        },

	        updateLayout: function (toolboxModel, ecModel, api, payload) {
	            zrUtil.each(this._features, function (feature) {
	                feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);
	            });
	        },

	        remove: function (ecModel, api) {
	            zrUtil.each(this._features, function (feature) {
	                feature.remove && feature.remove(ecModel, api);
	            });
	            this.group.removeAll();
	        },

	        dispose: function (ecModel, api) {
	            zrUtil.each(this._features, function (feature) {
	                feature.dispose && feature.dispose(ecModel, api);
	            });
	        }
	    });

	    function isUserFeatureName(featureName) {
	        return featureName.indexOf('my') === 0;
	    }


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 620 */
/***/ function(module, exports, __webpack_require__) {

	

	    var env = __webpack_require__(241);

	    function SaveAsImage (model) {
	        this.model = model;
	    }

	    SaveAsImage.defaultOption = {
	        show: true,
	        icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',
	        title: '保存为图片',
	        type: 'png',
	        // Default use option.backgroundColor
	        // backgroundColor: '#fff',
	        name: '',
	        excludeComponents: ['toolbox'],
	        pixelRatio: 1,
	        lang: ['右键另存为图片']
	    };

	    SaveAsImage.prototype.unusable = !env.canvasSupported;

	    var proto = SaveAsImage.prototype;

	    proto.onclick = function (ecModel, api) {
	        var model = this.model;
	        var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';
	        var $a = document.createElement('a');
	        var type = model.get('type', true) || 'png';
	        $a.download = title + '.' + type;
	        $a.target = '_blank';
	        var url = api.getConnectedDataURL({
	            type: type,
	            backgroundColor: model.get('backgroundColor', true)
	                || ecModel.get('backgroundColor') || '#fff',
	            excludeComponents: model.get('excludeComponents'),
	            pixelRatio: model.get('pixelRatio')
	        });
	        $a.href = url;
	        // Chrome and Firefox
	        if (typeof MouseEvent === 'function' && !env.browser.ie && !env.browser.edge) {
	            var evt = new MouseEvent('click', {
	                view: window,
	                bubbles: true,
	                cancelable: false
	            });
	            $a.dispatchEvent(evt);
	        }
	        // IE
	        else {
	            var lang = model.get('lang');
	            var html = ''
	                + '<body style="margin:0;">'
	                + '<img src="' + url + '" style="max-width:100%;" title="' + ((lang && lang[0]) || '') + '" />'
	                + '</body>';
	            var tab = window.open();
	            tab.document.write(html);
	        }
	    };

	    __webpack_require__(565).register(
	        'saveAsImage', SaveAsImage
	    );

	    module.exports = SaveAsImage;


/***/ },
/* 621 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);

	    function MagicType(model) {
	        this.model = model;
	    }

	    MagicType.defaultOption = {
	        show: true,
	        type: [],
	        // Icon group
	        icon: {
	            line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',
	            bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',
	            stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line
	            tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'
	        },
	        title: {
	            line: '切换为折线图',
	            bar: '切换为柱状图',
	            stack: '切换为堆叠',
	            tiled: '切换为平铺'
	        },
	        option: {},
	        seriesIndex: {}
	    };

	    var proto = MagicType.prototype;

	    proto.getIcons = function () {
	        var model = this.model;
	        var availableIcons = model.get('icon');
	        var icons = {};
	        zrUtil.each(model.get('type'), function (type) {
	            if (availableIcons[type]) {
	                icons[type] = availableIcons[type];
	            }
	        });
	        return icons;
	    };

	    var seriesOptGenreator = {
	        'line': function (seriesType, seriesId, seriesModel, model) {
	            if (seriesType === 'bar') {
	                return zrUtil.merge({
	                    id: seriesId,
	                    type: 'line',
	                    // Preserve data related option
	                    data: seriesModel.get('data'),
	                    stack: seriesModel.get('stack'),
	                    markPoint: seriesModel.get('markPoint'),
	                    markLine: seriesModel.get('markLine')
	                }, model.get('option.line') || {}, true);
	            }
	        },
	        'bar': function (seriesType, seriesId, seriesModel, model) {
	            if (seriesType === 'line') {
	                return zrUtil.merge({
	                    id: seriesId,
	                    type: 'bar',
	                    // Preserve data related option
	                    data: seriesModel.get('data'),
	                    stack: seriesModel.get('stack'),
	                    markPoint: seriesModel.get('markPoint'),
	                    markLine: seriesModel.get('markLine')
	                }, model.get('option.bar') || {}, true);
	            }
	        },
	        'stack': function (seriesType, seriesId, seriesModel, model) {
	            if (seriesType === 'line' || seriesType === 'bar') {
	                return zrUtil.merge({
	                    id: seriesId,
	                    stack: '__ec_magicType_stack__'
	                }, model.get('option.stack') || {}, true);
	            }
	        },
	        'tiled': function (seriesType, seriesId, seriesModel, model) {
	            if (seriesType === 'line' || seriesType === 'bar') {
	                return zrUtil.merge({
	                    id: seriesId,
	                    stack: ''
	                }, model.get('option.tiled') || {}, true);
	            }
	        }
	    };

	    var radioTypes = [
	        ['line', 'bar'],
	        ['stack', 'tiled']
	    ];

	    proto.onclick = function (ecModel, api, type) {
	        var model = this.model;
	        var seriesIndex = model.get('seriesIndex.' + type);
	        // Not supported magicType
	        if (!seriesOptGenreator[type]) {
	            return;
	        }
	        var newOption = {
	            series: []
	        };
	        var generateNewSeriesTypes = function (seriesModel) {
	            var seriesType = seriesModel.subType;
	            var seriesId = seriesModel.id;
	            var newSeriesOpt = seriesOptGenreator[type](
	                seriesType, seriesId, seriesModel, model
	            );
	            if (newSeriesOpt) {
	                // PENDING If merge original option?
	                zrUtil.defaults(newSeriesOpt, seriesModel.option);
	                newOption.series.push(newSeriesOpt);
	            }
	            // Modify boundaryGap
	            var coordSys = seriesModel.coordinateSystem;
	            if (coordSys && coordSys.type === 'cartesian2d' && (type === 'line' || type === 'bar')) {
	                var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	                if (categoryAxis) {
	                    var axisDim = categoryAxis.dim;
	                    var axisType = axisDim + 'Axis';
	                    var axisModel = ecModel.queryComponents({
	                        mainType: axisType,
	                        index: seriesModel.get(name + 'Index'),
	                        id: seriesModel.get(name + 'Id')
	                    })[0];
	                    var axisIndex = axisModel.componentIndex;

	                    newOption[axisType] = newOption[axisType] || [];
	                    for (var i = 0; i <= axisIndex; i++) {
	                        newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};
	                    }
	                    newOption[axisType][axisIndex].boundaryGap = type === 'bar' ? true : false;
	                }
	            }
	        };

	        zrUtil.each(radioTypes, function (radio) {
	            if (zrUtil.indexOf(radio, type) >= 0) {
	                zrUtil.each(radio, function (item) {
	                    model.setIconStatus(item, 'normal');
	                });
	            }
	        });

	        model.setIconStatus(type, 'emphasis');

	        ecModel.eachComponent(
	            {
	                mainType: 'series',
	                query: seriesIndex == null ? null : {
	                    seriesIndex: seriesIndex
	                }
	            }, generateNewSeriesTypes
	        );
	        api.dispatchAction({
	            type: 'changeMagicType',
	            currentType: type,
	            newOption: newOption
	        });
	    };

	    var echarts = __webpack_require__(240);
	    echarts.registerAction({
	        type: 'changeMagicType',
	        event: 'magicTypeChanged',
	        update: 'prepareAndUpdate'
	    }, function (payload, ecModel) {
	        ecModel.mergeOption(payload.newOption);
	    });

	    __webpack_require__(565).register('magicType', MagicType);

	    module.exports = MagicType;


/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module echarts/component/toolbox/feature/DataView
	 */



	    var zrUtil = __webpack_require__(243);
	    var eventTool = __webpack_require__(327);


	    var BLOCK_SPLITER = new Array(60).join('-');
	    var ITEM_SPLITER = '\t';
	    /**
	     * Group series into two types
	     *  1. on category axis, like line, bar
	     *  2. others, like scatter, pie
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Object}
	     * @inner
	     */
	    function groupSeries(ecModel) {
	        var seriesGroupByCategoryAxis = {};
	        var otherSeries = [];
	        var meta = [];
	        ecModel.eachRawSeries(function (seriesModel) {
	            var coordSys = seriesModel.coordinateSystem;

	            if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {
	                var baseAxis = coordSys.getBaseAxis();
	                if (baseAxis.type === 'category') {
	                    var key = baseAxis.dim + '_' + baseAxis.index;
	                    if (!seriesGroupByCategoryAxis[key]) {
	                        seriesGroupByCategoryAxis[key] = {
	                            categoryAxis: baseAxis,
	                            valueAxis: coordSys.getOtherAxis(baseAxis),
	                            series: []
	                        };
	                        meta.push({
	                            axisDim: baseAxis.dim,
	                            axisIndex: baseAxis.index
	                        });
	                    }
	                    seriesGroupByCategoryAxis[key].series.push(seriesModel);
	                }
	                else {
	                    otherSeries.push(seriesModel);
	                }
	            }
	            else {
	                otherSeries.push(seriesModel);
	            }
	        });

	        return {
	            seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,
	            other: otherSeries,
	            meta: meta
	        };
	    }

	    /**
	     * Assemble content of series on cateogory axis
	     * @param {Array.<module:echarts/model/Series>} series
	     * @return {string}
	     * @inner
	     */
	    function assembleSeriesWithCategoryAxis(series) {
	        var tables = [];
	        zrUtil.each(series, function (group, key) {
	            var categoryAxis = group.categoryAxis;
	            var valueAxis = group.valueAxis;
	            var valueAxisDim = valueAxis.dim;

	            var headers = [' '].concat(zrUtil.map(group.series, function (series) {
	                return series.name;
	            }));
	            var columns = [categoryAxis.model.getCategories()];
	            zrUtil.each(group.series, function (series) {
	                columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {
	                    return val;
	                }));
	            });
	            // Assemble table content
	            var lines = [headers.join(ITEM_SPLITER)];
	            for (var i = 0; i < columns[0].length; i++) {
	                var items = [];
	                for (var j = 0; j < columns.length; j++) {
	                    items.push(columns[j][i]);
	                }
	                lines.push(items.join(ITEM_SPLITER));
	            }
	            tables.push(lines.join('\n'));
	        });
	        return tables.join('\n\n' +  BLOCK_SPLITER + '\n\n');
	    }

	    /**
	     * Assemble content of other series
	     * @param {Array.<module:echarts/model/Series>} series
	     * @return {string}
	     * @inner
	     */
	    function assembleOtherSeries(series) {
	        return zrUtil.map(series, function (series) {
	            var data = series.getRawData();
	            var lines = [series.name];
	            var vals = [];
	            data.each(data.dimensions, function () {
	                var argLen = arguments.length;
	                var dataIndex = arguments[argLen - 1];
	                var name = data.getName(dataIndex);
	                for (var i = 0; i < argLen - 1; i++) {
	                    vals[i] = arguments[i];
	                }
	                lines.push((name ? (name + ITEM_SPLITER) : '') + vals.join(ITEM_SPLITER));
	            });
	            return lines.join('\n');
	        }).join('\n\n' + BLOCK_SPLITER + '\n\n');
	    }

	    /**
	     * @param {module:echarts/model/Global}
	     * @return {string}
	     * @inner
	     */
	    function getContentFromModel(ecModel) {

	        var result = groupSeries(ecModel);

	        return {
	            value: zrUtil.filter([
	                    assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),
	                    assembleOtherSeries(result.other)
	                ], function (str) {
	                    return str.replace(/[\n\t\s]/g, '');
	                }).join('\n\n' + BLOCK_SPLITER + '\n\n'),

	            meta: result.meta
	        };
	    }


	    function trim(str) {
	        return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	    }
	    /**
	     * If a block is tsv format
	     */
	    function isTSVFormat(block) {
	        // Simple method to find out if a block is tsv format
	        var firstLine = block.slice(0, block.indexOf('\n'));
	        if (firstLine.indexOf(ITEM_SPLITER) >= 0) {
	            return true;
	        }
	    }

	    var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');
	    /**
	     * @param {string} tsv
	     * @return {Array.<Object>}
	     */
	    function parseTSVContents(tsv) {
	        var tsvLines = tsv.split(/\n+/g);
	        var headers = trim(tsvLines.shift()).split(itemSplitRegex);

	        var categories = [];
	        var series = zrUtil.map(headers, function (header) {
	            return {
	                name: header,
	                data: []
	            };
	        });
	        for (var i = 0; i < tsvLines.length; i++) {
	            var items = trim(tsvLines[i]).split(itemSplitRegex);
	            categories.push(items.shift());
	            for (var j = 0; j < items.length; j++) {
	                series[j] && (series[j].data[i] = items[j]);
	            }
	        }
	        return {
	            series: series,
	            categories: categories
	        };
	    }

	    /**
	     * @param {string} str
	     * @return {Array.<Object>}
	     * @inner
	     */
	    function parseListContents(str) {
	        var lines = str.split(/\n+/g);
	        var seriesName = trim(lines.shift());

	        var data = [];
	        for (var i = 0; i < lines.length; i++) {
	            var items = trim(lines[i]).split(itemSplitRegex);
	            var name = '';
	            var value;
	            var hasName = false;
	            if (isNaN(items[0])) { // First item is name
	                hasName = true;
	                name = items[0];
	                items = items.slice(1);
	                data[i] = {
	                    name: name,
	                    value: []
	                };
	                value = data[i].value;
	            }
	            else {
	                value = data[i] = [];
	            }
	            for (var j = 0; j < items.length; j++) {
	                value.push(+items[j]);
	            }
	            if (value.length === 1) {
	                hasName ? (data[i].value = value[0]) : (data[i] = value[0]);
	            }
	        }

	        return {
	            name: seriesName,
	            data: data
	        };
	    }

	    /**
	     * @param {string} str
	     * @param {Array.<Object>} blockMetaList
	     * @return {Object}
	     * @inner
	     */
	    function parseContents(str, blockMetaList) {
	        var blocks = str.split(new RegExp('\n*' + BLOCK_SPLITER + '\n*', 'g'));
	        var newOption = {
	            series: []
	        };
	        zrUtil.each(blocks, function (block, idx) {
	            if (isTSVFormat(block)) {
	                var result = parseTSVContents(block);
	                var blockMeta = blockMetaList[idx];
	                var axisKey = blockMeta.axisDim + 'Axis';

	                if (blockMeta) {
	                    newOption[axisKey] = newOption[axisKey] || [];
	                    newOption[axisKey][blockMeta.axisIndex] = {
	                        data: result.categories
	                    };
	                    newOption.series = newOption.series.concat(result.series);
	                }
	            }
	            else {
	                var result = parseListContents(block);
	                newOption.series.push(result);
	            }
	        });
	        return newOption;
	    }

	    /**
	     * @alias {module:echarts/component/toolbox/feature/DataView}
	     * @constructor
	     * @param {module:echarts/model/Model} model
	     */
	    function DataView(model) {

	        this._dom = null;

	        this.model = model;
	    }

	    DataView.defaultOption = {
	        show: true,
	        readOnly: false,
	        optionToContent: null,
	        contentToOption: null,

	        icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',
	        title: '数据视图',
	        lang: ['数据视图', '关闭', '刷新'],
	        backgroundColor: '#fff',
	        textColor: '#000',
	        textareaColor: '#fff',
	        textareaBorderColor: '#333',
	        buttonColor: '#c23531',
	        buttonTextColor: '#fff'
	    };

	    DataView.prototype.onclick = function (ecModel, api) {
	        var container = api.getDom();
	        var model = this.model;
	        if (this._dom) {
	            container.removeChild(this._dom);
	        }
	        var root = document.createElement('div');
	        root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';
	        root.style.backgroundColor = model.get('backgroundColor') || '#fff';

	        // Create elements
	        var header = document.createElement('h4');
	        var lang = model.get('lang') || [];
	        header.innerHTML = lang[0] || model.get('title');
	        header.style.cssText = 'margin: 10px 20px;';
	        header.style.color = model.get('textColor');

	        var viewMain = document.createElement('div');
	        var textarea = document.createElement('textarea');
	        viewMain.style.cssText = 'display:block;width:100%;overflow:hidden;';

	        var optionToContent = model.get('optionToContent');
	        var contentToOption = model.get('contentToOption');
	        var result = getContentFromModel(ecModel);
	        if (typeof optionToContent === 'function') {
	            var htmlOrDom = optionToContent(api.getOption());
	            if (typeof htmlOrDom === 'string') {
	                viewMain.innerHTML = htmlOrDom;
	            }
	            else if (zrUtil.isDom(htmlOrDom)) {
	                viewMain.appendChild(htmlOrDom);
	            }
	        }
	        else {
	            // Use default textarea
	            viewMain.appendChild(textarea);
	            textarea.readOnly = model.get('readOnly');
	            textarea.style.cssText = 'width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;';
	            textarea.style.color = model.get('textColor');
	            textarea.style.borderColor = model.get('textareaBorderColor');
	            textarea.style.backgroundColor = model.get('textareaColor');
	            textarea.value = result.value;
	        }

	        var blockMetaList = result.meta;

	        var buttonContainer = document.createElement('div');
	        buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';

	        var buttonStyle = 'float:right;margin-right:20px;border:none;'
	            + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';
	        var closeButton = document.createElement('div');
	        var refreshButton = document.createElement('div');

	        buttonStyle += ';background-color:' + model.get('buttonColor');
	        buttonStyle += ';color:' + model.get('buttonTextColor');

	        var self = this;

	        function close() {
	            container.removeChild(root);
	            self._dom = null;
	        }
	        eventTool.addEventListener(closeButton, 'click', close);

	        eventTool.addEventListener(refreshButton, 'click', function () {
	            var newOption;
	            try {
	                if (typeof contentToOption === 'function') {
	                    newOption = contentToOption(viewMain, api.getOption());
	                }
	                else {
	                    newOption = parseContents(textarea.value, blockMetaList);
	                }
	            }
	            catch (e) {
	                close();
	                throw new Error('Data view format error ' + e);
	            }
	            if (newOption) {
	                api.dispatchAction({
	                    type: 'changeDataView',
	                    newOption: newOption
	                });
	            }

	            close();
	        });

	        closeButton.innerHTML = lang[1];
	        refreshButton.innerHTML = lang[2];
	        refreshButton.style.cssText = buttonStyle;
	        closeButton.style.cssText = buttonStyle;

	        !model.get('readOnly') && buttonContainer.appendChild(refreshButton);
	        buttonContainer.appendChild(closeButton);

	        // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea
	        eventTool.addEventListener(textarea, 'keydown', function (e) {
	            if ((e.keyCode || e.which) === 9) {
	                // get caret position/selection
	                var val = this.value;
	                var start = this.selectionStart;
	                var end = this.selectionEnd;

	                // set textarea value to: text before caret + tab + text after caret
	                this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);

	                // put caret at right position again
	                this.selectionStart = this.selectionEnd = start + 1;

	                // prevent the focus lose
	                eventTool.stop(e);
	            }
	        });

	        root.appendChild(header);
	        root.appendChild(viewMain);
	        root.appendChild(buttonContainer);

	        viewMain.style.height = (container.clientHeight - 80) + 'px';

	        container.appendChild(root);
	        this._dom = root;
	    };

	    DataView.prototype.remove = function (ecModel, api) {
	        this._dom && api.getDom().removeChild(this._dom);
	    };

	    DataView.prototype.dispose = function (ecModel, api) {
	        this.remove(ecModel, api);
	    };

	    /**
	     * @inner
	     */
	    function tryMergeDataOption(newData, originalData) {
	        return zrUtil.map(newData, function (newVal, idx) {
	            var original = originalData && originalData[idx];
	            if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {
	                if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {
	                    newVal = newVal.value;
	                }
	                // Original data has option
	                return zrUtil.defaults({
	                    value: newVal
	                }, original);
	            }
	            else {
	                return newVal;
	            }
	        });
	    }

	    __webpack_require__(565).register('dataView', DataView);

	    __webpack_require__(240).registerAction({
	        type: 'changeDataView',
	        event: 'dataViewChanged',
	        update: 'prepareAndUpdate'
	    }, function (payload, ecModel) {
	        var newSeriesOptList = [];
	        zrUtil.each(payload.newOption.series, function (seriesOpt) {
	            var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];
	            if (!seriesModel) {
	                // New created series
	                // Geuss the series type
	                newSeriesOptList.push(zrUtil.extend({
	                    // Default is scatter
	                    type: 'scatter'
	                }, seriesOpt));
	            }
	            else {
	                var originalData = seriesModel.get('data');
	                newSeriesOptList.push({
	                    name: seriesOpt.name,
	                    data: tryMergeDataOption(seriesOpt.data, originalData)
	                });
	            }
	        });

	        ecModel.mergeOption(zrUtil.defaults({
	            series: newSeriesOptList
	        }, payload.newOption));
	    });

	    module.exports = DataView;


/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var zrUtil = __webpack_require__(243);
	    var BrushController = __webpack_require__(475);
	    var brushHelper = __webpack_require__(560);
	    var history = __webpack_require__(624);

	    var each = zrUtil.each;

	    // Use dataZoomSelect
	    __webpack_require__(625);

	    // Spectial component id start with \0ec\0, see echarts/model/Global.js~hasInnerId
	    var DATA_ZOOM_ID_BASE = '\0_ec_\0toolbox-dataZoom_';

	    function DataZoom(model, ecModel, api) {

	        /**
	         * @private
	         * @type {module:echarts/component/helper/BrushController}
	         */
	        (this._brushController = new BrushController(api.getZr()))
	            .on('brush', zrUtil.bind(this._onBrush, this))
	            .mount();

	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._isZoomActive;
	    }

	    DataZoom.defaultOption = {
	        show: true,
	        // Icon group
	        icon: {
	            zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',
	            back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'
	        },
	        title: {
	            zoom: '区域缩放',
	            back: '区域缩放还原'
	        }
	    };

	    var proto = DataZoom.prototype;

	    proto.render = function (featureModel, ecModel, api, payload) {
	        this.model = featureModel;
	        this.ecModel = ecModel;
	        this.api = api;

	        updateZoomBtnStatus(featureModel, ecModel, this, payload);
	        updateBackBtnStatus(featureModel, ecModel);
	    };

	    proto.onclick = function (ecModel, api, type) {
	        handlers[type].call(this);
	    };

	    proto.remove = function (ecModel, api) {
	        this._brushController.unmount();
	    };

	    proto.dispose = function (ecModel, api) {
	        this._brushController.dispose();
	    };

	    /**
	     * @private
	     */
	    var handlers = {

	        zoom: function () {
	            var nextActive = !this._isZoomActive;

	            this.api.dispatchAction({
	                type: 'takeGlobalCursor',
	                key: 'dataZoomSelect',
	                dataZoomSelectActive: nextActive
	            });
	        },

	        back: function () {
	            this._dispatchZoomAction(history.pop(this.ecModel));
	        }
	    };

	    /**
	     * @private
	     */
	    proto._onBrush = function (areas, opt) {
	        if (!opt.isEnd || !areas.length) {
	            return;
	        }
	        var snapshot = {};
	        var ecModel = this.ecModel;

	        this._brushController.updateCovers([]); // remove cover

	        var coordInfoList = brushHelper.makeCoordInfoList(
	            retrieveAxisSetting(this.model.option), ecModel
	        );
	        var rangesCoordInfoList = [];
	        brushHelper.parseOutputRanges(areas, coordInfoList, ecModel, rangesCoordInfoList);

	        var area = areas[0]; // dataZoom can not multiple area.
	        var coordInfo = rangesCoordInfoList[0];
	        var coordRange = area.coordRange;
	        var brushType = area.brushType;

	        if (coordInfo && coordRange) {
	            if (brushType === 'rect') {
	                setBatch('xAxis', coordRange[0], coordInfo);
	                setBatch('yAxis', coordRange[1], coordInfo);
	            }
	            else {
	                var axisNames = {lineX: 'xAxis', lineY: 'yAxis'};
	                setBatch(axisNames[brushType], coordRange, coordInfo);
	            }
	        }

	        history.push(ecModel, snapshot);

	        this._dispatchZoomAction(snapshot);

	        function setBatch(axisName, minMax, coordInfo) {
	            var dataZoomModel = findDataZoom(axisName, coordInfo[axisName], ecModel);
	            if (dataZoomModel) {
	                snapshot[dataZoomModel.id] = {
	                    dataZoomId: dataZoomModel.id,
	                    startValue: minMax[0],
	                    endValue: minMax[1]
	                };
	            }
	        }

	        function findDataZoom(axisName, axisModel, ecModel) {
	            var dataZoomModel;
	            ecModel.eachComponent(
	                {mainType: 'dataZoom', subType: 'select'},
	                function (dzModel, dataZoomIndex) {
	                    var axisIndex = dzModel.get(axisName + 'Index');
	                    if (axisIndex != null
	                        && ecModel.getComponent(axisName, axisIndex) === axisModel
	                    ) {
	                        dataZoomModel = dzModel;
	                    }
	                }
	            );
	            return dataZoomModel;
	        }
	    };

	    /**
	     * @private
	     */
	    proto._dispatchZoomAction = function (snapshot) {
	        var batch = [];

	        // Convert from hash map to array.
	        each(snapshot, function (batchItem, dataZoomId) {
	            batch.push(zrUtil.clone(batchItem));
	        });

	        batch.length && this.api.dispatchAction({
	            type: 'dataZoom',
	            from: this.uid,
	            batch: batch
	        });
	    };

	    function retrieveAxisSetting(option) {
	        var setting = {};
	        // Compatible with previous setting: null => all axis, false => no axis.
	        zrUtil.each(['xAxisIndex', 'yAxisIndex'], function (name) {
	            setting[name] = option[name];
	            setting[name] == null && (setting[name] = 'all');
	            (setting[name] === false || setting[name] === 'none') && (setting[name] = []);
	        });
	        return setting;
	    }

	    function updateBackBtnStatus(featureModel, ecModel) {
	        featureModel.setIconStatus(
	            'back',
	            history.count(ecModel) > 1 ? 'emphasis' : 'normal'
	        );
	    }

	    function updateZoomBtnStatus(featureModel, ecModel, view, payload) {
	        var zoomActive = view._isZoomActive;

	        if (payload && payload.type === 'takeGlobalCursor') {
	            zoomActive = payload.key === 'dataZoomSelect'
	                ? payload.dataZoomSelectActive : false;
	        }

	        view._isZoomActive = zoomActive;

	        featureModel.setIconStatus('zoom', zoomActive ? 'emphasis' : 'normal');

	        var coordInfoList = brushHelper.makeCoordInfoList(
	            retrieveAxisSetting(featureModel.option), ecModel
	        );
	        var brushType = (coordInfoList.xAxisHas && !coordInfoList.yAxisHas)
	            ? 'lineX'
	            : (!coordInfoList.xAxisHas && coordInfoList.yAxisHas)
	            ? 'lineY'
	            : 'rect';

	        view._brushController
	            .setPanels(brushHelper.makePanelOpts(coordInfoList))
	            .enableBrush(
	                zoomActive
	                ? {
	                    brushType: brushType,
	                    brushStyle: { // FIXME user customized?
	                        lineWidth: 0,
	                        // stroke: '#333',
	                        fill: 'rgba(0,0,0,0.2)'
	                    }
	                }
	                : false
	            );
	    }


	    __webpack_require__(565).register('dataZoom', DataZoom);


	    // Create special dataZoom option for select
	    __webpack_require__(240).registerPreprocessor(function (option) {
	        if (!option) {
	            return;
	        }

	        var dataZoomOpts = option.dataZoom || (option.dataZoom = []);
	        if (!zrUtil.isArray(dataZoomOpts)) {
	            option.dataZoom = dataZoomOpts = [dataZoomOpts];
	        }

	        var toolboxOpt = option.toolbox;
	        if (toolboxOpt) {
	            // Assume there is only one toolbox
	            if (zrUtil.isArray(toolboxOpt)) {
	                toolboxOpt = toolboxOpt[0];
	            }

	            if (toolboxOpt && toolboxOpt.feature) {
	                var dataZoomOpt = toolboxOpt.feature.dataZoom;
	                addForAxis('xAxis', dataZoomOpt);
	                addForAxis('yAxis', dataZoomOpt);
	            }
	        }

	        function addForAxis(axisName, dataZoomOpt) {
	            if (!dataZoomOpt) {
	                return;
	            }

	            // Try not to modify model, because it is not merged yet.
	            var axisIndicesName = axisName + 'Index';
	            var givenAxisIndices = dataZoomOpt[axisIndicesName];
	            if (givenAxisIndices != null
	                && givenAxisIndices != 'all'
	                && !zrUtil.isArray(givenAxisIndices)
	            ) {
	                givenAxisIndices = (givenAxisIndices === false || givenAxisIndices === 'none') ? [] : [givenAxisIndices];
	            }

	            forEachComponent(axisName, function (axisOpt, axisIndex) {
	                if (givenAxisIndices != null
	                    && givenAxisIndices != 'all'
	                    && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1
	                ) {
	                    return;
	                }
	                var newOpt = {
	                    type: 'select',
	                    $fromToolbox: true,
	                    // Id for merge mapping.
	                    id: DATA_ZOOM_ID_BASE + axisName + axisIndex
	                };
	                // FIXME
	                // Only support one axis now.
	                newOpt[axisIndicesName] = axisIndex;
	                dataZoomOpts.push(newOpt);
	            });
	        }

	        function forEachComponent(mainType, cb) {
	            var opts = option[mainType];
	            if (!zrUtil.isArray(opts)) {
	                opts = opts ? [opts] : [];
	            }
	            each(opts, cb);
	        }
	    });

	    module.exports = DataZoom;


/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file History manager.
	 */


	    var zrUtil = __webpack_require__(243);
	    var each = zrUtil.each;

	    var ATTR = '\0_ec_hist_store';

	    var history = {

	        /**
	         * @public
	         * @param {module:echarts/model/Global} ecModel
	         * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}
	         */
	        push: function (ecModel, newSnapshot) {
	            var store = giveStore(ecModel);

	            // If previous dataZoom can not be found,
	            // complete an range with current range.
	            each(newSnapshot, function (batchItem, dataZoomId) {
	                var i = store.length - 1;
	                for (; i >= 0; i--) {
	                    var snapshot = store[i];
	                    if (snapshot[dataZoomId]) {
	                        break;
	                    }
	                }
	                if (i < 0) {
	                    // No origin range set, create one by current range.
	                    var dataZoomModel = ecModel.queryComponents(
	                        {mainType: 'dataZoom', subType: 'select', id: dataZoomId}
	                    )[0];
	                    if (dataZoomModel) {
	                        var percentRange = dataZoomModel.getPercentRange();
	                        store[0][dataZoomId] = {
	                            dataZoomId: dataZoomId,
	                            start: percentRange[0],
	                            end: percentRange[1]
	                        };
	                    }
	                }
	            });

	            store.push(newSnapshot);
	        },

	        /**
	         * @public
	         * @param {module:echarts/model/Global} ecModel
	         * @return {Object} snapshot
	         */
	        pop: function (ecModel) {
	            var store = giveStore(ecModel);
	            var head = store[store.length - 1];
	            store.length > 1 && store.pop();

	            // Find top for all dataZoom.
	            var snapshot = {};
	            each(head, function (batchItem, dataZoomId) {
	                for (var i = store.length - 1; i >= 0; i--) {
	                    var batchItem = store[i][dataZoomId];
	                    if (batchItem) {
	                        snapshot[dataZoomId] = batchItem;
	                        break;
	                    }
	                }
	            });

	            return snapshot;
	        },

	        /**
	         * @public
	         */
	        clear: function (ecModel) {
	            ecModel[ATTR] = null;
	        },

	        /**
	         * @public
	         * @param {module:echarts/model/Global} ecModel
	         * @return {number} records. always >= 1.
	         */
	        count: function (ecModel) {
	            return giveStore(ecModel).length;
	        }

	    };

	    /**
	     * [{key: dataZoomId, value: {dataZoomId, range}}, ...]
	     * History length of each dataZoom may be different.
	     * this._history[0] is used to store origin range.
	     * @type {Array.<Object>}
	     */
	    function giveStore(ecModel) {
	        var store = ecModel[ATTR];
	        if (!store) {
	            store = ecModel[ATTR] = [{}];
	        }
	        return store;
	    }

	    module.exports = history;



/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * DataZoom component entry
	 */


	    __webpack_require__(568);

	    __webpack_require__(569);
	    __webpack_require__(572);

	    __webpack_require__(626);
	    __webpack_require__(627);

	    __webpack_require__(579);
	    __webpack_require__(580);



/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @file Data zoom model
	 */


	    var DataZoomModel = __webpack_require__(569);

	    module.exports = DataZoomModel.extend({

	        type: 'dataZoom.select'

	    });



/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	

	    module.exports = __webpack_require__(572).extend({

	        type: 'dataZoom.select'

	    });



/***/ },
/* 628 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';


	    var history = __webpack_require__(624);

	    function Restore(model) {
	        this.model = model;
	    }

	    Restore.defaultOption = {
	        show: true,
	        icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',
	        title: '还原'
	    };

	    var proto = Restore.prototype;

	    proto.onclick = function (ecModel, api, type) {
	        history.clear(ecModel);

	        api.dispatchAction({
	            type: 'restore',
	            from: this.uid
	        });
	    };


	    __webpack_require__(565).register('restore', Restore);


	    __webpack_require__(240).registerAction(
	        {type: 'restore', event: 'restore', update: 'prepareAndUpdate'},
	        function (payload, ecModel) {
	            ecModel.resetOption('recreate');
	        }
	    );

	    module.exports = Restore;


/***/ },
/* 629 */
/***/ function(module, exports, __webpack_require__) {

	
	    __webpack_require__(630);
	    __webpack_require__(321).registerPainter('vml', __webpack_require__(632));


/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	// http://www.w3.org/TR/NOTE-VML
	// TODO Use proxy like svg instead of overwrite brush methods


	if (!__webpack_require__(241).canvasSupported) {
	    var vec2 = __webpack_require__(249);
	    var BoundingRect = __webpack_require__(248);
	    var CMD = __webpack_require__(288).CMD;
	    var colorTool = __webpack_require__(278);
	    var textContain = __webpack_require__(247);
	    var RectText = __webpack_require__(287);
	    var Displayable = __webpack_require__(285);
	    var ZImage = __webpack_require__(300);
	    var Text = __webpack_require__(302);
	    var Path = __webpack_require__(284);

	    var Gradient = __webpack_require__(318);

	    var vmlCore = __webpack_require__(631);

	    var round = Math.round;
	    var sqrt = Math.sqrt;
	    var abs = Math.abs;
	    var cos = Math.cos;
	    var sin = Math.sin;
	    var mathMax = Math.max;

	    var applyTransform = vec2.applyTransform;

	    var comma = ',';
	    var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';

	    var Z = 21600;
	    var Z2 = Z / 2;

	    var ZLEVEL_BASE = 100000;
	    var Z_BASE = 1000;

	    var initRootElStyle = function (el) {
	        el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';
	        el.coordsize = Z + ','  + Z;
	        el.coordorigin = '0,0';
	    };

	    var encodeHtmlAttribute = function (s) {
	        return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
	    };

	    var rgb2Str = function (r, g, b) {
	        return 'rgb(' + [r, g, b].join(',') + ')';
	    };

	    var append = function (parent, child) {
	        if (child && parent && child.parentNode !== parent) {
	            parent.appendChild(child);
	        }
	    };

	    var remove = function (parent, child) {
	        if (child && parent && child.parentNode === parent) {
	            parent.removeChild(child);
	        }
	    };

	    var getZIndex = function (zlevel, z, z2) {
	        // z 的取值范围为 [0, 1000]
	        return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;
	    };

	    var parsePercent = function (value, maxValue) {
	        if (typeof value === 'string') {
	            if (value.lastIndexOf('%') >= 0) {
	                return parseFloat(value) / 100 * maxValue;
	            }
	            return parseFloat(value);
	        }
	        return value;
	    };

	    /***************************************************
	     * PATH
	     **************************************************/

	    var setColorAndOpacity = function (el, color, opacity) {
	        var colorArr = colorTool.parse(color);
	        opacity = +opacity;
	        if (isNaN(opacity)) {
	            opacity = 1;
	        }
	        if (colorArr) {
	            el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);
	            el.opacity = opacity * colorArr[3];
	        }
	    };

	    var getColorAndAlpha = function (color) {
	        var colorArr = colorTool.parse(color);
	        return [
	            rgb2Str(colorArr[0], colorArr[1], colorArr[2]),
	            colorArr[3]
	        ];
	    };

	    var updateFillNode = function (el, style, zrEl) {
	        // TODO pattern
	        var fill = style.fill;
	        if (fill != null) {
	            // Modified from excanvas
	            if (fill instanceof Gradient) {
	                var gradientType;
	                var angle = 0;
	                var focus = [0, 0];
	                // additional offset
	                var shift = 0;
	                // scale factor for offset
	                var expansion = 1;
	                var rect = zrEl.getBoundingRect();
	                var rectWidth = rect.width;
	                var rectHeight = rect.height;
	                if (fill.type === 'linear') {
	                    gradientType = 'gradient';
	                    var transform = zrEl.transform;
	                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	                    var p1 = [fill.x2 * rectWidth, fill.y2 * rectHeight];
	                    if (transform) {
	                        applyTransform(p0, p0, transform);
	                        applyTransform(p1, p1, transform);
	                    }
	                    var dx = p1[0] - p0[0];
	                    var dy = p1[1] - p0[1];
	                    angle = Math.atan2(dx, dy) * 180 / Math.PI;
	                    // The angle should be a non-negative number.
	                    if (angle < 0) {
	                        angle += 360;
	                    }

	                    // Very small angles produce an unexpected result because they are
	                    // converted to a scientific notation string.
	                    if (angle < 1e-6) {
	                        angle = 0;
	                    }
	                }
	                else {
	                    gradientType = 'gradientradial';
	                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	                    var transform = zrEl.transform;
	                    var scale = zrEl.scale;
	                    var width = rectWidth;
	                    var height = rectHeight;
	                    focus = [
	                        // Percent in bounding rect
	                        (p0[0] - rect.x) / width,
	                        (p0[1] - rect.y) / height
	                    ];
	                    if (transform) {
	                        applyTransform(p0, p0, transform);
	                    }

	                    width /= scale[0] * Z;
	                    height /= scale[1] * Z;
	                    var dimension = mathMax(width, height);
	                    shift = 2 * 0 / dimension;
	                    expansion = 2 * fill.r / dimension - shift;
	                }

	                // We need to sort the color stops in ascending order by offset,
	                // otherwise IE won't interpret it correctly.
	                var stops = fill.colorStops.slice();
	                stops.sort(function(cs1, cs2) {
	                    return cs1.offset - cs2.offset;
	                });

	                var length = stops.length;
	                // Color and alpha list of first and last stop
	                var colorAndAlphaList = [];
	                var colors = [];
	                for (var i = 0; i < length; i++) {
	                    var stop = stops[i];
	                    var colorAndAlpha = getColorAndAlpha(stop.color);
	                    colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);
	                    if (i === 0 || i === length - 1) {
	                        colorAndAlphaList.push(colorAndAlpha);
	                    }
	                }

	                if (length >= 2) {
	                    var color1 = colorAndAlphaList[0][0];
	                    var color2 = colorAndAlphaList[1][0];
	                    var opacity1 = colorAndAlphaList[0][1] * style.opacity;
	                    var opacity2 = colorAndAlphaList[1][1] * style.opacity;

	                    el.type = gradientType;
	                    el.method = 'none';
	                    el.focus = '100%';
	                    el.angle = angle;
	                    el.color = color1;
	                    el.color2 = color2;
	                    el.colors = colors.join(',');
	                    // When colors attribute is used, the meanings of opacity and o:opacity2
	                    // are reversed.
	                    el.opacity = opacity2;
	                    // FIXME g_o_:opacity ?
	                    el.opacity2 = opacity1;
	                }
	                if (gradientType === 'radial') {
	                    el.focusposition = focus.join(',');
	                }
	            }
	            else {
	                // FIXME Change from Gradient fill to color fill
	                setColorAndOpacity(el, fill, style.opacity);
	            }
	        }
	    };

	    var updateStrokeNode = function (el, style) {
	        // if (style.lineJoin != null) {
	        //     el.joinstyle = style.lineJoin;
	        // }
	        // if (style.miterLimit != null) {
	        //     el.miterlimit = style.miterLimit * Z;
	        // }
	        // if (style.lineCap != null) {
	        //     el.endcap = style.lineCap;
	        // }
	        if (style.lineDash != null) {
	            el.dashstyle = style.lineDash.join(' ');
	        }
	        if (style.stroke != null && !(style.stroke instanceof Gradient)) {
	            setColorAndOpacity(el, style.stroke, style.opacity);
	        }
	    };

	    var updateFillAndStroke = function (vmlEl, type, style, zrEl) {
	        var isFill = type == 'fill';
	        var el = vmlEl.getElementsByTagName(type)[0];
	        // Stroke must have lineWidth
	        if (style[type] != null && style[type] !== 'none' && (isFill || (!isFill && style.lineWidth))) {
	            vmlEl[isFill ? 'filled' : 'stroked'] = 'true';
	            // FIXME Remove before updating, or set `colors` will throw error
	            if (style[type] instanceof Gradient) {
	                remove(vmlEl, el);
	            }
	            if (!el) {
	                el = vmlCore.createNode(type);
	            }

	            isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);
	            append(vmlEl, el);
	        }
	        else {
	            vmlEl[isFill ? 'filled' : 'stroked'] = 'false';
	            remove(vmlEl, el);
	        }
	    };

	    var points = [[], [], []];
	    var pathDataToString = function (data, m) {
	        var M = CMD.M;
	        var C = CMD.C;
	        var L = CMD.L;
	        var A = CMD.A;
	        var Q = CMD.Q;

	        var str = [];
	        var nPoint;
	        var cmdStr;
	        var cmd;
	        var i;
	        var xi;
	        var yi;
	        for (i = 0; i < data.length;) {
	            cmd = data[i++];
	            cmdStr = '';
	            nPoint = 0;
	            switch (cmd) {
	                case M:
	                    cmdStr = ' m ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case L:
	                    cmdStr = ' l ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case Q:
	                case C:
	                    cmdStr = ' c ';
	                    nPoint = 3;
	                    var x1 = data[i++];
	                    var y1 = data[i++];
	                    var x2 = data[i++];
	                    var y2 = data[i++];
	                    var x3;
	                    var y3;
	                    if (cmd === Q) {
	                        // Convert quadratic to cubic using degree elevation
	                        x3 = x2;
	                        y3 = y2;
	                        x2 = (x2 + 2 * x1) / 3;
	                        y2 = (y2 + 2 * y1) / 3;
	                        x1 = (xi + 2 * x1) / 3;
	                        y1 = (yi + 2 * y1) / 3;
	                    }
	                    else {
	                        x3 = data[i++];
	                        y3 = data[i++];
	                    }
	                    points[0][0] = x1;
	                    points[0][1] = y1;
	                    points[1][0] = x2;
	                    points[1][1] = y2;
	                    points[2][0] = x3;
	                    points[2][1] = y3;

	                    xi = x3;
	                    yi = y3;
	                    break;
	                case A:
	                    var x = 0;
	                    var y = 0;
	                    var sx = 1;
	                    var sy = 1;
	                    var angle = 0;
	                    if (m) {
	                        // Extract SRT from matrix
	                        x = m[4];
	                        y = m[5];
	                        sx = sqrt(m[0] * m[0] + m[1] * m[1]);
	                        sy = sqrt(m[2] * m[2] + m[3] * m[3]);
	                        angle = Math.atan2(-m[1] / sy, m[0] / sx);
	                    }

	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var startAngle = data[i++] + angle;
	                    var endAngle = data[i++] + startAngle + angle;
	                    // FIXME
	                    // var psi = data[i++];
	                    i++;
	                    var clockwise = data[i++];

	                    var x0 = cx + cos(startAngle) * rx;
	                    var y0 = cy + sin(startAngle) * ry;

	                    var x1 = cx + cos(endAngle) * rx;
	                    var y1 = cy + sin(endAngle) * ry;

	                    var type = clockwise ? ' wa ' : ' at ';
	                    if (Math.abs(x0 - x1) < 1e-4) {
	                        // IE won't render arches drawn counter clockwise if x0 == x1.
	                        if (Math.abs(endAngle - startAngle) > 1e-2) {
	                            // Offset x0 by 1/80 of a pixel. Use something
	                            // that can be represented in binary
	                            if (clockwise) {
	                                x0 += 270 / Z;
	                            }
	                        }
	                        else {
	                            // Avoid case draw full circle
	                            if (Math.abs(y0 - cy) < 1e-4) {
	                                if ((clockwise && x0 < cx) || (!clockwise && x0 > cx)) {
	                                    y1 -= 270 / Z;
	                                }
	                                else {
	                                    y1 += 270 / Z;
	                                }
	                            }
	                            else if ((clockwise && y0 < cy) || (!clockwise && y0 > cy)) {
	                                x1 += 270 / Z;
	                            }
	                            else {
	                                x1 -= 270 / Z;
	                            }
	                        }
	                    }
	                    str.push(
	                        type,
	                        round(((cx - rx) * sx + x) * Z - Z2), comma,
	                        round(((cy - ry) * sy + y) * Z - Z2), comma,
	                        round(((cx + rx) * sx + x) * Z - Z2), comma,
	                        round(((cy + ry) * sy + y) * Z - Z2), comma,
	                        round((x0 * sx + x) * Z - Z2), comma,
	                        round((y0 * sy + y) * Z - Z2), comma,
	                        round((x1 * sx + x) * Z - Z2), comma,
	                        round((y1 * sy + y) * Z - Z2)
	                    );

	                    xi = x1;
	                    yi = y1;
	                    break;
	                case CMD.R:
	                    var p0 = points[0];
	                    var p1 = points[1];
	                    // x0, y0
	                    p0[0] = data[i++];
	                    p0[1] = data[i++];
	                    // x1, y1
	                    p1[0] = p0[0] + data[i++];
	                    p1[1] = p0[1] + data[i++];

	                    if (m) {
	                        applyTransform(p0, p0, m);
	                        applyTransform(p1, p1, m);
	                    }

	                    p0[0] = round(p0[0] * Z - Z2);
	                    p1[0] = round(p1[0] * Z - Z2);
	                    p0[1] = round(p0[1] * Z - Z2);
	                    p1[1] = round(p1[1] * Z - Z2);
	                    str.push(
	                        // x0, y0
	                        ' m ', p0[0], comma, p0[1],
	                        // x1, y0
	                        ' l ', p1[0], comma, p0[1],
	                        // x1, y1
	                        ' l ', p1[0], comma, p1[1],
	                        // x0, y1
	                        ' l ', p0[0], comma, p1[1]
	                    );
	                    break;
	                case CMD.Z:
	                    // FIXME Update xi, yi
	                    str.push(' x ');
	            }

	            if (nPoint > 0) {
	                str.push(cmdStr);
	                for (var k = 0; k < nPoint; k++) {
	                    var p = points[k];

	                    m && applyTransform(p, p, m);
	                    // 不 round 会非常慢
	                    str.push(
	                        round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2),
	                        k < nPoint - 1 ? comma : ''
	                    );
	                }
	            }
	        }

	        return str.join('');
	    };

	    // Rewrite the original path method
	    Path.prototype.brushVML = function (vmlRoot) {
	        var style = this.style;

	        var vmlEl = this._vmlEl;
	        if (!vmlEl) {
	            vmlEl = vmlCore.createNode('shape');
	            initRootElStyle(vmlEl);

	            this._vmlEl = vmlEl;
	        }

	        updateFillAndStroke(vmlEl, 'fill', style, this);
	        updateFillAndStroke(vmlEl, 'stroke', style, this);

	        var m = this.transform;
	        var needTransform = m != null;
	        var strokeEl = vmlEl.getElementsByTagName('stroke')[0];
	        if (strokeEl) {
	            var lineWidth = style.lineWidth;
	            // Get the line scale.
	            // Determinant of this.m_ means how much the area is enlarged by the
	            // transformation. So its square root can be used as a scale factor
	            // for width.
	            if (needTransform && !style.strokeNoScale) {
	                var det = m[0] * m[3] - m[1] * m[2];
	                lineWidth *= sqrt(abs(det));
	            }
	            strokeEl.weight = lineWidth + 'px';
	        }

	        var path = this.path;
	        if (this.__dirtyPath) {
	            path.beginPath();
	            this.buildPath(path, this.shape);
	            path.toStatic();
	            this.__dirtyPath = false;
	        }

	        vmlEl.path = pathDataToString(path.data, this.transform);

	        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);

	        // Append to root
	        append(vmlRoot, vmlEl);

	        // Text
	        if (style.text != null) {
	            this.drawRectText(vmlRoot, this.getBoundingRect());
	        }
	        else {
	            this.removeRectText(vmlRoot);
	        }
	    };

	    Path.prototype.onRemove = function (vmlRoot) {
	        remove(vmlRoot, this._vmlEl);
	        this.removeRectText(vmlRoot);
	    };

	    Path.prototype.onAdd = function (vmlRoot) {
	        append(vmlRoot, this._vmlEl);
	        this.appendRectText(vmlRoot);
	    };

	    /***************************************************
	     * IMAGE
	     **************************************************/
	    var isImage = function (img) {
	        // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错
	        return (typeof img === 'object') && img.tagName && img.tagName.toUpperCase() === 'IMG';
	        // return img instanceof Image;
	    };

	    // Rewrite the original path method
	    ZImage.prototype.brushVML = function (vmlRoot) {
	        var style = this.style;
	        var image = style.image;

	        // Image original width, height
	        var ow;
	        var oh;

	        if (isImage(image)) {
	            var src = image.src;
	            if (src === this._imageSrc) {
	                ow = this._imageWidth;
	                oh = this._imageHeight;
	            }
	            else {
	                var imageRuntimeStyle = image.runtimeStyle;
	                var oldRuntimeWidth = imageRuntimeStyle.width;
	                var oldRuntimeHeight = imageRuntimeStyle.height;
	                imageRuntimeStyle.width = 'auto';
	                imageRuntimeStyle.height = 'auto';

	                // get the original size
	                ow = image.width;
	                oh = image.height;

	                // and remove overides
	                imageRuntimeStyle.width = oldRuntimeWidth;
	                imageRuntimeStyle.height = oldRuntimeHeight;

	                // Caching image original width, height and src
	                this._imageSrc = src;
	                this._imageWidth = ow;
	                this._imageHeight = oh;
	            }
	            image = src;
	        }
	        else {
	            if (image === this._imageSrc) {
	                ow = this._imageWidth;
	                oh = this._imageHeight;
	            }
	        }
	        if (!image) {
	            return;
	        }

	        var x = style.x || 0;
	        var y = style.y || 0;

	        var dw = style.width;
	        var dh = style.height;

	        var sw = style.sWidth;
	        var sh = style.sHeight;
	        var sx = style.sx || 0;
	        var sy = style.sy || 0;

	        var hasCrop = sw && sh;

	        var vmlEl = this._vmlEl;
	        if (!vmlEl) {
	            // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。
	            // vmlEl = vmlCore.createNode('group');
	            vmlEl = vmlCore.doc.createElement('div');
	            initRootElStyle(vmlEl);

	            this._vmlEl = vmlEl;
	        }

	        var vmlElStyle = vmlEl.style;
	        var hasRotation = false;
	        var m;
	        var scaleX = 1;
	        var scaleY = 1;
	        if (this.transform) {
	            m = this.transform;
	            scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);
	            scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);

	            hasRotation = m[1] || m[2];
	        }
	        if (hasRotation) {
	            // If filters are necessary (rotation exists), create them
	            // filters are bog-slow, so only create them if abbsolutely necessary
	            // The following check doesn't account for skews (which don't exist
	            // in the canvas spec (yet) anyway.
	            // From excanvas
	            var p0 = [x, y];
	            var p1 = [x + dw, y];
	            var p2 = [x, y + dh];
	            var p3 = [x + dw, y + dh];
	            applyTransform(p0, p0, m);
	            applyTransform(p1, p1, m);
	            applyTransform(p2, p2, m);
	            applyTransform(p3, p3, m);

	            var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);
	            var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);

	            var transformFilter = [];
	            transformFilter.push('M11=', m[0] / scaleX, comma,
	                        'M12=', m[2] / scaleY, comma,
	                        'M21=', m[1] / scaleX, comma,
	                        'M22=', m[3] / scaleY, comma,
	                        'Dx=', round(x * scaleX + m[4]), comma,
	                        'Dy=', round(y * scaleY + m[5]));

	            vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0';
	            // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用
	            vmlElStyle.filter = imageTransformPrefix + '.Matrix('
	                + transformFilter.join('') + ', SizingMethod=clip)';

	        }
	        else {
	            if (m) {
	                x = x * scaleX + m[4];
	                y = y * scaleY + m[5];
	            }
	            vmlElStyle.filter = '';
	            vmlElStyle.left = round(x) + 'px';
	            vmlElStyle.top = round(y) + 'px';
	        }

	        var imageEl = this._imageEl;
	        var cropEl = this._cropEl;

	        if (!imageEl) {
	            imageEl = vmlCore.doc.createElement('div');
	            this._imageEl = imageEl;
	        }
	        var imageELStyle = imageEl.style;
	        if (hasCrop) {
	            // Needs know image original width and height
	            if (! (ow && oh)) {
	                var tmpImage = new Image();
	                var self = this;
	                tmpImage.onload = function () {
	                    tmpImage.onload = null;
	                    ow = tmpImage.width;
	                    oh = tmpImage.height;
	                    // Adjust image width and height to fit the ratio destinationSize / sourceSize
	                    imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                    imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';

	                    // Caching image original width, height and src
	                    self._imageWidth = ow;
	                    self._imageHeight = oh;
	                    self._imageSrc = image;
	                };
	                tmpImage.src = image;
	            }
	            else {
	                imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	            }

	            if (! cropEl) {
	                cropEl = vmlCore.doc.createElement('div');
	                cropEl.style.overflow = 'hidden';
	                this._cropEl = cropEl;
	            }
	            var cropElStyle = cropEl.style;
	            cropElStyle.width = round((dw + sx * dw / sw) * scaleX);
	            cropElStyle.height = round((dh + sy * dh / sh) * scaleY);
	            cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx='
	                    + (-sx * dw / sw * scaleX) + ',Dy=' + (-sy * dh / sh * scaleY) + ')';

	            if (! cropEl.parentNode) {
	                vmlEl.appendChild(cropEl);
	            }
	            if (imageEl.parentNode != cropEl) {
	                cropEl.appendChild(imageEl);
	            }
	        }
	        else {
	            imageELStyle.width = round(scaleX * dw) + 'px';
	            imageELStyle.height = round(scaleY * dh) + 'px';

	            vmlEl.appendChild(imageEl);

	            if (cropEl && cropEl.parentNode) {
	                vmlEl.removeChild(cropEl);
	                this._cropEl = null;
	            }
	        }

	        var filterStr = '';
	        var alpha = style.opacity;
	        if (alpha < 1) {
	            filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';
	        }
	        filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';

	        imageELStyle.filter = filterStr;

	        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);

	        // Append to root
	        append(vmlRoot, vmlEl);

	        // Text
	        if (style.text != null) {
	            this.drawRectText(vmlRoot, this.getBoundingRect());
	        }
	    };

	    ZImage.prototype.onRemove = function (vmlRoot) {
	        remove(vmlRoot, this._vmlEl);

	        this._vmlEl = null;
	        this._cropEl = null;
	        this._imageEl = null;

	        this.removeRectText(vmlRoot);
	    };

	    ZImage.prototype.onAdd = function (vmlRoot) {
	        append(vmlRoot, this._vmlEl);
	        this.appendRectText(vmlRoot);
	    };


	    /***************************************************
	     * TEXT
	     **************************************************/

	    var DEFAULT_STYLE_NORMAL = 'normal';

	    var fontStyleCache = {};
	    var fontStyleCacheCount = 0;
	    var MAX_FONT_CACHE_SIZE = 100;
	    var fontEl = document.createElement('div');

	    var getFontStyle = function (fontString) {
	        var fontStyle = fontStyleCache[fontString];
	        if (!fontStyle) {
	            // Clear cache
	            if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {
	                fontStyleCacheCount = 0;
	                fontStyleCache = {};
	            }

	            var style = fontEl.style;
	            var fontFamily;
	            try {
	                style.font = fontString;
	                fontFamily = style.fontFamily.split(',')[0];
	            }
	            catch (e) {
	            }

	            fontStyle = {
	                style: style.fontStyle || DEFAULT_STYLE_NORMAL,
	                variant: style.fontVariant || DEFAULT_STYLE_NORMAL,
	                weight: style.fontWeight || DEFAULT_STYLE_NORMAL,
	                size: parseFloat(style.fontSize || 12) | 0,
	                family: fontFamily || 'Microsoft YaHei'
	            };

	            fontStyleCache[fontString] = fontStyle;
	            fontStyleCacheCount++;
	        }
	        return fontStyle;
	    };

	    var textMeasureEl;
	    // Overwrite measure text method
	    textContain.measureText = function (text, textFont) {
	        var doc = vmlCore.doc;
	        if (!textMeasureEl) {
	            textMeasureEl = doc.createElement('div');
	            textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;'
	                + 'padding:0;margin:0;border:none;white-space:pre;';
	            vmlCore.doc.body.appendChild(textMeasureEl);
	        }

	        try {
	            textMeasureEl.style.font = textFont;
	        } catch (ex) {
	            // Ignore failures to set to invalid font.
	        }
	        textMeasureEl.innerHTML = '';
	        // Don't use innerHTML or innerText because they allow markup/whitespace.
	        textMeasureEl.appendChild(doc.createTextNode(text));
	        return {
	            width: textMeasureEl.offsetWidth
	        };
	    };

	    var tmpRect = new BoundingRect();

	    var drawRectText = function (vmlRoot, rect, textRect, fromTextEl) {

	        var style = this.style;
	        var text = style.text;
	        // Convert to string
	        text != null && (text += '');
	        if (!text) {
	            return;
	        }

	        var x;
	        var y;
	        var align = style.textAlign;
	        var fontStyle = getFontStyle(style.textFont);
	        // FIXME encodeHtmlAttribute ?
	        var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' '
	            + fontStyle.size + 'px "' + fontStyle.family + '"';

	        var baseline = style.textBaseline;
	        var verticalAlign = style.textVerticalAlign;

	        textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);

	        // Transform rect to view space
	        var m = this.transform;
	        // Ignore transform for text in other element
	        if (m && !fromTextEl) {
	            tmpRect.copy(rect);
	            tmpRect.applyTransform(m);
	            rect = tmpRect;
	        }

	        if (!fromTextEl) {
	            var textPosition = style.textPosition;
	            var distance = style.textDistance;
	            // Text position represented by coord
	            if (textPosition instanceof Array) {
	                x = rect.x + parsePercent(textPosition[0], rect.width);
	                y = rect.y + parsePercent(textPosition[1], rect.height);

	                align = align || 'left';
	                baseline = baseline || 'top';
	            }
	            else {
	                var res = textContain.adjustTextPositionOnRect(
	                    textPosition, rect, textRect, distance
	                );
	                x = res.x;
	                y = res.y;

	                // Default align and baseline when has textPosition
	                align = align || res.textAlign;
	                baseline = baseline || res.textBaseline;
	            }
	        }
	        else {
	            x = rect.x;
	            y = rect.y;
	        }
	        if (verticalAlign) {
	            switch (verticalAlign) {
	                case 'middle':
	                    y -= textRect.height / 2;
	                    break;
	                case 'bottom':
	                    y -= textRect.height;
	                    break;
	                // 'top'
	            }
	            // Ignore baseline
	            baseline = 'top';
	        }

	        var fontSize = fontStyle.size;
	        // 1.75 is an arbitrary number, as there is no info about the text baseline
	        switch (baseline) {
	            case 'hanging':
	            case 'top':
	                y += fontSize / 1.75;
	                break;
	            case 'middle':
	                break;
	            default:
	            // case null:
	            // case 'alphabetic':
	            // case 'ideographic':
	            // case 'bottom':
	                y -= fontSize / 2.25;
	                break;
	        }
	        switch (align) {
	            case 'left':
	                break;
	            case 'center':
	                x -= textRect.width / 2;
	                break;
	            case 'right':
	                x -= textRect.width;
	                break;
	            // case 'end':
	                // align = elementStyle.direction == 'ltr' ? 'right' : 'left';
	                // break;
	            // case 'start':
	                // align = elementStyle.direction == 'rtl' ? 'right' : 'left';
	                // break;
	            // default:
	            //     align = 'left';
	        }

	        var createNode = vmlCore.createNode;

	        var textVmlEl = this._textVmlEl;
	        var pathEl;
	        var textPathEl;
	        var skewEl;
	        if (!textVmlEl) {
	            textVmlEl = createNode('line');
	            pathEl = createNode('path');
	            textPathEl = createNode('textpath');
	            skewEl = createNode('skew');

	            // FIXME Why here is not cammel case
	            // Align 'center' seems wrong
	            textPathEl.style['v-text-align'] = 'left';

	            initRootElStyle(textVmlEl);

	            pathEl.textpathok = true;
	            textPathEl.on = true;

	            textVmlEl.from = '0 0';
	            textVmlEl.to = '1000 0.05';

	            append(textVmlEl, skewEl);
	            append(textVmlEl, pathEl);
	            append(textVmlEl, textPathEl);

	            this._textVmlEl = textVmlEl;
	        }
	        else {
	            // 这里是在前面 appendChild 保证顺序的前提下
	            skewEl = textVmlEl.firstChild;
	            pathEl = skewEl.nextSibling;
	            textPathEl = pathEl.nextSibling;
	        }

	        var coords = [x, y];
	        var textVmlElStyle = textVmlEl.style;
	        // Ignore transform for text in other element
	        if (m && fromTextEl) {
	            applyTransform(coords, coords, m);

	            skewEl.on = true;

	            skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma +
	            m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0';

	            // Text position
	            skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0);
	            // Left top point as origin
	            skewEl.origin = '0 0';

	            textVmlElStyle.left = '0px';
	            textVmlElStyle.top = '0px';
	        }
	        else {
	            skewEl.on = false;
	            textVmlElStyle.left = round(x) + 'px';
	            textVmlElStyle.top = round(y) + 'px';
	        }

	        textPathEl.string = encodeHtmlAttribute(text);
	        // TODO
	        try {
	            textPathEl.style.font = font;
	        }
	        // Error font format
	        catch (e) {}

	        updateFillAndStroke(textVmlEl, 'fill', {
	            fill: fromTextEl ? style.fill : style.textFill,
	            opacity: style.opacity
	        }, this);
	        updateFillAndStroke(textVmlEl, 'stroke', {
	            stroke: fromTextEl ? style.stroke : style.textStroke,
	            opacity: style.opacity,
	            lineDash: style.lineDash
	        }, this);

	        textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);

	        // Attached to root
	        append(vmlRoot, textVmlEl);
	    };

	    var removeRectText = function (vmlRoot) {
	        remove(vmlRoot, this._textVmlEl);
	        this._textVmlEl = null;
	    };

	    var appendRectText = function (vmlRoot) {
	        append(vmlRoot, this._textVmlEl);
	    };

	    var list = [RectText, Displayable, ZImage, Path, Text];

	    // In case Displayable has been mixed in RectText
	    for (var i = 0; i < list.length; i++) {
	        var proto = list[i].prototype;
	        proto.drawRectText = drawRectText;
	        proto.removeRectText = removeRectText;
	        proto.appendRectText = appendRectText;
	    }

	    Text.prototype.brushVML = function (vmlRoot) {
	        var style = this.style;
	        if (style.text != null) {
	            this.drawRectText(vmlRoot, {
	                x: style.x || 0, y: style.y || 0,
	                width: 0, height: 0
	            }, this.getBoundingRect(), true);
	        }
	        else {
	            this.removeRectText(vmlRoot);
	        }
	    };

	    Text.prototype.onRemove = function (vmlRoot) {
	        this.removeRectText(vmlRoot);
	    };

	    Text.prototype.onAdd = function (vmlRoot) {
	        this.appendRectText(vmlRoot);
	    };
	}


/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	

	if (!__webpack_require__(241).canvasSupported) {
	    var urn = 'urn:schemas-microsoft-com:vml';

	    var createNode;
	    var win = window;
	    var doc = win.document;

	    var vmlInited = false;

	    try {
	        !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);
	        createNode = function (tagName) {
	            return doc.createElement('<zrvml:' + tagName + ' class="zrvml">');
	        };
	    }
	    catch (e) {
	        createNode = function (tagName) {
	            return doc.createElement('<' + tagName + ' xmlns="' + urn + '" class="zrvml">');
	        };
	    }

	    // From raphael
	    var initVML = function () {
	        if (vmlInited) {
	            return;
	        }
	        vmlInited = true;

	        var styleSheets = doc.styleSheets;
	        if (styleSheets.length < 31) {
	            doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');
	        }
	        else {
	            // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
	            styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');
	        }
	    };

	    // Not useing return to avoid error when converting to CommonJS module
	    module.exports = {
	        doc: doc,
	        initVML: initVML,
	        createNode: createNode
	    };
	}


/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * VML Painter.
	 *
	 * @module zrender/vml/Painter
	 */



	    var zrLog = __webpack_require__(279);
	    var vmlCore = __webpack_require__(631);

	    function parseInt10(val) {
	        return parseInt(val, 10);
	    }

	    /**
	     * @alias module:zrender/vml/Painter
	     */
	    function VMLPainter(root, storage) {

	        vmlCore.initVML();

	        this.root = root;

	        this.storage = storage;

	        var vmlViewport = document.createElement('div');

	        var vmlRoot = document.createElement('div');

	        vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';

	        vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';

	        root.appendChild(vmlViewport);

	        this._vmlRoot = vmlRoot;
	        this._vmlViewport = vmlViewport;

	        this.resize();

	        // Modify storage
	        var oldDelFromMap = storage.delFromMap;
	        var oldAddToMap = storage.addToMap;
	        storage.delFromMap = function (elId) {
	            var el = storage.get(elId);

	            oldDelFromMap.call(storage, elId);

	            if (el) {
	                el.onRemove && el.onRemove(vmlRoot);
	            }
	        };

	        storage.addToMap = function (el) {
	            // Displayable already has a vml node
	            el.onAdd && el.onAdd(vmlRoot);

	            oldAddToMap.call(storage, el);
	        };

	        this._firstPaint = true;
	    }

	    VMLPainter.prototype = {

	        constructor: VMLPainter,

	        /**
	         * @return {HTMLDivElement}
	         */
	        getViewportRoot: function () {
	            return this._vmlViewport;
	        },

	        /**
	         * 刷新
	         */
	        refresh: function () {

	            var list = this.storage.getDisplayList(true, true);

	            this._paintList(list);
	        },

	        _paintList: function (list) {
	            var vmlRoot = this._vmlRoot;
	            for (var i = 0; i < list.length; i++) {
	                var el = list[i];
	                if (el.invisible || el.ignore) {
	                    if (!el.__alreadyNotVisible) {
	                        el.onRemove(vmlRoot);
	                    }
	                    // Set as already invisible
	                    el.__alreadyNotVisible = true;
	                }
	                else {
	                    if (el.__alreadyNotVisible) {
	                        el.onAdd(vmlRoot);
	                    }
	                    el.__alreadyNotVisible = false;
	                    if (el.__dirty) {
	                        el.beforeBrush && el.beforeBrush();
	                        (el.brushVML || el.brush).call(el, vmlRoot);
	                        el.afterBrush && el.afterBrush();
	                    }
	                }
	                el.__dirty = false;
	            }

	            if (this._firstPaint) {
	                // Detached from document at first time
	                // to avoid page refreshing too many times

	                // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变
	                this._vmlViewport.appendChild(vmlRoot);
	                this._firstPaint = false;
	            }
	        },

	        resize: function (width, height) {
	            var width = width == null ? this._getWidth() : width;
	            var height = height == null ? this._getHeight() : height;

	            if (this._width != width || this._height != height) {
	                this._width = width;
	                this._height = height;

	                var vmlViewportStyle = this._vmlViewport.style;
	                vmlViewportStyle.width = width + 'px';
	                vmlViewportStyle.height = height + 'px';
	            }
	        },

	        dispose: function () {
	            this.root.innerHTML = '';

	            this._vmlRoot =
	            this._vmlViewport =
	            this.storage = null;
	        },

	        getWidth: function () {
	            return this._width;
	        },

	        getHeight: function () {
	            return this._height;
	        },

	        clear: function () {
	            if (this._vmlViewport) {
	                this.root.removeChild(this._vmlViewport);
	            }
	        },

	        _getWidth: function () {
	            var root = this.root;
	            var stl = root.currentStyle;

	            return ((root.clientWidth || parseInt10(stl.width))
	                    - parseInt10(stl.paddingLeft)
	                    - parseInt10(stl.paddingRight)) | 0;
	        },

	        _getHeight: function () {
	            var root = this.root;
	            var stl = root.currentStyle;

	            return ((root.clientHeight || parseInt10(stl.height))
	                    - parseInt10(stl.paddingTop)
	                    - parseInt10(stl.paddingBottom)) | 0;
	        }
	    };

	    // Not supported methods
	    function createMethodNotSupport(method) {
	        return function () {
	            zrLog('In IE8.0 VML mode painter not support method "' + method + '"');
	        };
	    }

	    var notSupportedMethods = [
	        'getLayer', 'insertLayer', 'eachLayer', 'eachBuildinLayer', 'eachOtherLayer', 'getLayers',
	        'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'
	    ];

	    for (var i = 0; i < notSupportedMethods.length; i++) {
	        var name = notSupportedMethods[i];
	        VMLPainter.prototype[name] = createMethodNotSupport(name);
	    }

	    module.exports = VMLPainter;


/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _echarts = __webpack_require__(239);

	var _echarts2 = _interopRequireDefault(_echarts);

	var _home = __webpack_require__(234);

	var _home2 = _interopRequireDefault(_home);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Lesson2 = function (_Component) {
	    _inherits(Lesson2, _Component);

	    function Lesson2() {
	        _classCallCheck(this, Lesson2);

	        return _possibleConstructorReturn(this, (Lesson2.__proto__ || Object.getPrototypeOf(Lesson2)).apply(this, arguments));
	    }

	    _createClass(Lesson2, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var myChart = _echarts2.default.init(this.refs.lesson2);
	            var option = {
	                title: {
	                    text: '安远一中历年一本率',
	                    subtext: '数据是我瞎编的'
	                },
	                tooltip: {
	                    trigger: 'axis',
	                    axisPointer: {
	                        type: 'shadow'
	                    }
	                },
	                legend: {
	                    data: ['文科', '理科']
	                },
	                grid: {
	                    left: '3%',
	                    right: '4%',
	                    bottom: '3%',
	                    containLabel: true
	                },
	                xAxis: {
	                    type: 'value',
	                    boundaryGap: [0, 0.01]
	                },
	                yAxis: {
	                    type: 'category',
	                    data: ['2011年', '2012年', '2013年', '2014年', '2015年', '2016年']
	                },
	                series: [{
	                    name: '文科',
	                    type: 'bar',
	                    data: [0.27, 0.31, 0.29, 0.41, 0.34, 0.37],
	                    itemStyle: {
	                        normal: {
	                            color: '#ccc'
	                        }
	                    }
	                }, {
	                    name: '理科',
	                    type: 'bar',
	                    data: [0.31, 0.35, 0.38, 0.45, 0.39, 0.41],
	                    itemStyle: {
	                        normal: {
	                            color: '#69f'
	                        }
	                    }
	                }]
	            };
	            myChart.setOption(option);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('div', { className: _home2.default.lesson, ref: 'lesson2' });
	        }
	    }]);

	    return Lesson2;
	}(_react.Component);

	exports.default = Lesson2;

/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _echarts = __webpack_require__(239);

	var _echarts2 = _interopRequireDefault(_echarts);

	var _home = __webpack_require__(234);

	var _home2 = _interopRequireDefault(_home);

	var _ne_110m_admin_0_countries = __webpack_require__(635);

	var _ne_110m_admin_0_countries2 = _interopRequireDefault(_ne_110m_admin_0_countries);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Lesson3 = function (_Component) {
	    _inherits(Lesson3, _Component);

	    function Lesson3() {
	        _classCallCheck(this, Lesson3);

	        return _possibleConstructorReturn(this, (Lesson3.__proto__ || Object.getPrototypeOf(Lesson3)).apply(this, arguments));
	    }

	    _createClass(Lesson3, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var myChart = _echarts2.default.init(this.refs.lesson3);
	            _echarts2.default.registerMap('lesson3', _ne_110m_admin_0_countries2.default);
	            myChart.setOption({
	                series: [{
	                    type: 'map',
	                    map: 'lesson3'
	                }]
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('div', { className: _home2.default.lesson, ref: 'lesson3' });
	        }
	    }]);

	    return Lesson3;
	}(_react.Component);

	exports.default = Lesson3;

/***/ },
/* 635 */
/***/ function(module, exports) {

	module.exports = {
		"type": "FeatureCollection",
		"features": [
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								61.210817091725744,
								35.650072333309225
							],
							[
								62.230651483005886,
								35.270663967422294
							],
							[
								62.98466230657661,
								35.40404083916762
							],
							[
								63.19353844590035,
								35.857165635718914
							],
							[
								63.98289594915871,
								36.0079574651466
							],
							[
								64.5464791197339,
								36.31207326918427
							],
							[
								64.7461051776774,
								37.111817735333304
							],
							[
								65.58894778835784,
								37.30521678318564
							],
							[
								65.74563073106683,
								37.66116404881207
							],
							[
								66.21738488145934,
								37.39379018813392
							],
							[
								66.51860680528867,
								37.36278432875879
							],
							[
								67.07578209825962,
								37.35614390720929
							],
							[
								67.82999962755952,
								37.144994004864685
							],
							[
								68.13556237170138,
								37.02311513930431
							],
							[
								68.85944583524594,
								37.344335842430596
							],
							[
								69.19627282092438,
								37.15114350030743
							],
							[
								69.51878543485796,
								37.60899669041342
							],
							[
								70.11657840361033,
								37.58822276463209
							],
							[
								70.27057417184014,
								37.735164699854025
							],
							[
								70.3763041523093,
								38.13839590102752
							],
							[
								70.80682050973289,
								38.486281643216415
							],
							[
								71.34813113799026,
								38.25890534113216
							],
							[
								71.23940392444817,
								37.953265082341886
							],
							[
								71.54191775908478,
								37.905774441065645
							],
							[
								71.44869347523024,
								37.06564484308052
							],
							[
								71.8446382994506,
								36.73817129164692
							],
							[
								72.1930408059624,
								36.948287665345674
							],
							[
								72.63688968291729,
								37.047558091778356
							],
							[
								73.26005577992501,
								37.495256862939
							],
							[
								73.9486959166465,
								37.4215662704908
							],
							[
								74.98000247589542,
								37.419990139305895
							],
							[
								75.15802778514092,
								37.13303091078912
							],
							[
								74.57589277537298,
								37.02084137628346
							],
							[
								74.06755171091783,
								36.83617564548845
							],
							[
								72.92002485544447,
								36.72000702569632
							],
							[
								71.84629194528392,
								36.50994232842986
							],
							[
								71.26234826038575,
								36.074387518857804
							],
							[
								71.49876793812109,
								35.650563259416
							],
							[
								71.61307620635071,
								35.153203436822864
							],
							[
								71.11501875192164,
								34.733125718722235
							],
							[
								71.15677330921346,
								34.34891144463215
							],
							[
								70.8818030129884,
								33.98885590263852
							],
							[
								69.9305432473596,
								34.02012014417511
							],
							[
								70.3235941913716,
								33.35853261975839
							],
							[
								69.68714725126486,
								33.105498969041236
							],
							[
								69.26252200712256,
								32.5019440780883
							],
							[
								69.31776411324256,
								31.901412258424443
							],
							[
								68.92667687365767,
								31.620189113892067
							],
							[
								68.55693200060932,
								31.713310044882018
							],
							[
								67.79268924344478,
								31.58293040620963
							],
							[
								67.68339358914747,
								31.30315420178142
							],
							[
								66.93889122911847,
								31.304911200479353
							],
							[
								66.38145755398602,
								30.738899237586452
							],
							[
								66.34647260932442,
								29.887943427036177
							],
							[
								65.0468620136161,
								29.472180691031905
							],
							[
								64.35041873561852,
								29.560030625928093
							],
							[
								64.14800215033125,
								29.340819200145972
							],
							[
								63.55026085801117,
								29.468330796826166
							],
							[
								62.54985680527278,
								29.31857249604431
							],
							[
								60.87424848820879,
								29.829238999952608
							],
							[
								61.781221551363444,
								30.735850328081238
							],
							[
								61.69931440618083,
								31.379506130492672
							],
							[
								60.94194461451113,
								31.548074652628753
							],
							[
								60.863654819588966,
								32.18291962333443
							],
							[
								60.536077915290775,
								32.98126882581157
							],
							[
								60.963700392506006,
								33.52883230237626
							],
							[
								60.52842980331158,
								33.676446031218006
							],
							[
								60.80319339380745,
								34.40410187431986
							],
							[
								61.210817091725744,
								35.650072333309225
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Afghanistan",
					"sov_a3": "AFG",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Afghanistan",
					"adm0_a3": "AFG",
					"geou_dif": 0,
					"geounit": "Afghanistan",
					"gu_a3": "AFG",
					"su_dif": 0,
					"subunit": "Afghanistan",
					"su_a3": "AFG",
					"brk_diff": 0,
					"name": "Afghanistan",
					"name_long": "Afghanistan",
					"brk_a3": "AFG",
					"brk_name": "Afghanistan",
					"brk_group": "",
					"abbrev": "Afg.",
					"postal": "AF",
					"formal_en": "Islamic State of Afghanistan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Afghanistan",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 6,
					"mapcolor9": 8,
					"mapcolor13": 7,
					"pop_est": 28400000,
					"gdp_md_est": 22270,
					"pop_year": -99,
					"lastcensus": 1979,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AF",
					"iso_a3": "AFG",
					"iso_n3": "004",
					"un_a3": "004",
					"wb_a2": "AF",
					"wb_a3": "AFG",
					"woe_id": -99,
					"adm0_a3_is": "AFG",
					"adm0_a3_us": "AFG",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Southern Asia",
					"region_wb": "South Asia",
					"name_len": 11,
					"long_len": 11,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									16.326528354567046,
									-5.877470391466218
								],
								[
									16.573179965896145,
									-6.622644545115094
								],
								[
									16.86019087084523,
									-7.222297865429979
								],
								[
									17.08999596524717,
									-7.545688978712477
								],
								[
									17.472970004962292,
									-8.068551120641658
								],
								[
									18.13422163256905,
									-7.987677504104866
								],
								[
									18.464175652752687,
									-7.847014255406478
								],
								[
									19.01675174324967,
									-7.9882459448601395
								],
								[
									19.166613396896082,
									-7.738183688999726
								],
								[
									19.417502475673217,
									-7.155428562044278
								],
								[
									20.037723016040218,
									-7.11636117923166
								],
								[
									20.09162153492062,
									-6.943090101756951
								],
								[
									20.601822950938327,
									-6.939317722199689
								],
								[
									20.51474816252653,
									-7.299605808138665
								],
								[
									21.728110792739756,
									-7.290872491081316
								],
								[
									21.746455926203367,
									-7.920084730667114
								],
								[
									21.94913089365204,
									-8.305900974158305
								],
								[
									21.801801385187957,
									-8.908706556842986
								],
								[
									21.875181919042404,
									-9.523707777548566
								],
								[
									22.208753289486424,
									-9.89479623783653
								],
								[
									22.155268182064333,
									-11.084801120653779
								],
								[
									22.402798292742432,
									-10.993075453335692
								],
								[
									22.83734541188477,
									-11.017621758674338
								],
								[
									23.45679080576747,
									-10.867863457892483
								],
								[
									23.912215203555746,
									-10.926826267137542
								],
								[
									24.017893507592618,
									-11.237298272347118
								],
								[
									23.90415368011824,
									-11.722281589406336
								],
								[
									24.079905226342902,
									-12.191296888887308
								],
								[
									23.930922072045377,
									-12.565847670138822
								],
								[
									24.016136508894704,
									-12.911046237848552
								],
								[
									21.933886346125945,
									-12.898437188369357
								],
								[
									21.887842644953878,
									-16.080310153876894
								],
								[
									22.56247846852429,
									-16.898451429921835
								],
								[
									23.215048455506093,
									-17.523116143465955
								],
								[
									21.377176141045595,
									-17.93063648851971
								],
								[
									18.95618696460363,
									-17.789094740472237
								],
								[
									18.26330936043422,
									-17.309950860262006
								],
								[
									14.209706658595053,
									-17.353100681225712
								],
								[
									14.058501417709039,
									-17.423380629142656
								],
								[
									13.462362094789967,
									-16.971211846588744
								],
								[
									12.814081251688407,
									-16.941342868724078
								],
								[
									12.215461460019384,
									-17.111668389558062
								],
								[
									11.73419884608515,
									-17.3018893368245
								],
								[
									11.64009606288161,
									-16.67314218512921
								],
								[
									11.778537224991567,
									-15.79381601325069
								],
								[
									12.123580763404448,
									-14.878316338767931
								],
								[
									12.175618930722266,
									-14.449143568583892
								],
								[
									12.500095249083017,
									-13.547699883684402
								],
								[
									12.738478631245442,
									-13.137905775609937
								],
								[
									13.312913852601838,
									-12.483630466362513
								],
								[
									13.633721144269828,
									-12.038644707897191
								],
								[
									13.738727654686926,
									-11.297863050993143
								],
								[
									13.686379428775297,
									-10.731075941615842
								],
								[
									13.387327915102162,
									-10.373578383020728
								],
								[
									13.120987583069876,
									-9.766897067914115
								],
								[
									12.875369500386569,
									-9.16693368900549
								],
								[
									12.929061313537801,
									-8.959091078327575
								],
								[
									13.236432732809874,
									-8.562629489784342
								],
								[
									12.933040398824318,
									-7.596538588087753
								],
								[
									12.72829837408392,
									-6.927122084178805
								],
								[
									12.227347039446443,
									-6.294447523629373
								],
								[
									12.322431674863566,
									-6.100092461779653
								],
								[
									12.735171339578699,
									-5.965682061388478
								],
								[
									13.02486941900699,
									-5.984388929878108
								],
								[
									13.375597364971895,
									-5.864241224799557
								],
								[
									16.326528354567046,
									-5.877470391466218
								]
							]
						],
						[
							[
								[
									12.436688266660923,
									-5.684303887559224
								],
								[
									12.18233686692028,
									-5.789930515163803
								],
								[
									11.914963006242118,
									-5.037986748884734
								],
								[
									12.318607618873926,
									-4.606230157086159
								],
								[
									12.62075971848455,
									-4.438023369976122
								],
								[
									12.995517205465205,
									-4.781103203961919
								],
								[
									12.631611769265845,
									-4.991271254092936
								],
								[
									12.468004184629763,
									-5.248361504744992
								],
								[
									12.436688266660923,
									-5.684303887559224
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Angola",
					"sov_a3": "AGO",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Angola",
					"adm0_a3": "AGO",
					"geou_dif": 0,
					"geounit": "Angola",
					"gu_a3": "AGO",
					"su_dif": 0,
					"subunit": "Angola",
					"su_a3": "AGO",
					"brk_diff": 0,
					"name": "Angola",
					"name_long": "Angola",
					"brk_a3": "AGO",
					"brk_name": "Angola",
					"brk_group": "",
					"abbrev": "Ang.",
					"postal": "AO",
					"formal_en": "People's Republic of Angola",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Angola",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 2,
					"mapcolor9": 6,
					"mapcolor13": 1,
					"pop_est": 12799293,
					"gdp_md_est": 110300,
					"pop_year": -99,
					"lastcensus": 1970,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AO",
					"iso_a3": "AGO",
					"iso_n3": "024",
					"un_a3": "024",
					"wb_a2": "AO",
					"wb_a3": "AGO",
					"woe_id": -99,
					"adm0_a3_is": "AGO",
					"adm0_a3_us": "AGO",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Middle Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								21.0200403174764,
								40.84272695572588
							],
							[
								20.999989861747224,
								40.58000397395398
							],
							[
								20.674996779063633,
								40.43499990494303
							],
							[
								20.615000441172754,
								40.11000682225938
							],
							[
								20.15001590341052,
								39.62499766698397
							],
							[
								19.980000441170148,
								39.69499339452341
							],
							[
								19.960001661873207,
								39.91500580500605
							],
							[
								19.406081984136733,
								40.250773423822466
							],
							[
								19.319058872157143,
								40.72723012955356
							],
							[
								19.40354983895429,
								41.40956574153546
							],
							[
								19.540027296637106,
								41.71998607031276
							],
							[
								19.37176883309496,
								41.877547512370654
							],
							[
								19.304486118250793,
								42.19574514420782
							],
							[
								19.73805138517963,
								42.68824738216557
							],
							[
								19.801613396898688,
								42.50009349219084
							],
							[
								20.070700000000045,
								42.58863000000008
							],
							[
								20.283754510181893,
								42.32025950781508
							],
							[
								20.522950000000037,
								42.21787000000006
							],
							[
								20.59024743010491,
								41.855404161133606
							],
							[
								20.463175083099202,
								41.51508901627534
							],
							[
								20.605181919037364,
								41.086226304685226
							],
							[
								21.0200403174764,
								40.84272695572588
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Albania",
					"sov_a3": "ALB",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Albania",
					"adm0_a3": "ALB",
					"geou_dif": 0,
					"geounit": "Albania",
					"gu_a3": "ALB",
					"su_dif": 0,
					"subunit": "Albania",
					"su_a3": "ALB",
					"brk_diff": 0,
					"name": "Albania",
					"name_long": "Albania",
					"brk_a3": "ALB",
					"brk_name": "Albania",
					"brk_group": "",
					"abbrev": "Alb.",
					"postal": "AL",
					"formal_en": "Republic of Albania",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Albania",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 1,
					"mapcolor13": 6,
					"pop_est": 3639453,
					"gdp_md_est": 21810,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AL",
					"iso_a3": "ALB",
					"iso_n3": "008",
					"un_a3": "008",
					"wb_a2": "AL",
					"wb_a3": "ALB",
					"woe_id": -99,
					"adm0_a3_is": "ALB",
					"adm0_a3_us": "ALB",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								51.57951867046327,
								24.245497137951105
							],
							[
								51.757440626844186,
								24.29407298430547
							],
							[
								51.79438927593287,
								24.019826158132506
							],
							[
								52.57708051942561,
								24.177439276622707
							],
							[
								53.404006788960146,
								24.15131684009917
							],
							[
								54.00800092958758,
								24.121757920828216
							],
							[
								54.69302371604863,
								24.79789236093509
							],
							[
								55.43902469261414,
								25.43914520924494
							],
							[
								56.07082075381456,
								26.05546417897398
							],
							[
								56.261041701080956,
								25.71460643157677
							],
							[
								56.396847365144005,
								24.924732163995486
							],
							[
								55.88623253766801,
								24.920830593357447
							],
							[
								55.804118686756226,
								24.269604193615265
							],
							[
								55.98121382022046,
								24.13054291431783
							],
							[
								55.52863162620824,
								23.933604030853502
							],
							[
								55.525841098864475,
								23.524869289640932
							],
							[
								55.234489373602884,
								23.110992743415324
							],
							[
								55.208341098863194,
								22.708329982997046
							],
							[
								55.006803012924905,
								22.496947536707136
							],
							[
								52.000733270074335,
								23.00115448657894
							],
							[
								51.61770755392698,
								24.01421926522883
							],
							[
								51.57951867046327,
								24.245497137951105
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "United Arab Emirates",
					"sov_a3": "ARE",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "United Arab Emirates",
					"adm0_a3": "ARE",
					"geou_dif": 0,
					"geounit": "United Arab Emirates",
					"gu_a3": "ARE",
					"su_dif": 0,
					"subunit": "United Arab Emirates",
					"su_a3": "ARE",
					"brk_diff": 0,
					"name": "United Arab Emirates",
					"name_long": "United Arab Emirates",
					"brk_a3": "ARE",
					"brk_name": "United Arab Emirates",
					"brk_group": "",
					"abbrev": "U.A.E.",
					"postal": "AE",
					"formal_en": "United Arab Emirates",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "United Arab Emirates",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 1,
					"mapcolor9": 3,
					"mapcolor13": 3,
					"pop_est": 4798491,
					"gdp_md_est": 184300,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AE",
					"iso_a3": "ARE",
					"iso_n3": "784",
					"un_a3": "784",
					"wb_a2": "AE",
					"wb_a3": "ARE",
					"woe_id": -99,
					"adm0_a3_is": "ARE",
					"adm0_a3_us": "ARE",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 20,
					"long_len": 20,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									-66.95992000000004,
									-54.896809999999974
								],
								[
									-67.56244000000001,
									-54.87000999999996
								],
								[
									-68.63334999999998,
									-54.869499999999945
								],
								[
									-68.63401022758316,
									-52.63637045887446
								],
								[
									-68.25,
									-53.099999999999966
								],
								[
									-67.75000000000003,
									-53.849999999999994
								],
								[
									-66.45000000000002,
									-54.45000000000002
								],
								[
									-65.05000000000001,
									-54.69999999999997
								],
								[
									-65.50000000000003,
									-55.19999999999996
								],
								[
									-66.45000000000002,
									-55.25000000000002
								],
								[
									-66.95992000000004,
									-54.896809999999974
								]
							]
						],
						[
							[
								[
									-68.57154537624135,
									-52.29944385534626
								],
								[
									-69.49836218939609,
									-52.14276091263725
								],
								[
									-71.91480383979635,
									-52.009022305865926
								],
								[
									-72.32940385607404,
									-51.42595631287241
								],
								[
									-72.30997351753237,
									-50.677009779666356
								],
								[
									-72.97574683296463,
									-50.74145029073431
								],
								[
									-73.32805091011448,
									-50.37878508890987
								],
								[
									-73.41543575712004,
									-49.31843637471296
								],
								[
									-72.64824744331494,
									-48.87861825947679
								],
								[
									-72.33116085477195,
									-48.244238376661826
								],
								[
									-72.44735531278027,
									-47.73853281025353
								],
								[
									-71.91725847033021,
									-46.8848381487918
								],
								[
									-71.55200944689125,
									-45.56073292417713
								],
								[
									-71.65931555854533,
									-44.97368865334144
								],
								[
									-71.22277889675973,
									-44.784242852559416
								],
								[
									-71.32980078803621,
									-44.40752166115169
								],
								[
									-71.79362260607195,
									-44.20717213315611
								],
								[
									-71.46405615913051,
									-43.78761117937833
								],
								[
									-71.91542395698391,
									-43.40856454851742
								],
								[
									-72.14889807807853,
									-42.25488819760139
								],
								[
									-71.74680375841547,
									-42.051386407235995
								],
								[
									-71.91573401557756,
									-40.83233936947073
								],
								[
									-71.68076127794646,
									-39.80816415787807
								],
								[
									-71.41351660834906,
									-38.916022230791114
								],
								[
									-70.81466427273472,
									-38.55299529394074
								],
								[
									-71.11862504747543,
									-37.5768274879472
								],
								[
									-71.1218806627098,
									-36.65812387466234
								],
								[
									-70.36476925320167,
									-36.005088799789945
								],
								[
									-70.3880494859491,
									-35.16968759535945
								],
								[
									-69.81730912950147,
									-34.193571465798286
								],
								[
									-69.81477698431922,
									-33.27388600029985
								],
								[
									-70.07439938015364,
									-33.09120981214804
								],
								[
									-70.53506893581945,
									-31.36501026787029
								],
								[
									-69.91900834825194,
									-30.336339206668313
								],
								[
									-70.01355038112987,
									-29.36792286551855
								],
								[
									-69.65613033718316,
									-28.459141127233693
								],
								[
									-69.00123491074828,
									-27.521213881136134
								],
								[
									-68.2955415513704,
									-26.89933969493579
								],
								[
									-68.59479977077268,
									-26.506908868111267
								],
								[
									-68.38600114609736,
									-26.185016371365236
								],
								[
									-68.41765296087613,
									-24.518554782816878
								],
								[
									-67.32844295924414,
									-24.025303236590915
								],
								[
									-66.98523393417764,
									-22.98634856536283
								],
								[
									-67.10667355006362,
									-22.7359245744764
								],
								[
									-66.27333940292485,
									-21.832310479420684
								],
								[
									-64.96489213729458,
									-22.07586150481235
								],
								[
									-64.37702104354227,
									-22.798091322523547
								],
								[
									-63.98683814152247,
									-21.993644301035957
								],
								[
									-62.846468471921554,
									-22.034985446869456
								],
								[
									-62.6850571356579,
									-22.249029229422405
								],
								[
									-60.84656470400995,
									-23.880712579038303
								],
								[
									-60.028966030503994,
									-24.032796319273245
								],
								[
									-58.80712846539495,
									-24.771459242453275
								],
								[
									-57.77721716981796,
									-25.16233977630904
								],
								[
									-57.63366004091114,
									-25.60365650808167
								],
								[
									-58.61817359071972,
									-27.123718763947124
								],
								[
									-57.60975969097615,
									-27.395898532828426
								],
								[
									-56.486701626192996,
									-27.54849903738625
								],
								[
									-55.6958455063982,
									-27.38783700939082
								],
								[
									-54.78879492859505,
									-26.62178557709609
								],
								[
									-54.625290696823555,
									-25.739255466415486
								],
								[
									-54.13004960795442,
									-25.54763925547725
								],
								[
									-53.62834896504873,
									-26.124865004177437
								],
								[
									-53.64873531758789,
									-26.92347258881611
								],
								[
									-54.49072526713553,
									-27.47475676850577
								],
								[
									-55.1622863429846,
									-27.88191537853342
								],
								[
									-56.2908996242391,
									-28.852760512000856
								],
								[
									-57.62513342958292,
									-30.216294854454247
								],
								[
									-57.87493730328191,
									-31.016556084926165
								],
								[
									-58.14244035504075,
									-32.04450367607619
								],
								[
									-58.13264767112142,
									-33.040566908502015
								],
								[
									-58.34961117209883,
									-33.263188978815435
								],
								[
									-58.42707414410438,
									-33.90945444105755
								],
								[
									-58.49544206402655,
									-34.43148976007011
								],
								[
									-57.225829637263644,
									-35.28802662530789
								],
								[
									-57.36235877137875,
									-35.977390232081504
								],
								[
									-56.73748735210546,
									-36.41312590916658
								],
								[
									-56.788285285048346,
									-36.901571547189334
								],
								[
									-57.74915686708343,
									-38.183870538079915
								],
								[
									-59.23185706240187,
									-38.720220228837206
								],
								[
									-61.237445237865614,
									-38.928424574541154
								],
								[
									-62.33595699731015,
									-38.82770720800437
								],
								[
									-62.12576310896293,
									-39.424104913084875
								],
								[
									-62.330530971919444,
									-40.17258635840032
								],
								[
									-62.14599443220524,
									-40.67689666113674
								],
								[
									-62.74580278181699,
									-41.02876148861209
								],
								[
									-63.770494757732536,
									-41.166789239263665
								],
								[
									-64.73208980981971,
									-40.802677097335135
								],
								[
									-65.11803524439159,
									-41.06431487402888
								],
								[
									-64.97856055363584,
									-42.058000990569326
								],
								[
									-64.30340796574248,
									-42.3590162086695
								],
								[
									-63.75594784204236,
									-42.04368661882451
								],
								[
									-63.45805904809589,
									-42.56313811622236
								],
								[
									-64.3788038804563,
									-42.873558444999645
								],
								[
									-65.1818039618397,
									-43.495380954767796
								],
								[
									-65.32882341171015,
									-44.501366062193696
								],
								[
									-65.5652689276616,
									-45.036785577169795
								],
								[
									-66.50996578638936,
									-45.03962778094585
								],
								[
									-67.29379391139244,
									-45.5518962542552
								],
								[
									-67.58054643418009,
									-46.30177296324254
								],
								[
									-66.59706641301727,
									-47.03392465595381
								],
								[
									-65.64102657740145,
									-47.236134535511894
								],
								[
									-65.98508826360074,
									-48.13328907653114
								],
								[
									-67.16617896184766,
									-48.697337334996945
								],
								[
									-67.81608761256646,
									-49.86966887797042
								],
								[
									-68.72874508327317,
									-50.26421843851887
								],
								[
									-69.1385391913478,
									-50.7325102679478
								],
								[
									-68.81556148952353,
									-51.771104011594105
								],
								[
									-68.14999487982041,
									-52.349983406127706
								],
								[
									-68.57154537624135,
									-52.29944385534626
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Argentina",
					"sov_a3": "ARG",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Argentina",
					"adm0_a3": "ARG",
					"geou_dif": 0,
					"geounit": "Argentina",
					"gu_a3": "ARG",
					"su_dif": 0,
					"subunit": "Argentina",
					"su_a3": "ARG",
					"brk_diff": 0,
					"name": "Argentina",
					"name_long": "Argentina",
					"brk_a3": "ARG",
					"brk_name": "Argentina",
					"brk_group": "",
					"abbrev": "Arg.",
					"postal": "AR",
					"formal_en": "Argentine Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Argentina",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 1,
					"mapcolor9": 3,
					"mapcolor13": 13,
					"pop_est": 40913584,
					"gdp_md_est": 573900,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AR",
					"iso_a3": "ARG",
					"iso_n3": "032",
					"un_a3": "032",
					"wb_a2": "AR",
					"wb_a3": "ARG",
					"woe_id": -99,
					"adm0_a3_is": "ARG",
					"adm0_a3_us": "ARG",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								43.58274580259273,
								41.09214325618257
							],
							[
								44.97248009621808,
								41.248128567055595
							],
							[
								45.17949588397934,
								40.98535390885141
							],
							[
								45.56035118997045,
								40.812289537105926
							],
							[
								45.35917483905817,
								40.56150381119346
							],
							[
								45.89190717955509,
								40.21847565364
							],
							[
								45.61001224140293,
								39.89999380142518
							],
							[
								46.034534132680676,
								39.628020738273065
							],
							[
								46.48349897643246,
								39.464154771475535
							],
							[
								46.50571984231797,
								38.770605373686294
							],
							[
								46.14362308124882,
								38.74120148371222
							],
							[
								45.73537926614301,
								39.31971914321974
							],
							[
								45.73997846861698,
								39.47399913182713
							],
							[
								45.29814497252146,
								39.471751207022436
							],
							[
								45.00198733905675,
								39.740003567049555
							],
							[
								44.79398969908195,
								39.71300263117705
							],
							[
								44.4000085792887,
								40.00500031184228
							],
							[
								43.65643639504094,
								40.253563951166186
							],
							[
								43.75265791196841,
								40.74020091405876
							],
							[
								43.58274580259273,
								41.09214325618257
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Armenia",
					"sov_a3": "ARM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Armenia",
					"adm0_a3": "ARM",
					"geou_dif": 0,
					"geounit": "Armenia",
					"gu_a3": "ARM",
					"su_dif": 0,
					"subunit": "Armenia",
					"su_a3": "ARM",
					"brk_diff": 0,
					"name": "Armenia",
					"name_long": "Armenia",
					"brk_a3": "ARM",
					"brk_name": "Armenia",
					"brk_group": "",
					"abbrev": "Arm.",
					"postal": "ARM",
					"formal_en": "Republic of Armenia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Armenia",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 1,
					"mapcolor9": 2,
					"mapcolor13": 10,
					"pop_est": 2967004,
					"gdp_md_est": 18770,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AM",
					"iso_a3": "ARM",
					"iso_n3": "051",
					"un_a3": "051",
					"wb_a2": "AM",
					"wb_a3": "ARM",
					"woe_id": -99,
					"adm0_a3_is": "ARM",
					"adm0_a3_us": "ARM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									-59.57209469261153,
									-80.0401787250963
								],
								[
									-59.86584937197472,
									-80.54965667106185
								],
								[
									-60.1596557277702,
									-81.00032683707931
								],
								[
									-62.25539343936708,
									-80.86317758577665
								],
								[
									-64.48812537296976,
									-80.92193368929256
								],
								[
									-65.74166642928984,
									-80.58882740673914
								],
								[
									-65.74166642928984,
									-80.54965667106185
								],
								[
									-66.29003089055513,
									-80.25577280061799
								],
								[
									-64.03768775089765,
									-80.29494353629518
								],
								[
									-61.88324561221714,
									-80.39287037548829
								],
								[
									-61.13897579613345,
									-79.9813709451481
								],
								[
									-60.610119188058405,
									-79.62867929475613
								],
								[
									-59.57209469261153,
									-80.0401787250963
								]
							]
						],
						[
							[
								[
									-159.20818356019765,
									-79.49705942170873
								],
								[
									-161.12760128481466,
									-79.6342086730113
								],
								[
									-162.4398467682184,
									-79.28146534618702
								],
								[
									-163.02740780337697,
									-78.92877369579496
								],
								[
									-163.06660437727032,
									-78.86996591584676
								],
								[
									-163.71289567772874,
									-78.59566741324153
								],
								[
									-163.71289567772874,
									-78.59566660579728
								],
								[
									-163.10580095116381,
									-78.2233379111343
								],
								[
									-161.24511349184638,
									-78.38017588314017
								],
								[
									-160.2462080556445,
									-78.69364512142266
								],
								[
									-159.48240454815448,
									-79.04633757925899
								],
								[
									-159.20818356019765,
									-79.49705942170873
								]
							]
						],
						[
							[
								[
									-45.154757656421026,
									-78.04706960058674
								],
								[
									-43.920827806155756,
									-78.47810272233326
								],
								[
									-43.489949713706096,
									-79.08555999136846
								],
								[
									-43.37243750667437,
									-79.51664478954727
								],
								[
									-43.333266770997085,
									-80.02612273551293
								],
								[
									-44.88053666846429,
									-80.33964365022771
								],
								[
									-46.506173875502014,
									-80.59435678499432
								],
								[
									-48.38642086444179,
									-80.82948455192235
								],
								[
									-50.482106899606464,
									-81.02544158317312
								],
								[
									-52.85198808451179,
									-80.9666854796573
								],
								[
									-54.164259406131606,
									-80.63352752067158
								],
								[
									-53.98799109558405,
									-80.2220280903314
								],
								[
									-51.8531343247422,
									-79.94772958772609
								],
								[
									-50.99132646341059,
									-79.61462330517266
								],
								[
									-50.36459469257474,
									-79.18348683056163
								],
								[
									-49.91413123228651,
									-78.81120900488669
								],
								[
									-49.30695899107312,
									-78.45856903092692
								],
								[
									-48.66061601418252,
									-78.04701792415445
								],
								[
									-48.66061601418252,
									-78.04701873159868
								],
								[
									-48.1513964503784,
									-78.04706960058674
								],
								[
									-46.662856818211026,
									-77.83147552506503
								],
								[
									-45.154757656421026,
									-78.04706960058674
								]
							]
						],
						[
							[
								[
									-121.21151139385712,
									-73.50099049900604
								],
								[
									-119.91885127829205,
									-73.65772511814734
								],
								[
									-118.72414303269191,
									-73.4813534547352
								],
								[
									-119.29211870001195,
									-73.83409678155948
								],
								[
									-120.23221716370998,
									-74.08880991632616
								],
								[
									-121.62282995668426,
									-74.01046844497161
								],
								[
									-122.6217345854419,
									-73.65777760202388
								],
								[
									-122.62173539288614,
									-73.65777679457963
								],
								[
									-122.40624467022903,
									-73.32461883559391
								],
								[
									-121.21151139385712,
									-73.50099049900604
								]
							]
						],
						[
							[
								[
									-125.55956640689531,
									-73.4813534547352
								],
								[
									-124.03188187726685,
									-73.87326751723674
								],
								[
									-124.61946875064153,
									-73.83409678155948
								],
								[
									-125.91218054263891,
									-73.7361182659341
								],
								[
									-127.28312964568191,
									-73.46176889434082
								],
								[
									-127.28313045312616,
									-73.46176808689657
								],
								[
									-126.55847184309721,
									-73.24622568780717
								],
								[
									-125.55956640689531,
									-73.4813534547352
								]
							]
						],
						[
							[
								[
									-98.9815496488239,
									-71.93333424899978
								],
								[
									-97.88474321164503,
									-72.07053517673474
								],
								[
									-96.78793677446623,
									-71.9529712932707
								],
								[
									-96.20034990109144,
									-72.52120534275218
								],
								[
									-96.98376461463621,
									-72.44286387139763
								],
								[
									-98.19808325884685,
									-72.48203460707492
								],
								[
									-99.4320131091122,
									-72.44286387139763
								],
								[
									-100.78345516640921,
									-72.50161997491355
								],
								[
									-101.80186845580134,
									-72.30566294366278
								],
								[
									-102.33072506387639,
									-71.89416432076685
								],
								[
									-102.33072506387639,
									-71.89416351332261
								],
								[
									-101.70396745482444,
									-71.71779184991038
								],
								[
									-100.4309185453141,
									-71.85499277764532
								],
								[
									-98.9815496488239,
									-71.93333424899978
								]
							]
						],
						[
							[
								[
									-68.45134599473042,
									-70.95582285576674
								],
								[
									-68.3338337876987,
									-71.40649302178419
								],
								[
									-68.51012793646242,
									-71.79840708428573
								],
								[
									-68.78429724798698,
									-72.17073577894863
								],
								[
									-69.95947099473642,
									-72.3078850302513
								],
								[
									-71.07588863797014,
									-72.50384206150207
								],
								[
									-72.38813412137378,
									-72.48425669366343
								],
								[
									-71.89849992540829,
									-72.09234263116188
								],
								[
									-73.07362199572543,
									-72.22949188246454
								],
								[
									-74.19003963895906,
									-72.3666928101995
								],
								[
									-74.95389482288138,
									-72.07275726332324
								],
								[
									-75.01262508818121,
									-71.66125783298307
								],
								[
									-73.91581865100233,
									-71.26934457792578
								],
								[
									-73.91581865100233,
									-71.26934377048153
								],
								[
									-73.23033077665056,
									-71.15177988701751
								],
								[
									-72.07471655952355,
									-71.19095062269477
								],
								[
									-71.78096188016036,
									-70.68147267672913
								],
								[
									-71.72217993842844,
									-70.30919565849851
								],
								[
									-71.74179114448319,
									-69.5057821656568
								],
								[
									-71.17381547716315,
									-69.03547495536841
								],
								[
									-70.25325151231573,
									-68.8787403362272
								],
								[
									-69.72444658067306,
									-69.25101735445782
								],
								[
									-69.48942216660959,
									-69.62334604912073
								],
								[
									-69.05851823594381,
									-70.07401621513819
								],
								[
									-68.72554114447107,
									-70.50515268974928
								],
								[
									-68.45134599473042,
									-70.95582285576674
								]
							]
						],
						[
							[
								[
									-58.61414282900091,
									-64.15246713013315
								],
								[
									-59.045072597882864,
									-64.36800952922263
								],
								[
									-59.78934241396655,
									-64.21122323364905
								],
								[
									-60.6119278631887,
									-64.30920174927444
								],
								[
									-61.297415737540376,
									-64.54432951620257
								],
								[
									-62.02210018578543,
									-64.79909432740136
								],
								[
									-62.5117602199669,
									-65.09302987427752
								],
								[
									-62.64885779483737,
									-65.48494232189066
								],
								[
									-62.59012752953774,
									-65.85721934012136
								],
								[
									-62.120078701410705,
									-66.1903256226747
								],
								[
									-62.805566575762384,
									-66.42550506603496
								],
								[
									-63.74569007023237,
									-66.50384653738959
								],
								[
									-64.29410620792996,
									-66.83700449637522
								],
								[
									-64.88169308130463,
									-67.15047373465772
								],
								[
									-65.50842485214056,
									-67.58161020926892
								],
								[
									-65.66508195663329,
									-67.95388722749945
								],
								[
									-65.31254533553809,
									-68.36533498140741
								],
								[
									-64.78371456567933,
									-68.6789075725545
								],
								[
									-63.9611032782411,
									-68.91398366305017
								],
								[
									-63.197299770751044,
									-69.22755625419725
								],
								[
									-62.78595536970775,
									-69.6194186402665
								],
								[
									-62.570516323482906,
									-69.9917473349295
								],
								[
									-62.27673580590354,
									-70.38366139743104
								],
								[
									-61.80666113956059,
									-70.71676767998447
								],
								[
									-61.5129064601974,
									-71.08904469821508
								],
								[
									-61.37580888532713,
									-72.01007375095313
								],
								[
									-61.08197669131553,
									-72.38235076918383
								],
								[
									-61.00366105817719,
									-72.77426483168537
								],
								[
									-60.69026933454316,
									-73.16617889418708
								],
								[
									-60.82736690941343,
									-73.69524220799119
								],
								[
									-61.37580888532713,
									-74.10674163833137
								],
								[
									-61.96336992048569,
									-74.43984792088489
								],
								[
									-63.29520077172796,
									-74.57699717218738
								],
								[
									-63.74569007023237,
									-74.92974049901173
								],
								[
									-64.35283647322959,
									-75.26284678156516
								],
								[
									-65.86098731145177,
									-75.63512379979578
								],
								[
									-67.19281816269412,
									-75.79191009536945
								],
								[
									-68.44628170436576,
									-76.00745249445876
								],
								[
									-69.79772376166284,
									-76.22299489354818
								],
								[
									-70.60072384304624,
									-76.63449432388845
								],
								[
									-72.20677568224536,
									-76.67366505956572
								],
								[
									-73.96953630236968,
									-76.63449432388845
								],
								[
									-75.55597693551402,
									-76.7128874716752
								],
								[
									-77.24037024606761,
									-76.7128874716752
								],
								[
									-76.92697852243359,
									-77.10480153417674
								],
								[
									-75.39929399280493,
									-77.28106984472439
								],
								[
									-74.28287634957141,
									-77.55542002376181
								],
								[
									-73.65611874051945,
									-77.90811167415396
								],
								[
									-74.77253638375308,
									-78.22163258886867
								],
								[
									-76.49610042998401,
									-78.12365407324329
								],
								[
									-77.92585812041926,
									-78.37841888444225
								],
								[
									-77.98466590036747,
									-78.78991831478234
								],
								[
									-78.02378495961247,
									-79.18183318472822
								],
								[
									-76.84863705107912,
									-79.51493946728165
								],
								[
									-76.6332238430704,
									-79.88721648551227
								],
								[
									-75.36009741891175,
									-80.25954518017525
								],
								[
									-73.24485185412462,
									-80.41633147574876
								],
								[
									-71.44294633653922,
									-80.69062997835398
								],
								[
									-70.01316280788777,
									-81.00415089306878
								],
								[
									-68.19164608424754,
									-81.31767180778357
								],
								[
									-65.70427853052666,
									-81.47445810335725
								],
								[
									-63.2560300360507,
									-81.74875660596248
								],
								[
									-61.55202551944231,
									-82.04269215283854
								],
								[
									-59.69141557477346,
									-82.37585011182435
								],
								[
									-58.71212134462621,
									-82.84610564568035
								],
								[
									-58.22248714866092,
									-83.21843434034335
								],
								[
									-57.00811682801782,
									-82.86569101351908
								],
								[
									-55.36289425314155,
									-82.57175546664283
								],
								[
									-53.619770677288244,
									-82.25823455192804
								],
								[
									-51.543644171746024,
									-82.00352141716135
								],
								[
									-49.76134986021546,
									-81.72917123812375
								],
								[
									-47.27393063006221,
									-81.7095858702853
								],
								[
									-44.82570797380251,
									-81.84673512158777
								],
								[
									-42.80836340999238,
									-82.08191456494811
								],
								[
									-42.16202043310179,
									-81.65082976676929
								],
								[
									-40.771433478343596,
									-81.35689421989322
								],
								[
									-38.24481767429705,
									-81.33730885205459
								],
								[
									-36.26666968438022,
									-81.12171477653298
								],
								[
									-34.386396857224355,
									-80.90617237744348
								],
								[
									-32.31029618989831,
									-80.76902312614074
								],
								[
									-30.097097947701997,
									-80.5926514627287
								],
								[
									-28.549802212018704,
									-80.33793832796201
								],
								[
									-29.25490129242513,
									-79.98519500113765
								],
								[
									-29.685805223090966,
									-79.63250335074568
								],
								[
									-29.685805223090966,
									-79.26022633251497
								],
								[
									-31.62480831554663,
									-79.29939706819223
								],
								[
									-33.68132361503396,
									-79.45613168733345
								],
								[
									-35.639912075328255,
									-79.45613168733345
								],
								[
									-35.91410722506902,
									-79.08385466910292
								],
								[
									-35.77700965019872,
									-78.33924814876498
								],
								[
									-35.32654618991043,
									-78.12365407324329
								],
								[
									-33.89676266125886,
									-77.88852630631524
								],
								[
									-32.2123693507053,
									-77.65345021581957
								],
								[
									-30.99805070649461,
									-77.35951466894332
								],
								[
									-29.78373206228406,
									-77.06557912206726
								],
								[
									-28.88277930349136,
									-76.67366505956572
								],
								[
									-27.511751878355653,
									-76.49734507258579
								],
								[
									-26.16033565927475,
									-76.36014414485075
								],
								[
									-25.474821946706868,
									-76.28180267349629
								],
								[
									-23.92755204923978,
									-76.24258026138673
								],
								[
									-22.45859778491095,
									-76.10543101008425
								],
								[
									-21.22469377286177,
									-75.90947397883347
								],
								[
									-20.010375128651077,
									-75.67434621190543
								],
								[
									-18.91354285325616,
									-75.43921844497729
								],
								[
									-17.522981736714172,
									-75.1256975302625
								],
								[
									-16.641588507544014,
									-74.79253957127688
								],
								[
									-15.70149085129026,
									-74.49860402440063
								],
								[
									-15.407710333710867,
									-74.10674163833137
								],
								[
									-16.465320196996373,
									-73.87161387140341
								],
								[
									-16.11278357590126,
									-73.46011444106315
								],
								[
									-15.446855231171952,
									-73.14654184991608
								],
								[
									-14.408804897508986,
									-72.9505848186653
								],
								[
									-13.311972622113984,
									-72.71545705173733
								],
								[
									-12.293507656289563,
									-72.40193613702255
								],
								[
									-11.510067104528588,
									-72.01007375095313
								],
								[
									-11.020432908563038,
									-71.53976654066483
								],
								[
									-10.295774298534155,
									-71.2654163616273
								],
								[
									-9.101015183946089,
									-71.32422414157551
								],
								[
									-8.611380987980596,
									-71.65733042412884
								],
								[
									-7.416621873392415,
									-71.69650115980603
								],
								[
									-7.377451137715241,
									-71.32422414157551
								],
								[
									-6.8682315739111175,
									-70.93231007907397
								],
								[
									-5.790984666354774,
									-71.03028859469927
								],
								[
									-5.53637488445267,
									-71.40261728936225
								],
								[
									-4.341667446296867,
									-71.46137339287807
								],
								[
									-3.048981492515594,
									-71.28505340589814
								],
								[
									-1.7954921126277839,
									-71.16743784600183
								],
								[
									-0.659489101555522,
									-71.22624562595004
								],
								[
									-0.2286368473220648,
									-71.6377450562903
								],
								[
									0.8681954280729371,
									-71.30463877373678
								],
								[
									1.886686232113533,
									-71.12826711032474
								],
								[
									3.022637566753417,
									-70.99111785902207
								],
								[
									4.139055209987049,
									-70.85391693128705
								],
								[
									5.157546014027673,
									-70.61878916435909
								],
								[
									6.273911980828927,
									-70.4620545452178
								],
								[
									7.135719842160626,
									-70.24651214612838
								],
								[
									7.742866245157842,
									-69.89376881930403
								],
								[
									8.487110223025326,
									-70.148533630503
								],
								[
									9.525134718472202,
									-70.01133270276821
								],
								[
									10.249845004933434,
									-70.48163991305651
								],
								[
									10.81782067225339,
									-70.8343315634485
								],
								[
									11.953823683325652,
									-70.63837453219773
								],
								[
									12.404287143613942,
									-70.24651214612838
								],
								[
									13.422777947654396,
									-69.97216196709095
								],
								[
									14.734997592842006,
									-70.03091807060677
								],
								[
									15.126756626046586,
									-70.40324676526976
								],
								[
									15.949342075268646,
									-70.03091807060677
								],
								[
									17.02658898282516,
									-69.91335418714274
								],
								[
									18.201711053142333,
									-69.87418345146548
								],
								[
									19.259372592860046,
									-69.89376881930403
								],
								[
									20.37573855966147,
									-70.01133270276821
								],
								[
									21.452985467217815,
									-70.07014048271625
								],
								[
									21.923034295344735,
									-70.40324676526976
								],
								[
									22.569403110451447,
									-70.69718231214583
								],
								[
									23.666183709414213,
									-70.5208106487337
								],
								[
									24.841357456163593,
									-70.48163991305651
								],
								[
									25.977308790803647,
									-70.48163991305651
								],
								[
									27.09372643403728,
									-70.4620545452178
								],
								[
									28.092580193806867,
									-70.32485361748293
								],
								[
									29.15024173352458,
									-70.20728973401899
								],
								[
									30.03158328626253,
									-69.93293955498129
								],
								[
									30.971732618948607,
									-69.75661956800145
								],
								[
									31.990171746556854,
									-69.65864105237607
								],
								[
									32.75405276869529,
									-69.38429087333846
								],
								[
									33.30244306817676,
									-68.83564219169571
								],
								[
									33.8704187354966,
									-68.50258758557456
								],
								[
									34.908494907375854,
									-68.65927052828349
								],
								[
									35.300202264148226,
									-69.01201385510794
								],
								[
									36.16201012547978,
									-69.24714162203597
								],
								[
									37.20003462092657,
									-69.16874847424904
								],
								[
									37.9051078631168,
									-69.5214401246412
								],
								[
									38.649403517416914,
									-69.77620493584018
								],
								[
									39.66789432145734,
									-69.54107716891204
								],
								[
									40.020430942552565,
									-69.10994069430095
								],
								[
									40.92135786312909,
									-68.93362070732118
								],
								[
									41.95943403500823,
									-68.60051442476767
								],
								[
									42.9387024269391,
									-68.46331349703271
								],
								[
									44.113876173688624,
									-68.26740814221424
								],
								[
									44.897290887233424,
									-68.05186574312492
								],
								[
									45.719928012887834,
									-67.81673797619678
								],
								[
									46.503342726432635,
									-67.60119557710746
								],
								[
									47.443440382686305,
									-67.71875946057148
								],
								[
									48.34441897969512,
									-67.36606781017942
								],
								[
									48.9907361183696,
									-67.0917176311419
								],
								[
									49.93088545105567,
									-67.11130299898045
								],
								[
									50.75347090027773,
									-66.8761752320524
								],
								[
									50.94932457866392,
									-66.52348358166043
								],
								[
									51.791547072157044,
									-66.2491334026229
								],
								[
									52.614132521378934,
									-66.05317637137213
								],
								[
									53.613037957580815,
									-65.89639007579855
								],
								[
									54.533550245996054,
									-65.818048604444
								],
								[
									55.41494347516621,
									-65.8768047079599
								],
								[
									56.35504113141988,
									-65.97478322358538
								],
								[
									57.15809288923569,
									-66.2491334026229
								],
								[
									57.25596805199646,
									-66.68021820080163
								],
								[
									58.13736128116662,
									-67.01332448335515
								],
								[
									58.74450768416395,
									-67.28767466239267
								],
								[
									59.93931847518425,
									-67.40523854585669
								],
								[
									60.60522098169744,
									-67.67958872489422
								],
								[
									61.42780643091933,
									-67.95388722749945
								],
								[
									62.38748945501166,
									-68.01269500744755
								],
								[
									63.19048953639523,
									-67.81673797619678
								],
								[
									64.05234907415903,
									-67.40523854585669
								],
								[
									64.99244673041292,
									-67.62072926851371
								],
								[
									65.97171512234397,
									-67.73834482841004
								],
								[
									66.91186445502976,
									-67.85590871187415
								],
								[
									67.89113284696091,
									-67.9343018596608
								],
								[
									68.89003828316291,
									-67.9343018596608
								],
								[
									69.71262373238474,
									-68.97279144299837
								],
								[
									69.67345299670748,
									-69.22755625419725
								],
								[
									69.55594078967582,
									-69.67822642021471
								],
								[
									68.59625776558349,
									-69.93293955498129
								],
								[
									67.81273969917416,
									-70.30526824964429
								],
								[
									67.94988895047666,
									-70.69718231214583
								],
								[
									69.06630659371027,
									-70.67754526787499
								],
								[
									68.92915734240776,
									-71.06945933037653
								],
								[
									68.41998945503596,
									-71.44178802503953
								],
								[
									67.94988895047666,
									-71.85328745537961
								],
								[
									68.71376997261515,
									-72.16680837009442
								],
								[
									69.86930667509395,
									-72.2647868857198
								],
								[
									71.02489505400459,
									-72.08841522230776
								],
								[
									71.57328535348606,
									-71.69650115980603
								],
								[
									71.90628828317492,
									-71.32422414157551
								],
								[
									72.45462690622404,
									-71.01070322686063
								],
								[
									73.08141035349209,
									-70.71676767998447
								],
								[
									73.3360201353942,
									-70.3640243531602
								],
								[
									73.86487674346924,
									-69.87418345146548
								],
								[
									74.49155683787271,
									-69.77620493584018
								],
								[
									75.62755984894497,
									-69.73703420016281
								],
								[
									76.62646528514685,
									-69.6194186402665
								],
								[
									77.64490441275527,
									-69.4626840211253
								],
								[
									78.13453860872059,
									-69.07076995862376
								],
								[
									78.42837080273225,
									-68.69844126396067
								],
								[
									79.11385867708393,
									-68.32621592216243
								],
								[
									80.09312706901486,
									-68.07150278739576
								],
								[
									80.93534956250775,
									-67.87554575614499
								],
								[
									81.48379153842146,
									-67.54238779715926
								],
								[
									82.05176720574147,
									-67.36606781017942
								],
								[
									82.77642581577041,
									-67.20928151460592
								],
								[
									83.7753312519724,
									-67.30726003023122
								],
								[
									84.67620649611663,
									-67.20928151460592
								],
								[
									85.65552656447997,
									-67.0917176311419
								],
								[
									86.75235883987486,
									-67.15047373465772
								],
								[
									87.4770174499038,
									-66.8761752320524
								],
								[
									87.98628869014024,
									-66.20991099051335
								],
								[
									88.35841067907396,
									-66.48426116955086
								],
								[
									88.82840783076855,
									-66.95456837983923
								],
								[
									89.67063032426157,
									-67.15047373465772
								],
								[
									90.6303650247863,
									-67.22886688244446
								],
								[
									91.59009972531081,
									-67.11130299898045
								],
								[
									92.60853885291905,
									-67.1896961467672
								],
								[
									93.54863650917295,
									-67.20928151460592
								],
								[
									94.175419956441,
									-67.11130299898045
								],
								[
									95.01759077350167,
									-67.17011077892865
								],
								[
									95.78147179564027,
									-67.38565317801798
								],
								[
									96.6823987162168,
									-67.24850392671549
								],
								[
									97.75964562377314,
									-67.24850392671549
								],
								[
									98.68020958862056,
									-67.11130299898045
								],
								[
									99.71818240763506,
									-67.24850392671549
								],
								[
									100.38418826701277,
									-66.91534596772968
								],
								[
									100.89335615438469,
									-66.58223968517625
								],
								[
									101.57889570516855,
									-66.30788950613864
								],
								[
									102.83241092327265,
									-65.56328379324512
								],
								[
									103.47867638551477,
									-65.70048472097997
								],
								[
									104.2425574076531,
									-65.97478322358538
								],
								[
									104.90845991416623,
									-66.32752655040966
								],
								[
									106.18156050010876,
									-66.9349313355684
								],
								[
									107.1608805684721,
									-66.95456837983923
								],
								[
									108.08139285688716,
									-66.95456837983923
								],
								[
									109.15863976444368,
									-66.83700449637522
								],
								[
									110.23583499556784,
									-66.69980356864036
								],
								[
									111.05847212122208,
									-66.42550506603496
								],
								[
									111.74395999557393,
									-66.13156951915889
								],
								[
									112.86037763880748,
									-66.09234710704932
								],
								[
									113.60467329310737,
									-65.8768047079599
								],
								[
									114.38808800665205,
									-66.07276173921068
								],
								[
									114.89730757045626,
									-66.38628265392548
								],
								[
									115.60238081264654,
									-66.69980356864036
								],
								[
									116.69916141160942,
									-66.66063283296299
								],
								[
									117.38470096239323,
									-66.91534596772968
								],
								[
									118.57946007698129,
									-67.17011077892865
								],
								[
									119.8329236186531,
									-67.26808929455395
								],
								[
									120.87099979053218,
									-67.1896961467672
								],
								[
									121.6544145040771,
									-66.8761752320524
								],
								[
									122.32036868702235,
									-66.56265431733769
								],
								[
									123.22129560759893,
									-66.48426116955086
								],
								[
									124.12227420460763,
									-66.6214620972859
								],
								[
									125.16024702362225,
									-66.71938893647891
								],
								[
									126.10039635630838,
									-66.56265431733769
								],
								[
									127.00142662974932,
									-66.56265431733769
								],
								[
									127.88276818248724,
									-66.66063283296299
								],
								[
									128.80328047090242,
									-66.75861134858846
								],
								[
									129.70425906791118,
									-66.58223968517625
								],
								[
									130.78145429903546,
									-66.42550506603496
								],
								[
									131.79994510307588,
									-66.38628265392548
								],
								[
									132.93589643771614,
									-66.38628265392548
								],
								[
									133.85646040256339,
									-66.28830413830009
								],
								[
									134.7573873231399,
									-66.20996266694563
								],
								[
									135.03158247288073,
									-65.72007008881862
								],
								[
									135.07075320855782,
									-65.30857065847843
								],
								[
									135.69748497939358,
									-65.58286916108366
								],
								[
									135.8738049663735,
									-66.03359100353342
								],
								[
									136.2067045431978,
									-66.44509043387367
								],
								[
									136.6180489442411,
									-66.77819671642702
								],
								[
									137.46027143773395,
									-66.95456837983923
								],
								[
									138.59622277237415,
									-66.89576059989113
								],
								[
									139.90844241756147,
									-66.8761752320524
								],
								[
									140.8094210145703,
									-66.81736745210438
								],
								[
									142.1216923361902,
									-66.81736745210438
								],
								[
									143.06184166887616,
									-66.79778208426566
								],
								[
									144.3740613140637,
									-66.83700449637522
								],
								[
									145.49042728086502,
									-66.91534596772968
								],
								[
									146.19555219948782,
									-67.22886688244446
								],
								[
									145.99969852110152,
									-67.60119557710746
								],
								[
									146.64606733620823,
									-67.8951311239837
								],
								[
									147.72326256733234,
									-68.13025889091166
								],
								[
									148.8396285341337,
									-68.38502370211054
								],
								[
									150.1323144879149,
									-68.56129201265819
								],
								[
									151.4837048687796,
									-68.71812998466397
								],
								[
									152.50224734925249,
									-68.87481292737299
								],
								[
									153.63819868389257,
									-68.8945016480761
								],
								[
									154.28456749899928,
									-68.56129201265819
								],
								[
									155.16585737530485,
									-68.83564219169571
								],
								[
									155.92979007387547,
									-69.14921478284279
								],
								[
									156.8111316266134,
									-69.38429087333846
								],
								[
									158.0255277854724,
									-69.48226938896394
								],
								[
									159.18101281151874,
									-69.59983327242796
								],
								[
									159.67069868391653,
									-69.9917473349295
								],
								[
									160.8066500185565,
									-70.22687510185754
								],
								[
									161.5704793642628,
									-70.57961842868181
								],
								[
									162.68689700749636,
									-70.7363530478232
								],
								[
									163.84243370997493,
									-70.71676767998447
								],
								[
									164.9196806175312,
									-70.77552378350029
								],
								[
									166.11443973211945,
									-70.75593841566175
								],
								[
									167.309095493843,
									-70.8343315634485
								],
								[
									168.42561648994118,
									-70.97148081475106
								],
								[
									169.46358930895596,
									-71.2066602581114
								],
								[
									170.50166548083504,
									-71.40261728936225
								],
								[
									171.20679039945762,
									-71.69650115980603
								],
								[
									171.08922651599377,
									-72.08841522230776
								],
								[
									170.56042158435073,
									-72.44115854913211
								],
								[
									170.1099581240624,
									-72.89182871514939
								],
								[
									169.75736982653515,
									-73.24452036554155
								],
								[
									169.28732099840832,
									-73.65601979588163
								],
								[
									167.97510135322077,
									-73.81280609145513
								],
								[
									167.38748864162974,
									-74.16549774184719
								],
								[
									166.09480268784844,
									-74.3810401409366
								],
								[
									165.64439090399244,
									-74.77295420343815
								],
								[
									164.9588513532086,
									-75.14528289810123
								],
								[
									164.2341927431797,
									-75.45880381281593
								],
								[
									163.82279666570392,
									-75.8703032431562
								],
								[
									163.56823856023428,
									-76.24258026138673
								],
								[
									163.47026004460898,
									-76.69330210383656
								],
								[
									163.48989708887976,
									-77.06557912206726
								],
								[
									164.05787275619977,
									-77.45744150813643
								],
								[
									164.27336347885696,
									-77.82977020279932
								],
								[
									164.74346398341615,
									-78.18251352962378
								],
								[
									166.60412560451735,
									-78.31961110449406
								],
								[
									166.99578128485743,
									-78.75074757910525
								],
								[
									165.19387576727203,
									-78.9074830056907
								],
								[
									163.66621707585958,
									-79.12302540478002
								],
								[
									161.76638471908112,
									-79.16224781688967
								],
								[
									160.92416222558833,
									-79.73048186637098
								],
								[
									160.74789391504075,
									-80.20073740022715
								],
								[
									160.3169641461587,
									-80.57306609488997
								],
								[
									159.78821089094842,
									-80.94539478955305
								],
								[
									161.1200159039744,
									-81.27850107210648
								],
								[
									161.6292871442109,
									-81.69000050244657
								],
								[
									162.49099165267805,
									-82.06227752067727
								],
								[
									163.70533613510477,
									-82.3954354796629
								],
								[
									165.09594892807885,
									-82.70895639437778
								],
								[
									166.60412560451735,
									-83.02247730909258
								],
								[
									168.89566531806796,
									-83.33599822380737
								],
								[
									169.40478152900758,
									-83.82589080193438
								],
								[
									172.28393395414938,
									-84.04143320102371
								],
								[
									172.47704878162418,
									-84.11791432081567
								],
								[
									173.2240832868354,
									-84.41371021925441
								],
								[
									175.98567182851312,
									-84.15899708448764
								],
								[
									178.27721154206407,
									-84.47251799920244
								],
								[
									180.00000000000014,
									-84.71337999999999
								],
								[
									180.00000000000014,
									-90.00000000000003
								],
								[
									-179.99999999999997,
									-90.00000000000003
								],
								[
									-179.99999999999997,
									-84.71337999999999
								],
								[
									-179.94249935617893,
									-84.72144337355249
								],
								[
									-179.0586773346912,
									-84.1394117166491
								],
								[
									-177.25677181710574,
									-84.45293263136388
								],
								[
									-177.14080667326579,
									-84.41794122714832
								],
								[
									-176.0846728180776,
									-84.09925912875842
								],
								[
									-175.94723461362776,
									-84.11044871021662
								],
								[
									-175.82988216866252,
									-84.11791432081567
								],
								[
									-174.3825028148157,
									-84.53432301222357
								],
								[
									-173.11655941474547,
									-84.11791432081567
								],
								[
									-172.8891055980128,
									-84.06101856886234
								],
								[
									-169.95122290757143,
									-83.88464690545013
								],
								[
									-168.99998898015863,
									-84.11791432081567
								],
								[
									-168.53019853419323,
									-84.23739023227448
								],
								[
									-167.02209937240332,
									-84.57049651482791
								],
								[
									-164.18214352115507,
									-84.82520964959458
								],
								[
									-161.92977454328138,
									-85.13873056430938
								],
								[
									-158.07137956442494,
									-85.3739100076697
								],
								[
									-155.1922529774993,
									-85.09955982863211
								],
								[
									-150.94209896543802,
									-85.29551685988288
								],
								[
									-148.5330728830715,
									-85.60903777459767
								],
								[
									-145.88891822633298,
									-85.31510222772161
								],
								[
									-143.10771847860045,
									-85.04075204868391
								],
								[
									-142.89227943237563,
									-84.57049651482791
								],
								[
									-146.8290683664633,
									-84.53127410271834
								],
								[
									-150.06073157448395,
									-84.29614633579038
								],
								[
									-150.90292822976073,
									-83.90423227328884
								],
								[
									-153.5862011383002,
									-83.68868987419935
								],
								[
									-153.40990698953647,
									-83.23801970818207
								],
								[
									-153.0377591623864,
									-82.82652027784181
								],
								[
									-152.66563717345275,
									-82.45419158317881
								],
								[
									-152.86151669005505,
									-82.04269215283854
								],
								[
									-154.5262987945539,
									-81.76839365023332
								],
								[
									-155.2901798166924,
									-81.41565032340904
								],
								[
									-156.8374497141595,
									-81.10212940869425
								],
								[
									-154.40878658752223,
									-81.16093718864245
								],
								[
									-152.09766150613282,
									-81.00415089306878
								],
								[
									-150.64829260964262,
									-81.33730885205459
								],
								[
									-148.86599829811206,
									-81.04337330517833
								],
								[
									-147.2207498850195,
									-80.67104461051544
								],
								[
									-146.41774899619185,
									-80.33793832796201
								],
								[
									-146.77028642473118,
									-79.92643889762192
								],
								[
									-148.06294654029637,
									-79.65208871858422
								],
								[
									-149.5319008046251,
									-79.35820484814045
								],
								[
									-151.5884161041124,
									-79.29939706819223
								],
								[
									-153.3903216216978,
									-79.16224781688967
								],
								[
									-155.32937639058576,
									-79.0642693012642
								],
								[
									-155.97566769104418,
									-78.69193979915704
								],
								[
									-157.26830196839305,
									-78.37841888444225
								],
								[
									-158.0517683583701,
									-78.0256755576179
								],
								[
									-158.36513424378796,
									-76.88920745865495
								],
								[
									-157.87547420960635,
									-76.98723765071261
								],
								[
									-156.97457312724595,
									-77.30075856542751
								],
								[
									-155.32937639058576,
									-77.20272837336975
								],
								[
									-153.74283240457675,
									-77.06557912206726
								],
								[
									-152.92024695535477,
									-77.496663920246
								],
								[
									-151.3337804839943,
									-77.3987370810528
								],
								[
									-150.00194963275194,
									-77.18314300553119
								],
								[
									-148.74848609108034,
									-76.90884450292597
								],
								[
									-147.61248308000808,
									-76.57573822037253
								],
								[
									-146.10440894899,
									-76.47775970474706
								],
								[
									-146.143528008235,
									-76.10543101008425
								],
								[
									-146.49609127499048,
									-75.73315399185354
								],
								[
									-146.202309949967,
									-75.38041066502919
								],
								[
									-144.90962399618576,
									-75.20403900161696
								],
								[
									-144.32203712281108,
									-75.53719696060277
								],
								[
									-142.79435259318262,
									-75.341239929352
								],
								[
									-141.63876421427162,
									-75.08647511815295
								],
								[
									-140.20900652383617,
									-75.06688975031439
								],
								[
									-138.85759030475535,
									-74.96891123468892
								],
								[
									-137.50619992389045,
									-74.73378346776096
								],
								[
									-136.42890133990193,
									-74.51824106867164
								],
								[
									-135.2145826956913,
									-74.30269866958214
								],
								[
									-134.4311938203626,
									-74.36145477309796
								],
								[
									-133.74565426957855,
									-74.43984792088489
								],
								[
									-132.25716792873206,
									-74.30269866958214
								],
								[
									-130.92531123927358,
									-74.47901865656199
								],
								[
									-129.55428381413776,
									-74.45943328872343
								],
								[
									-128.24203833073426,
									-74.3222840374207
								],
								[
									-126.89062211165324,
									-74.42026255304617
								],
								[
									-125.40208247948578,
									-74.51824106867164
								],
								[
									-124.01149552472761,
									-74.47901865656199
								],
								[
									-122.56215246645361,
									-74.49860402440063
								],
								[
									-121.07361283428624,
									-74.51824106867164
								],
								[
									-119.70255957093423,
									-74.47901865656199
								],
								[
									-118.68414547409793,
									-74.18508310968583
								],
								[
									-117.4698009916712,
									-74.02834849054463
								],
								[
									-116.21631161178341,
									-74.24389088963395
								],
								[
									-115.02155249719542,
									-74.06751922622189
								],
								[
									-113.94433142785508,
									-73.71482757582983
								],
								[
									-113.29798845096448,
									-74.02834849054463
								],
								[
									-112.94545182986937,
									-74.3810401409366
								],
								[
									-112.29908301476259,
									-74.71419809992241
								],
								[
									-111.26105851931563,
									-74.42026255304617
								],
								[
									-110.06632524294373,
									-74.79253957127688
								],
								[
									-108.71490902386273,
									-74.91010345474089
								],
								[
									-107.55934648316811,
									-75.18445363377842
								],
								[
									-106.14914832235502,
									-75.1256975302625
								],
								[
									-104.87607357462866,
									-74.94932586685046
								],
								[
									-103.36794857462266,
									-74.98849660252765
								],
								[
									-102.01650651732565,
									-75.1256975302625
								],
								[
									-100.64553076862231,
									-75.30201751724243
								],
								[
									-100.11669999876327,
									-74.87093271906353
								],
								[
									-100.76304297565395,
									-74.53782643651019
								],
								[
									-101.25270300983553,
									-74.18508310968583
								],
								[
									-102.54533728718451,
									-74.10674163833137
								],
								[
									-103.11331295450454,
									-73.73441294366839
								],
								[
									-103.32875200072928,
									-73.36208424900556
								],
								[
									-103.6812886218244,
									-72.61753021254415
								],
								[
									-102.91748511433435,
									-72.75467946384681
								],
								[
									-101.60523963093073,
									-72.81343556736263
								],
								[
									-100.31252783893345,
									-72.75467946384681
								],
								[
									-99.1373799304001,
									-72.9114140829881
								],
								[
									-98.11888912635948,
									-73.20534962986417
								],
								[
									-97.6880368721261,
									-73.55804128025633
								],
								[
									-96.33659481482891,
									-73.61684906020436
								],
								[
									-95.04396053747985,
									-73.47969980890187
								],
								[
									-93.67290727412811,
									-73.28374277765093
								],
								[
									-92.43900326207896,
									-73.16617889418708
								],
								[
									-91.42056413447071,
									-73.40130666111513
								],
								[
									-90.08873328322844,
									-73.3229135133282
								],
								[
									-89.22695126011294,
									-72.55872243259596
								],
								[
									-88.42395117872951,
									-73.0093925986134
								],
								[
									-87.26833696160261,
									-73.18576426202563
								],
								[
									-86.01482174349843,
									-73.08778574640016
								],
								[
									-85.19223629427657,
									-73.47969980890187
								],
								[
									-83.87999081087275,
									-73.51887054457897
								],
								[
									-82.66564632844603,
									-73.63643442804309
								],
								[
									-81.47091305207414,
									-73.8519768271324
								],
								[
									-80.68744666209699,
									-73.47969980890187
								],
								[
									-80.295790981757,
									-73.12695648207743
								],
								[
									-79.296885545555,
									-73.51887054457897
								],
								[
									-77.92585812041926,
									-73.42089202895359
								],
								[
									-76.90736731637875,
									-73.63643442804309
								],
								[
									-76.22187944202707,
									-73.96954071059642
								],
								[
									-74.8900485907848,
									-73.87161387140341
								],
								[
									-73.85202409533792,
									-73.65601979588163
								],
								[
									-72.83353329129741,
									-73.40130666111513
								],
								[
									-71.61921464708686,
									-73.26415740981238
								],
								[
									-70.20904232448996,
									-73.14654184991608
								],
								[
									-68.93591590033122,
									-73.0093925986134
								],
								[
									-67.95662167018409,
									-72.79385019952409
								],
								[
									-67.36906063502559,
									-72.4803292848093
								],
								[
									-67.13403622096203,
									-72.04924448663039
								],
								[
									-67.25154842799367,
									-71.6377450562903
								],
								[
									-67.5649401516279,
									-71.24583099378876
								],
								[
									-67.917476772723,
									-70.85391693128705
								],
								[
									-68.23084265814092,
									-70.4620545452178
								],
								[
									-68.48545244004302,
									-70.10931121839351
								],
								[
									-68.54420854355894,
									-69.71739715589197
								],
								[
									-68.44628170436576,
									-69.32553476982272
								],
								[
									-67.9762328762389,
									-68.95320607515973
								],
								[
									-67.58449968125032,
									-68.54170664481947
								],
								[
									-67.42784257675751,
									-68.14984425875022
								],
								[
									-67.6236704169277,
									-67.71875946057148
								],
								[
									-67.74118262395933,
									-67.32684539806993
								],
								[
									-67.25154842799367,
									-66.8761752320524
								],
								[
									-66.70318396672857,
									-66.58223968517625
								],
								[
									-66.05681515162186,
									-66.20996266694563
								],
								[
									-65.3713272772701,
									-65.89639007579855
								],
								[
									-64.5682755194544,
									-65.60250620535467
								],
								[
									-64.17654232446583,
									-65.17142302206445
								],
								[
									-63.62815202498453,
									-64.89707284302675
								],
								[
									-63.001394415932566,
									-64.64230803182787
								],
								[
									-62.04168555362398,
									-64.58355192831195
								],
								[
									-61.414927944572014,
									-64.27003101359716
								],
								[
									-60.709854702381705,
									-64.07407398234639
								],
								[
									-59.88726925315956,
									-63.95651009888237
								],
								[
									-59.16258480491453,
									-63.70174528768357
								],
								[
									-58.59455746116228,
									-63.3882243729686
								],
								[
									-57.81114274761751,
									-63.27066048950458
								],
								[
									-57.22358171245884,
									-63.52542530070364
								],
								[
									-57.59572953960887,
									-63.85853158325707
								],
								[
									-58.61414282900091,
									-64.15246713013315
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Antarctica",
					"sov_a3": "ATA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Indeterminate",
					"admin": "Antarctica",
					"adm0_a3": "ATA",
					"geou_dif": 0,
					"geounit": "Antarctica",
					"gu_a3": "ATA",
					"su_dif": 0,
					"subunit": "Antarctica",
					"su_a3": "ATA",
					"brk_diff": 0,
					"name": "Antarctica",
					"name_long": "Antarctica",
					"brk_a3": "ATA",
					"brk_name": "Antarctica",
					"brk_group": "",
					"abbrev": "Ant.",
					"postal": "AQ",
					"formal_en": "",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "Multiple claims held in abeyance",
					"name_sort": "Antarctica",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 5,
					"mapcolor9": 1,
					"mapcolor13": -99,
					"pop_est": 3802,
					"gdp_md_est": 760.4,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AQ",
					"iso_a3": "ATA",
					"iso_n3": "010",
					"un_a3": "-099",
					"wb_a2": "-99",
					"wb_a3": "-99",
					"woe_id": -99,
					"adm0_a3_is": "ATA",
					"adm0_a3_us": "ATA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Antarctica",
					"region_un": "Antarctica",
					"subregion": "Antarctica",
					"region_wb": "Antarctica",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								68.935,
								-48.62500000000001
							],
							[
								69.58,
								-48.940000000000005
							],
							[
								70.525,
								-49.065000000000005
							],
							[
								70.56,
								-49.255
							],
							[
								70.28,
								-49.71
							],
							[
								68.745,
								-49.775000000000006
							],
							[
								68.72000000000001,
								-49.2425
							],
							[
								68.8675,
								-48.830000000000005
							],
							[
								68.935,
								-48.62500000000001
							]
						]
					]
				},
				"properties": {
					"scalerank": 3,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "France",
					"sov_a3": "FR1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Dependency",
					"admin": "French Southern and Antarctic Lands",
					"adm0_a3": "ATF",
					"geou_dif": 0,
					"geounit": "French Southern and Antarctic Lands",
					"gu_a3": "ATF",
					"su_dif": 0,
					"subunit": "French Southern and Antarctic Lands",
					"su_a3": "ATF",
					"brk_diff": 0,
					"name": "Fr. S. Antarctic Lands",
					"name_long": "French Southern and Antarctic Lands",
					"brk_a3": "ATF",
					"brk_name": "Fr. S. and Antarctic Lands",
					"brk_group": "",
					"abbrev": "Fr. S.A.L.",
					"postal": "TF",
					"formal_en": "Territory of the French Southern and Antarctic Lands",
					"formal_fr": "",
					"note_adm0": "Fr.",
					"note_brk": "",
					"name_sort": "French Southern and Antarctic Lands",
					"name_alt": "",
					"mapcolor7": 7,
					"mapcolor8": 5,
					"mapcolor9": 9,
					"mapcolor13": 11,
					"pop_est": 140,
					"gdp_md_est": 16,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TF",
					"iso_a3": "ATF",
					"iso_n3": "260",
					"un_a3": "-099",
					"wb_a2": "-99",
					"wb_a3": "-99",
					"woe_id": -99,
					"adm0_a3_is": "ATF",
					"adm0_a3_us": "ATF",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Seven seas (open ocean)",
					"region_un": "Seven seas (open ocean)",
					"subregion": "Seven seas (open ocean)",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 22,
					"long_len": 35,
					"abbrev_len": 10,
					"tiny": 2,
					"homepart": -99
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									145.39797814349484,
									-40.79254851660589
								],
								[
									146.36412072162372,
									-41.13769540788334
								],
								[
									146.90858361225085,
									-41.00054615658068
								],
								[
									147.68925947488415,
									-40.80825815202269
								],
								[
									148.28906782449602,
									-40.87543751400213
								],
								[
									148.35986453673584,
									-42.062445163746446
								],
								[
									148.0173014670731,
									-42.407023614268624
								],
								[
									147.9140519553538,
									-43.21152231218849
								],
								[
									147.564564243764,
									-42.93768889747386
								],
								[
									146.87034305235497,
									-43.634597263362096
								],
								[
									146.66332726459368,
									-43.58085377377856
								],
								[
									146.04837772032042,
									-43.54974456153889
								],
								[
									145.43192955951056,
									-42.693776137056275
								],
								[
									145.2950903668017,
									-42.03360971452756
								],
								[
									144.71807132383063,
									-41.162551771815714
								],
								[
									144.74375451067968,
									-40.70397511165771
								],
								[
									145.39797814349484,
									-40.79254851660589
								]
							]
						],
						[
							[
								[
									143.56181115129996,
									-13.763655694232213
								],
								[
									143.92209923723894,
									-14.548310642152003
								],
								[
									144.56371382057486,
									-14.171176039285882
								],
								[
									144.89490807513354,
									-14.594457696188627
								],
								[
									145.37472374896348,
									-14.984976495018287
								],
								[
									145.27199100156727,
									-15.428205254785695
								],
								[
									145.48525963763578,
									-16.285672295804773
								],
								[
									145.63703331927698,
									-16.784918308176614
								],
								[
									145.8889042502677,
									-16.90692636481765
								],
								[
									146.1603088726645,
									-17.761654554925244
								],
								[
									146.0636739442787,
									-18.28007252367732
								],
								[
									146.3874784690196,
									-18.95827402107591
								],
								[
									147.47108157774792,
									-19.48072275154668
								],
								[
									148.1776017600425,
									-19.95593922290277
								],
								[
									148.84841352762325,
									-20.39120981209726
								],
								[
									148.7174654481956,
									-20.633468926681516
								],
								[
									149.28942020080208,
									-21.260510756111103
								],
								[
									149.67833703023067,
									-22.342511895438392
								],
								[
									150.07738244038862,
									-22.12278370533332
								],
								[
									150.4829390810152,
									-22.556142266533016
								],
								[
									150.72726525289121,
									-22.40240488046466
								],
								[
									150.89955447815228,
									-23.462236830338682
								],
								[
									151.60917524638424,
									-24.076256198830762
								],
								[
									152.07353966695908,
									-24.457886651306197
								],
								[
									152.85519738180594,
									-25.267501316023015
								],
								[
									153.13616214417678,
									-26.07117319102619
								],
								[
									153.16194868389042,
									-26.641319268502443
								],
								[
									153.0929089703486,
									-27.26029957449451
								],
								[
									153.5694690289442,
									-28.110066827102102
								],
								[
									153.51210818910025,
									-28.995077406532758
								],
								[
									153.33909549378708,
									-29.45820159273245
								],
								[
									153.06924116435889,
									-30.35024016695482
								],
								[
									153.08960167868182,
									-30.92364185966545
								],
								[
									152.8915775901394,
									-31.640445651985956
								],
								[
									152.45000247620536,
									-32.550002536755244
								],
								[
									151.70911746643682,
									-33.041342054986345
								],
								[
									151.34397179586242,
									-33.81602345147385
								],
								[
									151.01055545471516,
									-34.310360202777886
								],
								[
									150.71413943908905,
									-35.17345997491681
								],
								[
									150.32821984273326,
									-35.67187916437193
								],
								[
									150.07521203023228,
									-36.420205580390515
								],
								[
									149.94612430236717,
									-37.10905242284123
								],
								[
									149.99728397033616,
									-37.42526051203514
								],
								[
									149.42388227762555,
									-37.77268116633347
								],
								[
									148.30462243061592,
									-37.80906137466688
								],
								[
									147.3817330263153,
									-38.21921721776755
								],
								[
									146.92212283751135,
									-38.60653207779512
								],
								[
									146.3179219911548,
									-39.03575652441144
								],
								[
									145.48965213438058,
									-38.59376799901905
								],
								[
									144.87697635312819,
									-38.41744801203912
								],
								[
									145.03221235573298,
									-37.896187839510986
								],
								[
									144.48568240781404,
									-38.08532358169927
								],
								[
									143.6099735861961,
									-38.80946542740533
								],
								[
									142.745426873953,
									-38.538267510737526
								],
								[
									142.178329705982,
									-38.38003427505984
								],
								[
									141.6065816591047,
									-38.30851409276788
								],
								[
									140.63857872941324,
									-38.019332777662555
								],
								[
									139.99215823787435,
									-37.40293629328511
								],
								[
									139.80658816951407,
									-36.64360279718828
								],
								[
									139.57414757706525,
									-36.13836231867067
								],
								[
									139.0828080588341,
									-35.73275400161178
								],
								[
									138.12074791885632,
									-35.612296237939404
								],
								[
									138.44946170466503,
									-35.127261244447894
								],
								[
									138.2075643251067,
									-34.38472258884593
								],
								[
									137.71917036351616,
									-35.07682504653103
								],
								[
									136.82940555231474,
									-35.26053476332862
								],
								[
									137.3523710471085,
									-34.7073385556441
								],
								[
									137.50388634658836,
									-34.130267836240776
								],
								[
									137.89011600153768,
									-33.640478610978334
								],
								[
									137.81032759007914,
									-32.90000701266811
								],
								[
									136.99683719294038,
									-33.752771498348636
								],
								[
									136.37206912653167,
									-34.09476612725619
								],
								[
									135.98904341038437,
									-34.89011809666049
								],
								[
									135.20821251845413,
									-34.47867034275261
								],
								[
									135.2392183778292,
									-33.94795338311498
								],
								[
									134.61341678277464,
									-33.22277800876314
								],
								[
									134.08590376193914,
									-32.848072198214766
								],
								[
									134.27390262261704,
									-32.61723357516696
								],
								[
									132.99077680880984,
									-32.011224053680195
								],
								[
									132.2880806825049,
									-31.98264698662277
								],
								[
									131.32633060112093,
									-31.49580331800105
								],
								[
									129.5357938986397,
									-31.590422865527486
								],
								[
									128.24093753470223,
									-31.94848886487786
								],
								[
									127.10286746633832,
									-32.28226694105105
								],
								[
									126.14871382050117,
									-32.21596607842061
								],
								[
									125.08862348846563,
									-32.728751316052836
								],
								[
									124.22164798390494,
									-32.95948658623607
								],
								[
									124.02894656788854,
									-33.483847344701715
								],
								[
									123.65966678273074,
									-33.89017913181273
								],
								[
									122.81103641163364,
									-33.91446705498984
								],
								[
									122.18306440642286,
									-34.003402194964224
								],
								[
									121.2991907085026,
									-33.82103606540613
								],
								[
									120.58026818245813,
									-33.930176690406626
								],
								[
									119.89369510302825,
									-33.976065362281815
								],
								[
									119.29889936734881,
									-34.50936614353397
								],
								[
									119.00734093635802,
									-34.464149265278536
								],
								[
									118.5057178081008,
									-34.7468193499151
								],
								[
									118.02497195848954,
									-35.064732761374714
								],
								[
									117.29550744025747,
									-35.02545867283287
								],
								[
									116.62510908413495,
									-35.025096937806836
								],
								[
									115.56434695847972,
									-34.386427911111554
								],
								[
									115.02680870977954,
									-34.196517022438925
								],
								[
									115.04861616420678,
									-33.62342538832203
								],
								[
									115.5451233256671,
									-33.48725798923296
								],
								[
									115.71467370001668,
									-33.25957162855495
								],
								[
									115.6793786967614,
									-32.90036874769413
								],
								[
									115.80164513556397,
									-32.20506235120703
								],
								[
									115.68961063035513,
									-31.61243702568379
								],
								[
									115.16090905157697,
									-30.601594333622458
								],
								[
									114.99704308477945,
									-30.03072478609417
								],
								[
									115.04003787644629,
									-29.461095472940798
								],
								[
									114.64197431850201,
									-28.810230808224716
								],
								[
									114.61649783738218,
									-28.516398614213045
								],
								[
									114.17357913620847,
									-28.11807667410733
								],
								[
									114.04888390508816,
									-27.334765313427127
								],
								[
									113.4774975932369,
									-26.543134047147902
								],
								[
									113.3389530782625,
									-26.116545098578484
								],
								[
									113.77835778204027,
									-26.54902516042918
								],
								[
									113.44096235560662,
									-25.62127817149316
								],
								[
									113.93690107631167,
									-25.911234633082884
								],
								[
									114.23285200404732,
									-26.298446140245872
								],
								[
									114.21616051641703,
									-25.78628101980111
								],
								[
									113.72125532435771,
									-24.998938897402127
								],
								[
									113.62534386602405,
									-24.683971042583153
								],
								[
									113.39352339076268,
									-24.38476449961327
								],
								[
									113.50204389857564,
									-23.806350192970257
								],
								[
									113.70699262904517,
									-23.560215345964068
								],
								[
									113.8434184102957,
									-23.05998748137874
								],
								[
									113.7365515483161,
									-22.47547535572538
								],
								[
									114.1497563009219,
									-21.755881036061012
								],
								[
									114.22530724493268,
									-22.517488295178637
								],
								[
									114.6477620789187,
									-21.829519952076907
								],
								[
									115.46016727097933,
									-21.495173435148544
								],
								[
									115.94737267462702,
									-21.06868783944371
								],
								[
									116.71161543179156,
									-20.70168181730682
								],
								[
									117.16631635952771,
									-20.623598728113805
								],
								[
									117.44154503791427,
									-20.746898695562166
								],
								[
									118.22955895393298,
									-20.374208265873236
								],
								[
									118.83608523974274,
									-20.26331064217483
								],
								[
									118.98780724495177,
									-20.044202569257322
								],
								[
									119.25249393115067,
									-19.95294198982984
								],
								[
									119.80522505094459,
									-19.976506442954985
								],
								[
									120.85622033089666,
									-19.68370777758919
								],
								[
									121.39985639860723,
									-19.239755547769732
								],
								[
									121.65513797412908,
									-18.705317885007133
								],
								[
									122.24166548064179,
									-18.19764861417177
								],
								[
									122.28662397673568,
									-17.798603204013915
								],
								[
									122.31277225147542,
									-17.25496713630345
								],
								[
									123.01257449757193,
									-16.405199883695857
								],
								[
									123.43378909718305,
									-17.26855803799623
								],
								[
									123.85934451710662,
									-17.069035332917252
								],
								[
									123.50324222218327,
									-16.596506036040367
								],
								[
									123.81707319549193,
									-16.111316013251994
								],
								[
									124.25828657439988,
									-16.327943617419564
								],
								[
									124.37972619028582,
									-15.567059828353976
								],
								[
									124.92615278534007,
									-15.075100192935324
								],
								[
									125.1672750184139,
									-14.680395603090005
								],
								[
									125.67008670461385,
									-14.510070082256021
								],
								[
									125.68579634003052,
									-14.230655612853838
								],
								[
									126.12514936737611,
									-14.347340996968953
								],
								[
									126.14282270721989,
									-14.095986830301214
								],
								[
									126.58258914602376,
									-13.952791436420412
								],
								[
									127.06586714081735,
									-13.817967624570926
								],
								[
									127.80463341686195,
									-14.276906019755046
								],
								[
									128.35968997610897,
									-14.869169610252257
								],
								[
									128.98554324759593,
									-14.875990899314743
								],
								[
									129.62147342337963,
									-14.969783623924556
								],
								[
									129.40960005098302,
									-14.420669854391036
								],
								[
									129.88864057832862,
									-13.618703301653483
								],
								[
									130.33946577364296,
									-13.357375583553477
								],
								[
									130.183506300986,
									-13.107520033422304
								],
								[
									130.617795037967,
									-12.536392103732467
								],
								[
									131.22349450086003,
									-12.183648776908115
								],
								[
									131.73509118054952,
									-12.302452894747162
								],
								[
									132.57529829318312,
									-12.114040622611014
								],
								[
									132.55721154188106,
									-11.603012383676685
								],
								[
									131.82469811414367,
									-11.273781833545101
								],
								[
									132.35722374891142,
									-11.128519382372644
								],
								[
									133.01956058159644,
									-11.376411228076847
								],
								[
									133.55084598198906,
									-11.786515394745138
								],
								[
									134.393068475482,
									-12.042365411022175
								],
								[
									134.67863244032705,
									-11.941182956594702
								],
								[
									135.29849124566803,
									-12.248606052299053
								],
								[
									135.88269331272764,
									-11.962266940969798
								],
								[
									136.25838097548947,
									-12.04934172938161
								],
								[
									136.49247521377166,
									-11.857208754120393
								],
								[
									136.95162031468502,
									-12.351958916882737
								],
								[
									136.68512495335577,
									-12.887223402562057
								],
								[
									136.30540652887512,
									-13.291229750219898
								],
								[
									135.96175825413414,
									-13.324509372615893
								],
								[
									136.07761681533256,
									-13.724278252825783
								],
								[
									135.78383629775325,
									-14.223989353088214
								],
								[
									135.42866417861123,
									-14.7154322241839
								],
								[
									135.5001843609032,
									-14.997740573794431
								],
								[
									136.2951745952814,
									-15.550264987859123
								],
								[
									137.0653601421595,
									-15.870762220933358
								],
								[
									137.58047081924482,
									-16.215082289294088
								],
								[
									138.303217401279,
									-16.80760426195266
								],
								[
									138.5851640158634,
									-16.806622409739177
								],
								[
									139.1085429221155,
									-17.06267913174537
								],
								[
									139.26057498591823,
									-17.371600843986187
								],
								[
									140.2152453960783,
									-17.710804945550066
								],
								[
									140.87546349503927,
									-17.369068698803943
								],
								[
									141.0711104676963,
									-16.832047214426723
								],
								[
									141.27409549373883,
									-16.388870131091608
								],
								[
									141.3982222841038,
									-15.840531508042588
								],
								[
									141.70218305884467,
									-15.044921156476931
								],
								[
									141.5633801617087,
									-14.56133310308951
								],
								[
									141.63552046118812,
									-14.270394789286286
								],
								[
									141.51986860571898,
									-13.698078301653808
								],
								[
									141.65092003801104,
									-12.944687595270565
								],
								[
									141.84269127824624,
									-12.74154753993119
								],
								[
									141.6869901877508,
									-12.407614434461138
								],
								[
									141.92862918514757,
									-11.877465915578782
								],
								[
									142.118488397388,
									-11.328042087451621
								],
								[
									142.14370649634637,
									-11.042736504768143
								],
								[
									142.51526004452498,
									-10.668185723516643
								],
								[
									142.79731001197408,
									-11.157354831591519
								],
								[
									142.8667631369743,
									-11.784706719614931
								],
								[
									143.1159468934857,
									-11.905629571177911
								],
								[
									143.1586316265588,
									-12.325655612846191
								],
								[
									143.5221236512999,
									-12.834358412327433
								],
								[
									143.5971578309877,
									-13.400422051652598
								],
								[
									143.56181115129996,
									-13.763655694232213
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Australia",
					"sov_a3": "AU1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "Australia",
					"adm0_a3": "AUS",
					"geou_dif": 0,
					"geounit": "Australia",
					"gu_a3": "AUS",
					"su_dif": 0,
					"subunit": "Australia",
					"su_a3": "AUS",
					"brk_diff": 0,
					"name": "Australia",
					"name_long": "Australia",
					"brk_a3": "AUS",
					"brk_name": "Australia",
					"brk_group": "",
					"abbrev": "Auz.",
					"postal": "AU",
					"formal_en": "Commonwealth of Australia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Australia",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 2,
					"mapcolor9": 2,
					"mapcolor13": 7,
					"pop_est": 21262641,
					"gdp_md_est": 800200,
					"pop_year": -99,
					"lastcensus": 2006,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AU",
					"iso_a3": "AUS",
					"iso_n3": "036",
					"un_a3": "036",
					"wb_a2": "AU",
					"wb_a3": "AUS",
					"woe_id": -99,
					"adm0_a3_is": "AUS",
					"adm0_a3_us": "AUS",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Oceania",
					"region_un": "Oceania",
					"subregion": "Australia and New Zealand",
					"region_wb": "East Asia & Pacific",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								16.979666782304037,
								48.123497015976305
							],
							[
								16.90375410326726,
								47.71486562762833
							],
							[
								16.340584344150415,
								47.71290192320123
							],
							[
								16.534267612380376,
								47.49617096616912
							],
							[
								16.202298211337364,
								46.85238597267696
							],
							[
								16.011663852612656,
								46.6836107448117
							],
							[
								15.137091912504985,
								46.65870270444703
							],
							[
								14.63247155117483,
								46.43181732846955
							],
							[
								13.806475457421527,
								46.509306138691215
							],
							[
								12.376485223040817,
								46.76755910906985
							],
							[
								12.153088006243054,
								47.11539317482645
							],
							[
								11.16482791509327,
								46.94157949481273
							],
							[
								11.048555942436536,
								46.75135854754634
							],
							[
								10.44270145024663,
								46.89354625099743
							],
							[
								9.932448357796659,
								46.92072805438296
							],
							[
								9.479969516649021,
								47.102809963563374
							],
							[
								9.632931756232978,
								47.34760122332999
							],
							[
								9.59422610844635,
								47.52505809182027
							],
							[
								9.89606814946319,
								47.580196845075704
							],
							[
								10.402083774465211,
								47.30248769793916
							],
							[
								10.544504021861627,
								47.56639923765377
							],
							[
								11.426414015354737,
								47.523766181012974
							],
							[
								12.141357456112788,
								47.703083401065776
							],
							[
								12.620759718484493,
								47.67238760028441
							],
							[
								12.932626987365948,
								47.467645575544
							],
							[
								13.02585127122049,
								47.63758352313583
							],
							[
								12.884102817443903,
								48.28914581968792
							],
							[
								13.243357374737,
								48.416114813829054
							],
							[
								13.595945672264437,
								48.87717194273715
							],
							[
								14.338897739324722,
								48.55530528420721
							],
							[
								14.901447381254057,
								48.964401760445824
							],
							[
								15.253415561593982,
								49.03907420510758
							],
							[
								16.02964725105022,
								48.73389903420793
							],
							[
								16.499282667718774,
								48.78580801044511
							],
							[
								16.960288120194576,
								48.5969823268506
							],
							[
								16.879982944413,
								48.47001333270947
							],
							[
								16.979666782304037,
								48.123497015976305
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Austria",
					"sov_a3": "AUT",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Austria",
					"adm0_a3": "AUT",
					"geou_dif": 0,
					"geounit": "Austria",
					"gu_a3": "AUT",
					"su_dif": 0,
					"subunit": "Austria",
					"su_a3": "AUT",
					"brk_diff": 0,
					"name": "Austria",
					"name_long": "Austria",
					"brk_a3": "AUT",
					"brk_name": "Austria",
					"brk_group": "",
					"abbrev": "Aust.",
					"postal": "A",
					"formal_en": "Republic of Austria",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Austria",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 1,
					"mapcolor9": 3,
					"mapcolor13": 4,
					"pop_est": 8210281,
					"gdp_md_est": 329500,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AT",
					"iso_a3": "AUT",
					"iso_n3": "040",
					"un_a3": "040",
					"wb_a2": "AT",
					"wb_a3": "AUT",
					"woe_id": -99,
					"adm0_a3_is": "AUT",
					"adm0_a3_us": "AUT",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Western Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									46.14362308124882,
									38.74120148371222
								],
								[
									45.457721795438744,
									38.874139105783115
								],
								[
									44.95268802265028,
									39.33576467544643
								],
								[
									44.793989699082005,
									39.713002631177034
								],
								[
									45.0019873390568,
									39.7400035670496
								],
								[
									45.29814497252144,
									39.471751207022436
								],
								[
									45.73997846861701,
									39.473999131827156
								],
								[
									45.7353792661431,
									39.3197191432198
								],
								[
									46.14362308124882,
									38.74120148371222
								]
							]
						],
						[
							[
								[
									46.48349897643246,
									39.464154771475535
								],
								[
									46.034534132680704,
									39.62802073827305
								],
								[
									45.61001224140293,
									39.89999380142518
								],
								[
									45.89190717955515,
									40.218475653639985
								],
								[
									45.35917483905817,
									40.56150381119349
								],
								[
									45.560351189970476,
									40.812289537105954
								],
								[
									45.1794958839794,
									40.98535390885144
								],
								[
									44.97248009621816,
									41.24812856705563
								],
								[
									45.21742638528164,
									41.41145193131405
								],
								[
									45.962600538930445,
									41.1238725856098
								],
								[
									46.501637404166985,
									41.06444468847411
								],
								[
									46.637908156120574,
									41.181672675128226
								],
								[
									46.145431756379,
									41.72280243587264
								],
								[
									46.404950799348825,
									41.86067515722735
								],
								[
									46.68607059101666,
									41.827137152669906
								],
								[
									47.37331546406622,
									41.219732367511256
								],
								[
									47.81566572448472,
									41.15141612402135
								],
								[
									47.98728315612604,
									41.40581920019423
								],
								[
									48.58435265482629,
									41.808869533854676
								],
								[
									49.11026370626067,
									41.282286688800525
								],
								[
									49.6189148293096,
									40.57292430272997
								],
								[
									50.0848295428531,
									40.526157131505784
								],
								[
									50.39282107931271,
									40.256561184239104
								],
								[
									49.5692021014448,
									40.17610097916071
								],
								[
									49.39525923035043,
									39.39948171646225
								],
								[
									49.223228387250714,
									39.04921885838792
								],
								[
									48.85653242370759,
									38.81548635513178
								],
								[
									48.88324913920255,
									38.320245266262646
								],
								[
									48.634375441284845,
									38.27037750910094
								],
								[
									48.010744256386516,
									38.794014797514535
								],
								[
									48.355529412637935,
									39.28876496027689
								],
								[
									48.06009524922527,
									39.582235419262446
								],
								[
									47.685079380083124,
									39.50836395930119
								],
								[
									46.50571984231797,
									38.770605373686266
								],
								[
									46.48349897643246,
									39.464154771475535
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Azerbaijan",
					"sov_a3": "AZE",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Azerbaijan",
					"adm0_a3": "AZE",
					"geou_dif": 0,
					"geounit": "Azerbaijan",
					"gu_a3": "AZE",
					"su_dif": 0,
					"subunit": "Azerbaijan",
					"su_a3": "AZE",
					"brk_diff": 0,
					"name": "Azerbaijan",
					"name_long": "Azerbaijan",
					"brk_a3": "AZE",
					"brk_name": "Azerbaijan",
					"brk_group": "",
					"abbrev": "Aze.",
					"postal": "AZ",
					"formal_en": "Republic of Azerbaijan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Azerbaijan",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 6,
					"mapcolor9": 5,
					"mapcolor13": 8,
					"pop_est": 8238672,
					"gdp_md_est": 77610,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "AZ",
					"iso_a3": "AZE",
					"iso_n3": "031",
					"un_a3": "031",
					"wb_a2": "AZ",
					"wb_a3": "AZE",
					"woe_id": -99,
					"adm0_a3_is": "AZE",
					"adm0_a3_us": "AZE",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								29.339997592900346,
								-4.4999834122940925
							],
							[
								29.276383904749053,
								-3.293907159034063
							],
							[
								29.024926385216787,
								-2.8392579077301576
							],
							[
								29.632176141078588,
								-2.917857761246097
							],
							[
								29.93835900240794,
								-2.348486830254238
							],
							[
								30.46969607923299,
								-2.413857517103459
							],
							[
								30.527677036264464,
								-2.807631931167535
							],
							[
								30.7430127296247,
								-3.034284763199686
							],
							[
								30.752262811004954,
								-3.3593295223155697
							],
							[
								30.505559523243566,
								-3.5685673966653653
							],
							[
								30.11633263522117,
								-4.090137627787243
							],
							[
								29.753512404099922,
								-4.452389418153281
							],
							[
								29.339997592900346,
								-4.4999834122940925
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Burundi",
					"sov_a3": "BDI",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Burundi",
					"adm0_a3": "BDI",
					"geou_dif": 0,
					"geounit": "Burundi",
					"gu_a3": "BDI",
					"su_dif": 0,
					"subunit": "Burundi",
					"su_a3": "BDI",
					"brk_diff": 0,
					"name": "Burundi",
					"name_long": "Burundi",
					"brk_a3": "BDI",
					"brk_name": "Burundi",
					"brk_group": "",
					"abbrev": "Bur.",
					"postal": "BI",
					"formal_en": "Republic of Burundi",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Burundi",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 2,
					"mapcolor9": 5,
					"mapcolor13": 8,
					"pop_est": 8988091,
					"gdp_md_est": 3102,
					"pop_year": -99,
					"lastcensus": 2008,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BI",
					"iso_a3": "BDI",
					"iso_n3": "108",
					"un_a3": "108",
					"wb_a2": "BI",
					"wb_a3": "BDI",
					"woe_id": -99,
					"adm0_a3_is": "BDI",
					"adm0_a3_us": "BDI",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								4.047071160507528,
								51.26725861266857
							],
							[
								4.973991326526914,
								51.47502370869813
							],
							[
								5.606975945670001,
								51.03729848896978
							],
							[
								6.15665815595878,
								50.80372101501058
							],
							[
								6.043073357781111,
								50.128051662794235
							],
							[
								5.782417433300907,
								50.09032786722122
							],
							[
								5.674051954784829,
								49.529483547557504
							],
							[
								4.79922163251581,
								49.985373033236385
							],
							[
								4.2860229834250845,
								49.907496649772554
							],
							[
								3.5881844417556863,
								50.37899241800358
							],
							[
								3.1232515804258014,
								50.780363267614575
							],
							[
								2.658422071960274,
								50.796848049515745
							],
							[
								2.5135730322461427,
								51.14850617126183
							],
							[
								3.3149711442285366,
								51.345780951536085
							],
							[
								4.047071160507528,
								51.26725861266857
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Belgium",
					"sov_a3": "BEL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Belgium",
					"adm0_a3": "BEL",
					"geou_dif": 0,
					"geounit": "Belgium",
					"gu_a3": "BEL",
					"su_dif": 0,
					"subunit": "Belgium",
					"su_a3": "BEL",
					"brk_diff": 0,
					"name": "Belgium",
					"name_long": "Belgium",
					"brk_a3": "BEL",
					"brk_name": "Belgium",
					"brk_group": "",
					"abbrev": "Belg.",
					"postal": "B",
					"formal_en": "Kingdom of Belgium",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Belgium",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 2,
					"mapcolor9": 1,
					"mapcolor13": 8,
					"pop_est": 10414336,
					"gdp_md_est": 389300,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BE",
					"iso_a3": "BEL",
					"iso_n3": "056",
					"un_a3": "056",
					"wb_a2": "BE",
					"wb_a3": "BEL",
					"woe_id": -99,
					"adm0_a3_is": "BEL",
					"adm0_a3_us": "BEL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Western Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								2.6917016943562544,
								6.258817246928629
							],
							[
								1.8652405127123188,
								6.142157701029731
							],
							[
								1.618950636409238,
								6.832038072126238
							],
							[
								1.664477573258381,
								9.12859039960938
							],
							[
								1.46304284018467,
								9.334624335157088
							],
							[
								1.425060662450136,
								9.825395412633
							],
							[
								1.0777950374487375,
								10.175606594275024
							],
							[
								0.7723356461714843,
								10.470808213742359
							],
							[
								0.8995630224740694,
								10.99733938236426
							],
							[
								1.2434696793764886,
								11.110510769083461
							],
							[
								1.4471781754710662,
								11.547719224488858
							],
							[
								1.9359855485198807,
								11.641150214072553
							],
							[
								2.1544735042499212,
								11.940150051313339
							],
							[
								2.49016360841793,
								12.233052069543675
							],
							[
								2.848643019226671,
								12.235635891158267
							],
							[
								3.611180454125559,
								11.660167141155968
							],
							[
								3.572216424177469,
								11.32793935795152
							],
							[
								3.7971122575117136,
								10.734745591673105
							],
							[
								3.600070021182802,
								10.332186184119408
							],
							[
								3.7054382666259187,
								10.063210354040208
							],
							[
								3.2203515967021015,
								9.444152533399702
							],
							[
								2.912308383810256,
								9.137607937044322
							],
							[
								2.723792758809509,
								8.50684540448971
							],
							[
								2.7490625342002204,
								7.870734361192888
							],
							[
								2.6917016943562544,
								6.258817246928629
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Benin",
					"sov_a3": "BEN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Benin",
					"adm0_a3": "BEN",
					"geou_dif": 0,
					"geounit": "Benin",
					"gu_a3": "BEN",
					"su_dif": 0,
					"subunit": "Benin",
					"su_a3": "BEN",
					"brk_diff": 0,
					"name": "Benin",
					"name_long": "Benin",
					"brk_a3": "BEN",
					"brk_name": "Benin",
					"brk_group": "",
					"abbrev": "Benin",
					"postal": "BJ",
					"formal_en": "Republic of Benin",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Benin",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 2,
					"mapcolor9": 2,
					"mapcolor13": 12,
					"pop_est": 8791832,
					"gdp_md_est": 12830,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BJ",
					"iso_a3": "BEN",
					"iso_n3": "204",
					"un_a3": "204",
					"wb_a2": "BJ",
					"wb_a3": "BEN",
					"woe_id": -99,
					"adm0_a3_is": "BEN",
					"adm0_a3_us": "BEN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-2.8274963037127065,
								9.642460842319778
							],
							[
								-3.511898972986273,
								9.90032623945622
							],
							[
								-3.9804491845766847,
								9.8623440617217
							],
							[
								-4.3302469547603835,
								9.610834865757141
							],
							[
								-4.7798835921319665,
								9.821984768101743
							],
							[
								-4.954653286143099,
								10.152713934769736
							],
							[
								-5.404341599946974,
								10.370736802609146
							],
							[
								-5.470564947929006,
								10.951269842976048
							],
							[
								-5.1978425765086484,
								11.37514577885014
							],
							[
								-5.220941941743121,
								11.713858954307227
							],
							[
								-4.427166103523803,
								12.542645575404295
							],
							[
								-4.28040503581488,
								13.228443508349741
							],
							[
								-4.006390753587226,
								13.472485459848116
							],
							[
								-3.522802700199861,
								13.337661647998615
							],
							[
								-3.1037068343127596,
								13.541266791228594
							],
							[
								-2.9676944645205765,
								13.79815033615151
							],
							[
								-2.1918245100903846,
								14.246417548067356
							],
							[
								-2.001035122068771,
								14.559008287000893
							],
							[
								-1.0663634912056636,
								14.973815009007765
							],
							[
								-0.5158544580003479,
								15.116157741755728
							],
							[
								-0.2662572900305804,
								14.924308986872148
							],
							[
								0.3748922054146817,
								14.92890818934613
							],
							[
								0.29564639649510127,
								14.444234930880654
							],
							[
								0.429927605805517,
								13.988733018443924
							],
							[
								0.9930456884900708,
								13.335749620003824
							],
							[
								1.0241032242974768,
								12.851825669806574
							],
							[
								2.177107781593776,
								12.625017808477535
							],
							[
								2.1544735042499212,
								11.940150051313339
							],
							[
								1.9359855485198807,
								11.641150214072553
							],
							[
								1.4471781754710662,
								11.547719224488858
							],
							[
								1.2434696793764886,
								11.110510769083461
							],
							[
								0.8995630224740694,
								10.99733938236426
							],
							[
								0.023802524423700785,
								11.018681748900804
							],
							[
								-0.43870154458858224,
								11.098340969278722
							],
							[
								-0.7615758935481834,
								10.936929633015055
							],
							[
								-1.2033577132114317,
								11.009819240762738
							],
							[
								-2.9404093082704605,
								10.962690334512558
							],
							[
								-2.9638962467471117,
								10.395334784380083
							],
							[
								-2.8274963037127065,
								9.642460842319778
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Burkina Faso",
					"sov_a3": "BFA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Burkina Faso",
					"adm0_a3": "BFA",
					"geou_dif": 0,
					"geounit": "Burkina Faso",
					"gu_a3": "BFA",
					"su_dif": 0,
					"subunit": "Burkina Faso",
					"su_a3": "BFA",
					"brk_diff": 0,
					"name": "Burkina Faso",
					"name_long": "Burkina Faso",
					"brk_a3": "BFA",
					"brk_name": "Burkina Faso",
					"brk_group": "",
					"abbrev": "B.F.",
					"postal": "BF",
					"formal_en": "Burkina Faso",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Burkina Faso",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 1,
					"mapcolor9": 5,
					"mapcolor13": 11,
					"pop_est": 15746232,
					"gdp_md_est": 17820,
					"pop_year": -99,
					"lastcensus": 2006,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BF",
					"iso_a3": "BFA",
					"iso_n3": "854",
					"un_a3": "854",
					"wb_a2": "BF",
					"wb_a3": "BFA",
					"woe_id": -99,
					"adm0_a3_is": "BFA",
					"adm0_a3_us": "BFA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 12,
					"long_len": 12,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								92.67272098182556,
								22.041238918541254
							],
							[
								92.65225711463799,
								21.324047552978485
							],
							[
								92.30323449093868,
								21.47548533780982
							],
							[
								92.36855350135562,
								20.670883287025347
							],
							[
								92.08288618364614,
								21.19219513598577
							],
							[
								92.02521528520839,
								21.701569729086767
							],
							[
								91.83489098507744,
								22.182935695885565
							],
							[
								91.41708702999766,
								22.76501902922122
							],
							[
								90.49600630082728,
								22.80501658781513
							],
							[
								90.58695682166098,
								22.392793687422866
							],
							[
								90.27297081905556,
								21.83636770272011
							],
							[
								89.84746707556428,
								22.039146023033425
							],
							[
								89.70204959509493,
								21.857115790285306
							],
							[
								89.41886274613549,
								21.9661789006373
							],
							[
								89.03196129756623,
								22.055708319582976
							],
							[
								88.87631188350309,
								22.87914642993783
							],
							[
								88.52976972855379,
								23.631141872649167
							],
							[
								88.69994022009092,
								24.23371491138856
							],
							[
								88.08442223506242,
								24.501657212821925
							],
							[
								88.30637251175602,
								24.866079413344206
							],
							[
								88.93155398962308,
								25.238692328384776
							],
							[
								88.2097892598025,
								25.768065700782714
							],
							[
								88.56304935094977,
								26.446525580342723
							],
							[
								89.35509402868729,
								26.014407253518073
							],
							[
								89.83248091019962,
								25.96508209889548
							],
							[
								89.92069258012185,
								25.26974986419218
							],
							[
								90.87221072791212,
								25.132600612889547
							],
							[
								91.79959598182208,
								25.147431748957317
							],
							[
								92.37620161333481,
								24.976692816664965
							],
							[
								91.91509280799443,
								24.130413723237112
							],
							[
								91.46772993364368,
								24.072639471934792
							],
							[
								91.15896325069973,
								23.50352692310439
							],
							[
								91.70647505083211,
								22.985263983649187
							],
							[
								91.86992760617132,
								23.624346421802784
							],
							[
								92.14603478390681,
								23.627498684172593
							],
							[
								92.67272098182556,
								22.041238918541254
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Bangladesh",
					"sov_a3": "BGD",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Bangladesh",
					"adm0_a3": "BGD",
					"geou_dif": 0,
					"geounit": "Bangladesh",
					"gu_a3": "BGD",
					"su_dif": 0,
					"subunit": "Bangladesh",
					"su_a3": "BGD",
					"brk_diff": 0,
					"name": "Bangladesh",
					"name_long": "Bangladesh",
					"brk_a3": "BGD",
					"brk_name": "Bangladesh",
					"brk_group": "",
					"abbrev": "Bang.",
					"postal": "BD",
					"formal_en": "People's Republic of Bangladesh",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Bangladesh",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 4,
					"mapcolor9": 7,
					"mapcolor13": 7,
					"pop_est": 156050883,
					"gdp_md_est": 224000,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BD",
					"iso_a3": "BGD",
					"iso_n3": "050",
					"un_a3": "050",
					"wb_a2": "BD",
					"wb_a3": "BGD",
					"woe_id": -99,
					"adm0_a3_is": "BGD",
					"adm0_a3_us": "BGD",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Southern Asia",
					"region_wb": "South Asia",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								22.65714969248299,
								44.23492300066128
							],
							[
								22.944832391051847,
								43.82378530534713
							],
							[
								23.332302280376325,
								43.897010809904714
							],
							[
								24.100679152124172,
								43.74105133724785
							],
							[
								25.569271681426926,
								43.68844472917472
							],
							[
								26.065158725699746,
								43.94349376075127
							],
							[
								27.242399529740908,
								44.175986029632405
							],
							[
								27.970107049275075,
								43.81246816667522
							],
							[
								28.558081495891997,
								43.70746165625813
							],
							[
								28.03909508638472,
								43.293171698574184
							],
							[
								27.67389773937805,
								42.57789236100622
							],
							[
								27.99672041190539,
								42.00735871028779
							],
							[
								27.13573937349048,
								42.14148489030134
							],
							[
								26.1170418637208,
								41.82690460872456
							],
							[
								26.106138136507212,
								41.32889883072778
							],
							[
								25.197201368925448,
								41.23448598893053
							],
							[
								24.492644891058035,
								41.583896185872035
							],
							[
								23.692073601992348,
								41.309080918943856
							],
							[
								22.952377150166452,
								41.33799388281115
							],
							[
								22.88137373219743,
								41.99929718685026
							],
							[
								22.380525750424592,
								42.32025950781509
							],
							[
								22.54501183440962,
								42.46136200618804
							],
							[
								22.43659467946128,
								42.580321153323936
							],
							[
								22.60480146657133,
								42.898518785161144
							],
							[
								22.986018507588483,
								43.211161200526966
							],
							[
								22.50015669118028,
								43.64281443946099
							],
							[
								22.410446404721597,
								44.008063462899955
							],
							[
								22.65714969248299,
								44.23492300066128
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Bulgaria",
					"sov_a3": "BGR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Bulgaria",
					"adm0_a3": "BGR",
					"geou_dif": 0,
					"geounit": "Bulgaria",
					"gu_a3": "BGR",
					"su_dif": 0,
					"subunit": "Bulgaria",
					"su_a3": "BGR",
					"brk_diff": 0,
					"name": "Bulgaria",
					"name_long": "Bulgaria",
					"brk_a3": "BGR",
					"brk_name": "Bulgaria",
					"brk_group": "",
					"abbrev": "Bulg.",
					"postal": "BG",
					"formal_en": "Republic of Bulgaria",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Bulgaria",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 5,
					"mapcolor9": 1,
					"mapcolor13": 8,
					"pop_est": 7204687,
					"gdp_md_est": 93750,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BG",
					"iso_a3": "BGR",
					"iso_n3": "100",
					"un_a3": "100",
					"wb_a2": "BG",
					"wb_a3": "BGR",
					"woe_id": -99,
					"adm0_a3_is": "BGR",
					"adm0_a3_us": "BGR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									-77.53465999999997,
									23.75974999999997
								],
								[
									-77.78,
									23.70999999999998
								],
								[
									-78.03405000000004,
									24.28615000000002
								],
								[
									-78.40847999999997,
									24.57564000000002
								],
								[
									-78.19086999999999,
									25.21029999999999
								],
								[
									-77.89000000000001,
									25.16999999999996
								],
								[
									-77.53999999999994,
									24.340000000000032
								],
								[
									-77.53465999999997,
									23.75974999999997
								]
							]
						],
						[
							[
								[
									-77.82,
									26.58000000000004
								],
								[
									-78.90999999999994,
									26.419999999999987
								],
								[
									-78.97999999999996,
									26.789999999999992
								],
								[
									-78.50999999999999,
									26.870000000000005
								],
								[
									-77.85000000000002,
									26.839999999999975
								],
								[
									-77.82,
									26.58000000000004
								]
							]
						],
						[
							[
								[
									-76.99999999999994,
									26.590000000000032
								],
								[
									-77.17254999999997,
									25.87917999999999
								],
								[
									-77.35640999999998,
									26.007349999999974
								],
								[
									-77.33999999999997,
									26.53
								],
								[
									-77.78801999999993,
									26.925160000000062
								],
								[
									-77.78999999999999,
									27.04000000000005
								],
								[
									-76.99999999999994,
									26.590000000000032
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "The Bahamas",
					"sov_a3": "BHS",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "The Bahamas",
					"adm0_a3": "BHS",
					"geou_dif": 0,
					"geounit": "The Bahamas",
					"gu_a3": "BHS",
					"su_dif": 0,
					"subunit": "The Bahamas",
					"su_a3": "BHS",
					"brk_diff": 0,
					"name": "Bahamas",
					"name_long": "Bahamas",
					"brk_a3": "BHS",
					"brk_name": "Bahamas",
					"brk_group": "",
					"abbrev": "Bhs.",
					"postal": "BS",
					"formal_en": "Commonwealth of the Bahamas",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Bahamas, The",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 1,
					"mapcolor9": 2,
					"mapcolor13": 5,
					"pop_est": 309156,
					"gdp_md_est": 9093,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BS",
					"iso_a3": "BHS",
					"iso_n3": "044",
					"un_a3": "044",
					"wb_a2": "BS",
					"wb_a3": "BHS",
					"woe_id": -99,
					"adm0_a3_is": "BHS",
					"adm0_a3_us": "BHS",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Caribbean",
					"region_wb": "Latin America & Caribbean",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								19.00548628101012,
								44.86023366960916
							],
							[
								19.36802999999992,
								44.863000000000056
							],
							[
								19.11761000000007,
								44.42307000000011
							],
							[
								19.59976000000006,
								44.03846999999996
							],
							[
								19.454000000000065,
								43.56810000000013
							],
							[
								19.218519999999955,
								43.52384000000001
							],
							[
								19.03165000000007,
								43.432529999999986
							],
							[
								18.706480000000056,
								43.200109999999995
							],
							[
								18.559999999999945,
								42.64999999999998
							],
							[
								17.674921502358984,
								43.02856252702361
							],
							[
								17.297373488034452,
								43.44634064388737
							],
							[
								16.91615644701733,
								43.66772247982567
							],
							[
								16.456442905348865,
								44.04123973243128
							],
							[
								16.23966027188453,
								44.35114329688571
							],
							[
								15.750026075918981,
								44.818711656262565
							],
							[
								15.959367303133376,
								45.23377676043094
							],
							[
								16.318156772535872,
								45.00412669532591
							],
							[
								16.534939406000206,
								45.21160757097772
							],
							[
								17.002146030351014,
								45.23377676043094
							],
							[
								17.861783481526402,
								45.067740383477144
							],
							[
								18.553214145591653,
								45.08158966733146
							],
							[
								19.00548628101012,
								44.86023366960916
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Bosnia and Herzegovina",
					"sov_a3": "BIH",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Bosnia and Herzegovina",
					"adm0_a3": "BIH",
					"geou_dif": 0,
					"geounit": "Bosnia and Herzegovina",
					"gu_a3": "BIH",
					"su_dif": 0,
					"subunit": "Bosnia and Herzegovina",
					"su_a3": "BIH",
					"brk_diff": 0,
					"name": "Bosnia and Herz.",
					"name_long": "Bosnia and Herzegovina",
					"brk_a3": "BIH",
					"brk_name": "Bosnia and Herz.",
					"brk_group": "",
					"abbrev": "B.H.",
					"postal": "BiH",
					"formal_en": "Bosnia and Herzegovina",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Bosnia and Herzegovina",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 1,
					"mapcolor9": 1,
					"mapcolor13": 2,
					"pop_est": 4613414,
					"gdp_md_est": 29700,
					"pop_year": -99,
					"lastcensus": 1991,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BA",
					"iso_a3": "BIH",
					"iso_n3": "070",
					"un_a3": "070",
					"wb_a2": "BA",
					"wb_a3": "BIH",
					"woe_id": -99,
					"adm0_a3_is": "BIH",
					"adm0_a3_us": "BIH",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 16,
					"long_len": 22,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								23.48412763844985,
								53.91249766704114
							],
							[
								24.450683628037037,
								53.905702216194754
							],
							[
								25.536353794056993,
								54.28242340760253
							],
							[
								25.7684326514798,
								54.84696259217509
							],
							[
								26.58827924979039,
								55.16717560487167
							],
							[
								26.494331495883756,
								55.615106919977634
							],
							[
								27.10245975109453,
								55.783313707087686
							],
							[
								28.176709425577997,
								56.169129950578814
							],
							[
								29.229513380660308,
								55.91834422466636
							],
							[
								29.371571893030673,
								55.670090643936184
							],
							[
								29.896294386522356,
								55.78946320253041
							],
							[
								30.87390913262001,
								55.55097646750341
							],
							[
								30.971835971813135,
								55.08154775656404
							],
							[
								30.75753380709872,
								54.81177094178432
							],
							[
								31.38447228366374,
								54.157056382862436
							],
							[
								31.79142418796224,
								53.974638576872124
							],
							[
								31.731272820774507,
								53.79402944601202
							],
							[
								32.405598585751164,
								53.61804535584204
							],
							[
								32.69364301934604,
								53.35142080343212
							],
							[
								32.30451948418823,
								53.13272614197291
							],
							[
								31.49764367038293,
								53.1674268662569
							],
							[
								31.305200636528014,
								53.07399587667321
							],
							[
								31.54001834486226,
								52.74205231384636
							],
							[
								31.785998162571587,
								52.101677964885454
							],
							[
								30.927549269338982,
								52.04235342061439
							],
							[
								30.619454380014844,
								51.822806098022376
							],
							[
								30.555117221811457,
								51.31950348571566
							],
							[
								30.157363722460897,
								51.41613841410147
							],
							[
								29.254938185347925,
								51.368234361366895
							],
							[
								28.992835320763533,
								51.602044379271476
							],
							[
								28.61761274589225,
								51.42771393493484
							],
							[
								28.24161502453657,
								51.57222707783907
							],
							[
								27.454066196408434,
								51.59230337178447
							],
							[
								26.337958611768556,
								51.83228872334793
							],
							[
								25.32778771332701,
								51.91065603291855
							],
							[
								24.553106316839518,
								51.888461005249184
							],
							[
								24.00507775238421,
								51.61744395609446
							],
							[
								23.527070753684374,
								51.57845408793024
							],
							[
								23.508002150168693,
								52.02364655212473
							],
							[
								23.199493849386187,
								52.48697744405367
							],
							[
								23.79919884613338,
								52.69109935160657
							],
							[
								23.80493493011778,
								53.089731350306074
							],
							[
								23.527535841575002,
								53.470121568406555
							],
							[
								23.48412763844985,
								53.91249766704114
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Belarus",
					"sov_a3": "BLR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Belarus",
					"adm0_a3": "BLR",
					"geou_dif": 0,
					"geounit": "Belarus",
					"gu_a3": "BLR",
					"su_dif": 0,
					"subunit": "Belarus",
					"su_a3": "BLR",
					"brk_diff": 0,
					"name": "Belarus",
					"name_long": "Belarus",
					"brk_a3": "BLR",
					"brk_name": "Belarus",
					"brk_group": "",
					"abbrev": "Bela.",
					"postal": "BY",
					"formal_en": "Republic of Belarus",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Belarus",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 1,
					"mapcolor9": 5,
					"mapcolor13": 11,
					"pop_est": 9648533,
					"gdp_md_est": 114100,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BY",
					"iso_a3": "BLR",
					"iso_n3": "112",
					"un_a3": "112",
					"wb_a2": "BY",
					"wb_a3": "BLR",
					"woe_id": -99,
					"adm0_a3_is": "BLR",
					"adm0_a3_us": "BLR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-89.14308041050332,
								17.80831899664932
							],
							[
								-89.15090938999553,
								17.95546763760042
							],
							[
								-89.02985734735182,
								18.001511338772488
							],
							[
								-88.84834387892661,
								17.883198147040233
							],
							[
								-88.49012285027935,
								18.486830552641607
							],
							[
								-88.3000310940937,
								18.4999822046599
							],
							[
								-88.29633622918482,
								18.35327281338327
							],
							[
								-88.10681291375438,
								18.348673610909287
							],
							[
								-88.1234785631685,
								18.07667470954101
							],
							[
								-88.2853549873228,
								17.644142971258034
							],
							[
								-88.19786678745265,
								17.489475409408456
							],
							[
								-88.30264075392444,
								17.131693630435663
							],
							[
								-88.23951799187991,
								17.036066392479555
							],
							[
								-88.35542822951057,
								16.530774237529627
							],
							[
								-88.55182451043585,
								16.265467434143147
							],
							[
								-88.73243364129594,
								16.233634751851355
							],
							[
								-88.93061275913527,
								15.887273464415076
							],
							[
								-89.22912167026928,
								15.886937567605171
							],
							[
								-89.15080603713095,
								17.015576687075836
							],
							[
								-89.14308041050332,
								17.80831899664932
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Belize",
					"sov_a3": "BLZ",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Belize",
					"adm0_a3": "BLZ",
					"geou_dif": 0,
					"geounit": "Belize",
					"gu_a3": "BLZ",
					"su_dif": 0,
					"subunit": "Belize",
					"su_a3": "BLZ",
					"brk_diff": 0,
					"name": "Belize",
					"name_long": "Belize",
					"brk_a3": "BLZ",
					"brk_name": "Belize",
					"brk_group": "",
					"abbrev": "Belize",
					"postal": "BZ",
					"formal_en": "Belize",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Belize",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 5,
					"mapcolor13": 7,
					"pop_est": 307899,
					"gdp_md_est": 2536,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BZ",
					"iso_a3": "BLZ",
					"iso_n3": "084",
					"un_a3": "084",
					"wb_a2": "BZ",
					"wb_a3": "BLZ",
					"woe_id": -99,
					"adm0_a3_is": "BLZ",
					"adm0_a3_us": "BLZ",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Central America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-69.59042375352405,
								-17.580011895419332
							],
							[
								-68.9596353827533,
								-16.50069793057127
							],
							[
								-69.38976416693471,
								-15.660129082911652
							],
							[
								-69.16034664577495,
								-15.323973890853019
							],
							[
								-69.33953467474701,
								-14.953195489158832
							],
							[
								-68.9488866848366,
								-14.453639418193283
							],
							[
								-68.92922380234954,
								-13.602683607643009
							],
							[
								-68.88007951523997,
								-12.899729099176653
							],
							[
								-68.66507971868963,
								-12.561300144097173
							],
							[
								-69.52967810736496,
								-10.951734307502194
							],
							[
								-68.78615759954948,
								-11.03638030359628
							],
							[
								-68.27125362819326,
								-11.01452117273682
							],
							[
								-68.04819230820539,
								-10.712059014532485
							],
							[
								-67.17380123561074,
								-10.306812432499612
							],
							[
								-66.6469083319628,
								-9.931331475466862
							],
							[
								-65.33843522811642,
								-9.761987806846392
							],
							[
								-65.44483700220539,
								-10.511451104375432
							],
							[
								-65.32189876978302,
								-10.895872084194679
							],
							[
								-65.40228146021303,
								-11.566270440317155
							],
							[
								-64.3163529120316,
								-12.461978041232193
							],
							[
								-63.19649878605057,
								-12.627032565972435
							],
							[
								-62.803060268796386,
								-13.000653171442686
							],
							[
								-62.127080857986385,
								-13.198780612849724
							],
							[
								-61.71320431176078,
								-13.489202162330052
							],
							[
								-61.08412126325565,
								-13.479383640194598
							],
							[
								-60.503304002511136,
								-13.775954685117659
							],
							[
								-60.45919816755003,
								-14.354007256734555
							],
							[
								-60.26432634137737,
								-14.645979099183641
							],
							[
								-60.251148851142936,
								-15.07721892665932
							],
							[
								-60.54296566429515,
								-15.093910414289596
							],
							[
								-60.158389655179036,
								-16.258283786690086
							],
							[
								-58.24121985536668,
								-16.299573256091293
							],
							[
								-58.38805843772404,
								-16.877109063385276
							],
							[
								-58.28080400250225,
								-17.271710300366017
							],
							[
								-57.734558274961,
								-17.55246835700777
							],
							[
								-57.49837114117099,
								-18.174187513911292
							],
							[
								-57.67600887717431,
								-18.96183969490403
							],
							[
								-57.949997321185826,
								-19.40000416430682
							],
							[
								-57.85380164247451,
								-19.96999521248619
							],
							[
								-58.166392381408045,
								-20.176700941653678
							],
							[
								-58.183471442280506,
								-19.868399346600363
							],
							[
								-59.11504248720611,
								-19.3569060197754
							],
							[
								-60.04356462262649,
								-19.342746677327426
							],
							[
								-61.78632646345377,
								-19.633736667562964
							],
							[
								-62.2659612697708,
								-20.513734633061276
							],
							[
								-62.291179368729225,
								-21.051634616787393
							],
							[
								-62.685057135657885,
								-22.249029229422387
							],
							[
								-62.84646847192156,
								-22.03498544686945
							],
							[
								-63.986838141522476,
								-21.99364430103595
							],
							[
								-64.37702104354226,
								-22.79809132252354
							],
							[
								-64.96489213729461,
								-22.075861504812327
							],
							[
								-66.27333940292485,
								-21.83231047942072
							],
							[
								-67.1066735500636,
								-22.735924574476417
							],
							[
								-67.82817989772273,
								-22.872918796482175
							],
							[
								-68.21991309271128,
								-21.494346612231865
							],
							[
								-68.75716712103375,
								-20.372657972904463
							],
							[
								-68.44222510443092,
								-19.40506845467143
							],
							[
								-68.96681840684187,
								-18.981683444904107
							],
							[
								-69.10024695501949,
								-18.260125420812678
							],
							[
								-69.59042375352405,
								-17.580011895419332
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Bolivia",
					"sov_a3": "BOL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Bolivia",
					"adm0_a3": "BOL",
					"geou_dif": 0,
					"geounit": "Bolivia",
					"gu_a3": "BOL",
					"su_dif": 0,
					"subunit": "Bolivia",
					"su_a3": "BOL",
					"brk_diff": 0,
					"name": "Bolivia",
					"name_long": "Bolivia",
					"brk_a3": "BOL",
					"brk_name": "Bolivia",
					"brk_group": "",
					"abbrev": "Bolivia",
					"postal": "BO",
					"formal_en": "Plurinational State of Bolivia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Bolivia",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 5,
					"mapcolor9": 2,
					"mapcolor13": 3,
					"pop_est": 9775246,
					"gdp_md_est": 43270,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BO",
					"iso_a3": "BOL",
					"iso_n3": "068",
					"un_a3": "068",
					"wb_a2": "BO",
					"wb_a3": "BOL",
					"woe_id": -99,
					"adm0_a3_is": "BOL",
					"adm0_a3_us": "BOL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 7,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-57.62513342958296,
								-30.21629485445426
							],
							[
								-56.29089962423908,
								-28.852760512000895
							],
							[
								-55.16228634298457,
								-27.881915378533463
							],
							[
								-54.490725267135524,
								-27.47475676850579
							],
							[
								-53.64873531758789,
								-26.92347258881609
							],
							[
								-53.628348965048744,
								-26.124865004177472
							],
							[
								-54.13004960795439,
								-25.547639255477254
							],
							[
								-54.625290696823576,
								-25.739255466415514
							],
							[
								-54.42894609233059,
								-25.162184747012166
							],
							[
								-54.29347632507745,
								-24.570799655863965
							],
							[
								-54.29295956075452,
								-24.02101409271073
							],
							[
								-54.65283423523513,
								-23.83957813893396
							],
							[
								-55.02790178080955,
								-24.00127369557523
							],
							[
								-55.40074723979542,
								-23.956935316668805
							],
							[
								-55.517639329639636,
								-23.571997572526637
							],
							[
								-55.610682745981144,
								-22.655619398694846
							],
							[
								-55.79795813660691,
								-22.356929620047822
							],
							[
								-56.47331743022939,
								-22.086300144135283
							],
							[
								-56.8815095689029,
								-22.28215382252148
							],
							[
								-57.937155727761294,
								-22.090175876557172
							],
							[
								-57.8706739976178,
								-20.73268767668195
							],
							[
								-58.166392381408045,
								-20.176700941653678
							],
							[
								-57.85380164247451,
								-19.96999521248619
							],
							[
								-57.949997321185826,
								-19.40000416430682
							],
							[
								-57.67600887717431,
								-18.96183969490403
							],
							[
								-57.49837114117099,
								-18.174187513911292
							],
							[
								-57.734558274961,
								-17.55246835700777
							],
							[
								-58.28080400250225,
								-17.271710300366017
							],
							[
								-58.38805843772404,
								-16.877109063385276
							],
							[
								-58.24121985536668,
								-16.299573256091293
							],
							[
								-60.158389655179036,
								-16.258283786690086
							],
							[
								-60.54296566429515,
								-15.093910414289596
							],
							[
								-60.251148851142936,
								-15.07721892665932
							],
							[
								-60.26432634137737,
								-14.645979099183641
							],
							[
								-60.45919816755003,
								-14.354007256734555
							],
							[
								-60.503304002511136,
								-13.775954685117659
							],
							[
								-61.08412126325565,
								-13.479383640194598
							],
							[
								-61.71320431176078,
								-13.489202162330052
							],
							[
								-62.127080857986385,
								-13.198780612849724
							],
							[
								-62.803060268796386,
								-13.000653171442686
							],
							[
								-63.19649878605057,
								-12.627032565972435
							],
							[
								-64.3163529120316,
								-12.461978041232193
							],
							[
								-65.40228146021303,
								-11.566270440317155
							],
							[
								-65.32189876978302,
								-10.895872084194679
							],
							[
								-65.44483700220539,
								-10.511451104375432
							],
							[
								-65.33843522811642,
								-9.761987806846392
							],
							[
								-66.6469083319628,
								-9.931331475466862
							],
							[
								-67.17380123561074,
								-10.306812432499612
							],
							[
								-68.04819230820539,
								-10.712059014532485
							],
							[
								-68.27125362819326,
								-11.01452117273682
							],
							[
								-68.78615759954948,
								-11.03638030359628
							],
							[
								-69.52967810736496,
								-10.951734307502194
							],
							[
								-70.0937522040469,
								-11.123971856331012
							],
							[
								-70.54868567572841,
								-11.009146823778465
							],
							[
								-70.48189388699117,
								-9.490118096558845
							],
							[
								-71.30241227892154,
								-10.079436130415374
							],
							[
								-72.18489071316985,
								-10.053597914269432
							],
							[
								-72.56303300646564,
								-9.520193780152717
							],
							[
								-73.22671342639016,
								-9.462212823121234
							],
							[
								-73.01538265653255,
								-9.032833347208062
							],
							[
								-73.57105933296707,
								-8.424446709835834
							],
							[
								-73.98723548042966,
								-7.523829847853065
							],
							[
								-73.7234014553635,
								-7.340998630404414
							],
							[
								-73.72448666044164,
								-6.91859547285064
							],
							[
								-73.1200274319236,
								-6.629930922068239
							],
							[
								-73.21971126981461,
								-6.089188734566078
							],
							[
								-72.9645072089412,
								-5.7412513159448935
							],
							[
								-72.89192765978726,
								-5.274561455916981
							],
							[
								-71.74840572781655,
								-4.593982842633011
							],
							[
								-70.92884334988358,
								-4.401591485210368
							],
							[
								-70.7947688463023,
								-4.251264743673303
							],
							[
								-69.89363521999663,
								-4.2981869441943275
							],
							[
								-69.44410193548961,
								-1.5562871232198177
							],
							[
								-69.42048580593223,
								-1.1226185034264091
							],
							[
								-69.5770653957766,
								-0.549991957200163
							],
							[
								-70.02065589057005,
								-0.18515634521953928
							],
							[
								-70.01556576198931,
								0.5414142928042054
							],
							[
								-69.45239600287246,
								0.7061587589506929
							],
							[
								-69.25243404811906,
								0.6026508650700748
							],
							[
								-69.21863766140018,
								0.9856765812174331
							],
							[
								-69.80459672715773,
								1.0890811222334662
							],
							[
								-69.81697323269162,
								1.7148052026396243
							],
							[
								-67.86856502955884,
								1.6924551456733923
							],
							[
								-67.5378100246747,
								2.03716278727633
							],
							[
								-67.2599975246736,
								1.7199986840849562
							],
							[
								-67.0650481838525,
								1.130112209473225
							],
							[
								-66.87632585312258,
								1.253360500489336
							],
							[
								-66.32576514348496,
								0.7244522159820121
							],
							[
								-65.54826738143757,
								0.7892544620760303
							],
							[
								-65.35471330428837,
								1.0952822941085003
							],
							[
								-64.61101192895987,
								1.3287305769870417
							],
							[
								-64.19930579289051,
								1.49285492594602
							],
							[
								-64.08308549666609,
								1.9163691267940803
							],
							[
								-63.368788011311665,
								2.200899562993129
							],
							[
								-63.42286739770512,
								2.4110676131241746
							],
							[
								-64.2699991522658,
								2.497005520025567
							],
							[
								-64.40882788761792,
								3.126786200366624
							],
							[
								-64.3684944322141,
								3.797210394705246
							],
							[
								-64.81606401229402,
								4.056445217297423
							],
							[
								-64.62865943058755,
								4.14848094320925
							],
							[
								-63.88834286157416,
								4.020530096854571
							],
							[
								-63.093197597899106,
								3.7705711938587854
							],
							[
								-62.804533047116706,
								4.006965033377952
							],
							[
								-62.08542965355913,
								4.162123521334308
							],
							[
								-60.96689327660154,
								4.536467596856639
							],
							[
								-60.601179165271944,
								4.91809804933213
							],
							[
								-60.73357418480372,
								5.200277207861901
							],
							[
								-60.21368343773133,
								5.244486395687602
							],
							[
								-59.980958624904886,
								5.014061184098139
							],
							[
								-60.11100236676738,
								4.574966538914083
							],
							[
								-59.767405768458715,
								4.423502915866607
							],
							[
								-59.53803992373123,
								3.9588025984819377
							],
							[
								-59.815413174057866,
								3.6064985213320853
							],
							[
								-59.97452490908456,
								2.755232652188056
							],
							[
								-59.71854570172675,
								2.2496304386443597
							],
							[
								-59.64604366722126,
								1.786893825686789
							],
							[
								-59.03086157900265,
								1.3176976586927225
							],
							[
								-58.540012986878295,
								1.2680882836925207
							],
							[
								-58.429477098205965,
								1.4639419620787208
							],
							[
								-58.11344987652502,
								1.5071951359070253
							],
							[
								-57.66097103537737,
								1.6825849471056387
							],
							[
								-57.335822923396904,
								1.9485377058957594
							],
							[
								-56.78270423036083,
								1.8637108422886541
							],
							[
								-56.539385748914555,
								1.8995226098669207
							],
							[
								-55.995698004771754,
								1.8176671411166012
							],
							[
								-55.905600145070885,
								2.0219957543986595
							],
							[
								-56.0733418442903,
								2.2207949894254995
							],
							[
								-55.973322109589375,
								2.510363877773017
							],
							[
								-55.569755011606,
								2.4215062524471307
							],
							[
								-55.09758744975514,
								2.5237480737366127
							],
							[
								-54.524754197799716,
								2.3118488631237852
							],
							[
								-54.08806250671725,
								2.105556545414629
							],
							[
								-53.77852067728892,
								2.3767027856500818
							],
							[
								-53.554839240113544,
								2.334896551925951
							],
							[
								-53.41846513529531,
								2.0533891870159806
							],
							[
								-52.939657151894956,
								2.1248576928756364
							],
							[
								-52.55642473001842,
								2.504705308437053
							],
							[
								-52.249337531123956,
								3.241094468596245
							],
							[
								-51.65779741067889,
								4.156232408053029
							],
							[
								-51.31714636901086,
								4.203490505383954
							],
							[
								-51.069771287629656,
								3.650397650564031
							],
							[
								-50.508875291533656,
								1.901563828942457
							],
							[
								-49.97407589374506,
								1.736483465986069
							],
							[
								-49.94710079608871,
								1.0461896834312228
							],
							[
								-50.699251268096916,
								0.22298411702168153
							],
							[
								-50.38821082213214,
								-0.07844451253681939
							],
							[
								-48.62056677915632,
								-0.2354891902718208
							],
							[
								-48.58449662941659,
								-1.2378052710050014
							],
							[
								-47.824956427590635,
								-0.5816179337628
							],
							[
								-46.566583624851226,
								-0.941027520352776
							],
							[
								-44.905703090990414,
								-1.551739597178134
							],
							[
								-44.417619187993665,
								-2.137750339367976
							],
							[
								-44.58158850765578,
								-2.691308282078524
							],
							[
								-43.418791266440195,
								-2.383110039889793
							],
							[
								-41.47265682632825,
								-2.9120183243971165
							],
							[
								-39.97866533055404,
								-2.873054294449041
							],
							[
								-38.50038347019657,
								-3.7006523576033956
							],
							[
								-37.2232521225352,
								-4.820945733258917
							],
							[
								-36.45293738457639,
								-5.109403578312154
							],
							[
								-35.59779578301047,
								-5.149504489770649
							],
							[
								-35.23538896334756,
								-5.464937432480247
							],
							[
								-34.89602983248683,
								-6.738193047719711
							],
							[
								-34.729993455533034,
								-7.343220716992967
							],
							[
								-35.12821204277422,
								-8.996401462442286
							],
							[
								-35.636966518687714,
								-9.649281508017815
							],
							[
								-37.046518724097,
								-11.040721123908803
							],
							[
								-37.68361161960736,
								-12.171194756725823
							],
							[
								-38.42387651218844,
								-13.038118584854288
							],
							[
								-38.67388709161652,
								-13.057652276260619
							],
							[
								-38.953275722802545,
								-13.793369642800023
							],
							[
								-38.88229814304965,
								-15.667053724838768
							],
							[
								-39.16109249526431,
								-17.208406670808472
							],
							[
								-39.2673392400564,
								-17.867746270420483
							],
							[
								-39.58352149103423,
								-18.262295830968938
							],
							[
								-39.76082333022764,
								-19.59911345792741
							],
							[
								-40.77474077001034,
								-20.904511814052423
							],
							[
								-40.94475623225061,
								-21.93731698983781
							],
							[
								-41.754164191238225,
								-22.370675551037458
							],
							[
								-41.98828426773656,
								-22.970070489190896
							],
							[
								-43.07470374202475,
								-22.96769337330547
							],
							[
								-44.64781185563781,
								-23.351959323827842
							],
							[
								-45.35213578955992,
								-23.796841729428582
							],
							[
								-46.47209326840554,
								-24.088968601174543
							],
							[
								-47.64897233742066,
								-24.885199069927722
							],
							[
								-48.4954581365777,
								-25.877024834905654
							],
							[
								-48.64100480812774,
								-26.623697605090932
							],
							[
								-48.474735887228654,
								-27.17591196056189
							],
							[
								-48.661520351747626,
								-28.18613453543572
							],
							[
								-48.8884574041574,
								-28.674115085567884
							],
							[
								-49.587329474472675,
								-29.224469089476337
							],
							[
								-50.696874152211485,
								-30.98446502047296
							],
							[
								-51.576226162306156,
								-31.77769825615321
							],
							[
								-52.256081305538046,
								-32.24536996839467
							],
							[
								-52.712099982297694,
								-33.19657805759118
							],
							[
								-53.373661668498244,
								-33.768377780900764
							],
							[
								-53.6505439927181,
								-33.20200408298183
							],
							[
								-53.209588995971544,
								-32.727666110974724
							],
							[
								-53.78795162618219,
								-32.047242526987624
							],
							[
								-54.57245154480512,
								-31.494511407193748
							],
							[
								-55.601510179249345,
								-30.853878676071393
							],
							[
								-55.97324459494094,
								-30.883075860316303
							],
							[
								-56.976025763564735,
								-30.109686374636127
							],
							[
								-57.62513342958296,
								-30.21629485445426
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Brazil",
					"sov_a3": "BRA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Brazil",
					"adm0_a3": "BRA",
					"geou_dif": 0,
					"geounit": "Brazil",
					"gu_a3": "BRA",
					"su_dif": 0,
					"subunit": "Brazil",
					"su_a3": "BRA",
					"brk_diff": 0,
					"name": "Brazil",
					"name_long": "Brazil",
					"brk_a3": "BRA",
					"brk_name": "Brazil",
					"brk_group": "",
					"abbrev": "Brazil",
					"postal": "BR",
					"formal_en": "Federative Republic of Brazil",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Brazil",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 6,
					"mapcolor9": 5,
					"mapcolor13": 7,
					"pop_est": 198739269,
					"gdp_md_est": 1993000,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "3. Emerging region: BRIC",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BR",
					"iso_a3": "BRA",
					"iso_n3": "076",
					"un_a3": "076",
					"wb_a2": "BR",
					"wb_a3": "BRA",
					"woe_id": -99,
					"adm0_a3_is": "BRA",
					"adm0_a3_us": "BRA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								114.20401655482837,
								4.5258739282368055
							],
							[
								114.59996137904872,
								4.900011298029966
							],
							[
								115.45071048386981,
								5.447729803891534
							],
							[
								115.40570031134361,
								4.955227565933839
							],
							[
								115.34746097215066,
								4.316636053887009
							],
							[
								114.8695573263154,
								4.348313706881925
							],
							[
								114.65959598191353,
								4.007636826997754
							],
							[
								114.20401655482837,
								4.5258739282368055
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Brunei",
					"sov_a3": "BRN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Brunei",
					"adm0_a3": "BRN",
					"geou_dif": 0,
					"geounit": "Brunei",
					"gu_a3": "BRN",
					"su_dif": 0,
					"subunit": "Brunei",
					"su_a3": "BRN",
					"brk_diff": 0,
					"name": "Brunei",
					"name_long": "Brunei Darussalam",
					"brk_a3": "BRN",
					"brk_name": "Brunei",
					"brk_group": "",
					"abbrev": "Brunei",
					"postal": "BN",
					"formal_en": "Negara Brunei Darussalam",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Brunei",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 6,
					"mapcolor9": 6,
					"mapcolor13": 12,
					"pop_est": 388190,
					"gdp_md_est": 20250,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BN",
					"iso_a3": "BRN",
					"iso_n3": "096",
					"un_a3": "096",
					"wb_a2": "BN",
					"wb_a3": "BRN",
					"woe_id": -99,
					"adm0_a3_is": "BRN",
					"adm0_a3_us": "BRN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 6,
					"long_len": 17,
					"abbrev_len": 6,
					"tiny": 2,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								91.69665652869668,
								27.771741848251665
							],
							[
								92.10371178585974,
								27.452614040633208
							],
							[
								92.03348351437509,
								26.83831045176356
							],
							[
								91.21751264848643,
								26.808648179628022
							],
							[
								90.37327477413407,
								26.87572418874288
							],
							[
								89.74452762243885,
								26.719402981059957
							],
							[
								88.83564253128938,
								27.098966376243762
							],
							[
								88.81424848832056,
								27.299315904239364
							],
							[
								89.47581017452111,
								28.042758897406397
							],
							[
								90.01582889197118,
								28.296438503527217
							],
							[
								90.7305139505678,
								28.064953925075756
							],
							[
								91.25885379431992,
								28.040614325466294
							],
							[
								91.69665652869668,
								27.771741848251665
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Bhutan",
					"sov_a3": "BTN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Bhutan",
					"adm0_a3": "BTN",
					"geou_dif": 0,
					"geounit": "Bhutan",
					"gu_a3": "BTN",
					"su_dif": 0,
					"subunit": "Bhutan",
					"su_a3": "BTN",
					"brk_diff": 0,
					"name": "Bhutan",
					"name_long": "Bhutan",
					"brk_a3": "BTN",
					"brk_name": "Bhutan",
					"brk_group": "",
					"abbrev": "Bhutan",
					"postal": "BT",
					"formal_en": "Kingdom of Bhutan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Bhutan",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 6,
					"mapcolor9": 1,
					"mapcolor13": 8,
					"pop_est": 691141,
					"gdp_md_est": 3524,
					"pop_year": -99,
					"lastcensus": 2005,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BT",
					"iso_a3": "BTN",
					"iso_n3": "064",
					"un_a3": "064",
					"wb_a2": "BT",
					"wb_a3": "BTN",
					"woe_id": -99,
					"adm0_a3_is": "BTN",
					"adm0_a3_us": "BTN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Southern Asia",
					"region_wb": "South Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								29.43218834810904,
								-22.091312758067588
							],
							[
								28.01723595552525,
								-22.82775359465908
							],
							[
								27.119409620886245,
								-23.574323011979775
							],
							[
								26.786406691197413,
								-24.240690606383485
							],
							[
								26.4857532081233,
								-24.616326592713104
							],
							[
								25.94165205252216,
								-24.69637338633322
							],
							[
								25.76584882986521,
								-25.17484547292368
							],
							[
								25.66466637543772,
								-25.486816094669713
							],
							[
								25.025170525825786,
								-25.7196700985769
							],
							[
								24.211266717228796,
								-25.670215752873574
							],
							[
								23.73356977712271,
								-25.390129489851617
							],
							[
								23.312096795350186,
								-25.26868987396572
							],
							[
								22.8242712745149,
								-25.50045867279477
							],
							[
								22.57953169118059,
								-25.979447523708146
							],
							[
								22.105968865657868,
								-26.280256036079138
							],
							[
								21.605896030369394,
								-26.726533705351756
							],
							[
								20.88960900237174,
								-26.828542982695915
							],
							[
								20.66647016773544,
								-26.477453301704923
							],
							[
								20.75860924651184,
								-25.86813648855145
							],
							[
								20.16572553882719,
								-24.91796192800077
							],
							[
								19.895767856534434,
								-24.76779021576059
							],
							[
								19.89545779794068,
								-21.84915699634787
							],
							[
								20.88113406747587,
								-21.814327080983148
							],
							[
								20.910641310314535,
								-18.252218926672022
							],
							[
								21.655040317478978,
								-18.219146010005225
							],
							[
								23.1968583513393,
								-17.869038181227786
							],
							[
								23.579005568137717,
								-18.28126108162006
							],
							[
								24.217364536239213,
								-17.88934701911849
							],
							[
								24.520705193792537,
								-17.887124932529936
							],
							[
								25.08444339366457,
								-17.661815687737374
							],
							[
								25.264225701608012,
								-17.736539808831417
							],
							[
								25.649163445750162,
								-18.53602589281899
							],
							[
								25.85039147309473,
								-18.714412937090536
							],
							[
								26.164790887158485,
								-19.29308562589494
							],
							[
								27.296504754350508,
								-20.391519870691
							],
							[
								27.724747348753255,
								-20.49905852629039
							],
							[
								27.72722781750326,
								-20.851801853114715
							],
							[
								28.021370070108617,
								-21.485975030200585
							],
							[
								28.794656202924216,
								-21.63945403410745
							],
							[
								29.43218834810904,
								-22.091312758067588
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Botswana",
					"sov_a3": "BWA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Botswana",
					"adm0_a3": "BWA",
					"geou_dif": 0,
					"geounit": "Botswana",
					"gu_a3": "BWA",
					"su_dif": 0,
					"subunit": "Botswana",
					"su_a3": "BWA",
					"brk_diff": 0,
					"name": "Botswana",
					"name_long": "Botswana",
					"brk_a3": "BWA",
					"brk_name": "Botswana",
					"brk_group": "",
					"abbrev": "Bwa.",
					"postal": "BW",
					"formal_en": "Republic of Botswana",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Botswana",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 5,
					"mapcolor9": 7,
					"mapcolor13": 3,
					"pop_est": 1990876,
					"gdp_md_est": 27060,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "BW",
					"iso_a3": "BWA",
					"iso_n3": "072",
					"un_a3": "072",
					"wb_a2": "BW",
					"wb_a3": "BWA",
					"woe_id": -99,
					"adm0_a3_is": "BWA",
					"adm0_a3_us": "BWA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Southern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								15.279460483469109,
								7.421924546737969
							],
							[
								16.10623172370677,
								7.497087917506505
							],
							[
								16.290561557691888,
								7.754307359239306
							],
							[
								16.456184523187346,
								7.734773667832968
							],
							[
								16.705988396886255,
								7.5083275415299795
							],
							[
								17.964929640380888,
								7.890914008002866
							],
							[
								18.38955488452322,
								8.281303615751824
							],
							[
								18.911021762780507,
								8.630894680206353
							],
							[
								18.812009718509273,
								8.982914536978598
							],
							[
								19.09400800952602,
								9.07484691002584
							],
							[
								20.05968549976427,
								9.012706000194854
							],
							[
								21.000868361096167,
								9.475985215691509
							],
							[
								21.723821648859456,
								10.567055568885976
							],
							[
								22.231129184668788,
								10.97188873946051
							],
							[
								22.864165480244225,
								11.142395127807546
							],
							[
								22.97754357269261,
								10.71446259199854
							],
							[
								23.554304233502194,
								10.089255275915308
							],
							[
								23.55724979014283,
								9.681218166538684
							],
							[
								23.394779087017184,
								9.265067857292223
							],
							[
								23.459012892355986,
								8.954285793488893
							],
							[
								23.805813429466752,
								8.666318874542426
							],
							[
								24.567369012152085,
								8.229187933785468
							],
							[
								25.11493248871679,
								7.825104071479174
							],
							[
								25.124130893664727,
								7.500085150579437
							],
							[
								25.79664798351118,
								6.979315904158071
							],
							[
								26.213418409945117,
								6.546603298362072
							],
							[
								26.465909458123235,
								5.9467174341018705
							],
							[
								27.21340905122517,
								5.5509534773945575
							],
							[
								27.37422610851749,
								5.233944403500061
							],
							[
								27.04406538260471,
								5.127852688004836
							],
							[
								26.402760857862543,
								5.1508745385908705
							],
							[
								25.650455356557472,
								5.256087754737123
							],
							[
								25.278798455514305,
								5.170408229997192
							],
							[
								25.12883344900328,
								4.92724477784779
							],
							[
								24.805028924262416,
								4.89724660890235
							],
							[
								24.410531040146253,
								5.10878408448913
							],
							[
								23.29721398285014,
								4.609693101414223
							],
							[
								22.841479526468106,
								4.710126247573484
							],
							[
								22.70412356943629,
								4.633050848810157
							],
							[
								22.405123732195538,
								4.029160061047321
							],
							[
								21.659122755630023,
								4.22434194581372
							],
							[
								20.927591180106276,
								4.322785549329737
							],
							[
								20.290679152108936,
								4.691677761245288
							],
							[
								19.46778364429315,
								5.03152781821278
							],
							[
								18.93231245288476,
								4.709506130385975
							],
							[
								18.54298221199778,
								4.201785183118318
							],
							[
								18.45306521980993,
								3.5043858911233485
							],
							[
								17.809900343505262,
								3.5601964379985698
							],
							[
								17.133042433346304,
								3.728196519379452
							],
							[
								16.537058139724138,
								3.198254706226279
							],
							[
								16.012852410555354,
								2.267639675298085
							],
							[
								15.907380812247652,
								2.557389431158612
							],
							[
								15.862732374747482,
								3.0135372989989833
							],
							[
								15.405395948964383,
								3.33530060466434
							],
							[
								15.036219516671252,
								3.8513672957471243
							],
							[
								14.950953403389661,
								4.210389309094921
							],
							[
								14.47837243008047,
								4.732605495620447
							],
							[
								14.558935988023507,
								5.03059764243153
							],
							[
								14.459407179429348,
								5.4517605656103
							],
							[
								14.536560092841114,
								6.2269587264206905
							],
							[
								14.776545444404576,
								6.408498033062045
							],
							[
								15.279460483469109,
								7.421924546737969
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Central African Republic",
					"sov_a3": "CAF",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Central African Republic",
					"adm0_a3": "CAF",
					"geou_dif": 0,
					"geounit": "Central African Republic",
					"gu_a3": "CAF",
					"su_dif": 0,
					"subunit": "Central African Republic",
					"su_a3": "CAF",
					"brk_diff": 0,
					"name": "Central African Rep.",
					"name_long": "Central African Republic",
					"brk_a3": "CAF",
					"brk_name": "Central African Rep.",
					"brk_group": "",
					"abbrev": "C.A.R.",
					"postal": "CF",
					"formal_en": "Central African Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Central African Republic",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 6,
					"mapcolor9": 6,
					"mapcolor13": 9,
					"pop_est": 4511488,
					"gdp_md_est": 3198,
					"pop_year": -99,
					"lastcensus": 2003,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CF",
					"iso_a3": "CAF",
					"iso_n3": "140",
					"un_a3": "140",
					"wb_a2": "CF",
					"wb_a3": "CAF",
					"woe_id": -99,
					"adm0_a3_is": "CAF",
					"adm0_a3_us": "CAF",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Middle Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 20,
					"long_len": 24,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									-63.664499999999975,
									46.550009999999986
								],
								[
									-62.93930000000003,
									46.41587000000004
								],
								[
									-62.01207999999997,
									46.44314000000006
								],
								[
									-62.50390999999996,
									46.033390000000026
								],
								[
									-62.874329999999986,
									45.96818000000002
								],
								[
									-64.14279999999994,
									46.39265000000003
								],
								[
									-64.39260999999999,
									46.72746999999998
								],
								[
									-64.01485999999997,
									47.036009999999976
								],
								[
									-63.664499999999975,
									46.550009999999986
								]
							]
						],
						[
							[
								[
									-61.80630499999998,
									49.10506000000004
								],
								[
									-62.29317999999998,
									49.08716999999996
								],
								[
									-63.589259999999996,
									49.400690000000054
								],
								[
									-64.51912000000002,
									49.87304000000003
								],
								[
									-64.17321999999999,
									49.957179999999994
								],
								[
									-62.858289999999954,
									49.706410000000034
								],
								[
									-61.83558500000004,
									49.28854999999999
								],
								[
									-61.80630499999998,
									49.10506000000004
								]
							]
						],
						[
							[
								[
									-123.51000158755116,
									48.51001089130344
								],
								[
									-124.0128907883995,
									48.370846259141416
								],
								[
									-125.65501277733837,
									48.8250045843385
								],
								[
									-125.95499446679277,
									49.179995835967645
								],
								[
									-126.85000443587188,
									49.53000031188043
								],
								[
									-127.02999344954442,
									49.81499583597008
								],
								[
									-128.05933630436624,
									49.9949590114266
								],
								[
									-128.44458410710217,
									50.539137681676124
								],
								[
									-128.35841365625544,
									50.770648098343685
								],
								[
									-127.3085810960299,
									50.552573554071955
								],
								[
									-126.69500097721232,
									50.400903225295394
								],
								[
									-125.7550066738232,
									50.29501821552938
								],
								[
									-125.4150015875588,
									49.95000051533262
								],
								[
									-124.92076818911934,
									49.475274970083404
								],
								[
									-123.92250870832102,
									49.06248362893581
								],
								[
									-123.51000158755116,
									48.51001089130344
								]
							]
						],
						[
							[
								[
									-56.134035814017125,
									50.687009792679305
								],
								[
									-56.795881720595276,
									49.81230866149096
								],
								[
									-56.1431050278843,
									50.150117499382844
								],
								[
									-55.47149227560294,
									49.93581533466846
								],
								[
									-55.82240108908093,
									49.58712860777911
								],
								[
									-54.935142584845664,
									49.31301097268684
								],
								[
									-54.473775397343786,
									49.55669118915918
								],
								[
									-53.476549445191324,
									49.24913890237406
								],
								[
									-53.78601375997124,
									48.51678050393363
								],
								[
									-53.08613399922626,
									48.687803656603535
								],
								[
									-52.958648240762244,
									48.157164211614486
								],
								[
									-52.64809872090419,
									47.535548407575504
								],
								[
									-53.06915829121834,
									46.65549876564495
								],
								[
									-53.52145626485304,
									46.61829173439483
								],
								[
									-54.17893551290254,
									46.80706574155701
								],
								[
									-53.961868659060485,
									47.62520701760192
								],
								[
									-54.24048214376214,
									47.75227936460763
								],
								[
									-55.4007730780115,
									46.884993801453135
								],
								[
									-55.99748084168584,
									46.9197203639533
								],
								[
									-55.29121904155278,
									47.389562486351
								],
								[
									-56.25079871278052,
									47.63254507098739
								],
								[
									-57.3252292547771,
									47.572807115258
								],
								[
									-59.26601518414677,
									47.60334788674251
								],
								[
									-59.419494188053704,
									47.899453843774864
								],
								[
									-58.79658647320741,
									48.25152537697949
								],
								[
									-59.23162451845653,
									48.52318838153781
								],
								[
									-58.39180497906523,
									49.12558055276418
								],
								[
									-57.358689744686046,
									50.71827403421585
								],
								[
									-56.73865007183201,
									51.287438259478535
								],
								[
									-55.870976935435294,
									51.632094224649194
								],
								[
									-55.406974249886616,
									51.58827261006573
								],
								[
									-55.60021826844209,
									51.31707469339793
								],
								[
									-56.134035814017125,
									50.687009792679305
								]
							]
						],
						[
							[
								[
									-133.1800040417117,
									54.169975490935315
								],
								[
									-132.71000788443132,
									54.04000931542353
								],
								[
									-131.7499895840033,
									54.12000438090922
								],
								[
									-132.049480347351,
									52.984621487024526
								],
								[
									-131.1790425218266,
									52.180432847698285
								],
								[
									-131.57782954982292,
									52.18237071390925
								],
								[
									-132.18042842677855,
									52.639707139692405
								],
								[
									-132.54999243231387,
									53.100014960332146
								],
								[
									-133.05461117875552,
									53.41146881775538
								],
								[
									-133.2396644827927,
									53.8510802272624
								],
								[
									-133.1800040417117,
									54.169975490935315
								]
							]
						],
						[
							[
								[
									-79.26581999999999,
									62.15867499999996
								],
								[
									-79.65752000000003,
									61.63308000000001
								],
								[
									-80.09956000000003,
									61.71810000000005
								],
								[
									-80.36215000000001,
									62.016489999999976
								],
								[
									-80.31539499999997,
									62.08556500000003
								],
								[
									-79.92938999999996,
									62.38559999999998
								],
								[
									-79.52001999999999,
									62.36370999999997
								],
								[
									-79.26581999999999,
									62.15867499999996
								]
							]
						],
						[
							[
								[
									-81.89824999999996,
									62.71079999999998
								],
								[
									-83.06857,
									62.15922000000003
								],
								[
									-83.77461999999997,
									62.18231000000003
								],
								[
									-83.99367000000001,
									62.45279999999997
								],
								[
									-83.25047999999998,
									62.914090000000044
								],
								[
									-81.87699000000003,
									62.90458000000001
								],
								[
									-81.89824999999996,
									62.71079999999998
								]
							]
						],
						[
							[
								[
									-85.16130794954987,
									65.65728465439281
								],
								[
									-84.97576371940596,
									65.217518215589
								],
								[
									-84.46401201041951,
									65.37177236598018
								],
								[
									-83.88262630891975,
									65.10961782496355
								],
								[
									-82.78757687043878,
									64.76669302027469
								],
								[
									-81.64201371939254,
									64.45513580998696
								],
								[
									-81.55344031444426,
									63.97960928003715
								],
								[
									-80.81736121287886,
									64.05748566350101
								],
								[
									-80.10345130076661,
									63.725981350348604
								],
								[
									-80.99101986359568,
									63.411246039474975
								],
								[
									-82.54717810741701,
									63.65172231714524
								],
								[
									-83.10879757356506,
									64.10187571883972
								],
								[
									-84.10041663281388,
									63.56971181909802
								],
								[
									-85.52340471061902,
									63.0523790554241
								],
								[
									-85.86676876498237,
									63.63725291610356
								],
								[
									-87.22198320183674,
									63.54123810490523
								],
								[
									-86.35275977247127,
									64.03583323837071
								],
								[
									-86.22488644076515,
									64.82291697860828
								],
								[
									-85.88384782585487,
									65.73877838811705
								],
								[
									-85.16130794954987,
									65.65728465439281
								]
							]
						],
						[
							[
								[
									-75.86588,
									67.14885999999998
								],
								[
									-76.98686999999998,
									67.09873000000002
								],
								[
									-77.23639999999995,
									67.58809000000002
								],
								[
									-76.81165999999999,
									68.14856000000003
								],
								[
									-75.89521000000002,
									68.28720999999999
								],
								[
									-75.11450000000002,
									68.01035999999999
								],
								[
									-75.10332999999994,
									67.58202000000003
								],
								[
									-75.21597,
									67.44424999999995
								],
								[
									-75.86588,
									67.14885999999998
								]
							]
						],
						[
							[
								[
									-95.64768120380052,
									69.10769035832178
								],
								[
									-96.2695212038006,
									68.75704035832175
								],
								[
									-97.61740120380057,
									69.0600303583218
								],
								[
									-98.43180120380052,
									68.9507003583218
								],
								[
									-99.79740120380053,
									69.4000303583218
								],
								[
									-98.91740120380055,
									69.7100303583218
								],
								[
									-98.2182612038005,
									70.14354035832176
								],
								[
									-97.15740120380056,
									69.86003035832181
								],
								[
									-96.55740120380054,
									69.68003035832177
								],
								[
									-96.25740120380053,
									69.49003035832177
								],
								[
									-95.64768120380052,
									69.10769035832178
								]
							]
						],
						[
							[
								[
									-68.23443999999998,
									47.35486
								],
								[
									-68.905,
									47.185
								],
								[
									-69.23721599999996,
									47.44778099999999
								],
								[
									-69.99997000000002,
									46.69306999999998
								],
								[
									-70.305,
									45.91500000000002
								],
								[
									-70.66,
									45.46000000000001
								],
								[
									-71.08482000000001,
									45.30523999999997
								],
								[
									-71.40500000000003,
									45.25500000000005
								],
								[
									-71.50505999999996,
									45.008200000000016
								],
								[
									-73.34782999999999,
									45.00738000000001
								],
								[
									-74.86699999999996,
									45.00048000000004
								],
								[
									-75.31821,
									44.816449999999975
								],
								[
									-76.375,
									44.09631000000002
								],
								[
									-76.50000000000006,
									44.01845889375872
								],
								[
									-76.82003414580558,
									43.628784288093755
								],
								[
									-77.7378850979577,
									43.629055589363304
								],
								[
									-78.72027991404238,
									43.625089423184875
								],
								[
									-79.17167355011188,
									43.46633942318422
								],
								[
									-79.00999999999999,
									43.27000000000007
								],
								[
									-78.92000000000002,
									42.96500000000006
								],
								[
									-78.9393621487437,
									42.86361135514804
								],
								[
									-80.24744767934794,
									42.36619985612259
								],
								[
									-81.27774654816716,
									42.20902598730686
								],
								[
									-82.43927771679162,
									41.675105088867156
								],
								[
									-82.69008928092018,
									41.675105088867156
								],
								[
									-83.02981014680694,
									41.83279572200584
								],
								[
									-83.14199968131257,
									41.97568105729283
								],
								[
									-83.12,
									42.079999999999984
								],
								[
									-82.89999999999998,
									42.430000000000064
								],
								[
									-82.43,
									42.98000000000002
								],
								[
									-82.1376423815039,
									43.571087551439916
								],
								[
									-82.33776312543108,
									44.44
								],
								[
									-82.55092464875818,
									45.347516587905375
								],
								[
									-83.59285071484308,
									45.81689362241238
								],
								[
									-83.46955074739463,
									45.99468638771259
								],
								[
									-83.61613094759059,
									46.11692698829907
								],
								[
									-83.89076534700575,
									46.11692698829907
								],
								[
									-84.09185126416148,
									46.275418606138174
								],
								[
									-84.14211951367338,
									46.51222585711574
								],
								[
									-84.33669999999998,
									46.40877000000003
								],
								[
									-84.60489999999999,
									46.439599999999984
								],
								[
									-84.54374874544587,
									46.538684190449146
								],
								[
									-84.77923824739992,
									46.637101955749046
								],
								[
									-84.87607988151487,
									46.90008331968238
								],
								[
									-85.65236324740343,
									47.22021881773051
								],
								[
									-86.46199083122826,
									47.553338019392044
								],
								[
									-87.43979262330024,
									47.94
								],
								[
									-88.37811418328673,
									48.302917588893735
								],
								[
									-89.27291744663668,
									48.01980825458267
								],
								[
									-89.6,
									48.01000000000002
								],
								[
									-90.82999999999996,
									48.27000000000004
								],
								[
									-91.64000000000004,
									48.139999999999986
								],
								[
									-92.60999999999999,
									48.44999999999996
								],
								[
									-93.63086999999996,
									48.609260000000006
								],
								[
									-94.32914000000005,
									48.67074000000002
								],
								[
									-94.63999999999996,
									48.84000000000003
								],
								[
									-94.81757999999996,
									49.38905
								],
								[
									-95.15608999999995,
									49.38425000000004
								],
								[
									-95.15906950917204,
									49.00000000000003
								],
								[
									-97.22872000000481,
									49.00070000000002
								],
								[
									-100.64999999999999,
									49.00000000000003
								],
								[
									-104.04825999999998,
									48.999859999999984
								],
								[
									-107.05,
									49.00000000000003
								],
								[
									-110.05000000000003,
									49.00000000000003
								],
								[
									-112.99999999999999,
									49.00000000000003
								],
								[
									-116.04818000000003,
									49.00000000000003
								],
								[
									-117.03121000000003,
									49.00000000000003
								],
								[
									-120.00000000000001,
									49.00000000000003
								],
								[
									-122.83999999999997,
									49.00000000000003
								],
								[
									-122.97421000000001,
									49.0025377777778
								],
								[
									-124.91023999999999,
									49.984560000000045
								],
								[
									-125.62461000000002,
									50.41656000000003
								],
								[
									-127.43561000000003,
									50.830610000000036
								],
								[
									-127.99275999999998,
									51.71583000000001
								],
								[
									-127.85032000000002,
									52.32961000000006
								],
								[
									-129.12979,
									52.755379999999974
								],
								[
									-129.30523000000002,
									53.561589999999995
								],
								[
									-130.51497000000003,
									54.28756999999999
								],
								[
									-130.53610999999998,
									54.802779999999984
								],
								[
									-129.98000000000002,
									55.285000000000025
								],
								[
									-130.00777999999997,
									55.91583
								],
								[
									-131.70781,
									56.55212
								],
								[
									-132.73042000000004,
									57.692890000000034
								],
								[
									-133.35556000000003,
									58.41028
								],
								[
									-134.27110999999996,
									58.86111000000005
								],
								[
									-134.945,
									59.270560000000046
								],
								[
									-135.47583000000003,
									59.78778
								],
								[
									-136.47972,
									59.46389000000005
								],
								[
									-137.45250000000001,
									58.90500000000003
								],
								[
									-138.34089,
									59.56210999999999
								],
								[
									-139.039,
									60.00000000000006
								],
								[
									-140.01299999999998,
									60.27681999999999
								],
								[
									-140.99778,
									60.30639000000005
								],
								[
									-140.99250000000004,
									66.00003000000001
								],
								[
									-140.986,
									69.71199999999999
								],
								[
									-139.12052,
									69.47102000000004
								],
								[
									-137.54636,
									68.99002000000002
								],
								[
									-136.50358000000003,
									68.89804000000001
								],
								[
									-135.62576,
									69.31512000000001
								],
								[
									-134.41464000000005,
									69.62742999999998
								],
								[
									-132.92925000000002,
									69.50533999999999
								],
								[
									-131.43136,
									69.94451000000001
								],
								[
									-129.79471,
									70.19368999999998
								],
								[
									-129.10773000000006,
									69.77927
								],
								[
									-128.36156,
									70.01286000000002
								],
								[
									-128.13817,
									70.48383999999999
								],
								[
									-127.44711999999998,
									70.37721000000002
								],
								[
									-125.75631999999999,
									69.48058
								],
								[
									-124.42482999999997,
									70.15840000000003
								],
								[
									-124.28967999999996,
									69.39969000000002
								],
								[
									-123.06108,
									69.56372000000002
								],
								[
									-122.68349999999994,
									69.85553000000007
								],
								[
									-121.47225999999999,
									69.79778000000002
								],
								[
									-119.94287999999997,
									69.37786
								],
								[
									-117.60267999999998,
									69.01128000000006
								],
								[
									-116.22642999999995,
									68.84151000000003
								],
								[
									-115.2469,
									68.90591000000006
								],
								[
									-113.89794000000002,
									68.39890000000003
								],
								[
									-115.30488999999999,
									67.90261000000007
								],
								[
									-113.49726999999996,
									67.68815000000004
								],
								[
									-110.79799999999994,
									67.80612000000002
								],
								[
									-109.94618999999996,
									67.98104000000001
								],
								[
									-108.88020000000003,
									67.38144000000003
								],
								[
									-107.79239,
									67.88736000000003
								],
								[
									-108.81299000000001,
									68.31164000000004
								],
								[
									-108.16720999999995,
									68.65392000000003
								],
								[
									-106.94999999999996,
									68.70000000000002
								],
								[
									-106.14999999999996,
									68.79999999999998
								],
								[
									-105.34281999999999,
									68.56122000000005
								],
								[
									-104.33791000000001,
									68.018
								],
								[
									-103.22114999999998,
									68.09774999999999
								],
								[
									-101.45432999999997,
									67.64689000000007
								],
								[
									-99.90195000000001,
									67.80566000000005
								],
								[
									-98.44319999999999,
									67.78164999999996
								],
								[
									-98.55859999999996,
									68.40394000000006
								],
								[
									-97.66947999999996,
									68.57864000000004
								],
								[
									-96.11991,
									68.23939000000001
								],
								[
									-96.12587999999994,
									67.29338000000001
								],
								[
									-95.48943000000003,
									68.09070000000003
								],
								[
									-94.68499999999995,
									68.06383
								],
								[
									-94.23282000000003,
									69.06903
								],
								[
									-95.30408,
									69.68571
								],
								[
									-96.47130999999999,
									70.08976000000001
								],
								[
									-96.39115000000001,
									71.19482000000002
								],
								[
									-95.20879999999997,
									71.92053000000004
								],
								[
									-93.88997000000003,
									71.76014999999998
								],
								[
									-92.87818000000004,
									71.31869
								],
								[
									-91.51964000000001,
									70.19128999999998
								],
								[
									-92.40691999999999,
									69.69997000000001
								],
								[
									-90.54709999999994,
									69.49766000000002
								],
								[
									-90.55150999999998,
									68.47498999999999
								],
								[
									-89.21514999999997,
									69.25872999999996
								],
								[
									-88.01965999999996,
									68.61508
								],
								[
									-88.31749000000002,
									67.87338000000008
								],
								[
									-87.35017000000002,
									67.19872000000001
								],
								[
									-86.30607,
									67.92146
								],
								[
									-85.57664000000003,
									68.78456000000003
								],
								[
									-85.52197000000001,
									69.88210999999998
								],
								[
									-84.10080999999997,
									69.80539000000005
								],
								[
									-82.62257999999994,
									69.65826000000001
								],
								[
									-81.28042999999997,
									69.16202000000001
								],
								[
									-81.2202,
									68.66567000000003
								],
								[
									-81.96436,
									68.13253
								],
								[
									-81.25927999999999,
									67.59716000000003
								],
								[
									-81.38652999999996,
									67.11078000000006
								],
								[
									-83.34456,
									66.41154
								],
								[
									-84.73541999999998,
									66.25730000000001
								],
								[
									-85.76942999999994,
									66.55832999999998
								],
								[
									-86.06759999999997,
									66.05625
								],
								[
									-87.03142999999994,
									65.21297000000007
								],
								[
									-87.32324,
									64.77563
								],
								[
									-88.48295999999996,
									64.09897000000004
								],
								[
									-89.91443999999998,
									64.03273000000002
								],
								[
									-90.70397999999997,
									63.61017000000001
								],
								[
									-90.77004000000005,
									62.96020999999996
								],
								[
									-91.93341999999998,
									62.83507999999998
								],
								[
									-93.15698,
									62.024689999999964
								],
								[
									-94.24152999999995,
									60.89865000000003
								],
								[
									-94.62931,
									60.11021000000002
								],
								[
									-94.68459999999999,
									58.948819999999984
								],
								[
									-93.21501999999998,
									58.78211999999996
								],
								[
									-92.76461999999998,
									57.845710000000054
								],
								[
									-92.29702999999992,
									57.08709000000002
								],
								[
									-90.89768999999998,
									57.28467999999998
								],
								[
									-89.03952999999998,
									56.85172000000006
								],
								[
									-88.03977999999998,
									56.47162000000003
								],
								[
									-87.32420999999997,
									55.99914000000004
								],
								[
									-86.07120999999998,
									55.72382999999999
								],
								[
									-85.01180999999994,
									55.30260000000001
								],
								[
									-83.36054999999999,
									55.24489
								],
								[
									-82.27285,
									55.148319999999984
								],
								[
									-82.43619999999999,
									54.28227000000004
								],
								[
									-82.12501999999998,
									53.277030000000025
								],
								[
									-81.40074999999999,
									52.157880000000034
								],
								[
									-79.91289000000003,
									51.20842000000005
								],
								[
									-79.14301000000003,
									51.53393
								],
								[
									-78.60190999999998,
									52.56208000000004
								],
								[
									-79.12420999999998,
									54.14145000000002
								],
								[
									-79.82957999999999,
									54.66772000000003
								],
								[
									-78.22873999999996,
									55.136449999999996
								],
								[
									-77.09559999999999,
									55.837410000000006
								],
								[
									-76.54136999999997,
									56.53423000000001
								],
								[
									-76.62319000000002,
									57.20263
								],
								[
									-77.30225999999999,
									58.05208999999999
								],
								[
									-78.51688000000001,
									58.80458000000007
								],
								[
									-77.33676000000003,
									59.85261
								],
								[
									-77.77272000000002,
									60.75787999999997
								],
								[
									-78.10686999999996,
									62.31964000000002
								],
								[
									-77.41066999999998,
									62.55053000000004
								],
								[
									-75.69621000000001,
									62.27840000000003
								],
								[
									-74.66819999999998,
									62.18111000000005
								],
								[
									-73.83987999999997,
									62.44380000000004
								],
								[
									-72.90853000000004,
									62.105069999999955
								],
								[
									-71.67707999999999,
									61.52535000000006
								],
								[
									-71.37368999999998,
									61.137170000000026
								],
								[
									-69.59042000000002,
									61.06141000000002
								],
								[
									-69.62032999999997,
									60.221250000000026
								],
								[
									-69.28789999999995,
									58.95736000000005
								],
								[
									-68.37454999999997,
									58.801060000000035
								],
								[
									-67.64975999999993,
									58.212060000000065
								],
								[
									-66.20178000000001,
									58.76730999999998
								],
								[
									-65.24517000000003,
									59.87071000000003
								],
								[
									-64.58351999999996,
									60.33558000000002
								],
								[
									-63.804749999999984,
									59.44260000000003
								],
								[
									-62.50235999999995,
									58.16708000000003
								],
								[
									-61.39654999999999,
									56.96745000000004
								],
								[
									-61.79866000000001,
									56.33945000000003
								],
								[
									-60.46852999999999,
									55.77547999999996
								],
								[
									-59.569619999999986,
									55.20407
								],
								[
									-57.97508000000002,
									54.94548999999998
								],
								[
									-57.33319999999998,
									54.62649999999999
								],
								[
									-56.93688999999998,
									53.78031999999999
								],
								[
									-56.158109999999965,
									53.647490000000005
								],
								[
									-55.75631999999996,
									53.27036000000004
								],
								[
									-55.68337999999997,
									52.14664000000005
								],
								[
									-56.409160000000014,
									51.77070000000006
								],
								[
									-57.12691000000004,
									51.419719999999984
								],
								[
									-58.774820000000005,
									51.0643
								],
								[
									-60.033090000000044,
									50.24277000000001
								],
								[
									-61.723659999999995,
									50.080460000000045
								],
								[
									-63.86250999999996,
									50.290989999999965
								],
								[
									-65.36330999999996,
									50.29820000000004
								],
								[
									-66.39904999999996,
									50.22897000000003
								],
								[
									-67.23631,
									49.51156
								],
								[
									-68.51113999999993,
									49.06836000000007
								],
								[
									-69.95361999999997,
									47.74488000000002
								],
								[
									-71.10458,
									46.82171000000005
								],
								[
									-70.25521999999995,
									46.98605999999995
								],
								[
									-68.64999999999998,
									48.299999999999955
								],
								[
									-66.55242999999996,
									49.133099999999985
								],
								[
									-65.05625999999998,
									49.23277999999999
								],
								[
									-64.17098999999996,
									48.74248000000003
								],
								[
									-65.11544999999995,
									48.070850000000036
								],
								[
									-64.79853999999995,
									46.992969999999985
								],
								[
									-64.47218999999996,
									46.23849000000001
								],
								[
									-63.17329000000004,
									45.73901999999998
								],
								[
									-61.52072000000004,
									45.88377000000003
								],
								[
									-60.51815000000005,
									47.007930000000016
								],
								[
									-60.44859999999997,
									46.28263999999999
								],
								[
									-59.80287000000004,
									45.92039999999997
								],
								[
									-61.039879999999954,
									45.26525000000001
								],
								[
									-63.25470999999999,
									44.67014000000003
								],
								[
									-64.24656000000004,
									44.26553000000001
								],
								[
									-65.36406000000002,
									43.54523000000006
								],
								[
									-66.12340000000003,
									43.61867000000004
								],
								[
									-66.16172999999995,
									44.46512000000001
								],
								[
									-64.42549,
									45.292040000000014
								],
								[
									-66.02605000000005,
									45.259310000000056
								],
								[
									-67.13741000000005,
									45.137530000000055
								],
								[
									-67.79134000000005,
									45.702810000000056
								],
								[
									-67.79045999999997,
									47.06636
								],
								[
									-68.23443999999998,
									47.35486
								]
							]
						],
						[
							[
								[
									-114.1671699999999,
									73.1214500000001
								],
								[
									-114.66633999999995,
									72.65277000000009
								],
								[
									-112.4410199999999,
									72.95540000000011
								],
								[
									-111.05038999999994,
									72.45040000000006
								],
								[
									-109.92034999999989,
									72.96113000000011
								],
								[
									-109.00653999999994,
									72.63335000000001
								],
								[
									-108.18834999999991,
									71.65089
								],
								[
									-107.68598999999996,
									72.0654800000001
								],
								[
									-108.39638999999997,
									73.08953000000011
								],
								[
									-107.51645000000005,
									73.23598000000001
								],
								[
									-106.52258999999988,
									73.07601000000003
								],
								[
									-105.4024599999999,
									72.67259000000007
								],
								[
									-104.77484000000005,
									71.6984000000001
								],
								[
									-104.46475999999984,
									70.9929700000001
								],
								[
									-102.78536999999996,
									70.49776000000003
								],
								[
									-100.9807799999999,
									70.02432000000002
								],
								[
									-101.0892899999999,
									69.58447000000012
								],
								[
									-102.7311599999999,
									69.50402000000003
								],
								[
									-102.09329,
									69.11962000000011
								],
								[
									-102.43023999999998,
									68.75282000000001
								],
								[
									-104.23999999999998,
									68.91000000000008
								],
								[
									-105.96000000000005,
									69.18000000000015
								],
								[
									-107.12254000000003,
									69.11922000000007
								],
								[
									-108.9999999999999,
									68.78000000000003
								],
								[
									-111.53414887520015,
									68.63005915681794
								],
								[
									-113.31320000000007,
									68.53553999999997
								],
								[
									-113.85495999999983,
									69.00744000000012
								],
								[
									-115.22000000000006,
									69.28000000000009
								],
								[
									-116.10793999999993,
									69.16821000000004
								],
								[
									-117.34,
									69.96000000000012
								],
								[
									-116.6747299999999,
									70.06655000000003
								],
								[
									-115.13112000000002,
									70.23730000000006
								],
								[
									-113.72140999999995,
									70.1923700000001
								],
								[
									-112.4161,
									70.36638000000002
								],
								[
									-114.35000000000004,
									70.60000000000005
								],
								[
									-116.48684000000004,
									70.52044999999998
								],
								[
									-117.90479999999998,
									70.54056000000014
								],
								[
									-118.43238000000005,
									70.90920000000008
								],
								[
									-116.11310999999995,
									71.30918
								],
								[
									-117.65567999999993,
									71.29520000000005
								],
								[
									-119.40198999999998,
									71.55858999999998
								],
								[
									-118.56266999999994,
									72.30785000000006
								],
								[
									-117.86641999999992,
									72.70594000000008
								],
								[
									-115.18908999999996,
									73.31459000000012
								],
								[
									-114.1671699999999,
									73.1214500000001
								]
							]
						],
						[
							[
								[
									-104.49999999999999,
									73.42000000000004
								],
								[
									-105.37999999999998,
									72.76000000000008
								],
								[
									-106.93999999999998,
									73.46000000000004
								],
								[
									-106.59999999999998,
									73.59999999999997
								],
								[
									-105.25999999999999,
									73.64000000000007
								],
								[
									-104.49999999999999,
									73.42000000000004
								]
							]
						],
						[
							[
								[
									-76.33999999999997,
									73.10268498995302
								],
								[
									-76.25140380859375,
									72.82638549804688
								],
								[
									-77.31443786621091,
									72.85554504394528
								],
								[
									-78.39167022705081,
									72.87665557861328
								],
								[
									-79.48625183105466,
									72.74220275878909
								],
								[
									-79.77583312988284,
									72.80290222167974
								],
								[
									-80.87609863281253,
									73.33318328857422
								],
								[
									-80.83388519287107,
									73.69318389892578
								],
								[
									-80.35305786132812,
									73.75971984863278
								],
								[
									-78.06443786621094,
									73.65193176269534
								],
								[
									-76.33999999999997,
									73.10268498995302
								]
							]
						],
						[
							[
								[
									-86.56217851433414,
									73.15744700793846
								],
								[
									-85.77437130404454,
									72.53412588163383
								],
								[
									-84.85011247428824,
									73.34027822538712
								],
								[
									-82.31559017610098,
									73.75095083281059
								],
								[
									-80.60008765330764,
									72.71654368762421
								],
								[
									-80.7489416165244,
									72.06190664335077
								],
								[
									-78.77063859731078,
									72.35217316353416
								],
								[
									-77.8246239895596,
									72.74961660429105
								],
								[
									-75.60584469267573,
									72.24367849393741
								],
								[
									-74.22861609566499,
									71.7671442735579
								],
								[
									-74.09914079455771,
									71.33084015571765
								],
								[
									-72.24222571479766,
									71.55692454699451
								],
								[
									-71.2000154283352,
									70.92001251899723
								],
								[
									-68.7860542466849,
									70.52502370877426
								],
								[
									-67.91497046575694,
									70.12194753689761
								],
								[
									-66.96903337265417,
									69.18608734809189
								],
								[
									-68.80512285020055,
									68.72019847276442
								],
								[
									-66.44986609563387,
									68.06716339789202
								],
								[
									-64.86231441919523,
									67.84753856065163
								],
								[
									-63.42493445499676,
									66.92847321234066
								],
								[
									-61.85198137068059,
									66.86212067327784
								],
								[
									-62.1631768459423,
									66.16025136988961
								],
								[
									-63.918444383384184,
									64.99866852483285
								],
								[
									-65.14886023625363,
									65.42603261988668
								],
								[
									-66.72121904159854,
									66.3880410834322
								],
								[
									-68.01501603867396,
									66.2627257351244
								],
								[
									-68.14128740097917,
									65.68978913030438
								],
								[
									-67.0896461656234,
									65.108455105237
								],
								[
									-65.73208045109976,
									64.64840566675863
								],
								[
									-65.32016760930128,
									64.38273712834606
								],
								[
									-64.66940629744968,
									63.39292674422748
								],
								[
									-65.01380388045891,
									62.674185085695996
								],
								[
									-66.27504472519047,
									62.945098781986076
								],
								[
									-68.78318620469273,
									63.74567007105182
								],
								[
									-67.36968075221304,
									62.883965562584876
								],
								[
									-66.32829728866722,
									62.280074774822054
								],
								[
									-66.16556820338016,
									61.93089712182589
								],
								[
									-68.87736650254465,
									62.33014923771282
								],
								[
									-71.02343705919384,
									62.91070811629584
								],
								[
									-72.235378587519,
									63.397836005295176
								],
								[
									-71.8862784491713,
									63.67998932560886
								],
								[
									-73.37830624051838,
									64.19396312118383
								],
								[
									-74.8344189114226,
									64.67907562932379
								],
								[
									-74.81850257027673,
									64.38909332951798
								],
								[
									-77.70997982452005,
									64.22954234481679
								],
								[
									-78.55594885935417,
									64.57290639918014
								],
								[
									-77.89728105336192,
									65.30919220647479
								],
								[
									-76.0182742987972,
									65.32696889918316
								],
								[
									-73.95979529488272,
									65.4547647162409
								],
								[
									-74.29388342964964,
									65.8117713487294
								],
								[
									-73.94491248238265,
									66.31057811142674
								],
								[
									-72.65116716173941,
									67.28457550726387
								],
								[
									-72.92605994331609,
									67.72692576768239
								],
								[
									-73.31161780464575,
									68.06943716091291
								],
								[
									-74.84330725777681,
									68.55462718370129
								],
								[
									-76.86910091826675,
									68.89473562283027
								],
								[
									-76.22864905465735,
									69.14776927354742
								],
								[
									-77.28736996123712,
									69.76954010688328
								],
								[
									-78.1686339993266,
									69.82648753526891
								],
								[
									-78.95724219431673,
									70.16688019477542
								],
								[
									-79.49245500356366,
									69.87180776638891
								],
								[
									-81.30547095409176,
									69.74318512641435
								],
								[
									-84.94470618359847,
									69.9666340196444
								],
								[
									-87.06000342481789,
									70.26000112576537
								],
								[
									-88.68171322300151,
									70.41074127876081
								],
								[
									-89.51341956252304,
									70.76203766548099
								],
								[
									-88.46772111688077,
									71.21818553332133
								],
								[
									-89.8881512112875,
									71.22255219184996
								],
								[
									-90.20516028518202,
									72.2350743679608
								],
								[
									-89.43657670770494,
									73.12946421985237
								],
								[
									-88.40824154331281,
									73.53788890247122
								],
								[
									-85.82615108920092,
									73.80381582304523
								],
								[
									-86.56217851433414,
									73.15744700793846
								]
							]
						],
						[
							[
								[
									-100.35642000000004,
									73.84389000000002
								],
								[
									-99.16387000000002,
									73.63338999999999
								],
								[
									-97.37999999999997,
									73.76000000000005
								],
								[
									-97.11999999999995,
									73.47
								],
								[
									-98.05359000000004,
									72.99052
								],
								[
									-96.53999999999999,
									72.56
								],
								[
									-96.72,
									71.65999999999997
								],
								[
									-98.35965999999993,
									71.27284999999998
								],
								[
									-99.32286,
									71.35639000000003
								],
								[
									-100.01481999999999,
									71.73827
								],
								[
									-102.49999999999994,
									72.51000000000002
								],
								[
									-102.47999999999999,
									72.82999999999998
								],
								[
									-100.43835999999997,
									72.70588000000001
								],
								[
									-101.53999999999996,
									73.36000000000001
								],
								[
									-100.35642000000004,
									73.84389000000002
								]
							]
						],
						[
							[
								[
									-93.19629553910022,
									72.77199249947336
								],
								[
									-94.26904659704726,
									72.02459625923598
								],
								[
									-95.40985551632266,
									72.06188080513459
								],
								[
									-96.03374508338246,
									72.94027680123182
								],
								[
									-96.01826799191099,
									73.4374299180958
								],
								[
									-95.49579342322403,
									73.86241689726418
								],
								[
									-94.50365759965234,
									74.13490672473921
								],
								[
									-92.42001217321177,
									74.10002513294219
								],
								[
									-90.50979285354259,
									73.85673248971204
								],
								[
									-92.0039652168299,
									72.9662442084585
								],
								[
									-93.19629553910022,
									72.77199249947336
								]
							]
						],
						[
							[
								[
									-120.46000000000001,
									71.38360179308759
								],
								[
									-123.09218999999993,
									70.90164000000004
								],
								[
									-123.62000000000002,
									71.34000000000009
								],
								[
									-125.92894873747333,
									71.86868846301141
								],
								[
									-125.4999999999999,
									72.29226081179502
								],
								[
									-124.80729000000004,
									73.02255999999997
								],
								[
									-123.9399999999999,
									73.68000000000015
								],
								[
									-124.91774999999991,
									74.29275000000013
								],
								[
									-121.53787999999999,
									74.44893000000005
								],
								[
									-120.10978000000003,
									74.24135000000004
								],
								[
									-117.55563999999987,
									74.18576999999996
								],
								[
									-116.58442000000004,
									73.89607000000007
								],
								[
									-115.51080999999996,
									73.47519
								],
								[
									-116.7679399999999,
									73.22291999999999
								],
								[
									-119.22000000000006,
									72.52000000000001
								],
								[
									-120.46000000000001,
									71.82000000000005
								],
								[
									-120.46000000000001,
									71.38360179308759
								]
							]
						],
						[
							[
								[
									-93.61275590694049,
									74.97999726022445
								],
								[
									-94.15690873897384,
									74.59234650338686
								],
								[
									-95.60868058956561,
									74.66686391875177
								],
								[
									-96.82093217648458,
									74.92762319609659
								],
								[
									-96.28858740922982,
									75.37782827422336
								],
								[
									-94.85081987178913,
									75.6472175157609
								],
								[
									-93.97774654821794,
									75.29648956979597
								],
								[
									-93.61275590694049,
									74.97999726022445
								]
							]
						],
						[
							[
								[
									-98.50000000000003,
									76.72
								],
								[
									-97.73558499999996,
									76.25656000000004
								],
								[
									-97.70441500000001,
									75.74344000000002
								],
								[
									-98.16000000000003,
									75
								],
								[
									-99.80874000000001,
									74.89743999999999
								],
								[
									-100.88365999999995,
									75.05736000000002
								],
								[
									-100.86291999999996,
									75.64075
								],
								[
									-102.50208999999994,
									75.56380000000001
								],
								[
									-102.56552,
									76.33660000000003
								],
								[
									-101.48972999999994,
									76.30537000000004
								],
								[
									-99.98348999999997,
									76.64634000000001
								],
								[
									-98.57699000000002,
									76.58858999999998
								],
								[
									-98.50000000000003,
									76.72
								]
							]
						],
						[
							[
								[
									-108.21141,
									76.20168000000004
								],
								[
									-107.81942999999998,
									75.84552000000002
								],
								[
									-106.92893000000004,
									76.01282000000003
								],
								[
									-105.88100000000003,
									75.96940000000006
								],
								[
									-105.70497999999996,
									75.47951
								],
								[
									-106.31347,
									75.00527000000002
								],
								[
									-109.70000000000005,
									74.85
								],
								[
									-112.22307000000002,
									74.41696000000002
								],
								[
									-113.74380999999998,
									74.39426999999998
								],
								[
									-113.87134999999996,
									74.72029000000003
								],
								[
									-111.79420999999996,
									75.16249999999997
								],
								[
									-116.31220999999998,
									75.04343000000003
								],
								[
									-117.71039999999999,
									75.22220000000007
								],
								[
									-116.34602000000002,
									76.19903
								],
								[
									-115.40486999999997,
									76.47887000000003
								],
								[
									-112.59056000000002,
									76.14134000000004
								],
								[
									-110.81421999999996,
									75.54919000000001
								],
								[
									-109.06710000000004,
									75.47321
								],
								[
									-110.49726,
									76.42981999999998
								],
								[
									-109.58109999999994,
									76.79416999999998
								],
								[
									-108.54859,
									76.67831999999999
								],
								[
									-108.21141,
									76.20168000000004
								]
							]
						],
						[
							[
								[
									-94.68408586299947,
									77.09787832305838
								],
								[
									-93.57392106807313,
									76.77629588490609
								],
								[
									-91.60502315953661,
									76.77851797149461
								],
								[
									-90.74184587274922,
									76.44959747995682
								],
								[
									-90.96966142450799,
									76.07401317005946
								],
								[
									-89.82223792189927,
									75.84777374948564
								],
								[
									-89.18708289259979,
									75.61016551380763
								],
								[
									-87.83827633334963,
									75.56618886992723
								],
								[
									-86.37919226758868,
									75.48242137318218
								],
								[
									-84.78962521029061,
									75.69920400664651
								],
								[
									-82.75344458691006,
									75.78431509063125
								],
								[
									-81.12853084992437,
									75.71398346628203
								],
								[
									-80.05751095245915,
									75.3368488634159
								],
								[
									-79.83393286814834,
									74.9231273464872
								],
								[
									-80.45777075877584,
									74.65730377877779
								],
								[
									-81.94884253612554,
									74.44245901152433
								],
								[
									-83.22889360221143,
									74.56402781849096
								],
								[
									-86.0974523587333,
									74.41003205026115
								],
								[
									-88.15035030796022,
									74.39230703398499
								],
								[
									-89.76472205275837,
									74.51555532500115
								],
								[
									-92.42244096552943,
									74.837757880341
								],
								[
									-92.76828548864282,
									75.38681997344216
								],
								[
									-92.88990597204173,
									75.88265534128266
								],
								[
									-93.893824022176,
									76.31924367950054
								],
								[
									-95.96245744503582,
									76.44138092722247
								],
								[
									-97.12137895382949,
									76.75107778594761
								],
								[
									-96.74512285031236,
									77.16138865834515
								],
								[
									-94.68408586299947,
									77.09787832305838
								]
							]
						],
						[
							[
								[
									-116.19858659550735,
									77.64528677032621
								],
								[
									-116.33581336145839,
									76.87696157501057
								],
								[
									-117.1060505847688,
									76.53003184681913
								],
								[
									-118.04041215703815,
									76.4811717800871
								],
								[
									-119.8993175868857,
									76.05321340606199
								],
								[
									-121.4999950771265,
									75.9000186225328
								],
								[
									-122.85492448615898,
									76.1165428738357
								],
								[
									-122.85492529360322,
									76.1165428738357
								],
								[
									-121.15753536032825,
									76.86450755482835
								],
								[
									-119.10393897182105,
									77.51221995717464
								],
								[
									-117.57013078496597,
									77.49831899688812
								],
								[
									-116.19858659550735,
									77.64528677032621
								]
							]
						],
						[
							[
								[
									-93.84000301794399,
									77.5199972602345
								],
								[
									-94.29560828324526,
									77.4913426785287
								],
								[
									-96.16965410031008,
									77.5551113959769
								],
								[
									-96.43630449093612,
									77.83462921824363
								],
								[
									-94.42257727738638,
									77.82000478790499
								],
								[
									-93.72065629756588,
									77.63433136668033
								],
								[
									-93.84000301794399,
									77.5199972602345
								]
							]
						],
						[
							[
								[
									-110.18693803591297,
									77.6970148790503
								],
								[
									-112.05119116905848,
									77.40922882761686
								],
								[
									-113.53427893761906,
									77.73220652944116
								],
								[
									-112.72458675825385,
									78.05105011668195
								],
								[
									-111.26444332563085,
									78.15295604116156
								],
								[
									-109.8544518705471,
									77.99632477488484
								],
								[
									-110.18693803591297,
									77.6970148790503
								]
							]
						],
						[
							[
								[
									-109.66314571820259,
									78.60197256134569
								],
								[
									-110.88131425661886,
									78.40691986766001
								],
								[
									-112.54209143761517,
									78.40790171987351
								],
								[
									-112.5258908760916,
									78.55055451121524
								],
								[
									-111.5000103422334,
									78.84999359813057
								],
								[
									-110.96366065147602,
									78.80444082306522
								],
								[
									-109.66314571820259,
									78.60197256134569
								]
							]
						],
						[
							[
								[
									-95.83029496944934,
									78.05694122996326
								],
								[
									-97.309842902398,
									77.8505972358218
								],
								[
									-98.12428931353398,
									78.0828569607576
								],
								[
									-98.55286780474665,
									78.45810537384511
								],
								[
									-98.63198442258553,
									78.87193024363839
								],
								[
									-97.33723141151262,
									78.83198436147677
								],
								[
									-96.75439876990879,
									78.765812689927
								],
								[
									-95.55927792029459,
									78.41831452098029
								],
								[
									-95.83029496944934,
									78.05694122996326
								]
							]
						],
						[
							[
								[
									-100.06019182005214,
									78.3247543403159
								],
								[
									-99.67093909381362,
									77.90754466420742
								],
								[
									-101.30394019245301,
									78.01898489044481
								],
								[
									-102.94980872273305,
									78.34322866486022
								],
								[
									-105.17613277873154,
									78.38033234324575
								],
								[
									-104.21042945027716,
									78.6774201524918
								],
								[
									-105.41958045125854,
									78.91833567983645
								],
								[
									-105.49228919149316,
									79.3015939399292
								],
								[
									-103.52928239623793,
									79.16534902619165
								],
								[
									-100.82515804726881,
									78.8004617377787
								],
								[
									-100.06019182005214,
									78.3247543403159
								]
							]
						],
						[
							[
								[
									-87.01999999999995,
									79.65999999999997
								],
								[
									-85.81434999999996,
									79.33690000000001
								],
								[
									-87.18756000000002,
									79.0393
								],
								[
									-89.03534999999997,
									78.28723000000002
								],
								[
									-90.80436,
									78.21533
								],
								[
									-92.87669000000002,
									78.34333000000004
								],
								[
									-93.95116000000004,
									78.75098999999997
								],
								[
									-93.93573999999995,
									79.11373
								],
								[
									-93.14523999999994,
									79.38010000000003
								],
								[
									-94.97400000000002,
									79.37247999999997
								],
								[
									-96.07614000000001,
									79.70502000000002
								],
								[
									-96.70971999999995,
									80.15777000000003
								],
								[
									-96.01643999999999,
									80.60233000000005
								],
								[
									-95.32344999999998,
									80.90729000000002
								],
								[
									-94.29843,
									80.97726999999998
								],
								[
									-94.73542000000003,
									81.20646000000002
								],
								[
									-92.40984,
									81.25739000000002
								],
								[
									-91.13289,
									80.72345000000007
								],
								[
									-89.44999999999999,
									80.50932203389829
								],
								[
									-87.80999999999997,
									80.32000000000002
								],
								[
									-87.01999999999995,
									79.65999999999997
								]
							]
						],
						[
							[
								[
									-68.50000000000006,
									83.10632151676575
								],
								[
									-65.82735,
									83.02801000000005
								],
								[
									-63.68000000000001,
									82.89999999999998
								],
								[
									-61.849999999999994,
									82.62860000000006
								],
								[
									-61.89387999999997,
									82.36165
								],
								[
									-64.33400000000003,
									81.92775
								],
								[
									-66.75341999999995,
									81.72527
								],
								[
									-67.65754999999993,
									81.50140999999999
								],
								[
									-65.48030999999997,
									81.50657000000007
								],
								[
									-67.83999999999997,
									80.9
								],
								[
									-69.46969999999996,
									80.61683000000005
								],
								[
									-71.18,
									79.80000000000001
								],
								[
									-73.24279999999996,
									79.63415000000003
								],
								[
									-73.88000000000002,
									79.43016220480209
								],
								[
									-76.90773000000002,
									79.32309000000001
								],
								[
									-75.52924000000002,
									79.19765999999998
								],
								[
									-76.22045999999995,
									79.01907
								],
								[
									-75.39344999999997,
									78.52581
								],
								[
									-76.34353999999996,
									78.18296000000001
								],
								[
									-77.88851,
									77.89991
								],
								[
									-78.36268999999999,
									77.50858999999997
								],
								[
									-79.75950999999998,
									77.20967999999999
								],
								[
									-79.61964999999998,
									76.98336
								],
								[
									-77.91088999999997,
									77.02204499999999
								],
								[
									-77.88911000000002,
									76.77795500000002
								],
								[
									-80.56124999999997,
									76.17812000000006
								],
								[
									-83.17439000000002,
									76.45403000000002
								],
								[
									-86.11183999999997,
									76.29901000000007
								],
								[
									-87.59999999999994,
									76.41999999999999
								],
								[
									-89.49068000000003,
									76.47238999999999
								],
								[
									-89.61610000000002,
									76.95213000000001
								],
								[
									-87.76738999999995,
									77.17833000000002
								],
								[
									-88.25999999999999,
									77.89999999999998
								],
								[
									-87.65,
									77.97022222222222
								],
								[
									-84.97633999999996,
									77.53873000000002
								],
								[
									-86.33999999999995,
									78.18000000000004
								],
								[
									-87.96191999999996,
									78.37181000000007
								],
								[
									-87.15197999999998,
									78.75867000000002
								],
								[
									-85.37868,
									78.99690000000001
								],
								[
									-85.09494999999995,
									79.34542999999996
								],
								[
									-86.50734,
									79.73623999999998
								],
								[
									-86.93178999999995,
									80.25145
								],
								[
									-84.19844000000003,
									80.20836000000006
								],
								[
									-83.40869565217383,
									80.10000000000002
								],
								[
									-81.84823000000003,
									80.46442000000002
								],
								[
									-84.10000000000002,
									80.58000000000004
								],
								[
									-87.59895000000003,
									80.51627000000002
								],
								[
									-89.36663000000004,
									80.85569000000001
								],
								[
									-90.20000000000002,
									81.26000000000008
								],
								[
									-91.36785999999998,
									81.5531
								],
								[
									-91.58702000000005,
									81.89429000000007
								],
								[
									-90.09999999999997,
									82.08500000000001
								],
								[
									-88.93227000000002,
									82.11751000000004
								],
								[
									-86.97024000000005,
									82.27961000000005
								],
								[
									-85.49999999999994,
									82.65227345805704
								],
								[
									-84.26000499999998,
									82.59999999999997
								],
								[
									-83.18000000000004,
									82.32
								],
								[
									-82.41999999999993,
									82.86000000000007
								],
								[
									-81.1,
									83.02000000000004
								],
								[
									-79.30663999999999,
									83.13056000000003
								],
								[
									-76.25000000000003,
									83.1720588235294
								],
								[
									-75.71877999999995,
									83.06404
								],
								[
									-72.83153000000001,
									83.23324000000002
								],
								[
									-70.66576499999994,
									83.16978075838284
								],
								[
									-68.50000000000006,
									83.10632151676575
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Canada",
					"sov_a3": "CAN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Canada",
					"adm0_a3": "CAN",
					"geou_dif": 0,
					"geounit": "Canada",
					"gu_a3": "CAN",
					"su_dif": 0,
					"subunit": "Canada",
					"su_a3": "CAN",
					"brk_diff": 0,
					"name": "Canada",
					"name_long": "Canada",
					"brk_a3": "CAN",
					"brk_name": "Canada",
					"brk_group": "",
					"abbrev": "Can.",
					"postal": "CA",
					"formal_en": "Canada",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Canada",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 6,
					"mapcolor9": 2,
					"mapcolor13": 2,
					"pop_est": 33487208,
					"gdp_md_est": 1300000,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "1. Developed region: G7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CA",
					"iso_a3": "CAN",
					"iso_n3": "124",
					"un_a3": "124",
					"wb_a2": "CA",
					"wb_a3": "CAN",
					"woe_id": -99,
					"adm0_a3_is": "CAN",
					"adm0_a3_us": "CAN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Northern America",
					"region_wb": "North America",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								9.59422610844635,
								47.52505809182027
							],
							[
								9.632931756232978,
								47.34760122332999
							],
							[
								9.479969516649021,
								47.102809963563374
							],
							[
								9.932448357796659,
								46.92072805438296
							],
							[
								10.44270145024663,
								46.89354625099743
							],
							[
								10.363378126678612,
								46.48357127540986
							],
							[
								9.922836541390382,
								46.31489940040919
							],
							[
								9.182881707403055,
								46.44021474871698
							],
							[
								8.966305779667806,
								46.03693187111119
							],
							[
								8.489952426801324,
								46.005150865251686
							],
							[
								8.31662967289438,
								46.16364248309086
							],
							[
								7.7559920589598335,
								45.82449005795931
							],
							[
								7.2738509456766565,
								45.776947740250776
							],
							[
								6.843592970414505,
								45.99114655210061
							],
							[
								6.5000997249704255,
								46.42967275652944
							],
							[
								6.022609490593538,
								46.27298981382047
							],
							[
								6.037388950229001,
								46.725778713561866
							],
							[
								6.768713820023606,
								47.2877082383037
							],
							[
								6.736571079138059,
								47.541801255882845
							],
							[
								7.192202182655507,
								47.44976552997102
							],
							[
								7.466759067422231,
								47.62058197691181
							],
							[
								8.317301466514152,
								47.61357982033626
							],
							[
								8.522611932009767,
								47.83082754169129
							],
							[
								9.59422610844635,
								47.52505809182027
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Switzerland",
					"sov_a3": "CHE",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Switzerland",
					"adm0_a3": "CHE",
					"geou_dif": 0,
					"geounit": "Switzerland",
					"gu_a3": "CHE",
					"su_dif": 0,
					"subunit": "Switzerland",
					"su_a3": "CHE",
					"brk_diff": 0,
					"name": "Switzerland",
					"name_long": "Switzerland",
					"brk_a3": "CHE",
					"brk_name": "Switzerland",
					"brk_group": "",
					"abbrev": "Switz.",
					"postal": "CH",
					"formal_en": "Swiss Confederation",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Switzerland",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 2,
					"mapcolor9": 7,
					"mapcolor13": 3,
					"pop_est": 7604467,
					"gdp_md_est": 316700,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CH",
					"iso_a3": "CHE",
					"iso_n3": "756",
					"un_a3": "756",
					"wb_a2": "CH",
					"wb_a3": "CHE",
					"woe_id": -99,
					"adm0_a3_is": "CHE",
					"adm0_a3_us": "CHE",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Western Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 11,
					"long_len": 11,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									-66.95992000000004,
									-54.896809999999974
								],
								[
									-67.29102999999989,
									-55.301239999999915
								],
								[
									-68.14862999999986,
									-55.61182999999996
								],
								[
									-68.63999081081181,
									-55.58001799908689
								],
								[
									-69.23209999999997,
									-55.49905999999991
								],
								[
									-69.95809,
									-55.198429999999995
								],
								[
									-71.00567999999993,
									-55.05383000000003
								],
								[
									-72.2639,
									-54.49513999999995
								],
								[
									-73.28519999999995,
									-53.95751999999989
								],
								[
									-74.66252999999998,
									-52.83748999999993
								],
								[
									-73.83809999999994,
									-53.047429999999984
								],
								[
									-72.43417999999994,
									-53.71540000000001
								],
								[
									-71.10773000000003,
									-54.074329999999904
								],
								[
									-70.5917799999998,
									-53.61582999999994
								],
								[
									-70.26747999999995,
									-52.93122999999999
								],
								[
									-69.34564999999989,
									-52.518299999999925
								],
								[
									-68.63401022758316,
									-52.63637045887437
								],
								[
									-68.6333499999999,
									-54.869499999999945
								],
								[
									-67.56243999999992,
									-54.87000999999996
								],
								[
									-66.95992000000004,
									-54.896809999999974
								]
							]
						],
						[
							[
								[
									-67.10667355006362,
									-22.7359245744764
								],
								[
									-66.98523393417764,
									-22.98634856536283
								],
								[
									-67.32844295924414,
									-24.025303236590915
								],
								[
									-68.41765296087613,
									-24.518554782816878
								],
								[
									-68.38600114609736,
									-26.185016371365236
								],
								[
									-68.59479977077268,
									-26.506908868111267
								],
								[
									-68.2955415513704,
									-26.89933969493579
								],
								[
									-69.00123491074828,
									-27.521213881136134
								],
								[
									-69.65613033718316,
									-28.459141127233693
								],
								[
									-70.01355038112987,
									-29.36792286551855
								],
								[
									-69.91900834825194,
									-30.336339206668313
								],
								[
									-70.53506893581945,
									-31.36501026787029
								],
								[
									-70.07439938015364,
									-33.09120981214804
								],
								[
									-69.81477698431922,
									-33.27388600029985
								],
								[
									-69.81730912950147,
									-34.193571465798286
								],
								[
									-70.3880494859491,
									-35.16968759535945
								],
								[
									-70.36476925320167,
									-36.005088799789945
								],
								[
									-71.1218806627098,
									-36.65812387466234
								],
								[
									-71.11862504747543,
									-37.5768274879472
								],
								[
									-70.81466427273472,
									-38.55299529394074
								],
								[
									-71.41351660834906,
									-38.916022230791114
								],
								[
									-71.68076127794646,
									-39.80816415787807
								],
								[
									-71.91573401557756,
									-40.83233936947073
								],
								[
									-71.74680375841547,
									-42.051386407235995
								],
								[
									-72.14889807807853,
									-42.25488819760139
								],
								[
									-71.91542395698391,
									-43.40856454851742
								],
								[
									-71.46405615913051,
									-43.78761117937833
								],
								[
									-71.79362260607195,
									-44.20717213315611
								],
								[
									-71.32980078803621,
									-44.40752166115169
								],
								[
									-71.22277889675973,
									-44.784242852559416
								],
								[
									-71.65931555854533,
									-44.97368865334144
								],
								[
									-71.55200944689125,
									-45.56073292417713
								],
								[
									-71.91725847033021,
									-46.8848381487918
								],
								[
									-72.44735531278027,
									-47.73853281025353
								],
								[
									-72.33116085477195,
									-48.244238376661826
								],
								[
									-72.64824744331494,
									-48.87861825947679
								],
								[
									-73.41543575712004,
									-49.31843637471296
								],
								[
									-73.32805091011448,
									-50.37878508890987
								],
								[
									-72.97574683296463,
									-50.74145029073431
								],
								[
									-72.30997351753237,
									-50.677009779666356
								],
								[
									-72.32940385607404,
									-51.42595631287241
								],
								[
									-71.91480383979635,
									-52.009022305865926
								],
								[
									-69.49836218939609,
									-52.14276091263725
								],
								[
									-68.57154537624135,
									-52.29944385534626
								],
								[
									-69.46128434922664,
									-52.29195077266393
								],
								[
									-69.94277950710614,
									-52.53793059037326
								],
								[
									-70.84510169135453,
									-52.899200528525725
								],
								[
									-71.00633216010525,
									-53.83325204220135
								],
								[
									-71.42979468452094,
									-53.85645476030039
								],
								[
									-72.55794287788487,
									-53.53141000118446
								],
								[
									-73.70275672066288,
									-52.835069268607256
								],
								[
									-73.70275672066288,
									-52.8350700760515
								],
								[
									-74.94676347522517,
									-52.26275358841903
								],
								[
									-75.26002600777852,
									-51.629354750373224
								],
								[
									-74.97663245308982,
									-51.04339568461569
								],
								[
									-75.4797541978835,
									-50.37837167745156
								],
								[
									-75.60801510283196,
									-48.6737728818718
								],
								[
									-75.18276974150214,
									-47.71191944762316
								],
								[
									-74.1265809801047,
									-46.9392534319951
								],
								[
									-75.64439531116545,
									-46.64764332457203
								],
								[
									-74.69215369332306,
									-45.76397633238098
								],
								[
									-74.35170935738427,
									-44.103044122087894
								],
								[
									-73.2403560045152,
									-44.454960625995625
								],
								[
									-72.71780392117978,
									-42.38335580827899
								],
								[
									-73.38889990913825,
									-42.117532240569574
								],
								[
									-73.70133561877486,
									-43.365776462579745
								],
								[
									-74.33194312203258,
									-43.22495818458441
								],
								[
									-74.01795711942717,
									-41.794812920906836
								],
								[
									-73.67709937202997,
									-39.942212823243125
								],
								[
									-73.21759253609068,
									-39.258688653318515
								],
								[
									-73.50555945503706,
									-38.28288258235108
								],
								[
									-73.58806087919109,
									-37.15628468195602
								],
								[
									-73.1667170884993,
									-37.12378020604436
								],
								[
									-72.55313696968173,
									-35.508840020491036
								],
								[
									-71.86173214383257,
									-33.90909270603153
								],
								[
									-71.43845048692992,
									-32.41889942803083
								],
								[
									-71.66872066922244,
									-30.92064462659252
								],
								[
									-71.37008256700773,
									-30.095682061485007
								],
								[
									-71.48989437527646,
									-28.861442152625912
								],
								[
									-70.90512386746158,
									-27.6403797340012
								],
								[
									-70.72495398627598,
									-25.705924167587213
								],
								[
									-70.40396582709505,
									-23.628996677344546
								],
								[
									-70.09124589708068,
									-21.393319187101227
								],
								[
									-70.16441972520599,
									-19.756468194256186
								],
								[
									-70.37257239447774,
									-18.347975355708883
								],
								[
									-69.85844356960581,
									-18.092693780187034
								],
								[
									-69.590423753524,
									-17.58001189541929
								],
								[
									-69.10024695501943,
									-18.260125420812656
								],
								[
									-68.96681840684184,
									-18.981683444904093
								],
								[
									-68.44222510443095,
									-19.405068454671422
								],
								[
									-68.75716712103372,
									-20.372657972904477
								],
								[
									-68.21991309271124,
									-21.494346612231837
								],
								[
									-67.82817989772266,
									-22.872918796482182
								],
								[
									-67.10667355006362,
									-22.7359245744764
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Chile",
					"sov_a3": "CHL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Chile",
					"adm0_a3": "CHL",
					"geou_dif": 0,
					"geounit": "Chile",
					"gu_a3": "CHL",
					"su_dif": 0,
					"subunit": "Chile",
					"su_a3": "CHL",
					"brk_diff": 0,
					"name": "Chile",
					"name_long": "Chile",
					"brk_a3": "CHL",
					"brk_name": "Chile",
					"brk_group": "",
					"abbrev": "Chile",
					"postal": "CL",
					"formal_en": "Republic of Chile",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Chile",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 1,
					"mapcolor9": 5,
					"mapcolor13": 9,
					"pop_est": 16601707,
					"gdp_md_est": 244500,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CL",
					"iso_a3": "CHL",
					"iso_n3": "152",
					"un_a3": "152",
					"wb_a2": "CL",
					"wb_a3": "CHL",
					"woe_id": -99,
					"adm0_a3_is": "CHL",
					"adm0_a3_us": "CHL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									110.33918786015155,
									18.678395087147607
								],
								[
									109.47520958866372,
									18.197700913968617
								],
								[
									108.65520796105616,
									18.5076819930714
								],
								[
									108.62621748254045,
									19.367887885001977
								],
								[
									109.11905561730802,
									19.821038519769388
								],
								[
									110.21159874882287,
									20.101253973872076
								],
								[
									110.78655073450224,
									20.07753449145008
								],
								[
									111.01005130416465,
									19.695929877190736
								],
								[
									110.57064660038682,
									19.255879218009312
								],
								[
									110.33918786015155,
									18.678395087147607
								]
							]
						],
						[
							[
								[
									130.63386640840983,
									42.90301463477056
								],
								[
									130.64001590385246,
									42.39500946712528
								],
								[
									129.99426720593326,
									42.9853868678438
								],
								[
									129.5966687358795,
									42.4249817978546
								],
								[
									128.05221520397234,
									41.99428457291799
								],
								[
									128.20843305879075,
									41.46677155208255
								],
								[
									127.34378299368305,
									41.50315176041596
								],
								[
									126.8690832866499,
									41.81656932226616
								],
								[
									126.18204511932944,
									41.10733612727637
								],
								[
									125.07994184784062,
									40.569823716792456
								],
								[
									124.26562462778534,
									39.92849335383414
								],
								[
									122.86757042856104,
									39.63778758397626
								],
								[
									122.13138797413094,
									39.17045176854464
								],
								[
									121.05455447803288,
									38.89747101496292
								],
								[
									121.5859949077225,
									39.36085358332414
								],
								[
									121.37675703337268,
									39.75026133885953
								],
								[
									122.16859500538104,
									40.42244253189605
								],
								[
									121.64035851449356,
									40.94638987890332
								],
								[
									120.76862877816197,
									40.5933881699176
								],
								[
									119.63960208544907,
									39.89805593521422
								],
								[
									119.02346398323303,
									39.2523330755111
								],
								[
									118.04274865119791,
									39.20427399347969
								],
								[
									117.53270226447708,
									38.7376358098841
								],
								[
									118.05969852098971,
									38.06147553156106
								],
								[
									118.87814985562838,
									37.897325344385905
								],
								[
									118.91163618375353,
									37.44846385349874
								],
								[
									119.70280236214208,
									37.15638865818508
								],
								[
									120.82345747282366,
									37.87042776137798
								],
								[
									121.71125857959797,
									37.48112335870718
								],
								[
									122.35793745329849,
									37.45448415786069
								],
								[
									122.51999474496583,
									36.930614325501836
								],
								[
									121.10416385303304,
									36.65132904718044
								],
								[
									120.63700890511458,
									36.11143952081113
								],
								[
									119.66456180224608,
									35.609790554337735
								],
								[
									119.1512081238586,
									34.909859117160465
								],
								[
									120.22752485563373,
									34.36033193616862
								],
								[
									120.6203690939166,
									33.37672272392513
								],
								[
									121.22901411345023,
									32.46031871187719
								],
								[
									121.90814578663006,
									31.69217438407469
								],
								[
									121.89191938689035,
									30.949351508095106
								],
								[
									121.26425744027333,
									30.676267401648715
								],
								[
									121.50351932178475,
									30.142914943964257
								],
								[
									122.0921138855891,
									29.832520453403163
								],
								[
									121.93842817595308,
									29.01802236583481
								],
								[
									121.68443851123848,
									28.225512600206685
								],
								[
									121.12566124886646,
									28.135673122667185
								],
								[
									120.39547326058235,
									27.053206895449392
								],
								[
									119.58549686083958,
									25.740780544532612
								],
								[
									118.65687137255455,
									24.547390855400238
								],
								[
									117.28160647997086,
									23.624501451099718
								],
								[
									115.89073530483515,
									22.782873236578098
								],
								[
									114.76382734584624,
									22.66807404224167
								],
								[
									114.15254682826568,
									22.223760077396207
								],
								[
									113.80677981980077,
									22.54833974862143
								],
								[
									113.24107791550162,
									22.05136749927047
								],
								[
									111.84359215703248,
									21.550493679281516
								],
								[
									110.78546552942416,
									21.397143866455338
								],
								[
									110.44403934127169,
									20.341032619706397
								],
								[
									109.88986128137358,
									20.282457383703445
								],
								[
									109.62765506392466,
									21.008227037026728
								],
								[
									109.86448815311834,
									21.395050970947523
								],
								[
									108.52281294152445,
									21.71521230721183
								],
								[
									108.050180291783,
									21.552379869060104
								],
								[
									107.04342003787266,
									21.811898912029903
								],
								[
									106.56727339073538,
									22.218204860924743
								],
								[
									106.7254032735485,
									22.79426788989838
								],
								[
									105.81124718630522,
									22.976892401617903
								],
								[
									105.32920942588666,
									23.352063300056983
								],
								[
									104.4768583516645,
									22.819150092046925
								],
								[
									103.50451460166053,
									22.70375661873922
								],
								[
									102.70699222210018,
									22.708795070887703
								],
								[
									102.17043582561357,
									22.464753119389343
								],
								[
									101.65201785686159,
									22.31819875740956
								],
								[
									101.80311974488293,
									21.174366766845054
								],
								[
									101.27002566936002,
									21.20165192309517
								],
								[
									101.18000532430759,
									21.43657298429406
								],
								[
									101.15003299357826,
									21.849984442629022
								],
								[
									100.41653771362738,
									21.558839423096657
								],
								[
									99.98348921102158,
									21.74293671313646
								],
								[
									99.24089887898722,
									22.118314317304566
								],
								[
									99.53199222208744,
									22.9490388046126
								],
								[
									98.89874922078283,
									23.142722072842588
								],
								[
									98.6602624857558,
									24.063286037690006
								],
								[
									97.60471967976204,
									23.897404690033056
								],
								[
									97.72460900267916,
									25.083637193293043
								],
								[
									98.67183800658924,
									25.918702500913497
								],
								[
									98.71209394734458,
									26.74353587494025
								],
								[
									98.68269005737054,
									27.508812160750665
								],
								[
									98.24623091023338,
									27.74722138112918
								],
								[
									97.91198774616944,
									28.335945136014374
								],
								[
									97.32711388549004,
									28.261582749946342
								],
								[
									96.24883344928784,
									28.41103099213447
								],
								[
									96.58659061074755,
									28.83097951915437
								],
								[
									96.11767866413103,
									29.45280202892252
								],
								[
									95.40480228066465,
									29.03171662039216
								],
								[
									94.56599043170294,
									29.277438055939967
								],
								[
									93.41334760943269,
									28.64062938080724
								],
								[
									92.50311893104364,
									27.89687632904645
								],
								[
									91.6966565286967,
									27.771741848251622
								],
								[
									91.25885379431989,
									28.04061432546635
								],
								[
									90.73051395056783,
									28.06495392507574
								],
								[
									90.01582889197121,
									28.296438503527185
								],
								[
									89.47581017452117,
									28.042758897406372
								],
								[
									88.8142484883206,
									27.299315904239393
								],
								[
									88.73032596227856,
									28.08686473236756
								],
								[
									88.12044070836996,
									27.87654165293958
								],
								[
									86.95451704300066,
									27.97426178640353
								],
								[
									85.82331994013154,
									28.20357595469875
								],
								[
									85.01163821812307,
									28.642773952747376
								],
								[
									84.23457970575018,
									28.839893703724698
								],
								[
									83.89899295444675,
									29.32022614187764
								],
								[
									83.33711510613719,
									29.463731594352197
								],
								[
									82.32751264845089,
									30.115268052688208
								],
								[
									81.5258044778748,
									30.422716986608663
								],
								[
									81.11125613802929,
									30.183480943313413
								],
								[
									79.72136681510713,
									30.882714748654735
								],
								[
									78.73889448437401,
									31.51590607352705
								],
								[
									78.45844648632604,
									32.61816437431273
								],
								[
									79.17612877799556,
									32.483779812137755
								],
								[
									79.20889163606856,
									32.994394639613745
								],
								[
									78.81108646028574,
									33.506198025032404
								],
								[
									78.91226891471322,
									34.321936346975775
								],
								[
									77.83745079947462,
									35.49400950778781
								],
								[
									76.19284834178572,
									35.89840342868786
								],
								[
									75.89689741405019,
									36.66680613865188
								],
								[
									75.158027785141,
									37.13303091078916
								],
								[
									74.98000247589542,
									37.419990139305895
								],
								[
									74.82998579295216,
									37.99000702570146
								],
								[
									74.8648157083168,
									38.3788463404816
								],
								[
									74.2575142760227,
									38.60650686294349
								],
								[
									73.92885216664641,
									38.505815334622724
								],
								[
									73.67537926625485,
									39.43123688410557
								],
								[
									73.96001305531846,
									39.66000844986172
								],
								[
									73.82224368682833,
									39.89397349706314
								],
								[
									74.77686242055606,
									40.36642527929163
								],
								[
									75.46782799673073,
									40.56207225194868
								],
								[
									76.52636803579745,
									40.42794607193514
								],
								[
									76.90448449087714,
									41.06648590754966
								],
								[
									78.18719689322606,
									41.185315863604814
								],
								[
									78.54366092317528,
									41.58224254003872
								],
								[
									80.11943037305142,
									42.123940741538235
								],
								[
									80.25999026888533,
									42.34999929459909
								],
								[
									80.18015018099439,
									42.92006785742686
								],
								[
									80.86620649610123,
									43.180362046881015
								],
								[
									79.96610639844144,
									44.91751699480463
								],
								[
									81.9470707539181,
									45.31702749285316
								],
								[
									82.45892581576905,
									45.539649563166506
								],
								[
									83.18048383986056,
									47.33003123635075
								],
								[
									85.16429039911324,
									47.00095571551611
								],
								[
									85.7204838398707,
									47.45296946877309
								],
								[
									85.76823286330838,
									48.4557506373969
								],
								[
									86.59877648310336,
									48.54918162698061
								],
								[
									87.3599703307627,
									49.21498078062916
								],
								[
									87.75126427607668,
									49.29719798440547
								],
								[
									88.0138322285517,
									48.5994627956006
								],
								[
									88.85429772334678,
									48.069081732773014
								],
								[
									90.28082563676392,
									47.693549099307916
								],
								[
									90.97080936072499,
									46.888146063822944
								],
								[
									90.58576826371834,
									45.7197160914875
								],
								[
									90.94553958533433,
									45.28607330991025
								],
								[
									92.13389082231825,
									45.115075995456436
								],
								[
									93.48073367714133,
									44.975472113620015
								],
								[
									94.68892866412537,
									44.35233185482846
								],
								[
									95.30687544147153,
									44.24133087826547
								],
								[
									95.76245486855672,
									43.31944916439463
								],
								[
									96.34939578652782,
									42.72563528092866
								],
								[
									97.451757440178,
									42.74888967546008
								],
								[
									99.51581749878002,
									42.524691473961695
								],
								[
									100.8458655131083,
									42.663804429691425
								],
								[
									101.83304039917996,
									42.51487295182628
								],
								[
									103.31227827353482,
									41.90746816666763
								],
								[
									104.52228193564903,
									41.90834666601663
								],
								[
									104.96499393109346,
									41.59740957291635
								],
								[
									106.12931562706169,
									42.1343277044289
								],
								[
									107.744772576938,
									42.481515814781915
								],
								[
									109.24359581913146,
									42.51944631608416
								],
								[
									110.41210330611531,
									42.87123362891103
								],
								[
									111.12968224492025,
									43.40683401140018
								],
								[
									111.8295878438814,
									43.74311839453949
								],
								[
									111.66773725794323,
									44.07317576758771
								],
								[
									111.34837690637946,
									44.45744171811006
								],
								[
									111.87330610560028,
									45.10207937273512
								],
								[
									112.43606245325887,
									45.01164561622426
								],
								[
									113.46390669154422,
									44.80889313412712
								],
								[
									114.46033165899607,
									45.33981679949389
								],
								[
									115.98509647020015,
									45.72723501238602
								],
								[
									116.71786828009888,
									46.388202419615254
								],
								[
									117.42170128791426,
									46.67273285581422
								],
								[
									118.87432579963874,
									46.80541209572365
								],
								[
									119.66326989143877,
									46.69267995867895
								],
								[
									119.77282392789758,
									47.04805878355015
								],
								[
									118.86657433479499,
									47.74706004494621
								],
								[
									118.06414269416675,
									48.06673045510374
								],
								[
									117.29550744025747,
									47.6977090521074
								],
								[
									116.30895267137325,
									47.853410142602826
								],
								[
									115.74283735561576,
									47.72654450132629
								],
								[
									115.48528201707305,
									48.135382595403456
								],
								[
									116.19180219936763,
									49.13459809019906
								],
								[
									116.67880089728621,
									49.888531399121405
								],
								[
									117.87924441942639,
									49.51098338479696
								],
								[
									119.28846072802585,
									50.14288279886205
								],
								[
									119.27936567594239,
									50.582907619827296
								],
								[
									120.18204959521697,
									51.64356639261803
								],
								[
									120.73819135954201,
									51.964115302124554
								],
								[
									120.725789015792,
									52.51622630473082
								],
								[
									120.1770886577169,
									52.75388621684121
								],
								[
									121.00308475147025,
									53.25140106873124
								],
								[
									122.24574791879289,
									53.431725979213695
								],
								[
									123.57150678924089,
									53.45880442973464
								],
								[
									125.06821129771046,
									53.161044826868846
								],
								[
									125.9463489116462,
									52.79279857035695
								],
								[
									126.564399041857,
									51.7842554795327
								],
								[
									126.93915652883769,
									51.35389415140591
								],
								[
									127.28745568248493,
									50.73979726826545
								],
								[
									127.65740726126242,
									49.76027049417294
								],
								[
									129.39781782442046,
									49.44060008401544
								],
								[
									130.5822933289824,
									48.72968740497612
								],
								[
									130.98728152885386,
									47.790132351261406
								],
								[
									132.50667199109952,
									47.78896963153488
								],
								[
									133.37359581922803,
									48.18344167743493
								],
								[
									135.02631147678673,
									48.47822988544391
								],
								[
									134.50081383681064,
									47.57843984637785
								],
								[
									134.11236209527263,
									47.21246735288673
								],
								[
									133.7696439963129,
									46.11692698829907
								],
								[
									133.09712690646646,
									45.144066473972174
								],
								[
									131.8834542176596,
									45.32116160743644
								],
								[
									131.0252120301561,
									44.96795319272158
								],
								[
									131.28855512911557,
									44.111519680348266
								],
								[
									131.14468794161488,
									42.92998973242695
								],
								[
									130.63386640840983,
									42.90301463477056
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "China",
					"sov_a3": "CH1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "China",
					"adm0_a3": "CHN",
					"geou_dif": 0,
					"geounit": "China",
					"gu_a3": "CHN",
					"su_dif": 0,
					"subunit": "China",
					"su_a3": "CHN",
					"brk_diff": 0,
					"name": "China",
					"name_long": "China",
					"brk_a3": "CHN",
					"brk_name": "China",
					"brk_group": "",
					"abbrev": "China",
					"postal": "CN",
					"formal_en": "People's Republic of China",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "China",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 4,
					"mapcolor9": 4,
					"mapcolor13": 3,
					"pop_est": 1338612970,
					"gdp_md_est": 7973000,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "3. Emerging region: BRIC",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CN",
					"iso_a3": "CHN",
					"iso_n3": "156",
					"un_a3": "156",
					"wb_a2": "CN",
					"wb_a3": "CHN",
					"woe_id": -99,
					"adm0_a3_is": "CHN",
					"adm0_a3_us": "CHN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-2.856125047202397,
								4.994475816259509
							],
							[
								-3.3110843571000714,
								4.984295559098015
							],
							[
								-4.008819545904942,
								5.179813340674315
							],
							[
								-4.649917364917911,
								5.168263658057086
							],
							[
								-5.8344962223445265,
								4.993700669775137
							],
							[
								-6.528769090185847,
								4.705087795425015
							],
							[
								-7.5189412093304355,
								4.338288479017308
							],
							[
								-7.7121593896697505,
								4.364565944837722
							],
							[
								-7.635368211284031,
								5.188159084489456
							],
							[
								-7.539715135111763,
								5.313345241716519
							],
							[
								-7.570152553731688,
								5.707352199725904
							],
							[
								-7.993692592795881,
								6.126189683451543
							],
							[
								-8.311347622094019,
								6.193033148621083
							],
							[
								-8.60288021486862,
								6.4675641951716605
							],
							[
								-8.385451626000574,
								6.911800645368743
							],
							[
								-8.48544552248535,
								7.39520783124307
							],
							[
								-8.439298468448698,
								7.686042792181738
							],
							[
								-8.280703497744938,
								7.687179673692157
							],
							[
								-8.221792364932199,
								8.123328762235573
							],
							[
								-8.299048631208564,
								8.316443589710303
							],
							[
								-8.20349890790088,
								8.455453192575447
							],
							[
								-7.832100389019188,
								8.575704250518626
							],
							[
								-8.07911373537435,
								9.376223863152035
							],
							[
								-8.30961646161225,
								9.789531968622441
							],
							[
								-8.229337124046822,
								10.1290202905639
							],
							[
								-8.029943610048619,
								10.206534939001713
							],
							[
								-7.899589809592372,
								10.297382106970828
							],
							[
								-7.622759161804809,
								10.147236232946796
							],
							[
								-6.8505065576350574,
								10.138993841996239
							],
							[
								-6.666460944027548,
								10.430810655148449
							],
							[
								-6.493965013037268,
								10.411302801958271
							],
							[
								-6.205222947606431,
								10.524060777219134
							],
							[
								-6.050452032892267,
								10.096360785355444
							],
							[
								-5.816926235365287,
								10.222554633012194
							],
							[
								-5.404341599946974,
								10.370736802609146
							],
							[
								-4.954653286143099,
								10.152713934769736
							],
							[
								-4.7798835921319665,
								9.821984768101743
							],
							[
								-4.3302469547603835,
								9.610834865757141
							],
							[
								-3.9804491845766847,
								9.8623440617217
							],
							[
								-3.511898972986273,
								9.90032623945622
							],
							[
								-2.8274963037127065,
								9.642460842319778
							],
							[
								-2.562189500326241,
								8.219627793811483
							],
							[
								-2.9835849674503265,
								7.379704901555513
							],
							[
								-3.244370083011262,
								6.250471503113502
							],
							[
								-2.8107014632178395,
								5.38905121502411
							],
							[
								-2.856125047202397,
								4.994475816259509
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Ivory Coast",
					"sov_a3": "CIV",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Ivory Coast",
					"adm0_a3": "CIV",
					"geou_dif": 0,
					"geounit": "Ivory Coast",
					"gu_a3": "CIV",
					"su_dif": 0,
					"subunit": "Ivory Coast",
					"su_a3": "CIV",
					"brk_diff": 0,
					"name": "Côte d'Ivoire",
					"name_long": "Côte d'Ivoire",
					"brk_a3": "CIV",
					"brk_name": "Côte d'Ivoire",
					"brk_group": "",
					"abbrev": "I.C.",
					"postal": "CI",
					"formal_en": "Republic of Ivory Coast",
					"formal_fr": "Republic of Cote D'Ivoire",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Côte d'Ivoire",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 6,
					"mapcolor9": 3,
					"mapcolor13": 3,
					"pop_est": 20617068,
					"gdp_md_est": 33850,
					"pop_year": -99,
					"lastcensus": 1998,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CI",
					"iso_a3": "CIV",
					"iso_n3": "384",
					"un_a3": "384",
					"wb_a2": "CI",
					"wb_a3": "CIV",
					"woe_id": -99,
					"adm0_a3_is": "CIV",
					"adm0_a3_us": "CIV",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 13,
					"long_len": 13,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								13.075822381246752,
								2.2670970727590145
							],
							[
								12.951333855855609,
								2.32161570882694
							],
							[
								12.359380323952221,
								2.19281220133945
							],
							[
								11.75166548019979,
								2.3267575138399934
							],
							[
								11.276449008843713,
								2.261050930180872
							],
							[
								9.649158155972628,
								2.2838660750377358
							],
							[
								9.795195753629457,
								3.073404445809117
							],
							[
								9.404366896206,
								3.734526882335203
							],
							[
								8.948115675501072,
								3.9041289331171356
							],
							[
								8.744923943729418,
								4.35221527751996
							],
							[
								8.48881554529089,
								4.495617377129918
							],
							[
								8.500287713259695,
								4.7719829370268485
							],
							[
								8.757532993208628,
								5.479665839047911
							],
							[
								9.233162876023044,
								6.444490668153335
							],
							[
								9.522705926154401,
								6.453482367372117
							],
							[
								10.118276808318257,
								7.03876963950988
							],
							[
								10.497375115611419,
								7.0553577742755635
							],
							[
								11.058787876030351,
								6.6444267846905944
							],
							[
								11.74577436691851,
								6.981382961449754
							],
							[
								11.839308709366803,
								7.397042344589437
							],
							[
								12.063946160539558,
								7.799808457872302
							],
							[
								12.218872104550599,
								8.305824082874324
							],
							[
								12.753671502339216,
								8.717762762888995
							],
							[
								12.955467970438974,
								9.417771714714704
							],
							[
								13.167599724997103,
								9.640626328973411
							],
							[
								13.308676385153918,
								10.160362046748928
							],
							[
								13.572949659894562,
								10.798565985553566
							],
							[
								14.415378859116684,
								11.572368882692075
							],
							[
								14.468192172918975,
								11.904751695193411
							],
							[
								14.577177768622533,
								12.085360826053503
							],
							[
								14.181336297266794,
								12.483656927943116
							],
							[
								14.213530714584635,
								12.802035427293347
							],
							[
								14.495787387762846,
								12.85939626713733
							],
							[
								14.893385857816526,
								12.219047756392584
							],
							[
								14.9601518083376,
								11.555574042197224
							],
							[
								14.92356489427496,
								10.891325181517473
							],
							[
								15.46787275560527,
								9.98233673750343
							],
							[
								14.909353875394716,
								9.992129421422732
							],
							[
								14.62720055508106,
								9.920919297724538
							],
							[
								14.171466098699028,
								10.021378282099931
							],
							[
								13.954218377344006,
								9.549494940626687
							],
							[
								14.54446658698177,
								8.965861314322268
							],
							[
								14.97999555833769,
								8.796104234243472
							],
							[
								15.120865512765334,
								8.382150173369425
							],
							[
								15.43609174974577,
								7.692812404811973
							],
							[
								15.279460483469109,
								7.421924546737969
							],
							[
								14.776545444404576,
								6.408498033062045
							],
							[
								14.536560092841114,
								6.2269587264206905
							],
							[
								14.459407179429348,
								5.4517605656103
							],
							[
								14.558935988023507,
								5.03059764243153
							],
							[
								14.47837243008047,
								4.732605495620447
							],
							[
								14.950953403389661,
								4.210389309094921
							],
							[
								15.036219516671252,
								3.8513672957471243
							],
							[
								15.405395948964383,
								3.33530060466434
							],
							[
								15.862732374747482,
								3.0135372989989833
							],
							[
								15.907380812247652,
								2.557389431158612
							],
							[
								16.012852410555354,
								2.267639675298085
							],
							[
								15.940918816805066,
								1.7276726342802957
							],
							[
								15.146341993885244,
								1.9640147973671844
							],
							[
								14.33781253424658,
								2.2278746606494906
							],
							[
								13.075822381246752,
								2.2670970727590145
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Cameroon",
					"sov_a3": "CMR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Cameroon",
					"adm0_a3": "CMR",
					"geou_dif": 0,
					"geounit": "Cameroon",
					"gu_a3": "CMR",
					"su_dif": 0,
					"subunit": "Cameroon",
					"su_a3": "CMR",
					"brk_diff": 0,
					"name": "Cameroon",
					"name_long": "Cameroon",
					"brk_a3": "CMR",
					"brk_name": "Cameroon",
					"brk_group": "",
					"abbrev": "Cam.",
					"postal": "CM",
					"formal_en": "Republic of Cameroon",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Cameroon",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 1,
					"mapcolor13": 3,
					"pop_est": 18879301,
					"gdp_md_est": 42750,
					"pop_year": -99,
					"lastcensus": 2005,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CM",
					"iso_a3": "CMR",
					"iso_n3": "120",
					"un_a3": "120",
					"wb_a2": "CM",
					"wb_a3": "CMR",
					"woe_id": -99,
					"adm0_a3_is": "CMR",
					"adm0_a3_us": "CMR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Middle Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								29.579466180140884,
								-1.3413131648856265
							],
							[
								29.291886834436614,
								-1.6200558406679872
							],
							[
								29.254834832483343,
								-2.2151099585089113
							],
							[
								29.117478875451553,
								-2.2922111954883846
							],
							[
								29.024926385216787,
								-2.8392579077301576
							],
							[
								29.276383904749053,
								-3.293907159034063
							],
							[
								29.339997592900346,
								-4.4999834122940925
							],
							[
								29.519986606572928,
								-5.419978936386315
							],
							[
								29.419992710088167,
								-5.939998874539434
							],
							[
								29.620032179490014,
								-6.520015150583426
							],
							[
								30.199996779101696,
								-7.079980970898163
							],
							[
								30.74001549655179,
								-8.340007419470915
							],
							[
								30.346086053190817,
								-8.238256524288218
							],
							[
								29.00291222506047,
								-8.407031752153472
							],
							[
								28.734866570762502,
								-8.526559340044578
							],
							[
								28.449871046672826,
								-9.164918308146085
							],
							[
								28.67368167492893,
								-9.605924981324932
							],
							[
								28.49606977714177,
								-10.789883721564046
							],
							[
								28.372253045370428,
								-11.793646742401393
							],
							[
								28.642417433392353,
								-11.971568698782315
							],
							[
								29.34154788586909,
								-12.360743910372413
							],
							[
								29.61600141777123,
								-12.178894545137311
							],
							[
								29.69961388521949,
								-13.257226657771831
							],
							[
								28.934285922976837,
								-13.248958428605135
							],
							[
								28.523561639121027,
								-12.698604424696683
							],
							[
								28.155108676879987,
								-12.272480564017897
							],
							[
								27.388798862423783,
								-12.132747491100666
							],
							[
								27.164419793412463,
								-11.608748467661075
							],
							[
								26.553087599399618,
								-11.924439792532127
							],
							[
								25.752309604604733,
								-11.784965101776358
							],
							[
								25.418118116973204,
								-11.330935967659961
							],
							[
								24.78316979340295,
								-11.238693536018964
							],
							[
								24.31451622894795,
								-11.26282642989927
							],
							[
								24.25715538910399,
								-10.951992689663657
							],
							[
								23.912215203555718,
								-10.926826267137514
							],
							[
								23.45679080576744,
								-10.867863457892483
							],
							[
								22.83734541188474,
								-11.01762175867433
							],
							[
								22.402798292742375,
								-10.993075453335692
							],
							[
								22.155268182064308,
								-11.084801120653772
							],
							[
								22.208753289486395,
								-9.894796237836509
							],
							[
								21.875181919042348,
								-9.523707777548566
							],
							[
								21.8018013851879,
								-8.90870655684298
							],
							[
								21.949130893652043,
								-8.305900974158277
							],
							[
								21.74645592620331,
								-7.920084730667149
							],
							[
								21.7281107927397,
								-7.290872491081302
							],
							[
								20.5147481625265,
								-7.2996058081386295
							],
							[
								20.6018229509383,
								-6.939317722199682
							],
							[
								20.091621534920648,
								-6.943090101756994
							],
							[
								20.037723016040218,
								-7.116361179231646
							],
							[
								19.41750247567316,
								-7.155428562044299
							],
							[
								19.16661339689611,
								-7.738183688999754
							],
							[
								19.01675174324967,
								-7.988245944860132
							],
							[
								18.464175652752687,
								-7.847014255406443
							],
							[
								18.13422163256905,
								-7.987677504104923
							],
							[
								17.472970004962235,
								-8.0685511206417
							],
							[
								17.08999596524717,
								-7.545688978712526
							],
							[
								16.8601908708452,
								-7.2222978654299865
							],
							[
								16.573179965896145,
								-6.6226445451150875
							],
							[
								16.326528354567046,
								-5.877470391466268
							],
							[
								13.375597364971895,
								-5.8642412247995495
							],
							[
								13.024869419006961,
								-5.984388929878158
							],
							[
								12.735171339578699,
								-5.965682061388499
							],
							[
								12.32243167486351,
								-6.10009246177966
							],
							[
								12.182336866920252,
								-5.789930515163839
							],
							[
								12.436688266660868,
								-5.6843038875592455
							],
							[
								12.468004184629736,
								-5.248361504745005
							],
							[
								12.63161176926579,
								-4.991271254092936
							],
							[
								12.995517205465177,
								-4.781103203961884
							],
							[
								13.258240187237048,
								-4.882957452009165
							],
							[
								13.600234816144678,
								-4.50013844159097
							],
							[
								14.144956088933299,
								-4.510008640158716
							],
							[
								14.209034864975223,
								-4.793092136253598
							],
							[
								14.582603794013181,
								-4.97023894615014
							],
							[
								15.170991652088444,
								-4.343507175314301
							],
							[
								15.753540073314753,
								-3.8551648901560966
							],
							[
								16.0062895036543,
								-3.535132744972529
							],
							[
								15.972803175529151,
								-2.7123922664536124
							],
							[
								16.407091912510054,
								-1.7409270157986825
							],
							[
								16.865306837642123,
								-1.2258163387132868
							],
							[
								17.523716261472856,
								-0.743830254726987
							],
							[
								17.638644646889986,
								-0.4248316381892465
							],
							[
								17.66355268725468,
								-0.05808399821381727
							],
							[
								17.826540154703252,
								0.28892324462610475
							],
							[
								17.774191928791566,
								0.8556586775710854
							],
							[
								17.898835483479587,
								1.7418319767282782
							],
							[
								18.094275750407434,
								2.365721543788055
							],
							[
								18.393792351971143,
								2.90044342692822
							],
							[
								18.45306521980993,
								3.5043858911233485
							],
							[
								18.54298221199778,
								4.201785183118318
							],
							[
								18.93231245288476,
								4.709506130385975
							],
							[
								19.46778364429315,
								5.03152781821278
							],
							[
								20.290679152108936,
								4.691677761245288
							],
							[
								20.927591180106276,
								4.322785549329737
							],
							[
								21.659122755630023,
								4.22434194581372
							],
							[
								22.405123732195538,
								4.029160061047321
							],
							[
								22.70412356943629,
								4.633050848810157
							],
							[
								22.841479526468106,
								4.710126247573484
							],
							[
								23.29721398285014,
								4.609693101414223
							],
							[
								24.410531040146253,
								5.10878408448913
							],
							[
								24.805028924262416,
								4.89724660890235
							],
							[
								25.12883344900328,
								4.92724477784779
							],
							[
								25.278798455514305,
								5.170408229997192
							],
							[
								25.650455356557472,
								5.256087754737123
							],
							[
								26.402760857862543,
								5.1508745385908705
							],
							[
								27.04406538260471,
								5.127852688004836
							],
							[
								27.37422610851749,
								5.233944403500061
							],
							[
								27.97997724784281,
								4.408413397637375
							],
							[
								28.428993768026913,
								4.287154649264494
							],
							[
								28.696677687298802,
								4.455077215996937
							],
							[
								29.1590784034465,
								4.389267279473231
							],
							[
								29.71599531425602,
								4.600804755060025
							],
							[
								29.953500197069474,
								4.173699042167684
							],
							[
								30.83385989759381,
								3.509165961110341
							],
							[
								30.77334679538004,
								2.339883327642127
							],
							[
								31.174149204235817,
								2.204465236821264
							],
							[
								30.85267011894806,
								1.8493964705438088
							],
							[
								30.468507521290295,
								1.5838054467797207
							],
							[
								30.086153598762706,
								1.0623127303062887
							],
							[
								29.87577884290249,
								0.5973798689763044
							],
							[
								29.819503208136638,
								-0.2053101538133717
							],
							[
								29.58783776217217,
								-0.5874056941794805
							],
							[
								29.579466180140884,
								-1.3413131648856265
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Democratic Republic of the Congo",
					"sov_a3": "COD",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Democratic Republic of the Congo",
					"adm0_a3": "COD",
					"geou_dif": 0,
					"geounit": "Democratic Republic of the Congo",
					"gu_a3": "COD",
					"su_dif": 0,
					"subunit": "Democratic Republic of the Congo",
					"su_a3": "COD",
					"brk_diff": 0,
					"name": "Dem. Rep. Congo",
					"name_long": "Democratic Republic of the Congo",
					"brk_a3": "COD",
					"brk_name": "Democratic Republic of the Congo",
					"brk_group": "",
					"abbrev": "D.R.C.",
					"postal": "DRC",
					"formal_en": "Democratic Republic of the Congo",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Congo, Dem. Rep.",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 4,
					"mapcolor9": 4,
					"mapcolor13": 7,
					"pop_est": 68692542,
					"gdp_md_est": 20640,
					"pop_year": -99,
					"lastcensus": 1984,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CD",
					"iso_a3": "COD",
					"iso_n3": "180",
					"un_a3": "180",
					"wb_a2": "ZR",
					"wb_a3": "ZAR",
					"woe_id": -99,
					"adm0_a3_is": "COD",
					"adm0_a3_us": "COD",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Middle Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 15,
					"long_len": 32,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								12.995517205465177,
								-4.781103203961884
							],
							[
								12.620759718484493,
								-4.438023369976136
							],
							[
								12.318607618873926,
								-4.606230157086188
							],
							[
								11.91496300624209,
								-5.037986748884791
							],
							[
								11.093772820691925,
								-3.978826592630547
							],
							[
								11.855121697648116,
								-3.4268706193210505
							],
							[
								11.478038771214303,
								-2.7656189917142413
							],
							[
								11.820963575903193,
								-2.514161472181982
							],
							[
								12.495702752338161,
								-2.391688327650243
							],
							[
								12.575284458067642,
								-1.948511244315135
							],
							[
								13.109618767965628,
								-2.4287403296035137
							],
							[
								13.99240726080771,
								-2.4708049454890997
							],
							[
								14.299210239324566,
								-1.998275648612214
							],
							[
								14.425455763413595,
								-1.333406670744971
							],
							[
								14.316418491277744,
								-0.5526274552470483
							],
							[
								13.843320753645656,
								0.038757635901149
							],
							[
								14.276265903386957,
								1.1969298364266194
							],
							[
								14.026668735417218,
								1.3956773950211527
							],
							[
								13.282631463278818,
								1.3141836612968805
							],
							[
								13.003113641012078,
								1.8308963077833198
							],
							[
								13.075822381246752,
								2.2670970727590145
							],
							[
								14.33781253424658,
								2.2278746606494906
							],
							[
								15.146341993885244,
								1.9640147973671844
							],
							[
								15.940918816805066,
								1.7276726342802957
							],
							[
								16.012852410555354,
								2.267639675298085
							],
							[
								16.537058139724138,
								3.198254706226279
							],
							[
								17.133042433346304,
								3.728196519379452
							],
							[
								17.809900343505262,
								3.5601964379985698
							],
							[
								18.45306521980993,
								3.5043858911233485
							],
							[
								18.393792351971143,
								2.90044342692822
							],
							[
								18.094275750407434,
								2.365721543788055
							],
							[
								17.898835483479587,
								1.7418319767282782
							],
							[
								17.774191928791566,
								0.8556586775710854
							],
							[
								17.826540154703252,
								0.28892324462610475
							],
							[
								17.66355268725468,
								-0.05808399821381727
							],
							[
								17.638644646889986,
								-0.4248316381892465
							],
							[
								17.523716261472856,
								-0.743830254726987
							],
							[
								16.865306837642123,
								-1.2258163387132868
							],
							[
								16.407091912510054,
								-1.7409270157986825
							],
							[
								15.972803175529151,
								-2.7123922664536124
							],
							[
								16.0062895036543,
								-3.535132744972529
							],
							[
								15.753540073314753,
								-3.8551648901560966
							],
							[
								15.170991652088444,
								-4.343507175314301
							],
							[
								14.582603794013181,
								-4.97023894615014
							],
							[
								14.209034864975223,
								-4.793092136253598
							],
							[
								14.144956088933299,
								-4.510008640158716
							],
							[
								13.600234816144678,
								-4.50013844159097
							],
							[
								13.258240187237048,
								-4.882957452009165
							],
							[
								12.995517205465177,
								-4.781103203961884
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Republic of Congo",
					"sov_a3": "COG",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Republic of Congo",
					"adm0_a3": "COG",
					"geou_dif": 0,
					"geounit": "Republic of Congo",
					"gu_a3": "COG",
					"su_dif": 0,
					"subunit": "Republic of Congo",
					"su_a3": "COG",
					"brk_diff": 0,
					"name": "Congo",
					"name_long": "Republic of Congo",
					"brk_a3": "COG",
					"brk_name": "Republic of Congo",
					"brk_group": "",
					"abbrev": "Rep. Congo",
					"postal": "CG",
					"formal_en": "Republic of Congo",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Congo, Rep.",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 1,
					"mapcolor9": 3,
					"mapcolor13": 10,
					"pop_est": 4012809,
					"gdp_md_est": 15350,
					"pop_year": -99,
					"lastcensus": 2007,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CG",
					"iso_a3": "COG",
					"iso_n3": "178",
					"un_a3": "178",
					"wb_a2": "CG",
					"wb_a3": "COG",
					"woe_id": -99,
					"adm0_a3_is": "COG",
					"adm0_a3_us": "COG",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Middle Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 5,
					"long_len": 17,
					"abbrev_len": 10,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-75.37322323271385,
								-0.1520317521204504
							],
							[
								-75.8014658271166,
								0.08480133707320192
							],
							[
								-76.29231441924097,
								0.4160472680641192
							],
							[
								-76.5763797675494,
								0.256935533037435
							],
							[
								-77.4249843004304,
								0.395686753741117
							],
							[
								-77.66861284047044,
								0.8258930525709616
							],
							[
								-77.85506140817952,
								0.8099250349927729
							],
							[
								-78.85525875518871,
								1.380923773601822
							],
							[
								-78.99093522817104,
								1.6913699405952514
							],
							[
								-78.61783138702371,
								1.766404120283056
							],
							[
								-78.66211808949785,
								2.2673554549204766
							],
							[
								-78.42761043975733,
								2.629555568854215
							],
							[
								-77.93154252797149,
								2.6966057397529255
							],
							[
								-77.51043128122501,
								3.325016994638247
							],
							[
								-77.12768978545526,
								3.8496361352653565
							],
							[
								-77.49627193877703,
								4.087606105969428
							],
							[
								-77.3076012844794,
								4.6679841170394525
							],
							[
								-77.53322058786573,
								5.582811997902497
							],
							[
								-77.31881507028675,
								5.84535411216136
							],
							[
								-77.47666073272228,
								6.691116441266303
							],
							[
								-77.88157141794525,
								7.223771267114785
							],
							[
								-77.7534138658614,
								7.709839789252143
							],
							[
								-77.43110795765699,
								7.638061224798734
							],
							[
								-77.24256649444008,
								7.935278225125444
							],
							[
								-77.47472286651133,
								8.524286200388218
							],
							[
								-77.35336076527386,
								8.67050466555807
							],
							[
								-76.83667395700357,
								8.638749497914716
							],
							[
								-76.08638383655786,
								9.336820583529487
							],
							[
								-75.67460018584006,
								9.443248195834599
							],
							[
								-75.66470414905618,
								9.774003200718738
							],
							[
								-75.48042599150335,
								10.618990383339309
							],
							[
								-74.90689510771199,
								11.083044745320322
							],
							[
								-74.27675269234489,
								11.102035834187587
							],
							[
								-74.1972226630477,
								11.310472723836867
							],
							[
								-73.41476396350029,
								11.22701528568548
							],
							[
								-72.62783525255963,
								11.731971543825523
							],
							[
								-72.23819495307892,
								11.955549628136326
							],
							[
								-71.75409013536864,
								12.437303168177309
							],
							[
								-71.3998223537917,
								12.376040757695293
							],
							[
								-71.13746110704588,
								12.112981879113505
							],
							[
								-71.3315836249503,
								11.776284084515808
							],
							[
								-71.97392167833829,
								11.60867157637712
							],
							[
								-72.22757544624294,
								11.10870209395324
							],
							[
								-72.61465776232521,
								10.821975409381778
							],
							[
								-72.9052860175347,
								10.450344346554772
							],
							[
								-73.02760413276957,
								9.736770331252444
							],
							[
								-73.30495154488005,
								9.151999823437606
							],
							[
								-72.7887298245004,
								9.085027167187334
							],
							[
								-72.6604947577681,
								8.625287787302682
							],
							[
								-72.43986223009796,
								8.405275376820029
							],
							[
								-72.36090064155597,
								8.002638454617895
							],
							[
								-72.47967892117885,
								7.632506008327354
							],
							[
								-72.44448727078807,
								7.423784898300482
							],
							[
								-72.19835242378188,
								7.340430813013683
							],
							[
								-71.96017574734864,
								6.991614895043539
							],
							[
								-70.67423356798152,
								7.087784735538719
							],
							[
								-70.09331295437242,
								6.96037649172311
							],
							[
								-69.38947994655712,
								6.0998605411988365
							],
							[
								-68.98531856960236,
								6.206804917826858
							],
							[
								-68.26505245631823,
								6.153268133972475
							],
							[
								-67.69508724635502,
								6.267318020040647
							],
							[
								-67.34143958196557,
								6.095468044454023
							],
							[
								-67.52153194850275,
								5.556870428891969
							],
							[
								-67.74469662135522,
								5.221128648291668
							],
							[
								-67.82301225449355,
								4.503937282728899
							],
							[
								-67.62183590358129,
								3.8394817163199946
							],
							[
								-67.33756384954368,
								3.5423422306417223
							],
							[
								-67.30317318385345,
								3.31845408773718
							],
							[
								-67.8099381171237,
								2.820655015469569
							],
							[
								-67.44709204778631,
								2.6002808699608693
							],
							[
								-67.18129431829307,
								2.250638129074062
							],
							[
								-66.87632585312258,
								1.253360500489336
							],
							[
								-67.0650481838525,
								1.130112209473225
							],
							[
								-67.2599975246736,
								1.7199986840849562
							],
							[
								-67.5378100246747,
								2.03716278727633
							],
							[
								-67.86856502955884,
								1.6924551456733923
							],
							[
								-69.81697323269162,
								1.7148052026396243
							],
							[
								-69.80459672715773,
								1.0890811222334662
							],
							[
								-69.21863766140018,
								0.9856765812174331
							],
							[
								-69.25243404811906,
								0.6026508650700748
							],
							[
								-69.45239600287246,
								0.7061587589506929
							],
							[
								-70.01556576198931,
								0.5414142928042054
							],
							[
								-70.02065589057005,
								-0.18515634521953928
							],
							[
								-69.5770653957766,
								-0.549991957200163
							],
							[
								-69.42048580593223,
								-1.1226185034264091
							],
							[
								-69.44410193548961,
								-1.5562871232198177
							],
							[
								-69.89363521999663,
								-4.2981869441943275
							],
							[
								-70.39404395209499,
								-3.7665914852078255
							],
							[
								-70.69268205430971,
								-3.742872002785859
							],
							[
								-70.04770850287485,
								-2.725156345229699
							],
							[
								-70.81347571479196,
								-2.2568645158007428
							],
							[
								-71.41364579942979,
								-2.3428024227021282
							],
							[
								-71.7747607082854,
								-2.169789727388938
							],
							[
								-72.32578650581365,
								-2.434218031426454
							],
							[
								-73.07039221870724,
								-2.3089543595509525
							],
							[
								-73.6595035468346,
								-1.2604912247811342
							],
							[
								-74.12239518908906,
								-1.002832533373848
							],
							[
								-74.44160051135597,
								-0.5308200008198867
							],
							[
								-75.10662451852008,
								-0.05720549886486026
							],
							[
								-75.37322323271385,
								-0.1520317521204504
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Colombia",
					"sov_a3": "COL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Colombia",
					"adm0_a3": "COL",
					"geou_dif": 0,
					"geounit": "Colombia",
					"gu_a3": "COL",
					"su_dif": 0,
					"subunit": "Colombia",
					"su_a3": "COL",
					"brk_diff": 0,
					"name": "Colombia",
					"name_long": "Colombia",
					"brk_a3": "COL",
					"brk_name": "Colombia",
					"brk_group": "",
					"abbrev": "Col.",
					"postal": "CO",
					"formal_en": "Republic of Colombia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Colombia",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 1,
					"mapcolor9": 3,
					"mapcolor13": 1,
					"pop_est": 45644023,
					"gdp_md_est": 395400,
					"pop_year": -99,
					"lastcensus": 2006,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CO",
					"iso_a3": "COL",
					"iso_n3": "170",
					"un_a3": "170",
					"wb_a2": "CO",
					"wb_a3": "COL",
					"woe_id": -99,
					"adm0_a3_is": "COL",
					"adm0_a3_us": "COL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-82.96578304719736,
								8.225027980985985
							],
							[
								-83.50843726269431,
								8.446926581247283
							],
							[
								-83.71147396516908,
								8.656836249216866
							],
							[
								-83.59631303580665,
								8.830443223501419
							],
							[
								-83.63264156770784,
								9.051385809765321
							],
							[
								-83.90988562695374,
								9.29080272057358
							],
							[
								-84.30340165885636,
								9.487354030795714
							],
							[
								-84.64764421256866,
								9.61553742109571
							],
							[
								-84.71335079622777,
								9.908051866083852
							],
							[
								-84.97566036654133,
								10.086723130733006
							],
							[
								-84.91137488477024,
								9.795991522658923
							],
							[
								-85.11092342806532,
								9.55703969974131
							],
							[
								-85.33948828809227,
								9.83454214114866
							],
							[
								-85.66078650586698,
								9.933347479690724
							],
							[
								-85.79744483106285,
								10.134885565629034
							],
							[
								-85.79170874707843,
								10.439337266476613
							],
							[
								-85.65931372754667,
								10.75433095951172
							],
							[
								-85.94172543002176,
								10.895278428587801
							],
							[
								-85.7125404528073,
								11.088444932494824
							],
							[
								-85.5618519762442,
								11.217119248901597
							],
							[
								-84.90300330273895,
								10.952303371621896
							],
							[
								-84.67306901725627,
								11.082657172078143
							],
							[
								-84.35593075228104,
								10.999225572142905
							],
							[
								-84.19017859570485,
								10.793450018756674
							],
							[
								-83.89505449088595,
								10.726839097532446
							],
							[
								-83.65561174186158,
								10.938764146361422
							],
							[
								-83.40231970898296,
								10.395438137244653
							],
							[
								-83.01567664257517,
								9.992982082555557
							],
							[
								-82.54619625520348,
								9.566134751824677
							],
							[
								-82.93289099804358,
								9.476812038608173
							],
							[
								-82.92715491405916,
								9.074330145702916
							],
							[
								-82.71918311230053,
								8.925708726431495
							],
							[
								-82.86865719270477,
								8.807266343618522
							],
							[
								-82.82977067740516,
								8.62629547773237
							],
							[
								-82.91317643912421,
								8.42351715741907
							],
							[
								-82.96578304719736,
								8.225027980985985
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Costa Rica",
					"sov_a3": "CRI",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Costa Rica",
					"adm0_a3": "CRI",
					"geou_dif": 0,
					"geounit": "Costa Rica",
					"gu_a3": "CRI",
					"su_dif": 0,
					"subunit": "Costa Rica",
					"su_a3": "CRI",
					"brk_diff": 0,
					"name": "Costa Rica",
					"name_long": "Costa Rica",
					"brk_a3": "CRI",
					"brk_name": "Costa Rica",
					"brk_group": "",
					"abbrev": "C.R.",
					"postal": "CR",
					"formal_en": "Republic of Costa Rica",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Costa Rica",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 2,
					"mapcolor9": 4,
					"mapcolor13": 2,
					"pop_est": 4253877,
					"gdp_md_est": 48320,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CR",
					"iso_a3": "CRI",
					"iso_n3": "188",
					"un_a3": "188",
					"wb_a2": "CR",
					"wb_a3": "CRI",
					"woe_id": -99,
					"adm0_a3_is": "CRI",
					"adm0_a3_us": "CRI",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Central America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-82.26815121125706,
								23.188610744717707
							],
							[
								-81.40445716014683,
								23.117271429938782
							],
							[
								-80.6187686835812,
								23.105980129483
							],
							[
								-79.67952368846025,
								22.76530324959883
							],
							[
								-79.28148596873208,
								22.399201565027056
							],
							[
								-78.34743445505649,
								22.512166246017088
							],
							[
								-77.99329586456028,
								22.277193508385935
							],
							[
								-77.14642249216105,
								21.657851467367834
							],
							[
								-76.52382483590856,
								21.206819566324373
							],
							[
								-76.19462012399319,
								21.220565497314013
							],
							[
								-75.59822241891267,
								21.016624457274133
							],
							[
								-75.67106035022806,
								20.735091254148003
							],
							[
								-74.9338960435845,
								20.693905137611385
							],
							[
								-74.17802486845126,
								20.28462779385974
							],
							[
								-74.29664811877726,
								20.05037852628068
							],
							[
								-74.96159461129294,
								19.92343537035569
							],
							[
								-75.63468014189459,
								19.873774318923196
							],
							[
								-76.323656175426,
								19.95289093676206
							],
							[
								-77.75548092315307,
								19.855480861891877
							],
							[
								-77.08510840524674,
								20.413353786698792
							],
							[
								-77.49265458851661,
								20.673105373613893
							],
							[
								-78.13729224314159,
								20.739948838783434
							],
							[
								-78.48282670766119,
								21.02861338956585
							],
							[
								-78.71986650258401,
								21.598113511638434
							],
							[
								-79.28499996612794,
								21.5591753199065
							],
							[
								-80.21747534861865,
								21.827324327069036
							],
							[
								-80.51753455272141,
								22.03707896574176
							],
							[
								-81.82094336620318,
								22.19205658618507
							],
							[
								-82.16999182811864,
								22.387109279870753
							],
							[
								-81.79500179719267,
								22.636964830001958
							],
							[
								-82.77589799674085,
								22.688150336187064
							],
							[
								-83.49445878775936,
								22.16851797127613
							],
							[
								-83.90880042187563,
								22.154565334557333
							],
							[
								-84.05215084505326,
								21.910575059491254
							],
							[
								-84.54703019889638,
								21.801227728761646
							],
							[
								-84.97491105827311,
								21.89602814380109
							],
							[
								-84.44706214062776,
								22.204949856041907
							],
							[
								-84.23035702181178,
								22.565754706303764
							],
							[
								-83.7782399156902,
								22.788118394455694
							],
							[
								-83.26754757356575,
								22.983041897060644
							],
							[
								-82.51043616405751,
								23.078746649665188
							],
							[
								-82.26815121125706,
								23.188610744717707
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Cuba",
					"sov_a3": "CUB",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Cuba",
					"adm0_a3": "CUB",
					"geou_dif": 0,
					"geounit": "Cuba",
					"gu_a3": "CUB",
					"su_dif": 0,
					"subunit": "Cuba",
					"su_a3": "CUB",
					"brk_diff": 0,
					"name": "Cuba",
					"name_long": "Cuba",
					"brk_a3": "CUB",
					"brk_name": "Cuba",
					"brk_group": "",
					"abbrev": "Cuba",
					"postal": "CU",
					"formal_en": "Republic of Cuba",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Cuba",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 5,
					"mapcolor9": 3,
					"mapcolor13": 4,
					"pop_est": 11451652,
					"gdp_md_est": 108200,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CU",
					"iso_a3": "CUB",
					"iso_n3": "192",
					"un_a3": "192",
					"wb_a2": "CU",
					"wb_a3": "CUB",
					"woe_id": -99,
					"adm0_a3_is": "CUB",
					"adm0_a3_us": "CUB",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Caribbean",
					"region_wb": "Latin America & Caribbean",
					"name_len": 4,
					"long_len": 4,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								32.73178022637745,
								35.14002594658844
							],
							[
								32.80247358575275,
								35.14550364841138
							],
							[
								32.946960890440806,
								35.3867033961337
							],
							[
								33.667227003724946,
								35.37321584730552
							],
							[
								34.576473829900465,
								35.67159556735879
							],
							[
								33.900804477684204,
								35.245755927057616
							],
							[
								33.97361657078346,
								35.058506374648005
							],
							[
								33.86643965021011,
								35.09359467217419
							],
							[
								33.675391880027064,
								35.01786286065045
							],
							[
								33.5256852556775,
								35.03868846286407
							],
							[
								33.47581749851585,
								35.000344550103506
							],
							[
								33.45592207208347,
								35.10142365166641
							],
							[
								33.3838334490363,
								35.16271190036457
							],
							[
								33.19097700372305,
								35.17312470147138
							],
							[
								32.919572381326134,
								35.08783274997364
							],
							[
								32.73178022637745,
								35.14002594658844
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Northern Cyprus",
					"sov_a3": "CYN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Northern Cyprus",
					"adm0_a3": "CYN",
					"geou_dif": 0,
					"geounit": "Northern Cyprus",
					"gu_a3": "CYN",
					"su_dif": 0,
					"subunit": "Northern Cyprus",
					"su_a3": "CYN",
					"brk_diff": 1,
					"name": "N. Cyprus",
					"name_long": "Northern Cyprus",
					"brk_a3": "B20",
					"brk_name": "N. Cyprus",
					"brk_group": "",
					"abbrev": "N. Cy.",
					"postal": "CN",
					"formal_en": "Turkish Republic of Northern Cyprus",
					"formal_fr": "",
					"note_adm0": "Self admin.",
					"note_brk": "Self admin.; Claimed by Cyprus",
					"name_sort": "Cyprus, Northern",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 1,
					"mapcolor9": 4,
					"mapcolor13": 8,
					"pop_est": 265100,
					"gdp_md_est": 3600,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "-99",
					"iso_a3": "-99",
					"iso_n3": "-99",
					"un_a3": "-099",
					"wb_a2": "-99",
					"wb_a3": "-99",
					"woe_id": -99,
					"adm0_a3_is": "CYP",
					"adm0_a3_us": "CYP",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 9,
					"long_len": 15,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								33.97361657078346,
								35.058506374648005
							],
							[
								34.00488081232004,
								34.97809784600186
							],
							[
								32.97982710137845,
								34.57186941175544
							],
							[
								32.49029625827754,
								34.701654771456475
							],
							[
								32.25666710788596,
								35.10323232679663
							],
							[
								32.73178022637745,
								35.14002594658844
							],
							[
								32.919572381326134,
								35.08783274997364
							],
							[
								33.19097700372305,
								35.17312470147138
							],
							[
								33.3838334490363,
								35.16271190036457
							],
							[
								33.45592207208347,
								35.10142365166641
							],
							[
								33.47581749851585,
								35.000344550103506
							],
							[
								33.5256852556775,
								35.03868846286407
							],
							[
								33.675391880027064,
								35.01786286065045
							],
							[
								33.86643965021011,
								35.09359467217419
							],
							[
								33.97361657078346,
								35.058506374648005
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Cyprus",
					"sov_a3": "CYP",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Cyprus",
					"adm0_a3": "CYP",
					"geou_dif": 0,
					"geounit": "Cyprus",
					"gu_a3": "CYP",
					"su_dif": 0,
					"subunit": "Cyprus",
					"su_a3": "CYP",
					"brk_diff": 0,
					"name": "Cyprus",
					"name_long": "Cyprus",
					"brk_a3": "CYP",
					"brk_name": "Cyprus",
					"brk_group": "",
					"abbrev": "Cyp.",
					"postal": "CY",
					"formal_en": "Republic of Cyprus",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Cyprus",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 2,
					"mapcolor9": 3,
					"mapcolor13": 7,
					"pop_est": 531640,
					"gdp_md_est": 22700,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CY",
					"iso_a3": "CYP",
					"iso_n3": "196",
					"un_a3": "196",
					"wb_a2": "CY",
					"wb_a3": "CYP",
					"woe_id": -99,
					"adm0_a3_is": "CYP",
					"adm0_a3_us": "CYP",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								16.960288120194576,
								48.5969823268506
							],
							[
								16.499282667718774,
								48.78580801044511
							],
							[
								16.02964725105022,
								48.73389903420793
							],
							[
								15.253415561593982,
								49.03907420510758
							],
							[
								14.901447381254057,
								48.964401760445824
							],
							[
								14.338897739324722,
								48.55530528420721
							],
							[
								13.595945672264437,
								48.87717194273715
							],
							[
								13.031328973043431,
								49.30706818297324
							],
							[
								12.521024204161193,
								49.547415269562734
							],
							[
								12.415190870827445,
								49.96912079528057
							],
							[
								12.240111118222558,
								50.266337795607285
							],
							[
								12.966836785543194,
								50.484076443069085
							],
							[
								13.338131951560285,
								50.73323436136435
							],
							[
								14.056227654688172,
								50.9269176295943
							],
							[
								14.307013380600637,
								51.117267767941414
							],
							[
								14.570718214586066,
								51.002339382524276
							],
							[
								15.01699588385867,
								51.10667409932158
							],
							[
								15.490972120839729,
								50.78472992614321
							],
							[
								16.23862674323857,
								50.69773265237984
							],
							[
								16.176253289462267,
								50.42260732685791
							],
							[
								16.719475945714436,
								50.21574656839354
							],
							[
								16.86876915860566,
								50.47397370055603
							],
							[
								17.55456709155112,
								50.36214590107642
							],
							[
								17.64944502123899,
								50.049038397819956
							],
							[
								18.392913852622172,
								49.98862864847075
							],
							[
								18.853144158613617,
								49.49622976337764
							],
							[
								18.554971144289482,
								49.495015367218784
							],
							[
								18.399993523846177,
								49.31500051533004
							],
							[
								18.170498488037964,
								49.271514797556435
							],
							[
								18.104972771891852,
								49.04398346617531
							],
							[
								17.913511590250465,
								48.996492824899086
							],
							[
								17.88648481616181,
								48.90347524677371
							],
							[
								17.545006951577108,
								48.80001902932537
							],
							[
								17.101984897538898,
								48.816968899117114
							],
							[
								16.960288120194576,
								48.5969823268506
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Czech Republic",
					"sov_a3": "CZE",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Czech Republic",
					"adm0_a3": "CZE",
					"geou_dif": 0,
					"geounit": "Czech Republic",
					"gu_a3": "CZE",
					"su_dif": 0,
					"subunit": "Czech Republic",
					"su_a3": "CZE",
					"brk_diff": 0,
					"name": "Czech Rep.",
					"name_long": "Czech Republic",
					"brk_a3": "CZE",
					"brk_name": "Czech Rep.",
					"brk_group": "",
					"abbrev": "Cz. Rep.",
					"postal": "CZ",
					"formal_en": "Czech Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Czech Republic",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 1,
					"mapcolor9": 2,
					"mapcolor13": 6,
					"pop_est": 10211904,
					"gdp_md_est": 265200,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "CZ",
					"iso_a3": "CZE",
					"iso_n3": "203",
					"un_a3": "203",
					"wb_a2": "CZ",
					"wb_a3": "CZE",
					"woe_id": -99,
					"adm0_a3_is": "CZE",
					"adm0_a3_us": "CZE",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 10,
					"long_len": 14,
					"abbrev_len": 8,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								9.89606814946319,
								47.580196845075704
							],
							[
								9.594226108446378,
								47.5250580918202
							],
							[
								8.522611932009795,
								47.83082754169135
							],
							[
								8.317301466514095,
								47.61357982033627
							],
							[
								7.466759067422288,
								47.62058197691192
							],
							[
								7.593676385131062,
								48.33301911070373
							],
							[
								8.099278598674857,
								49.01778351500343
							],
							[
								6.65822960778371,
								49.20195831969164
							],
							[
								6.186320428094177,
								49.463802802114515
							],
							[
								6.242751092156993,
								49.90222565367873
							],
							[
								6.043073357781111,
								50.128051662794235
							],
							[
								6.15665815595878,
								50.80372101501058
							],
							[
								5.988658074577813,
								51.851615709025054
							],
							[
								6.589396599970826,
								51.852029120483394
							],
							[
								6.842869500362383,
								52.22844025329755
							],
							[
								7.092053256873896,
								53.144043280644894
							],
							[
								6.905139601274129,
								53.48216217713065
							],
							[
								7.100424838905269,
								53.69393219666267
							],
							[
								7.936239454793963,
								53.74829580343379
							],
							[
								8.121706170289485,
								53.52779246684429
							],
							[
								8.800734490604668,
								54.020785630908904
							],
							[
								8.57211795414537,
								54.39564647075406
							],
							[
								8.526229282270208,
								54.96274363872516
							],
							[
								9.282048780971138,
								54.83086538351631
							],
							[
								9.921906365609232,
								54.98310415304803
							],
							[
								9.9395797054529,
								54.596641954153256
							],
							[
								10.950112338920519,
								54.363607082733154
							],
							[
								10.93946699386845,
								54.00869334575259
							],
							[
								11.956252475643282,
								54.19648550070116
							],
							[
								12.518440382546714,
								54.470370591847995
							],
							[
								13.647467075259499,
								54.0755109727059
							],
							[
								14.119686313542559,
								53.75702912049104
							],
							[
								14.353315463934166,
								53.248171291713106
							],
							[
								14.074521111719434,
								52.98126251892535
							],
							[
								14.437599725002201,
								52.624850165408304
							],
							[
								14.685026482815715,
								52.089947414755216
							],
							[
								14.607098422919648,
								51.74518809671997
							],
							[
								15.016995883858783,
								51.10667409932171
							],
							[
								14.570718214586122,
								51.00233938252438
							],
							[
								14.307013380600665,
								51.11726776794137
							],
							[
								14.056227654688314,
								50.92691762959436
							],
							[
								13.338131951560399,
								50.73323436136428
							],
							[
								12.96683678554325,
								50.48407644306917
							],
							[
								12.240111118222671,
								50.26633779560723
							],
							[
								12.415190870827473,
								49.96912079528062
							],
							[
								12.521024204161336,
								49.54741526956275
							],
							[
								13.031328973043514,
								49.30706818297324
							],
							[
								13.595945672264577,
								48.877171942737164
							],
							[
								13.243357374737116,
								48.41611481382904
							],
							[
								12.884102817443875,
								48.28914581968786
							],
							[
								13.025851271220517,
								47.63758352313596
							],
							[
								12.932626987366064,
								47.467645575544
							],
							[
								12.620759718484521,
								47.672387600284424
							],
							[
								12.141357456112871,
								47.70308340106578
							],
							[
								11.426414015354851,
								47.52376618101306
							],
							[
								10.544504021861599,
								47.5663992376538
							],
							[
								10.402083774465325,
								47.30248769793917
							],
							[
								9.89606814946319,
								47.580196845075704
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Germany",
					"sov_a3": "DEU",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Germany",
					"adm0_a3": "DEU",
					"geou_dif": 0,
					"geounit": "Germany",
					"gu_a3": "DEU",
					"su_dif": 0,
					"subunit": "Germany",
					"su_a3": "DEU",
					"brk_diff": 0,
					"name": "Germany",
					"name_long": "Germany",
					"brk_a3": "DEU",
					"brk_name": "Germany",
					"brk_group": "",
					"abbrev": "Ger.",
					"postal": "D",
					"formal_en": "Federal Republic of Germany",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Germany",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 5,
					"mapcolor9": 5,
					"mapcolor13": 1,
					"pop_est": 82329758,
					"gdp_md_est": 2918000,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "1. Developed region: G7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "DE",
					"iso_a3": "DEU",
					"iso_n3": "276",
					"un_a3": "276",
					"wb_a2": "DE",
					"wb_a3": "DEU",
					"woe_id": -99,
					"adm0_a3_is": "DEU",
					"adm0_a3_us": "DEU",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Western Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								43.08122602720016,
								12.699638576707116
							],
							[
								43.31785241066467,
								12.390148423711025
							],
							[
								43.286381463398925,
								11.974928290245884
							],
							[
								42.715873650896526,
								11.735640570518342
							],
							[
								43.14530480324214,
								11.462039699748857
							],
							[
								42.77685184100096,
								10.92687856693442
							],
							[
								42.55493000000013,
								11.105110000000195
							],
							[
								42.31414000000012,
								11.034200000000055
							],
							[
								41.755570000000205,
								11.050910000000101
							],
							[
								41.73959000000019,
								11.355110000000138
							],
							[
								41.66176000000013,
								11.631199999999978
							],
							[
								42.000000000000114,
								12.100000000000136
							],
							[
								42.35156000000012,
								12.542230000000131
							],
							[
								42.77964236834475,
								12.455415757695675
							],
							[
								43.08122602720016,
								12.699638576707116
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Djibouti",
					"sov_a3": "DJI",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Djibouti",
					"adm0_a3": "DJI",
					"geou_dif": 0,
					"geounit": "Djibouti",
					"gu_a3": "DJI",
					"su_dif": 0,
					"subunit": "Djibouti",
					"su_a3": "DJI",
					"brk_diff": 0,
					"name": "Djibouti",
					"name_long": "Djibouti",
					"brk_a3": "DJI",
					"brk_name": "Djibouti",
					"brk_group": "",
					"abbrev": "Dji.",
					"postal": "DJ",
					"formal_en": "Republic of Djibouti",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Djibouti",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 2,
					"mapcolor9": 4,
					"mapcolor13": 8,
					"pop_est": 516055,
					"gdp_md_est": 1885,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "DJ",
					"iso_a3": "DJI",
					"iso_n3": "262",
					"un_a3": "262",
					"wb_a2": "DJ",
					"wb_a3": "DJI",
					"woe_id": -99,
					"adm0_a3_is": "DJI",
					"adm0_a3_us": "DJI",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Middle East & North Africa",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									12.690006137755631,
									55.609990953180784
								],
								[
									12.089991082414741,
									54.80001455343793
								],
								[
									11.043543328504228,
									55.364863796604254
								],
								[
									10.903913608451631,
									55.77995473898875
								],
								[
									12.370904168353292,
									56.111407375708836
								],
								[
									12.690006137755631,
									55.609990953180784
								]
							]
						],
						[
							[
								[
									10.912181837618363,
									56.458621324277914
								],
								[
									10.667803989309988,
									56.08138336854722
								],
								[
									10.369992710011985,
									56.19000722922473
								],
								[
									9.649984978889307,
									55.469999498102055
								],
								[
									9.921906365609175,
									54.98310415304806
								],
								[
									9.282048780971138,
									54.83086538351617
								],
								[
									8.526229282270236,
									54.96274363872499
								],
								[
									8.12031090661759,
									55.517722683323626
								],
								[
									8.08997684086225,
									56.5400117051376
								],
								[
									8.256581658571264,
									56.8099693874303
								],
								[
									8.543437534223386,
									57.110002753316905
								],
								[
									9.42446902836761,
									57.17206614849948
								],
								[
									9.775558709358563,
									57.44794078228966
								],
								[
									10.580005730846153,
									57.73001658795485
								],
								[
									10.546105991262692,
									57.215732733786155
								],
								[
									10.250000034230226,
									56.89001618105047
								],
								[
									10.369992710011985,
									56.609981594460834
								],
								[
									10.912181837618363,
									56.458621324277914
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Denmark",
					"sov_a3": "DN1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "Denmark",
					"adm0_a3": "DNK",
					"geou_dif": 0,
					"geounit": "Denmark",
					"gu_a3": "DNK",
					"su_dif": 0,
					"subunit": "Denmark",
					"su_a3": "DNK",
					"brk_diff": 0,
					"name": "Denmark",
					"name_long": "Denmark",
					"brk_a3": "DNK",
					"brk_name": "Denmark",
					"brk_group": "",
					"abbrev": "Den.",
					"postal": "DK",
					"formal_en": "Kingdom of Denmark",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Denmark",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 1,
					"mapcolor9": 3,
					"mapcolor13": 12,
					"pop_est": 5500510,
					"gdp_md_est": 203600,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "DK",
					"iso_a3": "DNK",
					"iso_n3": "208",
					"un_a3": "208",
					"wb_a2": "DK",
					"wb_a3": "DNK",
					"woe_id": -99,
					"adm0_a3_is": "DNK",
					"adm0_a3_us": "DNK",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-71.71236141629296,
								19.714455878167357
							],
							[
								-71.58730445014663,
								19.8849105900821
							],
							[
								-70.80670610216174,
								19.880285549391985
							],
							[
								-70.21436499701613,
								19.62288524014616
							],
							[
								-69.95081519232758,
								19.64799998624001
							],
							[
								-69.76925004747008,
								19.29326711677244
							],
							[
								-69.22212582057988,
								19.313214219637103
							],
							[
								-69.25434607611385,
								19.015196234609874
							],
							[
								-68.80941199408083,
								18.979074408437853
							],
							[
								-68.31794328476897,
								18.612197577381693
							],
							[
								-68.68931596543452,
								18.205142320218613
							],
							[
								-69.16494584824892,
								18.42264842373511
							],
							[
								-69.62398759629764,
								18.38071299893025
							],
							[
								-69.95293392605154,
								18.42830699307106
							],
							[
								-70.1332329983179,
								18.245915025296895
							],
							[
								-70.51713721381422,
								18.184290879788833
							],
							[
								-70.66929846869763,
								18.426885891183034
							],
							[
								-70.99995012071719,
								18.283328762276213
							],
							[
								-71.4002099270339,
								17.5985643579766
							],
							[
								-71.65766191271202,
								17.7575727401387
							],
							[
								-71.70830481635805,
								18.044997056546094
							],
							[
								-71.68773759630588,
								18.31666006110447
							],
							[
								-71.94511206733556,
								18.61690013272026
							],
							[
								-71.7013026597825,
								18.785416978424053
							],
							[
								-71.62487321642283,
								19.169837958243306
							],
							[
								-71.71236141629296,
								19.714455878167357
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Dominican Republic",
					"sov_a3": "DOM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Dominican Republic",
					"adm0_a3": "DOM",
					"geou_dif": 0,
					"geounit": "Dominican Republic",
					"gu_a3": "DOM",
					"su_dif": 0,
					"subunit": "Dominican Republic",
					"su_a3": "DOM",
					"brk_diff": 0,
					"name": "Dominican Rep.",
					"name_long": "Dominican Republic",
					"brk_a3": "DOM",
					"brk_name": "Dominican Rep.",
					"brk_group": "",
					"abbrev": "Dom. Rep.",
					"postal": "DO",
					"formal_en": "Dominican Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Dominican Republic",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 2,
					"mapcolor9": 5,
					"mapcolor13": 7,
					"pop_est": 9650054,
					"gdp_md_est": 78000,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "DO",
					"iso_a3": "DOM",
					"iso_n3": "214",
					"un_a3": "214",
					"wb_a2": "DO",
					"wb_a3": "DOM",
					"woe_id": -99,
					"adm0_a3_is": "DOM",
					"adm0_a3_us": "DOM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Caribbean",
					"region_wb": "Latin America & Caribbean",
					"name_len": 14,
					"long_len": 18,
					"abbrev_len": 9,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								4.267419467800039,
								19.155265204337
							],
							[
								3.158133172222705,
								19.057364203360038
							],
							[
								3.1466610042539003,
								19.693578599521445
							],
							[
								2.683588494486429,
								19.856230170160117
							],
							[
								2.06099083823392,
								20.142233384679486
							],
							[
								1.8232275732590324,
								20.610809434486043
							],
							[
								-1.5500548974576134,
								22.792665920497384
							],
							[
								-4.923337368174231,
								24.974574082941
							],
							[
								-8.684399786809053,
								27.395744126896005
							],
							[
								-8.665124477564191,
								27.589479071558227
							],
							[
								-8.665589565454809,
								27.656425889592356
							],
							[
								-8.674116176782974,
								28.84128896739658
							],
							[
								-7.059227667661929,
								29.57922842052453
							],
							[
								-6.060632290053774,
								29.731699734001694
							],
							[
								-5.242129278982787,
								30.00044302013559
							],
							[
								-4.859646165374471,
								30.501187649043846
							],
							[
								-3.690441046554696,
								30.896951605751156
							],
							[
								-3.647497931320146,
								31.637294012980675
							],
							[
								-3.068980271812648,
								31.724497992473218
							],
							[
								-2.616604783529567,
								32.09434621838615
							],
							[
								-1.30789913573787,
								32.2628889023061
							],
							[
								-1.1245511539663084,
								32.65152151135713
							],
							[
								-1.3880492822225676,
								32.86401500094131
							],
							[
								-1.7334545556614671,
								33.919712836231994
							],
							[
								-1.7929858056616865,
								34.527918606091205
							],
							[
								-2.169913702798624,
								35.16839630791668
							],
							[
								-1.208602871089056,
								35.7148487411871
							],
							[
								-0.12745439289460592,
								35.888662421200806
							],
							[
								0.5038765804152092,
								36.30127289483528
							],
							[
								1.466918572606545,
								36.605647081034405
							],
							[
								3.1616988460508253,
								36.78390493422522
							],
							[
								4.81575809084913,
								36.86503693292346
							],
							[
								5.3201200700177935,
								36.71651886651662
							],
							[
								6.261819695672613,
								37.11065501560674
							],
							[
								7.330384962603971,
								37.11838064223437
							],
							[
								7.737078484741005,
								36.885707505840216
							],
							[
								8.420964389691676,
								36.94642731378316
							],
							[
								8.217824334352315,
								36.433176988260286
							],
							[
								8.376367628623768,
								35.479876003555944
							],
							[
								8.140981479534304,
								34.65514598239379
							],
							[
								7.524481642292244,
								34.09737641045146
							],
							[
								7.6126416357821824,
								33.34411489514896
							],
							[
								8.430472853233368,
								32.74833730725595
							],
							[
								8.439102817426118,
								32.50628489840082
							],
							[
								9.05560265466815,
								32.10269196220129
							],
							[
								9.482139926805274,
								30.307556057246188
							],
							[
								9.805634392952413,
								29.42463837332339
							],
							[
								9.859997999723447,
								28.959989732371014
							],
							[
								9.683884718472768,
								28.1441738957792
							],
							[
								9.756128370816782,
								27.68825857188415
							],
							[
								9.629056023811074,
								27.14095347748092
							],
							[
								9.716285841519749,
								26.512206325785698
							],
							[
								9.319410841518163,
								26.094324856057455
							],
							[
								9.910692579801776,
								25.36545461679674
							],
							[
								9.94826134607797,
								24.936953640232517
							],
							[
								10.303846876678362,
								24.379313259370917
							],
							[
								10.771363559622927,
								24.56253205006175
							],
							[
								11.560669386449005,
								24.097909247325518
							],
							[
								11.999505649471613,
								23.47166840259645
							],
							[
								8.572893100629784,
								21.565660712159143
							],
							[
								5.677565952180686,
								19.601206976799716
							],
							[
								4.267419467800039,
								19.155265204337
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Algeria",
					"sov_a3": "DZA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Algeria",
					"adm0_a3": "DZA",
					"geou_dif": 0,
					"geounit": "Algeria",
					"gu_a3": "DZA",
					"su_dif": 0,
					"subunit": "Algeria",
					"su_a3": "DZA",
					"brk_diff": 0,
					"name": "Algeria",
					"name_long": "Algeria",
					"brk_a3": "DZA",
					"brk_name": "Algeria",
					"brk_group": "",
					"abbrev": "Alg.",
					"postal": "DZ",
					"formal_en": "People's Democratic Republic of Algeria",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Algeria",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 1,
					"mapcolor9": 6,
					"mapcolor13": 3,
					"pop_est": 34178188,
					"gdp_md_est": 232900,
					"pop_year": -99,
					"lastcensus": 2008,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "DZ",
					"iso_a3": "DZA",
					"iso_n3": "012",
					"un_a3": "012",
					"wb_a2": "DZ",
					"wb_a3": "DZA",
					"woe_id": -99,
					"adm0_a3_is": "DZA",
					"adm0_a3_us": "DZA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Northern Africa",
					"region_wb": "Middle East & North Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-80.30256059438722,
								-3.4048564591647126
							],
							[
								-79.77029334178093,
								-2.65751189535964
							],
							[
								-79.98655921092242,
								-2.220794366061014
							],
							[
								-80.36878394236925,
								-2.6851587866357884
							],
							[
								-80.96776546906436,
								-2.246942640800704
							],
							[
								-80.76480628123804,
								-1.9650477026485331
							],
							[
								-80.93365902375172,
								-1.057454522306358
							],
							[
								-80.58337032746127,
								-0.9066626928786832
							],
							[
								-80.39932471385376,
								-0.28370330160014134
							],
							[
								-80.02089820018037,
								0.3603400740534682
							],
							[
								-80.09060970734211,
								0.7684288598623965
							],
							[
								-79.5427620103998,
								0.982937730305963
							],
							[
								-78.85525875518871,
								1.380923773601822
							],
							[
								-77.85506140817952,
								0.8099250349927729
							],
							[
								-77.66861284047044,
								0.8258930525709616
							],
							[
								-77.4249843004304,
								0.395686753741117
							],
							[
								-76.5763797675494,
								0.256935533037435
							],
							[
								-76.29231441924097,
								0.4160472680641192
							],
							[
								-75.8014658271166,
								0.08480133707320192
							],
							[
								-75.37322323271385,
								-0.1520317521204504
							],
							[
								-75.23372270374195,
								-0.9114169246495294
							],
							[
								-75.54499569365204,
								-1.5616097957458803
							],
							[
								-76.63539425322672,
								-2.6086776668438176
							],
							[
								-77.83790483265861,
								-3.003020521663103
							],
							[
								-78.45068396677564,
								-3.873096612161376
							],
							[
								-78.63989722361234,
								-4.547784112164074
							],
							[
								-79.20528906931773,
								-4.959128513207389
							],
							[
								-79.62497921417618,
								-4.454198093283495
							],
							[
								-80.02890804718561,
								-4.3460909969288934
							],
							[
								-80.44224199087216,
								-4.425724379090674
							],
							[
								-80.46929460317695,
								-4.0592867977089995
							],
							[
								-80.18401485870967,
								-3.8211617977080437
							],
							[
								-80.30256059438722,
								-3.4048564591647126
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Ecuador",
					"sov_a3": "ECU",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Ecuador",
					"adm0_a3": "ECU",
					"geou_dif": 0,
					"geounit": "Ecuador",
					"gu_a3": "ECU",
					"su_dif": 0,
					"subunit": "Ecuador",
					"su_a3": "ECU",
					"brk_diff": 0,
					"name": "Ecuador",
					"name_long": "Ecuador",
					"brk_a3": "ECU",
					"brk_name": "Ecuador",
					"brk_group": "",
					"abbrev": "Ecu.",
					"postal": "EC",
					"formal_en": "Republic of Ecuador",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Ecuador",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 5,
					"mapcolor9": 2,
					"mapcolor13": 12,
					"pop_est": 14573101,
					"gdp_md_est": 107700,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "EC",
					"iso_a3": "ECU",
					"iso_n3": "218",
					"un_a3": "218",
					"wb_a2": "EC",
					"wb_a3": "ECU",
					"woe_id": -99,
					"adm0_a3_is": "ECU",
					"adm0_a3_us": "ECU",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								34.9226,
								29.50133
							],
							[
								34.64174,
								29.099420000000002
							],
							[
								34.42655,
								28.343989999999998
							],
							[
								34.15451,
								27.8233
							],
							[
								33.92136,
								27.6487
							],
							[
								33.58811,
								27.97136
							],
							[
								33.13676,
								28.417650000000002
							],
							[
								32.423230000000004,
								29.851080000000003
							],
							[
								32.32046,
								29.76043
							],
							[
								32.73482,
								28.70523
							],
							[
								33.34876,
								27.69989
							],
							[
								34.10455,
								26.14227
							],
							[
								34.473870000000005,
								25.598560000000003
							],
							[
								34.79507,
								25.03375
							],
							[
								35.69241,
								23.92671
							],
							[
								35.49372,
								23.752370000000003
							],
							[
								35.52598,
								23.10244
							],
							[
								36.690690000000004,
								22.20485
							],
							[
								36.86623,
								22
							],
							[
								32.9,
								22
							],
							[
								29.020000000000003,
								22
							],
							[
								25,
								22
							],
							[
								25,
								25.682499996361
							],
							[
								25,
								29.23865452953346
							],
							[
								24.70007,
								30.044190000000004
							],
							[
								24.957620000000002,
								30.6616
							],
							[
								24.80287,
								31.089290000000002
							],
							[
								25.16482,
								31.56915
							],
							[
								26.49533,
								31.58568
							],
							[
								27.457620000000002,
								31.32126
							],
							[
								28.450480000000002,
								31.025769999999998
							],
							[
								28.913529999999998,
								30.87005
							],
							[
								29.683419999999998,
								31.186860000000003
							],
							[
								30.09503,
								31.4734
							],
							[
								30.976930000000003,
								31.55586
							],
							[
								31.687960000000004,
								31.4296
							],
							[
								31.96041,
								30.933600000000002
							],
							[
								32.19247,
								31.26034
							],
							[
								32.99392,
								31.024070000000002
							],
							[
								33.7734,
								30.967460000000003
							],
							[
								34.265440000000005,
								31.219359999999998
							],
							[
								34.9226,
								29.50133
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Egypt",
					"sov_a3": "EGY",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Egypt",
					"adm0_a3": "EGY",
					"geou_dif": 0,
					"geounit": "Egypt",
					"gu_a3": "EGY",
					"su_dif": 0,
					"subunit": "Egypt",
					"su_a3": "EGY",
					"brk_diff": 0,
					"name": "Egypt",
					"name_long": "Egypt",
					"brk_a3": "EGY",
					"brk_name": "Egypt",
					"brk_group": "",
					"abbrev": "Egypt",
					"postal": "EG",
					"formal_en": "Arab Republic of Egypt",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Egypt, Arab Rep.",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 6,
					"mapcolor9": 7,
					"mapcolor13": 2,
					"pop_est": 83082869,
					"gdp_md_est": 443700,
					"pop_year": -99,
					"lastcensus": 2006,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "EG",
					"iso_a3": "EGY",
					"iso_n3": "818",
					"un_a3": "818",
					"wb_a2": "EG",
					"wb_a3": "EGY",
					"woe_id": -99,
					"adm0_a3_is": "EGY",
					"adm0_a3_us": "EGY",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Northern Africa",
					"region_wb": "Middle East & North Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								42.35156000000012,
								12.542230000000131
							],
							[
								42.00975,
								12.865819999999928
							],
							[
								41.59856000000002,
								13.452090000000112
							],
							[
								41.15519371924984,
								13.773319810435225
							],
							[
								40.896600000000035,
								14.118640000000141
							],
							[
								40.026218702969175,
								14.519579169162284
							],
							[
								39.34061000000008,
								14.531549999999982
							],
							[
								39.0994,
								14.740640000000042
							],
							[
								38.512950000000046,
								14.50547000000006
							],
							[
								37.90607000000011,
								14.959430000000168
							],
							[
								37.59377000000006,
								14.213099999999997
							],
							[
								36.42951000000005,
								14.422110000000032
							],
							[
								36.32318891779812,
								14.822480577041063
							],
							[
								36.75386030451858,
								16.291874091044292
							],
							[
								36.852530000000115,
								16.956549999999993
							],
							[
								37.167470000000094,
								17.263140000000135
							],
							[
								37.90400000000011,
								17.427540000000022
							],
							[
								38.410089959473225,
								17.998307399970315
							],
							[
								38.990622999840014,
								16.840626125551694
							],
							[
								39.26611006038803,
								15.92272349696725
							],
							[
								39.814293654140215,
								15.435647284400318
							],
							[
								41.17927493669765,
								14.491079616753211
							],
							[
								41.73495161313235,
								13.921036892141558
							],
							[
								42.27683068214486,
								13.343992010954423
							],
							[
								42.58957645037526,
								13.000421250861905
							],
							[
								43.08122602720016,
								12.699638576707116
							],
							[
								42.77964236834475,
								12.455415757695675
							],
							[
								42.35156000000012,
								12.542230000000131
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Eritrea",
					"sov_a3": "ERI",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Eritrea",
					"adm0_a3": "ERI",
					"geou_dif": 0,
					"geounit": "Eritrea",
					"gu_a3": "ERI",
					"su_dif": 0,
					"subunit": "Eritrea",
					"su_a3": "ERI",
					"brk_diff": 0,
					"name": "Eritrea",
					"name_long": "Eritrea",
					"brk_a3": "ERI",
					"brk_name": "Eritrea",
					"brk_group": "",
					"abbrev": "Erit.",
					"postal": "ER",
					"formal_en": "State of Eritrea",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Eritrea",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 1,
					"mapcolor9": 2,
					"mapcolor13": 12,
					"pop_est": 5647168,
					"gdp_md_est": 3945,
					"pop_year": -99,
					"lastcensus": 1984,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "ER",
					"iso_a3": "ERI",
					"iso_n3": "232",
					"un_a3": "232",
					"wb_a2": "ER",
					"wb_a3": "ERI",
					"woe_id": -99,
					"adm0_a3_is": "ERI",
					"adm0_a3_us": "ERI",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-9.034817674180246,
								41.880570583659676
							],
							[
								-8.984433152695672,
								42.59277517350627
							],
							[
								-9.392883673530648,
								43.0266246608127
							],
							[
								-7.97818966310831,
								43.74833771420099
							],
							[
								-6.754491746436756,
								43.567909450853925
							],
							[
								-5.411886359061597,
								43.57423981380968
							],
							[
								-4.3478427799557835,
								43.40344920508504
							],
							[
								-3.5175317041060907,
								43.4559007838613
							],
							[
								-1.901351284177764,
								43.42280202897834
							],
							[
								-1.502770961910528,
								43.03401439063043
							],
							[
								0.3380469091905809,
								42.57954600683955
							],
							[
								0.7015906103638941,
								42.795734361332606
							],
							[
								1.8267932470871528,
								42.34338471126569
							],
							[
								2.9859989762584576,
								42.47301504166986
							],
							[
								3.0394840836805486,
								41.892120266276905
							],
							[
								2.0918416683121848,
								41.226088568683096
							],
							[
								0.8105245296351882,
								41.01473196060934
							],
							[
								0.7213310074994013,
								40.678318386389236
							],
							[
								0.10669152181986874,
								40.12393362076202
							],
							[
								-0.27871131021294104,
								39.30997813573272
							],
							[
								0.11129072429383768,
								38.73851430923304
							],
							[
								-0.4671235823491031,
								38.29236583104115
							],
							[
								-0.6833894514905978,
								37.642353827457825
							],
							[
								-1.4383821272748492,
								37.44306366632422
							],
							[
								-2.146452602538119,
								36.67414419203729
							],
							[
								-3.4157808089233868,
								36.65889964451118
							],
							[
								-4.368900926114719,
								36.677839056946155
							],
							[
								-4.995219285492212,
								36.32470815687964
							],
							[
								-5.3771597965614575,
								35.946850083961465
							],
							[
								-5.866432257500904,
								36.02981659600606
							],
							[
								-6.236693894872175,
								36.367677110330334
							],
							[
								-6.520190802425404,
								36.94291331638732
							],
							[
								-7.453725551778092,
								37.09778758396607
							],
							[
								-7.537105475281024,
								37.42890432387624
							],
							[
								-7.166507941099865,
								37.803894354802225
							],
							[
								-7.029281175148796,
								38.07576406508977
							],
							[
								-7.374092169616318,
								38.37305858006492
							],
							[
								-7.098036668313128,
								39.03007274022379
							],
							[
								-7.498632371439726,
								39.62957103124181
							],
							[
								-7.066591559263529,
								39.711891587882775
							],
							[
								-7.026413133156595,
								40.184524237624245
							],
							[
								-6.864019944679385,
								40.33087189387483
							],
							[
								-6.851126674822552,
								41.11108266861753
							],
							[
								-6.389087693700915,
								41.381815497394655
							],
							[
								-6.6686055159676565,
								41.883386949219584
							],
							[
								-7.251308966490824,
								41.91834605566505
							],
							[
								-7.422512986673795,
								41.79207469335984
							],
							[
								-8.013174607769912,
								41.790886135417125
							],
							[
								-8.263856980817792,
								42.28046865495034
							],
							[
								-8.67194576662672,
								42.13468943945496
							],
							[
								-9.034817674180246,
								41.880570583659676
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Spain",
					"sov_a3": "ESP",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Spain",
					"adm0_a3": "ESP",
					"geou_dif": 0,
					"geounit": "Spain",
					"gu_a3": "ESP",
					"su_dif": 0,
					"subunit": "Spain",
					"su_a3": "ESP",
					"brk_diff": 0,
					"name": "Spain",
					"name_long": "Spain",
					"brk_a3": "ESP",
					"brk_name": "Spain",
					"brk_group": "",
					"abbrev": "Sp.",
					"postal": "E",
					"formal_en": "Kingdom of Spain",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Spain",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 5,
					"mapcolor9": 5,
					"mapcolor13": 5,
					"pop_est": 40525002,
					"gdp_md_est": 1403000,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "ES",
					"iso_a3": "ESP",
					"iso_n3": "724",
					"un_a3": "724",
					"wb_a2": "ES",
					"wb_a3": "ESP",
					"woe_id": -99,
					"adm0_a3_is": "ESP",
					"adm0_a3_us": "ESP",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 3,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								24.312862583114622,
								57.79342357037697
							],
							[
								24.42892785004216,
								58.38341339785329
							],
							[
								24.061198357853186,
								58.25737457949341
							],
							[
								23.426560092876684,
								58.612753404364625
							],
							[
								23.339795363058645,
								59.187240302153384
							],
							[
								24.604214308376186,
								59.46585378685502
							],
							[
								25.86418908051664,
								59.61109039981133
							],
							[
								26.949135776484525,
								59.445803331125774
							],
							[
								27.981114129353244,
								59.475388088612874
							],
							[
								28.13169925305175,
								59.300825100330925
							],
							[
								27.420166456824944,
								58.72458120384424
							],
							[
								27.71668582531572,
								57.79189911562436
							],
							[
								27.288184848751513,
								57.47452830670383
							],
							[
								26.463532342237787,
								57.47638865826633
							],
							[
								25.60280968598437,
								57.84752879498657
							],
							[
								25.16459354014927,
								57.97015696881519
							],
							[
								24.312862583114622,
								57.79342357037697
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Estonia",
					"sov_a3": "EST",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Estonia",
					"adm0_a3": "EST",
					"geou_dif": 0,
					"geounit": "Estonia",
					"gu_a3": "EST",
					"su_dif": 0,
					"subunit": "Estonia",
					"su_a3": "EST",
					"brk_diff": 0,
					"name": "Estonia",
					"name_long": "Estonia",
					"brk_a3": "EST",
					"brk_name": "Estonia",
					"brk_group": "",
					"abbrev": "Est.",
					"postal": "EST",
					"formal_en": "Republic of Estonia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Estonia",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 2,
					"mapcolor9": 1,
					"mapcolor13": 10,
					"pop_est": 1299371,
					"gdp_md_est": 27410,
					"pop_year": -99,
					"lastcensus": 2000,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "EE",
					"iso_a3": "EST",
					"iso_n3": "233",
					"un_a3": "233",
					"wb_a2": "EE",
					"wb_a3": "EST",
					"woe_id": -99,
					"adm0_a3_is": "EST",
					"adm0_a3_us": "EST",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								39.34061000000008,
								14.531549999999982
							],
							[
								40.02625000000012,
								14.519589999999994
							],
							[
								40.896600000000035,
								14.118640000000141
							],
							[
								41.15519999999998,
								13.773329999999987
							],
							[
								41.59856000000002,
								13.452090000000112
							],
							[
								42.00975,
								12.865819999999928
							],
							[
								42.35156000000012,
								12.542230000000131
							],
							[
								42.000000000000114,
								12.100000000000136
							],
							[
								41.66176000000013,
								11.631199999999978
							],
							[
								41.73959000000019,
								11.355110000000138
							],
							[
								41.755570000000205,
								11.050910000000101
							],
							[
								42.31414000000012,
								11.034200000000055
							],
							[
								42.55493000000013,
								11.105110000000195
							],
							[
								42.77685184100096,
								10.92687856693442
							],
							[
								42.55875999999995,
								10.57258000000013
							],
							[
								42.92812000000009,
								10.021940000000143
							],
							[
								43.29699000000011,
								9.540480000000173
							],
							[
								43.678750000000036,
								9.18358000000012
							],
							[
								46.94834000000009,
								7.99688000000009
							],
							[
								47.789420000000064,
								8.002999999999986
							],
							[
								44.9636000000001,
								5.001620000000116
							],
							[
								43.66086999999999,
								4.957550000000083
							],
							[
								42.76967000000013,
								4.252590000000225
							],
							[
								42.128610000000094,
								4.234130000000164
							],
							[
								41.85508309264412,
								3.9189119204837652
							],
							[
								41.17180000000013,
								3.9190900000000397
							],
							[
								40.768480000000125,
								4.257020000000125
							],
							[
								39.85494000000011,
								3.838790000000131
							],
							[
								39.55938425876593,
								3.422060000000215
							],
							[
								38.89251000000007,
								3.5007400000000644
							],
							[
								38.67114000000004,
								3.616070000000093
							],
							[
								38.436970000000144,
								3.588510000000099
							],
							[
								38.12091500000014,
								3.5986050000000773
							],
							[
								36.85509323800824,
								4.447864127672858
							],
							[
								36.15907863285565,
								4.447864127672858
							],
							[
								35.81744766235363,
								4.776965663462022
							],
							[
								35.81744766235363,
								5.338232082790853
							],
							[
								35.2980071182331,
								5.506000000000029
							],
							[
								34.70702,
								6.594220000000121
							],
							[
								34.250320000000045,
								6.8260700000000725
							],
							[
								34.07510000000019,
								7.2259500000000685
							],
							[
								33.568290000000104,
								7.7133400000000165
							],
							[
								32.954180000000235,
								7.784970000000101
							],
							[
								33.29480000000012,
								8.354580000000055
							],
							[
								33.82550000000015,
								8.37916000000007
							],
							[
								33.97498000000007,
								8.684560000000147
							],
							[
								33.961620000000096,
								9.583580000000097
							],
							[
								34.25745000000006,
								10.630089999999996
							],
							[
								34.73115000000013,
								10.910170000000107
							],
							[
								34.83163000000013,
								11.318960000000118
							],
							[
								35.26049000000006,
								12.08286000000004
							],
							[
								35.86363000000017,
								12.578280000000063
							],
							[
								36.27022000000005,
								13.563330000000121
							],
							[
								36.42951000000005,
								14.422110000000032
							],
							[
								37.59377000000006,
								14.213099999999997
							],
							[
								37.90607000000011,
								14.959430000000168
							],
							[
								38.512950000000046,
								14.50547000000006
							],
							[
								39.0994,
								14.740640000000042
							],
							[
								39.34061000000008,
								14.531549999999982
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Ethiopia",
					"sov_a3": "ETH",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Ethiopia",
					"adm0_a3": "ETH",
					"geou_dif": 0,
					"geounit": "Ethiopia",
					"gu_a3": "ETH",
					"su_dif": 0,
					"subunit": "Ethiopia",
					"su_a3": "ETH",
					"brk_diff": 0,
					"name": "Ethiopia",
					"name_long": "Ethiopia",
					"brk_a3": "ETH",
					"brk_name": "Ethiopia",
					"brk_group": "",
					"abbrev": "Eth.",
					"postal": "ET",
					"formal_en": "Federal Democratic Republic of Ethiopia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Ethiopia",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 4,
					"mapcolor9": 1,
					"mapcolor13": 13,
					"pop_est": 85237338,
					"gdp_md_est": 68770,
					"pop_year": -99,
					"lastcensus": 2007,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "ET",
					"iso_a3": "ETH",
					"iso_n3": "231",
					"un_a3": "231",
					"wb_a2": "ET",
					"wb_a3": "ETH",
					"woe_id": -99,
					"adm0_a3_is": "ETH",
					"adm0_a3_us": "ETH",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								23.903378533633802,
								66.00692739527962
							],
							[
								23.565879754335583,
								66.39605093043743
							],
							[
								23.53947309743444,
								67.93600861273525
							],
							[
								21.978534783626117,
								68.6168456081807
							],
							[
								20.645592889089528,
								69.10624726020087
							],
							[
								21.244936150810673,
								69.37044302029308
							],
							[
								22.356237827247412,
								68.84174144151491
							],
							[
								23.66204959483076,
								68.89124746365054
							],
							[
								24.735679152126725,
								68.64955678982146
							],
							[
								25.689212680776365,
								69.09211375596904
							],
							[
								26.179622023226244,
								69.82529897732614
							],
							[
								27.732292107867863,
								70.16419302029625
							],
							[
								29.015572950971972,
								69.76649119737799
							],
							[
								28.591929559043194,
								69.06477692328666
							],
							[
								28.445943637818658,
								68.36461294216404
							],
							[
								29.97742638522061,
								67.69829702419266
							],
							[
								29.054588657352326,
								66.94428620062193
							],
							[
								30.217650000000003,
								65.80598
							],
							[
								29.54442955904699,
								64.94867157659048
							],
							[
								30.44468468600371,
								64.20445343693909
							],
							[
								30.035872430142717,
								63.55281362573855
							],
							[
								31.516092156711125,
								62.86768748641289
							],
							[
								31.139991082490894,
								62.35769277612441
							],
							[
								30.21110721204445,
								61.780027777749694
							],
							[
								28.069997592895277,
								60.50351654727584
							],
							[
								26.255172967236973,
								60.4239606797625
							],
							[
								24.496623976344523,
								60.05731639265166
							],
							[
								22.869694858499457,
								59.846373196036225
							],
							[
								22.290763787533592,
								60.39192129174154
							],
							[
								21.322244093519316,
								60.720169989659524
							],
							[
								21.544866163832694,
								61.70532949487179
							],
							[
								21.05921105315369,
								62.60739329695874
							],
							[
								21.536029493910803,
								63.18973501245587
							],
							[
								22.442744174903993,
								63.81781037053129
							],
							[
								24.730511508897536,
								64.90234365504084
							],
							[
								25.398067661243942,
								65.11142650009374
							],
							[
								25.294043003040404,
								65.53434642197045
							],
							[
								23.903378533633802,
								66.00692739527962
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Finland",
					"sov_a3": "FI1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "Finland",
					"adm0_a3": "FIN",
					"geou_dif": 0,
					"geounit": "Finland",
					"gu_a3": "FIN",
					"su_dif": 0,
					"subunit": "Finland",
					"su_a3": "FIN",
					"brk_diff": 0,
					"name": "Finland",
					"name_long": "Finland",
					"brk_a3": "FIN",
					"brk_name": "Finland",
					"brk_group": "",
					"abbrev": "Fin.",
					"postal": "FIN",
					"formal_en": "Republic of Finland",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Finland",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 1,
					"mapcolor9": 4,
					"mapcolor13": 6,
					"pop_est": 5250275,
					"gdp_md_est": 193500,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "FI",
					"iso_a3": "FIN",
					"iso_n3": "246",
					"un_a3": "246",
					"wb_a2": "FI",
					"wb_a3": "FIN",
					"woe_id": -99,
					"adm0_a3_is": "FIN",
					"adm0_a3_us": "FIN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									178.37360000000004,
									-17.339920000000035
								],
								[
									178.71806,
									-17.628459999999976
								],
								[
									178.55271000000002,
									-18.150590000000037
								],
								[
									177.93266000000003,
									-18.287989999999965
								],
								[
									177.38146000000003,
									-18.16431999999999
								],
								[
									177.28504,
									-17.724649999999983
								],
								[
									177.67087000000012,
									-17.381139999999988
								],
								[
									178.12557,
									-17.504809999999964
								],
								[
									178.37360000000004,
									-17.339920000000035
								]
							]
						],
						[
							[
								[
									179.36414266196428,
									-16.80135407694685
								],
								[
									178.7250593629971,
									-17.01204167436802
								],
								[
									178.59683859511708,
									-16.639149999999958
								],
								[
									179.09660936299716,
									-16.433984277547424
								],
								[
									179.41350936299713,
									-16.379054277547397
								],
								[
									180.00000000000014,
									-16.06713266364244
								],
								[
									180.00000000000014,
									-16.55521656663916
								],
								[
									179.36414266196428,
									-16.80135407694685
								]
							]
						],
						[
							[
								[
									-179.91736938476527,
									-16.50178313564936
								],
								[
									-179.99999999999997,
									-16.55521656663916
								],
								[
									-179.99999999999997,
									-16.06713266364244
								],
								[
									-179.7933201090486,
									-16.02088225674123
								],
								[
									-179.91736938476527,
									-16.50178313564936
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Fiji",
					"sov_a3": "FJI",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Fiji",
					"adm0_a3": "FJI",
					"geou_dif": 0,
					"geounit": "Fiji",
					"gu_a3": "FJI",
					"su_dif": 0,
					"subunit": "Fiji",
					"su_a3": "FJI",
					"brk_diff": 0,
					"name": "Fiji",
					"name_long": "Fiji",
					"brk_a3": "FJI",
					"brk_name": "Fiji",
					"brk_group": "",
					"abbrev": "Fiji",
					"postal": "FJ",
					"formal_en": "Republic of Fiji",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Fiji",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 1,
					"mapcolor9": 2,
					"mapcolor13": 2,
					"pop_est": 944720,
					"gdp_md_est": 3579,
					"pop_year": -99,
					"lastcensus": 2007,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "FJ",
					"iso_a3": "FJI",
					"iso_n3": "242",
					"un_a3": "242",
					"wb_a2": "FJ",
					"wb_a3": "FJI",
					"woe_id": -99,
					"adm0_a3_is": "FJI",
					"adm0_a3_us": "FJI",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Oceania",
					"region_un": "Oceania",
					"subregion": "Melanesia",
					"region_wb": "East Asia & Pacific",
					"name_len": 4,
					"long_len": 4,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-61.2,
								-51.85
							],
							[
								-60,
								-51.25
							],
							[
								-59.15,
								-51.5
							],
							[
								-58.550000000000004,
								-51.10000000000001
							],
							[
								-57.75,
								-51.55
							],
							[
								-58.050000000000004,
								-51.900000000000006
							],
							[
								-59.400000000000006,
								-52.199999999999996
							],
							[
								-59.85000000000001,
								-51.85
							],
							[
								-60.7,
								-52.300000000000004
							],
							[
								-61.2,
								-51.85
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "United Kingdom",
					"sov_a3": "GB1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Dependency",
					"admin": "Falkland Islands",
					"adm0_a3": "FLK",
					"geou_dif": 0,
					"geounit": "Falkland Islands",
					"gu_a3": "FLK",
					"su_dif": 0,
					"subunit": "Falkland Islands",
					"su_a3": "FLK",
					"brk_diff": 1,
					"name": "Falkland Is.",
					"name_long": "Falkland Islands",
					"brk_a3": "B12",
					"brk_name": "Falkland Is.",
					"brk_group": "",
					"abbrev": "Flk. Is.",
					"postal": "FK",
					"formal_en": "Falkland Islands",
					"formal_fr": "",
					"note_adm0": "U.K.",
					"note_brk": "Admin. by U.K.; Claimed by Argentina",
					"name_sort": "Falkland Islands",
					"name_alt": "Islas Malvinas",
					"mapcolor7": 6,
					"mapcolor8": 6,
					"mapcolor9": 6,
					"mapcolor13": 3,
					"pop_est": 3140,
					"gdp_md_est": 105.1,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "FK",
					"iso_a3": "FLK",
					"iso_n3": "238",
					"un_a3": "238",
					"wb_a2": "-99",
					"wb_a3": "-99",
					"woe_id": -99,
					"adm0_a3_is": "FLK",
					"adm0_a3_us": "FLK",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 12,
					"long_len": 16,
					"abbrev_len": 8,
					"tiny": -99,
					"homepart": -99
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									-52.55642473001839,
									2.504705308437053
								],
								[
									-52.93965715189498,
									2.124857692875622
								],
								[
									-53.418465135295264,
									2.0533891870160375
								],
								[
									-53.554839240113495,
									2.334896551925965
								],
								[
									-53.778520677288896,
									2.3767027856500533
								],
								[
									-54.08806250671728,
									2.105556545414629
								],
								[
									-54.52475419779975,
									2.3118488631237852
								],
								[
									-54.27122962097579,
									2.738747870286943
								],
								[
									-54.18428402364475,
									3.194172268075235
								],
								[
									-54.01150387227682,
									3.6225698917748588
								],
								[
									-54.399542202356514,
									4.212611395683481
								],
								[
									-54.47863298197922,
									4.896755682795643
								],
								[
									-53.95804460307093,
									5.756548163267809
								],
								[
									-53.618452928264844,
									5.646529038918402
								],
								[
									-52.88214128275408,
									5.4098509790215985
								],
								[
									-51.82334286152593,
									4.565768133966145
								],
								[
									-51.65779741067888,
									4.156232408053029
								],
								[
									-52.249337531123984,
									3.2410944685962875
								],
								[
									-52.55642473001839,
									2.504705308437053
								]
							]
						],
						[
							[
								[
									9.560016310269134,
									42.15249197037957
								],
								[
									9.229752231491773,
									41.38000682226445
								],
								[
									8.775723097375362,
									41.58361196549444
								],
								[
									8.54421268070783,
									42.256516628583086
								],
								[
									8.746009148807588,
									42.62812185319396
								],
								[
									9.390000848028905,
									43.00998484961474
								],
								[
									9.560016310269134,
									42.15249197037957
								]
							]
						],
						[
							[
								[
									7.593676385131062,
									48.33301911070373
								],
								[
									7.466759067422231,
									47.620581976911865
								],
								[
									7.192202182655535,
									47.44976552997099
								],
								[
									6.736571079138088,
									47.54180125588289
								],
								[
									6.768713820023635,
									47.28770823830368
								],
								[
									6.037388950228973,
									46.72577871356191
								],
								[
									6.022609490593567,
									46.272989813820516
								],
								[
									6.500099724970454,
									46.42967275652944
								],
								[
									6.843592970414562,
									45.99114655210067
								],
								[
									6.802355177445662,
									45.70857982032868
								],
								[
									7.096652459347837,
									45.333098863295874
								],
								[
									6.749955275101712,
									45.02851797136759
								],
								[
									7.007562290076663,
									44.25476675066139
								],
								[
									7.549596388386163,
									44.12790110938482
								],
								[
									7.435184767291844,
									43.69384491634918
								],
								[
									6.529245232783069,
									43.12889232031836
								],
								[
									4.556962517931396,
									43.39965098731159
								],
								[
									3.1004105973527203,
									43.075200507167125
								],
								[
									2.985998976258486,
									42.473015041669896
								],
								[
									1.8267932470871813,
									42.34338471126566
								],
								[
									0.7015906103639225,
									42.79573436133265
								],
								[
									0.3380469091905809,
									42.579546006839564
								],
								[
									-1.5027709619104712,
									43.03401439063049
								],
								[
									-1.9013512841777356,
									43.42280202897834
								],
								[
									-1.3842252262329566,
									44.02261037859017
								],
								[
									-1.1937975732373616,
									46.014917710954876
								],
								[
									-2.225724249673789,
									47.06436269793821
								],
								[
									-2.963276129559574,
									47.570326646507965
								],
								[
									-4.4915549381594815,
									47.95495433205642
								],
								[
									-4.592349819344747,
									48.68416046812695
								],
								[
									-3.2958139713577452,
									48.901692409859635
								],
								[
									-1.6165107893849324,
									48.644421291694584
								],
								[
									-1.9334940250632542,
									49.77634186461577
								],
								[
									-0.9894689599553601,
									49.347375800160876
								],
								[
									1.3387610205227531,
									50.12717316344526
								],
								[
									1.6390010921384999,
									50.946606350297515
								],
								[
									2.513573032246171,
									51.14850617126186
								],
								[
									2.658422071960331,
									50.79684804951566
								],
								[
									3.123251580425716,
									50.78036326761452
								],
								[
									3.5881844417557147,
									50.37899241800358
								],
								[
									4.286022983425141,
									49.907496649772554
								],
								[
									4.799221632515753,
									49.98537303323633
								],
								[
									5.674051954784886,
									49.52948354755745
								],
								[
									5.897759230176376,
									49.44266714130717
								],
								[
									6.186320428094206,
									49.46380280211446
								],
								[
									6.6582296077835394,
									49.201958319691556
								],
								[
									8.099278598674772,
									49.01778351500337
								],
								[
									7.593676385131062,
									48.33301911070373
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "France",
					"sov_a3": "FR1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "France",
					"adm0_a3": "FRA",
					"geou_dif": 0,
					"geounit": "France",
					"gu_a3": "FRA",
					"su_dif": 0,
					"subunit": "France",
					"su_a3": "FRA",
					"brk_diff": 0,
					"name": "France",
					"name_long": "France",
					"brk_a3": "FRA",
					"brk_name": "France",
					"brk_group": "",
					"abbrev": "Fr.",
					"postal": "F",
					"formal_en": "French Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "France",
					"name_alt": "",
					"mapcolor7": 7,
					"mapcolor8": 5,
					"mapcolor9": 9,
					"mapcolor13": 11,
					"pop_est": 64057792,
					"gdp_md_est": 2128000,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "1. Developed region: G7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "FR",
					"iso_a3": "FRA",
					"iso_n3": "250",
					"un_a3": "250",
					"wb_a2": "FR",
					"wb_a3": "FRA",
					"woe_id": -99,
					"adm0_a3_is": "FRA",
					"adm0_a3_us": "FRA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Western Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 3,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								11.093772820691925,
								-3.978826592630547
							],
							[
								10.06613528813574,
								-2.9694825171056816
							],
							[
								9.40524539555497,
								-2.144313246269043
							],
							[
								8.79799563969317,
								-1.111301364754496
							],
							[
								8.830086704146424,
								-0.7790735815500369
							],
							[
								9.048419630579588,
								-0.45935149496021666
							],
							[
								9.29135053878369,
								0.2686660831676875
							],
							[
								9.492888624721985,
								1.010119533691494
							],
							[
								9.830284051155644,
								1.0678937849937995
							],
							[
								11.285078973036462,
								1.0576618514000131
							],
							[
								11.276449008843713,
								2.261050930180872
							],
							[
								11.75166548019979,
								2.3267575138399934
							],
							[
								12.359380323952221,
								2.19281220133945
							],
							[
								12.951333855855609,
								2.32161570882694
							],
							[
								13.075822381246752,
								2.2670970727590145
							],
							[
								13.003113641012078,
								1.8308963077833198
							],
							[
								13.282631463278818,
								1.3141836612968805
							],
							[
								14.026668735417218,
								1.3956773950211527
							],
							[
								14.276265903386957,
								1.1969298364266194
							],
							[
								13.843320753645656,
								0.038757635901149
							],
							[
								14.316418491277744,
								-0.5526274552470483
							],
							[
								14.425455763413595,
								-1.333406670744971
							],
							[
								14.299210239324566,
								-1.998275648612214
							],
							[
								13.99240726080771,
								-2.4708049454890997
							],
							[
								13.109618767965628,
								-2.4287403296035137
							],
							[
								12.575284458067642,
								-1.948511244315135
							],
							[
								12.495702752338161,
								-2.391688327650243
							],
							[
								11.820963575903193,
								-2.514161472181982
							],
							[
								11.478038771214303,
								-2.7656189917142413
							],
							[
								11.855121697648116,
								-3.4268706193210505
							],
							[
								11.093772820691925,
								-3.978826592630547
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Gabon",
					"sov_a3": "GAB",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Gabon",
					"adm0_a3": "GAB",
					"geou_dif": 0,
					"geounit": "Gabon",
					"gu_a3": "GAB",
					"su_dif": 0,
					"subunit": "Gabon",
					"su_a3": "GAB",
					"brk_diff": 0,
					"name": "Gabon",
					"name_long": "Gabon",
					"brk_a3": "GAB",
					"brk_name": "Gabon",
					"brk_group": "",
					"abbrev": "Gabon",
					"postal": "GA",
					"formal_en": "Gabonese Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Gabon",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 2,
					"mapcolor9": 5,
					"mapcolor13": 5,
					"pop_est": 1514993,
					"gdp_md_est": 21110,
					"pop_year": -99,
					"lastcensus": 2003,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GA",
					"iso_a3": "GAB",
					"iso_n3": "266",
					"un_a3": "266",
					"wb_a2": "GA",
					"wb_a3": "GAB",
					"woe_id": -99,
					"adm0_a3_is": "GAB",
					"adm0_a3_us": "GAB",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Middle Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": 3,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									-5.661948614921897,
									54.55460317648385
								],
								[
									-6.1978848942209765,
									53.86756500916334
								],
								[
									-6.953730231137996,
									54.073702297575636
								],
								[
									-7.572167934591079,
									54.05995636658599
								],
								[
									-7.3660306461787854,
									54.595840969452695
								],
								[
									-7.572167934591079,
									55.1316222194549
								],
								[
									-6.733847011736145,
									55.1728600124238
								],
								[
									-5.661948614921897,
									54.55460317648385
								]
							]
						],
						[
							[
								[
									-3.0050048486352807,
									58.63500010846633
								],
								[
									-4.073828497728016,
									57.55302480735526
								],
								[
									-3.0550017968776615,
									57.69001902936094
								],
								[
									-1.9592805647769183,
									57.68479970969952
								],
								[
									-2.2199881656893012,
									56.87001740175353
								],
								[
									-3.119003058271119,
									55.973793036515474
								],
								[
									-2.085009324543023,
									55.90999848085127
								],
								[
									-2.005675679673857,
									55.80490285035023
								],
								[
									-1.11499101399221,
									54.624986477265395
								],
								[
									-0.4304849918542004,
									54.46437612570216
								],
								[
									0.18498131674203933,
									53.32501414653103
								],
								[
									0.4699768408317766,
									52.92999949809197
								],
								[
									1.681530795914739,
									52.739520168664
								],
								[
									1.5599878271643774,
									52.09999848083601
								],
								[
									1.050561557630914,
									51.806760565795685
								],
								[
									1.4498653499503007,
									51.28942780212196
								],
								[
									0.5503336930455021,
									50.765738837275876
								],
								[
									-0.7875174625586396,
									50.77498891865622
								],
								[
									-2.4899975244143775,
									50.50001862243124
								],
								[
									-2.956273972984036,
									50.696879991247016
								],
								[
									-3.6174480859423284,
									50.22835561787272
								],
								[
									-4.542507900399244,
									50.341837063185665
								],
								[
									-5.245023159191135,
									49.95999990498109
								],
								[
									-5.776566941745301,
									50.15967763935683
								],
								[
									-4.309989793301838,
									51.21000112568916
								],
								[
									-3.414850633142123,
									51.42600861266925
								],
								[
									-3.4227194671083225,
									51.42684816740609
								],
								[
									-4.984367234710874,
									51.593466091510976
								],
								[
									-5.2672957015088855,
									51.991400458374585
								],
								[
									-4.2223465641348525,
									52.301355699261364
								],
								[
									-4.770013393564113,
									52.840004991255626
								],
								[
									-4.5799991520269145,
									53.49500377055517
								],
								[
									-3.093830673788659,
									53.404547400669685
								],
								[
									-3.0920796370471066,
									53.40444082296355
								],
								[
									-2.945008510744344,
									53.984999701546684
								],
								[
									-3.614700825433033,
									54.600936773292574
								],
								[
									-3.6300054589893307,
									54.615012925833014
								],
								[
									-4.844169073903004,
									54.790971177786844
								],
								[
									-5.082526617849226,
									55.06160065369937
								],
								[
									-4.719112107756644,
									55.50847260194348
								],
								[
									-5.047980922862109,
									55.78398550070753
								],
								[
									-5.58639767091114,
									55.31114614523682
								],
								[
									-5.644998745130181,
									56.275014960344805
								],
								[
									-6.149980841486354,
									56.78500967063354
								],
								[
									-5.786824713555291,
									57.81884837506465
								],
								[
									-5.009998745127575,
									58.63001333275005
								],
								[
									-4.211494513353557,
									58.55084503847917
								],
								[
									-3.0050048486352807,
									58.63500010846633
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "United Kingdom",
					"sov_a3": "GB1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "United Kingdom",
					"adm0_a3": "GBR",
					"geou_dif": 0,
					"geounit": "United Kingdom",
					"gu_a3": "GBR",
					"su_dif": 0,
					"subunit": "United Kingdom",
					"su_a3": "GBR",
					"brk_diff": 0,
					"name": "United Kingdom",
					"name_long": "United Kingdom",
					"brk_a3": "GBR",
					"brk_name": "United Kingdom",
					"brk_group": "",
					"abbrev": "U.K.",
					"postal": "GB",
					"formal_en": "United Kingdom of Great Britain and Northern Ireland",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "United Kingdom",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 6,
					"mapcolor9": 6,
					"mapcolor13": 3,
					"pop_est": 62262000,
					"gdp_md_est": 1977704,
					"pop_year": 0,
					"lastcensus": 2011,
					"gdp_year": 2009,
					"economy": "1. Developed region: G7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GB",
					"iso_a3": "GBR",
					"iso_n3": "826",
					"un_a3": "826",
					"wb_a2": "GB",
					"wb_a3": "GBR",
					"woe_id": -99,
					"adm0_a3_is": "GBR",
					"adm0_a3_us": "GBR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 14,
					"long_len": 14,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								44.97248009621808,
								41.248128567055595
							],
							[
								43.58274580259273,
								41.09214325618257
							],
							[
								42.61954878110449,
								41.58317271581994
							],
							[
								41.55408410011066,
								41.53565623632757
							],
							[
								41.70317060727271,
								41.96294281673292
							],
							[
								41.45347008643839,
								42.64512339941794
							],
							[
								40.87546919125379,
								43.013628038091284
							],
							[
								40.32139448422032,
								43.128633938156845
							],
							[
								39.955008579270924,
								43.43499766699922
							],
							[
								40.07696495947977,
								43.553104153002316
							],
							[
								40.922184686045625,
								43.38215851498079
							],
							[
								42.39439456560882,
								43.22030792904263
							],
							[
								43.75601688006739,
								42.74082815202249
							],
							[
								43.931199985536836,
								42.55497386328477
							],
							[
								44.537622918481986,
								42.71199270280363
							],
							[
								45.47027916848572,
								42.50278066666998
							],
							[
								45.77641035338277,
								42.09244395605636
							],
							[
								46.404950799348825,
								41.860675157227305
							],
							[
								46.14543175637902,
								41.72280243587258
							],
							[
								46.63790815612058,
								41.181672675128226
							],
							[
								46.50163740416693,
								41.06444468847411
							],
							[
								45.96260053893039,
								41.123872585609774
							],
							[
								45.217426385281584,
								41.41145193131405
							],
							[
								44.97248009621808,
								41.248128567055595
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Georgia",
					"sov_a3": "GEO",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Georgia",
					"adm0_a3": "GEO",
					"geou_dif": 0,
					"geounit": "Georgia",
					"gu_a3": "GEO",
					"su_dif": 0,
					"subunit": "Georgia",
					"su_a3": "GEO",
					"brk_diff": 0,
					"name": "Georgia",
					"name_long": "Georgia",
					"brk_a3": "GEO",
					"brk_name": "Georgia",
					"brk_group": "",
					"abbrev": "Geo.",
					"postal": "GE",
					"formal_en": "Georgia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Georgia",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 1,
					"mapcolor9": 3,
					"mapcolor13": 2,
					"pop_est": 4615807,
					"gdp_md_est": 21510,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GE",
					"iso_a3": "GEO",
					"iso_n3": "268",
					"un_a3": "268",
					"wb_a2": "GE",
					"wb_a3": "GEO",
					"woe_id": -99,
					"adm0_a3_is": "GEO",
					"adm0_a3_us": "GEO",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								1.0601216976049272,
								5.928837388528876
							],
							[
								-0.5076379052659377,
								5.3434726017426755
							],
							[
								-1.0636246402941936,
								5.000547797053812
							],
							[
								-1.9647065901675944,
								4.710462144383371
							],
							[
								-2.856125047202397,
								4.994475816259509
							],
							[
								-2.8107014632178395,
								5.38905121502411
							],
							[
								-3.244370083011262,
								6.250471503113502
							],
							[
								-2.9835849674503265,
								7.379704901555513
							],
							[
								-2.562189500326241,
								8.219627793811483
							],
							[
								-2.8274963037127065,
								9.642460842319778
							],
							[
								-2.9638962467471117,
								10.395334784380083
							],
							[
								-2.9404093082704605,
								10.962690334512558
							],
							[
								-1.2033577132114317,
								11.009819240762738
							],
							[
								-0.7615758935481834,
								10.936929633015055
							],
							[
								-0.43870154458858224,
								11.098340969278722
							],
							[
								0.023802524423700785,
								11.018681748900804
							],
							[
								-0.04978471515994442,
								10.706917832883931
							],
							[
								0.3675799902453889,
								10.19121287682718
							],
							[
								0.3659005061958851,
								9.465003973829482
							],
							[
								0.46119184734212126,
								8.677222601756014
							],
							[
								0.7120292496868785,
								8.31246450442383
							],
							[
								0.4909574723422451,
								7.411744289576475
							],
							[
								0.5703841487748491,
								6.914358628767189
							],
							[
								0.8369311865363329,
								6.279978745952149
							],
							[
								1.0601216976049272,
								5.928837388528876
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Ghana",
					"sov_a3": "GHA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Ghana",
					"adm0_a3": "GHA",
					"geou_dif": 0,
					"geounit": "Ghana",
					"gu_a3": "GHA",
					"su_dif": 0,
					"subunit": "Ghana",
					"su_a3": "GHA",
					"brk_diff": 0,
					"name": "Ghana",
					"name_long": "Ghana",
					"brk_a3": "GHA",
					"brk_name": "Ghana",
					"brk_group": "",
					"abbrev": "Ghana",
					"postal": "GH",
					"formal_en": "Republic of Ghana",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Ghana",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 3,
					"mapcolor9": 1,
					"mapcolor13": 4,
					"pop_est": 23832495,
					"gdp_md_est": 34200,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GH",
					"iso_a3": "GHA",
					"iso_n3": "288",
					"un_a3": "288",
					"wb_a2": "GH",
					"wb_a3": "GHA",
					"woe_id": -99,
					"adm0_a3_is": "GHA",
					"adm0_a3_us": "GHA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-8.439298468448698,
								7.686042792181738
							],
							[
								-8.722123582382125,
								7.71167430259851
							],
							[
								-8.926064622422004,
								7.309037380396376
							],
							[
								-9.208786383490846,
								7.313920803247953
							],
							[
								-9.40334815106975,
								7.526905218938907
							],
							[
								-9.337279832384581,
								7.9285344507113535
							],
							[
								-9.755342169625834,
								8.541055202666925
							],
							[
								-10.016566534861255,
								8.428503933135232
							],
							[
								-10.23009355309128,
								8.406205552601293
							],
							[
								-10.505477260774668,
								8.348896389189605
							],
							[
								-10.494315151399633,
								8.715540676300435
							],
							[
								-10.654770473665891,
								8.977178452994195
							],
							[
								-10.622395188835041,
								9.267910061068278
							],
							[
								-10.839151984083301,
								9.688246161330369
							],
							[
								-11.11748124840733,
								10.045872911006285
							],
							[
								-11.917277390988659,
								10.046983954300558
							],
							[
								-12.150338100625005,
								9.858571682164381
							],
							[
								-12.425928514037565,
								9.835834051955956
							],
							[
								-12.59671912276221,
								9.62018830000197
							],
							[
								-12.71195756677308,
								9.342711696810767
							],
							[
								-13.246550258832515,
								8.903048610871508
							],
							[
								-13.685153977909792,
								9.49474376061346
							],
							[
								-14.074044969122282,
								9.886166897008252
							],
							[
								-14.33007585291237,
								10.015719712763968
							],
							[
								-14.579698859098258,
								10.214467271358515
							],
							[
								-14.693231980843505,
								10.656300767454042
							],
							[
								-14.839553798877944,
								10.87657156009814
							],
							[
								-15.130311245168173,
								11.040411688679526
							],
							[
								-14.685687221728898,
								11.527823798056488
							],
							[
								-14.382191534878729,
								11.509271958863692
							],
							[
								-14.121406419317779,
								11.677117010947697
							],
							[
								-13.900799729863776,
								11.678718980348748
							],
							[
								-13.743160773157413,
								11.811269029177412
							],
							[
								-13.828271857142125,
								12.142644151249044
							],
							[
								-13.718743658899513,
								12.24718557377551
							],
							[
								-13.700476040084325,
								12.586182969610194
							],
							[
								-13.217818162478238,
								12.575873521367967
							],
							[
								-12.499050665730564,
								12.332089952031057
							],
							[
								-12.27859900557344,
								12.354440008997287
							],
							[
								-12.203564825885634,
								12.465647691289405
							],
							[
								-11.658300950557932,
								12.386582749882836
							],
							[
								-11.51394283695059,
								12.442987575729418
							],
							[
								-11.456168585648271,
								12.076834214725338
							],
							[
								-11.297573614944511,
								12.077971096235771
							],
							[
								-11.03655595543826,
								12.211244615116515
							],
							[
								-10.870829637078215,
								12.17788747807211
							],
							[
								-10.593223842806282,
								11.92397532800598
							],
							[
								-10.165213792348837,
								11.844083563682744
							],
							[
								-9.890992804392013,
								12.060478623904972
							],
							[
								-9.567911749703214,
								12.194243068892476
							],
							[
								-9.327616339546012,
								12.334286200403454
							],
							[
								-9.127473517279583,
								12.308060411015333
							],
							[
								-8.90526485842453,
								12.088358059126437
							],
							[
								-8.786099005559464,
								11.812560939984706
							],
							[
								-8.376304897484914,
								11.393645941610629
							],
							[
								-8.581305304386774,
								11.136245632364805
							],
							[
								-8.620321010767128,
								10.810890814655183
							],
							[
								-8.407310756860028,
								10.909256903522762
							],
							[
								-8.282357143578281,
								10.792597357623846
							],
							[
								-8.33537716310974,
								10.494811916541934
							],
							[
								-8.029943610048619,
								10.206534939001713
							],
							[
								-8.229337124046822,
								10.1290202905639
							],
							[
								-8.30961646161225,
								9.789531968622441
							],
							[
								-8.07911373537435,
								9.376223863152035
							],
							[
								-7.832100389019188,
								8.575704250518626
							],
							[
								-8.20349890790088,
								8.455453192575447
							],
							[
								-8.299048631208564,
								8.316443589710303
							],
							[
								-8.221792364932199,
								8.123328762235573
							],
							[
								-8.280703497744938,
								7.687179673692157
							],
							[
								-8.439298468448698,
								7.686042792181738
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Guinea",
					"sov_a3": "GIN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Guinea",
					"adm0_a3": "GIN",
					"geou_dif": 0,
					"geounit": "Guinea",
					"gu_a3": "GIN",
					"su_dif": 0,
					"subunit": "Guinea",
					"su_a3": "GIN",
					"brk_diff": 0,
					"name": "Guinea",
					"name_long": "Guinea",
					"brk_a3": "GIN",
					"brk_name": "Guinea",
					"brk_group": "",
					"abbrev": "Gin.",
					"postal": "GN",
					"formal_en": "Republic of Guinea",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Guinea",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 3,
					"mapcolor9": 7,
					"mapcolor13": 2,
					"pop_est": 10057975,
					"gdp_md_est": 10600,
					"pop_year": -99,
					"lastcensus": 1996,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GN",
					"iso_a3": "GIN",
					"iso_n3": "324",
					"un_a3": "324",
					"wb_a2": "GN",
					"wb_a3": "GIN",
					"woe_id": -99,
					"adm0_a3_is": "GIN",
					"adm0_a3_us": "GIN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-16.841524624081273,
								13.15139394780256
							],
							[
								-16.71372880702347,
								13.594958604379855
							],
							[
								-15.624596320039942,
								13.62358734786956
							],
							[
								-15.39877031092446,
								13.86036876063092
							],
							[
								-15.08173539881382,
								13.876491807505985
							],
							[
								-14.687030808968487,
								13.630356960499784
							],
							[
								-14.376713833055788,
								13.625680243377374
							],
							[
								-14.046992356817482,
								13.79406789800045
							],
							[
								-13.844963344772408,
								13.505041612192002
							],
							[
								-14.277701788784555,
								13.280585028532244
							],
							[
								-14.712197231494628,
								13.298206691943777
							],
							[
								-15.141163295949468,
								13.509511623585238
							],
							[
								-15.511812506562933,
								13.278569647672867
							],
							[
								-15.691000535534995,
								13.270353094938457
							],
							[
								-15.931295945692211,
								13.130284125211332
							],
							[
								-16.841524624081273,
								13.15139394780256
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Gambia",
					"sov_a3": "GMB",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Gambia",
					"adm0_a3": "GMB",
					"geou_dif": 0,
					"geounit": "Gambia",
					"gu_a3": "GMB",
					"su_dif": 0,
					"subunit": "Gambia",
					"su_a3": "GMB",
					"brk_diff": 0,
					"name": "Gambia",
					"name_long": "The Gambia",
					"brk_a3": "GMB",
					"brk_name": "Gambia",
					"brk_group": "",
					"abbrev": "Gambia",
					"postal": "GM",
					"formal_en": "Republic of the Gambia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Gambia, The",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 1,
					"mapcolor13": 8,
					"pop_est": 1782893,
					"gdp_md_est": 2272,
					"pop_year": -99,
					"lastcensus": 2003,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GM",
					"iso_a3": "GMB",
					"iso_n3": "270",
					"un_a3": "270",
					"wb_a2": "GM",
					"wb_a3": "GMB",
					"woe_id": -99,
					"adm0_a3_is": "GMB",
					"adm0_a3_us": "GMB",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 6,
					"long_len": 10,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-15.130311245168173,
								11.040411688679526
							],
							[
								-15.664180467175527,
								11.458474025920795
							],
							[
								-16.085214199273565,
								11.52459402103824
							],
							[
								-16.314786749730203,
								11.80651479740655
							],
							[
								-16.30894731288123,
								11.95870189050612
							],
							[
								-16.61383826340328,
								12.170911159712702
							],
							[
								-16.677451951554573,
								12.384851589401052
							],
							[
								-16.147716844130585,
								12.547761542201187
							],
							[
								-15.816574266004254,
								12.515567124883347
							],
							[
								-15.54847693527401,
								12.628170070847347
							],
							[
								-13.700476040084325,
								12.586182969610194
							],
							[
								-13.718743658899513,
								12.24718557377551
							],
							[
								-13.828271857142125,
								12.142644151249044
							],
							[
								-13.743160773157413,
								11.811269029177412
							],
							[
								-13.900799729863776,
								11.678718980348748
							],
							[
								-14.121406419317779,
								11.677117010947697
							],
							[
								-14.382191534878729,
								11.509271958863692
							],
							[
								-14.685687221728898,
								11.527823798056488
							],
							[
								-15.130311245168173,
								11.040411688679526
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Guinea Bissau",
					"sov_a3": "GNB",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Guinea Bissau",
					"adm0_a3": "GNB",
					"geou_dif": 0,
					"geounit": "Guinea Bissau",
					"gu_a3": "GNB",
					"su_dif": 0,
					"subunit": "Guinea Bissau",
					"su_a3": "GNB",
					"brk_diff": 0,
					"name": "Guinea-Bissau",
					"name_long": "Guinea-Bissau",
					"brk_a3": "GNB",
					"brk_name": "Guinea-Bissau",
					"brk_group": "",
					"abbrev": "GnB.",
					"postal": "GW",
					"formal_en": "Republic of Guinea-Bissau",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Guinea-Bissau",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 5,
					"mapcolor9": 3,
					"mapcolor13": 4,
					"pop_est": 1533964,
					"gdp_md_est": 904.2,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GW",
					"iso_a3": "GNB",
					"iso_n3": "624",
					"un_a3": "624",
					"wb_a2": "GW",
					"wb_a3": "GNB",
					"woe_id": -99,
					"adm0_a3_is": "GNB",
					"adm0_a3_us": "GNB",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 13,
					"long_len": 13,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								9.492888624721985,
								1.010119533691494
							],
							[
								9.305613234096256,
								1.1609113631191832
							],
							[
								9.649158155972628,
								2.2838660750377358
							],
							[
								11.276449008843713,
								2.261050930180872
							],
							[
								11.285078973036462,
								1.0576618514000131
							],
							[
								9.830284051155644,
								1.0678937849937995
							],
							[
								9.492888624721985,
								1.010119533691494
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Equatorial Guinea",
					"sov_a3": "GNQ",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Equatorial Guinea",
					"adm0_a3": "GNQ",
					"geou_dif": 0,
					"geounit": "Equatorial Guinea",
					"gu_a3": "GNQ",
					"su_dif": 0,
					"subunit": "Equatorial Guinea",
					"su_a3": "GNQ",
					"brk_diff": 0,
					"name": "Eq. Guinea",
					"name_long": "Equatorial Guinea",
					"brk_a3": "GNQ",
					"brk_name": "Eq. Guinea",
					"brk_group": "",
					"abbrev": "Eq. G.",
					"postal": "GQ",
					"formal_en": "Republic of Equatorial Guinea",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Equatorial Guinea",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 1,
					"mapcolor9": 4,
					"mapcolor13": 8,
					"pop_est": 650702,
					"gdp_md_est": 14060,
					"pop_year": 0,
					"lastcensus": 2002,
					"gdp_year": 0,
					"economy": "7. Least developed region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GQ",
					"iso_a3": "GNQ",
					"iso_n3": "226",
					"un_a3": "226",
					"wb_a2": "GQ",
					"wb_a3": "GNQ",
					"woe_id": -99,
					"adm0_a3_is": "GNQ",
					"adm0_a3_us": "GNQ",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Middle Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 10,
					"long_len": 17,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									23.699980096133004,
									35.70500438083553
								],
								[
									24.24666507334868,
									35.368022365860156
								],
								[
									25.02501549652888,
									35.424995632461986
								],
								[
									25.769207797964185,
									35.35401805270908
								],
								[
									25.745023227651586,
									35.179997666966216
								],
								[
									26.290002882601726,
									35.29999034274792
								],
								[
									26.16499759288766,
									35.004995429009796
								],
								[
									24.724982130642303,
									34.91998769788961
								],
								[
									24.735007358506948,
									35.08499054619759
								],
								[
									23.514978468528113,
									35.27999156345098
								],
								[
									23.699980096133004,
									35.70500438083553
								]
							]
						],
						[
							[
								[
									22.05537763844427,
									41.14986583105269
								],
								[
									22.597308383889015,
									41.130487168943205
								],
								[
									22.76177000000007,
									41.304800000000085
								],
								[
									22.95237715016657,
									41.33799388281122
								],
								[
									23.692073601992462,
									41.30908091894386
								],
								[
									24.492644891058035,
									41.58389618587205
								],
								[
									25.197201368925533,
									41.23448598893066
								],
								[
									26.106138136507184,
									41.32889883072784
								],
								[
									26.117041863720914,
									41.82690460872473
								],
								[
									26.604195590936285,
									41.562114569661105
								],
								[
									26.29460208507578,
									40.93626129817426
								],
								[
									26.056942172965506,
									40.824123440100834
								],
								[
									25.447677036244187,
									40.85254547786147
								],
								[
									24.92584842296094,
									40.94706167252323
								],
								[
									23.714811232200816,
									40.68712921809512
								],
								[
									24.407998894964066,
									40.1249929876241
								],
								[
									23.899967889102584,
									39.96200552017558
								],
								[
									23.3429993018608,
									39.96099782974579
								],
								[
									22.813987664488963,
									40.476005153966554
								],
								[
									22.62629886240478,
									40.25656118423919
								],
								[
									22.84974775563481,
									39.65931081802577
								],
								[
									23.3500272966526,
									39.19001129816726
								],
								[
									22.973099399515547,
									38.97090322524966
								],
								[
									23.530016310324953,
									38.51000112563847
								],
								[
									24.025024855248944,
									38.21999298761645
								],
								[
									24.040011020613605,
									37.655014553369426
								],
								[
									23.115002882589152,
									37.92001129816222
								],
								[
									23.409971958111072,
									37.409990749657396
								],
								[
									22.774971958108637,
									37.30501007745656
								],
								[
									23.15422529469862,
									36.422505804992056
								],
								[
									22.490028110451107,
									36.41000010837746
								],
								[
									21.670026482843696,
									36.8449864771942
								],
								[
									21.295010613701578,
									37.644989325504696
								],
								[
									21.120034213961333,
									38.31032339126273
								],
								[
									20.730032179454582,
									38.769985256498785
								],
								[
									20.217712029712857,
									39.340234686839636
								],
								[
									20.15001590341052,
									39.62499766698403
								],
								[
									20.615000441172782,
									40.110006822259436
								],
								[
									20.674996779063633,
									40.434999904943055
								],
								[
									20.99998986174728,
									40.58000397395398
								],
								[
									21.02004031747643,
									40.84272695572588
								],
								[
									21.674160597426976,
									40.93127452245798
								],
								[
									22.05537763844427,
									41.14986583105269
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Greece",
					"sov_a3": "GRC",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Greece",
					"adm0_a3": "GRC",
					"geou_dif": 0,
					"geounit": "Greece",
					"gu_a3": "GRC",
					"su_dif": 0,
					"subunit": "Greece",
					"su_a3": "GRC",
					"brk_diff": 0,
					"name": "Greece",
					"name_long": "Greece",
					"brk_a3": "GRC",
					"brk_name": "Greece",
					"brk_group": "",
					"abbrev": "Greece",
					"postal": "GR",
					"formal_en": "Hellenic Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Greece",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 2,
					"mapcolor9": 2,
					"mapcolor13": 9,
					"pop_est": 10737428,
					"gdp_md_est": 343000,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GR",
					"iso_a3": "GRC",
					"iso_n3": "300",
					"un_a3": "300",
					"wb_a2": "GR",
					"wb_a3": "GRC",
					"woe_id": -99,
					"adm0_a3_is": "GRC",
					"adm0_a3_us": "GRC",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-46.76379,
								82.62796
							],
							[
								-43.40644,
								83.22516000000002
							],
							[
								-39.89753,
								83.18018
							],
							[
								-38.62214,
								83.54905
							],
							[
								-35.08787,
								83.64513000000001
							],
							[
								-27.10046,
								83.51966
							],
							[
								-20.84539,
								82.72668999999999
							],
							[
								-22.69182,
								82.34165
							],
							[
								-26.51753,
								82.29765
							],
							[
								-31.900000000000002,
								82.2
							],
							[
								-31.396459999999998,
								82.02154
							],
							[
								-27.85666,
								82.13177999999999
							],
							[
								-24.84448,
								81.78697
							],
							[
								-22.90328,
								82.09317
							],
							[
								-22.071749999999998,
								81.73449000000001
							],
							[
								-23.169610000000002,
								81.15271
							],
							[
								-20.62363,
								81.52462
							],
							[
								-15.768180000000001,
								81.91245
							],
							[
								-12.77018,
								81.71885
							],
							[
								-12.20855,
								81.29154
							],
							[
								-16.285330000000002,
								80.58004
							],
							[
								-16.85,
								80.35
							],
							[
								-20.04624,
								80.17708
							],
							[
								-17.73035,
								80.12912
							],
							[
								-18.900000000000002,
								79.4
							],
							[
								-19.70499,
								78.75128000000001
							],
							[
								-19.67353,
								77.63859000000001
							],
							[
								-18.47285,
								76.98565
							],
							[
								-20.03503,
								76.94434000000001
							],
							[
								-21.679440000000003,
								76.62795
							],
							[
								-19.83407,
								76.09808
							],
							[
								-19.59896,
								75.24838
							],
							[
								-20.66818,
								75.15585
							],
							[
								-19.37281,
								74.29561000000001
							],
							[
								-21.594220000000004,
								74.22382
							],
							[
								-20.434540000000002,
								73.81713
							],
							[
								-20.762340000000002,
								73.46436
							],
							[
								-22.17221,
								73.30955
							],
							[
								-23.56593,
								73.30663
							],
							[
								-22.313109999999998,
								72.62928
							],
							[
								-22.29954,
								72.18409
							],
							[
								-24.278340000000004,
								72.59788
							],
							[
								-24.79296,
								72.3302
							],
							[
								-23.442960000000003,
								72.08015999999999
							],
							[
								-22.13281,
								71.46898
							],
							[
								-21.753560000000004,
								70.66369
							],
							[
								-23.53603,
								70.471
							],
							[
								-24.307019999999998,
								70.85649000000001
							],
							[
								-25.543409999999998,
								71.43093999999999
							],
							[
								-25.20135,
								70.75225999999999
							],
							[
								-26.36276,
								70.22646
							],
							[
								-23.727420000000002,
								70.18401
							],
							[
								-22.349020000000003,
								70.12946000000001
							],
							[
								-25.029270000000004,
								69.25880000000001
							],
							[
								-27.74737,
								68.47046
							],
							[
								-30.67371,
								68.12503
							],
							[
								-31.77665,
								68.12078000000001
							],
							[
								-32.81105,
								67.73547
							],
							[
								-34.20196,
								66.67974
							],
							[
								-36.35284,
								65.9789
							],
							[
								-37.043780000000005,
								65.93768
							],
							[
								-38.37505,
								65.69213
							],
							[
								-39.81222,
								65.45848
							],
							[
								-40.66899,
								64.83997000000001
							],
							[
								-40.68281,
								64.13902
							],
							[
								-41.188700000000004,
								63.482459999999996
							],
							[
								-42.819379999999995,
								62.68233
							],
							[
								-42.41666000000001,
								61.90093
							],
							[
								-42.86619,
								61.074040000000004
							],
							[
								-43.3784,
								60.09772
							],
							[
								-44.7875,
								60.03676000000001
							],
							[
								-46.26364,
								60.85328
							],
							[
								-48.26294000000001,
								60.858430000000006
							],
							[
								-49.23308000000001,
								61.40681000000001
							],
							[
								-49.90039,
								62.38336
							],
							[
								-51.63325,
								63.62691
							],
							[
								-52.140139999999995,
								64.27842
							],
							[
								-52.27659,
								65.17670000000001
							],
							[
								-53.66166,
								66.09957
							],
							[
								-53.30161,
								66.8365
							],
							[
								-53.96911,
								67.18899
							],
							[
								-52.9804,
								68.35759
							],
							[
								-51.47536,
								68.72958000000001
							],
							[
								-51.08041,
								69.14781
							],
							[
								-50.87122,
								69.9291
							],
							[
								-52.013585,
								69.574925
							],
							[
								-52.55792,
								69.42616
							],
							[
								-53.456289999999996,
								69.283625
							],
							[
								-54.68336,
								69.61003
							],
							[
								-54.750009999999996,
								70.28932
							],
							[
								-54.35884,
								70.82131500000001
							],
							[
								-53.431315000000005,
								70.835755
							],
							[
								-51.39014,
								70.56978
							],
							[
								-53.109370000000006,
								71.20485000000001
							],
							[
								-54.00422,
								71.54719
							],
							[
								-55,
								71.40653696727257
							],
							[
								-55.83468,
								71.65444000000001
							],
							[
								-54.71819000000001,
								72.58625
							],
							[
								-55.32634,
								72.95861000000001
							],
							[
								-56.12003,
								73.64977
							],
							[
								-57.32363,
								74.71026
							],
							[
								-58.59679,
								75.09861000000001
							],
							[
								-58.58516,
								75.51727
							],
							[
								-61.26861,
								76.10238000000001
							],
							[
								-63.39165,
								76.1752
							],
							[
								-66.06427,
								76.13486
							],
							[
								-68.50438,
								76.06141000000001
							],
							[
								-69.66485,
								76.37975
							],
							[
								-71.40257,
								77.00857
							],
							[
								-68.77671,
								77.32312
							],
							[
								-66.76397,
								77.37595
							],
							[
								-71.04293,
								77.63595
							],
							[
								-73.297,
								78.04419
							],
							[
								-73.15938,
								78.43271
							],
							[
								-69.37345,
								78.91388
							],
							[
								-65.7107,
								79.39436
							],
							[
								-65.3239,
								79.75814
							],
							[
								-68.02298,
								80.11721
							],
							[
								-67.15129,
								80.51582
							],
							[
								-63.68925,
								81.21396000000001
							],
							[
								-62.234440000000006,
								81.3211
							],
							[
								-62.65116,
								81.77042
							],
							[
								-60.28249,
								82.03363000000002
							],
							[
								-57.207440000000005,
								82.19074
							],
							[
								-54.13442,
								82.19962
							],
							[
								-53.043279999999996,
								81.88833
							],
							[
								-50.39061,
								82.43883
							],
							[
								-48.003859999999996,
								82.06481000000001
							],
							[
								-46.59984000000001,
								81.985945
							],
							[
								-44.523,
								81.6607
							],
							[
								-46.9007,
								82.19979000000001
							],
							[
								-46.76379,
								82.62796
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Denmark",
					"sov_a3": "DN1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "Greenland",
					"adm0_a3": "GRL",
					"geou_dif": 0,
					"geounit": "Greenland",
					"gu_a3": "GRL",
					"su_dif": 0,
					"subunit": "Greenland",
					"su_a3": "GRL",
					"brk_diff": 0,
					"name": "Greenland",
					"name_long": "Greenland",
					"brk_a3": "GRL",
					"brk_name": "Greenland",
					"brk_group": "",
					"abbrev": "Grlnd.",
					"postal": "GL",
					"formal_en": "Greenland",
					"formal_fr": "",
					"note_adm0": "Den.",
					"note_brk": "",
					"name_sort": "Greenland",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 1,
					"mapcolor9": 3,
					"mapcolor13": 12,
					"pop_est": 57600,
					"gdp_md_est": 1100,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GL",
					"iso_a3": "GRL",
					"iso_n3": "304",
					"un_a3": "304",
					"wb_a2": "GL",
					"wb_a3": "GRL",
					"woe_id": -99,
					"adm0_a3_is": "GRL",
					"adm0_a3_us": "GRL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Northern America",
					"region_wb": "Europe & Central Asia",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": -99
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-90.09555457229098,
								13.735337632700734
							],
							[
								-90.60862403030085,
								13.909771429901951
							],
							[
								-91.23241024449605,
								13.927832342987957
							],
							[
								-91.68974667027913,
								14.126218166556455
							],
							[
								-92.22775000686983,
								14.538828640190928
							],
							[
								-92.20322953974733,
								14.830102850804069
							],
							[
								-92.08721594925207,
								15.064584662328441
							],
							[
								-92.22924862340628,
								15.25144664149586
							],
							[
								-91.74796017125593,
								16.066564846251723
							],
							[
								-90.46447262242266,
								16.069562079324655
							],
							[
								-90.43886695022204,
								16.410109768128095
							],
							[
								-90.60084672724092,
								16.47077789963876
							],
							[
								-90.71182186558772,
								16.687483018454728
							],
							[
								-91.08167009150065,
								16.918476670799407
							],
							[
								-91.45392127151516,
								17.252177232324172
							],
							[
								-91.00226925328421,
								17.25465770107418
							],
							[
								-91.00151994501596,
								17.81759491624571
							],
							[
								-90.06793351923098,
								17.819326076727478
							],
							[
								-89.14308041050332,
								17.80831899664932
							],
							[
								-89.15080603713095,
								17.015576687075836
							],
							[
								-89.22912167026928,
								15.886937567605171
							],
							[
								-88.93061275913527,
								15.887273464415076
							],
							[
								-88.60458614780585,
								15.70638011317736
							],
							[
								-88.51836402052686,
								15.855389105690975
							],
							[
								-88.22502275262202,
								15.727722479713904
							],
							[
								-88.68067969435563,
								15.346247056535304
							],
							[
								-89.15481096063357,
								15.06641917567481
							],
							[
								-89.22522009963127,
								14.874286200413621
							],
							[
								-89.14553504103718,
								14.678019110569082
							],
							[
								-89.3533259752828,
								14.424132798719114
							],
							[
								-89.58734269891656,
								14.36258616785949
							],
							[
								-89.53421932652051,
								14.244815578666305
							],
							[
								-89.72193396682073,
								14.134228013561696
							],
							[
								-90.0646779039966,
								13.881969509328925
							],
							[
								-90.09555457229098,
								13.735337632700734
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Guatemala",
					"sov_a3": "GTM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Guatemala",
					"adm0_a3": "GTM",
					"geou_dif": 0,
					"geounit": "Guatemala",
					"gu_a3": "GTM",
					"su_dif": 0,
					"subunit": "Guatemala",
					"su_a3": "GTM",
					"brk_diff": 0,
					"name": "Guatemala",
					"name_long": "Guatemala",
					"brk_a3": "GTM",
					"brk_name": "Guatemala",
					"brk_group": "",
					"abbrev": "Guat.",
					"postal": "GT",
					"formal_en": "Republic of Guatemala",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Guatemala",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 3,
					"mapcolor9": 3,
					"mapcolor13": 6,
					"pop_est": 13276517,
					"gdp_md_est": 68580,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GT",
					"iso_a3": "GTM",
					"iso_n3": "320",
					"un_a3": "320",
					"wb_a2": "GT",
					"wb_a3": "GTM",
					"woe_id": -99,
					"adm0_a3_is": "GTM",
					"adm0_a3_us": "GTM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Central America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 5,
					"tiny": 4,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-59.758284878159195,
								8.367034816924047
							],
							[
								-59.10168412945866,
								7.999201971870492
							],
							[
								-58.48296220562806,
								7.347691351750697
							],
							[
								-58.45487606467742,
								6.832787380394464
							],
							[
								-58.078103196837375,
								6.809093736188643
							],
							[
								-57.542218593970645,
								6.321268215353356
							],
							[
								-57.14743648947689,
								5.973149929219161
							],
							[
								-57.307245856339506,
								5.073566595882227
							],
							[
								-57.91428890647214,
								4.812626451024414
							],
							[
								-57.8602095200787,
								4.57680105226045
							],
							[
								-58.04469438336068,
								4.0608635522583825
							],
							[
								-57.60156897645787,
								3.3346546492606848
							],
							[
								-57.28143347840971,
								3.3334919295341194
							],
							[
								-57.15009782573991,
								2.7689269067454063
							],
							[
								-56.539385748914555,
								1.8995226098669207
							],
							[
								-56.78270423036083,
								1.8637108422886541
							],
							[
								-57.335822923396904,
								1.9485377058957594
							],
							[
								-57.66097103537737,
								1.6825849471056387
							],
							[
								-58.11344987652502,
								1.5071951359070253
							],
							[
								-58.429477098205965,
								1.4639419620787208
							],
							[
								-58.540012986878295,
								1.2680882836925207
							],
							[
								-59.03086157900265,
								1.3176976586927225
							],
							[
								-59.64604366722126,
								1.786893825686789
							],
							[
								-59.71854570172675,
								2.2496304386443597
							],
							[
								-59.97452490908456,
								2.755232652188056
							],
							[
								-59.815413174057866,
								3.6064985213320853
							],
							[
								-59.53803992373123,
								3.9588025984819377
							],
							[
								-59.767405768458715,
								4.423502915866607
							],
							[
								-60.11100236676738,
								4.574966538914083
							],
							[
								-59.980958624904886,
								5.014061184098139
							],
							[
								-60.21368343773133,
								5.244486395687602
							],
							[
								-60.73357418480372,
								5.200277207861901
							],
							[
								-61.410302903881956,
								5.959068101419618
							],
							[
								-61.13941504580795,
								6.234296779806144
							],
							[
								-61.15933631045648,
								6.696077378766319
							],
							[
								-60.54399919294099,
								6.856584377464883
							],
							[
								-60.2956680975624,
								7.043911444522919
							],
							[
								-60.637972785063766,
								7.4149999048108555
							],
							[
								-60.5505879380582,
								7.779602972846178
							],
							[
								-59.758284878159195,
								8.367034816924047
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Guyana",
					"sov_a3": "GUY",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Guyana",
					"adm0_a3": "GUY",
					"geou_dif": 0,
					"geounit": "Guyana",
					"gu_a3": "GUY",
					"su_dif": 0,
					"subunit": "Guyana",
					"su_a3": "GUY",
					"brk_diff": 0,
					"name": "Guyana",
					"name_long": "Guyana",
					"brk_a3": "GUY",
					"brk_name": "Guyana",
					"brk_group": "",
					"abbrev": "Guy.",
					"postal": "GY",
					"formal_en": "Co-operative Republic of Guyana",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Guyana",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 1,
					"mapcolor9": 4,
					"mapcolor13": 8,
					"pop_est": 772298,
					"gdp_md_est": 2966,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "GY",
					"iso_a3": "GUY",
					"iso_n3": "328",
					"un_a3": "328",
					"wb_a2": "GY",
					"wb_a3": "GUY",
					"woe_id": -99,
					"adm0_a3_is": "GUY",
					"adm0_a3_us": "GUY",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-87.31665442579549,
								12.984685777229004
							],
							[
								-87.48940873894713,
								13.297534898323931
							],
							[
								-87.79311113152653,
								13.384480495655168
							],
							[
								-87.72350297722932,
								13.785050360565606
							],
							[
								-87.85951534702161,
								13.893312486217098
							],
							[
								-88.06534257684012,
								13.964625962779792
							],
							[
								-88.50399797234962,
								13.845485948130943
							],
							[
								-88.54123084181595,
								13.980154730683523
							],
							[
								-88.84307288283276,
								14.140506700085211
							],
							[
								-89.05851192905766,
								14.340029405164216
							],
							[
								-89.35332597528281,
								14.424132798719086
							],
							[
								-89.14553504103719,
								14.678019110569153
							],
							[
								-89.22522009963126,
								14.874286200413678
							],
							[
								-89.15481096063354,
								15.066419175674866
							],
							[
								-88.6806796943556,
								15.34624705653539
							],
							[
								-88.22502275262195,
								15.727722479714032
							],
							[
								-88.12115312371537,
								15.688655096901357
							],
							[
								-87.90181250685242,
								15.864458319558196
							],
							[
								-87.61568010125234,
								15.878798529519202
							],
							[
								-87.52292090528846,
								15.797278957578783
							],
							[
								-87.36776241733213,
								15.846940009011291
							],
							[
								-86.90319129102818,
								15.75671295822957
							],
							[
								-86.44094560417739,
								15.782835394753192
							],
							[
								-86.11923397494434,
								15.893448798073962
							],
							[
								-86.00195431185784,
								16.00540578863439
							],
							[
								-85.68331743034628,
								15.953651841693954
							],
							[
								-85.44400387240256,
								15.885749009662447
							],
							[
								-85.18244361035721,
								15.909158433490632
							],
							[
								-84.98372188997882,
								15.995923163308703
							],
							[
								-84.52697974316715,
								15.857223619037427
							],
							[
								-84.36825558138258,
								15.835157782448732
							],
							[
								-84.06305457226682,
								15.648244126849136
							],
							[
								-83.77397661002612,
								15.424071763566872
							],
							[
								-83.41038123242038,
								15.270902818253774
							],
							[
								-83.14721900097413,
								14.99582916916421
							],
							[
								-83.48998877636603,
								15.016267198135665
							],
							[
								-83.6285849677729,
								14.880073960830373
							],
							[
								-83.97572140169359,
								14.749435939996488
							],
							[
								-84.22834164095241,
								14.74876414637663
							],
							[
								-84.4493359036486,
								14.621614284722511
							],
							[
								-84.64958207877964,
								14.666805324761867
							],
							[
								-84.8200367906943,
								14.81958669683263
							],
							[
								-84.92450069857233,
								14.790492865452336
							],
							[
								-85.05278744173688,
								14.551541042534723
							],
							[
								-85.14875057650289,
								14.560196844943619
							],
							[
								-85.16536454948482,
								14.354369615125051
							],
							[
								-85.51441301140028,
								14.079011745657908
							],
							[
								-85.69866533073696,
								13.960078436738002
							],
							[
								-85.80129472526852,
								13.836054999237604
							],
							[
								-86.09626380079061,
								14.038187364147234
							],
							[
								-86.31214209668985,
								13.771356106008227
							],
							[
								-86.52070817741992,
								13.778487453664468
							],
							[
								-86.75508663607962,
								13.75484548589094
							],
							[
								-86.73382178419149,
								13.2630925562014
							],
							[
								-86.88055701368438,
								13.254204209847217
							],
							[
								-87.00576900912745,
								13.025794379117258
							],
							[
								-87.31665442579549,
								12.984685777229004
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Honduras",
					"sov_a3": "HND",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Honduras",
					"adm0_a3": "HND",
					"geou_dif": 0,
					"geounit": "Honduras",
					"gu_a3": "HND",
					"su_dif": 0,
					"subunit": "Honduras",
					"su_a3": "HND",
					"brk_diff": 0,
					"name": "Honduras",
					"name_long": "Honduras",
					"brk_a3": "HND",
					"brk_name": "Honduras",
					"brk_group": "",
					"abbrev": "Hond.",
					"postal": "HN",
					"formal_en": "Republic of Honduras",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Honduras",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 5,
					"mapcolor9": 2,
					"mapcolor13": 5,
					"pop_est": 7792854,
					"gdp_md_est": 33720,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "HN",
					"iso_a3": "HND",
					"iso_n3": "340",
					"un_a3": "340",
					"wb_a2": "HN",
					"wb_a3": "HND",
					"woe_id": -99,
					"adm0_a3_is": "HND",
					"adm0_a3_us": "HND",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Central America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								19.072768995854176,
								45.52151113543209
							],
							[
								19.39047570158459,
								45.236515611342384
							],
							[
								19.00548628101012,
								44.86023366960916
							],
							[
								18.553214145591653,
								45.08158966733146
							],
							[
								17.861783481526402,
								45.067740383477144
							],
							[
								17.002146030351014,
								45.23377676043094
							],
							[
								16.534939406000206,
								45.21160757097772
							],
							[
								16.318156772535872,
								45.00412669532591
							],
							[
								15.959367303133376,
								45.23377676043094
							],
							[
								15.750026075918981,
								44.818711656262565
							],
							[
								16.23966027188453,
								44.35114329688571
							],
							[
								16.456442905348865,
								44.04123973243128
							],
							[
								16.91615644701733,
								43.66772247982567
							],
							[
								17.297373488034452,
								43.44634064388737
							],
							[
								17.674921502358984,
								43.02856252702361
							],
							[
								18.559999999999945,
								42.64999999999998
							],
							[
								18.450016310304818,
								42.47999136002932
							],
							[
								17.509970330483327,
								42.849994615239154
							],
							[
								16.930005730871642,
								43.20999848080038
							],
							[
								16.015384555737683,
								43.50721548112722
							],
							[
								15.174453973052096,
								44.243191229827914
							],
							[
								15.376250441151797,
								44.31791535092208
							],
							[
								14.92030927904051,
								44.73848399512946
							],
							[
								14.901602410550879,
								45.07606028907611
							],
							[
								14.258747592839995,
								45.23377676043094
							],
							[
								13.952254672917036,
								44.80212352149687
							],
							[
								13.656975538801191,
								45.13693512631596
							],
							[
								13.67940311041582,
								45.48414907488501
							],
							[
								13.715059848697251,
								45.500323798192426
							],
							[
								14.4119682145855,
								45.46616567644742
							],
							[
								14.59510949062792,
								45.63494090431283
							],
							[
								14.935243767972963,
								45.471695054702764
							],
							[
								15.327674594797429,
								45.45231639259333
							],
							[
								15.323953891672431,
								45.731782538427694
							],
							[
								15.671529575267641,
								45.83415355079791
							],
							[
								15.768732944408612,
								46.23810822202353
							],
							[
								16.564808383864943,
								46.50375092221981
							],
							[
								16.882515089595415,
								46.38063182228444
							],
							[
								17.630066359129557,
								45.9517691106941
							],
							[
								18.45606245288286,
								45.75948110613615
							],
							[
								18.829838087650046,
								45.908877671891844
							],
							[
								19.072768995854176,
								45.52151113543209
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Croatia",
					"sov_a3": "HRV",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Croatia",
					"adm0_a3": "HRV",
					"geou_dif": 0,
					"geounit": "Croatia",
					"gu_a3": "HRV",
					"su_dif": 0,
					"subunit": "Croatia",
					"su_a3": "HRV",
					"brk_diff": 0,
					"name": "Croatia",
					"name_long": "Croatia",
					"brk_a3": "HRV",
					"brk_name": "Croatia",
					"brk_group": "",
					"abbrev": "Cro.",
					"postal": "HR",
					"formal_en": "Republic of Croatia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Croatia",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 4,
					"mapcolor9": 5,
					"mapcolor13": 1,
					"pop_est": 4489409,
					"gdp_md_est": 82390,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "HR",
					"iso_a3": "HRV",
					"iso_n3": "191",
					"un_a3": "191",
					"wb_a2": "HR",
					"wb_a3": "HRV",
					"woe_id": -99,
					"adm0_a3_is": "HRV",
					"adm0_a3_us": "HRV",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-71.71236141629296,
								19.714455878167357
							],
							[
								-71.62487321642283,
								19.169837958243306
							],
							[
								-71.7013026597825,
								18.785416978424053
							],
							[
								-71.94511206733556,
								18.61690013272026
							],
							[
								-71.68773759630588,
								18.31666006110447
							],
							[
								-71.70830481635805,
								18.044997056546094
							],
							[
								-72.37247616238935,
								18.21496084235406
							],
							[
								-72.84441118029488,
								18.145611070218365
							],
							[
								-73.45455481636503,
								18.2179063989947
							],
							[
								-73.92243323433566,
								18.030992743395004
							],
							[
								-74.45803361682478,
								18.342549953682706
							],
							[
								-74.36992529976713,
								18.66490753831941
							],
							[
								-73.44954220243272,
								18.526052964751145
							],
							[
								-72.69493709989064,
								18.445799465401862
							],
							[
								-72.334881557897,
								18.668421535715254
							],
							[
								-72.79164954292489,
								19.10162506761803
							],
							[
								-72.78410478381028,
								19.48359141690341
							],
							[
								-73.41502234566175,
								19.639550889560283
							],
							[
								-73.18979061551762,
								19.915683905511912
							],
							[
								-72.57967281766362,
								19.871500555902358
							],
							[
								-71.71236141629296,
								19.714455878167357
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Haiti",
					"sov_a3": "HTI",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Haiti",
					"adm0_a3": "HTI",
					"geou_dif": 0,
					"geounit": "Haiti",
					"gu_a3": "HTI",
					"su_dif": 0,
					"subunit": "Haiti",
					"su_a3": "HTI",
					"brk_diff": 0,
					"name": "Haiti",
					"name_long": "Haiti",
					"brk_a3": "HTI",
					"brk_name": "Haiti",
					"brk_group": "",
					"abbrev": "Haiti",
					"postal": "HT",
					"formal_en": "Republic of Haiti",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Haiti",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 1,
					"mapcolor9": 7,
					"mapcolor13": 2,
					"pop_est": 9035536,
					"gdp_md_est": 11500,
					"pop_year": -99,
					"lastcensus": 2003,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "HT",
					"iso_a3": "HTI",
					"iso_n3": "332",
					"un_a3": "332",
					"wb_a2": "HT",
					"wb_a3": "HTI",
					"woe_id": -99,
					"adm0_a3_is": "HTI",
					"adm0_a3_us": "HTI",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Caribbean",
					"region_wb": "Latin America & Caribbean",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								16.202298211337364,
								46.85238597267696
							],
							[
								16.534267612380376,
								47.49617096616912
							],
							[
								16.340584344150415,
								47.71290192320123
							],
							[
								16.90375410326726,
								47.71486562762833
							],
							[
								16.979666782304037,
								48.123497015976305
							],
							[
								17.48847293464982,
								47.867466132186216
							],
							[
								17.857132602620027,
								47.75842886005037
							],
							[
								18.696512892336926,
								47.880953681014404
							],
							[
								18.77702477384767,
								48.081768296900634
							],
							[
								19.17436486173989,
								48.11137889260387
							],
							[
								19.661363559658497,
								48.26661489520866
							],
							[
								19.769470656013112,
								48.202691148463614
							],
							[
								20.239054396249347,
								48.32756724709692
							],
							[
								20.473562045989866,
								48.562850043321816
							],
							[
								20.801293979584926,
								48.623854071642384
							],
							[
								21.872236362401736,
								48.31997081155002
							],
							[
								22.085608351334855,
								48.42226430927179
							],
							[
								22.640819939878753,
								48.15023956968736
							],
							[
								22.710531447040495,
								47.88219391538941
							],
							[
								22.099767693782837,
								47.6724392767167
							],
							[
								21.626514926853872,
								46.99423777931816
							],
							[
								21.02195234547125,
								46.3160879583519
							],
							[
								20.220192498462836,
								46.127468980486555
							],
							[
								19.596044549241583,
								46.17172984474454
							],
							[
								18.82983808764996,
								45.90887767189193
							],
							[
								18.45606245288286,
								45.759481106136136
							],
							[
								17.630066359129557,
								45.95176911069419
							],
							[
								16.8825150895953,
								46.38063182228444
							],
							[
								16.564808383864857,
								46.50375092221983
							],
							[
								16.370504998447416,
								46.841327216166505
							],
							[
								16.202298211337364,
								46.85238597267696
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Hungary",
					"sov_a3": "HUN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Hungary",
					"adm0_a3": "HUN",
					"geou_dif": 0,
					"geounit": "Hungary",
					"gu_a3": "HUN",
					"su_dif": 0,
					"subunit": "Hungary",
					"su_a3": "HUN",
					"brk_diff": 0,
					"name": "Hungary",
					"name_long": "Hungary",
					"brk_a3": "HUN",
					"brk_name": "Hungary",
					"brk_group": "",
					"abbrev": "Hun.",
					"postal": "HU",
					"formal_en": "Republic of Hungary",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Hungary",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 6,
					"mapcolor9": 1,
					"mapcolor13": 5,
					"pop_est": 9905596,
					"gdp_md_est": 196600,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "HU",
					"iso_a3": "HUN",
					"iso_n3": "348",
					"un_a3": "348",
					"wb_a2": "HU",
					"wb_a3": "HUN",
					"woe_id": -99,
					"adm0_a3_is": "HUN",
					"adm0_a3_us": "HUN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									120.71560875863045,
									-10.239581394087864
								],
								[
									120.2950142762069,
									-10.258649997603527
								],
								[
									118.96780846565471,
									-9.557969252158031
								],
								[
									119.90030968636162,
									-9.361340427287516
								],
								[
									120.42575564990543,
									-9.665921319215798
								],
								[
									120.77550174365675,
									-9.969675388227458
								],
								[
									120.71560875863045,
									-10.239581394087864
								]
							]
						],
						[
							[
								[
									124.43595014861941,
									-10.140000909061442
								],
								[
									123.57998172413673,
									-10.359987481327963
								],
								[
									123.45998904835503,
									-10.239994805546175
								],
								[
									123.55000939340746,
									-9.90001555749798
								],
								[
									123.98000898650812,
									-9.290026950724695
								],
								[
									124.96868248911622,
									-8.892790215697048
								],
								[
									125.07001997284064,
									-9.089987481322837
								],
								[
									125.0885201356011,
									-9.393173109579322
								],
								[
									124.43595014861941,
									-10.140000909061442
								]
							]
						],
						[
							[
								[
									117.90001834520777,
									-8.095681247594925
								],
								[
									118.2606164897405,
									-8.362383314653329
								],
								[
									118.87845991422213,
									-8.28068287519983
								],
								[
									119.1265067892231,
									-8.705824883665073
								],
								[
									117.97040164598931,
									-8.906639499551261
								],
								[
									117.27773074754904,
									-9.040894870645559
								],
								[
									116.74014082241663,
									-9.03293670007264
								],
								[
									117.08373742072533,
									-8.457157891476541
								],
								[
									117.63202436734215,
									-8.449303073768192
								],
								[
									117.90001834520777,
									-8.095681247594925
								]
							]
						],
						[
							[
								[
									122.90353722543611,
									-8.094234307490737
								],
								[
									122.75698286345633,
									-8.64980763106064
								],
								[
									121.25449059457011,
									-8.933666273639943
								],
								[
									119.92439090380961,
									-8.810417982623875
								],
								[
									119.92092858284613,
									-8.444858900591072
								],
								[
									120.71509199430758,
									-8.236964613480865
								],
								[
									121.34166873584658,
									-8.536739597206022
								],
								[
									122.00736453663043,
									-8.460620212440162
								],
								[
									122.90353722543611,
									-8.094234307490737
								]
							]
						],
						[
							[
								[
									108.62347863162896,
									-6.777673841990676
								],
								[
									110.53922732955331,
									-6.877357679881683
								],
								[
									110.75957563684594,
									-6.465186455921753
								],
								[
									112.61481123255638,
									-6.946035658397591
								],
								[
									112.97876834518812,
									-7.59421314863458
								],
								[
									114.47893517462117,
									-7.776527601760279
								],
								[
									115.70552697150109,
									-8.370806573116866
								],
								[
									114.56451134649652,
									-8.751816908404834
								],
								[
									113.4647335144609,
									-8.348947442257426
								],
								[
									112.55967247930104,
									-8.376180922075164
								],
								[
									111.52206139531248,
									-8.302128594600958
								],
								[
									110.58614953007432,
									-8.122604668819022
								],
								[
									109.4276672709552,
									-7.740664157749762
								],
								[
									108.69365522668133,
									-7.641600437046222
								],
								[
									108.27776329959633,
									-7.766657403192582
								],
								[
									106.45410200401616,
									-7.354899590690948
								],
								[
									106.28062422081231,
									-6.924899997590202
								],
								[
									105.36548628135554,
									-6.85141611087117
								],
								[
									106.05164594932708,
									-5.8959188777945
								],
								[
									107.2650085795402,
									-5.954985039904059
								],
								[
									108.0720910990747,
									-6.345762220895239
								],
								[
									108.48684614464926,
									-6.421984958525769
								],
								[
									108.62347863162896,
									-6.777673841990676
								]
							]
						],
						[
							[
								[
									134.72462446506668,
									-6.214400730009288
								],
								[
									134.21013390516893,
									-6.895237725454706
								],
								[
									134.11277550673103,
									-6.142467136259015
								],
								[
									134.2903357280858,
									-5.783057549669039
								],
								[
									134.4996252788679,
									-5.445042006047899
								],
								[
									134.72700158095213,
									-5.73758228925216
								],
								[
									134.72462446506668,
									-6.214400730009288
								]
							]
						],
						[
							[
								[
									127.24921512258894,
									-3.45906503663889
								],
								[
									126.87492272349888,
									-3.7909827612495803
								],
								[
									126.18380211802733,
									-3.607376397316557
								],
								[
									125.98903364471929,
									-3.1772734513513257
								],
								[
									127.00065148326499,
									-3.1293177221844104
								],
								[
									127.24921512258894,
									-3.45906503663889
								]
							]
						],
						[
							[
								[
									130.4713440288518,
									-3.09376433676762
								],
								[
									130.8348360535928,
									-3.858472181822762
								],
								[
									129.99054650280814,
									-3.4463009578628174
								],
								[
									129.15524865124243,
									-3.362636813982249
								],
								[
									128.59068362845366,
									-3.428679294451257
								],
								[
									127.89889122936236,
									-3.393435967628193
								],
								[
									128.1358793478528,
									-2.8436504044749142
								],
								[
									129.37099775606092,
									-2.802154229344552
								],
								[
									130.4713440288518,
									-3.09376433676762
								]
							]
						],
						[
							[
								[
									141.00021040259188,
									-2.6001510555156244
								],
								[
									141.01705691951904,
									-5.859021905138022
								],
								[
									141.0338517600139,
									-9.117892754760419
								],
								[
									140.14341515519257,
									-8.297167657100957
								],
								[
									139.12776655492812,
									-8.096042982620943
								],
								[
									138.88147667862498,
									-8.380935153846096
								],
								[
									137.61447391169284,
									-8.411682631059762
								],
								[
									138.0390991558352,
									-7.597882175327356
								],
								[
									138.6686214540148,
									-7.320224704623072
								],
								[
									138.40791385310237,
									-6.232849216337485
								],
								[
									137.92783979711086,
									-5.393365573756
								],
								[
									135.98925011611348,
									-4.546543877789048
								],
								[
									135.16459760959972,
									-4.462931410340772
								],
								[
									133.6628804871979,
									-3.5388534480975267
								],
								[
									133.3677047059468,
									-4.024818617370315
								],
								[
									132.98395551974735,
									-4.1129786108602815
								],
								[
									132.756940952689,
									-3.7462826473171305
								],
								[
									132.75378869031923,
									-3.3117872046070715
								],
								[
									131.9898043153162,
									-2.8205510392404562
								],
								[
									133.0668445171435,
									-2.460417982598443
								],
								[
									133.78003095920351,
									-2.47984832114021
								],
								[
									133.69621178602617,
									-2.2145415177536876
								],
								[
									132.23237348849423,
									-2.2125261368943256
								],
								[
									131.8362219585447,
									-1.6171619604595975
								],
								[
									130.94283979708283,
									-1.4325220678807966
								],
								[
									130.51955814018007,
									-0.9377202286860751
								],
								[
									131.86753787651364,
									-0.6954611141018177
								],
								[
									132.3801164084168,
									-0.3695378556369775
								],
								[
									133.98554813042844,
									-0.7802104630604418
								],
								[
									134.1433679546478,
									-1.1518673641035946
								],
								[
									134.42262739475305,
									-2.769184665542383
								],
								[
									135.4576029806947,
									-3.3677527807791137
								],
								[
									136.2933142437188,
									-2.30704233155609
								],
								[
									137.44073774632753,
									-1.703513278819372
								],
								[
									138.3297274110448,
									-1.7026864559026507
								],
								[
									139.18492068904297,
									-2.051295668143638
								],
								[
									139.92668419816042,
									-2.4090516089002847
								],
								[
									141.00021040259188,
									-2.6001510555156244
								]
							]
						],
						[
							[
								[
									125.24050052297159,
									1.4198361271176054
								],
								[
									124.43703535369738,
									0.4278811710589707
								],
								[
									123.68550499887672,
									0.2355931665008768
								],
								[
									122.7230831238729,
									0.4311367862933366
								],
								[
									121.05672488818911,
									0.38121735269945134
								],
								[
									120.18308312386276,
									0.23724681233422018
								],
								[
									120.04086958219548,
									-0.5196578914448509
								],
								[
									120.93590538949073,
									-1.4089059383233717
								],
								[
									121.47582075407618,
									-0.9559620092851162
								],
								[
									123.34056481332848,
									-0.6156727026430815
								],
								[
									123.2583992859845,
									-1.0762130672283376
								],
								[
									122.82271528533161,
									-0.9309506160558811
								],
								[
									122.38852990121538,
									-1.516858005381124
								],
								[
									121.50827355355548,
									-1.9044829240024228
								],
								[
									122.4545723816843,
									-3.1860584448408815
								],
								[
									122.27189619353257,
									-3.5295000138526973
								],
								[
									123.17096276254657,
									-4.683693129091708
								],
								[
									123.16233279835379,
									-5.3406039363859605
								],
								[
									122.62851525277873,
									-5.634591159694494
								],
								[
									122.23639448454807,
									-5.282933037948283
								],
								[
									122.71956912647707,
									-4.46417164471579
								],
								[
									121.73823367725439,
									-4.8513314754465
								],
								[
									121.48946333220127,
									-4.574552504091216
								],
								[
									121.61917117725389,
									-4.188477878438675
								],
								[
									120.89818159391771,
									-3.602105401222829
								],
								[
									120.97238895068878,
									-2.62764291749491
								],
								[
									120.30545291552991,
									-2.9316036922357256
								],
								[
									120.39004723519176,
									-4.097579034037224
								],
								[
									120.43071658740539,
									-5.528241062037779
								],
								[
									119.79654341031952,
									-5.6734001603456505
								],
								[
									119.36690555224496,
									-5.379878024927805
								],
								[
									119.65360639860015,
									-4.459417412944958
								],
								[
									119.49883548388598,
									-3.4944117163265105
								],
								[
									119.07834435432702,
									-3.487021986508765
								],
								[
									118.7677689962529,
									-2.801999200047689
								],
								[
									119.18097374885869,
									-2.1471037736127982
								],
								[
									119.32339399625508,
									-1.353147067880471
								],
								[
									119.82599897672586,
									0.1542544620734958
								],
								[
									120.03570193896635,
									0.5664773624658039
								],
								[
									120.8857792501677,
									1.309222723796836
								],
								[
									121.666816847827,
									1.0139435896810767
								],
								[
									122.92756676645186,
									0.8751923689774657
								],
								[
									124.07752241424285,
									0.9171019555661388
								],
								[
									125.06598921112183,
									1.6432591821315583
								],
								[
									125.24050052297159,
									1.4198361271176054
								]
							]
						],
						[
							[
								[
									128.68824873262074,
									1.1323859724941059
								],
								[
									128.63595218314137,
									0.2584858260061793
								],
								[
									128.1201697124362,
									0.3564126651992865
								],
								[
									127.96803429576889,
									-0.2520773250375328
								],
								[
									128.37999881399972,
									-0.7800037573312864
								],
								[
									128.10001590384232,
									-0.8999964331129746
								],
								[
									127.69647464407504,
									-0.26659840251150513
								],
								[
									127.39949018769377,
									1.0117215030925735
								],
								[
									127.60051150930909,
									1.8106908227571807
								],
								[
									127.93237755748751,
									2.174596258956555
								],
								[
									128.00415612194084,
									1.628531398928331
								],
								[
									128.59455936087548,
									1.540810655112864
								],
								[
									128.68824873262074,
									1.1323859724941059
								]
							]
						],
						[
							[
								[
									109.66326012577375,
									2.006466986494985
								],
								[
									109.83022667850886,
									1.3381356876641917
								],
								[
									110.51406090702713,
									0.7731314152009929
								],
								[
									111.15913781132659,
									0.9764781762695094
								],
								[
									111.79754845586044,
									0.9044412296546511
								],
								[
									112.38025190638368,
									1.4101209578467575
								],
								[
									112.8598091980522,
									1.4977900252299463
								],
								[
									113.80584964401956,
									1.217548732911041
								],
								[
									114.6213554220175,
									1.4306881778988867
								],
								[
									115.13403730678525,
									2.8214818383862195
								],
								[
									115.51907840379201,
									3.169238389494396
								],
								[
									115.86551720587678,
									4.306559149590157
								],
								[
									117.01521447150637,
									4.3060940616994685
								],
								[
									117.88203494677018,
									4.137551377779488
								],
								[
									117.31323245653354,
									3.234428208830579
								],
								[
									118.04832970588538,
									2.287690131027361
								],
								[
									117.87562706916603,
									1.8276406925489113
								],
								[
									118.99674726773819,
									0.9022191430660484
								],
								[
									117.8118583517178,
									0.7842418481437221
								],
								[
									117.47833865770608,
									0.10247467691702639
								],
								[
									117.52164350796662,
									-0.8037232397532108
								],
								[
									116.56004845587952,
									-1.487660821136231
								],
								[
									116.5337968282752,
									-2.483517347832901
								],
								[
									116.14808393764864,
									-4.012726332214015
								],
								[
									116.00085778204911,
									-3.6570374487490085
								],
								[
									114.86480309454456,
									-4.106984144714417
								],
								[
									114.46865156459509,
									-3.495703627133821
								],
								[
									113.75567182826413,
									-3.4391696102065197
								],
								[
									113.25699425664757,
									-3.1187757299968553
								],
								[
									112.06812625534067,
									-3.478392022316072
								],
								[
									111.70329064336002,
									-2.9944422339026318
								],
								[
									111.04824018762824,
									-3.049425957861189
								],
								[
									110.223846063276,
									-2.9340324845534838
								],
								[
									110.07093550012436,
									-1.5928740372824137
								],
								[
									109.57194786991406,
									-1.3149065079844888
								],
								[
									109.09187381392255,
									-0.4595065242570513
								],
								[
									108.95265750532818,
									0.4153754744443461
								],
								[
									109.06913618371405,
									1.3419339054376422
								],
								[
									109.66326012577375,
									2.006466986494985
								]
							]
						],
						[
							[
								[
									105.81765506390937,
									-5.852355645372413
								],
								[
									104.71038414919153,
									-5.873284600450646
								],
								[
									103.86821333213075,
									-5.037314955264975
								],
								[
									102.58426069540693,
									-4.220258884298204
								],
								[
									102.15617313030103,
									-3.614146009946765
								],
								[
									101.39911339722508,
									-2.7997771134591716
								],
								[
									100.90250288290017,
									-2.0502621394978604
								],
								[
									100.14198082886062,
									-0.6503475887109573
								],
								[
									99.26373986206025,
									0.1831415877246627
								],
								[
									98.97001102091335,
									1.042882391764536
								],
								[
									98.60135135294311,
									1.8235065779656168
								],
								[
									97.69959760944991,
									2.453183905442117
								],
								[
									97.1769421732499,
									3.3087905948986105
								],
								[
									96.42401655475734,
									3.868859768077911
								],
								[
									95.38087609251349,
									4.970782172053674
								],
								[
									95.29302615761733,
									5.479820868344817
								],
								[
									95.93686282754177,
									5.439513251157109
								],
								[
									97.4848820332771,
									5.2463209090340115
								],
								[
									98.36916914265569,
									4.268370266126368
								],
								[
									99.14255862833582,
									3.5903496362409157
								],
								[
									99.69399783732243,
									3.174328518075157
								],
								[
									100.64143354696168,
									2.099381211755798
								],
								[
									101.65801232300734,
									2.083697414555189
								],
								[
									102.49827111207324,
									1.398700466310217
								],
								[
									103.07684044801303,
									0.5613613956688539
								],
								[
									103.83839603069836,
									0.10454173420866653
								],
								[
									103.43764529827499,
									-0.7119458960028453
								],
								[
									104.01078860882402,
									-1.0592115210042294
								],
								[
									104.3699914896849,
									-1.0848430314210162
								],
								[
									104.53949018760218,
									-1.7823715144967167
								],
								[
									104.88789269411402,
									-2.3404253068166554
								],
								[
									105.622111444117,
									-2.42884368246807
								],
								[
									106.10859337771271,
									-3.0617766251789504
								],
								[
									105.85744591677414,
									-4.305524997579724
								],
								[
									105.81765506390937,
									-5.852355645372413
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Indonesia",
					"sov_a3": "IDN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Indonesia",
					"adm0_a3": "IDN",
					"geou_dif": 0,
					"geounit": "Indonesia",
					"gu_a3": "IDN",
					"su_dif": 0,
					"subunit": "Indonesia",
					"su_a3": "IDN",
					"brk_diff": 0,
					"name": "Indonesia",
					"name_long": "Indonesia",
					"brk_a3": "IDN",
					"brk_name": "Indonesia",
					"brk_group": "",
					"abbrev": "Indo.",
					"postal": "INDO",
					"formal_en": "Republic of Indonesia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Indonesia",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 6,
					"mapcolor9": 6,
					"mapcolor13": 11,
					"pop_est": 240271522,
					"gdp_md_est": 914600,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "4. Emerging region: MIKT",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "ID",
					"iso_a3": "IDN",
					"iso_n3": "360",
					"un_a3": "360",
					"wb_a2": "ID",
					"wb_a3": "IDN",
					"woe_id": -99,
					"adm0_a3_is": "IDN",
					"adm0_a3_us": "IDN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								77.83745079947457,
								35.494009507787766
							],
							[
								78.91226891471322,
								34.32193634697579
							],
							[
								78.81108646028574,
								33.50619802503242
							],
							[
								79.20889163606859,
								32.994394639613716
							],
							[
								79.17612877799553,
								32.48377981213771
							],
							[
								78.45844648632601,
								32.61816437431273
							],
							[
								78.73889448437401,
								31.515906073527063
							],
							[
								79.7213668151071,
								30.88271474865473
							],
							[
								81.11125613802932,
								30.183480943313402
							],
							[
								80.4767212259174,
								29.72986522065534
							],
							[
								80.08842451367627,
								28.79447011974014
							],
							[
								81.05720258985203,
								28.416095282499043
							],
							[
								81.99998742058497,
								27.925479234319994
							],
							[
								83.30424889519955,
								27.36450572357556
							],
							[
								84.6750179381738,
								27.234901231387536
							],
							[
								85.25177859898338,
								26.726198431906344
							],
							[
								86.02439293817918,
								26.63098460540857
							],
							[
								87.2274719583663,
								26.397898057556077
							],
							[
								88.06023766474982,
								26.41461538340249
							],
							[
								88.17480431514092,
								26.81040517832595
							],
							[
								88.04313276566123,
								27.445818589786825
							],
							[
								88.12044070836987,
								27.876541652939594
							],
							[
								88.73032596227856,
								28.086864732367516
							],
							[
								88.81424848832056,
								27.299315904239364
							],
							[
								88.83564253128938,
								27.098966376243762
							],
							[
								89.74452762243885,
								26.719402981059957
							],
							[
								90.37327477413407,
								26.87572418874288
							],
							[
								91.21751264848643,
								26.808648179628022
							],
							[
								92.03348351437509,
								26.83831045176356
							],
							[
								92.10371178585974,
								27.452614040633208
							],
							[
								91.69665652869668,
								27.771741848251665
							],
							[
								92.50311893104364,
								27.89687632904645
							],
							[
								93.41334760943269,
								28.640629380807226
							],
							[
								94.56599043170294,
								29.277438055939985
							],
							[
								95.40480228066464,
								29.03171662039213
							],
							[
								96.11767866413103,
								29.452802028922466
							],
							[
								96.58659061074749,
								28.83097951915434
							],
							[
								96.24883344928779,
								28.411030992134442
							],
							[
								97.32711388549004,
								28.26158274994634
							],
							[
								97.40256147663614,
								27.882536119085444
							],
							[
								97.0519885599681,
								27.69905894623315
							],
							[
								97.1339990580153,
								27.083773505149964
							],
							[
								96.41936567585097,
								27.264589341739224
							],
							[
								95.12476769407496,
								26.5735720891323
							],
							[
								95.1551534362626,
								26.001307277932085
							],
							[
								94.60324913938538,
								25.162495428970402
							],
							[
								94.55265791217164,
								24.675238348890336
							],
							[
								94.10674197792507,
								23.85074087167348
							],
							[
								93.3251876159428,
								24.078556423432204
							],
							[
								93.28632693885928,
								23.043658352139005
							],
							[
								93.06029422401463,
								22.70311066333557
							],
							[
								93.16612755734837,
								22.278459580977103
							],
							[
								92.67272098182556,
								22.041238918541254
							],
							[
								92.14603478390681,
								23.627498684172593
							],
							[
								91.86992760617132,
								23.624346421802784
							],
							[
								91.70647505083211,
								22.985263983649187
							],
							[
								91.15896325069973,
								23.50352692310439
							],
							[
								91.46772993364368,
								24.072639471934792
							],
							[
								91.91509280799443,
								24.130413723237112
							],
							[
								92.37620161333481,
								24.976692816664965
							],
							[
								91.79959598182208,
								25.147431748957317
							],
							[
								90.87221072791212,
								25.132600612889547
							],
							[
								89.92069258012185,
								25.26974986419218
							],
							[
								89.83248091019962,
								25.96508209889548
							],
							[
								89.35509402868729,
								26.014407253518073
							],
							[
								88.56304935094977,
								26.446525580342723
							],
							[
								88.2097892598025,
								25.768065700782714
							],
							[
								88.93155398962308,
								25.238692328384776
							],
							[
								88.30637251175602,
								24.866079413344206
							],
							[
								88.08442223506242,
								24.501657212821925
							],
							[
								88.69994022009092,
								24.23371491138856
							],
							[
								88.52976972855379,
								23.631141872649167
							],
							[
								88.87631188350309,
								22.87914642993783
							],
							[
								89.03196129756623,
								22.055708319582976
							],
							[
								88.88876590368542,
								21.690588487224748
							],
							[
								88.20849734899522,
								21.703171698487807
							],
							[
								86.97570438024027,
								21.49556163175521
							],
							[
								87.03316857294887,
								20.743307806882413
							],
							[
								86.49935102737379,
								20.151638495356607
							],
							[
								85.0602657409097,
								19.4785788029711
							],
							[
								83.94100589390001,
								18.302009792549725
							],
							[
								83.18921715691785,
								17.67122142177898
							],
							[
								82.19279218946592,
								17.016636053937816
							],
							[
								82.19124189649719,
								16.556664130107848
							],
							[
								81.69271935417748,
								16.310219224507904
							],
							[
								80.79199913933014,
								15.951972357644493
							],
							[
								80.32489586784388,
								15.89918488205835
							],
							[
								80.02506920768644,
								15.136414903214147
							],
							[
								80.2332735533904,
								13.835770778859981
							],
							[
								80.28629357292186,
								13.006260687710835
							],
							[
								79.8625468281285,
								12.056215318240888
							],
							[
								79.85799930208682,
								10.35727509199711
							],
							[
								79.340511509116,
								10.30885427493962
							],
							[
								78.88534549348918,
								9.546135972527722
							],
							[
								79.1897196796883,
								9.216543687370148
							],
							[
								78.2779407083305,
								8.933046779816934
							],
							[
								77.94116539908435,
								8.252959092639742
							],
							[
								77.53989790233794,
								7.965534776232332
							],
							[
								76.59297895702167,
								8.89927623131419
							],
							[
								76.13006147655108,
								10.299630031775521
							],
							[
								75.7464673196485,
								11.308250637248307
							],
							[
								75.39610110870959,
								11.781245022015824
							],
							[
								74.86481570831683,
								12.741935736537897
							],
							[
								74.61671715688354,
								13.99258291264968
							],
							[
								74.44385949086723,
								14.617221787977698
							],
							[
								73.5341992532334,
								15.99065216721496
							],
							[
								73.11990929554943,
								17.928570054592498
							],
							[
								72.82090945830865,
								19.208233547436166
							],
							[
								72.8244751321368,
								20.419503282141534
							],
							[
								72.6305334817454,
								21.356009426351008
							],
							[
								71.17527347197395,
								20.757441311114235
							],
							[
								70.4704586119451,
								20.877330634031384
							],
							[
								69.16413008003883,
								22.0892980005727
							],
							[
								69.6449276060824,
								22.450774644454338
							],
							[
								69.34959679553435,
								22.84317963306269
							],
							[
								68.1766451353734,
								23.69196503345671
							],
							[
								68.84259931831878,
								24.35913361256094
							],
							[
								71.04324018746823,
								24.3565239527302
							],
							[
								70.84469933460284,
								25.21510203704352
							],
							[
								70.2828731627256,
								25.72222870533983
							],
							[
								70.16892662952202,
								26.491871649678842
							],
							[
								69.51439293811313,
								26.940965684511372
							],
							[
								70.61649620960193,
								27.989196275335868
							],
							[
								71.77766564320032,
								27.913180243434525
							],
							[
								72.8237516620847,
								28.961591701772054
							],
							[
								73.45063846221743,
								29.97641347911987
							],
							[
								74.42138024282028,
								30.979814764931177
							],
							[
								74.40592898956501,
								31.69263947196528
							],
							[
								75.25864179881322,
								32.2711054550405
							],
							[
								74.45155927927871,
								32.7648996038055
							],
							[
								74.10429365427734,
								33.44147329358685
							],
							[
								73.74994835805197,
								34.31769887952785
							],
							[
								74.24020267120497,
								34.748887030571254
							],
							[
								75.75706098826834,
								34.50492259372132
							],
							[
								76.87172163280403,
								34.65354401299274
							],
							[
								77.83745079947457,
								35.494009507787766
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "India",
					"sov_a3": "IND",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "India",
					"adm0_a3": "IND",
					"geou_dif": 0,
					"geounit": "India",
					"gu_a3": "IND",
					"su_dif": 0,
					"subunit": "India",
					"su_a3": "IND",
					"brk_diff": 0,
					"name": "India",
					"name_long": "India",
					"brk_a3": "IND",
					"brk_name": "India",
					"brk_group": "",
					"abbrev": "India",
					"postal": "IND",
					"formal_en": "Republic of India",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "India",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 3,
					"mapcolor9": 2,
					"mapcolor13": 2,
					"pop_est": 1166079220,
					"gdp_md_est": 3297000,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "3. Emerging region: BRIC",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "IN",
					"iso_a3": "IND",
					"iso_n3": "356",
					"un_a3": "356",
					"wb_a2": "IN",
					"wb_a3": "IND",
					"woe_id": -99,
					"adm0_a3_is": "IND",
					"adm0_a3_us": "IND",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Southern Asia",
					"region_wb": "South Asia",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-6.197884894220991,
								53.867565009163364
							],
							[
								-6.032985398777611,
								53.15316417094435
							],
							[
								-6.788856573910849,
								52.260117906292336
							],
							[
								-8.56161658368356,
								51.669301255899356
							],
							[
								-9.977085740590269,
								51.82045482035308
							],
							[
								-9.166282517930782,
								52.86462881124268
							],
							[
								-9.688524542672454,
								53.8813626165853
							],
							[
								-8.327987433292009,
								54.66451894796863
							],
							[
								-7.572167934591064,
								55.13162221945487
							],
							[
								-7.3660306461787854,
								54.59584096945272
							],
							[
								-7.572167934591064,
								54.059956366586
							],
							[
								-6.953730231138067,
								54.073702297575636
							],
							[
								-6.197884894220991,
								53.867565009163364
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Ireland",
					"sov_a3": "IRL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Ireland",
					"adm0_a3": "IRL",
					"geou_dif": 0,
					"geounit": "Ireland",
					"gu_a3": "IRL",
					"su_dif": 0,
					"subunit": "Ireland",
					"su_a3": "IRL",
					"brk_diff": 0,
					"name": "Ireland",
					"name_long": "Ireland",
					"brk_a3": "IRL",
					"brk_name": "Ireland",
					"brk_group": "",
					"abbrev": "Ire.",
					"postal": "IRL",
					"formal_en": "Ireland",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Ireland",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 3,
					"mapcolor9": 2,
					"mapcolor13": 2,
					"pop_est": 4203200,
					"gdp_md_est": 188400,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "IE",
					"iso_a3": "IRL",
					"iso_n3": "372",
					"un_a3": "372",
					"wb_a2": "IE",
					"wb_a3": "IRL",
					"woe_id": -99,
					"adm0_a3_is": "IRL",
					"adm0_a3_us": "IRL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								53.92159793479556,
								37.19891836196126
							],
							[
								54.800303989486565,
								37.392420762678185
							],
							[
								55.51157840355191,
								37.96411713312317
							],
							[
								56.18037479027333,
								37.93512665460743
							],
							[
								56.61936608259282,
								38.121394354803485
							],
							[
								57.330433790928986,
								38.02922943781094
							],
							[
								58.436154412678206,
								37.5223094752438
							],
							[
								59.23476199731681,
								37.41298798273034
							],
							[
								60.37763797388388,
								36.52738312432837
							],
							[
								61.123070509694145,
								36.491597194966246
							],
							[
								61.210817091725744,
								35.650072333309225
							],
							[
								60.80319339380745,
								34.40410187431986
							],
							[
								60.52842980331158,
								33.676446031218006
							],
							[
								60.963700392506006,
								33.52883230237626
							],
							[
								60.536077915290775,
								32.98126882581157
							],
							[
								60.863654819588966,
								32.18291962333443
							],
							[
								60.94194461451113,
								31.548074652628753
							],
							[
								61.69931440618083,
								31.379506130492672
							],
							[
								61.781221551363444,
								30.735850328081238
							],
							[
								60.87424848820879,
								29.829238999952608
							],
							[
								61.36930870956494,
								29.303276272085924
							],
							[
								61.77186811711863,
								28.6993338078908
							],
							[
								62.72783043808599,
								28.25964488373539
							],
							[
								62.75542565292986,
								27.378923448184988
							],
							[
								63.2338977395203,
								27.21704702403071
							],
							[
								63.31663170761959,
								26.756532497661667
							],
							[
								61.87418745305655,
								26.239974880472104
							],
							[
								61.49736290878419,
								25.0782370061185
							],
							[
								59.616134067630846,
								25.380156561783778
							],
							[
								58.525761346272304,
								25.60996165618573
							],
							[
								57.39725141788239,
								25.73990204518364
							],
							[
								56.970765822177555,
								26.966106268821363
							],
							[
								56.492138706290206,
								27.143304755150197
							],
							[
								55.723710158110066,
								26.964633490501043
							],
							[
								54.71508955263727,
								26.480657863871514
							],
							[
								53.49309695823135,
								26.81236888275305
							],
							[
								52.48359785340961,
								27.580849107365495
							],
							[
								51.52076256694742,
								27.865689602158298
							],
							[
								50.85294803243954,
								28.814520575469388
							],
							[
								50.115008579311585,
								30.147772528599717
							],
							[
								49.576850213423995,
								29.985715236932407
							],
							[
								48.94133344909855,
								30.317090359004037
							],
							[
								48.567971225789755,
								29.926778265903522
							],
							[
								48.0145683123761,
								30.452456773392598
							],
							[
								48.004698113808324,
								30.985137437457244
							],
							[
								47.68528608581227,
								30.984853217079632
							],
							[
								47.8492037290421,
								31.70917593029867
							],
							[
								47.33466149271191,
								32.46915538179911
							],
							[
								46.10936160663932,
								33.017287299119005
							],
							[
								45.41669070819904,
								33.967797756479584
							],
							[
								45.64845950702809,
								34.748137722303014
							],
							[
								46.15178795755094,
								35.09325877536429
							],
							[
								46.0763403664048,
								35.67738332777549
							],
							[
								45.42061811705321,
								35.977545884742824
							],
							[
								44.77267,
								37.17045
							],
							[
								44.22575564960053,
								37.97158437758935
							],
							[
								44.421402622257546,
								38.28128123631454
							],
							[
								44.10922529478234,
								39.4281362981681
							],
							[
								44.79398969908195,
								39.71300263117705
							],
							[
								44.95268802265031,
								39.33576467544637
							],
							[
								45.45772179543877,
								38.87413910578306
							],
							[
								46.14362308124882,
								38.74120148371222
							],
							[
								46.50571984231797,
								38.770605373686294
							],
							[
								47.685079380083096,
								39.50836395930122
							],
							[
								48.06009524922524,
								39.58223541926246
							],
							[
								48.35552941263788,
								39.28876496027691
							],
							[
								48.01074425638648,
								38.79401479751452
							],
							[
								48.63437544128482,
								38.27037750910097
							],
							[
								48.88324913920249,
								38.32024526626262
							],
							[
								49.19961225769334,
								37.582874253889884
							],
							[
								50.14777143738462,
								37.37456655532134
							],
							[
								50.84235436381971,
								36.8728142359834
							],
							[
								52.264024692601424,
								36.7004216578577
							],
							[
								53.82578982932642,
								36.965030829408235
							],
							[
								53.92159793479556,
								37.19891836196126
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Iran",
					"sov_a3": "IRN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Iran",
					"adm0_a3": "IRN",
					"geou_dif": 0,
					"geounit": "Iran",
					"gu_a3": "IRN",
					"su_dif": 0,
					"subunit": "Iran",
					"su_a3": "IRN",
					"brk_diff": 0,
					"name": "Iran",
					"name_long": "Iran",
					"brk_a3": "IRN",
					"brk_name": "Iran",
					"brk_group": "",
					"abbrev": "Iran",
					"postal": "IRN",
					"formal_en": "Islamic Republic of Iran",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Iran, Islamic Rep.",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 3,
					"mapcolor9": 4,
					"mapcolor13": 13,
					"pop_est": 66429284,
					"gdp_md_est": 841700,
					"pop_year": -99,
					"lastcensus": 2006,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "IR",
					"iso_a3": "IRN",
					"iso_n3": "364",
					"un_a3": "364",
					"wb_a2": "IR",
					"wb_a3": "IRN",
					"woe_id": -99,
					"adm0_a3_is": "IRN",
					"adm0_a3_us": "IRN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Southern Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 4,
					"long_len": 4,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								45.42061811705321,
								35.977545884742824
							],
							[
								46.0763403664048,
								35.67738332777549
							],
							[
								46.15178795755094,
								35.09325877536429
							],
							[
								45.64845950702809,
								34.748137722303014
							],
							[
								45.41669070819904,
								33.967797756479584
							],
							[
								46.10936160663932,
								33.017287299119005
							],
							[
								47.33466149271191,
								32.46915538179911
							],
							[
								47.8492037290421,
								31.70917593029867
							],
							[
								47.68528608581227,
								30.984853217079632
							],
							[
								48.004698113808324,
								30.985137437457244
							],
							[
								48.0145683123761,
								30.452456773392598
							],
							[
								48.567971225789755,
								29.926778265903522
							],
							[
								47.974519077349896,
								29.975819200148504
							],
							[
								47.30262210469096,
								30.059069932570722
							],
							[
								46.568713413281756,
								29.09902517345229
							],
							[
								44.70949873228474,
								29.178891099559383
							],
							[
								41.889980910007836,
								31.19000865327837
							],
							[
								40.399994337736246,
								31.889991766887935
							],
							[
								39.19546837744497,
								32.16100881604267
							],
							[
								38.792340529136084,
								33.378686428352225
							],
							[
								41.006158888519934,
								34.41937226006212
							],
							[
								41.383965285005814,
								35.628316555314356
							],
							[
								41.289707472505455,
								36.35881460219227
							],
							[
								41.83706424334096,
								36.605853786763575
							],
							[
								42.34959109881177,
								37.2298725449041
							],
							[
								42.77912560402183,
								37.385263576805755
							],
							[
								43.9422587420473,
								37.25622752537295
							],
							[
								44.29345177590287,
								37.0015143906063
							],
							[
								44.772699008977696,
								37.170444647768434
							],
							[
								45.42061811705321,
								35.977545884742824
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Iraq",
					"sov_a3": "IRQ",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Iraq",
					"adm0_a3": "IRQ",
					"geou_dif": 0,
					"geounit": "Iraq",
					"gu_a3": "IRQ",
					"su_dif": 0,
					"subunit": "Iraq",
					"su_a3": "IRQ",
					"brk_diff": 0,
					"name": "Iraq",
					"name_long": "Iraq",
					"brk_a3": "IRQ",
					"brk_name": "Iraq",
					"brk_group": "",
					"abbrev": "Iraq",
					"postal": "IRQ",
					"formal_en": "Republic of Iraq",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Iraq",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 3,
					"mapcolor13": 1,
					"pop_est": 31129225,
					"gdp_md_est": 103900,
					"pop_year": -99,
					"lastcensus": 1997,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "IQ",
					"iso_a3": "IRQ",
					"iso_n3": "368",
					"un_a3": "368",
					"wb_a2": "IQ",
					"wb_a3": "IRQ",
					"woe_id": -99,
					"adm0_a3_is": "IRQ",
					"adm0_a3_us": "IRQ",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 4,
					"long_len": 4,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-14.508695441129234,
								66.45589223903143
							],
							[
								-14.739637417041607,
								65.8087482774403
							],
							[
								-13.60973222497981,
								65.12667104761987
							],
							[
								-14.909833746794902,
								64.36408193628868
							],
							[
								-17.794438035543422,
								63.678749091233854
							],
							[
								-18.656245896874992,
								63.49638296167582
							],
							[
								-19.97275468594276,
								63.64363495549153
							],
							[
								-22.762971971110158,
								63.960178941495386
							],
							[
								-21.778484259517683,
								64.40211579045551
							],
							[
								-23.95504391121911,
								64.8911298692335
							],
							[
								-22.184402635170358,
								65.0849681667603
							],
							[
								-22.227423265053332,
								65.37859365504274
							],
							[
								-24.326184047939336,
								65.61118927678847
							],
							[
								-23.65051469572309,
								66.26251902939522
							],
							[
								-22.134922451250887,
								66.41046865504687
							],
							[
								-20.57628373867955,
								65.73211212835143
							],
							[
								-19.05684160000159,
								66.27660085719477
							],
							[
								-17.79862382655905,
								65.99385325790978
							],
							[
								-16.167818976292125,
								66.52679230413587
							],
							[
								-14.508695441129234,
								66.45589223903143
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Iceland",
					"sov_a3": "ISL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Iceland",
					"adm0_a3": "ISL",
					"geou_dif": 0,
					"geounit": "Iceland",
					"gu_a3": "ISL",
					"su_dif": 0,
					"subunit": "Iceland",
					"su_a3": "ISL",
					"brk_diff": 0,
					"name": "Iceland",
					"name_long": "Iceland",
					"brk_a3": "ISL",
					"brk_name": "Iceland",
					"brk_group": "",
					"abbrev": "Iceland",
					"postal": "IS",
					"formal_en": "Republic of Iceland",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Iceland",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 4,
					"mapcolor13": 9,
					"pop_est": 306694,
					"gdp_md_est": 12710,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "IS",
					"iso_a3": "ISL",
					"iso_n3": "352",
					"un_a3": "352",
					"wb_a2": "IS",
					"wb_a3": "ISL",
					"woe_id": -99,
					"adm0_a3_is": "ISL",
					"adm0_a3_us": "ISL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 7,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								35.71991824722275,
								32.709192409794866
							],
							[
								35.54566531753454,
								32.393992011030576
							],
							[
								35.183930291491436,
								32.53251068778894
							],
							[
								34.97464074070933,
								31.866582343059722
							],
							[
								35.22589155451243,
								31.754341132121766
							],
							[
								34.970506626125996,
								31.61677846936081
							],
							[
								34.92740848159457,
								31.353435370401414
							],
							[
								35.397560662586045,
								31.489086005167582
							],
							[
								35.420918409981965,
								31.100065822874356
							],
							[
								34.92260257339143,
								29.501326198844524
							],
							[
								34.26543338393569,
								31.219360866820153
							],
							[
								34.55637169773891,
								31.548823960896996
							],
							[
								34.48810713068136,
								31.60553884533732
							],
							[
								34.75258711115117,
								32.07292633720117
							],
							[
								34.95541710789678,
								32.82737641044638
							],
							[
								35.098457472480675,
								33.080539252244265
							],
							[
								35.126052687324545,
								33.09090037691878
							],
							[
								35.460709262846706,
								33.08904002535628
							],
							[
								35.55279666519081,
								33.26427480725802
							],
							[
								35.82110070165024,
								33.2774264592763
							],
							[
								35.836396925608625,
								32.86812327730851
							],
							[
								35.70079796727475,
								32.71601369885738
							],
							[
								35.71991824722275,
								32.709192409794866
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Israel",
					"sov_a3": "ISR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Israel",
					"adm0_a3": "ISR",
					"geou_dif": 0,
					"geounit": "Israel",
					"gu_a3": "ISR",
					"su_dif": 0,
					"subunit": "Israel",
					"su_a3": "ISR",
					"brk_diff": 0,
					"name": "Israel",
					"name_long": "Israel",
					"brk_a3": "ISR",
					"brk_name": "Israel",
					"brk_group": "",
					"abbrev": "Isr.",
					"postal": "IS",
					"formal_en": "State of Israel",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Israel",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 2,
					"mapcolor9": 5,
					"mapcolor13": 9,
					"pop_est": 7233701,
					"gdp_md_est": 201400,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "IL",
					"iso_a3": "ISR",
					"iso_n3": "376",
					"un_a3": "376",
					"wb_a2": "IL",
					"wb_a3": "ISR",
					"woe_id": -99,
					"adm0_a3_is": "ISR",
					"adm0_a3_us": "ISR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									15.520376010813834,
									38.23115509699147
								],
								[
									15.160242954171736,
									37.44404551853782
								],
								[
									15.309897902089006,
									37.1342194687318
								],
								[
									15.09998823411945,
									36.6199872909954
								],
								[
									14.335228712632016,
									36.996630967754754
								],
								[
									13.82673261887993,
									37.1045313583802
								],
								[
									12.431003859108813,
									37.61294993748382
								],
								[
									12.570943637755136,
									38.12638113051969
								],
								[
									13.741156447004585,
									38.03496552179536
								],
								[
									14.76124922044616,
									38.143873602850505
								],
								[
									15.520376010813834,
									38.23115509699147
								]
							]
						],
						[
							[
								[
									9.210011834356266,
									41.20999136002422
								],
								[
									9.809975213264977,
									40.5000088567661
								],
								[
									9.669518670295673,
									39.177376410471794
								],
								[
									9.21481774255949,
									39.240473334300134
								],
								[
									8.80693566247973,
									38.90661774347848
								],
								[
									8.428302443077115,
									39.17184703221662
								],
								[
									8.38825320805094,
									40.378310858718805
								],
								[
									8.15999840661766,
									40.95000722916379
								],
								[
									8.709990675500109,
									40.89998444270523
								],
								[
									9.210011834356266,
									41.20999136002422
								]
							]
						],
						[
							[
								[
									7.435184767291844,
									43.69384491634918
								],
								[
									7.549596388386163,
									44.12790110938482
								],
								[
									7.007562290076663,
									44.25476675066139
								],
								[
									6.749955275101712,
									45.02851797136759
								],
								[
									7.096652459347837,
									45.333098863295874
								],
								[
									6.802355177445662,
									45.70857982032868
								],
								[
									6.843592970414562,
									45.99114655210067
								],
								[
									7.273850945676685,
									45.77694774025076
								],
								[
									7.7559920589598335,
									45.82449005795928
								],
								[
									8.31662967289438,
									46.163642483090854
								],
								[
									8.489952426801295,
									46.00515086525175
								],
								[
									8.966305779667834,
									46.036931871111165
								],
								[
									9.182881707403112,
									46.44021474871698
								],
								[
									9.922836541390353,
									46.31489940040919
								],
								[
									10.363378126678668,
									46.483571275409844
								],
								[
									10.442701450246602,
									46.893546250997446
								],
								[
									11.048555942436508,
									46.7513585475464
								],
								[
									11.164827915093326,
									46.94157949481274
								],
								[
									12.153088006243081,
									47.11539317482644
								],
								[
									12.376485223040845,
									46.76755910906988
								],
								[
									13.806475457421556,
									46.50930613869119
								],
								[
									13.698109978905478,
									46.016778062517375
								],
								[
									13.937630242578336,
									45.591015936864665
								],
								[
									13.141606479554298,
									45.73669179949542
								],
								[
									12.328581170306308,
									45.381778062514854
								],
								[
									12.383874952858605,
									44.88537425391908
								],
								[
									12.261453484759159,
									44.600482082694015
								],
								[
									12.589237094786483,
									44.091365871754476
								],
								[
									13.526905958722494,
									43.58772736263791
								],
								[
									14.029820997787027,
									42.76100779883248
								],
								[
									15.142569614327954,
									41.955139675456905
								],
								[
									15.926191033601896,
									41.96131500911574
								],
								[
									16.169897088290412,
									41.740294908203424
								],
								[
									15.889345737377795,
									41.5410822617182
								],
								[
									16.785001661860576,
									41.179605617836586
								],
								[
									17.519168735431208,
									40.87714345963224
								],
								[
									18.376687452882578,
									40.35562490494266
								],
								[
									18.480247023195403,
									40.168866278639825
								],
								[
									18.2933850440281,
									39.81077444107325
								],
								[
									17.738380161213286,
									40.2776710068303
								],
								[
									16.869595981522338,
									40.44223460546385
								],
								[
									16.448743116937322,
									39.79540070246648
								],
								[
									17.1714896989715,
									39.42469981542072
								],
								[
									17.052840610429342,
									38.902871202137305
								],
								[
									16.635088331781844,
									38.8435724960824
								],
								[
									16.100960727613057,
									37.98589874933418
								],
								[
									15.684086948314501,
									37.90884918878703
								],
								[
									15.68796268073632,
									38.214592800441864
								],
								[
									15.891981235424709,
									38.750942491199226
								],
								[
									16.109332309644316,
									38.96454702407769
								],
								[
									15.718813510814641,
									39.544072374014945
								],
								[
									15.413612501698822,
									40.04835683853517
								],
								[
									14.998495721098237,
									40.17294871679093
								],
								[
									14.70326826341477,
									40.604550279292624
								],
								[
									14.060671827865264,
									40.78634796809544
								],
								[
									13.627985060285397,
									41.188287258461656
								],
								[
									12.88808190273042,
									41.25308950455562
								],
								[
									12.10668257004491,
									41.70453481705741
								],
								[
									11.191906365614187,
									42.35542531998968
								],
								[
									10.511947869517797,
									42.931462510747224
								],
								[
									10.200028924204048,
									43.920006822274615
								],
								[
									9.702488234097814,
									44.03627879493132
								],
								[
									8.88894616052687,
									44.36633616797954
								],
								[
									8.428560825238577,
									44.23122813575242
								],
								[
									7.850766635783202,
									43.76714793555524
								],
								[
									7.435184767291844,
									43.69384491634918
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Italy",
					"sov_a3": "ITA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Italy",
					"adm0_a3": "ITA",
					"geou_dif": 0,
					"geounit": "Italy",
					"gu_a3": "ITA",
					"su_dif": 0,
					"subunit": "Italy",
					"su_a3": "ITA",
					"brk_diff": 0,
					"name": "Italy",
					"name_long": "Italy",
					"brk_a3": "ITA",
					"brk_name": "Italy",
					"brk_group": "",
					"abbrev": "Italy",
					"postal": "I",
					"formal_en": "Italian Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Italy",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 7,
					"mapcolor9": 8,
					"mapcolor13": 7,
					"pop_est": 58126212,
					"gdp_md_est": 1823000,
					"pop_year": -99,
					"lastcensus": 2012,
					"gdp_year": -99,
					"economy": "1. Developed region: G7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "IT",
					"iso_a3": "ITA",
					"iso_n3": "380",
					"un_a3": "380",
					"wb_a2": "IT",
					"wb_a3": "ITA",
					"woe_id": -99,
					"adm0_a3_is": "ITA",
					"adm0_a3_us": "ITA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-77.56960079619921,
								18.490525417550487
							],
							[
								-76.89661861846213,
								18.400866807524082
							],
							[
								-76.36535905628554,
								18.160700588447597
							],
							[
								-76.19965857614164,
								17.886867173732966
							],
							[
								-76.9025614081757,
								17.868237819891746
							],
							[
								-77.20634131540348,
								17.70111623785982
							],
							[
								-77.76602291534061,
								17.86159739834224
							],
							[
								-78.33771928578561,
								18.225967922432233
							],
							[
								-78.21772661000388,
								18.454532782459196
							],
							[
								-77.79736467152563,
								18.524218451404778
							],
							[
								-77.56960079619921,
								18.490525417550487
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Jamaica",
					"sov_a3": "JAM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Jamaica",
					"adm0_a3": "JAM",
					"geou_dif": 0,
					"geounit": "Jamaica",
					"gu_a3": "JAM",
					"su_dif": 0,
					"subunit": "Jamaica",
					"su_a3": "JAM",
					"brk_diff": 0,
					"name": "Jamaica",
					"name_long": "Jamaica",
					"brk_a3": "JAM",
					"brk_name": "Jamaica",
					"brk_group": "",
					"abbrev": "Jam.",
					"postal": "J",
					"formal_en": "Jamaica",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Jamaica",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 2,
					"mapcolor9": 4,
					"mapcolor13": 10,
					"pop_est": 2825928,
					"gdp_md_est": 20910,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "JM",
					"iso_a3": "JAM",
					"iso_n3": "388",
					"un_a3": "388",
					"wb_a2": "JM",
					"wb_a3": "JAM",
					"woe_id": -99,
					"adm0_a3_is": "JAM",
					"adm0_a3_us": "JAM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Caribbean",
					"region_wb": "Latin America & Caribbean",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								35.54566531753454,
								32.393992011030576
							],
							[
								35.71991824722275,
								32.709192409794866
							],
							[
								36.834062127435544,
								32.312937526980775
							],
							[
								38.792340529136084,
								33.378686428352225
							],
							[
								39.19546837744497,
								32.16100881604267
							],
							[
								39.00488569515255,
								32.01021698661498
							],
							[
								37.00216556168101,
								31.508412990844747
							],
							[
								37.998848911294374,
								30.508499864213135
							],
							[
								37.66811974462638,
								30.3386652694859
							],
							[
								37.503581984209035,
								30.003776150018407
							],
							[
								36.74052778498725,
								29.86528331147619
							],
							[
								36.50121422704359,
								29.505253607698705
							],
							[
								36.06894087092206,
								29.197494615184453
							],
							[
								34.95603722508426,
								29.356554673778845
							],
							[
								34.92260257339143,
								29.501326198844524
							],
							[
								35.420918409981965,
								31.100065822874356
							],
							[
								35.397560662586045,
								31.489086005167582
							],
							[
								35.5452519060762,
								31.78250478772084
							],
							[
								35.54566531753454,
								32.393992011030576
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Jordan",
					"sov_a3": "JOR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Jordan",
					"adm0_a3": "JOR",
					"geou_dif": 0,
					"geounit": "Jordan",
					"gu_a3": "JOR",
					"su_dif": 0,
					"subunit": "Jordan",
					"su_a3": "JOR",
					"brk_diff": 0,
					"name": "Jordan",
					"name_long": "Jordan",
					"brk_a3": "JOR",
					"brk_name": "Jordan",
					"brk_group": "",
					"abbrev": "Jord.",
					"postal": "J",
					"formal_en": "Hashemite Kingdom of Jordan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Jordan",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 3,
					"mapcolor9": 4,
					"mapcolor13": 4,
					"pop_est": 6342948,
					"gdp_md_est": 31610,
					"pop_year": -99,
					"lastcensus": 2004,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "JO",
					"iso_a3": "JOR",
					"iso_n3": "400",
					"un_a3": "400",
					"wb_a2": "JO",
					"wb_a3": "JOR",
					"woe_id": -99,
					"adm0_a3_is": "JOR",
					"adm0_a3_us": "JOR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									134.63842817600388,
									34.149233710256425
								],
								[
									134.7663790223585,
									33.80633474378368
								],
								[
									134.20341596897086,
									33.20117788342964
								],
								[
									133.7929500672765,
									33.5219851750976
								],
								[
									133.28026818250888,
									33.28957042086495
								],
								[
									133.01485802625788,
									32.70456736910478
								],
								[
									132.3631148621927,
									32.98938202568138
								],
								[
									132.3711763856302,
									33.463642483040076
								],
								[
									132.9243725933148,
									34.06029857028204
								],
								[
									133.49296837782222,
									33.9446208765967
								],
								[
									133.90410607313638,
									34.36493113864262
								],
								[
									134.63842817600388,
									34.149233710256425
								]
							]
						],
						[
							[
								[
									140.9763875673053,
									37.14207428644016
								],
								[
									140.59976972876214,
									36.34398346612454
								],
								[
									140.77407433488267,
									35.84287710219024
								],
								[
									140.25327925024513,
									35.13811391859366
								],
								[
									138.97552778539622,
									34.66760000257611
								],
								[
									137.21759891169123,
									34.60628591566186
								],
								[
									135.7929830262689,
									33.46480520276663
								],
								[
									135.12098270074543,
									33.84907115328906
								],
								[
									135.07943484918272,
									34.59654490817482
								],
								[
									133.340316196832,
									34.37593821872076
								],
								[
									132.15677086805132,
									33.90493337659652
								],
								[
									130.98614464734348,
									33.885761420216284
								],
								[
									132.00003624891005,
									33.149992377244615
								],
								[
									131.33279015515737,
									31.450354519164847
								],
								[
									130.68631798718596,
									31.029579169228242
								],
								[
									130.20241987520498,
									31.418237616495418
								],
								[
									130.44767622286216,
									32.319474595665724
								],
								[
									129.8146916037189,
									32.61030955660439
								],
								[
									129.40846316947258,
									33.29605581311759
								],
								[
									130.35393517468466,
									33.6041507024417
								],
								[
									130.87845096244715,
									34.232742824840045
								],
								[
									131.88422936414392,
									34.74971385348792
								],
								[
									132.61767296766251,
									35.43339305270942
								],
								[
									134.6083008159778,
									35.73161774346582
								],
								[
									135.67753787652893,
									35.527134100886826
								],
								[
									136.72383060114245,
									37.30498423924038
								],
								[
									137.3906116070045,
									36.827390651998826
								],
								[
									138.85760216690628,
									37.82748464614346
								],
								[
									139.4264046571429,
									38.21596222589764
								],
								[
									140.0547900738121,
									39.438807481436385
								],
								[
									139.88337934789988,
									40.563312486323696
								],
								[
									140.30578250545372,
									41.19500519465956
								],
								[
									141.3689734234267,
									41.37855988216029
								],
								[
									141.9142631369705,
									39.991616115878685
								],
								[
									141.884600864835,
									39.180864569651504
								],
								[
									140.9594893739458,
									38.17400096287659
								],
								[
									140.9763875673053,
									37.14207428644016
								]
							]
						],
						[
							[
								[
									143.9101619813795,
									44.17409983985374
								],
								[
									144.61342654843966,
									43.960882880217525
								],
								[
									145.3208252300831,
									44.384732977875444
								],
								[
									145.54313724180278,
									43.262088324550604
								],
								[
									144.0596618999999,
									42.98835826270056
								],
								[
									143.18384972551732,
									41.9952147486992
								],
								[
									141.61149092017249,
									42.678790595056086
								],
								[
									141.06728641170665,
									41.584593817708
								],
								[
									139.95510623592108,
									41.569555975911044
								],
								[
									139.81754357315995,
									42.5637588567744
								],
								[
									140.31208703019323,
									43.33327261003265
								],
								[
									141.38054894426003,
									43.388824774746496
								],
								[
									141.67195234595394,
									44.772125352551484
								],
								[
									141.967644891528,
									45.55148346616136
								],
								[
									143.14287031470982,
									44.510358384776964
								],
								[
									143.9101619813795,
									44.17409983985374
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Japan",
					"sov_a3": "JPN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Japan",
					"adm0_a3": "JPN",
					"geou_dif": 0,
					"geounit": "Japan",
					"gu_a3": "JPN",
					"su_dif": 0,
					"subunit": "Japan",
					"su_a3": "JPN",
					"brk_diff": 0,
					"name": "Japan",
					"name_long": "Japan",
					"brk_a3": "JPN",
					"brk_name": "Japan",
					"brk_group": "",
					"abbrev": "Japan",
					"postal": "J",
					"formal_en": "Japan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Japan",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 3,
					"mapcolor9": 5,
					"mapcolor13": 4,
					"pop_est": 127078679,
					"gdp_md_est": 4329000,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "1. Developed region: G7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "JP",
					"iso_a3": "JPN",
					"iso_n3": "392",
					"un_a3": "392",
					"wb_a2": "JP",
					"wb_a3": "JPN",
					"woe_id": -99,
					"adm0_a3_is": "JPN",
					"adm0_a3_us": "JPN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								70.96231489449929,
								42.26615428320554
							],
							[
								70.3889648782208,
								42.081307684897524
							],
							[
								69.07002729683524,
								41.38424428971234
							],
							[
								68.63248294462005,
								40.66868073176687
							],
							[
								68.25989586779565,
								40.6623245305949
							],
							[
								67.98585574735182,
								41.135990708982206
							],
							[
								66.7140470722166,
								41.168443508461564
							],
							[
								66.51064863471572,
								41.987644151368556
							],
							[
								66.02339155463562,
								41.99464630794404
							],
							[
								66.0980123228652,
								42.99766002051308
							],
							[
								64.90082441595933,
								43.728080552742654
							],
							[
								63.185786981056594,
								43.650074978198006
							],
							[
								62.01330040878628,
								43.50447663021566
							],
							[
								61.058319940032504,
								44.40581696225058
							],
							[
								60.23997195825848,
								44.784036770194746
							],
							[
								58.68998904809581,
								45.50001373959873
							],
							[
								58.50312706892845,
								45.586804307632974
							],
							[
								55.92891727074118,
								44.99585846615918
							],
							[
								55.968191359283026,
								41.30864166926938
							],
							[
								55.45525109235382,
								41.25985911718584
							],
							[
								54.75534549339267,
								42.04397146256662
							],
							[
								54.07941775901497,
								42.32410940202084
							],
							[
								52.94429324729174,
								42.11603424739758
							],
							[
								52.502459751196284,
								41.78331553808647
							],
							[
								52.44633914572722,
								42.027150783855575
							],
							[
								52.692112257707265,
								42.44389537207337
							],
							[
								52.50142622255032,
								42.7922978785852
							],
							[
								51.342427199108215,
								43.132974758469345
							],
							[
								50.89129194520024,
								44.03103363705378
							],
							[
								50.339129266161365,
								44.284015611338475
							],
							[
								50.30564293803627,
								44.609835516938915
							],
							[
								51.278503452363225,
								44.51485423438646
							],
							[
								51.31689904155604,
								45.2459982366679
							],
							[
								52.16738976421573,
								45.40839142514511
							],
							[
								53.0408764992452,
								45.25904653582177
							],
							[
								53.220865512917726,
								46.234645901059935
							],
							[
								53.042736850807785,
								46.85300608986449
							],
							[
								52.04202273947561,
								46.80463694923924
							],
							[
								51.191945428274266,
								47.048704738953916
							],
							[
								50.03408328634248,
								46.60898997658222
							],
							[
								49.10116000000011,
								46.399330000000134
							],
							[
								48.5932410011805,
								46.56103424741548
							],
							[
								48.694733514201744,
								47.07562816017793
							],
							[
								48.05725304544927,
								47.74375275327952
							],
							[
								47.31523115417025,
								47.715847479841955
							],
							[
								46.46644575377627,
								48.39415233010493
							],
							[
								47.04367150247651,
								49.152038886097614
							],
							[
								46.75159630716274,
								49.35600576435377
							],
							[
								47.54948042174931,
								50.454698391311126
							],
							[
								48.57784142435753,
								49.87475962991567
							],
							[
								48.70238162618102,
								50.60512848571284
							],
							[
								50.76664839051216,
								51.6927623561599
							],
							[
								52.32872358583097,
								51.718652248738124
							],
							[
								54.532878452376224,
								51.02623973245932
							],
							[
								55.716940545479815,
								50.62171662047854
							],
							[
								56.777961053296565,
								51.04355133727705
							],
							[
								58.36329064314674,
								51.06365346943858
							],
							[
								59.642282342370606,
								50.545442206415714
							],
							[
								59.93280724471549,
								50.842194118851864
							],
							[
								61.337424350840934,
								50.79907013610426
							],
							[
								61.58800337102417,
								51.272658799843214
							],
							[
								59.967533807215545,
								51.9604204372157
							],
							[
								60.92726850774028,
								52.44754832621504
							],
							[
								60.73999311711458,
								52.71998647725775
							],
							[
								61.699986199800605,
								52.97999644633427
							],
							[
								60.978066440683165,
								53.66499339457914
							],
							[
								61.43659142440907,
								54.00626455343479
							],
							[
								65.17853356309593,
								54.35422781027211
							],
							[
								65.666875848254,
								54.601266994843456
							],
							[
								68.16910037625883,
								54.97039175070432
							],
							[
								69.06816694527288,
								55.38525014914353
							],
							[
								70.86526655465514,
								55.169733588270105
							],
							[
								71.18013105660941,
								54.13328522400826
							],
							[
								72.22415001820218,
								54.376655381886735
							],
							[
								73.5085160663844,
								54.0356167669766
							],
							[
								73.42567874542044,
								53.489810289109755
							],
							[
								74.38484500519007,
								53.54686107036008
							],
							[
								76.89110029491343,
								54.49052440044193
							],
							[
								76.52517947785475,
								54.17700348572714
							],
							[
								77.80091556184425,
								53.404414984747575
							],
							[
								80.03555952344169,
								50.86475088154725
							],
							[
								80.56844689323549,
								51.38833649352847
							],
							[
								81.94598554883993,
								50.81219594990637
							],
							[
								83.38300377801238,
								51.069182847693924
							],
							[
								83.93511478061885,
								50.88924551045358
							],
							[
								84.41637739455308,
								50.311399644565824
							],
							[
								85.11555952346203,
								50.11730296487764
							],
							[
								85.54126997268247,
								49.69285858824816
							],
							[
								86.82935672398963,
								49.82667470966817
							],
							[
								87.35997033076268,
								49.21498078062916
							],
							[
								86.59877648310339,
								48.54918162698061
							],
							[
								85.7682328633083,
								48.45575063739699
							],
							[
								85.72048383987072,
								47.45296946877312
							],
							[
								85.16429039911338,
								47.00095571551611
							],
							[
								83.18048383986047,
								47.33003123635086
							],
							[
								82.45892581576913,
								45.539649563166506
							],
							[
								81.94707075391813,
								45.31702749285324
							],
							[
								79.96610639844141,
								44.91751699480466
							],
							[
								80.86620649610137,
								43.180362046881044
							],
							[
								80.1801501809943,
								42.92006785742694
							],
							[
								80.25999026888536,
								42.349999294599115
							],
							[
								79.64364546094015,
								42.496682847659656
							],
							[
								79.1421773619798,
								42.856092434249604
							],
							[
								77.65839196158322,
								42.960685533208334
							],
							[
								76.00035363149857,
								42.98802236589063
							],
							[
								75.6369649596221,
								42.87789988867678
							],
							[
								74.21286583852259,
								43.29833934180351
							],
							[
								73.64530358266092,
								43.09127187760987
							],
							[
								73.48975752146237,
								42.50089447689129
							],
							[
								71.84463829945065,
								42.845395412765185
							],
							[
								71.18628055205227,
								42.70429291439223
							],
							[
								70.96231489449929,
								42.26615428320554
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Kazakhstan",
					"sov_a3": "KAZ",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Kazakhstan",
					"adm0_a3": "KAZ",
					"geou_dif": 0,
					"geounit": "Kazakhstan",
					"gu_a3": "KAZ",
					"su_dif": 0,
					"subunit": "Kazakhstan",
					"su_a3": "KAZ",
					"brk_diff": 0,
					"name": "Kazakhstan",
					"name_long": "Kazakhstan",
					"brk_a3": "KAZ",
					"brk_name": "Kazakhstan",
					"brk_group": "",
					"abbrev": "Kaz.",
					"postal": "KZ",
					"formal_en": "Republic of Kazakhstan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Kazakhstan",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 1,
					"mapcolor9": 6,
					"mapcolor13": 1,
					"pop_est": 15399437,
					"gdp_md_est": 175800,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "KZ",
					"iso_a3": "KAZ",
					"iso_n3": "398",
					"un_a3": "398",
					"wb_a2": "KZ",
					"wb_a3": "KAZ",
					"woe_id": -99,
					"adm0_a3_is": "KAZ",
					"adm0_a3_us": "KAZ",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Central Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								41.58513,
								-1.6832500000000001
							],
							[
								40.88477,
								-2.08255
							],
							[
								40.63785000000001,
								-2.49979
							],
							[
								40.26304000000001,
								-2.57309
							],
							[
								40.12119,
								-3.27768
							],
							[
								39.80006,
								-3.68116
							],
							[
								39.604890000000005,
								-4.3465300000000004
							],
							[
								39.20222,
								-4.67677
							],
							[
								37.7669,
								-3.6771200000000004
							],
							[
								37.69869,
								-3.09699
							],
							[
								34.07262,
								-1.05982
							],
							[
								33.90371119710453,
								-0.9500000000000001
							],
							[
								33.893568969666944,
								0.1098135378618963
							],
							[
								34.18,
								0.515
							],
							[
								34.6721,
								1.1769399999999999
							],
							[
								35.03599,
								1.90584
							],
							[
								34.596070000000005,
								3.05374
							],
							[
								34.479130000000005,
								3.5556
							],
							[
								34.005,
								4.249884947362048
							],
							[
								34.62019626785388,
								4.8471227420819885
							],
							[
								35.29800711823298,
								5.506
							],
							[
								35.817447662353516,
								5.338232082790797
							],
							[
								35.817447662353516,
								4.7769656634618896
							],
							[
								36.159078632855646,
								4.447864127672769
							],
							[
								36.85509323800812,
								4.447864127672769
							],
							[
								38.120915,
								3.598605
							],
							[
								38.43697,
								3.58851
							],
							[
								38.67114,
								3.6160700000000006
							],
							[
								38.89251,
								3.5007400000000004
							],
							[
								39.55938425876585,
								3.42206
							],
							[
								39.85494,
								3.83879
							],
							[
								40.76848,
								4.257020000000001
							],
							[
								41.1718,
								3.9190899999999997
							],
							[
								41.85508309264397,
								3.918911920483727
							],
							[
								40.98105,
								2.7845199999999997
							],
							[
								40.993,
								-0.85829
							],
							[
								41.58513,
								-1.6832500000000001
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Kenya",
					"sov_a3": "KEN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Kenya",
					"adm0_a3": "KEN",
					"geou_dif": 0,
					"geounit": "Kenya",
					"gu_a3": "KEN",
					"su_dif": 0,
					"subunit": "Kenya",
					"su_a3": "KEN",
					"brk_diff": 0,
					"name": "Kenya",
					"name_long": "Kenya",
					"brk_a3": "KEN",
					"brk_name": "Kenya",
					"brk_group": "",
					"abbrev": "Ken.",
					"postal": "KE",
					"formal_en": "Republic of Kenya",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Kenya",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 2,
					"mapcolor9": 7,
					"mapcolor13": 3,
					"pop_est": 39002772,
					"gdp_md_est": 61510,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "KE",
					"iso_a3": "KEN",
					"iso_n3": "404",
					"un_a3": "404",
					"wb_a2": "KE",
					"wb_a3": "KEN",
					"woe_id": -99,
					"adm0_a3_is": "KEN",
					"adm0_a3_us": "KEN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								70.96231489449914,
								42.266154283205495
							],
							[
								71.18628055205212,
								42.70429291439214
							],
							[
								71.8446382994506,
								42.8453954127651
							],
							[
								73.48975752146237,
								42.50089447689132
							],
							[
								73.64530358266092,
								43.09127187760983
							],
							[
								74.21286583852256,
								43.29833934180337
							],
							[
								75.63696495962202,
								42.87789988867668
							],
							[
								76.00035363149846,
								42.98802236589067
							],
							[
								77.65839196158322,
								42.96068553320826
							],
							[
								79.14217736197978,
								42.85609243424952
							],
							[
								79.64364546094012,
								42.49668284765953
							],
							[
								80.2599902688853,
								42.34999929459906
							],
							[
								80.11943037305139,
								42.12394074153825
							],
							[
								78.54366092317531,
								41.58224254003869
							],
							[
								78.18719689322597,
								41.18531586360481
							],
							[
								76.90448449087708,
								41.06648590754965
							],
							[
								76.52636803579745,
								40.42794607193512
							],
							[
								75.4678279967307,
								40.56207225194867
							],
							[
								74.77686242055606,
								40.36642527929163
							],
							[
								73.8222436868283,
								39.893973497063186
							],
							[
								73.96001305531843,
								39.660008449861735
							],
							[
								73.6753792662548,
								39.4312368841056
							],
							[
								71.784693637992,
								39.27946320246437
							],
							[
								70.54916181832562,
								39.6041979029865
							],
							[
								69.46488691597753,
								39.5266832545487
							],
							[
								69.55960981636852,
								40.10321137141298
							],
							[
								70.64801883329997,
								39.93575389257117
							],
							[
								71.01419803252017,
								40.24436554621823
							],
							[
								71.77487511585656,
								40.14584442805378
							],
							[
								73.05541710804917,
								40.866033026689465
							],
							[
								71.87011478057047,
								41.392900092121266
							],
							[
								71.1578585142916,
								41.14358714452912
							],
							[
								70.42002241402821,
								41.51999827734314
							],
							[
								71.25924767444823,
								42.16771067968946
							],
							[
								70.96231489449914,
								42.266154283205495
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Kyrgyzstan",
					"sov_a3": "KGZ",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Kyrgyzstan",
					"adm0_a3": "KGZ",
					"geou_dif": 0,
					"geounit": "Kyrgyzstan",
					"gu_a3": "KGZ",
					"su_dif": 0,
					"subunit": "Kyrgyzstan",
					"su_a3": "KGZ",
					"brk_diff": 0,
					"name": "Kyrgyzstan",
					"name_long": "Kyrgyzstan",
					"brk_a3": "KGZ",
					"brk_name": "Kyrgyzstan",
					"brk_group": "",
					"abbrev": "Kgz.",
					"postal": "KG",
					"formal_en": "Kyrgyz Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Kyrgyz Republic",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 7,
					"mapcolor9": 7,
					"mapcolor13": 6,
					"pop_est": 5431747,
					"gdp_md_est": 11610,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "KG",
					"iso_a3": "KGZ",
					"iso_n3": "417",
					"un_a3": "417",
					"wb_a2": "KG",
					"wb_a3": "KGZ",
					"woe_id": -99,
					"adm0_a3_is": "KGZ",
					"adm0_a3_us": "KGZ",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Central Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								102.5849324890267,
								12.186594956913282
							],
							[
								102.34809939983302,
								13.394247341358223
							],
							[
								102.98842207236163,
								14.225721136934467
							],
							[
								104.28141808473661,
								14.416743068901367
							],
							[
								105.21877689007889,
								14.273211778210694
							],
							[
								106.04394616091552,
								13.881091009979956
							],
							[
								106.49637332563088,
								14.570583807834282
							],
							[
								107.38272749230109,
								14.202440904186972
							],
							[
								107.61454796756243,
								13.535530707244206
							],
							[
								107.49140302941089,
								12.337205918827948
							],
							[
								105.81052371625313,
								11.567614650921229
							],
							[
								106.24967003786946,
								10.961811835163587
							],
							[
								105.19991499229235,
								10.889309800658097
							],
							[
								104.33433475140347,
								10.48654368737523
							],
							[
								103.4972799011397,
								10.632555446815928
							],
							[
								103.09068973186726,
								11.153660590047165
							],
							[
								102.5849324890267,
								12.186594956913282
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Cambodia",
					"sov_a3": "KHM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Cambodia",
					"adm0_a3": "KHM",
					"geou_dif": 0,
					"geounit": "Cambodia",
					"gu_a3": "KHM",
					"su_dif": 0,
					"subunit": "Cambodia",
					"su_a3": "KHM",
					"brk_diff": 0,
					"name": "Cambodia",
					"name_long": "Cambodia",
					"brk_a3": "KHM",
					"brk_name": "Cambodia",
					"brk_group": "",
					"abbrev": "Camb.",
					"postal": "KH",
					"formal_en": "Kingdom of Cambodia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Cambodia",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 3,
					"mapcolor9": 6,
					"mapcolor13": 5,
					"pop_est": 14494293,
					"gdp_md_est": 27940,
					"pop_year": -99,
					"lastcensus": 2008,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "KH",
					"iso_a3": "KHM",
					"iso_n3": "116",
					"un_a3": "116",
					"wb_a2": "KH",
					"wb_a3": "KHM",
					"woe_id": -99,
					"adm0_a3_is": "KHM",
					"adm0_a3_us": "KHM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								128.34971642467661,
								38.61224294692785
							],
							[
								129.21291954968007,
								37.43239248305595
							],
							[
								129.46044966035817,
								36.78418915460283
							],
							[
								129.4683044780665,
								35.63214061130395
							],
							[
								129.0913765809296,
								35.082484239231434
							],
							[
								128.1858504578791,
								34.89037710218639
							],
							[
								127.3865194031884,
								34.47567373304412
							],
							[
								126.48574751190876,
								34.39004588473648
							],
							[
								126.37391971242914,
								34.934560451795946
							],
							[
								126.55923139862779,
								35.6845405136479
							],
							[
								126.11739790253229,
								36.72548472751926
							],
							[
								126.86014326386339,
								36.893924058574626
							],
							[
								126.17475874237624,
								37.74968577732804
							],
							[
								126.23733890188176,
								37.84037791600028
							],
							[
								126.68371992401893,
								37.80477285415118
							],
							[
								127.07330854706737,
								38.2561148137884
							],
							[
								127.78003543509101,
								38.30453563084589
							],
							[
								128.20574588431145,
								38.37039724380189
							],
							[
								128.34971642467661,
								38.61224294692785
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "South Korea",
					"sov_a3": "KOR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "South Korea",
					"adm0_a3": "KOR",
					"geou_dif": 0,
					"geounit": "South Korea",
					"gu_a3": "KOR",
					"su_dif": 0,
					"subunit": "South Korea",
					"su_a3": "KOR",
					"brk_diff": 0,
					"name": "Korea",
					"name_long": "Republic of Korea",
					"brk_a3": "KOR",
					"brk_name": "Republic of Korea",
					"brk_group": "",
					"abbrev": "S.K.",
					"postal": "KR",
					"formal_en": "Republic of Korea",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Korea, Rep.",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 1,
					"mapcolor9": 1,
					"mapcolor13": 5,
					"pop_est": 48508972,
					"gdp_md_est": 1335000,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "4. Emerging region: MIKT",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "KR",
					"iso_a3": "KOR",
					"iso_n3": "410",
					"un_a3": "410",
					"wb_a2": "KR",
					"wb_a3": "KOR",
					"woe_id": -99,
					"adm0_a3_is": "KOR",
					"adm0_a3_us": "KOR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 5,
					"long_len": 17,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								20.590230000000076,
								41.85541000000006
							],
							[
								20.522950000000037,
								42.21787000000006
							],
							[
								20.28374000000008,
								42.3202500000001
							],
							[
								20.070700000000045,
								42.58863000000008
							],
							[
								20.257580000000075,
								42.81275000000011
							],
							[
								20.496790000000033,
								42.884690000000035
							],
							[
								20.63507999999996,
								43.21670999999998
							],
							[
								20.814480000000003,
								43.27205000000009
							],
							[
								20.95650999999998,
								43.13094000000007
							],
							[
								21.143395000000055,
								43.06868500000013
							],
							[
								21.27421000000004,
								42.909590000000094
							],
							[
								21.43865999999997,
								42.86254999999994
							],
							[
								21.633020000000045,
								42.67717000000005
							],
							[
								21.77505000000002,
								42.68270000000001
							],
							[
								21.662920000000042,
								42.439220000000034
							],
							[
								21.54332000000005,
								42.3202500000001
							],
							[
								21.57663598940212,
								42.24522439706186
							],
							[
								21.35270000000014,
								42.20679999999999
							],
							[
								20.762159999999994,
								42.05186000000003
							],
							[
								20.71731000000011,
								41.84711000000004
							],
							[
								20.590230000000076,
								41.85541000000006
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Kosovo",
					"sov_a3": "KOS",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Kosovo",
					"adm0_a3": "KOS",
					"geou_dif": 0,
					"geounit": "Kosovo",
					"gu_a3": "KOS",
					"su_dif": 0,
					"subunit": "Kosovo",
					"su_a3": "KOS",
					"brk_diff": 1,
					"name": "Kosovo",
					"name_long": "Kosovo",
					"brk_a3": "B57",
					"brk_name": "Kosovo",
					"brk_group": "",
					"abbrev": "Kos.",
					"postal": "KO",
					"formal_en": "Republic of Kosovo",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "Self admin.; Claimed by Serbia",
					"name_sort": "Kosovo",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 2,
					"mapcolor9": 3,
					"mapcolor13": 11,
					"pop_est": 1804838,
					"gdp_md_est": 5352,
					"pop_year": -99,
					"lastcensus": 1981,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "-99",
					"iso_a3": "-99",
					"iso_n3": "-99",
					"un_a3": "-099",
					"wb_a2": "KV",
					"wb_a3": "KSV",
					"woe_id": -99,
					"adm0_a3_is": "SRB",
					"adm0_a3_us": "KOS",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								47.974519077349896,
								29.975819200148504
							],
							[
								48.18318851094449,
								29.534476630159762
							],
							[
								48.09394331237642,
								29.306299343375002
							],
							[
								48.416094191283946,
								28.55200429942667
							],
							[
								47.708850538937384,
								28.526062730416143
							],
							[
								47.45982181172283,
								29.002519436147224
							],
							[
								46.568713413281756,
								29.09902517345229
							],
							[
								47.30262210469096,
								30.059069932570722
							],
							[
								47.974519077349896,
								29.975819200148504
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Kuwait",
					"sov_a3": "KWT",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Kuwait",
					"adm0_a3": "KWT",
					"geou_dif": 0,
					"geounit": "Kuwait",
					"gu_a3": "KWT",
					"su_dif": 0,
					"subunit": "Kuwait",
					"su_a3": "KWT",
					"brk_diff": 0,
					"name": "Kuwait",
					"name_long": "Kuwait",
					"brk_a3": "KWT",
					"brk_name": "Kuwait",
					"brk_group": "",
					"abbrev": "Kwt.",
					"postal": "KW",
					"formal_en": "State of Kuwait",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Kuwait",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 2,
					"mapcolor9": 2,
					"mapcolor13": 2,
					"pop_est": 2691158,
					"gdp_md_est": 149100,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "KW",
					"iso_a3": "KWT",
					"iso_n3": "414",
					"un_a3": "414",
					"wb_a2": "KW",
					"wb_a3": "KWT",
					"woe_id": -99,
					"adm0_a3_is": "KWT",
					"adm0_a3_us": "KWT",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								105.21877689007889,
								14.273211778210694
							],
							[
								105.54433841351769,
								14.723933620660418
							],
							[
								105.58903852745016,
								15.570316066952858
							],
							[
								104.7793205098688,
								16.44186493577145
							],
							[
								104.7169470560925,
								17.42885895433008
							],
							[
								103.9564766784853,
								18.24095408779688
							],
							[
								103.20019209189374,
								18.309632066312773
							],
							[
								102.99870568238771,
								17.9616946476916
							],
							[
								102.41300499879162,
								17.932781683824288
							],
							[
								102.11359175009248,
								18.109101670804165
							],
							[
								101.05954756063517,
								17.51249725999449
							],
							[
								101.03593143107777,
								18.408928330961615
							],
							[
								101.2820146016517,
								19.462584947176765
							],
							[
								100.60629357300316,
								19.508344427971224
							],
							[
								100.54888105672688,
								20.109237982661128
							],
							[
								100.11598758341785,
								20.417849636308187
							],
							[
								100.32910119018953,
								20.786121731036232
							],
							[
								101.18000532430754,
								21.436572984294028
							],
							[
								101.27002566935997,
								21.201651923095184
							],
							[
								101.80311974488293,
								21.17436676684507
							],
							[
								101.65201785686152,
								22.318198757409547
							],
							[
								102.17043582561358,
								22.464753119389304
							],
							[
								102.75489627483466,
								21.675137233969465
							],
							[
								103.20386111858645,
								20.76656220141375
							],
							[
								104.43500044150805,
								20.75873322192153
							],
							[
								104.8225736836971,
								19.886641750563882
							],
							[
								104.18338789267894,
								19.62466807706022
							],
							[
								103.89653201702671,
								19.265180975821806
							],
							[
								105.09459842328152,
								18.66697459561108
							],
							[
								105.92576216026403,
								17.48531545660896
							],
							[
								106.55600792849569,
								16.604283962464805
							],
							[
								107.3127059265456,
								15.90853831630318
							],
							[
								107.5645251811039,
								15.20217316330556
							],
							[
								107.38272749230109,
								14.202440904186972
							],
							[
								106.49637332563088,
								14.570583807834282
							],
							[
								106.04394616091552,
								13.881091009979956
							],
							[
								105.21877689007889,
								14.273211778210694
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Laos",
					"sov_a3": "LAO",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Laos",
					"adm0_a3": "LAO",
					"geou_dif": 0,
					"geounit": "Laos",
					"gu_a3": "LAO",
					"su_dif": 0,
					"subunit": "Laos",
					"su_a3": "LAO",
					"brk_diff": 0,
					"name": "Lao PDR",
					"name_long": "Lao PDR",
					"brk_a3": "LAO",
					"brk_name": "Laos",
					"brk_group": "",
					"abbrev": "Laos",
					"postal": "LA",
					"formal_en": "Lao People's Democratic Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Lao PDR",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 1,
					"mapcolor9": 1,
					"mapcolor13": 9,
					"pop_est": 6834942,
					"gdp_md_est": 13980,
					"pop_year": -99,
					"lastcensus": 2005,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "LA",
					"iso_a3": "LAO",
					"iso_n3": "418",
					"un_a3": "418",
					"wb_a2": "LA",
					"wb_a3": "LAO",
					"woe_id": -99,
					"adm0_a3_is": "LAO",
					"adm0_a3_us": "LAO",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								35.82110070165024,
								33.2774264592763
							],
							[
								35.55279666519081,
								33.26427480725802
							],
							[
								35.460709262846706,
								33.08904002535628
							],
							[
								35.126052687324545,
								33.09090037691878
							],
							[
								35.48220665868013,
								33.90545014091944
							],
							[
								35.9795923194894,
								34.61005829521913
							],
							[
								35.99840254084364,
								34.644914048800004
							],
							[
								36.4481942075121,
								34.59393524834407
							],
							[
								36.61175011571589,
								34.20178864189718
							],
							[
								36.066460402172055,
								33.82491242119255
							],
							[
								35.82110070165024,
								33.2774264592763
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Lebanon",
					"sov_a3": "LBN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Lebanon",
					"adm0_a3": "LBN",
					"geou_dif": 0,
					"geounit": "Lebanon",
					"gu_a3": "LBN",
					"su_dif": 0,
					"subunit": "Lebanon",
					"su_a3": "LBN",
					"brk_diff": 0,
					"name": "Lebanon",
					"name_long": "Lebanon",
					"brk_a3": "LBN",
					"brk_name": "Lebanon",
					"brk_group": "",
					"abbrev": "Leb.",
					"postal": "LB",
					"formal_en": "Lebanese Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Lebanon",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 4,
					"mapcolor9": 4,
					"mapcolor13": 12,
					"pop_est": 4017095,
					"gdp_md_est": 44060,
					"pop_year": -99,
					"lastcensus": 1970,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "LB",
					"iso_a3": "LBN",
					"iso_n3": "422",
					"un_a3": "422",
					"wb_a2": "LB",
					"wb_a3": "LBN",
					"woe_id": -99,
					"adm0_a3_is": "LBN",
					"adm0_a3_us": "LBN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": 4,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-7.7121593896697505,
								4.364565944837722
							],
							[
								-7.974107224957251,
								4.355755113131963
							],
							[
								-9.004793667018674,
								4.8324185245922
							],
							[
								-9.913420376006684,
								5.593560695819207
							],
							[
								-10.765383876986645,
								6.140710760925558
							],
							[
								-11.438779466182055,
								6.7859168563057475
							],
							[
								-11.19980180504828,
								7.1058456486247366
							],
							[
								-11.146704270868383,
								7.396706447779536
							],
							[
								-10.69559485517648,
								7.939464016141088
							],
							[
								-10.23009355309128,
								8.406205552601293
							],
							[
								-10.016566534861255,
								8.428503933135232
							],
							[
								-9.755342169625834,
								8.541055202666925
							],
							[
								-9.337279832384581,
								7.9285344507113535
							],
							[
								-9.40334815106975,
								7.526905218938907
							],
							[
								-9.208786383490846,
								7.313920803247953
							],
							[
								-8.926064622422004,
								7.309037380396376
							],
							[
								-8.722123582382125,
								7.71167430259851
							],
							[
								-8.439298468448698,
								7.686042792181738
							],
							[
								-8.48544552248535,
								7.39520783124307
							],
							[
								-8.385451626000574,
								6.911800645368743
							],
							[
								-8.60288021486862,
								6.4675641951716605
							],
							[
								-8.311347622094019,
								6.193033148621083
							],
							[
								-7.993692592795881,
								6.126189683451543
							],
							[
								-7.570152553731688,
								5.707352199725904
							],
							[
								-7.539715135111763,
								5.313345241716519
							],
							[
								-7.635368211284031,
								5.188159084489456
							],
							[
								-7.7121593896697505,
								4.364565944837722
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Liberia",
					"sov_a3": "LBR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Liberia",
					"adm0_a3": "LBR",
					"geou_dif": 0,
					"geounit": "Liberia",
					"gu_a3": "LBR",
					"su_dif": 0,
					"subunit": "Liberia",
					"su_a3": "LBR",
					"brk_diff": 0,
					"name": "Liberia",
					"name_long": "Liberia",
					"brk_a3": "LBR",
					"brk_name": "Liberia",
					"brk_group": "",
					"abbrev": "Liberia",
					"postal": "LR",
					"formal_en": "Republic of Liberia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Liberia",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 3,
					"mapcolor9": 4,
					"mapcolor13": 9,
					"pop_est": 3441790,
					"gdp_md_est": 1526,
					"pop_year": -99,
					"lastcensus": 2008,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "LR",
					"iso_a3": "LBR",
					"iso_n3": "430",
					"un_a3": "430",
					"wb_a2": "LR",
					"wb_a3": "LBR",
					"woe_id": -99,
					"adm0_a3_is": "LBR",
					"adm0_a3_us": "LBR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 7,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								14.851300000000037,
								22.862950000000126
							],
							[
								14.143870883855243,
								22.491288967371133
							],
							[
								13.581424594790462,
								23.04050608976928
							],
							[
								11.9995056494717,
								23.471668402596435
							],
							[
								11.560669386449035,
								24.097909247325617
							],
							[
								10.771363559622955,
								24.562532050061748
							],
							[
								10.303846876678449,
								24.379313259370974
							],
							[
								9.948261346078027,
								24.936953640232616
							],
							[
								9.910692579801776,
								25.365454616796796
							],
							[
								9.31941084151822,
								26.094324856057483
							],
							[
								9.716285841519664,
								26.512206325785655
							],
							[
								9.629056023811074,
								27.140953477481048
							],
							[
								9.756128370816782,
								27.688258571884205
							],
							[
								9.683884718472882,
								28.144173895779318
							],
							[
								9.859997999723475,
								28.95998973237107
							],
							[
								9.805634392952356,
								29.424638373323376
							],
							[
								9.482139926805417,
								30.307556057246188
							],
							[
								9.970017124072967,
								30.539324856075382
							],
							[
								10.056575148161699,
								30.961831366493527
							],
							[
								9.950225050505196,
								31.376069647745283
							],
							[
								10.636901482799487,
								31.761420803345686
							],
							[
								10.944789666394513,
								32.081814683555365
							],
							[
								11.432253452203781,
								32.36890310315283
							],
							[
								11.488787469131012,
								33.13699575452324
							],
							[
								12.663310000000024,
								32.79278000000005
							],
							[
								13.083260000000053,
								32.878820000000076
							],
							[
								13.918679999999995,
								32.71196000000009
							],
							[
								15.245630000000006,
								32.26508000000007
							],
							[
								15.713939999999923,
								31.376259999999945
							],
							[
								16.611620000000016,
								31.18217999999996
							],
							[
								18.02108999999996,
								30.76356999999996
							],
							[
								19.08641,
								30.26639
							],
							[
								19.574040000000082,
								30.52582000000001
							],
							[
								20.053349999999966,
								30.985760000000028
							],
							[
								19.82033000000007,
								31.751790000000142
							],
							[
								20.13396999999992,
								32.238200000000006
							],
							[
								20.854520000000093,
								32.70679999999999
							],
							[
								21.54298,
								32.843200000000024
							],
							[
								22.895760000000053,
								32.63857999999999
							],
							[
								23.236800000000017,
								32.191490000000044
							],
							[
								23.609130000000107,
								32.18725999999998
							],
							[
								23.92750000000001,
								32.01667000000009
							],
							[
								24.921139999999923,
								31.89936
							],
							[
								25.164820000000077,
								31.569150000000093
							],
							[
								24.802869999999984,
								31.089290000000005
							],
							[
								24.957620000000077,
								30.661600000000078
							],
							[
								24.70007000000004,
								30.044190000000015
							],
							[
								25.000000000000114,
								29.238654529533562
							],
							[
								25.000000000000114,
								25.682499996361003
							],
							[
								25.000000000000114,
								22
							],
							[
								25.000000000000114,
								20.003040000000055
							],
							[
								23.850000000000136,
								20.000000000000057
							],
							[
								23.83766000000014,
								19.580470000000105
							],
							[
								19.849260000000072,
								21.49509000000006
							],
							[
								15.860850000000084,
								23.409719999999993
							],
							[
								14.851300000000037,
								22.862950000000126
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Libya",
					"sov_a3": "LBY",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Libya",
					"adm0_a3": "LBY",
					"geou_dif": 0,
					"geounit": "Libya",
					"gu_a3": "LBY",
					"su_dif": 0,
					"subunit": "Libya",
					"su_a3": "LBY",
					"brk_diff": 0,
					"name": "Libya",
					"name_long": "Libya",
					"brk_a3": "LBY",
					"brk_name": "Libya",
					"brk_group": "",
					"abbrev": "Libya",
					"postal": "LY",
					"formal_en": "Libya",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Libya",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 2,
					"mapcolor9": 2,
					"mapcolor13": 11,
					"pop_est": 6310434,
					"gdp_md_est": 88830,
					"pop_year": -99,
					"lastcensus": 2006,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "LY",
					"iso_a3": "LBY",
					"iso_n3": "434",
					"un_a3": "434",
					"wb_a2": "LY",
					"wb_a3": "LBY",
					"woe_id": -99,
					"adm0_a3_is": "LBY",
					"adm0_a3_us": "LBY",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Northern Africa",
					"region_wb": "Middle East & North Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								81.7879590188914,
								7.523055324733164
							],
							[
								81.63732221876059,
								6.481775214051922
							],
							[
								81.21801964714433,
								6.197141424988288
							],
							[
								80.34835696810441,
								5.968369859232155
							],
							[
								79.87246870312853,
								6.76346344647493
							],
							[
								79.69516686393513,
								8.200843410673386
							],
							[
								80.14780073437964,
								9.824077663609557
							],
							[
								80.83881798698656,
								9.268426825391188
							],
							[
								81.30431928907177,
								8.56420624433369
							],
							[
								81.7879590188914,
								7.523055324733164
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Sri Lanka",
					"sov_a3": "LKA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Sri Lanka",
					"adm0_a3": "LKA",
					"geou_dif": 0,
					"geounit": "Sri Lanka",
					"gu_a3": "LKA",
					"su_dif": 0,
					"subunit": "Sri Lanka",
					"su_a3": "LKA",
					"brk_diff": 0,
					"name": "Sri Lanka",
					"name_long": "Sri Lanka",
					"brk_a3": "LKA",
					"brk_name": "Sri Lanka",
					"brk_group": "",
					"abbrev": "Sri L.",
					"postal": "LK",
					"formal_en": "Democratic Socialist Republic of Sri Lanka",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Sri Lanka",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 5,
					"mapcolor9": 4,
					"mapcolor13": 9,
					"pop_est": 21324791,
					"gdp_md_est": 91870,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "LK",
					"iso_a3": "LKA",
					"iso_n3": "144",
					"un_a3": "144",
					"wb_a2": "LK",
					"wb_a3": "LKA",
					"woe_id": -99,
					"adm0_a3_is": "LKA",
					"adm0_a3_us": "LKA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Southern Asia",
					"region_wb": "South Asia",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								28.978262566857243,
								-28.95559661226171
							],
							[
								29.32516645683259,
								-29.257386976846256
							],
							[
								29.018415154748027,
								-29.74376555757737
							],
							[
								28.84839969250774,
								-30.070050551068256
							],
							[
								28.29106937023991,
								-30.2262167294543
							],
							[
								28.107204624145425,
								-30.54573211031495
							],
							[
								27.749397006956485,
								-30.645105889612225
							],
							[
								26.999261915807637,
								-29.875953871379984
							],
							[
								27.532511020627478,
								-29.24271087007536
							],
							[
								28.074338413207784,
								-28.851468601193588
							],
							[
								28.541700066855498,
								-28.64750172293757
							],
							[
								28.978262566857243,
								-28.95559661226171
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Lesotho",
					"sov_a3": "LSO",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Lesotho",
					"adm0_a3": "LSO",
					"geou_dif": 0,
					"geounit": "Lesotho",
					"gu_a3": "LSO",
					"su_dif": 0,
					"subunit": "Lesotho",
					"su_a3": "LSO",
					"brk_diff": 0,
					"name": "Lesotho",
					"name_long": "Lesotho",
					"brk_a3": "LSO",
					"brk_name": "Lesotho",
					"brk_group": "",
					"abbrev": "Les.",
					"postal": "LS",
					"formal_en": "Kingdom of Lesotho",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Lesotho",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 5,
					"mapcolor9": 2,
					"mapcolor13": 8,
					"pop_est": 2130819,
					"gdp_md_est": 3293,
					"pop_year": -99,
					"lastcensus": 2006,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "LS",
					"iso_a3": "LSO",
					"iso_n3": "426",
					"un_a3": "426",
					"wb_a2": "LS",
					"wb_a3": "LSO",
					"woe_id": -99,
					"adm0_a3_is": "LSO",
					"adm0_a3_us": "LSO",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Southern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								22.731098667092652,
								54.327536932993326
							],
							[
								22.65105187347254,
								54.582740993866736
							],
							[
								22.75776370615526,
								54.85657440858138
							],
							[
								22.315723504330577,
								55.015298570365864
							],
							[
								21.268448927503467,
								55.190481675835315
							],
							[
								21.055800408622417,
								56.031076361711065
							],
							[
								22.201156853939494,
								56.33780182557949
							],
							[
								23.878263787539964,
								56.27367137310527
							],
							[
								24.86068444184076,
								56.37252838807963
							],
							[
								25.000934279080894,
								56.16453074810484
							],
							[
								25.533046502390334,
								56.100296942766036
							],
							[
								26.494331495883756,
								55.615106919977634
							],
							[
								26.58827924979039,
								55.16717560487167
							],
							[
								25.7684326514798,
								54.84696259217509
							],
							[
								25.536353794056993,
								54.28242340760253
							],
							[
								24.450683628037037,
								53.905702216194754
							],
							[
								23.48412763844985,
								53.91249766704114
							],
							[
								23.24398725758951,
								54.22056671814914
							],
							[
								22.731098667092652,
								54.327536932993326
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Lithuania",
					"sov_a3": "LTU",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Lithuania",
					"adm0_a3": "LTU",
					"geou_dif": 0,
					"geounit": "Lithuania",
					"gu_a3": "LTU",
					"su_dif": 0,
					"subunit": "Lithuania",
					"su_a3": "LTU",
					"brk_diff": 0,
					"name": "Lithuania",
					"name_long": "Lithuania",
					"brk_a3": "LTU",
					"brk_name": "Lithuania",
					"brk_group": "",
					"abbrev": "Lith.",
					"postal": "LT",
					"formal_en": "Republic of Lithuania",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Lithuania",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 3,
					"mapcolor9": 3,
					"mapcolor13": 9,
					"pop_est": 3555179,
					"gdp_md_est": 63330,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "LT",
					"iso_a3": "LTU",
					"iso_n3": "440",
					"un_a3": "440",
					"wb_a2": "LT",
					"wb_a3": "LTU",
					"woe_id": -99,
					"adm0_a3_is": "LTU",
					"adm0_a3_us": "LTU",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								6.043073357781111,
								50.128051662794235
							],
							[
								6.242751092156993,
								49.90222565367873
							],
							[
								6.186320428094177,
								49.463802802114515
							],
							[
								5.897759230176405,
								49.44266714130703
							],
							[
								5.674051954784829,
								49.529483547557504
							],
							[
								5.782417433300907,
								50.09032786722122
							],
							[
								6.043073357781111,
								50.128051662794235
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Luxembourg",
					"sov_a3": "LUX",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Luxembourg",
					"adm0_a3": "LUX",
					"geou_dif": 0,
					"geounit": "Luxembourg",
					"gu_a3": "LUX",
					"su_dif": 0,
					"subunit": "Luxembourg",
					"su_a3": "LUX",
					"brk_diff": 0,
					"name": "Luxembourg",
					"name_long": "Luxembourg",
					"brk_a3": "LUX",
					"brk_name": "Luxembourg",
					"brk_group": "",
					"abbrev": "Lux.",
					"postal": "L",
					"formal_en": "Grand Duchy of Luxembourg",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Luxembourg",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 7,
					"mapcolor9": 3,
					"mapcolor13": 7,
					"pop_est": 491775,
					"gdp_md_est": 39370,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "LU",
					"iso_a3": "LUX",
					"iso_n3": "442",
					"un_a3": "442",
					"wb_a2": "LU",
					"wb_a3": "LUX",
					"woe_id": -99,
					"adm0_a3_is": "LUX",
					"adm0_a3_us": "LUX",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Western Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": 5,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								21.055800408622417,
								56.031076361711065
							],
							[
								21.090423618257972,
								56.78387278912294
							],
							[
								21.581866489353672,
								57.411870632549935
							],
							[
								22.52434126149288,
								57.75337433535076
							],
							[
								23.318452996522097,
								57.00623647727487
							],
							[
								24.12072960785343,
								57.02569265403277
							],
							[
								24.312862583114622,
								57.79342357037697
							],
							[
								25.16459354014927,
								57.97015696881519
							],
							[
								25.60280968598437,
								57.84752879498657
							],
							[
								26.463532342237787,
								57.47638865826633
							],
							[
								27.288184848751513,
								57.47452830670383
							],
							[
								27.77001590344093,
								57.24425812441123
							],
							[
								27.855282016722526,
								56.75932648378429
							],
							[
								28.176709425577997,
								56.169129950578814
							],
							[
								27.10245975109453,
								55.783313707087686
							],
							[
								26.494331495883756,
								55.615106919977634
							],
							[
								25.533046502390334,
								56.100296942766036
							],
							[
								25.000934279080894,
								56.16453074810484
							],
							[
								24.86068444184076,
								56.37252838807963
							],
							[
								23.878263787539964,
								56.27367137310527
							],
							[
								22.201156853939494,
								56.33780182557949
							],
							[
								21.055800408622417,
								56.031076361711065
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Latvia",
					"sov_a3": "LVA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Latvia",
					"adm0_a3": "LVA",
					"geou_dif": 0,
					"geounit": "Latvia",
					"gu_a3": "LVA",
					"su_dif": 0,
					"subunit": "Latvia",
					"su_a3": "LVA",
					"brk_diff": 0,
					"name": "Latvia",
					"name_long": "Latvia",
					"brk_a3": "LVA",
					"brk_name": "Latvia",
					"brk_group": "",
					"abbrev": "Lat.",
					"postal": "LV",
					"formal_en": "Republic of Latvia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Latvia",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 7,
					"mapcolor9": 6,
					"mapcolor13": 13,
					"pop_est": 2231503,
					"gdp_md_est": 38860,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "LV",
					"iso_a3": "LVA",
					"iso_n3": "428",
					"un_a3": "428",
					"wb_a2": "LV",
					"wb_a3": "LVA",
					"woe_id": -99,
					"adm0_a3_is": "LVA",
					"adm0_a3_us": "LVA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-5.193863491222032,
								35.75518219659085
							],
							[
								-4.591006232105144,
								35.33071198174565
							],
							[
								-3.6400565250700083,
								35.39985504815198
							],
							[
								-2.604305792644112,
								35.17909332940113
							],
							[
								-2.169913702798624,
								35.16839630791671
							],
							[
								-1.792985805661658,
								34.527918606091305
							],
							[
								-1.7334545556614103,
								33.91971283623212
							],
							[
								-1.388049282222596,
								32.86401500094138
							],
							[
								-1.1245511539661948,
								32.6515215113572
							],
							[
								-1.3078991357378698,
								32.26288890230603
							],
							[
								-2.616604783529567,
								32.094346218386164
							],
							[
								-3.0689802718126487,
								31.72449799247329
							],
							[
								-3.647497931320146,
								31.637294012980817
							],
							[
								-3.6904410465546675,
								30.896951605751156
							],
							[
								-4.859646165374443,
								30.501187649043885
							],
							[
								-5.242129278982787,
								30.000443020135577
							],
							[
								-6.060632290053746,
								29.731699734001808
							],
							[
								-7.059227667661901,
								29.579228420524657
							],
							[
								-8.674116176782832,
								28.84128896739665
							],
							[
								-8.665589565454837,
								27.65642588959247
							],
							[
								-8.817809007940525,
								27.65642588959247
							],
							[
								-8.817828334986643,
								27.65642588959247
							],
							[
								-8.794883999049034,
								27.12069631602256
							],
							[
								-9.413037482124508,
								27.088476060488546
							],
							[
								-9.735343390328751,
								26.860944729107416
							],
							[
								-10.189424200877454,
								26.860944729107416
							],
							[
								-10.55126257978526,
								26.990807603456886
							],
							[
								-11.39255489749695,
								26.883423977154393
							],
							[
								-11.718219773800342,
								26.104091701760808
							],
							[
								-12.030758836301658,
								26.030866197203125
							],
							[
								-12.50096269372537,
								24.770116278578143
							],
							[
								-13.891110398809047,
								23.691009019459386
							],
							[
								-14.221167771857154,
								22.310163072188345
							],
							[
								-14.630832688850944,
								21.860939846274874
							],
							[
								-14.750954555713406,
								21.500600083903805
							],
							[
								-17.002961798561074,
								21.420734157796687
							],
							[
								-17.02042843267577,
								21.422310288981635
							],
							[
								-16.973247849993186,
								21.885744533774954
							],
							[
								-16.58913692876763,
								22.158234361250095
							],
							[
								-16.261921759495664,
								22.679339504481277
							],
							[
								-16.3264139469959,
								23.017768459560898
							],
							[
								-15.982610642958065,
								23.723358466074103
							],
							[
								-15.426003790742186,
								24.35913361256104
							],
							[
								-15.089331834360735,
								24.52026072844697
							],
							[
								-14.824645148161693,
								25.103532619725314
							],
							[
								-14.800925665739669,
								25.63626496022229
							],
							[
								-14.439939947964831,
								26.254418443297652
							],
							[
								-13.773804897506466,
								26.618892320252286
							],
							[
								-13.139941779014293,
								27.640147813420498
							],
							[
								-13.121613369914712,
								27.654147671719812
							],
							[
								-12.618836635783111,
								28.038185533148663
							],
							[
								-11.688919236690765,
								28.148643907172584
							],
							[
								-10.900956997104402,
								28.83214223888092
							],
							[
								-10.399592251008642,
								29.09858592377779
							],
							[
								-9.564811163765626,
								29.933573716749862
							],
							[
								-9.814718390329176,
								31.17773550060906
							],
							[
								-9.434793260119363,
								32.038096421836485
							],
							[
								-9.300692918321829,
								32.564679266890636
							],
							[
								-8.65747636558504,
								33.2402452662424
							],
							[
								-7.6541784326382185,
								33.69706492770251
							],
							[
								-6.91254411460136,
								34.11047638603745
							],
							[
								-6.2443420068514115,
								35.145865383437524
							],
							[
								-5.929994269219833,
								35.75998810479399
							],
							[
								-5.193863491222032,
								35.75518219659085
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Morocco",
					"sov_a3": "MAR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Morocco",
					"adm0_a3": "MAR",
					"geou_dif": 0,
					"geounit": "Morocco",
					"gu_a3": "MAR",
					"su_dif": 0,
					"subunit": "Morocco",
					"su_a3": "MAR",
					"brk_diff": 0,
					"name": "Morocco",
					"name_long": "Morocco",
					"brk_a3": "MAR",
					"brk_name": "Morocco",
					"brk_group": "",
					"abbrev": "Mor.",
					"postal": "MA",
					"formal_en": "Kingdom of Morocco",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Morocco",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 2,
					"mapcolor9": 3,
					"mapcolor13": 9,
					"pop_est": 34859364,
					"gdp_md_est": 136600,
					"pop_year": -99,
					"lastcensus": 2004,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MA",
					"iso_a3": "MAR",
					"iso_n3": "504",
					"un_a3": "504",
					"wb_a2": "MA",
					"wb_a3": "MAR",
					"woe_id": -99,
					"adm0_a3_is": "MAR",
					"adm0_a3_us": "MAR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Northern Africa",
					"region_wb": "Middle East & North Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								26.619336785597795,
								48.22072622333347
							],
							[
								26.857823520624805,
								48.368210761094495
							],
							[
								27.522537469195157,
								48.467119452501116
							],
							[
								28.259546746541844,
								48.15556224221342
							],
							[
								28.670891147585166,
								48.1181485052341
							],
							[
								29.12269819511303,
								47.849095160506465
							],
							[
								29.05086795422733,
								47.5102269557525
							],
							[
								29.415135125452736,
								47.34664520933258
							],
							[
								29.559674106573112,
								46.928582872091326
							],
							[
								29.908851759569302,
								46.67436066343146
							],
							[
								29.838210076626297,
								46.52532583270169
							],
							[
								30.024658644335375,
								46.42393667254504
							],
							[
								29.759971958136394,
								46.34998769793536
							],
							[
								29.170653924279886,
								46.3792623968287
							],
							[
								29.07210696789929,
								46.517677720722496
							],
							[
								28.862972446414062,
								46.43788930926383
							],
							[
								28.933717482221624,
								46.2588304713725
							],
							[
								28.65998742037158,
								45.93998688413164
							],
							[
								28.485269402792767,
								45.5969070501459
							],
							[
								28.233553501099042,
								45.488283189468376
							],
							[
								28.0544429867754,
								45.944586086605625
							],
							[
								28.160017937947714,
								46.37156260841722
							],
							[
								28.128030226359044,
								46.810476386088254
							],
							[
								27.551166212684848,
								47.40511709247083
							],
							[
								27.233872918412743,
								47.82677094175638
							],
							[
								26.924176059687568,
								48.123264472030996
							],
							[
								26.619336785597795,
								48.22072622333347
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Moldova",
					"sov_a3": "MDA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Moldova",
					"adm0_a3": "MDA",
					"geou_dif": 0,
					"geounit": "Moldova",
					"gu_a3": "MDA",
					"su_dif": 0,
					"subunit": "Moldova",
					"su_a3": "MDA",
					"brk_diff": 0,
					"name": "Moldova",
					"name_long": "Moldova",
					"brk_a3": "MDA",
					"brk_name": "Moldova",
					"brk_group": "",
					"abbrev": "Mda.",
					"postal": "MD",
					"formal_en": "Republic of Moldova",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Moldova",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 5,
					"mapcolor9": 4,
					"mapcolor13": 12,
					"pop_est": 4320748,
					"gdp_md_est": 10670,
					"pop_year": -99,
					"lastcensus": 2004,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MD",
					"iso_a3": "MDA",
					"iso_n3": "498",
					"un_a3": "498",
					"wb_a2": "MD",
					"wb_a3": "MDA",
					"woe_id": -99,
					"adm0_a3_is": "MDA",
					"adm0_a3_us": "MDA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								49.54351891459575,
								-12.469832858940554
							],
							[
								49.808980747279094,
								-12.895284925999555
							],
							[
								50.056510857957164,
								-13.555761407121985
							],
							[
								50.21743126811407,
								-14.758788750876796
							],
							[
								50.47653689962553,
								-15.226512139550543
							],
							[
								50.377111443895956,
								-15.706069431219127
							],
							[
								50.20027469259318,
								-16.000263360256767
							],
							[
								49.86060550313868,
								-15.414252618066918
							],
							[
								49.67260664246086,
								-15.710203545802479
							],
							[
								49.863344354050156,
								-16.451036879138776
							],
							[
								49.77456424337271,
								-16.8750420060936
							],
							[
								49.49861209493412,
								-17.106035658438273
							],
							[
								49.435618523970305,
								-17.953064060134366
							],
							[
								49.041792433473944,
								-19.118781019774445
							],
							[
								48.54854088724801,
								-20.496888116134127
							],
							[
								47.93074913919867,
								-22.391501153251085
							],
							[
								47.54772342305131,
								-23.781958916928517
							],
							[
								47.095761346226595,
								-24.941629733990453
							],
							[
								46.282477654817086,
								-25.178462823184105
							],
							[
								45.40950768411045,
								-25.60143442149309
							],
							[
								44.833573846217554,
								-25.34610116953894
							],
							[
								44.03972049334976,
								-24.988345228782308
							],
							[
								43.76376834491117,
								-24.46067717864999
							],
							[
								43.697777540874455,
								-23.574116306250602
							],
							[
								43.345654331237625,
								-22.776903985283873
							],
							[
								43.254187046081,
								-22.057413018484123
							],
							[
								43.43329756040464,
								-21.33647511158019
							],
							[
								43.893682895692926,
								-21.16330738697013
							],
							[
								43.896370070172104,
								-20.830459486578174
							],
							[
								44.37432539243966,
								-20.07236622485639
							],
							[
								44.46439741392439,
								-19.435454196859048
							],
							[
								44.23242190936617,
								-18.961994724200906
							],
							[
								44.042976108584156,
								-18.33138722094317
							],
							[
								43.96308434426091,
								-17.409944756746782
							],
							[
								44.31246870298628,
								-16.850495700754955
							],
							[
								44.4465173683514,
								-16.216219170804507
							],
							[
								44.94493655780653,
								-16.1793738745804
							],
							[
								45.50273196796499,
								-15.97437346767854
							],
							[
								45.87299360533626,
								-15.793454278224687
							],
							[
								46.31224327981721,
								-15.780018405828798
							],
							[
								46.882182651564285,
								-15.210182386946315
							],
							[
								47.70512983581236,
								-14.594302666891764
							],
							[
								48.005214878131255,
								-14.091232598530375
							],
							[
								47.869047479042166,
								-13.663868503476586
							],
							[
								48.29382775248138,
								-13.784067884987486
							],
							[
								48.84506025573879,
								-13.089174899958664
							],
							[
								48.86350874206698,
								-12.48786793381042
							],
							[
								49.194651320193316,
								-12.04055673589197
							],
							[
								49.54351891459575,
								-12.469832858940554
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Madagascar",
					"sov_a3": "MDG",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Madagascar",
					"adm0_a3": "MDG",
					"geou_dif": 0,
					"geounit": "Madagascar",
					"gu_a3": "MDG",
					"su_dif": 0,
					"subunit": "Madagascar",
					"su_a3": "MDG",
					"brk_diff": 0,
					"name": "Madagascar",
					"name_long": "Madagascar",
					"brk_a3": "MDG",
					"brk_name": "Madagascar",
					"brk_group": "",
					"abbrev": "Mad.",
					"postal": "MG",
					"formal_en": "Republic of Madagascar",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Madagascar",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 5,
					"mapcolor9": 2,
					"mapcolor13": 3,
					"pop_est": 20653556,
					"gdp_md_est": 20130,
					"pop_year": -99,
					"lastcensus": 1993,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MG",
					"iso_a3": "MDG",
					"iso_n3": "450",
					"un_a3": "450",
					"wb_a2": "MG",
					"wb_a3": "MDG",
					"woe_id": -99,
					"adm0_a3_is": "MDG",
					"adm0_a3_us": "MDG",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-97.14000830767071,
								25.8699974634784
							],
							[
								-97.52807247596655,
								24.9921440699203
							],
							[
								-97.70294552284224,
								24.272343044526735
							],
							[
								-97.77604183631905,
								22.93257986092766
							],
							[
								-97.87236670611111,
								22.44421173755336
							],
							[
								-97.69904395220419,
								21.898689480064263
							],
							[
								-97.38895952023677,
								21.411018988525825
							],
							[
								-97.18933346229329,
								20.635433254473128
							],
							[
								-96.52557552772032,
								19.890930894444068
							],
							[
								-96.29212724484177,
								19.320371405509547
							],
							[
								-95.90088497595997,
								18.82802419684873
							],
							[
								-94.83906348344271,
								18.562717393462208
							],
							[
								-94.42572953975622,
								18.144370835843347
							],
							[
								-93.5486512926824,
								18.423836981677937
							],
							[
								-92.7861138577835,
								18.52483856859226
							],
							[
								-92.0373481920904,
								18.704569200103435
							],
							[
								-91.40790340855926,
								18.87608327888023
							],
							[
								-90.77186987991087,
								19.28412038825678
							],
							[
								-90.53358985061305,
								19.8674181177513
							],
							[
								-90.45147599970124,
								20.707521877520435
							],
							[
								-90.2786183336849,
								20.999855454995554
							],
							[
								-89.60132117385149,
								21.26172577563449
							],
							[
								-88.54386633986286,
								21.49367544197662
							],
							[
								-87.65841651075772,
								21.45884552661198
							],
							[
								-87.05189022494807,
								21.5435431991383
							],
							[
								-86.81198238803296,
								21.331514797444754
							],
							[
								-86.84590796583262,
								20.849864610268355
							],
							[
								-87.38329118523586,
								20.25540477139873
							],
							[
								-87.62105445021075,
								19.64655304613592
							],
							[
								-87.43675045444178,
								19.47240346931227
							],
							[
								-87.58656043165593,
								19.04013011319074
							],
							[
								-87.83719112827151,
								18.25981598558343
							],
							[
								-88.09066402866318,
								18.51664785407405
							],
							[
								-88.30003109409364,
								18.49998220466
							],
							[
								-88.4901228502793,
								18.48683055264172
							],
							[
								-88.84834387892658,
								17.883198147040332
							],
							[
								-89.02985734735176,
								18.00151133877256
							],
							[
								-89.15090938999549,
								17.955467637600407
							],
							[
								-89.14308041050333,
								17.808318996649405
							],
							[
								-90.0679335192309,
								17.81932607672752
							],
							[
								-91.00151994501596,
								17.817594916245696
							],
							[
								-91.00226925328417,
								17.25465770107428
							],
							[
								-91.45392127151513,
								17.252177232324186
							],
							[
								-91.0816700915006,
								16.91847667079952
							],
							[
								-90.71182186558764,
								16.68748301845477
							],
							[
								-90.60084672724093,
								16.47077789963879
							],
							[
								-90.438866950222,
								16.41010976812811
							],
							[
								-90.46447262242265,
								16.069562079324726
							],
							[
								-91.74796017125595,
								16.066564846251765
							],
							[
								-92.2292486234063,
								15.251446641495875
							],
							[
								-92.08721594925203,
								15.064584662328514
							],
							[
								-92.20322953974727,
								14.83010285080411
							],
							[
								-92.22775000686983,
								14.538828640190957
							],
							[
								-93.35946387406176,
								15.615429592343673
							],
							[
								-93.87516883011853,
								15.940164292865916
							],
							[
								-94.69165646033014,
								16.200975246642884
							],
							[
								-95.25022701697304,
								16.128318182840644
							],
							[
								-96.05338212765332,
								15.752087917539598
							],
							[
								-96.55743404822829,
								15.653515122942792
							],
							[
								-97.26359249549665,
								15.917064927631316
							],
							[
								-98.01302995480961,
								16.107311713113916
							],
							[
								-98.94767574745651,
								16.566043402568766
							],
							[
								-99.69739742714705,
								16.70616404872817
							],
							[
								-100.82949886758132,
								17.17107107184205
							],
							[
								-101.66608862995446,
								17.649026394109626
							],
							[
								-101.91852800170022,
								17.916090196193977
							],
							[
								-102.47813208698892,
								17.975750637275098
							],
							[
								-103.50098954955808,
								18.29229462327885
							],
							[
								-103.91752743204682,
								18.74857168220001
							],
							[
								-104.9920096504755,
								19.316133938061682
							],
							[
								-105.49303849976144,
								19.946767279535436
							],
							[
								-105.73139604370766,
								20.434101874264115
							],
							[
								-105.39777299683135,
								20.531718654863425
							],
							[
								-105.50066077352443,
								20.81689504646613
							],
							[
								-105.27075232625793,
								21.07628489835514
							],
							[
								-105.26581722697404,
								21.42210358325235
							],
							[
								-105.6031609769754,
								21.87114594165257
							],
							[
								-105.69341386597313,
								22.269080308516152
							],
							[
								-106.02871639689897,
								22.773752346278627
							],
							[
								-106.90998043498837,
								23.767774359628902
							],
							[
								-107.91544877809139,
								24.54891531015295
							],
							[
								-108.40190487347098,
								25.172313951105934
							],
							[
								-109.26019873740665,
								25.58060944264406
							],
							[
								-109.44408932171734,
								25.82488393808768
							],
							[
								-109.29164384645628,
								26.442934068298428
							],
							[
								-109.80145768923182,
								26.676175645447927
							],
							[
								-110.3917317370857,
								27.16211497650454
							],
							[
								-110.64101884646163,
								27.859876003525528
							],
							[
								-111.17891883018785,
								27.94124054616907
							],
							[
								-111.75960689985163,
								28.46795258230395
							],
							[
								-112.2282346260904,
								28.95440867768349
							],
							[
								-112.27182369672869,
								29.266844387320077
							],
							[
								-112.80959448937398,
								30.02111359305235
							],
							[
								-113.16381059451868,
								30.786880804969428
							],
							[
								-113.14866939985717,
								31.170965887978923
							],
							[
								-113.87188106978186,
								31.567608344035193
							],
							[
								-114.20573666060352,
								31.524045111613134
							],
							[
								-114.77645117883503,
								31.79953217216115
							],
							[
								-114.93669979537214,
								31.393484605427602
							],
							[
								-114.7712318591735,
								30.913617255165263
							],
							[
								-114.67389929895177,
								30.162681179315996
							],
							[
								-114.33097449426293,
								29.750432440707414
							],
							[
								-113.58887508833544,
								29.061611436473015
							],
							[
								-113.42405310754054,
								28.82617361095123
							],
							[
								-113.27196936730553,
								28.7547826197399
							],
							[
								-113.14003943566439,
								28.41128937429596
							],
							[
								-112.9622983467965,
								28.42519033458251
							],
							[
								-112.76158708377488,
								27.780216783147523
							],
							[
								-112.45791052941166,
								27.52581370697476
							],
							[
								-112.2449519519368,
								27.17172679291076
							],
							[
								-111.61648902061921,
								26.662817287700477
							],
							[
								-111.28467464887302,
								25.732589830014433
							],
							[
								-110.9878193835724,
								25.294606228124564
							],
							[
								-110.71000688357134,
								24.82600434010186
							],
							[
								-110.65504899782889,
								24.298594672131117
							],
							[
								-110.17285620811344,
								24.265547593680424
							],
							[
								-109.77184709352855,
								23.811182562754198
							],
							[
								-109.40910437705571,
								23.36467234953625
							],
							[
								-109.43339230023292,
								23.1855876734287
							],
							[
								-109.85421932660171,
								22.818271592698068
							],
							[
								-110.03139197471444,
								22.823077500901206
							],
							[
								-110.29507097048366,
								23.43097321216669
							],
							[
								-110.94950130902805,
								24.000964260345995
							],
							[
								-111.6705684070127,
								24.484423122652515
							],
							[
								-112.18203589562148,
								24.738412787367167
							],
							[
								-112.14898881717085,
								25.47012523040405
							],
							[
								-112.3007108223797,
								26.012004299416617
							],
							[
								-112.77729671919155,
								26.32195954030317
							],
							[
								-113.46467078332194,
								26.768185533143424
							],
							[
								-113.59672990604383,
								26.639459540304472
							],
							[
								-113.84893673384425,
								26.90006378835244
							],
							[
								-114.46574662968004,
								27.142090358991368
							],
							[
								-115.05514217818501,
								27.72272675222291
							],
							[
								-114.98225257043742,
								27.798200181585116
							],
							[
								-114.57036556685495,
								27.74148529714489
							],
							[
								-114.19932878299926,
								28.115002549750557
							],
							[
								-114.16201839888464,
								28.566111965442303
							],
							[
								-114.93184221073665,
								29.27947927501549
							],
							[
								-115.518653937627,
								29.5563615992354
							],
							[
								-115.88736528202958,
								30.180793768834178
							],
							[
								-116.25835038945291,
								30.836464341753583
							],
							[
								-116.72152625208497,
								31.635743720012044
							],
							[
								-117.12775999999985,
								32.53533999999996
							],
							[
								-115.99134999999995,
								32.61239000000012
							],
							[
								-114.72138999999993,
								32.72082999999992
							],
							[
								-114.815,
								32.52528000000001
							],
							[
								-113.30498,
								32.03914000000009
							],
							[
								-111.02361000000002,
								31.334719999999948
							],
							[
								-109.03500000000003,
								31.341940000000136
							],
							[
								-108.24193999999994,
								31.342220000000054
							],
							[
								-108.24000000000001,
								31.754853718166373
							],
							[
								-106.50758999999988,
								31.754520000000014
							],
							[
								-106.1429,
								31.399950000000047
							],
							[
								-105.63159000000002,
								31.08383000000009
							],
							[
								-105.03737000000001,
								30.644019999999955
							],
							[
								-104.70574999999997,
								30.121730000000014
							],
							[
								-104.4569699999999,
								29.571960000000047
							],
							[
								-103.94,
								29.27000000000004
							],
							[
								-103.11000000000001,
								28.970000000000027
							],
							[
								-102.48000000000002,
								29.75999999999999
							],
							[
								-101.66239999999999,
								29.77930000000009
							],
							[
								-100.95759999999996,
								29.380710000000136
							],
							[
								-100.45584000000002,
								28.69612000000012
							],
							[
								-100.10999999999996,
								28.110000000000127
							],
							[
								-99.51999999999992,
								27.54000000000002
							],
							[
								-99.30000000000001,
								26.840000000000032
							],
							[
								-99.01999999999992,
								26.37000000000006
							],
							[
								-98.23999999999995,
								26.06000000000006
							],
							[
								-97.52999999999992,
								25.84000000000009
							],
							[
								-97.14000830767071,
								25.8699974634784
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Mexico",
					"sov_a3": "MEX",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Mexico",
					"adm0_a3": "MEX",
					"geou_dif": 0,
					"geounit": "Mexico",
					"gu_a3": "MEX",
					"su_dif": 0,
					"subunit": "Mexico",
					"su_a3": "MEX",
					"brk_diff": 0,
					"name": "Mexico",
					"name_long": "Mexico",
					"brk_a3": "MEX",
					"brk_name": "Mexico",
					"brk_group": "",
					"abbrev": "Mex.",
					"postal": "MX",
					"formal_en": "United Mexican States",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Mexico",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 1,
					"mapcolor9": 7,
					"mapcolor13": 3,
					"pop_est": 111211789,
					"gdp_md_est": 1563000,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "4. Emerging region: MIKT",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MX",
					"iso_a3": "MEX",
					"iso_n3": "484",
					"un_a3": "484",
					"wb_a2": "MX",
					"wb_a3": "MEX",
					"woe_id": -99,
					"adm0_a3_is": "MEX",
					"adm0_a3_us": "MEX",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Central America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								20.590230000000076,
								41.85541000000006
							],
							[
								20.71731000000011,
								41.84711000000004
							],
							[
								20.762159999999994,
								42.05186000000003
							],
							[
								21.35270000000014,
								42.20679999999999
							],
							[
								21.57663598940212,
								42.24522439706186
							],
							[
								21.917080000000112,
								42.30363999999997
							],
							[
								22.38052575042468,
								42.32025950781508
							],
							[
								22.881373732197346,
								41.999297186850356
							],
							[
								22.952377150166512,
								41.33799388281119
							],
							[
								22.761770000000013,
								41.30480000000006
							],
							[
								22.597308383889015,
								41.130487168943205
							],
							[
								22.05537763844427,
								41.14986583105269
							],
							[
								21.674160597426976,
								40.931274522457954
							],
							[
								21.0200403174764,
								40.84272695572588
							],
							[
								20.60517999999996,
								41.08622000000008
							],
							[
								20.46315000000004,
								41.5150900000001
							],
							[
								20.590230000000076,
								41.85541000000006
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Macedonia",
					"sov_a3": "MKD",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Macedonia",
					"adm0_a3": "MKD",
					"geou_dif": 0,
					"geounit": "Macedonia",
					"gu_a3": "MKD",
					"su_dif": 0,
					"subunit": "Macedonia",
					"su_a3": "MKD",
					"brk_diff": 0,
					"name": "Macedonia",
					"name_long": "Macedonia",
					"brk_a3": "MKD",
					"brk_name": "Macedonia",
					"brk_group": "",
					"abbrev": "Mkd.",
					"postal": "MK",
					"formal_en": "Former Yugoslav Republic of Macedonia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Macedonia, FYR",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 3,
					"mapcolor9": 7,
					"mapcolor13": 3,
					"pop_est": 2066718,
					"gdp_md_est": 18780,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MK",
					"iso_a3": "MKD",
					"iso_n3": "807",
					"un_a3": "807",
					"wb_a2": "MK",
					"wb_a3": "MKD",
					"woe_id": -99,
					"adm0_a3_is": "MKD",
					"adm0_a3_us": "MKD",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-12.170750291380301,
								14.616834214735505
							],
							[
								-11.834207526079467,
								14.79909699142894
							],
							[
								-11.666078253617854,
								15.388208319556298
							],
							[
								-11.349095017939504,
								15.411256008358478
							],
							[
								-10.650791388379417,
								15.132745876521426
							],
							[
								-10.086846482778213,
								15.330485744686271
							],
							[
								-9.700255092802706,
								15.264107367407362
							],
							[
								-9.55023840985939,
								15.486496893775438
							],
							[
								-5.537744309908447,
								15.501689764869257
							],
							[
								-5.315277268891933,
								16.20185374599184
							],
							[
								-5.488522508150439,
								16.325102037007966
							],
							[
								-5.9711287093242476,
								20.64083344164763
							],
							[
								-6.453786586930335,
								24.956590684503425
							],
							[
								-4.923337368174231,
								24.974574082941
							],
							[
								-1.5500548974576134,
								22.792665920497384
							],
							[
								1.8232275732590324,
								20.610809434486043
							],
							[
								2.06099083823392,
								20.142233384679486
							],
							[
								2.683588494486429,
								19.856230170160117
							],
							[
								3.1466610042539003,
								19.693578599521445
							],
							[
								3.158133172222705,
								19.057364203360038
							],
							[
								4.267419467800039,
								19.155265204337
							],
							[
								4.2702099951438015,
								16.852227484601215
							],
							[
								3.7234216650634835,
								16.184283759012615
							],
							[
								3.6382589046464773,
								15.568119818580456
							],
							[
								2.749992709981484,
								15.409524847876696
							],
							[
								1.3855281917468576,
								15.323561102759172
							],
							[
								1.0157833186985101,
								14.968182277887948
							],
							[
								0.3748922054146817,
								14.92890818934613
							],
							[
								-0.2662572900305804,
								14.924308986872148
							],
							[
								-0.5158544580003479,
								15.116157741755728
							],
							[
								-1.0663634912056636,
								14.973815009007765
							],
							[
								-2.001035122068771,
								14.559008287000893
							],
							[
								-2.1918245100903846,
								14.246417548067356
							],
							[
								-2.9676944645205765,
								13.79815033615151
							],
							[
								-3.1037068343127596,
								13.541266791228594
							],
							[
								-3.522802700199861,
								13.337661647998615
							],
							[
								-4.006390753587226,
								13.472485459848116
							],
							[
								-4.28040503581488,
								13.228443508349741
							],
							[
								-4.427166103523803,
								12.542645575404295
							],
							[
								-5.220941941743121,
								11.713858954307227
							],
							[
								-5.1978425765086484,
								11.37514577885014
							],
							[
								-5.470564947929006,
								10.951269842976048
							],
							[
								-5.404341599946974,
								10.370736802609146
							],
							[
								-5.816926235365287,
								10.222554633012194
							],
							[
								-6.050452032892267,
								10.096360785355444
							],
							[
								-6.205222947606431,
								10.524060777219134
							],
							[
								-6.493965013037268,
								10.411302801958271
							],
							[
								-6.666460944027548,
								10.430810655148449
							],
							[
								-6.8505065576350574,
								10.138993841996239
							],
							[
								-7.622759161804809,
								10.147236232946796
							],
							[
								-7.899589809592372,
								10.297382106970828
							],
							[
								-8.029943610048619,
								10.206534939001713
							],
							[
								-8.33537716310974,
								10.494811916541934
							],
							[
								-8.282357143578281,
								10.792597357623846
							],
							[
								-8.407310756860028,
								10.909256903522762
							],
							[
								-8.620321010767128,
								10.810890814655183
							],
							[
								-8.581305304386774,
								11.136245632364805
							],
							[
								-8.376304897484914,
								11.393645941610629
							],
							[
								-8.786099005559464,
								11.812560939984706
							],
							[
								-8.90526485842453,
								12.088358059126437
							],
							[
								-9.127473517279583,
								12.308060411015333
							],
							[
								-9.327616339546012,
								12.334286200403454
							],
							[
								-9.567911749703214,
								12.194243068892476
							],
							[
								-9.890992804392013,
								12.060478623904972
							],
							[
								-10.165213792348837,
								11.844083563682744
							],
							[
								-10.593223842806282,
								11.92397532800598
							],
							[
								-10.870829637078215,
								12.17788747807211
							],
							[
								-11.03655595543826,
								12.211244615116515
							],
							[
								-11.297573614944511,
								12.077971096235771
							],
							[
								-11.456168585648271,
								12.076834214725338
							],
							[
								-11.51394283695059,
								12.442987575729418
							],
							[
								-11.467899135778524,
								12.754518947800975
							],
							[
								-11.55339779300543,
								13.141213690641067
							],
							[
								-11.927716030311615,
								13.422075100147396
							],
							[
								-12.12488745772126,
								13.994727484589788
							],
							[
								-12.170750291380301,
								14.616834214735505
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Mali",
					"sov_a3": "MLI",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Mali",
					"adm0_a3": "MLI",
					"geou_dif": 0,
					"geounit": "Mali",
					"gu_a3": "MLI",
					"su_dif": 0,
					"subunit": "Mali",
					"su_a3": "MLI",
					"brk_diff": 0,
					"name": "Mali",
					"name_long": "Mali",
					"brk_a3": "MLI",
					"brk_name": "Mali",
					"brk_group": "",
					"abbrev": "Mali",
					"postal": "ML",
					"formal_en": "Republic of Mali",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Mali",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 1,
					"mapcolor13": 7,
					"pop_est": 12666987,
					"gdp_md_est": 14590,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "ML",
					"iso_a3": "MLI",
					"iso_n3": "466",
					"un_a3": "466",
					"wb_a2": "ML",
					"wb_a3": "MLI",
					"woe_id": -99,
					"adm0_a3_is": "MLI",
					"adm0_a3_us": "MLI",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 4,
					"long_len": 4,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								98.55355065307305,
								9.932959906448545
							],
							[
								98.45717410684873,
								10.67526601810515
							],
							[
								98.76454552612078,
								11.441291612183749
							],
							[
								98.42833865762985,
								12.032986761925685
							],
							[
								98.50957400919268,
								13.122377631070677
							],
							[
								98.1036039571077,
								13.640459703012851
							],
							[
								97.77773237507517,
								14.837285874892642
							],
							[
								97.59707156778276,
								16.10056793869977
							],
							[
								97.1645398294998,
								16.92873444260934
							],
							[
								96.505768670643,
								16.42724050543285
							],
							[
								95.3693522481124,
								15.7143899601826
							],
							[
								94.80840457558412,
								15.80345429123764
							],
							[
								94.18880415240454,
								16.037936102762018
							],
							[
								94.53348595579135,
								17.277240301985728
							],
							[
								94.32481652219676,
								18.2135139022499
							],
							[
								93.54098839719364,
								19.366492621330025
							],
							[
								93.66325483599621,
								19.726961574781996
							],
							[
								93.07827762245219,
								19.855144965081976
							],
							[
								92.36855350135562,
								20.670883287025347
							],
							[
								92.30323449093868,
								21.47548533780982
							],
							[
								92.65225711463799,
								21.324047552978485
							],
							[
								92.67272098182556,
								22.041238918541254
							],
							[
								93.16612755734837,
								22.278459580977103
							],
							[
								93.06029422401463,
								22.70311066333557
							],
							[
								93.28632693885928,
								23.043658352139005
							],
							[
								93.3251876159428,
								24.078556423432204
							],
							[
								94.10674197792507,
								23.85074087167348
							],
							[
								94.55265791217164,
								24.675238348890336
							],
							[
								94.60324913938538,
								25.162495428970402
							],
							[
								95.1551534362626,
								26.001307277932085
							],
							[
								95.12476769407496,
								26.5735720891323
							],
							[
								96.41936567585097,
								27.264589341739224
							],
							[
								97.1339990580153,
								27.083773505149964
							],
							[
								97.0519885599681,
								27.69905894623315
							],
							[
								97.40256147663614,
								27.882536119085444
							],
							[
								97.32711388549004,
								28.26158274994634
							],
							[
								97.91198774616944,
								28.335945136014345
							],
							[
								98.2462309102333,
								27.74722138112918
							],
							[
								98.68269005737046,
								27.50881216075062
							],
							[
								98.71209394734451,
								26.743535874940267
							],
							[
								98.67183800658916,
								25.918702500913525
							],
							[
								97.72460900267914,
								25.083637193293
							],
							[
								97.60471967976198,
								23.897404690033042
							],
							[
								98.66026248575577,
								24.063286037689966
							],
							[
								98.89874922078278,
								23.14272207284253
							],
							[
								99.5319922220874,
								22.94903880461258
							],
							[
								99.24089887898725,
								22.11831431730458
							],
							[
								99.98348921102149,
								21.7429367131364
							],
							[
								100.41653771362738,
								21.558839423096614
							],
							[
								101.15003299357825,
								21.849984442629022
							],
							[
								101.18000532430754,
								21.436572984294028
							],
							[
								100.32910119018953,
								20.786121731036232
							],
							[
								100.11598758341785,
								20.417849636308187
							],
							[
								99.54330936075931,
								20.186597601802063
							],
							[
								98.95967573445488,
								19.752980658440947
							],
							[
								98.25372399291561,
								19.708203029860044
							],
							[
								97.79778283080441,
								18.627080389881755
							],
							[
								97.37589643757354,
								18.445437730375815
							],
							[
								97.85912275593486,
								17.567946071843664
							],
							[
								98.49376102091135,
								16.83783559820793
							],
							[
								98.90334842325676,
								16.17782420497612
							],
							[
								98.53737592976572,
								15.308497422746084
							],
							[
								98.1920740091914,
								15.123702500870351
							],
							[
								98.43081912637987,
								14.622027696180837
							],
							[
								99.09775516153876,
								13.827502549693278
							],
							[
								99.21201175333609,
								13.269293728076464
							],
							[
								99.19635379435167,
								12.80474843998867
							],
							[
								99.58728600463972,
								11.892762762901697
							],
							[
								99.03812055867398,
								10.960545762572437
							],
							[
								98.55355065307305,
								9.932959906448545
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Myanmar",
					"sov_a3": "MMR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Myanmar",
					"adm0_a3": "MMR",
					"geou_dif": 0,
					"geounit": "Myanmar",
					"gu_a3": "MMR",
					"su_dif": 0,
					"subunit": "Myanmar",
					"su_a3": "MMR",
					"brk_diff": 0,
					"name": "Myanmar",
					"name_long": "Myanmar",
					"brk_a3": "MMR",
					"brk_name": "Myanmar",
					"brk_group": "",
					"abbrev": "Myan.",
					"postal": "MM",
					"formal_en": "Republic of the Union of Myanmar",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Myanmar",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 2,
					"mapcolor9": 5,
					"mapcolor13": 13,
					"pop_est": 48137741,
					"gdp_md_est": 55130,
					"pop_year": -99,
					"lastcensus": 1983,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MM",
					"iso_a3": "MMR",
					"iso_n3": "104",
					"un_a3": "104",
					"wb_a2": "MM",
					"wb_a3": "MMR",
					"woe_id": -99,
					"adm0_a3_is": "MMR",
					"adm0_a3_us": "MMR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								19.73805138517963,
								42.68824738216557
							],
							[
								19.3044900000001,
								42.19574000000006
							],
							[
								19.37177000000014,
								41.87754999999993
							],
							[
								19.162459999999953,
								41.95502000000005
							],
							[
								18.88214000000005,
								42.281510000000026
							],
							[
								18.450000000000045,
								42.48000000000002
							],
							[
								18.559999999999945,
								42.64999999999998
							],
							[
								18.706480000000056,
								43.200109999999995
							],
							[
								19.03165000000007,
								43.432529999999986
							],
							[
								19.218519999999955,
								43.52384000000001
							],
							[
								19.483889999999974,
								43.35229000000004
							],
							[
								19.629999999999995,
								43.21377997027054
							],
							[
								19.958570000000066,
								43.106040000000064
							],
							[
								20.339800000000082,
								42.89852000000002
							],
							[
								20.257580000000075,
								42.81275000000011
							],
							[
								20.070700000000045,
								42.58863000000008
							],
							[
								19.801613396898688,
								42.50009349219084
							],
							[
								19.73805138517963,
								42.68824738216557
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Montenegro",
					"sov_a3": "MNE",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Montenegro",
					"adm0_a3": "MNE",
					"geou_dif": 0,
					"geounit": "Montenegro",
					"gu_a3": "MNE",
					"su_dif": 0,
					"subunit": "Montenegro",
					"su_a3": "MNE",
					"brk_diff": 0,
					"name": "Montenegro",
					"name_long": "Montenegro",
					"brk_a3": "MNE",
					"brk_name": "Montenegro",
					"brk_group": "",
					"abbrev": "Mont.",
					"postal": "ME",
					"formal_en": "Montenegro",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Montenegro",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 1,
					"mapcolor9": 4,
					"mapcolor13": 5,
					"pop_est": 672180,
					"gdp_md_est": 6816,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "ME",
					"iso_a3": "MNE",
					"iso_n3": "499",
					"un_a3": "499",
					"wb_a2": "ME",
					"wb_a3": "MNE",
					"woe_id": -99,
					"adm0_a3_is": "MNE",
					"adm0_a3_us": "MNE",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								112.89773969935439,
								49.54356537535699
							],
							[
								114.36245649623527,
								50.24830272073741
							],
							[
								114.96210981655018,
								50.140247300815126
							],
							[
								115.48569542853141,
								49.805177313834605
							],
							[
								116.67880089728618,
								49.88853139912139
							],
							[
								116.19180219936757,
								49.134598090199106
							],
							[
								115.48528201707306,
								48.13538259540344
							],
							[
								115.74283735561579,
								47.72654450132629
							],
							[
								116.30895267137323,
								47.85341014260284
							],
							[
								117.29550744025741,
								47.69770905210743
							],
							[
								118.06414269416672,
								48.06673045510369
							],
							[
								118.86657433479495,
								47.74706004494617
							],
							[
								119.7728239278975,
								47.04805878355013
							],
							[
								119.66326989143876,
								46.69267995867892
							],
							[
								118.87432579963873,
								46.80541209572365
							],
							[
								117.42170128791419,
								46.67273285581426
							],
							[
								116.71786828009886,
								46.38820241961521
							],
							[
								115.98509647020009,
								45.727235012386004
							],
							[
								114.46033165899607,
								45.339816799493825
							],
							[
								113.46390669154417,
								44.80889313412712
							],
							[
								112.43606245325881,
								45.01164561622429
							],
							[
								111.8733061056003,
								45.10207937273506
							],
							[
								111.34837690637946,
								44.45744171811009
							],
							[
								111.66773725794323,
								44.07317576758771
							],
							[
								111.82958784388137,
								43.74311839453952
							],
							[
								111.12968224492023,
								43.40683401140015
							],
							[
								110.41210330611528,
								42.87123362891103
							],
							[
								109.24359581913146,
								42.5194463160841
							],
							[
								107.74477257693795,
								42.48151581478187
							],
							[
								106.12931562706169,
								42.13432770442891
							],
							[
								104.96499393109347,
								41.59740957291635
							],
							[
								104.52228193564899,
								41.908346666016556
							],
							[
								103.31227827353482,
								41.9074681666676
							],
							[
								101.83304039917994,
								42.51487295182628
							],
							[
								100.84586551310827,
								42.66380442969145
							],
							[
								99.51581749878004,
								42.524691473961724
							],
							[
								97.45175744017801,
								42.74888967546002
							],
							[
								96.34939578652781,
								42.725635280928685
							],
							[
								95.76245486855669,
								43.319449164394605
							],
							[
								95.30687544147153,
								44.24133087826547
							],
							[
								94.68892866412533,
								44.35233185482842
							],
							[
								93.4807336771413,
								44.975472113619965
							],
							[
								92.13389082231822,
								45.11507599545646
							],
							[
								90.9455395853343,
								45.28607330991028
							],
							[
								90.58576826371828,
								45.71971609148753
							],
							[
								90.97080936072501,
								46.88814606382293
							],
							[
								90.28082563676392,
								47.69354909930793
							],
							[
								88.85429772334676,
								48.069081732772965
							],
							[
								88.01383222855173,
								48.599462795600616
							],
							[
								87.75126427607671,
								49.297197984405486
							],
							[
								88.80556684769552,
								49.47052073831242
							],
							[
								90.71366743364068,
								50.33181183532109
							],
							[
								92.23471154171968,
								50.80217072204172
							],
							[
								93.10421919146269,
								50.49529022887643
							],
							[
								94.14756635943563,
								50.48053660745709
							],
							[
								94.81594933469873,
								50.01343333597085
							],
							[
								95.81402794798399,
								49.977466539095715
							],
							[
								97.25972781778141,
								49.72606069599574
							],
							[
								98.23176150919156,
								50.422400621128745
							],
							[
								97.82573978067431,
								51.01099518493318
							],
							[
								98.86149051310034,
								52.04736603454669
							],
							[
								99.98173221232354,
								51.63400625264399
							],
							[
								100.88948042196262,
								51.51685578063832
							],
							[
								102.06522260946733,
								51.259920559283124
							],
							[
								102.25590864462433,
								50.51056061461868
							],
							[
								103.67654544476022,
								50.089966132195116
							],
							[
								104.6215523620817,
								50.275329494826074
							],
							[
								105.88659142458675,
								50.406019192092224
							],
							[
								106.88880415245535,
								50.27429596618023
							],
							[
								107.86817589725095,
								49.793705145865815
							],
							[
								108.47516727095129,
								49.28254771585074
							],
							[
								109.40244917199666,
								49.29296051695755
							],
							[
								110.66201053267878,
								49.13012807880587
							],
							[
								111.58123091028662,
								49.37796824807769
							],
							[
								112.89773969935439,
								49.54356537535699
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Mongolia",
					"sov_a3": "MNG",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Mongolia",
					"adm0_a3": "MNG",
					"geou_dif": 0,
					"geounit": "Mongolia",
					"gu_a3": "MNG",
					"su_dif": 0,
					"subunit": "Mongolia",
					"su_a3": "MNG",
					"brk_diff": 0,
					"name": "Mongolia",
					"name_long": "Mongolia",
					"brk_a3": "MNG",
					"brk_name": "Mongolia",
					"brk_group": "",
					"abbrev": "Mong.",
					"postal": "MN",
					"formal_en": "Mongolia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Mongolia",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 5,
					"mapcolor9": 5,
					"mapcolor13": 6,
					"pop_est": 3041142,
					"gdp_md_est": 9476,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MN",
					"iso_a3": "MNG",
					"iso_n3": "496",
					"un_a3": "496",
					"wb_a2": "MN",
					"wb_a3": "MNG",
					"woe_id": -99,
					"adm0_a3_is": "MNG",
					"adm0_a3_us": "MNG",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								34.55998904799935,
								-11.520020033415925
							],
							[
								35.31239790216904,
								-11.439146416879147
							],
							[
								36.51408165868426,
								-11.720938002166735
							],
							[
								36.775150994622805,
								-11.594537448780805
							],
							[
								37.47128421402661,
								-11.56875090906716
							],
							[
								37.82764489111139,
								-11.268769219612835
							],
							[
								38.42755659358775,
								-11.285202325081656
							],
							[
								39.521029900883775,
								-10.896853936408228
							],
							[
								40.31658857601719,
								-10.317096042525698
							],
							[
								40.47838748552303,
								-10.765440769089993
							],
							[
								40.437253045418686,
								-11.761710707245015
							],
							[
								40.56081139502857,
								-12.639176527561027
							],
							[
								40.59962039567975,
								-14.201975192931862
							],
							[
								40.775475294768995,
								-14.691764418194241
							],
							[
								40.4772506040126,
								-15.406294447493972
							],
							[
								40.08926395036522,
								-16.10077402106446
							],
							[
								39.45255862809705,
								-16.72089120856694
							],
							[
								38.53835086442152,
								-17.101023044505958
							],
							[
								37.41113284683888,
								-17.586368096591237
							],
							[
								36.28127933120936,
								-18.65968759529345
							],
							[
								35.89649661636406,
								-18.842260430580637
							],
							[
								35.198399692533144,
								-19.552811374593894
							],
							[
								34.78638349787005,
								-19.784011732667736
							],
							[
								34.70189253107284,
								-20.49704314543101
							],
							[
								35.176127150215365,
								-21.25436126066841
							],
							[
								35.37342776870574,
								-21.840837090748877
							],
							[
								35.385848253705404,
								-22.14
							],
							[
								35.562545536369086,
								-22.090000000000003
							],
							[
								35.533934767404304,
								-23.070787855727758
							],
							[
								35.37177412287238,
								-23.5353589820317
							],
							[
								35.60747033055563,
								-23.706563002214683
							],
							[
								35.45874555841962,
								-24.12260995859655
							],
							[
								35.04073489761066,
								-24.478350518493805
							],
							[
								34.21582400893547,
								-24.81631438568266
							],
							[
								33.01321007663901,
								-25.357573337507738
							],
							[
								32.574632195777866,
								-25.727318210556092
							],
							[
								32.66036339695009,
								-26.148584486599447
							],
							[
								32.91595503106569,
								-26.215867201443466
							],
							[
								32.830120477028885,
								-26.742191664336197
							],
							[
								32.07166548028107,
								-26.73382008230491
							],
							[
								31.98577924981197,
								-26.291779880480227
							],
							[
								31.83777794772806,
								-25.84333180105135
							],
							[
								31.75240848158188,
								-25.484283949487413
							],
							[
								31.930588820124253,
								-24.36941659922254
							],
							[
								31.670397983534656,
								-23.658969008073864
							],
							[
								31.19140913262129,
								-22.2515096981724
							],
							[
								32.244988234188014,
								-21.116488539313693
							],
							[
								32.50869306817344,
								-20.395292250248307
							],
							[
								32.65974327976258,
								-20.304290052982317
							],
							[
								32.772707960752626,
								-19.715592136313298
							],
							[
								32.61199425632489,
								-19.419382826416275
							],
							[
								32.65488569512715,
								-18.672089939043495
							],
							[
								32.84986087416439,
								-17.97905730557718
							],
							[
								32.847638787575846,
								-16.713398125884616
							],
							[
								32.32823896661023,
								-16.392074069893752
							],
							[
								31.8520406430406,
								-16.319417006091378
							],
							[
								31.636498243951195,
								-16.071990248277885
							],
							[
								31.17306399915768,
								-15.860943698797874
							],
							[
								30.338954705534544,
								-15.880839125230246
							],
							[
								30.27425581230511,
								-15.507786960515213
							],
							[
								30.17948123548183,
								-14.796099134991529
							],
							[
								33.214024692525214,
								-13.971860039936153
							],
							[
								33.789700148256685,
								-14.45183074306307
							],
							[
								34.064825473778626,
								-14.35995004644812
							],
							[
								34.45963341648854,
								-14.613009535381423
							],
							[
								34.51766604995231,
								-15.013708591372612
							],
							[
								34.307291294092096,
								-15.478641452702597
							],
							[
								34.38129194513405,
								-16.183559665596043
							],
							[
								35.033810255683534,
								-16.801299737213093
							],
							[
								35.339062941231646,
								-16.10744028083011
							],
							[
								35.77190473810836,
								-15.896858819240727
							],
							[
								35.68684533055594,
								-14.611045830954332
							],
							[
								35.26795617039801,
								-13.887834161029566
							],
							[
								34.907151320136165,
								-13.565424899960568
							],
							[
								34.55998904799935,
								-13.579997653866876
							],
							[
								34.28000613784198,
								-12.280025323132506
							],
							[
								34.55998904799935,
								-11.520020033415925
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Mozambique",
					"sov_a3": "MOZ",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Mozambique",
					"adm0_a3": "MOZ",
					"geou_dif": 0,
					"geounit": "Mozambique",
					"gu_a3": "MOZ",
					"su_dif": 0,
					"subunit": "Mozambique",
					"su_a3": "MOZ",
					"brk_diff": 0,
					"name": "Mozambique",
					"name_long": "Mozambique",
					"brk_a3": "MOZ",
					"brk_name": "Mozambique",
					"brk_group": "",
					"abbrev": "Moz.",
					"postal": "MZ",
					"formal_en": "Republic of Mozambique",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Mozambique",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 2,
					"mapcolor9": 1,
					"mapcolor13": 4,
					"pop_est": 21669278,
					"gdp_md_est": 18940,
					"pop_year": -99,
					"lastcensus": 2007,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MZ",
					"iso_a3": "MOZ",
					"iso_n3": "508",
					"un_a3": "508",
					"wb_a2": "MZ",
					"wb_a3": "MOZ",
					"woe_id": -99,
					"adm0_a3_is": "MOZ",
					"adm0_a3_us": "MOZ",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-12.170750291380301,
								14.616834214735505
							],
							[
								-12.830658331747516,
								15.303691514542948
							],
							[
								-13.435737677453062,
								16.03938304286619
							],
							[
								-14.099521450242179,
								16.304302273010492
							],
							[
								-14.577347581428981,
								16.59826365810281
							],
							[
								-15.135737270558819,
								16.587282416240782
							],
							[
								-15.623666144258692,
								16.369337063049812
							],
							[
								-16.12069007004193,
								16.455662543193384
							],
							[
								-16.463098110407884,
								16.13503611903846
							],
							[
								-16.549707810929064,
								16.673892116761962
							],
							[
								-16.270551723688357,
								17.166962795474873
							],
							[
								-16.14634741867485,
								18.108481553616656
							],
							[
								-16.256883307347167,
								19.096715806550307
							],
							[
								-16.37765112961327,
								19.593817246981985
							],
							[
								-16.277838100641517,
								20.0925206568147
							],
							[
								-16.536323614965468,
								20.567866319251493
							],
							[
								-17.06342322434257,
								20.999752102130827
							],
							[
								-16.845193650773993,
								21.33332347257488
							],
							[
								-12.929101935263532,
								21.327070624267563
							],
							[
								-13.118754441774712,
								22.771220201096256
							],
							[
								-12.874221564169575,
								23.284832261645178
							],
							[
								-11.937224493853321,
								23.374594224536168
							],
							[
								-11.96941891117116,
								25.933352769468268
							],
							[
								-8.6872936670174,
								25.881056219988906
							],
							[
								-8.684399786809053,
								27.395744126896005
							],
							[
								-4.923337368174231,
								24.974574082941
							],
							[
								-6.453786586930335,
								24.956590684503425
							],
							[
								-5.9711287093242476,
								20.64083344164763
							],
							[
								-5.488522508150439,
								16.325102037007966
							],
							[
								-5.315277268891933,
								16.20185374599184
							],
							[
								-5.537744309908447,
								15.501689764869257
							],
							[
								-9.55023840985939,
								15.486496893775438
							],
							[
								-9.700255092802706,
								15.264107367407362
							],
							[
								-10.086846482778213,
								15.330485744686271
							],
							[
								-10.650791388379417,
								15.132745876521426
							],
							[
								-11.349095017939504,
								15.411256008358478
							],
							[
								-11.666078253617854,
								15.388208319556298
							],
							[
								-11.834207526079467,
								14.79909699142894
							],
							[
								-12.170750291380301,
								14.616834214735505
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Mauritania",
					"sov_a3": "MRT",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Mauritania",
					"adm0_a3": "MRT",
					"geou_dif": 0,
					"geounit": "Mauritania",
					"gu_a3": "MRT",
					"su_dif": 0,
					"subunit": "Mauritania",
					"su_a3": "MRT",
					"brk_diff": 0,
					"name": "Mauritania",
					"name_long": "Mauritania",
					"brk_a3": "MRT",
					"brk_name": "Mauritania",
					"brk_group": "",
					"abbrev": "Mrt.",
					"postal": "MR",
					"formal_en": "Islamic Republic of Mauritania",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Mauritania",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 3,
					"mapcolor9": 2,
					"mapcolor13": 1,
					"pop_est": 3129486,
					"gdp_md_est": 6308,
					"pop_year": -99,
					"lastcensus": 2000,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MR",
					"iso_a3": "MRT",
					"iso_n3": "478",
					"un_a3": "478",
					"wb_a2": "MR",
					"wb_a3": "MRT",
					"woe_id": -99,
					"adm0_a3_is": "MRT",
					"adm0_a3_us": "MRT",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								34.55998904799935,
								-11.520020033415925
							],
							[
								34.28000613784198,
								-12.280025323132506
							],
							[
								34.55998904799935,
								-13.579997653866876
							],
							[
								34.907151320136165,
								-13.565424899960568
							],
							[
								35.26795617039801,
								-13.887834161029566
							],
							[
								35.68684533055594,
								-14.611045830954332
							],
							[
								35.77190473810836,
								-15.896858819240727
							],
							[
								35.339062941231646,
								-16.10744028083011
							],
							[
								35.033810255683534,
								-16.801299737213093
							],
							[
								34.38129194513405,
								-16.183559665596043
							],
							[
								34.307291294092096,
								-15.478641452702597
							],
							[
								34.51766604995231,
								-15.013708591372612
							],
							[
								34.45963341648854,
								-14.613009535381423
							],
							[
								34.064825473778626,
								-14.35995004644812
							],
							[
								33.789700148256685,
								-14.45183074306307
							],
							[
								33.214024692525214,
								-13.971860039936153
							],
							[
								32.68816531752313,
								-13.712857761289277
							],
							[
								32.991764357237884,
								-12.783870537978274
							],
							[
								33.306422153463075,
								-12.435778090060218
							],
							[
								33.114289178201915,
								-11.607198174692314
							],
							[
								33.315310499817286,
								-10.796549981329697
							],
							[
								33.48568769708359,
								-10.525558770391115
							],
							[
								33.2313879737753,
								-9.6767216935648
							],
							[
								32.75937544122132,
								-9.23059905358906
							],
							[
								33.73972903823045,
								-9.417150974162723
							],
							[
								33.94083772409654,
								-9.693673841980294
							],
							[
								34.28000613784198,
								-10.159999688358404
							],
							[
								34.55998904799935,
								-11.520020033415925
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Malawi",
					"sov_a3": "MWI",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Malawi",
					"adm0_a3": "MWI",
					"geou_dif": 0,
					"geounit": "Malawi",
					"gu_a3": "MWI",
					"su_dif": 0,
					"subunit": "Malawi",
					"su_a3": "MWI",
					"brk_diff": 0,
					"name": "Malawi",
					"name_long": "Malawi",
					"brk_a3": "MWI",
					"brk_name": "Malawi",
					"brk_group": "",
					"abbrev": "Mal.",
					"postal": "MW",
					"formal_en": "Republic of Malawi",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Malawi",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 3,
					"mapcolor9": 4,
					"mapcolor13": 5,
					"pop_est": 14268711,
					"gdp_md_est": 11810,
					"pop_year": -99,
					"lastcensus": 2008,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MW",
					"iso_a3": "MWI",
					"iso_n3": "454",
					"un_a3": "454",
					"wb_a2": "MW",
					"wb_a3": "MWI",
					"woe_id": -99,
					"adm0_a3_is": "MWI",
					"adm0_a3_us": "MWI",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									101.07551557821333,
									6.204867051615892
								],
								[
									101.15421878459384,
									5.691384182147715
								],
								[
									101.81428185425804,
									5.810808417174229
								],
								[
									102.14118696493645,
									6.221636053894656
								],
								[
									102.37114708863524,
									6.128205064310961
								],
								[
									102.9617053568667,
									5.524495144061078
								],
								[
									103.38121463421217,
									4.8550011255037475
								],
								[
									103.4385754740562,
									4.181605536308382
								],
								[
									103.33212202353488,
									3.7266979028429716
								],
								[
									103.42942874554055,
									3.3828687605890195
								],
								[
									103.50244754436889,
									2.7910185815502047
								],
								[
									103.85467410687036,
									2.515454006353764
								],
								[
									104.24793175661151,
									1.6311410587590558
								],
								[
									104.22881147666354,
									1.2930480004895344
								],
								[
									103.51970747275445,
									1.2263337264006822
								],
								[
									102.5736153503548,
									1.9671153833047441
								],
								[
									101.39063846232918,
									2.7608137068756236
								],
								[
									101.27353966675585,
									3.2702916528411805
								],
								[
									100.6954354187067,
									3.9391397159948696
								],
								[
									100.5574076680551,
									4.7672803816882805
								],
								[
									100.19670617065773,
									5.31249258058368
								],
								[
									100.30626020711654,
									6.040561835143876
								],
								[
									100.08575687052709,
									6.4644894474502905
								],
								[
									100.25959638875693,
									6.642824815289572
								],
								[
									101.07551557821333,
									6.204867051615892
								]
							]
						],
						[
							[
								[
									117.88203494677018,
									4.137551377779488
								],
								[
									117.01521447150637,
									4.3060940616994685
								],
								[
									115.86551720587678,
									4.306559149590157
								],
								[
									115.51907840379201,
									3.169238389494396
								],
								[
									115.13403730678525,
									2.8214818383862195
								],
								[
									114.6213554220175,
									1.4306881778988867
								],
								[
									113.80584964401956,
									1.217548732911041
								],
								[
									112.8598091980522,
									1.4977900252299463
								],
								[
									112.38025190638368,
									1.4101209578467575
								],
								[
									111.79754845586044,
									0.9044412296546511
								],
								[
									111.15913781132659,
									0.9764781762695094
								],
								[
									110.51406090702713,
									0.7731314152009929
								],
								[
									109.83022667850886,
									1.3381356876641917
								],
								[
									109.66326012577375,
									2.006466986494985
								],
								[
									110.39613528853707,
									1.663774725751395
								],
								[
									111.1688529805975,
									1.8506367049187844
								],
								[
									111.3700810079421,
									2.6973033715888732
								],
								[
									111.79692833867287,
									2.885896511238073
								],
								[
									112.99561486211527,
									3.1023949243248694
								],
								[
									113.71293541875875,
									3.8935094262811276
								],
								[
									114.20401655482843,
									4.52587392823682
								],
								[
									114.65959598191355,
									4.00763682699781
								],
								[
									114.8695573263154,
									4.348313706881953
								],
								[
									115.34746097215069,
									4.316636053887009
								],
								[
									115.40570031134362,
									4.955227565933825
								],
								[
									115.45071048386981,
									5.447729803891562
								],
								[
									116.22074100145099,
									6.143191229675622
								],
								[
									116.72510298061977,
									6.924771429873999
								],
								[
									117.12962609260049,
									6.928052883324568
								],
								[
									117.64339318244632,
									6.422166449403306
								],
								[
									117.68907514859237,
									5.987490139180181
								],
								[
									118.34769127815221,
									5.708695786965464
								],
								[
									119.18190392463995,
									5.407835598162251
								],
								[
									119.11069380094173,
									5.016128241389865
								],
								[
									118.43972700406411,
									4.96651886638962
								],
								[
									118.61832075406485,
									4.478202419447541
								],
								[
									117.88203494677018,
									4.137551377779488
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Malaysia",
					"sov_a3": "MYS",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Malaysia",
					"adm0_a3": "MYS",
					"geou_dif": 0,
					"geounit": "Malaysia",
					"gu_a3": "MYS",
					"su_dif": 0,
					"subunit": "Malaysia",
					"su_a3": "MYS",
					"brk_diff": 0,
					"name": "Malaysia",
					"name_long": "Malaysia",
					"brk_a3": "MYS",
					"brk_name": "Malaysia",
					"brk_group": "",
					"abbrev": "Malay.",
					"postal": "MY",
					"formal_en": "Malaysia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Malaysia",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 4,
					"mapcolor9": 3,
					"mapcolor13": 6,
					"pop_est": 25715819,
					"gdp_md_est": 384300,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "MY",
					"iso_a3": "MYS",
					"iso_n3": "458",
					"un_a3": "458",
					"wb_a2": "MY",
					"wb_a3": "MYS",
					"woe_id": -99,
					"adm0_a3_is": "MYS",
					"adm0_a3_us": "MYS",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								16.344976840895242,
								-28.5767050106977
							],
							[
								15.601818068105816,
								-27.821247247022804
							],
							[
								15.21047244635946,
								-27.090955905874047
							],
							[
								14.989710727608553,
								-26.117371921495156
							],
							[
								14.743214145576331,
								-25.39292001719538
							],
							[
								14.408144158595833,
								-23.853014011329847
							],
							[
								14.385716586981149,
								-22.65665292734069
							],
							[
								14.257714064194175,
								-22.111208184499958
							],
							[
								13.86864220546866,
								-21.699036960539978
							],
							[
								13.35249799973744,
								-20.872834161057504
							],
							[
								12.826845330464494,
								-19.673165785401665
							],
							[
								12.608564080463621,
								-19.0453488094877
							],
							[
								11.794918654028066,
								-18.069129327061916
							],
							[
								11.734198846085121,
								-17.301889336824473
							],
							[
								12.215461460019355,
								-17.111668389558083
							],
							[
								12.814081251688407,
								-16.94134286872407
							],
							[
								13.462362094789967,
								-16.971211846588773
							],
							[
								14.05850141770901,
								-17.423380629142663
							],
							[
								14.209706658595024,
								-17.35310068122572
							],
							[
								18.263309360434164,
								-17.309950860262006
							],
							[
								18.956186964603603,
								-17.789094740472258
							],
							[
								21.377176141045567,
								-17.930636488519696
							],
							[
								23.215048455506064,
								-17.523116143465984
							],
							[
								24.033861525170778,
								-17.295843194246324
							],
							[
								24.682349074001507,
								-17.353410739819473
							],
							[
								25.07695031098226,
								-17.57882333747662
							],
							[
								25.08444339366457,
								-17.661815687737374
							],
							[
								24.520705193792537,
								-17.887124932529936
							],
							[
								24.217364536239213,
								-17.88934701911849
							],
							[
								23.579005568137717,
								-18.28126108162006
							],
							[
								23.1968583513393,
								-17.869038181227786
							],
							[
								21.655040317478978,
								-18.219146010005225
							],
							[
								20.910641310314535,
								-18.252218926672022
							],
							[
								20.88113406747587,
								-21.814327080983148
							],
							[
								19.89545779794068,
								-21.84915699634787
							],
							[
								19.895767856534434,
								-24.76779021576059
							],
							[
								19.894734327888614,
								-28.461104831660776
							],
							[
								19.002127312911085,
								-28.972443129188868
							],
							[
								18.464899122804752,
								-29.04546192801728
							],
							[
								17.83615197110953,
								-28.85637786226132
							],
							[
								17.387497185951503,
								-28.78351409272978
							],
							[
								17.218928663815404,
								-28.35594329194681
							],
							[
								16.824017368240902,
								-28.08216155366447
							],
							[
								16.344976840895242,
								-28.5767050106977
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Namibia",
					"sov_a3": "NAM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Namibia",
					"adm0_a3": "NAM",
					"geou_dif": 0,
					"geounit": "Namibia",
					"gu_a3": "NAM",
					"su_dif": 0,
					"subunit": "Namibia",
					"su_a3": "NAM",
					"brk_diff": 0,
					"name": "Namibia",
					"name_long": "Namibia",
					"brk_a3": "NAM",
					"brk_name": "Namibia",
					"brk_group": "",
					"abbrev": "Nam.",
					"postal": "NA",
					"formal_en": "Republic of Namibia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Namibia",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 1,
					"mapcolor9": 1,
					"mapcolor13": 7,
					"pop_est": 2108665,
					"gdp_md_est": 13250,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "NA",
					"iso_a3": "NAM",
					"iso_n3": "516",
					"un_a3": "516",
					"wb_a2": "NA",
					"wb_a3": "NAM",
					"woe_id": -99,
					"adm0_a3_is": "NAM",
					"adm0_a3_us": "NAM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Southern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								165.77998986232637,
								-21.08000497811563
							],
							[
								166.59999148993384,
								-21.700018812753527
							],
							[
								167.1200114280869,
								-22.15999073658349
							],
							[
								166.7400346214448,
								-22.39997608814695
							],
							[
								166.18973229396866,
								-22.129708347260454
							],
							[
								165.47437544175222,
								-21.679606621998232
							],
							[
								164.82981530177568,
								-21.14981983814195
							],
							[
								164.16799523341365,
								-20.444746595951628
							],
							[
								164.029605747736,
								-20.105645847252354
							],
							[
								164.45996707586272,
								-20.1200118954295
							],
							[
								165.02003624904205,
								-20.45999114347773
							],
							[
								165.46000939357512,
								-20.80002206795826
							],
							[
								165.77998986232637,
								-21.08000497811563
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "France",
					"sov_a3": "FR1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Dependency",
					"admin": "New Caledonia",
					"adm0_a3": "NCL",
					"geou_dif": 0,
					"geounit": "New Caledonia",
					"gu_a3": "NCL",
					"su_dif": 0,
					"subunit": "New Caledonia",
					"su_a3": "NCL",
					"brk_diff": 0,
					"name": "New Caledonia",
					"name_long": "New Caledonia",
					"brk_a3": "NCL",
					"brk_name": "New Caledonia",
					"brk_group": "",
					"abbrev": "New C.",
					"postal": "NC",
					"formal_en": "New Caledonia",
					"formal_fr": "Nouvelle-Calédonie",
					"note_adm0": "Fr.",
					"note_brk": "",
					"name_sort": "New Caledonia",
					"name_alt": "",
					"mapcolor7": 7,
					"mapcolor8": 5,
					"mapcolor9": 9,
					"mapcolor13": 11,
					"pop_est": 227436,
					"gdp_md_est": 3158,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "NC",
					"iso_a3": "NCL",
					"iso_n3": "540",
					"un_a3": "540",
					"wb_a2": "NC",
					"wb_a3": "NCL",
					"woe_id": -99,
					"adm0_a3_is": "NCL",
					"adm0_a3_us": "NCL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Oceania",
					"region_un": "Oceania",
					"subregion": "Melanesia",
					"region_wb": "East Asia & Pacific",
					"name_len": 13,
					"long_len": 13,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": -99
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								11.9995056494717,
								23.471668402596435
							],
							[
								13.581424594790462,
								23.04050608976928
							],
							[
								14.143870883855243,
								22.491288967371133
							],
							[
								14.851300000000037,
								22.862950000000126
							],
							[
								15.096887648181848,
								21.30851878507491
							],
							[
								15.471076694407316,
								21.048457139565983
							],
							[
								15.487148064850146,
								20.730414537025638
							],
							[
								15.903246697664315,
								20.387618923417506
							],
							[
								15.685740594147774,
								19.957180080642388
							],
							[
								15.30044111497972,
								17.927949937405003
							],
							[
								15.247731154041844,
								16.627305813050782
							],
							[
								13.972201775781684,
								15.684365953021143
							],
							[
								13.540393507550789,
								14.367133693901224
							],
							[
								13.956698846094127,
								13.996691189016929
							],
							[
								13.95447675950561,
								13.353448798063766
							],
							[
								14.595781284247607,
								13.33042694747786
							],
							[
								14.495787387762903,
								12.859396267137356
							],
							[
								14.21353071458475,
								12.802035427293333
							],
							[
								14.18133629726691,
								12.483656927943173
							],
							[
								13.995352817448293,
								12.461565253138303
							],
							[
								13.318701613018561,
								13.556356309457954
							],
							[
								13.083987257548813,
								13.596147162322495
							],
							[
								12.30207116054055,
								13.037189032437539
							],
							[
								11.527803175511508,
								13.32898000737356
							],
							[
								10.989593133191534,
								13.387322699431195
							],
							[
								10.701031935273818,
								13.246917832894042
							],
							[
								10.11481448735475,
								13.277251898649467
							],
							[
								9.52492801274309,
								12.851102199754564
							],
							[
								9.014933302454438,
								12.826659247280418
							],
							[
								7.804671258178871,
								13.343526923063735
							],
							[
								7.3307466976300475,
								13.098038031461215
							],
							[
								6.820441928747812,
								13.115091254117601
							],
							[
								6.4454260596057225,
								13.492768459522722
							],
							[
								5.443058302440136,
								13.865923977102227
							],
							[
								4.368343540066007,
								13.747481594289411
							],
							[
								4.107945997747379,
								13.531215725147945
							],
							[
								3.967282749048934,
								12.956108710171577
							],
							[
								3.6806335791259244,
								12.55290334721417
							],
							[
								3.611180454125588,
								11.660167141155966
							],
							[
								2.8486430192265857,
								12.23563589115821
							],
							[
								2.4901636084180154,
								12.23305206954359
							],
							[
								2.1544735042499497,
								11.940150051313424
							],
							[
								2.177107781593918,
								12.625017808477537
							],
							[
								1.024103224297619,
								12.851825669806601
							],
							[
								0.993045688490156,
								13.335749620003867
							],
							[
								0.42992760580551703,
								13.988733018443895
							],
							[
								0.29564639649521496,
								14.444234930880668
							],
							[
								0.374892205414767,
								14.928908189346146
							],
							[
								1.0157833186984817,
								14.96818227788799
							],
							[
								1.385528191746971,
								15.323561102759243
							],
							[
								2.749992709981541,
								15.409524847876753
							],
							[
								3.638258904646591,
								15.568119818580442
							],
							[
								3.723421665063597,
								16.184283759012658
							],
							[
								4.270209995143887,
								16.852227484601315
							],
							[
								4.267419467800096,
								19.155265204337127
							],
							[
								5.677565952180714,
								19.6012069767998
							],
							[
								8.57289310062987,
								21.56566071215923
							],
							[
								11.9995056494717,
								23.471668402596435
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Niger",
					"sov_a3": "NER",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Niger",
					"adm0_a3": "NER",
					"geou_dif": 0,
					"geounit": "Niger",
					"gu_a3": "NER",
					"su_dif": 0,
					"subunit": "Niger",
					"su_a3": "NER",
					"brk_diff": 0,
					"name": "Niger",
					"name_long": "Niger",
					"brk_a3": "NER",
					"brk_name": "Niger",
					"brk_group": "",
					"abbrev": "Niger",
					"postal": "NE",
					"formal_en": "Republic of Niger",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Niger",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 5,
					"mapcolor9": 3,
					"mapcolor13": 13,
					"pop_est": 15306252,
					"gdp_md_est": 10040,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "NE",
					"iso_a3": "NER",
					"iso_n3": "562",
					"un_a3": "562",
					"wb_a2": "NE",
					"wb_a3": "NER",
					"woe_id": -99,
					"adm0_a3_is": "NER",
					"adm0_a3_us": "NER",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								8.500287713259695,
								4.7719829370268485
							],
							[
								7.462108188515941,
								4.412108262546241
							],
							[
								7.0825964697644395,
								4.4646890324032285
							],
							[
								6.6980721370806,
								4.240594183769517
							],
							[
								5.898172641634687,
								4.262453314628985
							],
							[
								5.3628048030908815,
								4.887970689305959
							],
							[
								5.033574252959369,
								5.611802476418234
							],
							[
								4.325607130560684,
								6.2706511499234665
							],
							[
								3.574180128604553,
								6.258300482605719
							],
							[
								2.6917016943562544,
								6.258817246928629
							],
							[
								2.7490625342002204,
								7.870734361192888
							],
							[
								2.723792758809509,
								8.50684540448971
							],
							[
								2.912308383810256,
								9.137607937044322
							],
							[
								3.2203515967021015,
								9.444152533399702
							],
							[
								3.7054382666259187,
								10.063210354040208
							],
							[
								3.600070021182802,
								10.332186184119408
							],
							[
								3.7971122575117136,
								10.734745591673105
							],
							[
								3.572216424177469,
								11.32793935795152
							],
							[
								3.611180454125559,
								11.660167141155968
							],
							[
								3.6806335791258107,
								12.552903347214226
							],
							[
								3.9672827490488487,
								12.956108710171575
							],
							[
								4.107945997747322,
								13.531215725147831
							],
							[
								4.368343540066064,
								13.747481594289326
							],
							[
								5.443058302440164,
								13.865923977102298
							],
							[
								6.445426059605637,
								13.492768459522678
							],
							[
								6.820441928747754,
								13.115091254117518
							],
							[
								7.330746697630019,
								13.0980380314612
							],
							[
								7.804671258178786,
								13.343526923063747
							],
							[
								9.014933302454466,
								12.82665924728043
							],
							[
								9.524928012742947,
								12.851102199754479
							],
							[
								10.114814487354693,
								13.27725189864941
							],
							[
								10.701031935273706,
								13.246917832894084
							],
							[
								10.989593133191535,
								13.38732269943111
							],
							[
								11.527803175511394,
								13.328980007373588
							],
							[
								12.302071160540523,
								13.037189032437524
							],
							[
								13.08398725754887,
								13.596147162322566
							],
							[
								13.318701613018561,
								13.556356309457826
							],
							[
								13.99535281744835,
								12.461565253138346
							],
							[
								14.181336297266794,
								12.483656927943116
							],
							[
								14.577177768622533,
								12.085360826053503
							],
							[
								14.468192172918975,
								11.904751695193411
							],
							[
								14.415378859116684,
								11.572368882692075
							],
							[
								13.572949659894562,
								10.798565985553566
							],
							[
								13.308676385153918,
								10.160362046748928
							],
							[
								13.167599724997103,
								9.640626328973411
							],
							[
								12.955467970438974,
								9.417771714714704
							],
							[
								12.753671502339216,
								8.717762762888995
							],
							[
								12.218872104550599,
								8.305824082874324
							],
							[
								12.063946160539558,
								7.799808457872302
							],
							[
								11.839308709366803,
								7.397042344589437
							],
							[
								11.74577436691851,
								6.981382961449754
							],
							[
								11.058787876030351,
								6.6444267846905944
							],
							[
								10.497375115611419,
								7.0553577742755635
							],
							[
								10.118276808318257,
								7.03876963950988
							],
							[
								9.522705926154401,
								6.453482367372117
							],
							[
								9.233162876023044,
								6.444490668153335
							],
							[
								8.757532993208628,
								5.479665839047911
							],
							[
								8.500287713259695,
								4.7719829370268485
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Nigeria",
					"sov_a3": "NGA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Nigeria",
					"adm0_a3": "NGA",
					"geou_dif": 0,
					"geounit": "Nigeria",
					"gu_a3": "NGA",
					"su_dif": 0,
					"subunit": "Nigeria",
					"su_a3": "NGA",
					"brk_diff": 0,
					"name": "Nigeria",
					"name_long": "Nigeria",
					"brk_a3": "NGA",
					"brk_name": "Nigeria",
					"brk_group": "",
					"abbrev": "Nigeria",
					"postal": "NG",
					"formal_en": "Federal Republic of Nigeria",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Nigeria",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 2,
					"mapcolor9": 5,
					"mapcolor13": 2,
					"pop_est": 149229090,
					"gdp_md_est": 335400,
					"pop_year": -99,
					"lastcensus": 2006,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "NG",
					"iso_a3": "NGA",
					"iso_n3": "566",
					"un_a3": "566",
					"wb_a2": "NG",
					"wb_a3": "NGA",
					"woe_id": -99,
					"adm0_a3_is": "NGA",
					"adm0_a3_us": "NGA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 7,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-85.7125404528073,
								11.088444932494824
							],
							[
								-86.05848832878526,
								11.403438625529944
							],
							[
								-86.52584998243296,
								11.806876532432597
							],
							[
								-86.74599158399633,
								12.143961900272487
							],
							[
								-87.16751624220116,
								12.458257961471658
							],
							[
								-87.66849341505471,
								12.909909979702633
							],
							[
								-87.55746660027562,
								13.064551703336065
							],
							[
								-87.39238623731923,
								12.914018256069838
							],
							[
								-87.31665442579549,
								12.984685777228975
							],
							[
								-87.00576900912758,
								13.025794379117158
							],
							[
								-86.88055701368437,
								13.254204209847245
							],
							[
								-86.7338217841916,
								13.263092556201443
							],
							[
								-86.75508663607971,
								13.754845485890913
							],
							[
								-86.5207081774199,
								13.77848745366444
							],
							[
								-86.31214209668993,
								13.77135610600817
							],
							[
								-86.0962638007906,
								14.038187364147248
							],
							[
								-85.80129472526859,
								13.83605499923759
							],
							[
								-85.69866533073693,
								13.960078436738087
							],
							[
								-85.51441301140025,
								14.079011745657837
							],
							[
								-85.1653645494848,
								14.35436961512508
							],
							[
								-85.14875057650296,
								14.560196844943617
							],
							[
								-85.05278744173694,
								14.551541042534723
							],
							[
								-84.9245006985724,
								14.79049286545235
							],
							[
								-84.82003679069436,
								14.81958669683267
							],
							[
								-84.64958207877962,
								14.666805324761754
							],
							[
								-84.4493359036486,
								14.621614284722497
							],
							[
								-84.22834164095241,
								14.748764146376658
							],
							[
								-83.97572140169359,
								14.749435939996461
							],
							[
								-83.62858496777292,
								14.880073960830302
							],
							[
								-83.48998877636612,
								15.016267198135537
							],
							[
								-83.14721900097413,
								14.99582916916411
							],
							[
								-83.23323442252394,
								14.899866034398102
							],
							[
								-83.2841615465476,
								14.6766238468972
							],
							[
								-83.18212643098728,
								14.31070302983845
							],
							[
								-83.41249996614445,
								13.970077826386557
							],
							[
								-83.51983191601468,
								13.567699286345883
							],
							[
								-83.55220720084554,
								13.127054348193086
							],
							[
								-83.49851538769427,
								12.869292303921227
							],
							[
								-83.47332312695198,
								12.419087225794428
							],
							[
								-83.62610449902292,
								12.320850328007566
							],
							[
								-83.71961300325506,
								11.893124497927728
							],
							[
								-83.65085751009072,
								11.62903209070012
							],
							[
								-83.8554703437504,
								11.373311265503787
							],
							[
								-83.80893571647155,
								11.103043524617275
							],
							[
								-83.65561174186158,
								10.938764146361422
							],
							[
								-83.89505449088595,
								10.726839097532446
							],
							[
								-84.19017859570485,
								10.793450018756674
							],
							[
								-84.35593075228104,
								10.999225572142905
							],
							[
								-84.67306901725627,
								11.082657172078143
							],
							[
								-84.90300330273895,
								10.952303371621896
							],
							[
								-85.5618519762442,
								11.217119248901597
							],
							[
								-85.7125404528073,
								11.088444932494824
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Nicaragua",
					"sov_a3": "NIC",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Nicaragua",
					"adm0_a3": "NIC",
					"geou_dif": 0,
					"geounit": "Nicaragua",
					"gu_a3": "NIC",
					"su_dif": 0,
					"subunit": "Nicaragua",
					"su_a3": "NIC",
					"brk_diff": 0,
					"name": "Nicaragua",
					"name_long": "Nicaragua",
					"brk_a3": "NIC",
					"brk_name": "Nicaragua",
					"brk_group": "",
					"abbrev": "Nic.",
					"postal": "NI",
					"formal_en": "Republic of Nicaragua",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Nicaragua",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 1,
					"mapcolor13": 9,
					"pop_est": 5891199,
					"gdp_md_est": 16790,
					"pop_year": -99,
					"lastcensus": 2005,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "NI",
					"iso_a3": "NIC",
					"iso_n3": "558",
					"un_a3": "558",
					"wb_a2": "NI",
					"wb_a3": "NIC",
					"woe_id": -99,
					"adm0_a3_is": "NIC",
					"adm0_a3_us": "NIC",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Central America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								6.905139601274129,
								53.48216217713065
							],
							[
								7.092053256873896,
								53.144043280644894
							],
							[
								6.842869500362383,
								52.22844025329755
							],
							[
								6.589396599970826,
								51.852029120483394
							],
							[
								5.988658074577813,
								51.851615709025054
							],
							[
								6.15665815595878,
								50.80372101501058
							],
							[
								5.606975945670001,
								51.03729848896978
							],
							[
								4.973991326526914,
								51.47502370869813
							],
							[
								4.047071160507528,
								51.26725861266857
							],
							[
								3.3149711442285366,
								51.34575511331991
							],
							[
								3.8302885270431375,
								51.62054454203195
							],
							[
								4.705997348661185,
								53.091798407597764
							],
							[
								6.074182570020923,
								53.510403347378144
							],
							[
								6.905139601274129,
								53.48216217713065
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Netherlands",
					"sov_a3": "NL1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "Netherlands",
					"adm0_a3": "NLD",
					"geou_dif": 0,
					"geounit": "Netherlands",
					"gu_a3": "NLD",
					"su_dif": 0,
					"subunit": "Netherlands",
					"su_a3": "NLD",
					"brk_diff": 0,
					"name": "Netherlands",
					"name_long": "Netherlands",
					"brk_a3": "NLD",
					"brk_name": "Netherlands",
					"brk_group": "",
					"abbrev": "Neth.",
					"postal": "NL",
					"formal_en": "Kingdom of the Netherlands",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Netherlands",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 2,
					"mapcolor9": 2,
					"mapcolor13": 9,
					"pop_est": 16715999,
					"gdp_md_est": 672000,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "NL",
					"iso_a3": "NLD",
					"iso_n3": "528",
					"un_a3": "528",
					"wb_a2": "NL",
					"wb_a3": "NLD",
					"woe_id": -99,
					"adm0_a3_is": "NLD",
					"adm0_a3_us": "NLD",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Western Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 11,
					"long_len": 11,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									28.165547316202918,
									71.18547435168051
								],
								[
									31.293418409965483,
									70.45378774685992
								],
								[
									30.005435011522792,
									70.1862588568849
								],
								[
									31.101078728975125,
									69.55808014594487
								],
								[
									29.399580519332886,
									69.15691600206307
								],
								[
									28.591929559043194,
									69.0647769232867
								],
								[
									29.015572950971972,
									69.76649119737797
								],
								[
									27.73229210786789,
									70.1641930202963
								],
								[
									26.1796220232263,
									69.82529897732616
								],
								[
									25.689212680776393,
									69.09211375596902
								],
								[
									24.73567915212672,
									68.64955678982145
								],
								[
									23.662049594830762,
									68.89124746365053
								],
								[
									22.356237827247412,
									68.84174144151496
								],
								[
									21.24493615081073,
									69.37044302029312
								],
								[
									20.645592889089585,
									69.10624726020086
								],
								[
									20.025268995857914,
									69.06513865831272
								],
								[
									19.878559604581255,
									68.40719432237262
								],
								[
									17.99386844246439,
									68.56739126247734
								],
								[
									17.729181756265348,
									68.01055186631623
								],
								[
									16.76887861498554,
									68.01393667263139
								],
								[
									16.108712192456835,
									67.3024555528369
								],
								[
									15.108411492583059,
									66.19386688909543
								],
								[
									13.55568973150909,
									64.78702769638147
								],
								[
									13.919905226302205,
									64.44542064071612
								],
								[
									13.57191613124877,
									64.04911408146967
								],
								[
									12.579935336973932,
									64.06621898055835
								],
								[
									11.930569288794231,
									63.12831757267699
								],
								[
									11.992064243221535,
									61.800362453856565
								],
								[
									12.631146681375242,
									61.2935716823701
								],
								[
									12.3003658382749,
									60.11793284773006
								],
								[
									11.468271925511175,
									59.432393296946
								],
								[
									11.027368605196926,
									58.8561494004594
								],
								[
									10.356556837616097,
									59.46980703392538
								],
								[
									8.382000359743643,
									58.31328847923328
								],
								[
									7.048748406613299,
									58.078884182357285
								],
								[
									5.665835402050419,
									58.58815542259367
								],
								[
									5.308234490590735,
									59.66323191999382
								],
								[
									4.992078077829007,
									61.970998033284275
								],
								[
									5.912900424837886,
									62.614472968182696
								],
								[
									8.553411085655767,
									63.45400828719647
								],
								[
									10.527709181366788,
									64.48603831649748
								],
								[
									12.358346795306375,
									65.87972585719316
								],
								[
									14.761145867581604,
									67.81064158799515
								],
								[
									16.43592736172897,
									68.56320547146169
								],
								[
									19.184028354578516,
									69.81744415961782
								],
								[
									21.378416375420613,
									70.25516937934606
								],
								[
									23.023742303161583,
									70.20207184516627
								],
								[
									24.546543409938522,
									71.03049673123724
								],
								[
									26.37004967622181,
									70.98626170519537
								],
								[
									28.165547316202918,
									71.18547435168051
								]
							]
						],
						[
							[
								[
									24.724120000000028,
									77.85384999999997
								],
								[
									22.490319999999997,
									77.44492999999997
								],
								[
									20.726010000000002,
									77.67704
								],
								[
									21.416110000000003,
									77.93504000000001
								],
								[
									20.81189999999998,
									78.25462999999999
								],
								[
									22.884260000000012,
									78.45494000000005
								],
								[
									23.28134000000003,
									78.07953999999998
								],
								[
									24.724120000000028,
									77.85384999999997
								]
							]
						],
						[
							[
								[
									18.25183000000007,
									79.70175
								],
								[
									21.543829999999986,
									78.95611000000002
								],
								[
									19.027370000000047,
									78.56259999999997
								],
								[
									18.47172000000006,
									77.82669000000001
								],
								[
									17.594410000000067,
									77.63796000000002
								],
								[
									17.1182,
									76.80940999999999
								],
								[
									15.913150000000002,
									76.77044999999998
								],
								[
									13.76258999999996,
									77.38034999999996
								],
								[
									14.669560000000018,
									77.73564999999996
								],
								[
									13.170600000000036,
									78.02493000000004
								],
								[
									11.22231000000005,
									78.86930000000004
								],
								[
									10.444530000000015,
									79.65239000000003
								],
								[
									13.170770000000061,
									80.01046
								],
								[
									13.718520000000012,
									79.66039
								],
								[
									15.142820000000057,
									79.67431000000005
								],
								[
									15.522550000000024,
									80.01608000000004
								],
								[
									16.990849999999995,
									80.05085999999997
								],
								[
									18.25183000000007,
									79.70175
								]
							]
						],
						[
							[
								[
									25.447625359811894,
									80.40734039989451
								],
								[
									27.4075057309135,
									80.05640574820046
								],
								[
									25.92465050629818,
									79.51783397085455
								],
								[
									23.02446577321362,
									79.4000117052291
								],
								[
									20.075188429451885,
									79.56682322866726
								],
								[
									19.897266473070914,
									79.84236196564751
								],
								[
									18.462263624757924,
									79.85988027619442
								],
								[
									17.368015170977458,
									80.31889618602702
								],
								[
									20.455992059010697,
									80.59815562613224
								],
								[
									21.907944777115404,
									80.35767934846209
								],
								[
									22.919252557067438,
									80.6571442735935
								],
								[
									25.447625359811894,
									80.40734039989451
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Norway",
					"sov_a3": "NOR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Norway",
					"adm0_a3": "NOR",
					"geou_dif": 0,
					"geounit": "Norway",
					"gu_a3": "NOR",
					"su_dif": 0,
					"subunit": "Norway",
					"su_a3": "NOR",
					"brk_diff": 0,
					"name": "Norway",
					"name_long": "Norway",
					"brk_a3": "NOR",
					"brk_name": "Norway",
					"brk_group": "",
					"abbrev": "Nor.",
					"postal": "N",
					"formal_en": "Kingdom of Norway",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Norway",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 3,
					"mapcolor9": 8,
					"mapcolor13": 12,
					"pop_est": 4676305,
					"gdp_md_est": 276400,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "NO",
					"iso_a3": "NOR",
					"iso_n3": "578",
					"un_a3": "578",
					"wb_a2": "NO",
					"wb_a3": "NOR",
					"woe_id": -99,
					"adm0_a3_is": "NOR",
					"adm0_a3_us": "NOR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								88.12044070836987,
								27.876541652939594
							],
							[
								88.04313276566123,
								27.445818589786825
							],
							[
								88.17480431514092,
								26.81040517832595
							],
							[
								88.06023766474982,
								26.41461538340249
							],
							[
								87.2274719583663,
								26.397898057556077
							],
							[
								86.02439293817918,
								26.63098460540857
							],
							[
								85.25177859898338,
								26.726198431906344
							],
							[
								84.6750179381738,
								27.234901231387536
							],
							[
								83.30424889519955,
								27.36450572357556
							],
							[
								81.99998742058497,
								27.925479234319994
							],
							[
								81.05720258985203,
								28.416095282499043
							],
							[
								80.08842451367627,
								28.79447011974014
							],
							[
								80.4767212259174,
								29.72986522065534
							],
							[
								81.11125613802932,
								30.183480943313402
							],
							[
								81.52580447787474,
								30.42271698660863
							],
							[
								82.32751264845088,
								30.115268052688137
							],
							[
								83.33711510613719,
								29.463731594352197
							],
							[
								83.89899295444673,
								29.320226141877658
							],
							[
								84.23457970575015,
								28.839893703724698
							],
							[
								85.01163821812304,
								28.642773952747344
							],
							[
								85.82331994013151,
								28.203575954698707
							],
							[
								86.9545170430006,
								27.974261786403517
							],
							[
								88.12044070836987,
								27.876541652939594
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Nepal",
					"sov_a3": "NPL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Nepal",
					"adm0_a3": "NPL",
					"geou_dif": 0,
					"geounit": "Nepal",
					"gu_a3": "NPL",
					"su_dif": 0,
					"subunit": "Nepal",
					"su_a3": "NPL",
					"brk_diff": 0,
					"name": "Nepal",
					"name_long": "Nepal",
					"brk_a3": "NPL",
					"brk_name": "Nepal",
					"brk_group": "",
					"abbrev": "Nepal",
					"postal": "NP",
					"formal_en": "Nepal",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Nepal",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 2,
					"mapcolor9": 3,
					"mapcolor13": 12,
					"pop_est": 28563377,
					"gdp_md_est": 31080,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "NP",
					"iso_a3": "NPL",
					"iso_n3": "524",
					"un_a3": "524",
					"wb_a2": "NP",
					"wb_a3": "NPL",
					"woe_id": -99,
					"adm0_a3_is": "NPL",
					"adm0_a3_us": "NPL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Southern Asia",
					"region_wb": "South Asia",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									173.02037479074076,
									-40.919052422856424
								],
								[
									173.24723432850206,
									-41.331998793300784
								],
								[
									173.9584053897029,
									-40.92670053483562
								],
								[
									174.24758670480813,
									-41.34915536882167
								],
								[
									174.2485168805895,
									-41.770008233406756
								],
								[
									173.8764465680879,
									-42.233184096038826
								],
								[
									173.22273969959568,
									-42.970038344088564
								],
								[
									172.71124637277077,
									-43.372287693048506
								],
								[
									173.08011274647023,
									-43.853343601253584
								],
								[
									172.30858361235252,
									-43.865694268571346
								],
								[
									171.45292524646365,
									-44.24251881284373
								],
								[
									171.18513797432726,
									-44.89710418068489
								],
								[
									170.61669721911662,
									-45.90892872495971
								],
								[
									169.8314221540093,
									-46.3557748349876
								],
								[
									169.33233117093428,
									-46.641235446967855
								],
								[
									168.41135379462858,
									-46.61994475686359
								],
								[
									167.76374474514685,
									-46.29019744240921
								],
								[
									166.67688602118423,
									-46.21991749449225
								],
								[
									166.50914432196473,
									-45.85270476662622
								],
								[
									167.04642418850327,
									-45.11094125750867
								],
								[
									168.3037634625969,
									-44.12397307716613
								],
								[
									168.94940880765157,
									-43.93581918719143
								],
								[
									169.66781456937318,
									-43.55532561622634
								],
								[
									170.52491987536618,
									-43.03168832781283
								],
								[
									171.12508996000403,
									-42.51275359473779
								],
								[
									171.56971398344322,
									-41.767424411792135
								],
								[
									171.94870893787194,
									-41.51441659929115
								],
								[
									172.09722700427878,
									-40.95610442480968
								],
								[
									172.798579543344,
									-40.49396209082347
								],
								[
									173.02037479074076,
									-40.919052422856424
								]
							]
						],
						[
							[
								[
									174.61200890533055,
									-36.156397393540544
								],
								[
									175.3366158389272,
									-37.20909799575827
								],
								[
									175.35759647043753,
									-36.52619394302113
								],
								[
									175.8088867536425,
									-36.79894215265769
								],
								[
									175.95849002512753,
									-37.55538176854607
								],
								[
									176.76319542877658,
									-37.8812533505787
								],
								[
									177.43881310456052,
									-37.961248467766495
								],
								[
									178.0103544457087,
									-37.57982472102013
								],
								[
									178.51709354076283,
									-37.6953732236248
								],
								[
									178.27473107331386,
									-38.5828125953731
								],
								[
									177.97046023997936,
									-39.166342868812976
								],
								[
									177.20699262929915,
									-39.145775648760846
								],
								[
									176.93998050364704,
									-39.44973642350158
								],
								[
									177.03294640534014,
									-39.87994272233148
								],
								[
									176.88582360260526,
									-40.065977878582174
								],
								[
									176.50801720611938,
									-40.60480803808959
								],
								[
									176.0124402204403,
									-41.28962411882151
								],
								[
									175.239567499083,
									-41.68830779395324
								],
								[
									175.06789839100944,
									-41.42589487077508
								],
								[
									174.65097293527847,
									-41.28182097754545
								],
								[
									175.22763024322367,
									-40.459235528323404
								],
								[
									174.90015669179,
									-39.90893320084723
								],
								[
									173.82404666574402,
									-39.50885426204351
								],
								[
									173.85226199777534,
									-39.14660247167747
								],
								[
									174.5748018740804,
									-38.797683200842755
								],
								[
									174.74347374908106,
									-38.027807712558385
								],
								[
									174.69701663645063,
									-37.38112883885796
								],
								[
									174.29202843657922,
									-36.71109221776145
								],
								[
									174.31900353423558,
									-36.53482390721389
								],
								[
									173.84099653553582,
									-36.121980889634116
								],
								[
									173.0541711774596,
									-35.23712533950034
								],
								[
									172.63600548735374,
									-34.52910654066939
								],
								[
									173.00704227120949,
									-34.45066171645034
								],
								[
									173.5512984561075,
									-35.006183363587965
								],
								[
									174.3293904971263,
									-35.26549570082862
								],
								[
									174.61200890533055,
									-36.156397393540544
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "New Zealand",
					"sov_a3": "NZ1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "New Zealand",
					"adm0_a3": "NZL",
					"geou_dif": 0,
					"geounit": "New Zealand",
					"gu_a3": "NZL",
					"su_dif": 0,
					"subunit": "New Zealand",
					"su_a3": "NZL",
					"brk_diff": 0,
					"name": "New Zealand",
					"name_long": "New Zealand",
					"brk_a3": "NZL",
					"brk_name": "New Zealand",
					"brk_group": "",
					"abbrev": "N.Z.",
					"postal": "NZ",
					"formal_en": "New Zealand",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "New Zealand",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 3,
					"mapcolor9": 4,
					"mapcolor13": 4,
					"pop_est": 4213418,
					"gdp_md_est": 116700,
					"pop_year": -99,
					"lastcensus": 2006,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "NZ",
					"iso_a3": "NZL",
					"iso_n3": "554",
					"un_a3": "554",
					"wb_a2": "NZ",
					"wb_a3": "NZL",
					"woe_id": -99,
					"adm0_a3_is": "NZL",
					"adm0_a3_us": "NZL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Oceania",
					"region_un": "Oceania",
					"subregion": "Australia and New Zealand",
					"region_wb": "East Asia & Pacific",
					"name_len": 11,
					"long_len": 11,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									58.86114139184659,
									21.114034532144302
								],
								[
									58.48798587426697,
									20.42898590746711
								],
								[
									58.034318475176605,
									20.48143748624335
								],
								[
									57.826372511634105,
									20.243002427648634
								],
								[
									57.665762160070955,
									19.736004950433113
								],
								[
									57.78870039249338,
									19.06757029873765
								],
								[
									57.694390903560674,
									18.944709580963803
								],
								[
									57.234263950433814,
									18.947991034414258
								],
								[
									56.609650913321985,
									18.57426707607948
								],
								[
									56.512189162019496,
									18.087113348863937
								],
								[
									56.28352094912802,
									17.87606679938395
								],
								[
									55.6614917336307,
									17.88412832282154
								],
								[
									55.2699394061552,
									17.632309068263197
								],
								[
									55.274900343655105,
									17.228354397037663
								],
								[
									54.79100223167413,
									16.950696926333364
								],
								[
									54.239252964093765,
									17.044980577049984
								],
								[
									53.570508253804604,
									16.707662665264678
								],
								[
									53.10857262554751,
									16.65105113368898
								],
								[
									52.78218427919208,
									17.349742336491232
								],
								[
									52.00000980002224,
									19.000003363516072
								],
								[
									54.99998172386242,
									19.99999400479612
								],
								[
									55.66665937685988,
									22.00000112557231
								],
								[
									55.2083410988632,
									22.708329982997014
								],
								[
									55.234489373602884,
									23.110992743415352
								],
								[
									55.525841098864504,
									23.524869289640918
								],
								[
									55.528631626208295,
									23.933604030853502
								],
								[
									55.98121382022052,
									24.130542914317857
								],
								[
									55.804118686756254,
									24.269604193615294
								],
								[
									55.886232537668064,
									24.920830593357493
								],
								[
									56.396847365144,
									24.924732163995515
								],
								[
									56.84514041527606,
									24.241673081961494
								],
								[
									57.40345258975745,
									23.87859446867884
								],
								[
									58.13694786970834,
									23.74793060962884
								],
								[
									58.72921146020545,
									23.565667832935418
								],
								[
									59.18050174341036,
									22.99239533130546
								],
								[
									59.45009769067704,
									22.6602709009656
								],
								[
									59.80806033716286,
									22.533611965418203
								],
								[
									59.806148309168094,
									22.310524807214193
								],
								[
									59.44219119653641,
									21.714540513592084
								],
								[
									59.282407667889885,
									21.433885809814882
								],
								[
									58.86114139184659,
									21.114034532144302
								]
							]
						],
						[
							[
								[
									56.39142133975341,
									25.89599070892126
								],
								[
									56.26104170108093,
									25.714606431576755
								],
								[
									56.07082075381456,
									26.05546417897395
								],
								[
									56.36201744977936,
									26.39593435312895
								],
								[
									56.48567915225382,
									26.309117946878672
								],
								[
									56.39142133975341,
									25.89599070892126
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Oman",
					"sov_a3": "OMN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Oman",
					"adm0_a3": "OMN",
					"geou_dif": 0,
					"geounit": "Oman",
					"gu_a3": "OMN",
					"su_dif": 0,
					"subunit": "Oman",
					"su_a3": "OMN",
					"brk_diff": 0,
					"name": "Oman",
					"name_long": "Oman",
					"brk_a3": "OMN",
					"brk_name": "Oman",
					"brk_group": "",
					"abbrev": "Oman",
					"postal": "OM",
					"formal_en": "Sultanate of Oman",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Oman",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 1,
					"mapcolor13": 6,
					"pop_est": 3418085,
					"gdp_md_est": 66980,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "OM",
					"iso_a3": "OMN",
					"iso_n3": "512",
					"un_a3": "512",
					"wb_a2": "OM",
					"wb_a3": "OMN",
					"woe_id": -99,
					"adm0_a3_is": "OMN",
					"adm0_a3_us": "OMN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 4,
					"long_len": 4,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								75.15802778514092,
								37.13303091078912
							],
							[
								75.89689741405013,
								36.666806138651836
							],
							[
								76.19284834178569,
								35.89840342868783
							],
							[
								77.83745079947457,
								35.494009507787766
							],
							[
								76.87172163280403,
								34.65354401299274
							],
							[
								75.75706098826834,
								34.50492259372132
							],
							[
								74.24020267120497,
								34.748887030571254
							],
							[
								73.74994835805197,
								34.31769887952785
							],
							[
								74.10429365427734,
								33.44147329358685
							],
							[
								74.45155927927871,
								32.7648996038055
							],
							[
								75.25864179881322,
								32.2711054550405
							],
							[
								74.40592898956501,
								31.69263947196528
							],
							[
								74.42138024282028,
								30.979814764931177
							],
							[
								73.45063846221743,
								29.97641347911987
							],
							[
								72.8237516620847,
								28.961591701772054
							],
							[
								71.77766564320032,
								27.913180243434525
							],
							[
								70.61649620960193,
								27.989196275335868
							],
							[
								69.51439293811313,
								26.940965684511372
							],
							[
								70.16892662952202,
								26.491871649678842
							],
							[
								70.2828731627256,
								25.72222870533983
							],
							[
								70.84469933460284,
								25.21510203704352
							],
							[
								71.04324018746823,
								24.3565239527302
							],
							[
								68.84259931831878,
								24.35913361256094
							],
							[
								68.1766451353734,
								23.69196503345671
							],
							[
								67.44366661974547,
								23.94484365487699
							],
							[
								67.14544192898907,
								24.663611151624647
							],
							[
								66.37282758979327,
								25.42514089609385
							],
							[
								64.53040774929113,
								25.23703868255143
							],
							[
								62.90570071803461,
								25.21840932871021
							],
							[
								61.49736290878419,
								25.0782370061185
							],
							[
								61.87418745305655,
								26.239974880472104
							],
							[
								63.31663170761959,
								26.756532497661667
							],
							[
								63.2338977395203,
								27.21704702403071
							],
							[
								62.75542565292986,
								27.378923448184988
							],
							[
								62.72783043808599,
								28.25964488373539
							],
							[
								61.77186811711863,
								28.6993338078908
							],
							[
								61.36930870956494,
								29.303276272085924
							],
							[
								60.87424848820879,
								29.829238999952608
							],
							[
								62.54985680527278,
								29.31857249604431
							],
							[
								63.55026085801117,
								29.468330796826166
							],
							[
								64.14800215033125,
								29.340819200145972
							],
							[
								64.35041873561852,
								29.560030625928093
							],
							[
								65.0468620136161,
								29.472180691031905
							],
							[
								66.34647260932442,
								29.887943427036177
							],
							[
								66.38145755398602,
								30.738899237586452
							],
							[
								66.93889122911847,
								31.304911200479353
							],
							[
								67.68339358914747,
								31.30315420178142
							],
							[
								67.79268924344478,
								31.58293040620963
							],
							[
								68.55693200060932,
								31.713310044882018
							],
							[
								68.92667687365767,
								31.620189113892067
							],
							[
								69.31776411324256,
								31.901412258424443
							],
							[
								69.26252200712256,
								32.5019440780883
							],
							[
								69.68714725126486,
								33.105498969041236
							],
							[
								70.3235941913716,
								33.35853261975839
							],
							[
								69.9305432473596,
								34.02012014417511
							],
							[
								70.8818030129884,
								33.98885590263852
							],
							[
								71.15677330921346,
								34.34891144463215
							],
							[
								71.11501875192164,
								34.733125718722235
							],
							[
								71.61307620635071,
								35.153203436822864
							],
							[
								71.49876793812109,
								35.650563259416
							],
							[
								71.26234826038575,
								36.074387518857804
							],
							[
								71.84629194528392,
								36.50994232842986
							],
							[
								72.92002485544447,
								36.72000702569632
							],
							[
								74.06755171091783,
								36.83617564548845
							],
							[
								74.57589277537298,
								37.02084137628346
							],
							[
								75.15802778514092,
								37.13303091078912
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Pakistan",
					"sov_a3": "PAK",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Pakistan",
					"adm0_a3": "PAK",
					"geou_dif": 0,
					"geounit": "Pakistan",
					"gu_a3": "PAK",
					"su_dif": 0,
					"subunit": "Pakistan",
					"su_a3": "PAK",
					"brk_diff": 0,
					"name": "Pakistan",
					"name_long": "Pakistan",
					"brk_a3": "PAK",
					"brk_name": "Pakistan",
					"brk_group": "",
					"abbrev": "Pak.",
					"postal": "PK",
					"formal_en": "Islamic Republic of Pakistan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Pakistan",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 2,
					"mapcolor9": 3,
					"mapcolor13": 11,
					"pop_est": 176242949,
					"gdp_md_est": 427300,
					"pop_year": -99,
					"lastcensus": 1998,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PK",
					"iso_a3": "PAK",
					"iso_n3": "586",
					"un_a3": "586",
					"wb_a2": "PK",
					"wb_a3": "PAK",
					"woe_id": -99,
					"adm0_a3_is": "PAK",
					"adm0_a3_us": "PAK",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Southern Asia",
					"region_wb": "South Asia",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-77.88157141794525,
								7.223771267114785
							],
							[
								-78.21493608266012,
								7.512254950384161
							],
							[
								-78.42916073272607,
								8.052041123888927
							],
							[
								-78.18209570993864,
								8.319182440621773
							],
							[
								-78.4354652574657,
								8.38770538984079
							],
							[
								-78.62212053090394,
								8.718124497915028
							],
							[
								-79.12030717641375,
								8.996092027213024
							],
							[
								-79.55787736684519,
								8.932374986197146
							],
							[
								-79.76057817251005,
								8.5845150822244
							],
							[
								-80.16448116730334,
								8.333315944853595
							],
							[
								-80.38265906443962,
								8.298408514840432
							],
							[
								-80.4806892564973,
								8.09030752200107
							],
							[
								-80.00368994822716,
								7.547524115423372
							],
							[
								-80.276670701809,
								7.419754136581716
							],
							[
								-80.42115800649708,
								7.271571966984765
							],
							[
								-80.8864009264208,
								7.220541490096537
							],
							[
								-81.05954281281473,
								7.817921047390597
							],
							[
								-81.18971574575795,
								7.64790558515034
							],
							[
								-81.51951473664468,
								7.706610012233909
							],
							[
								-81.72131120474447,
								8.108962714058435
							],
							[
								-82.13144120962892,
								8.175392767769637
							],
							[
								-82.39093441438257,
								8.29236237226229
							],
							[
								-82.82008134635042,
								8.290863755725823
							],
							[
								-82.85095801464482,
								8.073822740099956
							],
							[
								-82.96578304719736,
								8.225027980985985
							],
							[
								-82.91317643912421,
								8.42351715741907
							],
							[
								-82.82977067740516,
								8.62629547773237
							],
							[
								-82.86865719270477,
								8.807266343618522
							],
							[
								-82.71918311230053,
								8.925708726431495
							],
							[
								-82.92715491405916,
								9.074330145702916
							],
							[
								-82.93289099804358,
								9.476812038608173
							],
							[
								-82.54619625520348,
								9.566134751824677
							],
							[
								-82.18712256542341,
								9.20744863528678
							],
							[
								-82.20758643261097,
								8.9955752628901
							],
							[
								-81.80856686066929,
								8.950616766796173
							],
							[
								-81.71415401887204,
								9.031955471223583
							],
							[
								-81.43928707551154,
								8.786234035675719
							],
							[
								-80.94730160187676,
								8.858503526235907
							],
							[
								-80.52190121125008,
								9.111072089062432
							],
							[
								-79.91459977895599,
								9.31276520429762
							],
							[
								-79.57330278188431,
								9.611610012241528
							],
							[
								-79.02119177927793,
								9.552931423374105
							],
							[
								-79.05845048696037,
								9.454565334506526
							],
							[
								-78.50088762074719,
								9.420458889193881
							],
							[
								-78.05592770049802,
								9.2477304142583
							],
							[
								-77.72951351592641,
								8.946844387238869
							],
							[
								-77.35336076527386,
								8.67050466555807
							],
							[
								-77.47472286651133,
								8.524286200388218
							],
							[
								-77.24256649444008,
								7.935278225125444
							],
							[
								-77.43110795765699,
								7.638061224798734
							],
							[
								-77.7534138658614,
								7.709839789252143
							],
							[
								-77.88157141794525,
								7.223771267114785
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Panama",
					"sov_a3": "PAN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Panama",
					"adm0_a3": "PAN",
					"geou_dif": 0,
					"geounit": "Panama",
					"gu_a3": "PAN",
					"su_dif": 0,
					"subunit": "Panama",
					"su_a3": "PAN",
					"brk_diff": 0,
					"name": "Panama",
					"name_long": "Panama",
					"brk_a3": "PAN",
					"brk_name": "Panama",
					"brk_group": "",
					"abbrev": "Pan.",
					"postal": "PA",
					"formal_en": "Republic of Panama",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Panama",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 4,
					"mapcolor9": 6,
					"mapcolor13": 3,
					"pop_est": 3360474,
					"gdp_md_est": 38830,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PA",
					"iso_a3": "PAN",
					"iso_n3": "591",
					"un_a3": "591",
					"wb_a2": "PA",
					"wb_a3": "PAN",
					"woe_id": -99,
					"adm0_a3_is": "PAN",
					"adm0_a3_us": "PAN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Central America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-69.59042375352405,
								-17.580011895419332
							],
							[
								-69.85844356960587,
								-18.092693780187012
							],
							[
								-70.37257239447771,
								-18.34797535570887
							],
							[
								-71.37525021023693,
								-17.773798516513857
							],
							[
								-71.46204077827113,
								-17.363487644116383
							],
							[
								-73.44452958850042,
								-16.359362888252996
							],
							[
								-75.23788265654144,
								-15.265682875227782
							],
							[
								-76.00920508492995,
								-14.649286390850321
							],
							[
								-76.42346920439775,
								-13.823186944232432
							],
							[
								-76.25924150257417,
								-13.535039157772943
							],
							[
								-77.10619238962184,
								-12.22271615972082
							],
							[
								-78.09215287953464,
								-10.377712497604065
							],
							[
								-79.03695309112695,
								-8.386567884965892
							],
							[
								-79.44592037628485,
								-7.93083342858386
							],
							[
								-79.76057817251005,
								-7.194340915560084
							],
							[
								-80.53748165558608,
								-6.541667575713717
							],
							[
								-81.24999630402642,
								-6.136834405139183
							],
							[
								-80.92634680858244,
								-5.690556735866565
							],
							[
								-81.41094255239946,
								-4.7367648250554595
							],
							[
								-81.09966956248937,
								-4.036394138203697
							],
							[
								-80.30256059438722,
								-3.4048564591647126
							],
							[
								-80.18401485870967,
								-3.8211617977080437
							],
							[
								-80.46929460317695,
								-4.0592867977089995
							],
							[
								-80.44224199087216,
								-4.425724379090674
							],
							[
								-80.02890804718561,
								-4.3460909969288934
							],
							[
								-79.62497921417618,
								-4.454198093283495
							],
							[
								-79.20528906931773,
								-4.959128513207389
							],
							[
								-78.63989722361234,
								-4.547784112164074
							],
							[
								-78.45068396677564,
								-3.873096612161376
							],
							[
								-77.83790483265861,
								-3.003020521663103
							],
							[
								-76.63539425322672,
								-2.6086776668438176
							],
							[
								-75.54499569365204,
								-1.5616097957458803
							],
							[
								-75.23372270374195,
								-0.9114169246495294
							],
							[
								-75.37322323271385,
								-0.1520317521204504
							],
							[
								-75.10662451852008,
								-0.05720549886486026
							],
							[
								-74.44160051135597,
								-0.5308200008198867
							],
							[
								-74.12239518908906,
								-1.002832533373848
							],
							[
								-73.6595035468346,
								-1.2604912247811342
							],
							[
								-73.07039221870724,
								-2.3089543595509525
							],
							[
								-72.32578650581365,
								-2.434218031426454
							],
							[
								-71.7747607082854,
								-2.169789727388938
							],
							[
								-71.41364579942979,
								-2.3428024227021282
							],
							[
								-70.81347571479196,
								-2.2568645158007428
							],
							[
								-70.04770850287485,
								-2.725156345229699
							],
							[
								-70.69268205430971,
								-3.742872002785859
							],
							[
								-70.39404395209499,
								-3.7665914852078255
							],
							[
								-69.89363521999663,
								-4.2981869441943275
							],
							[
								-70.7947688463023,
								-4.251264743673303
							],
							[
								-70.92884334988358,
								-4.401591485210368
							],
							[
								-71.74840572781655,
								-4.593982842633011
							],
							[
								-72.89192765978726,
								-5.274561455916981
							],
							[
								-72.9645072089412,
								-5.7412513159448935
							],
							[
								-73.21971126981461,
								-6.089188734566078
							],
							[
								-73.1200274319236,
								-6.629930922068239
							],
							[
								-73.72448666044164,
								-6.91859547285064
							],
							[
								-73.7234014553635,
								-7.340998630404414
							],
							[
								-73.98723548042966,
								-7.523829847853065
							],
							[
								-73.57105933296707,
								-8.424446709835834
							],
							[
								-73.01538265653255,
								-9.032833347208062
							],
							[
								-73.22671342639016,
								-9.462212823121234
							],
							[
								-72.56303300646564,
								-9.520193780152717
							],
							[
								-72.18489071316985,
								-10.053597914269432
							],
							[
								-71.30241227892154,
								-10.079436130415374
							],
							[
								-70.48189388699117,
								-9.490118096558845
							],
							[
								-70.54868567572841,
								-11.009146823778465
							],
							[
								-70.0937522040469,
								-11.123971856331012
							],
							[
								-69.52967810736496,
								-10.951734307502194
							],
							[
								-68.66507971868963,
								-12.561300144097173
							],
							[
								-68.88007951523997,
								-12.899729099176653
							],
							[
								-68.92922380234954,
								-13.602683607643009
							],
							[
								-68.9488866848366,
								-14.453639418193283
							],
							[
								-69.33953467474701,
								-14.953195489158832
							],
							[
								-69.16034664577495,
								-15.323973890853019
							],
							[
								-69.38976416693471,
								-15.660129082911652
							],
							[
								-68.9596353827533,
								-16.50069793057127
							],
							[
								-69.59042375352405,
								-17.580011895419332
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Peru",
					"sov_a3": "PER",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Peru",
					"adm0_a3": "PER",
					"geou_dif": 0,
					"geounit": "Peru",
					"gu_a3": "PER",
					"su_dif": 0,
					"subunit": "Peru",
					"su_a3": "PER",
					"brk_diff": 0,
					"name": "Peru",
					"name_long": "Peru",
					"brk_a3": "PER",
					"brk_name": "Peru",
					"brk_group": "",
					"abbrev": "Peru",
					"postal": "PE",
					"formal_en": "Republic of Peru",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Peru",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 4,
					"mapcolor9": 4,
					"mapcolor13": 11,
					"pop_est": 29546963,
					"gdp_md_est": 247300,
					"pop_year": -99,
					"lastcensus": 2007,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PE",
					"iso_a3": "PER",
					"iso_n3": "604",
					"un_a3": "604",
					"wb_a2": "PE",
					"wb_a3": "PER",
					"woe_id": -99,
					"adm0_a3_is": "PER",
					"adm0_a3_us": "PER",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 4,
					"long_len": 4,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									126.37681359263749,
									8.414706325713354
								],
								[
									126.4785128113879,
									7.750354112168978
								],
								[
									126.53742394420064,
									7.189380601424574
								],
								[
									126.19677290253256,
									6.27429433840004
								],
								[
									125.8314205262291,
									7.293715318221857
								],
								[
									125.3638521668523,
									6.786485297060992
								],
								[
									125.68316084198372,
									6.049656887227258
								],
								[
									125.39651167206065,
									5.58100332277229
								],
								[
									124.21978763234236,
									6.161355495626182
								],
								[
									123.93871951710693,
									6.885135606306122
								],
								[
									124.24366214406135,
									7.360610459823661
								],
								[
									123.61021243702757,
									7.833527329942754
								],
								[
									123.29607140512522,
									7.418875637232787
								],
								[
									122.8255058126754,
									7.457374579290217
								],
								[
									122.08549930225578,
									6.899424139834849
								],
								[
									121.91992801319262,
									7.1921194523360725
								],
								[
									122.31235884001714,
									8.034962063016508
								],
								[
									122.94239790251967,
									8.316236883981176
								],
								[
									123.48768761606354,
									8.693009751821194
								],
								[
									123.84115441293986,
									8.240324204944386
								],
								[
									124.60146976125023,
									8.514157619659017
								],
								[
									124.76461225799565,
									8.96040945071546
								],
								[
									125.47139082245158,
									8.986996975129642
								],
								[
									125.4121179546128,
									9.760334784377548
								],
								[
									126.22271447154318,
									9.286074327018852
								],
								[
									126.30663699758512,
									8.782487494334575
								],
								[
									126.37681359263749,
									8.414706325713354
								]
							]
						],
						[
							[
								[
									123.98243777882581,
									10.278778591345812
								],
								[
									123.6231832215328,
									9.950090643753299
								],
								[
									123.30992068897936,
									9.318268744336677
								],
								[
									122.99588300994165,
									9.0221886255204
								],
								[
									122.38005496631948,
									9.713360907424203
								],
								[
									122.5860889018671,
									9.981044826696106
								],
								[
									122.83708133350873,
									10.261156927934238
								],
								[
									122.94741051645192,
									10.88186839440803
								],
								[
									123.49884972543848,
									10.940624497923949
								],
								[
									123.33777428598475,
									10.267383938025446
								],
								[
									124.07793582570125,
									11.23272553145371
								],
								[
									123.98243777882581,
									10.278778591345812
								]
							]
						],
						[
							[
								[
									118.50458092659036,
									9.31638255455809
								],
								[
									117.17427453010069,
									8.367499904814665
								],
								[
									117.6644771668214,
									9.066888739452935
								],
								[
									118.38691369026176,
									9.684499619989225
								],
								[
									118.98734215706108,
									10.376292019080509
								],
								[
									119.51149620979757,
									11.369668077027214
								],
								[
									119.68967654833992,
									10.554291490109875
								],
								[
									119.029458449379,
									10.003653265823871
								],
								[
									118.50458092659036,
									9.31638255455809
								]
							]
						],
						[
							[
								[
									121.88354780485915,
									11.89175507247198
								],
								[
									122.48382124236147,
									11.582187404827508
								],
								[
									123.12021650603597,
									11.58366018314787
								],
								[
									123.10083784392648,
									11.16593374271649
								],
								[
									122.63771365772672,
									10.741308498574227
								],
								[
									122.00261030485959,
									10.441016750526089
								],
								[
									121.96736697803655,
									10.905691229694625
								],
								[
									122.03837039600555,
									11.41584096928004
								],
								[
									121.88354780485915,
									11.89175507247198
								]
							]
						],
						[
							[
								[
									125.50255171112352,
									12.162694606978349
								],
								[
									125.78346479706218,
									11.046121934447768
								],
								[
									125.01188398651229,
									11.31145457605038
								],
								[
									125.03276126515814,
									10.975816148314706
								],
								[
									125.27744917206027,
									10.358722032101312
								],
								[
									124.80181928924574,
									10.134678859899893
								],
								[
									124.7601680848185,
									10.837995103392302
								],
								[
									124.45910119028608,
									10.889929917845635
								],
								[
									124.30252160044174,
									11.49537099857723
								],
								[
									124.89101281138161,
									11.415582587118593
								],
								[
									124.87799035044398,
									11.794189968304991
								],
								[
									124.26676150929572,
									12.557760931849685
								],
								[
									125.22711632700785,
									12.535720933477194
								],
								[
									125.50255171112352,
									12.162694606978349
								]
							]
						],
						[
							[
								[
									121.52739383350351,
									13.06959015548452
								],
								[
									121.26219038298157,
									12.205560207564403
								],
								[
									120.83389611214656,
									12.70449616134242
								],
								[
									120.3234363139675,
									13.46641347905387
								],
								[
									121.18012820850217,
									13.429697373910443
								],
								[
									121.52739383350351,
									13.06959015548452
								]
							]
						],
						[
							[
								[
									121.3213082215236,
									18.504064642811016
								],
								[
									121.9376013530364,
									18.218552354398383
								],
								[
									122.24600630095429,
									18.478949896717097
								],
								[
									122.336956821788,
									18.224882717354177
								],
								[
									122.1742794129332,
									17.810282701076375
								],
								[
									122.51565392465338,
									17.093504746971973
								],
								[
									122.25231082569391,
									16.262444362854126
								],
								[
									121.6627860861083,
									15.931017564350128
								],
								[
									121.50506961475341,
									15.124813544164624
								],
								[
									121.72882856657728,
									14.328376369682246
								],
								[
									122.25892540902734,
									14.218202216035976
								],
								[
									122.70127566944566,
									14.33654124598442
								],
								[
									123.95029503794026,
									13.78213064214107
								],
								[
									123.85510704965864,
									13.237771104378467
								],
								[
									124.1812886902849,
									12.997527370653472
								],
								[
									124.07741906137827,
									12.536676947474575
								],
								[
									123.29803510955227,
									13.027525539598983
								],
								[
									122.92865197152994,
									13.552919826710408
								],
								[
									122.67135501514869,
									13.185836289925135
								],
								[
									122.03464969288055,
									13.784481919810347
								],
								[
									121.12638471891862,
									13.636687323455561
								],
								[
									120.62863732308332,
									13.857655747935652
								],
								[
									120.67938357959386,
									14.271015529838323
								],
								[
									120.99181928923056,
									14.525392767795083
								],
								[
									120.6933362163127,
									14.756670640517285
								],
								[
									120.564145135583,
									14.396279201713824
								],
								[
									120.07042850146641,
									14.970869452367097
								],
								[
									119.92092858284613,
									15.40634674729074
								],
								[
									119.88377322802828,
									16.363704331929966
								],
								[
									120.28648766487882,
									16.03462881109533
								],
								[
									120.39004723519176,
									17.59908112229951
								],
								[
									120.71586714079191,
									18.50522736253754
								],
								[
									121.3213082215236,
									18.504064642811016
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Philippines",
					"sov_a3": "PHL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Philippines",
					"adm0_a3": "PHL",
					"geou_dif": 0,
					"geounit": "Philippines",
					"gu_a3": "PHL",
					"su_dif": 0,
					"subunit": "Philippines",
					"su_a3": "PHL",
					"brk_diff": 0,
					"name": "Philippines",
					"name_long": "Philippines",
					"brk_a3": "PHL",
					"brk_name": "Philippines",
					"brk_group": "",
					"abbrev": "Phil.",
					"postal": "PH",
					"formal_en": "Republic of the Philippines",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Philippines",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 2,
					"mapcolor9": 2,
					"mapcolor13": 8,
					"pop_est": 97976603,
					"gdp_md_est": 317500,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PH",
					"iso_a3": "PHL",
					"iso_n3": "608",
					"un_a3": "608",
					"wb_a2": "PH",
					"wb_a3": "PHL",
					"woe_id": -99,
					"adm0_a3_is": "PHL",
					"adm0_a3_us": "PHL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 11,
					"long_len": 11,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									155.88002566957843,
									-6.81999684003776
								],
								[
									155.5999910829888,
									-6.919990736522493
								],
								[
									155.16699425681512,
									-6.5359314917293005
								],
								[
									154.72919152243836,
									-5.9008281388622095
								],
								[
									154.51411421123967,
									-5.139117526880014
								],
								[
									154.65250369691736,
									-5.04243092206184
								],
								[
									154.7599906760844,
									-5.339983819198494
								],
								[
									155.06291792217937,
									-5.566791680527487
								],
								[
									155.54774620994172,
									-6.200654799019659
								],
								[
									156.01996544822478,
									-6.540013929880388
								],
								[
									155.88002566957843,
									-6.81999684003776
								]
							]
						],
						[
							[
								[
									151.9827958518545,
									-5.478063246282346
								],
								[
									151.4591068870087,
									-5.560280450058741
								],
								[
									151.3013904156539,
									-5.840728448106702
								],
								[
									150.7544470562767,
									-6.083762709175389
								],
								[
									150.24119673075384,
									-6.317753594592986
								],
								[
									149.70996300679334,
									-6.316513360218053
								],
								[
									148.8900647320505,
									-6.026040134305433
								],
								[
									148.31893680236075,
									-5.74714242922613
								],
								[
									148.4018257997569,
									-5.437755629094724
								],
								[
									149.29841190002085,
									-5.583741550319218
								],
								[
									149.84556196512725,
									-5.505503431829339
								],
								[
									149.9962504416903,
									-5.026101169457675
								],
								[
									150.13975589416495,
									-5.0013481583897885
								],
								[
									150.2369075868735,
									-5.532220147324281
								],
								[
									150.8074670758081,
									-5.455842380396888
								],
								[
									151.089672072554,
									-5.1136927221923685
								],
								[
									151.64788089417087,
									-4.757073662946169
								],
								[
									151.53786176982155,
									-4.16780730552189
								],
								[
									152.13679162008438,
									-4.14879037843852
								],
								[
									152.33874311748102,
									-4.312966403829762
								],
								[
									152.31869266175178,
									-4.86766122805075
								],
								[
									151.9827958518545,
									-5.478063246282346
								]
							]
						],
						[
							[
								[
									141.0338517600139,
									-9.117892754760419
								],
								[
									141.01705691951904,
									-5.859021905138022
								],
								[
									141.00021040259188,
									-2.6001510555156244
								],
								[
									142.7352466167915,
									-3.289152927263217
								],
								[
									144.58397098203326,
									-3.861417738463402
								],
								[
									145.27317955951,
									-4.373737888205028
								],
								[
									145.82978641172568,
									-4.876497897972683
								],
								[
									145.98192182839298,
									-5.465609226100014
								],
								[
									147.6480733583476,
									-6.083659356310804
								],
								[
									147.8911076194162,
									-6.614014580922316
								],
								[
									146.9709053895949,
									-6.7216565893862565
								],
								[
									147.19187381407497,
									-7.38802418378998
								],
								[
									148.0846358583494,
									-8.044108168167611
								],
								[
									148.7341052593936,
									-9.104663588093757
								],
								[
									149.30683515848446,
									-9.07143564213007
								],
								[
									149.26663089416135,
									-9.514406019736029
								],
								[
									150.03872846903434,
									-9.684318129111702
								],
								[
									149.7387984560123,
									-9.872937106977005
								],
								[
									150.80162763895916,
									-10.293686618697421
								],
								[
									150.69057498596388,
									-10.582712904505868
								],
								[
									150.02839318257585,
									-10.652476088099931
								],
								[
									149.782310012002,
									-10.393267103723943
								],
								[
									148.92313764871724,
									-10.280922539921363
								],
								[
									147.91301842670802,
									-10.130440769087471
								],
								[
									147.13544315001226,
									-9.492443536012019
								],
								[
									146.56788089415065,
									-8.942554619994155
								],
								[
									146.04848107318494,
									-8.06741423913131
								],
								[
									144.74416792213802,
									-7.630128269077474
								],
								[
									143.8970878440097,
									-7.915330498896282
								],
								[
									143.2863757671843,
									-8.245491224809058
								],
								[
									143.4139132020807,
									-8.983068942910947
								],
								[
									142.62843143124425,
									-9.326820570516503
								],
								[
									142.06825890520022,
									-9.159595635620036
								],
								[
									141.0338517600139,
									-9.117892754760419
								]
							]
						],
						[
							[
								[
									153.14003787659877,
									-4.499983412294114
								],
								[
									152.8272921083683,
									-4.7664270971909986
								],
								[
									152.638673130503,
									-4.176127211120928
								],
								[
									152.40602583232496,
									-3.789742526874562
								],
								[
									151.95323693258356,
									-3.462062269711822
								],
								[
									151.38427941305005,
									-3.0354216447101123
								],
								[
									150.66204959533886,
									-2.741486097833956
								],
								[
									150.93996544820456,
									-2.5000021297340282
								],
								[
									151.47998416565454,
									-2.779985039891386
								],
								[
									151.82001509013512,
									-2.999971612157907
								],
								[
									152.2399894553711,
									-3.240008640153661
								],
								[
									152.64001671774255,
									-3.6599830053896483
								],
								[
									153.01999352438466,
									-3.980015150573294
								],
								[
									153.14003787659877,
									-4.499983412294114
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Papua New Guinea",
					"sov_a3": "PNG",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Papua New Guinea",
					"adm0_a3": "PNG",
					"geou_dif": 0,
					"geounit": "Papua New Guinea",
					"gu_a3": "PNG",
					"su_dif": 1,
					"subunit": "Papua New Guinea",
					"su_a3": "PN1",
					"brk_diff": 0,
					"name": "Papua New Guinea",
					"name_long": "Papua New Guinea",
					"brk_a3": "PN1",
					"brk_name": "Papua New Guinea",
					"brk_group": "",
					"abbrev": "P.N.G.",
					"postal": "PG",
					"formal_en": "Independent State of Papua New Guinea",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Papua New Guinea",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 2,
					"mapcolor9": 3,
					"mapcolor13": 1,
					"pop_est": 6057263,
					"gdp_md_est": 13210,
					"pop_year": -99,
					"lastcensus": 2000,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PG",
					"iso_a3": "PNG",
					"iso_n3": "598",
					"un_a3": "598",
					"wb_a2": "PG",
					"wb_a3": "PNG",
					"woe_id": -99,
					"adm0_a3_is": "PNG",
					"adm0_a3_us": "PNG",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Oceania",
					"region_un": "Oceania",
					"subregion": "Melanesia",
					"region_wb": "East Asia & Pacific",
					"name_len": 16,
					"long_len": 16,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								15.01699588385867,
								51.10667409932158
							],
							[
								14.607098422919535,
								51.74518809671997
							],
							[
								14.685026482815687,
								52.0899474147552
							],
							[
								14.437599725002201,
								52.62485016540839
							],
							[
								14.074521111719491,
								52.98126251892543
							],
							[
								14.353315463934138,
								53.24817129171297
							],
							[
								14.119686313542587,
								53.75702912049104
							],
							[
								14.802900424873458,
								54.05070628520575
							],
							[
								16.36347700365573,
								54.513158677785725
							],
							[
								17.622831658608675,
								54.85153595643291
							],
							[
								18.62085859546164,
								54.68260569927078
							],
							[
								18.696254510175464,
								54.43871877706929
							],
							[
								19.660640089606403,
								54.42608388937393
							],
							[
								20.892244500418627,
								54.31252492941253
							],
							[
								22.731098667092652,
								54.327536932993326
							],
							[
								23.24398725758951,
								54.22056671814914
							],
							[
								23.48412763844985,
								53.91249766704114
							],
							[
								23.527535841575002,
								53.470121568406555
							],
							[
								23.80493493011778,
								53.089731350306074
							],
							[
								23.79919884613338,
								52.69109935160657
							],
							[
								23.199493849386187,
								52.48697744405367
							],
							[
								23.508002150168693,
								52.02364655212473
							],
							[
								23.527070753684374,
								51.57845408793024
							],
							[
								24.029985792748903,
								50.70540660257518
							],
							[
								23.922757195743262,
								50.42488108987875
							],
							[
								23.426508416444392,
								50.308505764357456
							],
							[
								22.518450148211603,
								49.47677358661974
							],
							[
								22.776418898212626,
								49.02739533140962
							],
							[
								22.558137648211755,
								49.085738023467144
							],
							[
								21.607808058364213,
								49.47010732685409
							],
							[
								20.887955356538413,
								49.32877228453583
							],
							[
								20.415839471119853,
								49.43145335549977
							],
							[
								19.825022820726872,
								49.21712535256923
							],
							[
								19.320712517990472,
								49.571574001659194
							],
							[
								18.90957482267632,
								49.435845852244576
							],
							[
								18.853144158613617,
								49.49622976337764
							],
							[
								18.392913852622172,
								49.98862864847075
							],
							[
								17.64944502123899,
								50.049038397819956
							],
							[
								17.55456709155112,
								50.36214590107642
							],
							[
								16.86876915860566,
								50.47397370055603
							],
							[
								16.719475945714436,
								50.21574656839354
							],
							[
								16.176253289462267,
								50.42260732685791
							],
							[
								16.23862674323857,
								50.69773265237984
							],
							[
								15.490972120839729,
								50.78472992614321
							],
							[
								15.01699588385867,
								51.10667409932158
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Poland",
					"sov_a3": "POL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Poland",
					"adm0_a3": "POL",
					"geou_dif": 0,
					"geounit": "Poland",
					"gu_a3": "POL",
					"su_dif": 0,
					"subunit": "Poland",
					"su_a3": "POL",
					"brk_diff": 0,
					"name": "Poland",
					"name_long": "Poland",
					"brk_a3": "POL",
					"brk_name": "Poland",
					"brk_group": "",
					"abbrev": "Pol.",
					"postal": "PL",
					"formal_en": "Republic of Poland",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Poland",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 7,
					"mapcolor9": 1,
					"mapcolor13": 2,
					"pop_est": 38482919,
					"gdp_md_est": 667900,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PL",
					"iso_a3": "POL",
					"iso_n3": "616",
					"un_a3": "616",
					"wb_a2": "PL",
					"wb_a3": "POL",
					"woe_id": -99,
					"adm0_a3_is": "POL",
					"adm0_a3_us": "POL",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-66.28243445500821,
								18.514761664295364
							],
							[
								-65.7713028632093,
								18.426679185453878
							],
							[
								-65.59100379094295,
								18.228034979723915
							],
							[
								-65.84716386581377,
								17.97590566657186
							],
							[
								-66.59993445500949,
								17.981822618069273
							],
							[
								-67.18416236028527,
								17.946553453030077
							],
							[
								-67.24242753769435,
								18.374460150622937
							],
							[
								-67.10067908391774,
								18.52060110114435
							],
							[
								-66.28243445500821,
								18.514761664295364
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "United States of America",
					"sov_a3": "US1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Dependency",
					"admin": "Puerto Rico",
					"adm0_a3": "PRI",
					"geou_dif": 0,
					"geounit": "Puerto Rico",
					"gu_a3": "PRI",
					"su_dif": 0,
					"subunit": "Puerto Rico",
					"su_a3": "PRI",
					"brk_diff": 0,
					"name": "Puerto Rico",
					"name_long": "Puerto Rico",
					"brk_a3": "PRI",
					"brk_name": "Puerto Rico",
					"brk_group": "",
					"abbrev": "P.R.",
					"postal": "PR",
					"formal_en": "Commonwealth of Puerto Rico",
					"formal_fr": "",
					"note_adm0": "Commonwealth of U.S.A.",
					"note_brk": "",
					"name_sort": "Puerto Rico",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 5,
					"mapcolor9": 1,
					"mapcolor13": 1,
					"pop_est": 3971020,
					"gdp_md_est": 70230,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PR",
					"iso_a3": "PRI",
					"iso_n3": "630",
					"un_a3": "630",
					"wb_a2": "PR",
					"wb_a3": "PRI",
					"woe_id": -99,
					"adm0_a3_is": "PRI",
					"adm0_a3_us": "PRI",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Caribbean",
					"region_wb": "Latin America & Caribbean",
					"name_len": 11,
					"long_len": 11,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": -99
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								128.34971642467661,
								38.61224294692785
							],
							[
								128.20574588431145,
								38.37039724380189
							],
							[
								127.78003543509101,
								38.30453563084589
							],
							[
								127.07330854706737,
								38.2561148137884
							],
							[
								126.68371992401893,
								37.80477285415118
							],
							[
								126.23733890188176,
								37.84037791600028
							],
							[
								126.17475874237624,
								37.74968577732804
							],
							[
								125.68910363169721,
								37.94001007745902
							],
							[
								125.5684391622957,
								37.75208873142962
							],
							[
								125.2753304383362,
								37.669070542952724
							],
							[
								125.24008711151316,
								37.85722443292744
							],
							[
								124.98103315643397,
								37.94882090916478
							],
							[
								124.71216067921938,
								38.10834605564979
							],
							[
								124.98599409393398,
								38.54847422947968
							],
							[
								125.2219486837787,
								38.66585724543067
							],
							[
								125.13285851450752,
								38.84855927179859
							],
							[
								125.3865897970606,
								39.387957872061165
							],
							[
								125.32111575734682,
								39.55138458918421
							],
							[
								124.7374821310424,
								39.66034434667162
							],
							[
								124.26562462778531,
								39.928493353834156
							],
							[
								125.07994184784064,
								40.56982371679245
							],
							[
								126.18204511932943,
								41.10733612727637
							],
							[
								126.86908328664987,
								41.81656932226619
							],
							[
								127.34378299368302,
								41.50315176041597
							],
							[
								128.20843305879066,
								41.46677155208249
							],
							[
								128.0522152039723,
								41.99428457291795
							],
							[
								129.59666873587952,
								42.42498179785456
							],
							[
								129.99426720593323,
								42.985386867843786
							],
							[
								130.64001590385243,
								42.39500946712528
							],
							[
								130.78000735893113,
								42.22000722916885
							],
							[
								130.40003055228902,
								42.28000356705971
							],
							[
								129.96594852103726,
								41.94136790625106
							],
							[
								129.66736209525482,
								41.60110443782523
							],
							[
								129.70518924369247,
								40.88282786718433
							],
							[
								129.18811486218,
								40.66180776627199
							],
							[
								129.01039961152821,
								40.485436102859815
							],
							[
								128.63336836152672,
								40.18984691015031
							],
							[
								127.96741417858135,
								40.02541250259756
							],
							[
								127.53343550019417,
								39.7568500839767
							],
							[
								127.5021195822253,
								39.32393077245153
							],
							[
								127.38543419811027,
								39.213472398427655
							],
							[
								127.78334272675772,
								39.05089834243742
							],
							[
								128.34971642467661,
								38.61224294692785
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "North Korea",
					"sov_a3": "PRK",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "North Korea",
					"adm0_a3": "PRK",
					"geou_dif": 0,
					"geounit": "North Korea",
					"gu_a3": "PRK",
					"su_dif": 0,
					"subunit": "North Korea",
					"su_a3": "PRK",
					"brk_diff": 0,
					"name": "Dem. Rep. Korea",
					"name_long": "Dem. Rep. Korea",
					"brk_a3": "PRK",
					"brk_name": "Dem. Rep. Korea",
					"brk_group": "",
					"abbrev": "N.K.",
					"postal": "KP",
					"formal_en": "Democratic People's Republic of Korea",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Korea, Dem. Rep.",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 5,
					"mapcolor9": 3,
					"mapcolor13": 9,
					"pop_est": 22665345,
					"gdp_md_est": 40000,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "KP",
					"iso_a3": "PRK",
					"iso_n3": "408",
					"un_a3": "408",
					"wb_a2": "KP",
					"wb_a3": "PRK",
					"woe_id": -99,
					"adm0_a3_is": "PRK",
					"adm0_a3_us": "PRK",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 15,
					"long_len": 15,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-9.034817674180246,
								41.880570583659676
							],
							[
								-8.67194576662672,
								42.13468943945496
							],
							[
								-8.263856980817792,
								42.28046865495034
							],
							[
								-8.013174607769912,
								41.790886135417125
							],
							[
								-7.422512986673795,
								41.79207469335984
							],
							[
								-7.251308966490824,
								41.91834605566505
							],
							[
								-6.6686055159676565,
								41.883386949219584
							],
							[
								-6.389087693700915,
								41.381815497394655
							],
							[
								-6.851126674822552,
								41.11108266861753
							],
							[
								-6.864019944679385,
								40.33087189387483
							],
							[
								-7.026413133156595,
								40.184524237624245
							],
							[
								-7.066591559263529,
								39.711891587882775
							],
							[
								-7.498632371439726,
								39.62957103124181
							],
							[
								-7.098036668313128,
								39.03007274022379
							],
							[
								-7.374092169616318,
								38.37305858006492
							],
							[
								-7.029281175148796,
								38.07576406508977
							],
							[
								-7.166507941099865,
								37.803894354802225
							],
							[
								-7.537105475281024,
								37.42890432387624
							],
							[
								-7.453725551778092,
								37.09778758396607
							],
							[
								-7.855613165711986,
								36.83826854099627
							],
							[
								-8.382816127953689,
								36.97888011326246
							],
							[
								-8.898856980820327,
								36.86880931248078
							],
							[
								-8.746101446965554,
								37.65134552667661
							],
							[
								-8.83999752443988,
								38.266243394517616
							],
							[
								-9.287463751655224,
								38.3584858261586
							],
							[
								-9.526570603869715,
								38.73742910415491
							],
							[
								-9.446988898140233,
								39.39206614842837
							],
							[
								-9.048305223008427,
								39.75509308527877
							],
							[
								-8.977353481471681,
								40.15930613866581
							],
							[
								-8.768684047877102,
								40.76063894303019
							],
							[
								-8.79085323733031,
								41.18433401139126
							],
							[
								-8.99078935386757,
								41.54345937760364
							],
							[
								-9.034817674180246,
								41.880570583659676
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Portugal",
					"sov_a3": "PRT",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Portugal",
					"adm0_a3": "PRT",
					"geou_dif": 0,
					"geounit": "Portugal",
					"gu_a3": "PRT",
					"su_dif": 1,
					"subunit": "Portugal",
					"su_a3": "PR1",
					"brk_diff": 0,
					"name": "Portugal",
					"name_long": "Portugal",
					"brk_a3": "PR1",
					"brk_name": "Portugal",
					"brk_group": "",
					"abbrev": "Port.",
					"postal": "P",
					"formal_en": "Portuguese Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Portugal",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 7,
					"mapcolor9": 1,
					"mapcolor13": 4,
					"pop_est": 10707924,
					"gdp_md_est": 208627,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": 0,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PT",
					"iso_a3": "PRT",
					"iso_n3": "620",
					"un_a3": "620",
					"wb_a2": "PT",
					"wb_a3": "PRT",
					"woe_id": -99,
					"adm0_a3_is": "PRT",
					"adm0_a3_us": "PRT",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-62.685057135657885,
								-22.249029229422387
							],
							[
								-62.291179368729225,
								-21.051634616787393
							],
							[
								-62.2659612697708,
								-20.513734633061276
							],
							[
								-61.78632646345377,
								-19.633736667562964
							],
							[
								-60.04356462262649,
								-19.342746677327426
							],
							[
								-59.11504248720611,
								-19.3569060197754
							],
							[
								-58.183471442280506,
								-19.868399346600363
							],
							[
								-58.166392381408045,
								-20.176700941653678
							],
							[
								-57.8706739976178,
								-20.73268767668195
							],
							[
								-57.937155727761294,
								-22.090175876557172
							],
							[
								-56.8815095689029,
								-22.28215382252148
							],
							[
								-56.47331743022939,
								-22.086300144135283
							],
							[
								-55.79795813660691,
								-22.356929620047822
							],
							[
								-55.610682745981144,
								-22.655619398694846
							],
							[
								-55.517639329639636,
								-23.571997572526637
							],
							[
								-55.40074723979542,
								-23.956935316668805
							],
							[
								-55.02790178080955,
								-24.00127369557523
							],
							[
								-54.65283423523513,
								-23.83957813893396
							],
							[
								-54.29295956075452,
								-24.02101409271073
							],
							[
								-54.29347632507745,
								-24.570799655863965
							],
							[
								-54.42894609233059,
								-25.162184747012166
							],
							[
								-54.625290696823576,
								-25.739255466415514
							],
							[
								-54.78879492859505,
								-26.621785577096134
							],
							[
								-55.69584550639816,
								-27.387837009390864
							],
							[
								-56.486701626192996,
								-27.548499037386293
							],
							[
								-57.60975969097614,
								-27.395898532828387
							],
							[
								-58.61817359071975,
								-27.123718763947096
							],
							[
								-57.63366004091113,
								-25.60365650808164
							],
							[
								-57.77721716981794,
								-25.16233977630904
							],
							[
								-58.80712846539498,
								-24.77145924245331
							],
							[
								-60.02896603050403,
								-24.032796319273274
							],
							[
								-60.846564704009914,
								-23.880712579038292
							],
							[
								-62.685057135657885,
								-22.249029229422387
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Paraguay",
					"sov_a3": "PRY",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Paraguay",
					"adm0_a3": "PRY",
					"geou_dif": 0,
					"geounit": "Paraguay",
					"gu_a3": "PRY",
					"su_dif": 0,
					"subunit": "Paraguay",
					"su_a3": "PRY",
					"brk_diff": 0,
					"name": "Paraguay",
					"name_long": "Paraguay",
					"brk_a3": "PRY",
					"brk_name": "Paraguay",
					"brk_group": "",
					"abbrev": "Para.",
					"postal": "PY",
					"formal_en": "Republic of Paraguay",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Paraguay",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 3,
					"mapcolor9": 6,
					"mapcolor13": 2,
					"pop_est": 6995655,
					"gdp_md_est": 28890,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PY",
					"iso_a3": "PRY",
					"iso_n3": "600",
					"un_a3": "600",
					"wb_a2": "PY",
					"wb_a3": "PRY",
					"woe_id": -99,
					"adm0_a3_is": "PRY",
					"adm0_a3_us": "PRY",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								35.54566531753454,
								32.393992011030576
							],
							[
								35.5452519060762,
								31.78250478772084
							],
							[
								35.397560662586045,
								31.489086005167582
							],
							[
								34.92740848159457,
								31.353435370401414
							],
							[
								34.970506626125996,
								31.61677846936081
							],
							[
								35.22589155451243,
								31.754341132121766
							],
							[
								34.97464074070933,
								31.866582343059722
							],
							[
								35.183930291491436,
								32.53251068778894
							],
							[
								35.54566531753454,
								32.393992011030576
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Israel",
					"sov_a3": "ISR",
					"adm0_dif": 1,
					"level": 2,
					"type": "Disputed",
					"admin": "Palestine",
					"adm0_a3": "PSX",
					"geou_dif": 0,
					"geounit": "Palestine",
					"gu_a3": "PSX",
					"su_dif": 0,
					"subunit": "Palestine",
					"su_a3": "PSX",
					"brk_diff": 0,
					"name": "Palestine",
					"name_long": "Palestine",
					"brk_a3": "PSX",
					"brk_name": "Palestine",
					"brk_group": "",
					"abbrev": "Pal.",
					"postal": "PAL",
					"formal_en": "West Bank and Gaza",
					"formal_fr": "",
					"note_adm0": "Partial self-admin.",
					"note_brk": "Partial self-admin.",
					"name_sort": "Palestine (West Bank and Gaza)",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 2,
					"mapcolor9": 5,
					"mapcolor13": 8,
					"pop_est": 4119083,
					"gdp_md_est": 11950.77,
					"pop_year": -99,
					"lastcensus": 2007,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "PS",
					"iso_a3": "PSE",
					"iso_n3": "275",
					"un_a3": "275",
					"wb_a2": "GZ",
					"wb_a3": "WBG",
					"woe_id": -99,
					"adm0_a3_is": "PSE",
					"adm0_a3_us": "PSX",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": -99
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								50.81010827006958,
								24.754742539971378
							],
							[
								50.74391076030369,
								25.482424221289396
							],
							[
								51.013351678273494,
								26.006991685484195
							],
							[
								51.28646162293606,
								26.11458201751587
							],
							[
								51.58907881043726,
								25.80111277923338
							],
							[
								51.60670047384881,
								25.21567047779874
							],
							[
								51.38960778179063,
								24.62738597258806
							],
							[
								51.11241539897702,
								24.556330878186724
							],
							[
								50.81010827006958,
								24.754742539971378
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Qatar",
					"sov_a3": "QAT",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Qatar",
					"adm0_a3": "QAT",
					"geou_dif": 0,
					"geounit": "Qatar",
					"gu_a3": "QAT",
					"su_dif": 0,
					"subunit": "Qatar",
					"su_a3": "QAT",
					"brk_diff": 0,
					"name": "Qatar",
					"name_long": "Qatar",
					"brk_a3": "QAT",
					"brk_name": "Qatar",
					"brk_group": "",
					"abbrev": "Qatar",
					"postal": "QA",
					"formal_en": "State of Qatar",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Qatar",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 6,
					"mapcolor9": 2,
					"mapcolor13": 4,
					"pop_est": 833285,
					"gdp_md_est": 91330,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "QA",
					"iso_a3": "QAT",
					"iso_n3": "634",
					"un_a3": "634",
					"wb_a2": "QA",
					"wb_a3": "QAT",
					"woe_id": -99,
					"adm0_a3_is": "QAT",
					"adm0_a3_us": "QAT",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								22.710531447040495,
								47.88219391538941
							],
							[
								23.142236362406805,
								48.09634105080695
							],
							[
								23.76095828623741,
								47.985598456405455
							],
							[
								24.40205610525038,
								47.98187775328043
							],
							[
								24.866317172960578,
								47.737525743188314
							],
							[
								25.20774336111299,
								47.89105642352747
							],
							[
								25.9459411964024,
								47.987148749374214
							],
							[
								26.19745039236693,
								48.22088125263035
							],
							[
								26.619336785597795,
								48.22072622333347
							],
							[
								26.924176059687568,
								48.123264472030996
							],
							[
								27.233872918412743,
								47.82677094175638
							],
							[
								27.551166212684848,
								47.40511709247083
							],
							[
								28.128030226359044,
								46.810476386088254
							],
							[
								28.160017937947714,
								46.37156260841722
							],
							[
								28.0544429867754,
								45.944586086605625
							],
							[
								28.233553501099042,
								45.488283189468376
							],
							[
								28.67977949393938,
								45.304030870131704
							],
							[
								29.149724969201653,
								45.464925442072456
							],
							[
								29.603289015427436,
								45.293308010431126
							],
							[
								29.62654340995877,
								45.0353909368624
							],
							[
								29.141611769331835,
								44.820210272799045
							],
							[
								28.8378577003202,
								44.913873806328056
							],
							[
								28.558081495891997,
								43.70746165625813
							],
							[
								27.970107049275075,
								43.81246816667522
							],
							[
								27.242399529740908,
								44.175986029632405
							],
							[
								26.065158725699746,
								43.94349376075127
							],
							[
								25.569271681426926,
								43.68844472917472
							],
							[
								24.100679152124172,
								43.74105133724785
							],
							[
								23.332302280376325,
								43.897010809904714
							],
							[
								22.944832391051847,
								43.82378530534713
							],
							[
								22.65714969248299,
								44.23492300066128
							],
							[
								22.4740084164406,
								44.40922760678177
							],
							[
								22.705725538837356,
								44.57800283464702
							],
							[
								22.459022251075936,
								44.7025171982543
							],
							[
								22.14508792490281,
								44.47842234962059
							],
							[
								21.56202273935361,
								44.7689472519655
							],
							[
								21.483526238702236,
								45.18117015235778
							],
							[
								20.874312778413355,
								45.416375433934235
							],
							[
								20.762174920339987,
								45.73457306577144
							],
							[
								20.220192498462836,
								46.127468980486555
							],
							[
								21.02195234547125,
								46.3160879583519
							],
							[
								21.626514926853872,
								46.99423777931816
							],
							[
								22.099767693782837,
								47.6724392767167
							],
							[
								22.710531447040495,
								47.88219391538941
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Romania",
					"sov_a3": "ROU",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Romania",
					"adm0_a3": "ROU",
					"geou_dif": 0,
					"geounit": "Romania",
					"gu_a3": "ROU",
					"su_dif": 0,
					"subunit": "Romania",
					"su_a3": "ROU",
					"brk_diff": 0,
					"name": "Romania",
					"name_long": "Romania",
					"brk_a3": "ROU",
					"brk_name": "Romania",
					"brk_group": "",
					"abbrev": "Rom.",
					"postal": "RO",
					"formal_en": "Romania",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Romania",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 3,
					"mapcolor13": 13,
					"pop_est": 22215421,
					"gdp_md_est": 271400,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "RO",
					"iso_a3": "ROU",
					"iso_n3": "642",
					"un_a3": "642",
					"wb_a2": "RO",
					"wb_a3": "ROM",
					"woe_id": -99,
					"adm0_a3_is": "ROU",
					"adm0_a3_us": "ROU",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									143.64800744036287,
									50.74760040954152
								],
								[
									144.65414757708564,
									48.976390692737596
								],
								[
									143.17392785051723,
									49.30655141865037
								],
								[
									142.5586682476501,
									47.861575018904915
								],
								[
									143.53349246640406,
									46.83672801369249
								],
								[
									143.50527713437262,
									46.13790761980948
								],
								[
									142.74770063697392,
									46.74076487892657
								],
								[
									142.0920300640545,
									45.96675527605879
								],
								[
									141.90692508358504,
									46.80592886004655
								],
								[
									142.0184428244709,
									47.780132961612935
								],
								[
									141.90444461483506,
									48.85918854429957
								],
								[
									142.13580000220568,
									49.61516307229746
								],
								[
									142.1799833518153,
									50.95234243428192
								],
								[
									141.59407596249005,
									51.93543488220254
								],
								[
									141.68254601457366,
									53.30196645772878
								],
								[
									142.60693403541077,
									53.762145087287905
								],
								[
									142.2097489768154,
									54.22547597921687
								],
								[
									142.654786411713,
									54.36588084575388
								],
								[
									142.91461551327657,
									53.70457754171474
								],
								[
									143.26084760963207,
									52.74076040303905
								],
								[
									143.23526777564766,
									51.75666026468875
								],
								[
									143.64800744036287,
									50.74760040954152
								]
							]
						],
						[
							[
								[
									22.731098667092652,
									54.327536932993326
								],
								[
									20.892244500418656,
									54.312524929412575
								],
								[
									19.660640089606403,
									54.426083889373984
								],
								[
									19.888481479581344,
									54.8661603867715
								],
								[
									21.2684489275035,
									55.19048167583529
								],
								[
									22.315723504330606,
									55.0152985703659
								],
								[
									22.757763706155288,
									54.85657440858142
								],
								[
									22.651051873472568,
									54.58274099386671
								],
								[
									22.731098667092652,
									54.327536932993326
								]
							]
						],
						[
							[
								[
									-175.01425,
									66.58435000000003
								],
								[
									-174.33983,
									66.33556000000002
								],
								[
									-174.57181999999997,
									67.06219000000004
								],
								[
									-171.85731000000004,
									66.91308000000004
								],
								[
									-169.89958000000004,
									65.97724000000005
								],
								[
									-170.89106999999996,
									65.54139
								],
								[
									-172.53025000000005,
									65.43790999999999
								],
								[
									-172.555,
									64.46079000000003
								],
								[
									-172.95533,
									64.25269
								],
								[
									-173.89184,
									64.28260000000003
								],
								[
									-174.65392,
									64.63124999999997
								],
								[
									-175.98352999999997,
									64.92288000000005
								],
								[
									-176.20715999999996,
									65.35666999999998
								],
								[
									-177.22265999999996,
									65.52024000000003
								],
								[
									-178.35993000000005,
									65.39052000000004
								],
								[
									-178.90332000000004,
									65.74043999999998
								],
								[
									-178.68610999999993,
									66.11211
								],
								[
									-179.88377,
									65.87456000000006
								],
								[
									-179.43268000000003,
									65.40410999999997
								],
								[
									-179.99999999999997,
									64.97970870219837
								],
								[
									-179.99999999999997,
									68.96363636363637
								],
								[
									-177.55,
									68.20000000000005
								],
								[
									-174.92825000000005,
									67.20589000000007
								],
								[
									-175.01425,
									66.58435000000003
								]
							]
						],
						[
							[
								[
									180.00000000000014,
									70.83219920854668
								],
								[
									178.9034250000001,
									70.78114000000005
								],
								[
									178.72530000000003,
									71.09880000000004
								],
								[
									180.00000000000014,
									71.51571433642826
								],
								[
									180.00000000000014,
									70.83219920854668
								]
							]
						],
						[
							[
								[
									-178.69378000000006,
									70.89302
								],
								[
									-179.99999999999997,
									70.83219920854668
								],
								[
									-179.99999999999997,
									71.51571433642826
								],
								[
									-179.871875,
									71.55762000000001
								],
								[
									-179.02433000000002,
									71.55553
								],
								[
									-177.577945,
									71.26948000000004
								],
								[
									-177.66357500000004,
									71.13277
								],
								[
									-178.69378000000006,
									70.89302
								]
							]
						],
						[
							[
								[
									143.60385000000005,
									73.21243999999999
								],
								[
									142.08763000000008,
									73.20544000000001
								],
								[
									140.03815500000005,
									73.31691999999998
								],
								[
									139.86312000000007,
									73.36983000000004
								],
								[
									140.81171000000003,
									73.76506000000003
								],
								[
									142.06206999999998,
									73.85758000000004
								],
								[
									143.48283,
									73.47524999999999
								],
								[
									143.60385000000005,
									73.21243999999999
								]
							]
						],
						[
							[
								[
									150.73167000000004,
									75.08406
								],
								[
									149.57592500000007,
									74.68892
								],
								[
									147.97746499999997,
									74.77835500000003
								],
								[
									146.11919000000003,
									75.17297999999997
								],
								[
									146.358485,
									75.49681999999996
								],
								[
									148.22223,
									75.345845
								],
								[
									150.73167000000004,
									75.08406
								]
							]
						],
						[
							[
								[
									145.086285,
									75.56262499999997
								],
								[
									144.30000000000004,
									74.82000000000005
								],
								[
									140.61380999999997,
									74.84767999999997
								],
								[
									138.95543999999998,
									74.61148
								],
								[
									136.97439000000006,
									75.26166999999998
								],
								[
									137.51176,
									75.94916999999998
								],
								[
									138.83107499999997,
									76.13675999999998
								],
								[
									141.47161499999996,
									76.09288999999995
								],
								[
									145.086285,
									75.56262499999997
								]
							]
						],
						[
							[
								[
									57.5356925799924,
									70.72046397570216
								],
								[
									56.94497928246395,
									70.63274323188668
								],
								[
									53.6773751157842,
									70.76265778266847
								],
								[
									53.41201663596539,
									71.2066616889202
								],
								[
									51.60189456564572,
									71.47475901965049
								],
								[
									51.45575361512422,
									72.01488108996514
								],
								[
									52.47827518088357,
									72.22944163684096
								],
								[
									52.444168735570855,
									72.77473135038485
								],
								[
									54.42761355979766,
									73.62754751249759
								],
								[
									53.50828982932515,
									73.74981395130015
								],
								[
									55.90245893740766,
									74.62748647734534
								],
								[
									55.631932814359715,
									75.08141225859717
								],
								[
									57.86864383324885,
									75.60939036732321
								],
								[
									61.170044386647504,
									76.25188345000814
								],
								[
									64.49836836127022,
									76.43905548776928
								],
								[
									66.2109770038551,
									76.80978221303124
								],
								[
									68.15705976753483,
									76.93969676381292
								],
								[
									68.85221113472514,
									76.54481130645462
								],
								[
									68.18057254422766,
									76.23364166940911
								],
								[
									64.63732628770302,
									75.73775462513623
								],
								[
									61.58350752141476,
									75.2608845079468
								],
								[
									58.47708214705338,
									74.30905630156283
								],
								[
									56.98678551618801,
									73.33304352486624
								],
								[
									55.419335971910954,
									72.37126760526598
								],
								[
									55.622837762276305,
									71.54059479439033
								],
								[
									57.5356925799924,
									70.72046397570216
								]
							]
						],
						[
							[
								[
									130.63386640840983,
									42.90301463477056
								],
								[
									131.144687941615,
									42.92998973242695
								],
								[
									131.28855512911562,
									44.111519680348266
								],
								[
									131.02519000000026,
									44.96796000000006
								],
								[
									131.8834542176596,
									45.32116160743652
								],
								[
									133.09712000000022,
									45.14409000000006
								],
								[
									133.7696439963132,
									46.116926988299156
								],
								[
									134.1123500000002,
									47.21248000000014
								],
								[
									134.50081000000003,
									47.578450000000146
								],
								[
									135.0263114767868,
									48.47822988544391
								],
								[
									133.37359581922803,
									48.18344167743484
								],
								[
									132.50669000000013,
									47.78896
								],
								[
									130.98726000000013,
									47.790130000000005
								],
								[
									130.58229332898267,
									48.729687404976204
								],
								[
									129.3978178244205,
									49.440600084015614
								],
								[
									127.65740000000037,
									49.76027000000008
								],
								[
									127.28745568248493,
									50.73979726826545
								],
								[
									126.93915652883786,
									51.35389415140591
								],
								[
									126.564399041857,
									51.7842554795327
								],
								[
									125.94634891164648,
									52.79279857035695
								],
								[
									125.06821129771046,
									53.16104482686893
								],
								[
									123.57147,
									53.458800000000025
								],
								[
									122.24574791879306,
									53.431725979213695
								],
								[
									121.00308475147037,
									53.25140106873124
								],
								[
									120.1770886577169,
									52.75388621684121
								],
								[
									120.725789015792,
									52.51622630473091
								],
								[
									120.73820000000009,
									51.96411000000003
								],
								[
									120.18208000000018,
									51.64355000000009
								],
								[
									119.27939000000006,
									50.58292
								],
								[
									119.28846072802585,
									50.14288279886196
								],
								[
									117.8792444194265,
									49.51098338479704
								],
								[
									116.67880089728621,
									49.888531399121405
								],
								[
									115.48569542853144,
									49.80517731383475
								],
								[
									114.9621098165504,
									50.14024730081513
								],
								[
									114.36245649623535,
									50.248302720737485
								],
								[
									112.89773969935439,
									49.54356537535699
								],
								[
									111.58123091028668,
									49.37796824807768
								],
								[
									110.66201053267886,
									49.13012807880585
								],
								[
									109.40244917199672,
									49.29296051695769
								],
								[
									108.47516727095129,
									49.28254771585071
								],
								[
									107.86817589725112,
									49.793705145865886
								],
								[
									106.88880415245532,
									50.27429596618029
								],
								[
									105.8865914245869,
									50.406019192092174
								],
								[
									104.62158000000008,
									50.275320000000164
								],
								[
									103.67654544476036,
									50.089966132195144
								],
								[
									102.25589000000011,
									50.51056000000011
								],
								[
									102.06521000000006,
									51.259910000000104
								],
								[
									100.88948042196265,
									51.51685578063842
								],
								[
									99.98173221232358,
									51.63400625264396
								],
								[
									98.8614905131005,
									52.04736603454671
								],
								[
									97.82573978067452,
									51.01099518493325
								],
								[
									98.23176150919173,
									50.42240062112873
								],
								[
									97.25976000000023,
									49.72605000000004
								],
								[
									95.81402000000017,
									49.97746000000012
								],
								[
									94.81594933469879,
									50.01343333597089
								],
								[
									94.14756635943561,
									50.48053660745717
								],
								[
									93.10421,
									50.49529000000001
								],
								[
									92.23471154171969,
									50.80217072204175
								],
								[
									90.71366743364078,
									50.331811835321105
								],
								[
									88.80556684769559,
									49.47052073831247
								],
								[
									87.75126427607685,
									49.29719798440556
								],
								[
									87.3599703307627,
									49.21498078062916
								],
								[
									86.82935672398966,
									49.82667470966814
								],
								[
									85.5412699726825,
									49.69285858824816
								],
								[
									85.11555952346211,
									50.11730296487764
								],
								[
									84.41637739455305,
									50.311399644565824
								],
								[
									83.93511478061893,
									50.88924551045358
								],
								[
									83.38300377801247,
									51.069182847693895
								],
								[
									81.94598554883996,
									50.81219594990634
								],
								[
									80.56844689323546,
									51.38833649352844
								],
								[
									80.03555952344172,
									50.864750881547224
								],
								[
									77.80091556184433,
									53.40441498474755
								],
								[
									76.52517947785478,
									54.17700348572714
								],
								[
									76.89110029491346,
									54.49052440044193
								],
								[
									74.38482000000013,
									53.54685000000012
								],
								[
									73.42567874542053,
									53.489810289109755
								],
								[
									73.50851606638437,
									54.0356167669766
								],
								[
									72.22415001820221,
									54.37665538188679
								],
								[
									71.1801310566095,
									54.13328522400826
								],
								[
									70.86526655465516,
									55.169733588270105
								],
								[
									69.0681669452729,
									55.3852501491435
								],
								[
									68.16910037625891,
									54.97039175070438
								],
								[
									65.6668700000001,
									54.601250000000164
								],
								[
									65.17853356309595,
									54.35422781027208
								],
								[
									61.43660000000014,
									54.00625000000002
								],
								[
									60.97806644068325,
									53.66499339457914
								],
								[
									61.699986199800634,
									52.97999644633427
								],
								[
									60.73999311711455,
									52.71998647725775
								],
								[
									60.92726850774025,
									52.44754832621501
								],
								[
									59.967533807215574,
									51.960420437215674
								],
								[
									61.58800337102414,
									51.272658799843185
								],
								[
									61.33742435084102,
									50.79907013610426
								],
								[
									59.932807244715576,
									50.842194118851836
								],
								[
									59.64228234237058,
									50.545442206415714
								],
								[
									58.36332000000013,
									51.06364000000002
								],
								[
									56.7779800000001,
									51.04355000000007
								],
								[
									55.71694000000011,
									50.62171000000015
								],
								[
									54.532878452376195,
									51.02623973245937
								],
								[
									52.32872358583106,
									51.718652248738096
								],
								[
									50.76664839051219,
									51.692762356159875
								],
								[
									48.70238162618105,
									50.60512848571284
								],
								[
									48.577841424357615,
									49.874759629915644
								],
								[
									47.549480421749394,
									50.454698391311126
								],
								[
									46.75159630716277,
									49.35600576435374
								],
								[
									47.0436715024766,
									49.152038886097586
								],
								[
									46.4664457537763,
									48.39415233010493
								],
								[
									47.31524000000016,
									47.715850000000074
								],
								[
									48.05724999999998,
									47.74377000000004
								],
								[
									48.694733514201886,
									47.0756281601779
								],
								[
									48.593250000000154,
									46.561040000000105
								],
								[
									49.101160000000135,
									46.399330000000106
								],
								[
									48.64541000000011,
									45.806290000000075
								],
								[
									47.67590999999996,
									45.64149000000012
								],
								[
									46.682010000000076,
									44.6092000000001
								],
								[
									47.59094000000002,
									43.66016000000013
								],
								[
									47.49252000000004,
									42.98658000000009
								],
								[
									48.58437000000018,
									41.808880000000045
								],
								[
									47.98728315612604,
									41.4058192001944
								],
								[
									47.81566572448466,
									41.15141612402135
								],
								[
									47.373315464066394,
									41.21973236751114
								],
								[
									46.686070591016716,
									41.827137152669906
								],
								[
									46.40495079934894,
									41.86067515722743
								],
								[
									45.776399999999995,
									42.09244000000024
								],
								[
									45.470279168485916,
									42.50278066667005
								],
								[
									44.53762291848207,
									42.711992702803684
								],
								[
									43.93121000000011,
									42.55496000000011
								],
								[
									43.755990000000196,
									42.740830000000074
								],
								[
									42.39440000000016,
									43.22030000000004
								],
								[
									40.92219000000014,
									43.38215000000014
								],
								[
									40.07696495947985,
									43.553104153002494
								],
								[
									39.955008579271095,
									43.434997666999294
								],
								[
									38.67999999999998,
									44.280000000000086
								],
								[
									37.53912000000011,
									44.65720999999999
								],
								[
									36.67546000000013,
									45.24469000000008
								],
								[
									37.403170000000074,
									45.4045100000001
								],
								[
									38.23294999999999,
									46.24087
								],
								[
									37.67372000000009,
									46.63656999999998
								],
								[
									39.14767000000009,
									47.044750000000136
								],
								[
									39.12120000000013,
									47.26336000000009
								],
								[
									38.22353803889948,
									47.10218984637598
								],
								[
									38.25511233902981,
									47.54640045835697
								],
								[
									38.77057000000005,
									47.82562000000024
								],
								[
									39.738277622238996,
									47.89893707945208
								],
								[
									39.89562000000015,
									48.232410000000044
								],
								[
									39.674650000000014,
									48.783820000000134
								],
								[
									40.08078901546949,
									49.30742991799937
								],
								[
									40.069040000000115,
									49.60104999999996
								],
								[
									38.59498823421356,
									49.92646190042373
								],
								[
									38.010631137857075,
									49.91566152607473
								],
								[
									37.39345950699524,
									50.38395335550368
								],
								[
									36.626167840325394,
									50.225590928745135
								],
								[
									35.35611616388812,
									50.57719737405915
								],
								[
									35.37790999999996,
									50.773940000000096
								],
								[
									35.02218305841794,
									51.2075723333715
								],
								[
									34.22481570815441,
									51.255993150428935
								],
								[
									34.14197838719062,
									51.566413479206204
								],
								[
									34.391730584457235,
									51.768881740925906
								],
								[
									33.75269982273588,
									52.33507457133166
								],
								[
									32.71576053236717,
									52.238465481162166
								],
								[
									32.412058139787774,
									52.28869497334978
								],
								[
									32.15944000000022,
									52.061250000000115
								],
								[
									31.78597000000005,
									52.10168000000007
								],
								[
									31.54001834486226,
									52.74205231384644
								],
								[
									31.305200636527985,
									53.07399587667331
								],
								[
									31.49764000000002,
									53.16743000000014
								],
								[
									32.304519484188376,
									53.13272614197285
								],
								[
									32.693643019346126,
									53.35142080343215
								],
								[
									32.405598585751164,
									53.618045355842014
								],
								[
									31.731272820774592,
									53.79402944601202
								],
								[
									31.791424187962406,
									53.974638576872195
								],
								[
									31.384472283663825,
									54.15705638286238
								],
								[
									30.75753380709878,
									54.8117709417844
								],
								[
									30.97183597181325,
									55.081547756564134
								],
								[
									30.87390913262007,
									55.55097646750352
								],
								[
									29.89629438652244,
									55.7894632025305
								],
								[
									29.37157189303079,
									55.67009064393628
								],
								[
									29.229513380660393,
									55.91834422466641
								],
								[
									28.17670942557794,
									56.16912995057879
								],
								[
									27.855282016722526,
									56.75932648378438
								],
								[
									27.770015903440992,
									57.2442581244112
								],
								[
									27.288184848751655,
									57.47452830670392
								],
								[
									27.71668582531578,
									57.79189911562446
								],
								[
									27.420150000000206,
									58.72457000000014
								],
								[
									28.131699253051863,
									59.300825100331
								],
								[
									27.981120000000004,
									59.47537000000008
								],
								[
									29.117700000000013,
									60.02805000000012
								],
								[
									28.07000000000005,
									60.50352000000015
								],
								[
									30.211107212044652,
									61.780027777749694
								],
								[
									31.139991082491036,
									62.35769277612445
								],
								[
									31.516092156711267,
									62.867687486412905
								],
								[
									30.035872430142803,
									63.552813625738565
								],
								[
									30.44468468600374,
									64.20445343693908
								],
								[
									29.544429559047018,
									64.94867157659056
								],
								[
									30.217650000000077,
									65.80597999999992
								],
								[
									29.054588657352383,
									66.94428620062203
								],
								[
									29.977426385220696,
									67.69829702419275
								],
								[
									28.445943637818772,
									68.364612942164
								],
								[
									28.591929559043365,
									69.0647769232867
								],
								[
									29.399550000000005,
									69.15692000000018
								],
								[
									31.10108000000011,
									69.55811000000008
								],
								[
									32.13272000000026,
									69.90595000000025
								],
								[
									33.77547000000007,
									69.30142000000012
								],
								[
									36.51396000000008,
									69.06342000000006
								],
								[
									40.292340000000166,
									67.93240000000003
								],
								[
									41.05987000000013,
									67.45713000000012
								],
								[
									41.12595000000019,
									66.79158000000012
								],
								[
									40.01583000000008,
									66.26618000000013
								],
								[
									38.38295000000002,
									65.9995300000001
								],
								[
									33.918710000000175,
									66.75960999999998
								],
								[
									33.18444000000002,
									66.63252999999995
								],
								[
									34.814770000000095,
									65.90015000000014
								],
								[
									34.87857425307877,
									65.4362128770482
								],
								[
									34.94391000000016,
									64.41437000000016
								],
								[
									36.23129000000003,
									64.10945000000004
								],
								[
									37.01273000000012,
									63.84983000000011
								],
								[
									37.14197000000016,
									64.33471000000006
								],
								[
									36.539579035089815,
									64.76446000000004
								],
								[
									37.17604000000014,
									65.14322000000013
								],
								[
									39.59344999999999,
									64.52079000000018
								],
								[
									40.43560000000011,
									64.76446000000004
								],
								[
									39.76260000000016,
									65.49681999999999
								],
								[
									42.0930900000001,
									66.47623000000004
								],
								[
									43.01604000000012,
									66.4185800000001
								],
								[
									43.94975000000014,
									66.06908000000001
								],
								[
									44.53225999999998,
									66.75634000000014
								],
								[
									43.698390000000046,
									67.35245
								],
								[
									44.18795000000014,
									67.9505100000001
								],
								[
									43.45282,
									68.57078999999996
								],
								[
									46.25000000000014,
									68.25
								],
								[
									46.82134000000016,
									67.68997000000007
								],
								[
									45.555170000000004,
									67.56652
								],
								[
									45.5620200000001,
									67.0100500000002
								],
								[
									46.34915000000015,
									66.6676700000001
								],
								[
									47.894160000000255,
									66.88455000000016
								],
								[
									48.138760000000076,
									67.52238000000003
								],
								[
									50.22766000000016,
									67.99867000000015
								],
								[
									53.71743000000018,
									68.85738000000012
								],
								[
									54.47171000000006,
									68.80815000000001
								],
								[
									53.48582000000013,
									68.20130999999998
								],
								[
									54.72628000000006,
									68.09701999999999
								],
								[
									55.44268000000014,
									68.43866000000008
								],
								[
									57.317020000000156,
									68.46628000000007
								],
								[
									58.80200000000022,
									68.88081999999994
								],
								[
									59.94142000000019,
									68.2784400000001
								],
								[
									61.07784000000018,
									68.94069000000007
								],
								[
									60.03,
									69.52000000000007
								],
								[
									60.55000000000004,
									69.85000000000002
								],
								[
									63.50400000000016,
									69.54739000000006
								],
								[
									64.888115,
									69.23483500000015
								],
								[
									68.51216000000014,
									68.09233000000017
								],
								[
									69.18068000000008,
									68.61563000000012
								],
								[
									68.16444000000004,
									69.14436000000003
								],
								[
									68.13522000000009,
									69.3564900000001
								],
								[
									66.93008000000012,
									69.45461000000012
								],
								[
									67.25976000000006,
									69.92873000000009
								],
								[
									66.72492000000014,
									70.70889000000014
								],
								[
									66.69466000000003,
									71.02897000000024
								],
								[
									68.54006000000012,
									71.93450000000024
								],
								[
									69.19636000000011,
									72.84336000000016
								],
								[
									69.93999999999997,
									73.04000000000013
								],
								[
									72.58754000000008,
									72.7762900000001
								],
								[
									72.79603000000006,
									72.22005999999999
								],
								[
									71.8481100000001,
									71.4089800000001
								],
								[
									72.47011,
									71.09019000000006
								],
								[
									72.79188000000002,
									70.39114000000001
								],
								[
									72.56470000000022,
									69.02084999999997
								],
								[
									73.66787000000008,
									68.40789999999996
								],
								[
									73.23870000000002,
									67.74040000000002
								],
								[
									71.28000000000011,
									66.32000000000016
								],
								[
									72.42301000000018,
									66.17267000000018
								],
								[
									72.82076999999995,
									66.53267000000005
								],
								[
									73.92099000000016,
									66.78946000000013
								],
								[
									74.1865100000002,
									67.28429
								],
								[
									75.05200000000005,
									67.76047000000017
								],
								[
									74.46926000000016,
									68.32899000000009
								],
								[
									74.93584000000013,
									68.98918000000006
								],
								[
									73.84236000000001,
									69.07146000000006
								],
								[
									73.60187000000022,
									69.62763000000001
								],
								[
									74.39980000000006,
									70.63174999999998
								],
								[
									73.10110000000006,
									71.44717000000026
								],
								[
									74.89082000000022,
									72.1211900000001
								],
								[
									74.65926000000005,
									72.83227000000005
								],
								[
									75.15801000000019,
									72.85497000000012
								],
								[
									75.6835100000001,
									72.30056000000013
								],
								[
									75.28898000000012,
									71.33556000000007
								],
								[
									76.35911000000002,
									71.15287000000015
								],
								[
									75.90313000000017,
									71.87401000000006
								],
								[
									77.57665000000011,
									72.26717000000002
								],
								[
									79.65202000000014,
									72.32010999999997
								],
								[
									81.50000000000003,
									71.75000000000003
								],
								[
									80.61071000000013,
									72.58285000000012
								],
								[
									80.51109,
									73.64819999999997
								],
								[
									82.25000000000009,
									73.85000000000011
								],
								[
									84.65526000000008,
									73.80591000000018
								],
								[
									86.82230000000024,
									73.93688000000003
								],
								[
									86.00956,
									74.45967000000016
								],
								[
									87.16682000000017,
									75.11643000000001
								],
								[
									88.31571000000011,
									75.14393000000004
								],
								[
									90.26000000000008,
									75.64000000000001
								],
								[
									92.90058000000008,
									75.77333000000007
								],
								[
									93.23421000000016,
									76.04720000000009
								],
								[
									95.86000000000016,
									76.1400000000001
								],
								[
									96.67821000000006,
									75.91548
								],
								[
									98.92254000000023,
									76.44688999999997
								],
								[
									100.75967000000023,
									76.43028000000004
								],
								[
									101.03531999999998,
									76.86189000000007
								],
								[
									101.99084000000013,
									77.2875400000002
								],
								[
									104.3516000000001,
									77.69792000000004
								],
								[
									106.06664000000015,
									77.37389000000005
								],
								[
									104.70500000000024,
									77.12740000000008
								],
								[
									106.97013000000013,
									76.97419000000005
								],
								[
									107.24000000000015,
									76.48000000000002
								],
								[
									108.15380000000007,
									76.72335000000015
								],
								[
									111.07726000000017,
									76.71000000000001
								],
								[
									113.33151000000001,
									76.22223999999997
								],
								[
									114.13417000000007,
									75.84764000000001
								],
								[
									113.88539000000006,
									75.32779000000014
								],
								[
									112.77918000000008,
									75.03186000000008
								],
								[
									110.1512500000002,
									74.47673000000003
								],
								[
									109.4,
									74.18000000000004
								],
								[
									110.64000000000007,
									74.04000000000002
								],
								[
									112.11919000000003,
									73.78774000000013
								],
								[
									113.01954000000026,
									73.97693000000015
								],
								[
									113.52958000000032,
									73.33505000000011
								],
								[
									113.96880999999999,
									73.5948800000001
								],
								[
									115.56782000000007,
									73.75285000000008
								],
								[
									118.77633000000023,
									73.58771999999999
								],
								[
									119.02000000000001,
									73.12000000000003
								],
								[
									123.20066000000011,
									72.97122000000007
								],
								[
									123.25777000000019,
									73.73503000000011
								],
								[
									125.3800000000002,
									73.56000000000006
								],
								[
									126.97644000000005,
									73.5654900000001
								],
								[
									128.59126000000006,
									73.03871000000007
								],
								[
									129.05157,
									72.39872000000008
								],
								[
									128.46000000000012,
									71.98000000000002
								],
								[
									129.71599000000023,
									71.19304000000008
								],
								[
									131.28858000000028,
									70.78699000000012
								],
								[
									132.25350000000017,
									71.83630000000011
								],
								[
									133.85766000000032,
									71.38642000000016
								],
								[
									135.56193,
									71.65525000000014
								],
								[
									137.49755000000007,
									71.3476300000001
								],
								[
									138.23409000000018,
									71.62803000000002
								],
								[
									139.86983000000012,
									71.48783000000014
								],
								[
									139.14791000000005,
									72.41619000000011
								],
								[
									140.46817000000001,
									72.84941000000015
								],
								[
									149.50000000000003,
									72.20000000000005
								],
								[
									150.3511800000002,
									71.60643000000002
								],
								[
									152.96890000000022,
									70.84222000000003
								],
								[
									157.00688000000005,
									71.03141000000005
								],
								[
									158.9977900000001,
									70.86671999999999
								],
								[
									159.83031000000025,
									70.45324000000005
								],
								[
									159.7086600000001,
									69.72198
								],
								[
									160.94053000000034,
									69.4372800000001
								],
								[
									162.27907000000013,
									69.64204000000001
								],
								[
									164.05248000000014,
									69.66823
								],
								[
									165.94037000000023,
									69.47199
								],
								[
									167.83567000000002,
									69.5826900000001
								],
								[
									169.5776300000002,
									68.69380000000004
								],
								[
									170.81688000000028,
									69.01362999999998
								],
								[
									170.0082000000002,
									69.65276000000006
								],
								[
									170.4534500000003,
									70.09703000000007
								],
								[
									173.64391000000026,
									69.81743000000006
								],
								[
									175.72403000000023,
									69.87725000000023
								],
								[
									178.60000000000005,
									69.40000000000009
								],
								[
									180.00000000000014,
									68.96363636363657
								],
								[
									180.00000000000014,
									64.97970870219848
								],
								[
									179.99281,
									64.97432999999998
								],
								[
									178.70720000000026,
									64.53493000000003
								],
								[
									177.41128000000018,
									64.60821000000001
								],
								[
									178.31300000000024,
									64.07593
								],
								[
									178.9082500000002,
									63.25197000000014
								],
								[
									179.37034000000008,
									62.98262000000011
								],
								[
									179.48636000000002,
									62.56893999999997
								],
								[
									179.22825000000014,
									62.30410000000015
								],
								[
									177.36430000000004,
									62.521900000000045
								],
								[
									174.56929000000022,
									61.769150000000025
								],
								[
									173.68013000000005,
									61.65261000000007
								],
								[
									172.15000000000006,
									60.94999999999996
								],
								[
									170.6985000000001,
									60.3361800000001
								],
								[
									170.3308500000003,
									59.881770000000046
								],
								[
									168.90046000000004,
									60.57355000000007
								],
								[
									166.29498000000032,
									59.788550000000214
								],
								[
									165.84000000000023,
									60.160000000000025
								],
								[
									164.87673999999996,
									59.731600000000014
								],
								[
									163.53929000000014,
									59.86871000000002
								],
								[
									163.21711000000025,
									59.211010000000016
								],
								[
									162.0173300000001,
									58.24328000000003
								],
								[
									162.05297000000004,
									57.83911999999995
								],
								[
									163.1919100000001,
									57.615030000000104
								],
								[
									163.05794000000017,
									56.159240000000125
								],
								[
									162.12958000000023,
									56.122190000000046
								],
								[
									161.70146000000008,
									55.285680000000156
								],
								[
									162.11749000000017,
									54.855140000000006
								],
								[
									160.36877000000035,
									54.34433000000007
								],
								[
									160.02173000000025,
									53.202570000000094
								],
								[
									158.5309400000002,
									52.95868000000024
								],
								[
									158.23118000000002,
									51.94269
								],
								[
									156.7897900000003,
									51.01105000000007
								],
								[
									156.42000000000016,
									51.700000000000045
								],
								[
									155.99182000000005,
									53.158950000000004
								],
								[
									155.43366000000012,
									55.38103000000012
								],
								[
									155.91442000000032,
									56.767920000000146
								],
								[
									156.75815000000003,
									57.36470000000003
								],
								[
									156.8103500000001,
									57.832040000000006
								],
								[
									158.3643300000002,
									58.05575000000002
								],
								[
									160.15064000000015,
									59.314770000000124
								],
								[
									161.87204,
									60.34300000000013
								],
								[
									163.66969000000003,
									61.1409000000001
								],
								[
									164.47355000000013,
									62.550610000000006
								],
								[
									163.2584200000002,
									62.466270000000094
								],
								[
									162.65791000000004,
									61.64250000000004
								],
								[
									160.1214800000001,
									60.544230000000084
								],
								[
									159.3023200000001,
									61.7739600000001
								],
								[
									156.7206800000001,
									61.434420000000046
								],
								[
									154.21806000000035,
									59.758180000000124
								],
								[
									155.04375000000007,
									59.14495000000005
								],
								[
									152.81185000000008,
									58.88385000000005
								],
								[
									151.26573000000027,
									58.78088999999997
								],
								[
									151.33815000000013,
									59.50396000000006
								],
								[
									149.78371000000007,
									59.65573000000015
								],
								[
									148.54481,
									59.16448
								],
								[
									145.48722000000006,
									59.33637000000002
								],
								[
									142.19782000000018,
									59.0399800000001
								],
								[
									138.95848000000032,
									57.08805000000004
								],
								[
									135.12618999999998,
									54.72959000000009
								],
								[
									136.70171000000008,
									54.603550000000126
								],
								[
									137.1934200000001,
									53.97731999999999
								],
								[
									138.16470000000007,
									53.755010000000254
								],
								[
									138.80463,
									54.25455000000011
								],
								[
									139.90151000000006,
									54.18968000000018
								],
								[
									141.34531000000007,
									53.08957000000012
								],
								[
									141.3792300000001,
									52.238770000000045
								],
								[
									140.5974200000002,
									51.2396700000001
								],
								[
									140.51308000000003,
									50.04553000000013
								],
								[
									140.06193000000022,
									48.44671000000017
								],
								[
									138.55472000000023,
									46.999649999999974
								],
								[
									138.21971,
									46.307950000000005
								],
								[
									136.8623200000001,
									45.14350000000019
								],
								[
									135.5153500000002,
									43.98900000000009
								],
								[
									134.86939000000027,
									43.39821000000006
								],
								[
									133.53687000000028,
									42.8114700000001
								],
								[
									132.90627000000015,
									42.7984900000001
								],
								[
									132.27807000000027,
									43.28456000000011
								],
								[
									130.93587000000016,
									42.552740000000085
								],
								[
									130.78,
									42.2200000000002
								],
								[
									130.64000000000019,
									42.39500000000004
								],
								[
									130.63386640840983,
									42.90301463477056
								]
							]
						],
						[
							[
								[
									105.07547000000008,
									78.30688999999998
								],
								[
									99.43814,
									77.92099999999999
								],
								[
									101.26489999999998,
									79.23399
								],
								[
									102.08635000000001,
									79.34641000000005
								],
								[
									102.837815,
									79.28129000000004
								],
								[
									105.3724300000001,
									78.71334000000002
								],
								[
									105.07547000000008,
									78.30688999999998
								]
							]
						],
						[
							[
								[
									51.13618655783128,
									80.54728017854094
								],
								[
									49.79368452332071,
									80.41542776154822
								],
								[
									48.89441124857754,
									80.3395667589437
								],
								[
									48.754936557821765,
									80.17546824820084
								],
								[
									47.586119012244154,
									80.01018117951534
								],
								[
									46.502825962109654,
									80.24724681265437
								],
								[
									47.07245527526291,
									80.55942414012947
								],
								[
									44.846958042181114,
									80.58980988231718
								],
								[
									46.79913862487123,
									80.77191762971364
								],
								[
									48.318477410684665,
									80.78400991486996
								],
								[
									48.522806023966695,
									80.51456899690015
								],
								[
									49.09718956889091,
									80.75398590770843
								],
								[
									50.03976769389462,
									80.91888540315182
								],
								[
									51.52293297710369,
									80.69972565380192
								],
								[
									51.13618655783128,
									80.54728017854094
								]
							]
						],
						[
							[
								[
									99.93976,
									78.88093999999998
								],
								[
									97.75793999999999,
									78.75620000000004
								],
								[
									94.97259,
									79.04474500000003
								],
								[
									93.31288000000004,
									79.42650000000003
								],
								[
									92.5454,
									80.14378999999997
								],
								[
									91.18107,
									80.34145999999998
								],
								[
									93.77766000000005,
									81.02460000000002
								],
								[
									95.94089500000004,
									81.25039999999996
								],
								[
									97.88385000000002,
									80.74697500000002
								],
								[
									100.186655,
									79.78013500000003
								],
								[
									99.93976,
									78.88093999999998
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Russia",
					"sov_a3": "RUS",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Russia",
					"adm0_a3": "RUS",
					"geou_dif": 0,
					"geounit": "Russia",
					"gu_a3": "RUS",
					"su_dif": 0,
					"subunit": "Russia",
					"su_a3": "RUS",
					"brk_diff": 0,
					"name": "Russia",
					"name_long": "Russian Federation",
					"brk_a3": "RUS",
					"brk_name": "Russia",
					"brk_group": "",
					"abbrev": "Rus.",
					"postal": "RUS",
					"formal_en": "Russian Federation",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Russian Federation",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 5,
					"mapcolor9": 7,
					"mapcolor13": 7,
					"pop_est": 140041247,
					"gdp_md_est": 2266000,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "3. Emerging region: BRIC",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "RU",
					"iso_a3": "RUS",
					"iso_n3": "643",
					"un_a3": "643",
					"wb_a2": "RU",
					"wb_a3": "RUS",
					"woe_id": -99,
					"adm0_a3_is": "RUS",
					"adm0_a3_us": "RUS",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 18,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								30.46969607923299,
								-2.413857517103459
							],
							[
								29.93835900240794,
								-2.348486830254238
							],
							[
								29.632176141078588,
								-2.917857761246097
							],
							[
								29.024926385216787,
								-2.8392579077301576
							],
							[
								29.117478875451553,
								-2.2922111954883846
							],
							[
								29.254834832483343,
								-2.2151099585089113
							],
							[
								29.291886834436614,
								-1.6200558406679872
							],
							[
								29.579466180140884,
								-1.3413131648856265
							],
							[
								29.821518588996014,
								-1.4433224422297855
							],
							[
								30.419104852019245,
								-1.1346591121504161
							],
							[
								30.816134881317712,
								-1.6989140763453887
							],
							[
								30.75830895358311,
								-2.2872502579883687
							],
							[
								30.46969607923299,
								-2.413857517103459
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Rwanda",
					"sov_a3": "RWA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Rwanda",
					"adm0_a3": "RWA",
					"geou_dif": 0,
					"geounit": "Rwanda",
					"gu_a3": "RWA",
					"su_dif": 0,
					"subunit": "Rwanda",
					"su_a3": "RWA",
					"brk_diff": 0,
					"name": "Rwanda",
					"name_long": "Rwanda",
					"brk_a3": "RWA",
					"brk_name": "Rwanda",
					"brk_group": "",
					"abbrev": "Rwa.",
					"postal": "RW",
					"formal_en": "Republic of Rwanda",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Rwanda",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 2,
					"mapcolor9": 3,
					"mapcolor13": 10,
					"pop_est": 10473282,
					"gdp_md_est": 9706,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "RW",
					"iso_a3": "RWA",
					"iso_n3": "646",
					"un_a3": "646",
					"wb_a2": "RW",
					"wb_a3": "RWA",
					"woe_id": -99,
					"adm0_a3_is": "RWA",
					"adm0_a3_us": "RWA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-8.665589565454809,
								27.656425889592356
							],
							[
								-8.665124477564191,
								27.589479071558227
							],
							[
								-8.684399786809053,
								27.395744126896005
							],
							[
								-8.6872936670174,
								25.881056219988906
							],
							[
								-11.96941891117116,
								25.933352769468268
							],
							[
								-11.937224493853321,
								23.374594224536168
							],
							[
								-12.874221564169575,
								23.284832261645178
							],
							[
								-13.118754441774712,
								22.771220201096256
							],
							[
								-12.929101935263532,
								21.327070624267563
							],
							[
								-16.845193650773993,
								21.33332347257488
							],
							[
								-17.06342322434257,
								20.999752102130827
							],
							[
								-17.020428432675743,
								21.42231028898148
							],
							[
								-17.00296179856109,
								21.420734157796577
							],
							[
								-14.750954555713534,
								21.500600083903663
							],
							[
								-14.630832688851072,
								21.860939846274903
							],
							[
								-14.221167771857253,
								22.31016307218816
							],
							[
								-13.891110398809047,
								23.691009019459305
							],
							[
								-12.50096269372537,
								24.7701162785782
							],
							[
								-12.030758836301615,
								26.030866197203043
							],
							[
								-11.718219773800357,
								26.104091701760623
							],
							[
								-11.392554897496979,
								26.883423977154365
							],
							[
								-10.551262579785273,
								26.990807603456886
							],
							[
								-10.189424200877582,
								26.860944729107405
							],
							[
								-9.735343390328879,
								26.860944729107405
							],
							[
								-9.413037482124466,
								27.088476060488517
							],
							[
								-8.794883999049077,
								27.120696316022507
							],
							[
								-8.817828334986672,
								27.656425889592356
							],
							[
								-8.665589565454809,
								27.656425889592356
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 7,
					"sovereignt": "Western Sahara",
					"sov_a3": "SAH",
					"adm0_dif": 0,
					"level": 2,
					"type": "Indeterminate",
					"admin": "Western Sahara",
					"adm0_a3": "SAH",
					"geou_dif": 0,
					"geounit": "Western Sahara",
					"gu_a3": "SAH",
					"su_dif": 0,
					"subunit": "Western Sahara",
					"su_a3": "SAH",
					"brk_diff": 1,
					"name": "W. Sahara",
					"name_long": "Western Sahara",
					"brk_a3": "B28",
					"brk_name": "W. Sahara",
					"brk_group": "",
					"abbrev": "W. Sah.",
					"postal": "WS",
					"formal_en": "Sahrawi Arab Democratic Republic",
					"formal_fr": "",
					"note_adm0": "Self admin.",
					"note_brk": "Self admin.; Claimed by Morocco",
					"name_sort": "Western Sahara",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 7,
					"mapcolor9": 4,
					"mapcolor13": 4,
					"pop_est": -99,
					"gdp_md_est": -99,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "EH",
					"iso_a3": "ESH",
					"iso_n3": "732",
					"un_a3": "732",
					"wb_a2": "-99",
					"wb_a3": "-99",
					"woe_id": -99,
					"adm0_a3_is": "MAR",
					"adm0_a3_us": "SAH",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Northern Africa",
					"region_wb": "Middle East & North Africa",
					"name_len": 9,
					"long_len": 14,
					"abbrev_len": 7,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								42.77933230975097,
								16.347891343648683
							],
							[
								42.649572788266084,
								16.774635321514964
							],
							[
								42.34798912941071,
								17.075805568912003
							],
							[
								42.270887892431226,
								17.474721787989125
							],
							[
								41.75438195167396,
								17.833046169500975
							],
							[
								41.22139122901558,
								18.67159963630121
							],
							[
								40.93934126156654,
								19.486485297111756
							],
							[
								40.247652215339826,
								20.17463450772649
							],
							[
								39.80168460466095,
								20.338862209550058
							],
							[
								39.139399448408284,
								21.291904812092934
							],
							[
								39.023695916506796,
								21.986875311770195
							],
							[
								39.06632897314759,
								22.57965566659027
							],
							[
								38.49277225114008,
								23.688451036060854
							],
							[
								38.02386030452362,
								24.078685614512935
							],
							[
								37.483634881344386,
								24.285494696545015
							],
							[
								37.154817742671185,
								24.85848297779731
							],
							[
								37.209491408036,
								25.084541530858107
							],
							[
								36.93162723160259,
								25.60295949961018
							],
							[
								36.639603712721225,
								25.826227525327223
							],
							[
								36.249136590323815,
								26.57013560638488
							],
							[
								35.64018151219639,
								27.376520494083422
							],
							[
								35.13018680190788,
								28.06335195567472
							],
							[
								34.63233605320798,
								28.058546047471566
							],
							[
								34.787778761541944,
								28.6074272730597
							],
							[
								34.832220493312946,
								28.957483425404845
							],
							[
								34.95603722508426,
								29.356554673778845
							],
							[
								36.06894087092206,
								29.197494615184453
							],
							[
								36.50121422704359,
								29.505253607698705
							],
							[
								36.74052778498725,
								29.86528331147619
							],
							[
								37.503581984209035,
								30.003776150018407
							],
							[
								37.66811974462638,
								30.3386652694859
							],
							[
								37.998848911294374,
								30.508499864213135
							],
							[
								37.00216556168101,
								31.508412990844747
							],
							[
								39.00488569515255,
								32.01021698661498
							],
							[
								39.19546837744497,
								32.16100881604267
							],
							[
								40.399994337736246,
								31.889991766887935
							],
							[
								41.889980910007836,
								31.19000865327837
							],
							[
								44.70949873228474,
								29.178891099559383
							],
							[
								46.568713413281756,
								29.09902517345229
							],
							[
								47.45982181172283,
								29.002519436147224
							],
							[
								47.708850538937384,
								28.526062730416143
							],
							[
								48.416094191283946,
								28.55200429942667
							],
							[
								48.80759484232718,
								27.689627997339883
							],
							[
								49.29955447774583,
								27.46121816660981
							],
							[
								49.47091352722566,
								27.109999294538085
							],
							[
								50.15242231629088,
								26.689663194275997
							],
							[
								50.212935418504685,
								26.277026882425375
							],
							[
								50.11330325704594,
								25.94397227630425
							],
							[
								50.239858839728754,
								25.608049628190926
							],
							[
								50.527386509000735,
								25.327808335872103
							],
							[
								50.66055667501689,
								24.999895534764022
							],
							[
								50.81010827006958,
								24.754742539971378
							],
							[
								51.11241539897702,
								24.556330878186724
							],
							[
								51.38960778179063,
								24.62738597258806
							],
							[
								51.57951867046327,
								24.245497137951105
							],
							[
								51.61770755392698,
								24.01421926522883
							],
							[
								52.000733270074335,
								23.00115448657894
							],
							[
								55.006803012924905,
								22.496947536707136
							],
							[
								55.208341098863194,
								22.708329982997046
							],
							[
								55.666659376859826,
								22.00000112557234
							],
							[
								54.99998172386236,
								19.999994004796108
							],
							[
								52.00000980002224,
								19.000003363516058
							],
							[
								49.11667158386487,
								18.616667588774945
							],
							[
								48.18334354024134,
								18.166669216377315
							],
							[
								47.46669477721763,
								17.116681626854884
							],
							[
								47.000004917189756,
								16.949999294497445
							],
							[
								46.74999433776165,
								17.283338120996177
							],
							[
								46.366658563020536,
								17.233315334537636
							],
							[
								45.39999922056876,
								17.333335069238558
							],
							[
								45.21665123879719,
								17.433328965723334
							],
							[
								44.06261315285508,
								17.410358791569593
							],
							[
								43.79151858905192,
								17.31997671149111
							],
							[
								43.380794305196105,
								17.57998668056767
							],
							[
								43.11579756040336,
								17.088440456607373
							],
							[
								43.21837527850275,
								16.66688996018641
							],
							[
								42.77933230975097,
								16.347891343648683
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Saudi Arabia",
					"sov_a3": "SAU",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Saudi Arabia",
					"adm0_a3": "SAU",
					"geou_dif": 0,
					"geounit": "Saudi Arabia",
					"gu_a3": "SAU",
					"su_dif": 0,
					"subunit": "Saudi Arabia",
					"su_a3": "SAU",
					"brk_diff": 0,
					"name": "Saudi Arabia",
					"name_long": "Saudi Arabia",
					"brk_a3": "SAU",
					"brk_name": "Saudi Arabia",
					"brk_group": "",
					"abbrev": "Saud.",
					"postal": "SA",
					"formal_en": "Kingdom of Saudi Arabia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Saudi Arabia",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 1,
					"mapcolor9": 6,
					"mapcolor13": 7,
					"pop_est": 28686633,
					"gdp_md_est": 576500,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SA",
					"iso_a3": "SAU",
					"iso_n3": "682",
					"un_a3": "682",
					"wb_a2": "SA",
					"wb_a3": "SAU",
					"woe_id": -99,
					"adm0_a3_is": "SAU",
					"adm0_a3_us": "SAU",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 12,
					"long_len": 12,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								33.963392794971185,
								9.464285229420625
							],
							[
								33.82496348090751,
								9.484060845715362
							],
							[
								33.84213085302815,
								9.981914637215993
							],
							[
								33.72195924818311,
								10.325262079630193
							],
							[
								33.206938084561784,
								10.720111638406593
							],
							[
								33.086766479716744,
								11.441141267476496
							],
							[
								33.206938084561784,
								12.179338268667095
							],
							[
								32.743419037302544,
								12.248007757149992
							],
							[
								32.67474954881965,
								12.02483191958072
							],
							[
								32.073891524594785,
								11.973329803218519
							],
							[
								32.31423473428475,
								11.68148447716652
							],
							[
								32.400071594888345,
								11.080626452941488
							],
							[
								31.850715687025513,
								10.531270545078826
							],
							[
								31.35286189552488,
								9.810240916008695
							],
							[
								30.837840731903384,
								9.70723668328452
							],
							[
								29.996639497988554,
								10.290927335388687
							],
							[
								29.61895731133285,
								10.084918869940225
							],
							[
								29.515953078608618,
								9.793073543888056
							],
							[
								29.000931914987177,
								9.60423245056029
							],
							[
								28.966597170745786,
								9.398223985111656
							],
							[
								27.970889587744352,
								9.398223985111656
							],
							[
								27.833550610778786,
								9.60423245056029
							],
							[
								27.112520981708883,
								9.638567194801624
							],
							[
								26.752006167173818,
								9.466893473594496
							],
							[
								26.477328213242515,
								9.552730334198088
							],
							[
								25.962307049621018,
								10.136420986302426
							],
							[
								25.790633328413946,
								10.411098940233728
							],
							[
								25.069603699343986,
								10.273759963267992
							],
							[
								24.794925745412684,
								9.810240916008695
							],
							[
								24.53741516360202,
								8.91753756573172
							],
							[
								24.19406772118765,
								8.728696472403897
							],
							[
								23.886979580860668,
								8.619729712933065
							],
							[
								23.805813429466752,
								8.666318874542526
							],
							[
								23.459012892355986,
								8.95428579348902
							],
							[
								23.394779087017298,
								9.265067857292252
							],
							[
								23.55724979014292,
								9.68121816653877
							],
							[
								23.554304233502194,
								10.08925527591532
							],
							[
								22.977543572692753,
								10.71446259199854
							],
							[
								22.864165480244253,
								11.142395127807617
							],
							[
								22.876219999999932,
								11.384610000000123
							],
							[
								22.50869,
								11.679360000000031
							],
							[
								22.497619999999984,
								12.260240000000067
							],
							[
								22.288010000000043,
								12.646049999999946
							],
							[
								21.93680999999998,
								12.588180000000136
							],
							[
								22.037589999999966,
								12.95545999999996
							],
							[
								22.296580000000006,
								13.372319999999945
							],
							[
								22.18329,
								13.78648000000004
							],
							[
								22.512020000000007,
								14.093179999999961
							],
							[
								22.30350999999996,
								14.326820000000055
							],
							[
								22.56795000000011,
								14.944290000000137
							],
							[
								23.024590000000103,
								15.680720000000065
							],
							[
								23.886890000000108,
								15.610839999999996
							],
							[
								23.83766000000014,
								19.580470000000105
							],
							[
								23.850000000000136,
								20.000000000000057
							],
							[
								25.000000000000114,
								20.003040000000055
							],
							[
								25.000000000000114,
								22
							],
							[
								29.019999999999982,
								22
							],
							[
								32.89999999999998,
								22
							],
							[
								36.86622999999997,
								22
							],
							[
								37.1887200000001,
								21.018850000000043
							],
							[
								36.969409999999925,
								20.83744000000013
							],
							[
								37.11470000000014,
								19.807960000000094
							],
							[
								37.4817900000001,
								18.61409000000009
							],
							[
								37.862760000000094,
								18.36785999999995
							],
							[
								38.410089959473225,
								17.998307399970315
							],
							[
								37.90400000000011,
								17.427540000000022
							],
							[
								37.167470000000094,
								17.263140000000135
							],
							[
								36.852530000000115,
								16.956549999999993
							],
							[
								36.75389000000007,
								16.291860000000042
							],
							[
								36.32321999999999,
								14.822490000000016
							],
							[
								36.42951000000005,
								14.422110000000032
							],
							[
								36.27022000000005,
								13.563330000000121
							],
							[
								35.86363,
								12.578280000000063
							],
							[
								35.26049000000006,
								12.08286000000004
							],
							[
								34.83163000000013,
								11.318960000000118
							],
							[
								34.73115000000013,
								10.910170000000107
							],
							[
								34.25745000000006,
								10.630089999999996
							],
							[
								33.961620000000096,
								9.583580000000097
							],
							[
								33.963392794971185,
								9.464285229420625
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Sudan",
					"sov_a3": "SDN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Sudan",
					"adm0_a3": "SDN",
					"geou_dif": 0,
					"geounit": "Sudan",
					"gu_a3": "SDN",
					"su_dif": 0,
					"subunit": "Sudan",
					"su_a3": "SDN",
					"brk_diff": 0,
					"name": "Sudan",
					"name_long": "Sudan",
					"brk_a3": "SDN",
					"brk_name": "Sudan",
					"brk_group": "",
					"abbrev": "Sudan",
					"postal": "SD",
					"formal_en": "Republic of the Sudan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Sudan",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 6,
					"mapcolor9": 4,
					"mapcolor13": 1,
					"pop_est": 25946220,
					"gdp_md_est": 88080,
					"pop_year": -99,
					"lastcensus": 2008,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SD",
					"iso_a3": "SDN",
					"iso_n3": "729",
					"un_a3": "729",
					"wb_a2": "SD",
					"wb_a3": "SDN",
					"woe_id": -99,
					"adm0_a3_is": "SDN",
					"adm0_a3_us": "SDN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Northern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								33.963392794971185,
								9.464285229420625
							],
							[
								33.97498000000007,
								8.68455999999992
							],
							[
								33.82550000000015,
								8.37916000000007
							],
							[
								33.29480000000012,
								8.354580000000055
							],
							[
								32.954180000000065,
								7.784970000000101
							],
							[
								33.568290000000104,
								7.7133400000000165
							],
							[
								34.07510000000002,
								7.2259500000000685
							],
							[
								34.250320000000045,
								6.8260700000000725
							],
							[
								34.70702,
								6.594220000000121
							],
							[
								35.2980071182331,
								5.506000000000029
							],
							[
								34.62019626785394,
								4.8471227420820355
							],
							[
								34.00500000000005,
								4.249884947362148
							],
							[
								33.3900000000001,
								3.7899999999999636
							],
							[
								32.686420000000055,
								3.7923200000000747
							],
							[
								31.881450000000143,
								3.558269999999993
							],
							[
								31.24556000000007,
								3.7819000000000074
							],
							[
								30.83385000000004,
								3.5091699999999832
							],
							[
								29.953490000000045,
								4.1737000000000535
							],
							[
								29.71599531425602,
								4.600804755060153
							],
							[
								29.159078403446642,
								4.389267279473245
							],
							[
								28.696677687298802,
								4.455077215996994
							],
							[
								28.428993768027,
								4.2871546492646075
							],
							[
								27.979977247842953,
								4.408413397637389
							],
							[
								27.374226108517632,
								5.233944403500175
							],
							[
								27.213409051225256,
								5.550953477394614
							],
							[
								26.465909458123292,
								5.946717434101856
							],
							[
								26.21341840994512,
								6.546603298362129
							],
							[
								25.796647983511264,
								6.97931590415817
							],
							[
								25.124130893664812,
								7.500085150579423
							],
							[
								25.114932488716875,
								7.825104071479245
							],
							[
								24.5673690121522,
								8.229187933785454
							],
							[
								23.886979580860668,
								8.619729712933065
							],
							[
								24.19406772118765,
								8.728696472403897
							],
							[
								24.53741516360202,
								8.91753756573172
							],
							[
								24.794925745412684,
								9.810240916008695
							],
							[
								25.069603699343986,
								10.273759963267992
							],
							[
								25.790633328413946,
								10.411098940233728
							],
							[
								25.962307049621018,
								10.136420986302426
							],
							[
								26.477328213242515,
								9.552730334198088
							],
							[
								26.752006167173818,
								9.466893473594496
							],
							[
								27.112520981708883,
								9.638567194801624
							],
							[
								27.833550610778786,
								9.60423245056029
							],
							[
								27.970889587744352,
								9.398223985111656
							],
							[
								28.966597170745786,
								9.398223985111656
							],
							[
								29.000931914987177,
								9.60423245056029
							],
							[
								29.515953078608618,
								9.793073543888056
							],
							[
								29.61895731133285,
								10.084918869940225
							],
							[
								29.996639497988554,
								10.290927335388687
							],
							[
								30.837840731903384,
								9.70723668328452
							],
							[
								31.35286189552488,
								9.810240916008695
							],
							[
								31.850715687025513,
								10.531270545078826
							],
							[
								32.400071594888345,
								11.080626452941488
							],
							[
								32.31423473428475,
								11.68148447716652
							],
							[
								32.073891524594785,
								11.973329803218519
							],
							[
								32.67474954881965,
								12.02483191958072
							],
							[
								32.743419037302544,
								12.248007757149992
							],
							[
								33.206938084561784,
								12.179338268667095
							],
							[
								33.086766479716744,
								11.441141267476496
							],
							[
								33.206938084561784,
								10.720111638406593
							],
							[
								33.72195924818311,
								10.325262079630193
							],
							[
								33.84213085302815,
								9.981914637215993
							],
							[
								33.82496348090751,
								9.484060845715362
							],
							[
								33.963392794971185,
								9.464285229420625
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "South Sudan",
					"sov_a3": "SDS",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "South Sudan",
					"adm0_a3": "SDS",
					"geou_dif": 0,
					"geounit": "South Sudan",
					"gu_a3": "SDS",
					"su_dif": 0,
					"subunit": "South Sudan",
					"su_a3": "SDS",
					"brk_diff": 0,
					"name": "S. Sudan",
					"name_long": "South Sudan",
					"brk_a3": "SDS",
					"brk_name": "S. Sudan",
					"brk_group": "",
					"abbrev": "S. Sud.",
					"postal": "SS",
					"formal_en": "Republic of South Sudan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "South Sudan",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 3,
					"mapcolor9": 3,
					"mapcolor13": 5,
					"pop_est": 10625176,
					"gdp_md_est": 13227,
					"pop_year": -99,
					"lastcensus": 2008,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SS",
					"iso_a3": "SSD",
					"iso_n3": "728",
					"un_a3": "728",
					"wb_a2": "SS",
					"wb_a3": "SSD",
					"woe_id": -99,
					"adm0_a3_is": "SSD",
					"adm0_a3_us": "SDS",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 8,
					"long_len": 11,
					"abbrev_len": 7,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-16.71372880702347,
								13.594958604379855
							],
							[
								-17.126106736712615,
								14.373515733289224
							],
							[
								-17.62504269049066,
								14.729540513564073
							],
							[
								-17.18517289882223,
								14.919477240452862
							],
							[
								-16.700706346085923,
								15.621527411354108
							],
							[
								-16.463098110407884,
								16.13503611903846
							],
							[
								-16.12069007004193,
								16.455662543193384
							],
							[
								-15.623666144258692,
								16.369337063049812
							],
							[
								-15.135737270558819,
								16.587282416240782
							],
							[
								-14.577347581428981,
								16.59826365810281
							],
							[
								-14.099521450242179,
								16.304302273010492
							],
							[
								-13.435737677453062,
								16.03938304286619
							],
							[
								-12.830658331747516,
								15.303691514542948
							],
							[
								-12.170750291380301,
								14.616834214735505
							],
							[
								-12.12488745772126,
								13.994727484589788
							],
							[
								-11.927716030311615,
								13.422075100147396
							],
							[
								-11.55339779300543,
								13.141213690641067
							],
							[
								-11.467899135778524,
								12.754518947800975
							],
							[
								-11.51394283695059,
								12.442987575729418
							],
							[
								-11.658300950557932,
								12.386582749882836
							],
							[
								-12.203564825885634,
								12.465647691289405
							],
							[
								-12.27859900557344,
								12.354440008997287
							],
							[
								-12.499050665730564,
								12.332089952031057
							],
							[
								-13.217818162478238,
								12.575873521367967
							],
							[
								-13.700476040084325,
								12.586182969610194
							],
							[
								-15.54847693527401,
								12.628170070847347
							],
							[
								-15.816574266004254,
								12.515567124883347
							],
							[
								-16.147716844130585,
								12.547761542201187
							],
							[
								-16.677451951554573,
								12.384851589401052
							],
							[
								-16.841524624081273,
								13.15139394780256
							],
							[
								-15.931295945692211,
								13.130284125211332
							],
							[
								-15.691000535534995,
								13.270353094938457
							],
							[
								-15.511812506562933,
								13.278569647672867
							],
							[
								-15.141163295949468,
								13.509511623585238
							],
							[
								-14.712197231494628,
								13.298206691943777
							],
							[
								-14.277701788784555,
								13.280585028532244
							],
							[
								-13.844963344772408,
								13.505041612192002
							],
							[
								-14.046992356817482,
								13.79406789800045
							],
							[
								-14.376713833055788,
								13.625680243377374
							],
							[
								-14.687030808968487,
								13.630356960499784
							],
							[
								-15.08173539881382,
								13.876491807505985
							],
							[
								-15.39877031092446,
								13.86036876063092
							],
							[
								-15.624596320039942,
								13.62358734786956
							],
							[
								-16.71372880702347,
								13.594958604379855
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Senegal",
					"sov_a3": "SEN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Senegal",
					"adm0_a3": "SEN",
					"geou_dif": 0,
					"geounit": "Senegal",
					"gu_a3": "SEN",
					"su_dif": 0,
					"subunit": "Senegal",
					"su_a3": "SEN",
					"brk_diff": 0,
					"name": "Senegal",
					"name_long": "Senegal",
					"brk_a3": "SEN",
					"brk_name": "Senegal",
					"brk_group": "",
					"abbrev": "Sen.",
					"postal": "SN",
					"formal_en": "Republic of Senegal",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Senegal",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 6,
					"mapcolor9": 5,
					"mapcolor13": 5,
					"pop_est": 13711597,
					"gdp_md_est": 21980,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SN",
					"iso_a3": "SEN",
					"iso_n3": "686",
					"un_a3": "686",
					"wb_a2": "SN",
					"wb_a3": "SEN",
					"woe_id": -99,
					"adm0_a3_is": "SEN",
					"adm0_a3_us": "SEN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									162.11902469304087,
									-10.482719008021135
								],
								[
									162.39864586817222,
									-10.82636728276212
								],
								[
									161.70003218001838,
									-10.820011081590224
								],
								[
									161.31979699121476,
									-10.204751478723125
								],
								[
									161.917383254238,
									-10.446700534713656
								],
								[
									162.11902469304087,
									-10.482719008021135
								]
							]
						],
						[
							[
								[
									160.85222863183796,
									-9.872937106977005
								],
								[
									160.46258833235729,
									-9.895209649294841
								],
								[
									159.8494474632142,
									-9.794027194867368
								],
								[
									159.64000288313517,
									-9.63997975020527
								],
								[
									159.70294477766666,
									-9.242949720906779
								],
								[
									160.36295617089846,
									-9.400304457235535
								],
								[
									160.6885176943372,
									-9.610162448772812
								],
								[
									160.85222863183796,
									-9.872937106977005
								]
							]
						],
						[
							[
								[
									161.67998172428915,
									-9.599982191611375
								],
								[
									161.52939660059056,
									-9.784312025596435
								],
								[
									160.78825320866056,
									-8.91754322676492
								],
								[
									160.57999718652437,
									-8.320008640173967
								],
								[
									160.92002811100494,
									-8.320008640173967
								],
								[
									161.28000613835,
									-9.120011488484451
								],
								[
									161.67998172428915,
									-9.599982191611375
								]
							]
						],
						[
							[
								[
									159.8750272971986,
									-8.337320244991716
								],
								[
									159.917401971678,
									-8.538289890174866
								],
								[
									159.1336771995394,
									-8.1141814103554
								],
								[
									158.58611372297472,
									-7.754823500197716
								],
								[
									158.21114953026486,
									-7.421872246941149
								],
								[
									158.35997765526545,
									-7.320017998893917
								],
								[
									158.82000125552773,
									-7.560003350457393
								],
								[
									159.64000288313517,
									-8.020026950719569
								],
								[
									159.8750272971986,
									-8.337320244991716
								]
							]
						],
						[
							[
								[
									157.5384257346893,
									-7.347819919466929
								],
								[
									157.33941979393327,
									-7.404767347852555
								],
								[
									156.9020304710148,
									-7.176874281445393
								],
								[
									156.49135786359133,
									-6.7659432918603954
								],
								[
									156.54282759015396,
									-6.59933847415148
								],
								[
									157.1400004417189,
									-7.021638278840655
								],
								[
									157.5384257346893,
									-7.347819919466929
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Solomon Islands",
					"sov_a3": "SLB",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Solomon Islands",
					"adm0_a3": "SLB",
					"geou_dif": 0,
					"geounit": "Solomon Islands",
					"gu_a3": "SLB",
					"su_dif": 0,
					"subunit": "Solomon Islands",
					"su_a3": "SLB",
					"brk_diff": 0,
					"name": "Solomon Is.",
					"name_long": "Solomon Islands",
					"brk_a3": "SLB",
					"brk_name": "Solomon Is.",
					"brk_group": "",
					"abbrev": "S. Is.",
					"postal": "SB",
					"formal_en": "",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Solomon Islands",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 1,
					"mapcolor13": 6,
					"pop_est": 595613,
					"gdp_md_est": 1078,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SB",
					"iso_a3": "SLB",
					"iso_n3": "090",
					"un_a3": "090",
					"wb_a2": "SB",
					"wb_a3": "SLB",
					"woe_id": -99,
					"adm0_a3_is": "SLB",
					"adm0_a3_us": "SLB",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Oceania",
					"region_un": "Oceania",
					"subregion": "Melanesia",
					"region_wb": "East Asia & Pacific",
					"name_len": 11,
					"long_len": 15,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-11.438779466182055,
								6.7859168563057475
							],
							[
								-11.70819454593574,
								6.860098374860726
							],
							[
								-12.428098924193819,
								7.26294200279203
							],
							[
								-12.949049038128194,
								7.798645738145738
							],
							[
								-13.124025437868482,
								8.163946438016978
							],
							[
								-13.246550258832515,
								8.903048610871508
							],
							[
								-12.71195756677308,
								9.342711696810767
							],
							[
								-12.59671912276221,
								9.62018830000197
							],
							[
								-12.425928514037565,
								9.835834051955956
							],
							[
								-12.150338100625005,
								9.858571682164381
							],
							[
								-11.917277390988659,
								10.046983954300558
							],
							[
								-11.11748124840733,
								10.045872911006285
							],
							[
								-10.839151984083301,
								9.688246161330369
							],
							[
								-10.622395188835041,
								9.267910061068278
							],
							[
								-10.654770473665891,
								8.977178452994195
							],
							[
								-10.494315151399633,
								8.715540676300435
							],
							[
								-10.505477260774668,
								8.348896389189605
							],
							[
								-10.23009355309128,
								8.406205552601293
							],
							[
								-10.69559485517648,
								7.939464016141088
							],
							[
								-11.146704270868383,
								7.396706447779536
							],
							[
								-11.19980180504828,
								7.1058456486247366
							],
							[
								-11.438779466182055,
								6.7859168563057475
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Sierra Leone",
					"sov_a3": "SLE",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Sierra Leone",
					"adm0_a3": "SLE",
					"geou_dif": 0,
					"geounit": "Sierra Leone",
					"gu_a3": "SLE",
					"su_dif": 0,
					"subunit": "Sierra Leone",
					"su_a3": "SLE",
					"brk_diff": 0,
					"name": "Sierra Leone",
					"name_long": "Sierra Leone",
					"brk_a3": "SLE",
					"brk_name": "Sierra Leone",
					"brk_group": "",
					"abbrev": "S.L.",
					"postal": "SL",
					"formal_en": "Republic of Sierra Leone",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Sierra Leone",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 1,
					"mapcolor13": 7,
					"pop_est": 6440053,
					"gdp_md_est": 4285,
					"pop_year": -99,
					"lastcensus": 2004,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SL",
					"iso_a3": "SLE",
					"iso_n3": "694",
					"un_a3": "694",
					"wb_a2": "SL",
					"wb_a3": "SLE",
					"woe_id": -99,
					"adm0_a3_is": "SLE",
					"adm0_a3_us": "SLE",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 12,
					"long_len": 12,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-90.09555457229098,
								13.735337632700734
							],
							[
								-90.0646779039966,
								13.881969509328925
							],
							[
								-89.72193396682073,
								14.134228013561696
							],
							[
								-89.53421932652051,
								14.244815578666305
							],
							[
								-89.58734269891656,
								14.36258616785949
							],
							[
								-89.3533259752828,
								14.424132798719114
							],
							[
								-89.05851192905766,
								14.340029405164087
							],
							[
								-88.84307288283284,
								14.14050670008517
							],
							[
								-88.541230841816,
								13.980154730683479
							],
							[
								-88.50399797234971,
								13.845485948130857
							],
							[
								-88.06534257684014,
								13.964625962779778
							],
							[
								-87.8595153470216,
								13.893312486216983
							],
							[
								-87.7235029772294,
								13.785050360565506
							],
							[
								-87.79311113152657,
								13.384480495655055
							],
							[
								-87.90411210808952,
								13.149016831917137
							],
							[
								-88.48330156121682,
								13.163951320849492
							],
							[
								-88.84322791212972,
								13.259733588102478
							],
							[
								-89.2567427233293,
								13.458532823129303
							],
							[
								-89.81239356154767,
								13.520622056527998
							],
							[
								-90.09555457229098,
								13.735337632700734
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "El Salvador",
					"sov_a3": "SLV",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "El Salvador",
					"adm0_a3": "SLV",
					"geou_dif": 0,
					"geounit": "El Salvador",
					"gu_a3": "SLV",
					"su_dif": 0,
					"subunit": "El Salvador",
					"su_a3": "SLV",
					"brk_diff": 0,
					"name": "El Salvador",
					"name_long": "El Salvador",
					"brk_a3": "SLV",
					"brk_name": "El Salvador",
					"brk_group": "",
					"abbrev": "El. S.",
					"postal": "SV",
					"formal_en": "Republic of El Salvador",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "El Salvador",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 6,
					"mapcolor13": 8,
					"pop_est": 7185218,
					"gdp_md_est": 43630,
					"pop_year": -99,
					"lastcensus": 2007,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SV",
					"iso_a3": "SLV",
					"iso_n3": "222",
					"un_a3": "222",
					"wb_a2": "SV",
					"wb_a3": "SLV",
					"woe_id": -99,
					"adm0_a3_is": "SLV",
					"adm0_a3_us": "SLV",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Central America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 11,
					"long_len": 11,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								47.789420000000064,
								8.002999999999986
							],
							[
								46.94832848489796,
								7.996876532417389
							],
							[
								43.678750000000036,
								9.18358000000012
							],
							[
								43.29697513201876,
								9.540477403191744
							],
							[
								42.92812000000009,
								10.021940000000143
							],
							[
								42.55875999999995,
								10.57258000000013
							],
							[
								42.77685184100096,
								10.92687856693442
							],
							[
								43.14530480324214,
								11.462039699748857
							],
							[
								43.470659620951665,
								11.277709865763882
							],
							[
								43.66666832863484,
								10.86416921634816
							],
							[
								44.11780358254282,
								10.445538438351605
							],
							[
								44.614259067570856,
								10.442205308468942
							],
							[
								45.55694054543915,
								10.698029486529776
							],
							[
								46.645401238803004,
								10.816549383991173
							],
							[
								47.525657586462785,
								11.12722809492999
							],
							[
								48.02159630716778,
								11.193063869669743
							],
							[
								48.37878380716927,
								11.375481675660126
							],
							[
								48.94820641459347,
								11.41062164961852
							],
							[
								48.94200524271844,
								11.394266058798166
							],
							[
								48.93849124532261,
								10.982327378783452
							],
							[
								48.93823286316109,
								9.973500067581483
							],
							[
								48.938129510296505,
								9.451748968946674
							],
							[
								48.48673587422701,
								8.83762624758998
							],
							[
								47.789420000000064,
								8.002999999999986
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Somaliland",
					"sov_a3": "SOL",
					"adm0_dif": 0,
					"level": 2,
					"type": "Indeterminate",
					"admin": "Somaliland",
					"adm0_a3": "SOL",
					"geou_dif": 0,
					"geounit": "Somaliland",
					"gu_a3": "SOL",
					"su_dif": 0,
					"subunit": "Somaliland",
					"su_a3": "SOL",
					"brk_diff": 1,
					"name": "Somaliland",
					"name_long": "Somaliland",
					"brk_a3": "B30",
					"brk_name": "Somaliland",
					"brk_group": "",
					"abbrev": "Solnd.",
					"postal": "SL",
					"formal_en": "Republic of Somaliland",
					"formal_fr": "",
					"note_adm0": "Self admin.",
					"note_brk": "Self admin.; Claimed by Somalia",
					"name_sort": "Somaliland",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 6,
					"mapcolor9": 5,
					"mapcolor13": 2,
					"pop_est": 3500000,
					"gdp_md_est": 12250,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "-99",
					"iso_a3": "-99",
					"iso_n3": "-99",
					"un_a3": "-099",
					"wb_a2": "-99",
					"wb_a3": "-99",
					"woe_id": -99,
					"adm0_a3_is": "SOM",
					"adm0_a3_us": "SOM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								41.58513,
								-1.6832500000000001
							],
							[
								40.993,
								-0.85829
							],
							[
								40.98105,
								2.7845199999999997
							],
							[
								41.85508309264397,
								3.918911920483727
							],
							[
								42.128609999999995,
								4.23413
							],
							[
								42.76967,
								4.25259
							],
							[
								43.66087,
								4.95755
							],
							[
								44.96360000000001,
								5.00162
							],
							[
								47.78942,
								8.003
							],
							[
								48.48673587422695,
								8.837626247589995
							],
							[
								48.93812951029645,
								9.451748968946617
							],
							[
								48.93823286316103,
								9.973500067581512
							],
							[
								48.938491245322496,
								10.982327378783467
							],
							[
								48.94200524271835,
								11.394266058798138
							],
							[
								48.94820475850974,
								11.410617281697963
							],
							[
								49.26776,
								11.43033
							],
							[
								49.72862,
								11.5789
							],
							[
								50.25878000000001,
								11.67957
							],
							[
								50.73202,
								12.021900000000002
							],
							[
								51.1112,
								12.024640000000002
							],
							[
								51.13387,
								11.74815
							],
							[
								51.04153,
								11.16651
							],
							[
								51.04531,
								10.6409
							],
							[
								50.834179999999996,
								10.279720000000001
							],
							[
								50.55239,
								9.19874
							],
							[
								50.07092,
								8.08173
							],
							[
								49.45270000000001,
								6.80466
							],
							[
								48.594550000000005,
								5.339110000000001
							],
							[
								47.740790000000004,
								4.2194
							],
							[
								46.56476,
								2.85529
							],
							[
								45.563990000000004,
								2.04576
							],
							[
								44.068149999999996,
								1.0528300000000002
							],
							[
								43.13597,
								0.2922
							],
							[
								42.04157000000001,
								-0.9191600000000001
							],
							[
								41.81095,
								-1.4464700000000001
							],
							[
								41.58513,
								-1.6832500000000001
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Somalia",
					"sov_a3": "SOM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Somalia",
					"adm0_a3": "SOM",
					"geou_dif": 0,
					"geounit": "Somalia",
					"gu_a3": "SOM",
					"su_dif": 0,
					"subunit": "Somalia",
					"su_a3": "SOM",
					"brk_diff": 0,
					"name": "Somalia",
					"name_long": "Somalia",
					"brk_a3": "SOM",
					"brk_name": "Somalia",
					"brk_group": "",
					"abbrev": "Som.",
					"postal": "SO",
					"formal_en": "Federal Republic of Somalia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Somalia",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 8,
					"mapcolor9": 6,
					"mapcolor13": 7,
					"pop_est": 9832017,
					"gdp_md_est": 5524,
					"pop_year": -99,
					"lastcensus": 1987,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SO",
					"iso_a3": "SOM",
					"iso_n3": "706",
					"un_a3": "706",
					"wb_a2": "SO",
					"wb_a3": "SOM",
					"woe_id": -99,
					"adm0_a3_is": "SOM",
					"adm0_a3_us": "SOM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								22.38052575042468,
								42.32025950781508
							],
							[
								21.917080000000112,
								42.30363999999997
							],
							[
								21.57663598940212,
								42.24522439706186
							],
							[
								21.54332000000005,
								42.3202500000001
							],
							[
								21.662920000000042,
								42.439220000000034
							],
							[
								21.77505000000002,
								42.68270000000001
							],
							[
								21.633020000000045,
								42.67717000000005
							],
							[
								21.43865999999997,
								42.86254999999994
							],
							[
								21.27421000000004,
								42.909590000000094
							],
							[
								21.143395000000055,
								43.06868500000013
							],
							[
								20.95650999999998,
								43.13094000000007
							],
							[
								20.814480000000003,
								43.27205000000009
							],
							[
								20.63507999999996,
								43.21670999999998
							],
							[
								20.496790000000033,
								42.884690000000035
							],
							[
								20.257580000000075,
								42.81275000000011
							],
							[
								20.339800000000082,
								42.89852000000002
							],
							[
								19.958570000000066,
								43.106040000000064
							],
							[
								19.629999999999995,
								43.21377997027054
							],
							[
								19.483889999999974,
								43.35229000000004
							],
							[
								19.218519999999955,
								43.52384000000001
							],
							[
								19.454000000000065,
								43.56810000000013
							],
							[
								19.59976000000006,
								44.03846999999996
							],
							[
								19.11761000000007,
								44.42307000000011
							],
							[
								19.36802999999992,
								44.863000000000056
							],
							[
								19.00548000000009,
								44.86023
							],
							[
								19.39047570158459,
								45.236515611342384
							],
							[
								19.072768995854176,
								45.52151113543209
							],
							[
								18.829820000000097,
								45.90888000000007
							],
							[
								19.59604454924164,
								46.17172984474456
							],
							[
								20.220192498462893,
								46.12746898048658
							],
							[
								20.762174920339987,
								45.734573065771485
							],
							[
								20.87431277841341,
								45.41637543393432
							],
							[
								21.48352623870221,
								45.18117015235788
							],
							[
								21.562022739353722,
								44.76894725196564
							],
							[
								22.145087924902896,
								44.47842234962059
							],
							[
								22.459022251075965,
								44.70251719825444
							],
							[
								22.70572553883744,
								44.57800283464701
							],
							[
								22.474008416440654,
								44.40922760678177
							],
							[
								22.657149692483074,
								44.234923000661354
							],
							[
								22.410446404721597,
								44.008063462900054
							],
							[
								22.500156691180223,
								43.642814439461006
							],
							[
								22.986018507588483,
								43.2111612005271
							],
							[
								22.60480146657136,
								42.898518785161116
							],
							[
								22.436594679461393,
								42.58032115332395
							],
							[
								22.54501183440965,
								42.46136200618804
							],
							[
								22.38052575042468,
								42.32025950781508
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Republic of Serbia",
					"sov_a3": "SRB",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Republic of Serbia",
					"adm0_a3": "SRB",
					"geou_dif": 0,
					"geounit": "Republic of Serbia",
					"gu_a3": "SRB",
					"su_dif": 0,
					"subunit": "Republic of Serbia",
					"su_a3": "SRB",
					"brk_diff": 0,
					"name": "Serbia",
					"name_long": "Serbia",
					"brk_a3": "SRB",
					"brk_name": "Serbia",
					"brk_group": "",
					"abbrev": "Serb.",
					"postal": "RS",
					"formal_en": "Republic of Serbia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Serbia",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 3,
					"mapcolor9": 2,
					"mapcolor13": 10,
					"pop_est": 7379339,
					"gdp_md_est": 80340,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "RS",
					"iso_a3": "SRB",
					"iso_n3": "688",
					"un_a3": "688",
					"wb_a2": "YF",
					"wb_a3": "SRB",
					"woe_id": -99,
					"adm0_a3_is": "SRB",
					"adm0_a3_us": "SRB",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-57.14743648947689,
								5.973149929219161
							],
							[
								-55.9493184067898,
								5.772877915872002
							],
							[
								-55.841779751190415,
								5.95312531170606
							],
							[
								-55.033250291551774,
								6.025291449401664
							],
							[
								-53.9580446030709,
								5.756548163267765
							],
							[
								-54.47863298197923,
								4.896755682795586
							],
							[
								-54.399542202356514,
								4.212611395683467
							],
							[
								-54.00693050801901,
								3.6200377465925584
							],
							[
								-54.181726040246275,
								3.1897797713304215
							],
							[
								-54.2697051662232,
								2.7323916691150463
							],
							[
								-54.524754197799716,
								2.3118488631237852
							],
							[
								-55.09758744975514,
								2.5237480737366127
							],
							[
								-55.569755011606,
								2.4215062524471307
							],
							[
								-55.973322109589375,
								2.510363877773017
							],
							[
								-56.0733418442903,
								2.2207949894254995
							],
							[
								-55.905600145070885,
								2.0219957543986595
							],
							[
								-55.995698004771754,
								1.8176671411166012
							],
							[
								-56.539385748914555,
								1.8995226098669207
							],
							[
								-57.15009782573991,
								2.7689269067454063
							],
							[
								-57.28143347840971,
								3.3334919295341194
							],
							[
								-57.60156897645787,
								3.3346546492606848
							],
							[
								-58.04469438336068,
								4.0608635522583825
							],
							[
								-57.8602095200787,
								4.57680105226045
							],
							[
								-57.91428890647214,
								4.812626451024414
							],
							[
								-57.307245856339506,
								5.073566595882227
							],
							[
								-57.14743648947689,
								5.973149929219161
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Suriname",
					"sov_a3": "SUR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Suriname",
					"adm0_a3": "SUR",
					"geou_dif": 0,
					"geounit": "Suriname",
					"gu_a3": "SUR",
					"su_dif": 0,
					"subunit": "Suriname",
					"su_a3": "SUR",
					"brk_diff": 0,
					"name": "Suriname",
					"name_long": "Suriname",
					"brk_a3": "SUR",
					"brk_name": "Suriname",
					"brk_group": "",
					"abbrev": "Sur.",
					"postal": "SR",
					"formal_en": "Republic of Suriname",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Suriname",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 7,
					"mapcolor13": 6,
					"pop_est": 481267,
					"gdp_md_est": 4254,
					"pop_year": -99,
					"lastcensus": 2004,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SR",
					"iso_a3": "SUR",
					"iso_n3": "740",
					"un_a3": "740",
					"wb_a2": "SR",
					"wb_a3": "SUR",
					"woe_id": -99,
					"adm0_a3_is": "SUR",
					"adm0_a3_us": "SUR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								18.853144158613617,
								49.49622976337764
							],
							[
								18.90957482267632,
								49.435845852244576
							],
							[
								19.320712517990472,
								49.571574001659194
							],
							[
								19.825022820726872,
								49.21712535256923
							],
							[
								20.415839471119853,
								49.43145335549977
							],
							[
								20.887955356538413,
								49.32877228453583
							],
							[
								21.607808058364213,
								49.47010732685409
							],
							[
								22.558137648211755,
								49.085738023467144
							],
							[
								22.28084191253356,
								48.82539215758067
							],
							[
								22.085608351334855,
								48.42226430927179
							],
							[
								21.872236362401736,
								48.31997081155002
							],
							[
								20.801293979584926,
								48.623854071642384
							],
							[
								20.473562045989866,
								48.562850043321816
							],
							[
								20.239054396249347,
								48.32756724709692
							],
							[
								19.769470656013112,
								48.202691148463614
							],
							[
								19.661363559658497,
								48.26661489520866
							],
							[
								19.17436486173989,
								48.11137889260387
							],
							[
								18.77702477384767,
								48.081768296900634
							],
							[
								18.696512892336926,
								47.880953681014404
							],
							[
								17.857132602620027,
								47.75842886005037
							],
							[
								17.48847293464982,
								47.867466132186216
							],
							[
								16.979666782304037,
								48.123497015976305
							],
							[
								16.879982944413,
								48.47001333270947
							],
							[
								16.960288120194576,
								48.5969823268506
							],
							[
								17.101984897538898,
								48.816968899117114
							],
							[
								17.545006951577108,
								48.80001902932537
							],
							[
								17.88648481616181,
								48.90347524677371
							],
							[
								17.913511590250465,
								48.996492824899086
							],
							[
								18.104972771891852,
								49.04398346617531
							],
							[
								18.170498488037964,
								49.271514797556435
							],
							[
								18.399993523846177,
								49.31500051533004
							],
							[
								18.554971144289482,
								49.495015367218784
							],
							[
								18.853144158613617,
								49.49622976337764
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Slovakia",
					"sov_a3": "SVK",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Slovakia",
					"adm0_a3": "SVK",
					"geou_dif": 0,
					"geounit": "Slovakia",
					"gu_a3": "SVK",
					"su_dif": 0,
					"subunit": "Slovakia",
					"su_a3": "SVK",
					"brk_diff": 0,
					"name": "Slovakia",
					"name_long": "Slovakia",
					"brk_a3": "SVK",
					"brk_name": "Slovakia",
					"brk_group": "",
					"abbrev": "Svk.",
					"postal": "SK",
					"formal_en": "Slovak Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Slovak Republic",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 4,
					"mapcolor9": 4,
					"mapcolor13": 9,
					"pop_est": 5463046,
					"gdp_md_est": 119500,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SK",
					"iso_a3": "SVK",
					"iso_n3": "703",
					"un_a3": "703",
					"wb_a2": "SK",
					"wb_a3": "SVK",
					"woe_id": -99,
					"adm0_a3_is": "SVK",
					"adm0_a3_us": "SVK",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								13.806475457421527,
								46.509306138691215
							],
							[
								14.63247155117483,
								46.43181732846955
							],
							[
								15.137091912504985,
								46.65870270444703
							],
							[
								16.011663852612656,
								46.6836107448117
							],
							[
								16.202298211337364,
								46.85238597267696
							],
							[
								16.370504998447416,
								46.841327216166505
							],
							[
								16.564808383864857,
								46.50375092221983
							],
							[
								15.768732944408553,
								46.23810822202345
							],
							[
								15.671529575267556,
								45.83415355079788
							],
							[
								15.323953891672405,
								45.73178253842768
							],
							[
								15.327674594797429,
								45.45231639259323
							],
							[
								14.935243767972935,
								45.471695054702685
							],
							[
								14.595109490627806,
								45.634940904312714
							],
							[
								14.411968214585414,
								45.46616567644746
							],
							[
								13.715059848697223,
								45.500323798192376
							],
							[
								13.937630242578308,
								45.59101593686462
							],
							[
								13.698109978905478,
								46.01677806251735
							],
							[
								13.806475457421527,
								46.509306138691215
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Slovenia",
					"sov_a3": "SVN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Slovenia",
					"adm0_a3": "SVN",
					"geou_dif": 0,
					"geounit": "Slovenia",
					"gu_a3": "SVN",
					"su_dif": 0,
					"subunit": "Slovenia",
					"su_a3": "SVN",
					"brk_diff": 0,
					"name": "Slovenia",
					"name_long": "Slovenia",
					"brk_a3": "SVN",
					"brk_name": "Slovenia",
					"brk_group": "",
					"abbrev": "Slo.",
					"postal": "SLO",
					"formal_en": "Republic of Slovenia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Slovenia",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 3,
					"mapcolor9": 2,
					"mapcolor13": 12,
					"pop_est": 2005692,
					"gdp_md_est": 59340,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SI",
					"iso_a3": "SVN",
					"iso_n3": "705",
					"un_a3": "705",
					"wb_a2": "SI",
					"wb_a3": "SVN",
					"woe_id": -99,
					"adm0_a3_is": "SVN",
					"adm0_a3_us": "SVN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Southern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								20.645592889089528,
								69.10624726020087
							],
							[
								21.978534783626117,
								68.6168456081807
							],
							[
								23.53947309743444,
								67.93600861273525
							],
							[
								23.565879754335583,
								66.39605093043743
							],
							[
								23.903378533633802,
								66.00692739527962
							],
							[
								22.18317345550193,
								65.72374054632017
							],
							[
								21.21351687997722,
								65.02600535751527
							],
							[
								21.369631381930958,
								64.41358795842429
							],
							[
								19.77887576669022,
								63.60955434839504
							],
							[
								17.84777916837521,
								62.74940013289681
							],
							[
								17.119554884518124,
								61.34116567651097
							],
							[
								17.83134606290639,
								60.63658336042741
							],
							[
								18.78772179533209,
								60.081914374422595
							],
							[
								17.86922488777634,
								58.9537661810587
							],
							[
								16.829185011470088,
								58.71982697207339
							],
							[
								16.447709588291474,
								57.041118069071885
							],
							[
								15.879785597403783,
								56.10430186626866
							],
							[
								14.666681349352075,
								56.200885118222175
							],
							[
								14.100721062891465,
								55.40778107362265
							],
							[
								12.942910597392057,
								55.36173737245058
							],
							[
								12.625100538797028,
								56.30708018658197
							],
							[
								11.787942335668674,
								57.44181712506307
							],
							[
								11.027368605196868,
								58.85614940045936
							],
							[
								11.468271925511146,
								59.43239329694604
							],
							[
								12.3003658382749,
								60.11793284773003
							],
							[
								12.631146681375185,
								61.293571682370136
							],
							[
								11.992064243221563,
								61.80036245385655
							],
							[
								11.930569288794231,
								63.12831757267698
							],
							[
								12.579935336973934,
								64.06621898055833
							],
							[
								13.571916131248713,
								64.04911408146971
							],
							[
								13.919905226302204,
								64.44542064071608
							],
							[
								13.55568973150909,
								64.78702769638151
							],
							[
								15.108411492583002,
								66.19386688909547
							],
							[
								16.108712192456778,
								67.30245555283689
							],
							[
								16.768878614985482,
								68.0139366726314
							],
							[
								17.729181756265348,
								68.01055186631628
							],
							[
								17.993868442464333,
								68.56739126247736
							],
							[
								19.878559604581255,
								68.40719432237258
							],
							[
								20.025268995857886,
								69.0651386583127
							],
							[
								20.645592889089528,
								69.10624726020087
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Sweden",
					"sov_a3": "SWE",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Sweden",
					"adm0_a3": "SWE",
					"geou_dif": 0,
					"geounit": "Sweden",
					"gu_a3": "SWE",
					"su_dif": 0,
					"subunit": "Sweden",
					"su_a3": "SWE",
					"brk_diff": 0,
					"name": "Sweden",
					"name_long": "Sweden",
					"brk_a3": "SWE",
					"brk_name": "Sweden",
					"brk_group": "",
					"abbrev": "Swe.",
					"postal": "S",
					"formal_en": "Kingdom of Sweden",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Sweden",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 4,
					"mapcolor9": 2,
					"mapcolor13": 4,
					"pop_est": 9059651,
					"gdp_md_est": 344300,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "1. High income: OECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SE",
					"iso_a3": "SWE",
					"iso_n3": "752",
					"un_a3": "752",
					"wb_a2": "SE",
					"wb_a3": "SWE",
					"woe_id": -99,
					"adm0_a3_is": "SWE",
					"adm0_a3_us": "SWE",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Northern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								32.07166548028107,
								-26.73382008230491
							],
							[
								31.86806033705108,
								-27.177927341421277
							],
							[
								31.28277306491333,
								-27.285879408478998
							],
							[
								30.68596194837448,
								-26.743845310169533
							],
							[
								30.67660851412964,
								-26.398078301704608
							],
							[
								30.949666782359913,
								-26.02264902110415
							],
							[
								31.04407962415715,
								-25.731452325139443
							],
							[
								31.333157586397903,
								-25.66019052500895
							],
							[
								31.83777794772806,
								-25.84333180105135
							],
							[
								31.98577924981197,
								-26.291779880480227
							],
							[
								32.07166548028107,
								-26.73382008230491
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Swaziland",
					"sov_a3": "SWZ",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Swaziland",
					"adm0_a3": "SWZ",
					"geou_dif": 0,
					"geounit": "Swaziland",
					"gu_a3": "SWZ",
					"su_dif": 0,
					"subunit": "Swaziland",
					"su_a3": "SWZ",
					"brk_diff": 0,
					"name": "Swaziland",
					"name_long": "Swaziland",
					"brk_a3": "SWZ",
					"brk_name": "Swaziland",
					"brk_group": "",
					"abbrev": "Swz.",
					"postal": "SW",
					"formal_en": "Kingdom of Swaziland",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Swaziland",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 6,
					"mapcolor9": 2,
					"mapcolor13": 5,
					"pop_est": 1123913,
					"gdp_md_est": 5702,
					"pop_year": -99,
					"lastcensus": 2007,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SZ",
					"iso_a3": "SWZ",
					"iso_n3": "748",
					"un_a3": "748",
					"wb_a2": "SZ",
					"wb_a3": "SWZ",
					"woe_id": -99,
					"adm0_a3_is": "SWZ",
					"adm0_a3_us": "SWZ",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Southern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								38.792340529136084,
								33.378686428352225
							],
							[
								36.834062127435544,
								32.312937526980775
							],
							[
								35.71991824722275,
								32.709192409794866
							],
							[
								35.70079796727475,
								32.71601369885738
							],
							[
								35.836396925608625,
								32.86812327730851
							],
							[
								35.82110070165024,
								33.2774264592763
							],
							[
								36.066460402172055,
								33.82491242119255
							],
							[
								36.61175011571589,
								34.20178864189718
							],
							[
								36.4481942075121,
								34.59393524834407
							],
							[
								35.99840254084364,
								34.644914048800004
							],
							[
								35.905023227692226,
								35.410009467097325
							],
							[
								36.149762811026534,
								35.82153473565367
							],
							[
								36.417550083163036,
								36.04061697035506
							],
							[
								36.6853890317318,
								36.259699205056464
							],
							[
								36.7394942563414,
								36.81752045343109
							],
							[
								37.06676110204583,
								36.62303620050062
							],
							[
								38.1677274920242,
								36.90121043552777
							],
							[
								38.6998913917659,
								36.71292735447234
							],
							[
								39.52258019385255,
								36.71605377862599
							],
							[
								40.67325931169569,
								37.09127635349729
							],
							[
								41.21208947120305,
								37.074352321921694
							],
							[
								42.34959109881177,
								37.2298725449041
							],
							[
								41.83706424334096,
								36.605853786763575
							],
							[
								41.289707472505455,
								36.35881460219227
							],
							[
								41.383965285005814,
								35.628316555314356
							],
							[
								41.006158888519934,
								34.41937226006212
							],
							[
								38.792340529136084,
								33.378686428352225
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Syria",
					"sov_a3": "SYR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Syria",
					"adm0_a3": "SYR",
					"geou_dif": 0,
					"geounit": "Syria",
					"gu_a3": "SYR",
					"su_dif": 0,
					"subunit": "Syria",
					"su_a3": "SYR",
					"brk_diff": 0,
					"name": "Syria",
					"name_long": "Syria",
					"brk_a3": "SYR",
					"brk_name": "Syria",
					"brk_group": "",
					"abbrev": "Syria",
					"postal": "SYR",
					"formal_en": "Syrian Arab Republic",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Syrian Arab Republic",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 6,
					"mapcolor9": 2,
					"mapcolor13": 6,
					"pop_est": 20178485,
					"gdp_md_est": 98830,
					"pop_year": -99,
					"lastcensus": 2004,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "SY",
					"iso_a3": "SYR",
					"iso_n3": "760",
					"un_a3": "760",
					"wb_a2": "SY",
					"wb_a3": "SYR",
					"woe_id": -99,
					"adm0_a3_is": "SYR",
					"adm0_a3_us": "SYR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								14.495787387762903,
								12.859396267137356
							],
							[
								14.595781284247607,
								13.33042694747786
							],
							[
								13.95447675950561,
								13.353448798063766
							],
							[
								13.956698846094127,
								13.996691189016929
							],
							[
								13.540393507550789,
								14.367133693901224
							],
							[
								13.972170000000006,
								15.684370000000058
							],
							[
								15.247731154041844,
								16.627305813050782
							],
							[
								15.30044111497972,
								17.927949937405003
							],
							[
								15.685740594147774,
								19.957180080642388
							],
							[
								15.903246697664315,
								20.387618923417506
							],
							[
								15.487148064850146,
								20.730414537025638
							],
							[
								15.47106000000008,
								21.04845000000006
							],
							[
								15.096887648181848,
								21.30851878507491
							],
							[
								14.851300000000037,
								22.862950000000126
							],
							[
								15.860850000000084,
								23.409719999999993
							],
							[
								19.849260000000072,
								21.49509000000006
							],
							[
								23.83766000000014,
								19.580470000000105
							],
							[
								23.886890000000108,
								15.610839999999996
							],
							[
								23.024590000000103,
								15.680720000000065
							],
							[
								22.56795000000011,
								14.944290000000137
							],
							[
								22.30350999999996,
								14.326820000000055
							],
							[
								22.512020000000007,
								14.093179999999961
							],
							[
								22.18329,
								13.78648000000004
							],
							[
								22.296580000000006,
								13.372319999999945
							],
							[
								22.037589999999966,
								12.95545999999996
							],
							[
								21.93680999999998,
								12.588180000000136
							],
							[
								22.288010000000043,
								12.646049999999946
							],
							[
								22.497619999999984,
								12.260240000000067
							],
							[
								22.50869,
								11.679360000000031
							],
							[
								22.876219999999932,
								11.384610000000123
							],
							[
								22.864165480244253,
								11.142395127807617
							],
							[
								22.23112918466876,
								10.97188873946061
							],
							[
								21.72382164885954,
								10.567055568885962
							],
							[
								21.00086836109631,
								9.47598521569148
							],
							[
								20.05968549976427,
								9.01270600019484
							],
							[
								19.09400800952608,
								9.07484691002577
							],
							[
								18.812009718509273,
								8.982914536978626
							],
							[
								18.911021762780592,
								8.630894680206438
							],
							[
								18.389554884523307,
								8.281303615751881
							],
							[
								17.964929640380888,
								7.890914008002994
							],
							[
								16.70598839688637,
								7.5083275415299795
							],
							[
								16.456184523187403,
								7.73477366783294
							],
							[
								16.290561557691888,
								7.754307359239419
							],
							[
								16.106231723706742,
								7.497087917506462
							],
							[
								15.279460483469165,
								7.421924546738012
							],
							[
								15.436091749745742,
								7.692812404811889
							],
							[
								15.120865512765306,
								8.382150173369439
							],
							[
								14.979995558337691,
								8.796104234243444
							],
							[
								14.544466586981855,
								8.96586131432224
							],
							[
								13.954218377344091,
								9.549494940626687
							],
							[
								14.171466098699113,
								10.021378282100045
							],
							[
								14.62720055508106,
								9.920919297724595
							],
							[
								14.9093538753948,
								9.99212942142276
							],
							[
								15.467872755605242,
								9.982336737503545
							],
							[
								14.923564894275046,
								10.891325181517516
							],
							[
								14.960151808337685,
								11.555574042197236
							],
							[
								14.89336000000003,
								12.219049999999982
							],
							[
								14.495787387762903,
								12.859396267137356
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Chad",
					"sov_a3": "TCD",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Chad",
					"adm0_a3": "TCD",
					"geou_dif": 0,
					"geounit": "Chad",
					"gu_a3": "TCD",
					"su_dif": 0,
					"subunit": "Chad",
					"su_a3": "TCD",
					"brk_diff": 0,
					"name": "Chad",
					"name_long": "Chad",
					"brk_a3": "TCD",
					"brk_name": "Chad",
					"brk_group": "",
					"abbrev": "Chad",
					"postal": "TD",
					"formal_en": "Republic of Chad",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Chad",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 1,
					"mapcolor9": 8,
					"mapcolor13": 6,
					"pop_est": 10329208,
					"gdp_md_est": 15860,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TD",
					"iso_a3": "TCD",
					"iso_n3": "148",
					"un_a3": "148",
					"wb_a2": "TD",
					"wb_a3": "TCD",
					"woe_id": -99,
					"adm0_a3_is": "TCD",
					"adm0_a3_us": "TCD",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Middle Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 4,
					"long_len": 4,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								1.8652405127123188,
								6.142157701029731
							],
							[
								1.0601216976049272,
								5.928837388528876
							],
							[
								0.8369311865363329,
								6.279978745952149
							],
							[
								0.5703841487748491,
								6.914358628767189
							],
							[
								0.4909574723422451,
								7.411744289576475
							],
							[
								0.7120292496868785,
								8.31246450442383
							],
							[
								0.46119184734212126,
								8.677222601756014
							],
							[
								0.3659005061958851,
								9.465003973829482
							],
							[
								0.3675799902453889,
								10.19121287682718
							],
							[
								-0.04978471515994442,
								10.706917832883931
							],
							[
								0.023802524423700785,
								11.018681748900804
							],
							[
								0.8995630224740694,
								10.99733938236426
							],
							[
								0.7723356461714843,
								10.470808213742359
							],
							[
								1.0777950374487375,
								10.175606594275024
							],
							[
								1.425060662450136,
								9.825395412633
							],
							[
								1.46304284018467,
								9.334624335157088
							],
							[
								1.664477573258381,
								9.12859039960938
							],
							[
								1.618950636409238,
								6.832038072126238
							],
							[
								1.8652405127123188,
								6.142157701029731
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 6,
					"sovereignt": "Togo",
					"sov_a3": "TGO",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Togo",
					"adm0_a3": "TGO",
					"geou_dif": 0,
					"geounit": "Togo",
					"gu_a3": "TGO",
					"su_dif": 0,
					"subunit": "Togo",
					"su_a3": "TGO",
					"brk_diff": 0,
					"name": "Togo",
					"name_long": "Togo",
					"brk_a3": "TGO",
					"brk_name": "Togo",
					"brk_group": "",
					"abbrev": "Togo",
					"postal": "TG",
					"formal_en": "Togolese Republic",
					"formal_fr": "République Togolaise",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Togo",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 1,
					"mapcolor9": 3,
					"mapcolor13": 5,
					"pop_est": 6019877,
					"gdp_md_est": 5118,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TG",
					"iso_a3": "TGO",
					"iso_n3": "768",
					"un_a3": "768",
					"wb_a2": "TG",
					"wb_a3": "TGO",
					"woe_id": -99,
					"adm0_a3_is": "TGO",
					"adm0_a3_us": "TGO",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Western Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 4,
					"long_len": 4,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								102.5849324890267,
								12.186594956913282
							],
							[
								101.68715783081996,
								12.645740057826572
							],
							[
								100.83180952352487,
								12.627084865769206
							],
							[
								100.9784672383692,
								13.412721665902566
							],
							[
								100.09779747925111,
								13.406856390837433
							],
							[
								100.01873253784456,
								12.307001044153354
							],
							[
								99.47892052612363,
								10.846366685423547
							],
							[
								99.15377241414316,
								9.963061428258555
							],
							[
								99.22239871622676,
								9.239255479362427
							],
							[
								99.87383182169813,
								9.20786204674512
							],
							[
								100.27964684448622,
								8.295152899606052
							],
							[
								100.45927412313276,
								7.429572658717177
							],
							[
								101.01732791545273,
								6.856868597842478
							],
							[
								101.62307905477806,
								6.74062246340192
							],
							[
								102.14118696493638,
								6.221636053894628
							],
							[
								101.81428185425798,
								5.8108084171742425
							],
							[
								101.15421878459387,
								5.691384182147715
							],
							[
								101.07551557821336,
								6.2048670516159214
							],
							[
								100.25959638875696,
								6.6428248152895435
							],
							[
								100.0857568705271,
								6.4644894474502905
							],
							[
								99.69069054565576,
								6.8482127954335965
							],
							[
								99.51964155476963,
								7.34345388430276
							],
							[
								98.9882528015123,
								7.907993068875328
							],
							[
								98.503786248776,
								8.382305202666288
							],
							[
								98.339661899817,
								7.794511623562386
							],
							[
								98.15000939330582,
								8.350007432483878
							],
							[
								98.25915001830626,
								8.973922837759801
							],
							[
								98.55355065307305,
								9.932959906448545
							],
							[
								99.03812055867398,
								10.960545762572437
							],
							[
								99.58728600463972,
								11.892762762901697
							],
							[
								99.19635379435167,
								12.80474843998867
							],
							[
								99.21201175333609,
								13.269293728076464
							],
							[
								99.09775516153876,
								13.827502549693278
							],
							[
								98.43081912637987,
								14.622027696180837
							],
							[
								98.1920740091914,
								15.123702500870351
							],
							[
								98.53737592976572,
								15.308497422746084
							],
							[
								98.90334842325676,
								16.17782420497612
							],
							[
								98.49376102091135,
								16.83783559820793
							],
							[
								97.85912275593486,
								17.567946071843664
							],
							[
								97.37589643757354,
								18.445437730375815
							],
							[
								97.79778283080441,
								18.627080389881755
							],
							[
								98.25372399291561,
								19.708203029860044
							],
							[
								98.95967573445488,
								19.752980658440947
							],
							[
								99.54330936075931,
								20.186597601802063
							],
							[
								100.11598758341785,
								20.417849636308187
							],
							[
								100.54888105672688,
								20.109237982661128
							],
							[
								100.60629357300316,
								19.508344427971224
							],
							[
								101.2820146016517,
								19.462584947176765
							],
							[
								101.03593143107777,
								18.408928330961615
							],
							[
								101.05954756063517,
								17.51249725999449
							],
							[
								102.11359175009248,
								18.109101670804165
							],
							[
								102.41300499879162,
								17.932781683824288
							],
							[
								102.99870568238771,
								17.9616946476916
							],
							[
								103.20019209189374,
								18.309632066312773
							],
							[
								103.9564766784853,
								18.24095408779688
							],
							[
								104.7169470560925,
								17.42885895433008
							],
							[
								104.7793205098688,
								16.44186493577145
							],
							[
								105.58903852745016,
								15.570316066952858
							],
							[
								105.54433841351769,
								14.723933620660418
							],
							[
								105.21877689007889,
								14.273211778210694
							],
							[
								104.28141808473661,
								14.416743068901367
							],
							[
								102.98842207236163,
								14.225721136934467
							],
							[
								102.34809939983302,
								13.394247341358223
							],
							[
								102.5849324890267,
								12.186594956913282
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Thailand",
					"sov_a3": "THA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Thailand",
					"adm0_a3": "THA",
					"geou_dif": 0,
					"geounit": "Thailand",
					"gu_a3": "THA",
					"su_dif": 0,
					"subunit": "Thailand",
					"su_a3": "THA",
					"brk_diff": 0,
					"name": "Thailand",
					"name_long": "Thailand",
					"brk_a3": "THA",
					"brk_name": "Thailand",
					"brk_group": "",
					"abbrev": "Thai.",
					"postal": "TH",
					"formal_en": "Kingdom of Thailand",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Thailand",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 6,
					"mapcolor9": 8,
					"mapcolor13": 1,
					"pop_est": 65905410,
					"gdp_md_est": 547400,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TH",
					"iso_a3": "THA",
					"iso_n3": "764",
					"un_a3": "764",
					"wb_a2": "TH",
					"wb_a3": "THA",
					"woe_id": -99,
					"adm0_a3_is": "THA",
					"adm0_a3_us": "THA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								71.01419803252017,
								40.24436554621823
							],
							[
								70.64801883329997,
								39.93575389257117
							],
							[
								69.55960981636852,
								40.10321137141298
							],
							[
								69.46488691597753,
								39.5266832545487
							],
							[
								70.54916181832562,
								39.6041979029865
							],
							[
								71.784693637992,
								39.27946320246437
							],
							[
								73.6753792662548,
								39.4312368841056
							],
							[
								73.92885216664644,
								38.50581533462274
							],
							[
								74.25751427602273,
								38.60650686294345
							],
							[
								74.86481570831683,
								38.3788463404816
							],
							[
								74.8299857929521,
								37.9900070257014
							],
							[
								74.98000247589542,
								37.419990139305895
							],
							[
								73.9486959166465,
								37.4215662704908
							],
							[
								73.26005577992501,
								37.495256862939
							],
							[
								72.63688968291729,
								37.047558091778356
							],
							[
								72.1930408059624,
								36.948287665345674
							],
							[
								71.8446382994506,
								36.73817129164692
							],
							[
								71.44869347523024,
								37.06564484308052
							],
							[
								71.54191775908478,
								37.905774441065645
							],
							[
								71.23940392444817,
								37.953265082341886
							],
							[
								71.34813113799026,
								38.25890534113216
							],
							[
								70.80682050973289,
								38.486281643216415
							],
							[
								70.3763041523093,
								38.13839590102752
							],
							[
								70.27057417184014,
								37.735164699854025
							],
							[
								70.11657840361033,
								37.58822276463209
							],
							[
								69.51878543485796,
								37.60899669041342
							],
							[
								69.19627282092438,
								37.15114350030743
							],
							[
								68.85944583524594,
								37.344335842430596
							],
							[
								68.13556237170138,
								37.02311513930431
							],
							[
								67.82999962755952,
								37.144994004864685
							],
							[
								68.39203250516596,
								38.15702525486874
							],
							[
								68.17602501818592,
								38.901553453113905
							],
							[
								67.44221967964131,
								39.140143541005486
							],
							[
								67.70142866401736,
								39.58047842056453
							],
							[
								68.53641645698943,
								39.53345286717894
							],
							[
								69.0116329283455,
								40.08615814875667
							],
							[
								69.32949466337283,
								40.72782440852485
							],
							[
								70.66662234892505,
								40.960213324541414
							],
							[
								70.45815962105962,
								40.49649485937029
							],
							[
								70.60140669137269,
								40.21852733007229
							],
							[
								71.01419803252017,
								40.24436554621823
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Tajikistan",
					"sov_a3": "TJK",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Tajikistan",
					"adm0_a3": "TJK",
					"geou_dif": 0,
					"geounit": "Tajikistan",
					"gu_a3": "TJK",
					"su_dif": 0,
					"subunit": "Tajikistan",
					"su_a3": "TJK",
					"brk_diff": 0,
					"name": "Tajikistan",
					"name_long": "Tajikistan",
					"brk_a3": "TJK",
					"brk_name": "Tajikistan",
					"brk_group": "",
					"abbrev": "Tjk.",
					"postal": "TJ",
					"formal_en": "Republic of Tajikistan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Tajikistan",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 6,
					"mapcolor9": 2,
					"mapcolor13": 5,
					"pop_est": 7349145,
					"gdp_md_est": 13160,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TJ",
					"iso_a3": "TJK",
					"iso_n3": "762",
					"un_a3": "762",
					"wb_a2": "TJ",
					"wb_a3": "TJK",
					"woe_id": -99,
					"adm0_a3_is": "TJK",
					"adm0_a3_us": "TJK",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Central Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								61.210817091725744,
								35.650072333309225
							],
							[
								61.123070509694145,
								36.491597194966246
							],
							[
								60.37763797388388,
								36.52738312432837
							],
							[
								59.23476199731681,
								37.41298798273034
							],
							[
								58.436154412678206,
								37.5223094752438
							],
							[
								57.330433790928986,
								38.02922943781094
							],
							[
								56.61936608259282,
								38.121394354803485
							],
							[
								56.18037479027333,
								37.93512665460743
							],
							[
								55.51157840355191,
								37.96411713312317
							],
							[
								54.800303989486565,
								37.392420762678185
							],
							[
								53.92159793479556,
								37.19891836196126
							],
							[
								53.73551110211252,
								37.90613617609169
							],
							[
								53.880928582581845,
								38.95209300389536
							],
							[
								53.1010278664329,
								39.29057363540713
							],
							[
								53.35780805849123,
								39.97528636327445
							],
							[
								52.69397260926982,
								40.03362905533197
							],
							[
								52.915251092343624,
								40.87652334244473
							],
							[
								53.858139275941134,
								40.63103445084218
							],
							[
								54.73684533063215,
								40.95101491959346
							],
							[
								54.008310988181314,
								41.55121084244742
							],
							[
								53.72171349469059,
								42.12319143327003
							],
							[
								52.916749708880076,
								41.86811656347733
							],
							[
								52.81468875510362,
								41.13537059179471
							],
							[
								52.50245975119615,
								41.78331553808637
							],
							[
								52.944293247291654,
								42.11603424739759
							],
							[
								54.07941775901495,
								42.32410940202083
							],
							[
								54.75534549339264,
								42.043971462566574
							],
							[
								55.45525109235377,
								41.25985911718584
							],
							[
								55.96819135928291,
								41.30864166926936
							],
							[
								57.0963912290791,
								41.32231008561057
							],
							[
								56.932215203687804,
								41.826026109375604
							],
							[
								57.78652998233708,
								42.17055288346552
							],
							[
								58.62901085799146,
								42.75155101172305
							],
							[
								59.976422153569786,
								42.22308197689021
							],
							[
								60.083340691981675,
								41.425146185871405
							],
							[
								60.465952996670694,
								41.22032664648255
							],
							[
								61.54717898951356,
								41.266370347654615
							],
							[
								61.88271406438469,
								41.084856879229406
							],
							[
								62.374260288345006,
								40.05388621679039
							],
							[
								63.51801476426103,
								39.36325653742564
							],
							[
								64.17022301621677,
								38.892406724598246
							],
							[
								65.2159989765074,
								38.4026950139843
							],
							[
								66.54615034370022,
								37.97468496352687
							],
							[
								66.51860680528867,
								37.36278432875879
							],
							[
								66.21738488145934,
								37.39379018813392
							],
							[
								65.74563073106683,
								37.66116404881207
							],
							[
								65.58894778835784,
								37.30521678318564
							],
							[
								64.7461051776774,
								37.111817735333304
							],
							[
								64.5464791197339,
								36.31207326918427
							],
							[
								63.98289594915871,
								36.0079574651466
							],
							[
								63.19353844590035,
								35.857165635718914
							],
							[
								62.98466230657661,
								35.40404083916762
							],
							[
								62.230651483005886,
								35.270663967422294
							],
							[
								61.210817091725744,
								35.650072333309225
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Turkmenistan",
					"sov_a3": "TKM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Turkmenistan",
					"adm0_a3": "TKM",
					"geou_dif": 0,
					"geounit": "Turkmenistan",
					"gu_a3": "TKM",
					"su_dif": 0,
					"subunit": "Turkmenistan",
					"su_a3": "TKM",
					"brk_diff": 0,
					"name": "Turkmenistan",
					"name_long": "Turkmenistan",
					"brk_a3": "TKM",
					"brk_name": "Turkmenistan",
					"brk_group": "",
					"abbrev": "Turkm.",
					"postal": "TM",
					"formal_en": "Turkmenistan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Turkmenistan",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 2,
					"mapcolor9": 1,
					"mapcolor13": 9,
					"pop_est": 4884887,
					"gdp_md_est": 29780,
					"pop_year": -99,
					"lastcensus": 1995,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TM",
					"iso_a3": "TKM",
					"iso_n3": "795",
					"un_a3": "795",
					"wb_a2": "TM",
					"wb_a3": "TKM",
					"woe_id": -99,
					"adm0_a3_is": "TKM",
					"adm0_a3_us": "TKM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Central Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 12,
					"long_len": 12,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								124.96868248911623,
								-8.892790215697083
							],
							[
								125.08624637258026,
								-8.65688730228468
							],
							[
								125.94707238169826,
								-8.432094821815035
							],
							[
								126.64470421763855,
								-8.398246758663852
							],
							[
								126.95724328013983,
								-8.273344821814398
							],
							[
								127.33592817597463,
								-8.397316582882603
							],
							[
								126.96799197805655,
								-8.668256117388893
							],
							[
								125.9258850444586,
								-9.106007175333353
							],
							[
								125.08852013560109,
								-9.393173109579294
							],
							[
								125.07001997284061,
								-9.089987481322872
							],
							[
								124.96868248911623,
								-8.892790215697083
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "East Timor",
					"sov_a3": "TLS",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "East Timor",
					"adm0_a3": "TLS",
					"geou_dif": 0,
					"geounit": "East Timor",
					"gu_a3": "TLS",
					"su_dif": 0,
					"subunit": "East Timor",
					"su_a3": "TLS",
					"brk_diff": 0,
					"name": "Timor-Leste",
					"name_long": "Timor-Leste",
					"brk_a3": "TLS",
					"brk_name": "Timor-Leste",
					"brk_group": "",
					"abbrev": "T.L.",
					"postal": "TL",
					"formal_en": "Democratic Republic of Timor-Leste",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Timor-Leste",
					"name_alt": "East Timor",
					"mapcolor7": 2,
					"mapcolor8": 2,
					"mapcolor9": 4,
					"mapcolor13": 3,
					"pop_est": 1131612,
					"gdp_md_est": 2520,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TL",
					"iso_a3": "TLS",
					"iso_n3": "626",
					"un_a3": "626",
					"wb_a2": "TP",
					"wb_a3": "TMP",
					"woe_id": -99,
					"adm0_a3_is": "TLS",
					"adm0_a3_us": "TLS",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 11,
					"long_len": 11,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-61.68000000000001,
								10.760000000000002
							],
							[
								-61.105000000000004,
								10.89
							],
							[
								-60.895,
								10.855
							],
							[
								-60.935,
								10.11
							],
							[
								-61.77000000000001,
								10
							],
							[
								-61.95,
								10.09
							],
							[
								-61.660000000000004,
								10.365000000000002
							],
							[
								-61.68000000000001,
								10.760000000000002
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 5,
					"sovereignt": "Trinidad and Tobago",
					"sov_a3": "TTO",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Trinidad and Tobago",
					"adm0_a3": "TTO",
					"geou_dif": 0,
					"geounit": "Trinidad and Tobago",
					"gu_a3": "TTO",
					"su_dif": 0,
					"subunit": "Trinidad and Tobago",
					"su_a3": "TTO",
					"brk_diff": 0,
					"name": "Trinidad and Tobago",
					"name_long": "Trinidad and Tobago",
					"brk_a3": "TTO",
					"brk_name": "Trinidad and Tobago",
					"brk_group": "",
					"abbrev": "Tr.T.",
					"postal": "TT",
					"formal_en": "Republic of Trinidad and Tobago",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Trinidad and Tobago",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 6,
					"mapcolor9": 2,
					"mapcolor13": 5,
					"pop_est": 1310000,
					"gdp_md_est": 29010,
					"pop_year": -99,
					"lastcensus": 2011,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TT",
					"iso_a3": "TTO",
					"iso_n3": "780",
					"un_a3": "780",
					"wb_a2": "TT",
					"wb_a3": "TTO",
					"woe_id": -99,
					"adm0_a3_is": "TTO",
					"adm0_a3_us": "TTO",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Caribbean",
					"region_wb": "Latin America & Caribbean",
					"name_len": 19,
					"long_len": 19,
					"abbrev_len": 5,
					"tiny": 2,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								9.482139926805274,
								30.307556057246188
							],
							[
								9.05560265466815,
								32.10269196220129
							],
							[
								8.439102817426118,
								32.50628489840082
							],
							[
								8.430472853233368,
								32.74833730725595
							],
							[
								7.6126416357821824,
								33.34411489514896
							],
							[
								7.524481642292244,
								34.09737641045146
							],
							[
								8.140981479534304,
								34.65514598239379
							],
							[
								8.376367628623768,
								35.479876003555944
							],
							[
								8.217824334352315,
								36.433176988260286
							],
							[
								8.420964389691676,
								36.94642731378316
							],
							[
								9.509993523810607,
								37.349994411766545
							],
							[
								10.210002475636317,
								37.230001735984814
							],
							[
								10.180650262094531,
								36.724037787415085
							],
							[
								11.02886722173335,
								37.09210317641396
							],
							[
								11.100025668999251,
								36.899996039368915
							],
							[
								10.600004510143094,
								36.410000108377375
							],
							[
								10.593286573945138,
								35.94744436293281
							],
							[
								10.939518670300687,
								35.698984076473494
							],
							[
								10.807847120821009,
								34.83350718844919
							],
							[
								10.149592726287125,
								34.33077301689771
							],
							[
								10.339658644256616,
								33.78574168551532
							],
							[
								10.856836378633687,
								33.76874013929128
							],
							[
								11.108500603895122,
								33.293342800422195
							],
							[
								11.488787469131012,
								33.13699575452314
							],
							[
								11.432253452203696,
								32.368903103152874
							],
							[
								10.944789666394456,
								32.081814683555365
							],
							[
								10.636901482799487,
								31.761420803345757
							],
							[
								9.950225050505082,
								31.376069647745258
							],
							[
								10.056575148161755,
								30.9618313664936
							],
							[
								9.970017124072854,
								30.53932485607524
							],
							[
								9.482139926805274,
								30.307556057246188
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Tunisia",
					"sov_a3": "TUN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Tunisia",
					"adm0_a3": "TUN",
					"geou_dif": 0,
					"geounit": "Tunisia",
					"gu_a3": "TUN",
					"su_dif": 0,
					"subunit": "Tunisia",
					"su_a3": "TUN",
					"brk_diff": 0,
					"name": "Tunisia",
					"name_long": "Tunisia",
					"brk_a3": "TUN",
					"brk_name": "Tunisia",
					"brk_group": "",
					"abbrev": "Tun.",
					"postal": "TN",
					"formal_en": "Republic of Tunisia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Tunisia",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 3,
					"mapcolor9": 3,
					"mapcolor13": 2,
					"pop_est": 10486339,
					"gdp_md_est": 81710,
					"pop_year": -99,
					"lastcensus": 2004,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TN",
					"iso_a3": "TUN",
					"iso_n3": "788",
					"un_a3": "788",
					"wb_a2": "TN",
					"wb_a3": "TUN",
					"woe_id": -99,
					"adm0_a3_is": "TUN",
					"adm0_a3_us": "TUN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Northern Africa",
					"region_wb": "Middle East & North Africa",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									44.793989699082005,
									39.713002631177034
								],
								[
									44.10922529478236,
									39.428136298168056
								],
								[
									44.4214026222576,
									38.28128123631453
								],
								[
									44.22575564960053,
									37.97158437758935
								],
								[
									44.77269900897775,
									37.17044464776845
								],
								[
									44.29345177590287,
									37.00151439060636
								],
								[
									43.94225874204736,
									37.256227525372935
								],
								[
									42.77912560402186,
									37.38526357680581
								],
								[
									42.34959109881177,
									37.22987254490411
								],
								[
									41.21208947120303,
									37.07435232192174
								],
								[
									40.673259311695716,
									37.09127635349736
								],
								[
									39.52258019385252,
									36.71605377862602
								],
								[
									38.69989139176593,
									36.71292735447233
								],
								[
									38.16772749202417,
									36.90121043552779
								],
								[
									37.06676110204583,
									36.62303620050062
								],
								[
									36.739494256341374,
									36.817520453431115
								],
								[
									36.68538903173183,
									36.259699205056506
								],
								[
									36.41755008316309,
									36.0406169703551
								],
								[
									36.14976281102659,
									35.82153473565367
								],
								[
									35.782084995269855,
									36.27499542901492
								],
								[
									36.160821567537056,
									36.650605577128374
								],
								[
									35.55093631362834,
									36.56544281671134
								],
								[
									34.714553256984374,
									36.795532131490916
								],
								[
									34.02689497247647,
									36.21996002862397
								],
								[
									32.5091581560641,
									36.1075637883892
								],
								[
									31.699595167779563,
									36.64427521417261
								],
								[
									30.62162479017107,
									36.677864895162315
								],
								[
									30.39109622571712,
									36.26298065850699
								],
								[
									29.699975620245567,
									36.14435740818101
								],
								[
									28.732902866335394,
									36.67683136651644
								],
								[
									27.64118655773737,
									36.658822129862756
								],
								[
									27.048767937943296,
									37.65336090753601
								],
								[
									26.31821821463305,
									38.208133246405396
								],
								[
									26.804700148228733,
									38.98576019953356
								],
								[
									26.17078535330438,
									39.463612168936464
								],
								[
									27.280019972449395,
									40.42001373957831
								],
								[
									28.81997765474722,
									40.46001129817222
								],
								[
									29.240003696415584,
									41.21999074967269
								],
								[
									31.145933872204438,
									41.087621568357065
								],
								[
									32.34797936374579,
									41.73626414648464
								],
								[
									33.51328291192752,
									42.01896006933731
								],
								[
									35.16770389175187,
									42.040224921225445
								],
								[
									36.91312706884216,
									41.335358384764305
								],
								[
									38.34766482926452,
									40.94858612727572
								],
								[
									39.51260664242025,
									41.102762763018575
								],
								[
									40.37343265153825,
									41.013672593747344
								],
								[
									41.554084100110714,
									41.53565623632761
								],
								[
									42.619548781104555,
									41.58317271581993
								],
								[
									43.58274580259271,
									41.09214325618257
								],
								[
									43.7526579119685,
									40.74020091405882
								],
								[
									43.65643639504097,
									40.25356395116617
								],
								[
									44.400008579288766,
									40.00500031184231
								],
								[
									44.793989699082005,
									39.713002631177034
								]
							]
						],
						[
							[
								[
									27.19237674328241,
									40.690565700842455
								],
								[
									26.35800906749779,
									40.15199392349649
								],
								[
									26.04335127127254,
									40.61775360774317
								],
								[
									26.056942172965336,
									40.82412344010075
								],
								[
									26.294602085075695,
									40.93626129817417
								],
								[
									26.604195590936285,
									41.56211456966102
								],
								[
									26.11704186372083,
									41.82690460872456
								],
								[
									27.13573937349051,
									42.141484890301314
								],
								[
									27.996720411905414,
									42.007358710287775
								],
								[
									28.115524529744448,
									41.622886054036286
								],
								[
									28.98844282401879,
									41.29993419042819
								],
								[
									28.806438429486747,
									41.05496206314854
								],
								[
									27.61901736828412,
									40.99982330989312
								],
								[
									27.19237674328241,
									40.690565700842455
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Turkey",
					"sov_a3": "TUR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Turkey",
					"adm0_a3": "TUR",
					"geou_dif": 0,
					"geounit": "Turkey",
					"gu_a3": "TUR",
					"su_dif": 0,
					"subunit": "Turkey",
					"su_a3": "TUR",
					"brk_diff": 0,
					"name": "Turkey",
					"name_long": "Turkey",
					"brk_a3": "TUR",
					"brk_name": "Turkey",
					"brk_group": "",
					"abbrev": "Tur.",
					"postal": "TR",
					"formal_en": "Republic of Turkey",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Turkey",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 3,
					"mapcolor9": 8,
					"mapcolor13": 4,
					"pop_est": 76805524,
					"gdp_md_est": 902700,
					"pop_year": -99,
					"lastcensus": 2000,
					"gdp_year": -99,
					"economy": "4. Emerging region: MIKT",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TR",
					"iso_a3": "TUR",
					"iso_n3": "792",
					"un_a3": "792",
					"wb_a2": "TR",
					"wb_a3": "TUR",
					"woe_id": -99,
					"adm0_a3_is": "TUR",
					"adm0_a3_us": "TUR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								121.77781782438993,
								24.3942735865194
							],
							[
								121.17563235889274,
								22.790857245367167
							],
							[
								120.74707970589623,
								21.970571397382113
							],
							[
								120.22008344938368,
								22.81486094816674
							],
							[
								120.1061885926124,
								23.556262722258236
							],
							[
								120.69467980355225,
								24.538450832613737
							],
							[
								121.49504438688878,
								25.295458889257386
							],
							[
								121.95124393116146,
								24.997595933527037
							],
							[
								121.77781782438993,
								24.3942735865194
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Taiwan",
					"sov_a3": "TWN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Taiwan",
					"adm0_a3": "TWN",
					"geou_dif": 0,
					"geounit": "Taiwan",
					"gu_a3": "TWN",
					"su_dif": 0,
					"subunit": "Taiwan",
					"su_a3": "TWN",
					"brk_diff": 1,
					"name": "Taiwan",
					"name_long": "Taiwan",
					"brk_a3": "B77",
					"brk_name": "Taiwan",
					"brk_group": "",
					"abbrev": "Taiwan",
					"postal": "TW",
					"formal_en": "",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "Self admin.; Claimed by China",
					"name_sort": "Taiwan",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 5,
					"mapcolor9": 7,
					"mapcolor13": 2,
					"pop_est": 22974347,
					"gdp_md_est": 712000,
					"pop_year": -99,
					"lastcensus": -99,
					"gdp_year": -99,
					"economy": "2. Developed region: nonG7",
					"income_grp": "2. High income: nonOECD",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TW",
					"iso_a3": "TWN",
					"iso_n3": "158",
					"un_a3": "-099",
					"wb_a2": "-99",
					"wb_a3": "-99",
					"woe_id": -99,
					"adm0_a3_is": "TWN",
					"adm0_a3_us": "TWN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								33.9037111971046,
								-0.9499999999999886
							],
							[
								34.07261999999997,
								-1.0598199999999451
							],
							[
								37.69868999999994,
								-3.0969899999999484
							],
							[
								37.76690000000002,
								-3.6771199999999453
							],
							[
								39.20222000000007,
								-4.6767699999999195
							],
							[
								38.74053999999995,
								-5.9089499999999475
							],
							[
								38.79977000000008,
								-6.475660000000005
							],
							[
								39.44,
								-6.839999999999861
							],
							[
								39.47000000000014,
								-7.099999999999966
							],
							[
								39.19468999999998,
								-7.703899999999976
							],
							[
								39.25203000000005,
								-8.00780999999995
							],
							[
								39.18652000000009,
								-8.48550999999992
							],
							[
								39.53574000000009,
								-9.112369999999885
							],
							[
								39.94960000000003,
								-10.098400000000026
							],
							[
								40.31659000000002,
								-10.317099999999868
							],
							[
								39.52099999999996,
								-10.89688000000001
							],
							[
								38.42755659358778,
								-11.285202325081627
							],
							[
								37.827639999999974,
								-11.26878999999991
							],
							[
								37.471289999999954,
								-11.568759999999997
							],
							[
								36.77515099462289,
								-11.594537448780784
							],
							[
								36.514081658684404,
								-11.720938002166747
							],
							[
								35.31239790216915,
								-11.439146416879169
							],
							[
								34.559989047999466,
								-11.520020033415847
							],
							[
								34.27999999999997,
								-10.160000000000025
							],
							[
								33.940837724096525,
								-9.693673841980285
							],
							[
								33.73972000000009,
								-9.417149999999992
							],
							[
								32.75937544122138,
								-9.230599053589003
							],
							[
								32.19186486179194,
								-8.930358981973257
							],
							[
								31.55634809746664,
								-8.762048841998649
							],
							[
								31.15775133695007,
								-8.594578747317314
							],
							[
								30.740000000000066,
								-8.339999999999918
							],
							[
								30.200000000000045,
								-7.079999999999984
							],
							[
								29.620000000000005,
								-6.519999999999982
							],
							[
								29.41999271008831,
								-5.939998874539299
							],
							[
								29.51998660657307,
								-5.419978936386258
							],
							[
								29.339997592900374,
								-4.499983412294114
							],
							[
								29.753512404099865,
								-4.452389418153302
							],
							[
								30.11632000000003,
								-4.090120000000013
							],
							[
								30.505539999999996,
								-3.5685799999999404
							],
							[
								30.752240000000086,
								-3.3593099999999936
							],
							[
								30.743010000000027,
								-3.034309999999948
							],
							[
								30.527660000000026,
								-2.807619999999986
							],
							[
								30.469670000000008,
								-2.4138299999999617
							],
							[
								30.75830895358314,
								-2.287250257988376
							],
							[
								30.81613488131785,
								-1.6989140763453747
							],
							[
								30.419104852019302,
								-1.1346591121504161
							],
							[
								30.769860000000108,
								-1.0145499999999856
							],
							[
								31.866170000000068,
								-1.0273599999999306
							],
							[
								33.9037111971046,
								-0.9499999999999886
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "United Republic of Tanzania",
					"sov_a3": "TZA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "United Republic of Tanzania",
					"adm0_a3": "TZA",
					"geou_dif": 0,
					"geounit": "Tanzania",
					"gu_a3": "TZA",
					"su_dif": 0,
					"subunit": "Tanzania",
					"su_a3": "TZA",
					"brk_diff": 0,
					"name": "Tanzania",
					"name_long": "Tanzania",
					"brk_a3": "TZA",
					"brk_name": "Tanzania",
					"brk_group": "",
					"abbrev": "Tanz.",
					"postal": "TZ",
					"formal_en": "United Republic of Tanzania",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Tanzania",
					"name_alt": "",
					"mapcolor7": 3,
					"mapcolor8": 6,
					"mapcolor9": 2,
					"mapcolor13": 2,
					"pop_est": 41048532,
					"gdp_md_est": 54250,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "TZ",
					"iso_a3": "TZA",
					"iso_n3": "834",
					"un_a3": "834",
					"wb_a2": "TZ",
					"wb_a3": "TZA",
					"woe_id": -99,
					"adm0_a3_is": "TZA",
					"adm0_a3_us": "TZA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								30.419104852019302,
								-1.1346591121504161
							],
							[
								29.821518588996128,
								-1.4433224422297712
							],
							[
								29.579466180141026,
								-1.3413131648856051
							],
							[
								29.58783776217217,
								-0.587405694179381
							],
							[
								29.819500000000062,
								-0.20529999999990878
							],
							[
								29.875778842902434,
								0.5973798689763612
							],
							[
								30.08615359876279,
								1.0623127303064166
							],
							[
								30.46850752129029,
								1.5838054467797065
							],
							[
								30.85267011894814,
								1.849396470543752
							],
							[
								31.17414920423596,
								2.2044652368213065
							],
							[
								30.77332000000007,
								2.339890000000139
							],
							[
								30.83385000000004,
								3.5091699999999832
							],
							[
								31.24556000000007,
								3.7819000000000074
							],
							[
								31.881449999999973,
								3.558269999999993
							],
							[
								32.686420000000055,
								3.7923200000000747
							],
							[
								33.3900000000001,
								3.7899999999999636
							],
							[
								34.00500000000005,
								4.249884947362148
							],
							[
								34.47913,
								3.5556000000000836
							],
							[
								34.59607,
								3.0537400000001185
							],
							[
								35.03599000000003,
								1.9058399999999551
							],
							[
								34.6721,
								1.176939999999945
							],
							[
								34.18000000000001,
								0.5149999999999864
							],
							[
								33.893568969667,
								0.10981353786183945
							],
							[
								33.9037111971046,
								-0.9499999999999886
							],
							[
								31.866170000000068,
								-1.0273599999999306
							],
							[
								30.769860000000108,
								-1.0145499999999856
							],
							[
								30.419104852019302,
								-1.1346591121504161
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Uganda",
					"sov_a3": "UGA",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Uganda",
					"adm0_a3": "UGA",
					"geou_dif": 0,
					"geounit": "Uganda",
					"gu_a3": "UGA",
					"su_dif": 0,
					"subunit": "Uganda",
					"su_a3": "UGA",
					"brk_diff": 0,
					"name": "Uganda",
					"name_long": "Uganda",
					"brk_a3": "UGA",
					"brk_name": "Uganda",
					"brk_group": "",
					"abbrev": "Uga.",
					"postal": "UG",
					"formal_en": "Republic of Uganda",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Uganda",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 3,
					"mapcolor9": 6,
					"mapcolor13": 4,
					"pop_est": 32369558,
					"gdp_md_est": 39380,
					"pop_year": -99,
					"lastcensus": 2002,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "UG",
					"iso_a3": "UGA",
					"iso_n3": "800",
					"un_a3": "800",
					"wb_a2": "UG",
					"wb_a3": "UGA",
					"woe_id": -99,
					"adm0_a3_is": "UGA",
					"adm0_a3_us": "UGA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								31.785998162571587,
								52.101677964885454
							],
							[
								32.15941206231267,
								52.06126699483322
							],
							[
								32.41205813978763,
								52.28869497334975
							],
							[
								32.71576053236697,
								52.23846548116205
							],
							[
								33.75269982273571,
								52.335074571331695
							],
							[
								34.39173058445701,
								51.76888174092579
							],
							[
								34.14197838719039,
								51.56641347920623
							],
							[
								34.22481570815427,
								51.25599315042896
							],
							[
								35.02218305841788,
								51.20757233337146
							],
							[
								35.37792361831512,
								50.77395539001035
							],
							[
								35.35611616388795,
								50.57719737405906
							],
							[
								36.62616784032534,
								50.225590928745135
							],
							[
								37.39345950699507,
								50.38395335550359
							],
							[
								38.010631137856905,
								49.91566152607463
							],
							[
								38.59498823421342,
								49.92646190042363
							],
							[
								40.06905846533911,
								49.6010554062817
							],
							[
								40.08078901546935,
								49.307429917999286
							],
							[
								39.67466393408753,
								48.78381846780188
							],
							[
								39.89563235856758,
								48.23240509703143
							],
							[
								39.738277622238826,
								47.89893707945199
							],
							[
								38.7705847511412,
								47.825608222029814
							],
							[
								38.25511233902975,
								47.546400458356814
							],
							[
								38.22353803889942,
								47.102189846375886
							],
							[
								37.42513715998999,
								47.022220567404204
							],
							[
								36.75985477066439,
								46.698700263040934
							],
							[
								35.82368452326483,
								46.64596446388707
							],
							[
								34.96234174982388,
								46.27319651954964
							],
							[
								35.020787794745985,
								45.65121898048466
							],
							[
								35.51000857925317,
								45.40999339454619
							],
							[
								36.52999799983016,
								45.46998973243706
							],
							[
								36.33471276219916,
								45.113215643893966
							],
							[
								35.23999922052812,
								44.939996242851606
							],
							[
								33.882511020652885,
								44.36147858334407
							],
							[
								33.326420932760044,
								44.56487702084489
							],
							[
								33.54692426934946,
								45.03477081967489
							],
							[
								32.4541744321055,
								45.32746613217608
							],
							[
								32.630804477679135,
								45.51918569597891
							],
							[
								33.58816206231839,
								45.85156850848024
							],
							[
								33.29856733575471,
								46.080598456397844
							],
							[
								31.74414025241518,
								46.333347886737386
							],
							[
								31.675307244602408,
								46.70624502215554
							],
							[
								30.7487488136091,
								46.583100084004
							],
							[
								30.377608676888883,
								46.03241018328567
							],
							[
								29.603289015427436,
								45.293308010431126
							],
							[
								29.149724969201653,
								45.464925442072456
							],
							[
								28.67977949393938,
								45.304030870131704
							],
							[
								28.233553501099042,
								45.488283189468376
							],
							[
								28.485269402792767,
								45.5969070501459
							],
							[
								28.65998742037158,
								45.93998688413164
							],
							[
								28.933717482221624,
								46.2588304713725
							],
							[
								28.862972446414062,
								46.43788930926383
							],
							[
								29.07210696789929,
								46.517677720722496
							],
							[
								29.170653924279886,
								46.3792623968287
							],
							[
								29.759971958136394,
								46.34998769793536
							],
							[
								30.024658644335375,
								46.42393667254504
							],
							[
								29.838210076626297,
								46.52532583270169
							],
							[
								29.908851759569302,
								46.67436066343146
							],
							[
								29.559674106573112,
								46.928582872091326
							],
							[
								29.415135125452736,
								47.34664520933258
							],
							[
								29.05086795422733,
								47.5102269557525
							],
							[
								29.12269819511303,
								47.849095160506465
							],
							[
								28.670891147585166,
								48.1181485052341
							],
							[
								28.259546746541844,
								48.15556224221342
							],
							[
								27.522537469195157,
								48.467119452501116
							],
							[
								26.857823520624805,
								48.368210761094495
							],
							[
								26.619336785597795,
								48.22072622333347
							],
							[
								26.19745039236693,
								48.22088125263035
							],
							[
								25.9459411964024,
								47.987148749374214
							],
							[
								25.20774336111299,
								47.89105642352747
							],
							[
								24.866317172960578,
								47.737525743188314
							],
							[
								24.40205610525038,
								47.98187775328043
							],
							[
								23.76095828623741,
								47.985598456405455
							],
							[
								23.142236362406805,
								48.09634105080695
							],
							[
								22.710531447040495,
								47.88219391538941
							],
							[
								22.640819939878753,
								48.15023956968736
							],
							[
								22.085608351334855,
								48.42226430927179
							],
							[
								22.28084191253356,
								48.82539215758067
							],
							[
								22.558137648211755,
								49.085738023467144
							],
							[
								22.776418898212626,
								49.02739533140962
							],
							[
								22.518450148211603,
								49.47677358661974
							],
							[
								23.426508416444392,
								50.308505764357456
							],
							[
								23.922757195743262,
								50.42488108987875
							],
							[
								24.029985792748903,
								50.70540660257518
							],
							[
								23.527070753684374,
								51.57845408793024
							],
							[
								24.00507775238421,
								51.61744395609446
							],
							[
								24.553106316839518,
								51.888461005249184
							],
							[
								25.32778771332701,
								51.91065603291855
							],
							[
								26.337958611768556,
								51.83228872334793
							],
							[
								27.454066196408434,
								51.59230337178447
							],
							[
								28.24161502453657,
								51.57222707783907
							],
							[
								28.61761274589225,
								51.42771393493484
							],
							[
								28.992835320763533,
								51.602044379271476
							],
							[
								29.254938185347925,
								51.368234361366895
							],
							[
								30.157363722460897,
								51.41613841410147
							],
							[
								30.555117221811457,
								51.31950348571566
							],
							[
								30.619454380014844,
								51.822806098022376
							],
							[
								30.927549269338982,
								52.04235342061439
							],
							[
								31.785998162571587,
								52.101677964885454
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Ukraine",
					"sov_a3": "UKR",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Ukraine",
					"adm0_a3": "UKR",
					"geou_dif": 0,
					"geounit": "Ukraine",
					"gu_a3": "UKR",
					"su_dif": 0,
					"subunit": "Ukraine",
					"su_a3": "UKR",
					"brk_diff": 0,
					"name": "Ukraine",
					"name_long": "Ukraine",
					"brk_a3": "UKR",
					"brk_name": "Ukraine",
					"brk_group": "",
					"abbrev": "Ukr.",
					"postal": "UA",
					"formal_en": "Ukraine",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Ukraine",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 1,
					"mapcolor9": 6,
					"mapcolor13": 3,
					"pop_est": 45700395,
					"gdp_md_est": 339800,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "UA",
					"iso_a3": "UKR",
					"iso_n3": "804",
					"un_a3": "804",
					"wb_a2": "UA",
					"wb_a3": "UKR",
					"woe_id": -99,
					"adm0_a3_is": "UKR",
					"adm0_a3_us": "UKR",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Europe",
					"region_un": "Europe",
					"subregion": "Eastern Europe",
					"region_wb": "Europe & Central Asia",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-57.62513342958296,
								-30.21629485445426
							],
							[
								-56.976025763564735,
								-30.109686374636127
							],
							[
								-55.97324459494094,
								-30.883075860316303
							],
							[
								-55.601510179249345,
								-30.853878676071393
							],
							[
								-54.57245154480512,
								-31.494511407193748
							],
							[
								-53.78795162618219,
								-32.047242526987624
							],
							[
								-53.209588995971544,
								-32.727666110974724
							],
							[
								-53.6505439927181,
								-33.20200408298183
							],
							[
								-53.373661668498244,
								-33.768377780900764
							],
							[
								-53.806425950726535,
								-34.39681487400223
							],
							[
								-54.93586605489773,
								-34.952646579733624
							],
							[
								-55.67408972840329,
								-34.75265878676407
							],
							[
								-56.21529700379607,
								-34.85983570733742
							],
							[
								-57.1396850246331,
								-34.430456231424245
							],
							[
								-57.81786068381551,
								-34.4625472958775
							],
							[
								-58.42707414410439,
								-33.909454441057576
							],
							[
								-58.349611172098875,
								-33.26318897881541
							],
							[
								-58.13264767112145,
								-33.040566908502015
							],
							[
								-58.14244035504076,
								-32.044503676076154
							],
							[
								-57.87493730328188,
								-31.016556084926208
							],
							[
								-57.62513342958296,
								-30.21629485445426
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Uruguay",
					"sov_a3": "URY",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Uruguay",
					"adm0_a3": "URY",
					"geou_dif": 0,
					"geounit": "Uruguay",
					"gu_a3": "URY",
					"su_dif": 0,
					"subunit": "Uruguay",
					"su_a3": "URY",
					"brk_diff": 0,
					"name": "Uruguay",
					"name_long": "Uruguay",
					"brk_a3": "URY",
					"brk_name": "Uruguay",
					"brk_group": "",
					"abbrev": "Ury.",
					"postal": "UY",
					"formal_en": "Oriental Republic of Uruguay",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Uruguay",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 2,
					"mapcolor9": 2,
					"mapcolor13": 10,
					"pop_est": 3494382,
					"gdp_md_est": 43160,
					"pop_year": -99,
					"lastcensus": 2004,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "UY",
					"iso_a3": "URY",
					"iso_n3": "858",
					"un_a3": "858",
					"wb_a2": "UY",
					"wb_a3": "URY",
					"woe_id": -99,
					"adm0_a3_is": "URY",
					"adm0_a3_us": "URY",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									-155.54211000000004,
									19.08348000000001
								],
								[
									-155.68816999999999,
									18.91619000000003
								],
								[
									-155.93664999999993,
									19.059390000000064
								],
								[
									-155.90805999999998,
									19.338880000000017
								],
								[
									-156.07347000000004,
									19.702939999999984
								],
								[
									-156.02368,
									19.814220000000034
								],
								[
									-155.85008,
									19.97729000000001
								],
								[
									-155.91907000000003,
									20.173950000000048
								],
								[
									-155.86108000000002,
									20.267210000000006
								],
								[
									-155.78504999999998,
									20.248700000000042
								],
								[
									-155.40213999999997,
									20.07975000000002
								],
								[
									-155.22451999999998,
									19.993019999999973
								],
								[
									-155.06225999999998,
									19.85910000000004
								],
								[
									-154.80741,
									19.508710000000036
								],
								[
									-154.83146999999997,
									19.453280000000007
								],
								[
									-155.22216999999995,
									19.239720000000034
								],
								[
									-155.54211000000004,
									19.08348000000001
								]
							]
						],
						[
							[
								[
									-156.07926,
									20.643969999999968
								],
								[
									-156.41445000000004,
									20.57241000000002
								],
								[
									-156.58673,
									20.783000000000044
								],
								[
									-156.70166999999998,
									20.864300000000043
								],
								[
									-156.71054999999996,
									20.92676000000006
								],
								[
									-156.61257999999998,
									21.012490000000042
								],
								[
									-156.25711000000004,
									20.91745000000006
								],
								[
									-155.99566000000004,
									20.764039999999994
								],
								[
									-156.07926,
									20.643969999999968
								]
							]
						],
						[
							[
								[
									-156.75824,
									21.176840000000055
								],
								[
									-156.78932999999995,
									21.068730000000016
								],
								[
									-157.32521000000003,
									21.097769999999997
								],
								[
									-157.25027000000003,
									21.219580000000008
								],
								[
									-156.75824,
									21.176840000000055
								]
							]
						],
						[
							[
								[
									-157.65283000000005,
									21.32217
								],
								[
									-157.70702999999997,
									21.264419999999973
								],
								[
									-157.77859999999998,
									21.277289999999994
								],
								[
									-158.12667000000005,
									21.31243999999998
								],
								[
									-158.25380000000004,
									21.53919000000002
								],
								[
									-158.29265,
									21.57911999999999
								],
								[
									-158.02519999999998,
									21.71696
								],
								[
									-157.94160999999997,
									21.652719999999988
								],
								[
									-157.65283000000005,
									21.32217
								]
							]
						],
						[
							[
								[
									-159.34511999999995,
									21.982000000000028
								],
								[
									-159.46372000000002,
									21.882990000000035
								],
								[
									-159.80050999999997,
									22.065330000000046
								],
								[
									-159.74877000000004,
									22.138200000000012
								],
								[
									-159.5962,
									22.23617999999999
								],
								[
									-159.36569,
									22.214940000000013
								],
								[
									-159.34511999999995,
									21.982000000000028
								]
							]
						],
						[
							[
								[
									-93.63086999999996,
									48.609260000000006
								],
								[
									-92.60999999999999,
									48.44999999999996
								],
								[
									-91.63999999999993,
									48.139999999999986
								],
								[
									-90.82999999999987,
									48.27000000000004
								],
								[
									-89.6,
									48.010000000000105
								],
								[
									-89.27291744663668,
									48.01980825458284
								],
								[
									-88.37811418328653,
									48.30291758889382
								],
								[
									-87.43979262330024,
									47.94000000000008
								],
								[
									-86.46199083122815,
									47.553338019392044
								],
								[
									-85.65236324740323,
									47.22021881773051
								],
								[
									-84.87607988151487,
									46.90008331968238
								],
								[
									-84.77923824739983,
									46.63710195574913
								],
								[
									-84.54374874544567,
									46.53868419044923
								],
								[
									-84.60490000000007,
									46.439599999999984
								],
								[
									-84.33669999999998,
									46.40877000000012
								],
								[
									-84.1421195136733,
									46.51222585711574
								],
								[
									-84.09185126416148,
									46.27541860613826
								],
								[
									-83.89076534700567,
									46.116926988299156
								],
								[
									-83.6161309475905,
									46.116926988299156
								],
								[
									-83.46955074739463,
									45.99468638771259
								],
								[
									-83.59285071484308,
									45.81689362241255
								],
								[
									-82.55092464875818,
									45.34751658790546
								],
								[
									-82.33776312543108,
									44.44000000000008
								],
								[
									-82.13764238150398,
									43.57108755144
								],
								[
									-82.42999999999992,
									42.9800000000001
								],
								[
									-82.89999999999989,
									42.43000000000015
								],
								[
									-83.11999999999989,
									42.08000000000007
								],
								[
									-83.14199968131257,
									41.975681057293
								],
								[
									-83.02981014680694,
									41.83279572200601
								],
								[
									-82.69008928092018,
									41.675105088867326
								],
								[
									-82.43927771679162,
									41.675105088867326
								],
								[
									-81.27774654816707,
									42.20902598730686
								],
								[
									-80.24744767934786,
									42.36619985612268
								],
								[
									-78.9393621487437,
									42.86361135514812
								],
								[
									-78.91999999999993,
									42.964999999999975
								],
								[
									-79.00999999999988,
									43.26999999999995
								],
								[
									-79.17167355011188,
									43.46633942318431
								],
								[
									-78.72027991404238,
									43.62508942318496
								],
								[
									-77.73788509795762,
									43.62905558936339
								],
								[
									-76.82003414580558,
									43.628784288093755
								],
								[
									-76.49999999999997,
									44.018458893758606
								],
								[
									-76.37499999999991,
									44.09631000000002
								],
								[
									-75.31820999999991,
									44.816450000000174
								],
								[
									-74.86699999999996,
									45.000480000000124
								],
								[
									-73.3478299999999,
									45.0073800000001
								],
								[
									-71.50505999999987,
									45.0082000000001
								],
								[
									-71.40499999999994,
									45.25500000000014
								],
								[
									-71.08482000000001,
									45.30524000000017
								],
								[
									-70.6599999999998,
									45.46000000000001
								],
								[
									-70.30499999999992,
									45.91500000000002
								],
								[
									-69.99996999999993,
									46.69306999999998
								],
								[
									-69.23721599999996,
									47.44778100000008
								],
								[
									-68.905,
									47.18500000000009
								],
								[
									-68.23443999999998,
									47.35486
								],
								[
									-67.79045999999997,
									47.06636000000009
								],
								[
									-67.79133999999996,
									45.70281000000014
								],
								[
									-67.13740999999996,
									45.13752999999997
								],
								[
									-66.96466000000001,
									44.80970000000016
								],
								[
									-68.03251999999995,
									44.325200000000024
								],
								[
									-69.05999999999989,
									43.980000000000075
								],
								[
									-70.11616999999993,
									43.684050000000155
								],
								[
									-70.645475633411,
									43.09023834896405
								],
								[
									-70.81488999999993,
									42.86529999999996
								],
								[
									-70.82499999999996,
									42.33500000000001
								],
								[
									-70.49499999999992,
									41.80500000000001
								],
								[
									-70.08000000000001,
									41.78000000000006
								],
								[
									-70.18500000000003,
									42.145000000000095
								],
								[
									-69.88496999999992,
									41.92283000000012
								],
								[
									-69.96502999999993,
									41.63717000000017
								],
								[
									-70.63999999999996,
									41.47500000000005
								],
								[
									-71.12039000000001,
									41.49445000000017
								],
								[
									-71.85999999999984,
									41.32000000000008
								],
								[
									-72.29499999999999,
									41.27000000000001
								],
								[
									-72.87643,
									41.22065000000009
								],
								[
									-73.70999999999998,
									40.93110235165449
								],
								[
									-72.24125999999993,
									41.11948000000015
								],
								[
									-71.94499999999982,
									40.93000000000009
								],
								[
									-73.34499999999994,
									40.63000000000008
								],
								[
									-73.982,
									40.627999999999986
								],
								[
									-73.95232499999995,
									40.75075000000004
								],
								[
									-74.25670999999997,
									40.47351000000009
								],
								[
									-73.96243999999993,
									40.42763000000002
								],
								[
									-74.17838000000003,
									39.70925999999997
								],
								[
									-74.90603999999993,
									38.93954000000005
								],
								[
									-74.98040999999995,
									39.19640000000007
								],
								[
									-75.20001999999994,
									39.248450000000105
								],
								[
									-75.52804999999995,
									39.49850000000009
								],
								[
									-75.31999999999996,
									38.960000000000065
								],
								[
									-75.0718347647898,
									38.78203223017928
								],
								[
									-75.05672999999993,
									38.40412000000012
								],
								[
									-75.37746999999993,
									38.01551000000006
								],
								[
									-75.94022999999996,
									37.21689000000009
								],
								[
									-76.03126999999992,
									37.25659999999999
								],
								[
									-75.7220499999998,
									37.93705000000011
								],
								[
									-76.23286999999993,
									38.319215000000014
								],
								[
									-76.35000000000005,
									39.14999999999998
								],
								[
									-76.54272499999993,
									38.71761500000011
								],
								[
									-76.32933,
									38.08326000000005
								],
								[
									-76.98999793161354,
									38.23999176691339
								],
								[
									-76.3016199999999,
									37.917944999999975
								],
								[
									-76.25874000000002,
									36.96640000000011
								],
								[
									-75.97179999999994,
									36.89726000000002
								],
								[
									-75.86803999999984,
									36.55125000000004
								],
								[
									-75.72748999999996,
									35.55074000000013
								],
								[
									-76.36317999999997,
									34.808540000000136
								],
								[
									-77.3976349999999,
									34.512010000000004
								],
								[
									-78.05495999999997,
									33.92547000000005
								],
								[
									-78.55434999999983,
									33.86133000000012
								],
								[
									-79.06066999999996,
									33.493949999999984
								],
								[
									-79.20357000000004,
									33.15839000000008
								],
								[
									-80.30132499999993,
									32.509355000000085
								],
								[
									-80.86497999999995,
									32.033300000000054
								],
								[
									-81.33629000000005,
									31.44049000000004
								],
								[
									-81.49042,
									30.72999000000013
								],
								[
									-81.31370999999996,
									30.035520000000105
								],
								[
									-80.9799999999999,
									29.18000000000012
								],
								[
									-80.53558499999988,
									28.47213000000002
								],
								[
									-80.5299999999998,
									28.040000000000106
								],
								[
									-80.05653928497756,
									26.880000000000138
								],
								[
									-80.08801499999993,
									26.205765000000014
								],
								[
									-80.13155999999987,
									25.816775000000092
								],
								[
									-80.38103000000004,
									25.20616000000001
								],
								[
									-80.6799999999999,
									25.08000000000007
								],
								[
									-81.17212999999995,
									25.201260000000133
								],
								[
									-81.32999999999998,
									25.640000000000015
								],
								[
									-81.70999999999981,
									25.870000000000005
								],
								[
									-82.23999999999992,
									26.730000000000132
								],
								[
									-82.70514999999995,
									27.495040000000074
								],
								[
									-82.85526000000002,
									27.886240000000043
								],
								[
									-82.64999999999992,
									28.550000000000153
								],
								[
									-82.9299999999999,
									29.100000000000136
								],
								[
									-83.70958999999996,
									29.93656000000007
								],
								[
									-84.09999999999994,
									30.090000000000117
								],
								[
									-85.10881999999995,
									29.63615000000007
								],
								[
									-85.28783999999999,
									29.68612000000013
								],
								[
									-85.77310000000003,
									30.152610000000124
								],
								[
									-86.39999999999989,
									30.40000000000012
								],
								[
									-87.53035999999986,
									30.27433000000005
								],
								[
									-88.41781999999992,
									30.384900000000044
								],
								[
									-89.18048999999985,
									30.315980000000053
								],
								[
									-89.59383117841978,
									30.159994004836847
								],
								[
									-89.41373499999995,
									29.89419000000001
								],
								[
									-89.43000000000004,
									29.488640000000032
								],
								[
									-89.21767000000003,
									29.29108000000005
								],
								[
									-89.40822999999992,
									29.159610000000043
								],
								[
									-89.77927999999994,
									29.307140000000146
								],
								[
									-90.15462999999997,
									29.11743000000007
								],
								[
									-90.88022499999991,
									29.148535000000123
								],
								[
									-91.62678499999987,
									29.677000000000135
								],
								[
									-92.49906000000001,
									29.55230000000003
								],
								[
									-93.22637,
									29.783750000000083
								],
								[
									-93.84841999999995,
									29.71363000000008
								],
								[
									-94.69000000000003,
									29.480000000000132
								],
								[
									-95.60025999999996,
									28.738630000000057
								],
								[
									-96.59403999999992,
									28.307480000000055
								],
								[
									-97.13999999999982,
									27.83000000000007
								],
								[
									-97.36999999999992,
									27.380000000000052
								],
								[
									-97.37999999999988,
									26.690000000000055
								],
								[
									-97.33000000000001,
									26.21000000000012
								],
								[
									-97.13999999999982,
									25.870000000000005
								],
								[
									-97.52999999999989,
									25.84000000000009
								],
								[
									-98.23999999999992,
									26.060000000000116
								],
								[
									-99.01999999999988,
									26.37000000000009
								],
								[
									-99.30000000000003,
									26.84000000000006
								],
								[
									-99.51999999999987,
									27.54000000000002
								],
								[
									-100.10999999999991,
									28.110000000000127
								],
								[
									-100.45584000000005,
									28.69612000000012
								],
								[
									-100.95759999999991,
									29.380710000000136
								],
								[
									-101.66240000000002,
									29.77930000000012
								],
								[
									-102.47999999999999,
									29.76000000000002
								],
								[
									-103.11000000000003,
									28.970000000000084
								],
								[
									-103.93999999999997,
									29.270000000000095
								],
								[
									-104.45696999999984,
									29.571960000000075
								],
								[
									-104.70574999999992,
									30.121730000000014
								],
								[
									-105.03736999999997,
									30.644019999999983
								],
								[
									-105.63159000000005,
									31.08383000000012
								],
								[
									-106.14289999999995,
									31.399950000000047
								],
								[
									-106.50758999999982,
									31.754520000000042
								],
								[
									-108.23999999999998,
									31.7548537181664
								],
								[
									-108.24193999999991,
									31.342220000000054
								],
								[
									-109.035,
									31.341940000000164
								],
								[
									-111.02360999999998,
									31.334720000000004
								],
								[
									-113.30498000000001,
									32.03914000000009
								],
								[
									-114.81500000000003,
									32.52528000000004
								],
								[
									-114.72138999999987,
									32.72082999999998
								],
								[
									-115.99134999999991,
									32.61239000000015
								],
								[
									-117.1277599999998,
									32.53533999999999
								],
								[
									-117.29593769127389,
									33.0462246152039
								],
								[
									-117.94400000000005,
									33.621236431201396
								],
								[
									-118.4106022758975,
									33.740909223124504
								],
								[
									-118.51989482279971,
									34.02778157757575
								],
								[
									-119.08099999999999,
									34.077999999999975
								],
								[
									-119.43884064201669,
									34.3484771782843
								],
								[
									-120.36777999999994,
									34.447110000000066
								],
								[
									-120.62286000000002,
									34.60855000000001
								],
								[
									-120.74432999999995,
									35.15686000000011
								],
								[
									-121.71456999999988,
									36.16152999999994
								],
								[
									-122.54746999999995,
									37.551760000000115
								],
								[
									-122.51200999999998,
									37.78339000000014
								],
								[
									-122.95318999999995,
									38.11371000000011
								],
								[
									-123.7272,
									38.95166000000012
								],
								[
									-123.86516999999992,
									39.766990000000135
								],
								[
									-124.39806999999998,
									40.31320000000002
								],
								[
									-124.17885999999996,
									41.142020000000116
								],
								[
									-124.21370000000005,
									41.99964000000014
								],
								[
									-124.53283999999991,
									42.7659900000001
								],
								[
									-124.14214000000001,
									43.70838000000009
								],
								[
									-124.02053500000001,
									44.615894999999995
								],
								[
									-123.89892999999992,
									45.5234100000001
								],
								[
									-124.07963500000001,
									46.86475000000004
								],
								[
									-124.39566999999991,
									47.72017000000011
								],
								[
									-124.68721008300783,
									48.18443298339855
								],
								[
									-124.56610107421876,
									48.3797149658204
								],
								[
									-123.12000000000003,
									48.04000000000005
								],
								[
									-122.5873599999999,
									47.09600000000006
								],
								[
									-122.33999999999997,
									47.360000000000014
								],
								[
									-122.49999999999996,
									48.180000000000064
								],
								[
									-122.84000000000006,
									49.000000000000114
								],
								[
									-120.00000000000001,
									49.000000000000114
								],
								[
									-117.03120999999994,
									49.000000000000114
								],
								[
									-116.04818000000003,
									49.000000000000114
								],
								[
									-112.9999999999999,
									49.000000000000114
								],
								[
									-110.04999999999984,
									49.000000000000114
								],
								[
									-107.04999999999991,
									49.000000000000114
								],
								[
									-104.04825999999998,
									48.99986000000007
								],
								[
									-100.64999999999999,
									49.000000000000114
								],
								[
									-97.22872000000473,
									49.00070000000011
								],
								[
									-95.15906950917196,
									49.000000000000114
								],
								[
									-95.15608999999995,
									49.38425000000004
								],
								[
									-94.81758000000005,
									49.38905
								],
								[
									-94.63999999999987,
									48.84000000000012
								],
								[
									-94.32913999999997,
									48.67074000000011
								],
								[
									-93.63086999999996,
									48.609260000000006
								]
							]
						],
						[
							[
								[
									-153.0063140533369,
									57.11584219016589
								],
								[
									-154.00509029845813,
									56.73467682558106
								],
								[
									-154.5164027577701,
									56.9927489284467
								],
								[
									-154.67099280497115,
									57.4611957871725
								],
								[
									-153.76277950744148,
									57.81657461204378
								],
								[
									-153.2287294179211,
									57.968968410872435
								],
								[
									-152.56479061583514,
									57.901427313866975
								],
								[
									-152.14114722390633,
									57.591058661522
								],
								[
									-153.0063140533369,
									57.11584219016589
								]
							]
						],
						[
							[
								[
									-165.57916419173358,
									59.90998688418756
								],
								[
									-166.19277014876727,
									59.75444082298898
								],
								[
									-166.848337368822,
									59.94140615502096
								],
								[
									-167.45527706609008,
									60.21306915957939
								],
								[
									-166.46779212142462,
									60.38416982689779
								],
								[
									-165.67442969466367,
									60.29360687930625
								],
								[
									-165.57916419173358,
									59.90998688418756
								]
							]
						],
						[
							[
								[
									-171.7316568675394,
									63.78251536727592
								],
								[
									-171.11443356024523,
									63.592191067144995
								],
								[
									-170.4911124339407,
									63.69497549097352
								],
								[
									-169.68250545965358,
									63.431115627691156
								],
								[
									-168.6894394603007,
									63.2975062120006
								],
								[
									-168.7719408844546,
									63.18859813094545
								],
								[
									-169.52943986720504,
									62.9769314642779
								],
								[
									-170.29055620021597,
									63.194437567794466
								],
								[
									-170.67138566799088,
									63.37582184513897
								],
								[
									-171.55306311753867,
									63.31778921167509
								],
								[
									-171.7911106028912,
									63.4058458523005
								],
								[
									-171.7316568675394,
									63.78251536727592
								]
							]
						],
						[
							[
								[
									-134.27110999999996,
									58.86111000000005
								],
								[
									-133.35554888220722,
									58.410285142645165
								],
								[
									-132.73041999999995,
									57.69289000000012
								],
								[
									-131.70780999999988,
									56.55212
								],
								[
									-130.00778000000003,
									55.915830000000085
								],
								[
									-129.9799942633583,
									55.28499787049722
								],
								[
									-130.53611018946725,
									54.8027534043494
								],
								[
									-131.08581823797215,
									55.17890615500204
								],
								[
									-131.9672114671423,
									55.49777558045906
								],
								[
									-132.25001074285947,
									56.36999624289746
								],
								[
									-133.53918108435641,
									57.17888743756214
								],
								[
									-134.07806292029605,
									58.12306753196691
								],
								[
									-135.03821103227907,
									58.18771474876394
								],
								[
									-136.62806230995466,
									58.21220937767046
								],
								[
									-137.80000627968604,
									58.49999542910379
								],
								[
									-139.867787041413,
									59.53776154238915
								],
								[
									-140.82527381713305,
									59.727517401765084
								],
								[
									-142.57444353556446,
									60.084446519604995
								],
								[
									-143.9588809948799,
									59.999180406323404
								],
								[
									-145.92555681682785,
									60.45860972761429
								],
								[
									-147.11437394914668,
									60.884656073644635
								],
								[
									-148.22430620012767,
									60.672989406977166
								],
								[
									-148.01806555885076,
									59.97832896589364
								],
								[
									-148.5708225168609,
									59.914172675203304
								],
								[
									-149.72785783587588,
									59.70565827090556
								],
								[
									-150.60824337461645,
									59.368211168039494
								],
								[
									-151.71639278868332,
									59.15582103131999
								],
								[
									-151.85943315326716,
									59.74498403587961
								],
								[
									-151.4097190012472,
									60.7258027207794
								],
								[
									-150.34694149473253,
									61.03358755150987
								],
								[
									-150.62111080625698,
									61.284424953854455
								],
								[
									-151.89583919981686,
									60.727197984451294
								],
								[
									-152.5783298410956,
									60.06165721296429
								],
								[
									-154.01917212625762,
									59.35027944603428
								],
								[
									-153.2875113596532,
									58.8647276882198
								],
								[
									-154.2324924387585,
									58.14637360293054
								],
								[
									-155.30749142151024,
									57.72779450136633
								],
								[
									-156.3083347239231,
									57.42277435976365
								],
								[
									-156.55609737854633,
									56.97998484967064
								],
								[
									-158.11721655986776,
									56.46360809999419
								],
								[
									-158.43332129619716,
									55.99415355083855
								],
								[
									-159.60332739971744,
									55.56668610292013
								],
								[
									-160.2897196116342,
									55.643580634170576
								],
								[
									-161.2230476552578,
									55.364734605523495
								],
								[
									-162.23776607974108,
									55.02418691672011
								],
								[
									-163.0694465810464,
									54.68973704692718
								],
								[
									-164.7855692210272,
									54.40417308208217
								],
								[
									-164.94222632552004,
									54.57222483989534
								],
								[
									-163.84833960676568,
									55.03943146424612
								],
								[
									-162.87000139061593,
									55.34804311789321
								],
								[
									-161.80417497459604,
									55.894986477270436
								],
								[
									-160.56360470278116,
									56.00805451112504
								],
								[
									-160.0705598622845,
									56.41805532492876
								],
								[
									-158.68444291891944,
									57.01667511659787
								],
								[
									-158.46109737855397,
									57.21692129172888
								],
								[
									-157.7227703521839,
									57.57000051536306
								],
								[
									-157.5502744211936,
									58.32832632103023
								],
								[
									-157.041674974577,
									58.91888458926172
								],
								[
									-158.19473120830548,
									58.615802313869835
								],
								[
									-158.5172179840231,
									58.78778148053732
								],
								[
									-159.05860612692874,
									58.424186102931685
								],
								[
									-159.71166704001735,
									58.93139028587635
								],
								[
									-159.9812888255002,
									58.572549140041644
								],
								[
									-160.35527116599653,
									59.07112335879364
								],
								[
									-161.35500342511506,
									58.670837714260756
								],
								[
									-161.96889360252635,
									58.67166453717738
								],
								[
									-162.05498653872468,
									59.26692536074745
								],
								[
									-161.87417070213536,
									59.6336213242906
								],
								[
									-162.5180590484921,
									59.98972361921392
								],
								[
									-163.81834143782015,
									59.79805573184339
								],
								[
									-164.66221757714646,
									60.26748444278266
								],
								[
									-165.34638770247483,
									60.50749563256241
								],
								[
									-165.35083187565186,
									61.073895168697504
								],
								[
									-166.12137915755596,
									61.50001902937623
								],
								[
									-165.73445187077053,
									62.07499685327181
								],
								[
									-164.91917863671785,
									62.63307648380794
								],
								[
									-164.56250790103937,
									63.14637848576305
								],
								[
									-163.75333248599702,
									63.21944896102377
								],
								[
									-163.0672244944579,
									63.05945872664802
								],
								[
									-162.26055538638172,
									63.54193573674118
								],
								[
									-161.5344498362486,
									63.455816962326764
								],
								[
									-160.77250668032113,
									63.766108100023274
								],
								[
									-160.95833513084256,
									64.22279857040277
								],
								[
									-161.5180684072122,
									64.40278758407533
								],
								[
									-160.77777767641476,
									64.78860382756642
								],
								[
									-161.39192623598763,
									64.77723501246234
								],
								[
									-162.45305009666885,
									64.55944468856822
								],
								[
									-162.7577860178941,
									64.33860545516882
								],
								[
									-163.5463942128843,
									64.5591604681905
								],
								[
									-164.96082984114517,
									64.44694509546886
								],
								[
									-166.4252882558645,
									64.68667206487072
								],
								[
									-166.84500423893905,
									65.08889557561454
								],
								[
									-168.11056006576717,
									65.66999705673675
								],
								[
									-166.70527116602196,
									66.0883177761394
								],
								[
									-164.4747096425755,
									66.5766600612975
								],
								[
									-163.65251176659567,
									66.5766600612975
								],
								[
									-163.78860165103617,
									66.07720734319668
								],
								[
									-161.67777442121016,
									66.11611969671242
								],
								[
									-162.48971452538,
									66.73556509059512
								],
								[
									-163.7197169667911,
									67.1163945583701
								],
								[
									-164.43099138085654,
									67.6163382025778
								],
								[
									-165.39028683170676,
									68.04277212185025
								],
								[
									-166.76444068099602,
									68.35887685817968
								],
								[
									-166.20470740462662,
									68.88303091091618
								],
								[
									-164.4308105133435,
									68.91553538682774
								],
								[
									-163.16861365461452,
									69.3711148139129
								],
								[
									-162.93056616926202,
									69.85806183539927
								],
								[
									-161.90889726463553,
									70.33332998318764
								],
								[
									-160.9347965159337,
									70.44768992784958
								],
								[
									-159.03917578838715,
									70.89164215766894
								],
								[
									-158.11972286683397,
									70.82472117785105
								],
								[
									-156.58082455139805,
									71.35776357694175
								],
								[
									-155.06779029032424,
									71.1477763943237
								],
								[
									-154.34416520894123,
									70.6964085964702
								],
								[
									-153.90000627339262,
									70.8899885118357
								],
								[
									-152.2100060699353,
									70.82999217394485
								],
								[
									-152.27000240782615,
									70.60000621202985
								],
								[
									-150.73999243874454,
									70.43001658800571
								],
								[
									-149.72000301816752,
									70.53001048449045
								],
								[
									-147.61336157935708,
									70.2140349392418
								],
								[
									-145.6899898002253,
									70.12000967068676
								],
								[
									-144.92001095907642,
									69.9899917670405
								],
								[
									-143.5894461804252,
									70.15251414659832
								],
								[
									-142.07251034871342,
									69.85193817817265
								],
								[
									-140.98598752156073,
									69.71199839952638
								],
								[
									-140.9859883290049,
									69.71199839952638
								],
								[
									-140.9924987520294,
									66.00002859156868
								],
								[
									-140.99776974812315,
									60.3063967962986
								],
								[
									-140.0129978161531,
									60.27683787702759
								],
								[
									-139.03900042031586,
									60.000007229240026
								],
								[
									-138.34088999999992,
									59.56211000000016
								],
								[
									-137.45250000000001,
									58.905000000000115
								],
								[
									-136.4797200000001,
									59.46389000000005
								],
								[
									-135.47582999999995,
									59.78778
								],
								[
									-134.945,
									59.27056000000013
								],
								[
									-134.27110999999996,
									58.86111000000005
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "United States of America",
					"sov_a3": "US1",
					"adm0_dif": 1,
					"level": 2,
					"type": "Country",
					"admin": "United States of America",
					"adm0_a3": "USA",
					"geou_dif": 0,
					"geounit": "United States of America",
					"gu_a3": "USA",
					"su_dif": 0,
					"subunit": "United States of America",
					"su_a3": "USA",
					"brk_diff": 0,
					"name": "United States",
					"name_long": "United States",
					"brk_a3": "USA",
					"brk_name": "United States",
					"brk_group": "",
					"abbrev": "U.S.A.",
					"postal": "US",
					"formal_en": "United States of America",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "United States of America",
					"name_alt": "",
					"mapcolor7": 4,
					"mapcolor8": 5,
					"mapcolor9": 1,
					"mapcolor13": 1,
					"pop_est": 313973000,
					"gdp_md_est": 15094000,
					"pop_year": 0,
					"lastcensus": 2010,
					"gdp_year": 0,
					"economy": "1. Developed region: G7",
					"income_grp": "1. High income: OECD",
					"wikipedia": 0,
					"fips_10": "",
					"iso_a2": "US",
					"iso_a3": "USA",
					"iso_n3": "840",
					"un_a3": "840",
					"wb_a2": "US",
					"wb_a3": "USA",
					"woe_id": -99,
					"adm0_a3_is": "USA",
					"adm0_a3_us": "USA",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "North America",
					"region_un": "Americas",
					"subregion": "Northern America",
					"region_wb": "North America",
					"name_len": 13,
					"long_len": 13,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								66.51860680528867,
								37.36278432875879
							],
							[
								66.54615034370022,
								37.97468496352687
							],
							[
								65.2159989765074,
								38.4026950139843
							],
							[
								64.17022301621677,
								38.892406724598246
							],
							[
								63.51801476426103,
								39.36325653742564
							],
							[
								62.374260288345006,
								40.05388621679039
							],
							[
								61.88271406438469,
								41.084856879229406
							],
							[
								61.54717898951356,
								41.266370347654615
							],
							[
								60.465952996670694,
								41.22032664648255
							],
							[
								60.083340691981675,
								41.425146185871405
							],
							[
								59.976422153569786,
								42.22308197689021
							],
							[
								58.62901085799146,
								42.75155101172305
							],
							[
								57.78652998233708,
								42.17055288346552
							],
							[
								56.932215203687804,
								41.826026109375604
							],
							[
								57.0963912290791,
								41.32231008561057
							],
							[
								55.96819135928291,
								41.30864166926936
							],
							[
								55.928917270741096,
								44.99585846615911
							],
							[
								58.50312706892847,
								45.58680430763283
							],
							[
								58.689989048095896,
								45.50001373959863
							],
							[
								60.23997195825834,
								44.78403677019473
							],
							[
								61.05831994003245,
								44.40581696225051
							],
							[
								62.01330040878625,
								43.50447663021565
							],
							[
								63.18578698105657,
								43.650074978198006
							],
							[
								64.90082441595928,
								43.72808055274258
							],
							[
								66.09801232286509,
								42.997660020513095
							],
							[
								66.02339155463562,
								41.99464630794398
							],
							[
								66.51064863471572,
								41.98764415136844
							],
							[
								66.71404707221652,
								41.1684435084615
							],
							[
								67.98585574735182,
								41.13599070898222
							],
							[
								68.25989586779562,
								40.6623245305949
							],
							[
								68.63248294462002,
								40.66868073176681
							],
							[
								69.07002729683532,
								41.38424428971237
							],
							[
								70.3889648782208,
								42.08130768489745
							],
							[
								70.96231489449914,
								42.266154283205495
							],
							[
								71.25924767444823,
								42.16771067968946
							],
							[
								70.42002241402821,
								41.51999827734314
							],
							[
								71.1578585142916,
								41.14358714452912
							],
							[
								71.87011478057047,
								41.392900092121266
							],
							[
								73.05541710804917,
								40.866033026689465
							],
							[
								71.77487511585656,
								40.14584442805378
							],
							[
								71.01419803252017,
								40.24436554621823
							],
							[
								70.60140669137269,
								40.21852733007229
							],
							[
								70.45815962105962,
								40.49649485937029
							],
							[
								70.66662234892505,
								40.960213324541414
							],
							[
								69.32949466337283,
								40.72782440852485
							],
							[
								69.0116329283455,
								40.08615814875667
							],
							[
								68.53641645698943,
								39.53345286717894
							],
							[
								67.70142866401736,
								39.58047842056453
							],
							[
								67.44221967964131,
								39.140143541005486
							],
							[
								68.17602501818592,
								38.901553453113905
							],
							[
								68.39203250516596,
								38.15702525486874
							],
							[
								67.82999962755952,
								37.144994004864685
							],
							[
								67.07578209825962,
								37.35614390720929
							],
							[
								66.51860680528867,
								37.36278432875879
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Uzbekistan",
					"sov_a3": "UZB",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Uzbekistan",
					"adm0_a3": "UZB",
					"geou_dif": 0,
					"geounit": "Uzbekistan",
					"gu_a3": "UZB",
					"su_dif": 0,
					"subunit": "Uzbekistan",
					"su_a3": "UZB",
					"brk_diff": 0,
					"name": "Uzbekistan",
					"name_long": "Uzbekistan",
					"brk_a3": "UZB",
					"brk_name": "Uzbekistan",
					"brk_group": "",
					"abbrev": "Uzb.",
					"postal": "UZ",
					"formal_en": "Republic of Uzbekistan",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Uzbekistan",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 3,
					"mapcolor9": 5,
					"mapcolor13": 4,
					"pop_est": 27606007,
					"gdp_md_est": 71670,
					"pop_year": -99,
					"lastcensus": 1989,
					"gdp_year": -99,
					"economy": "6. Developing region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "UZ",
					"iso_a3": "UZB",
					"iso_n3": "860",
					"un_a3": "860",
					"wb_a2": "UZ",
					"wb_a3": "UZB",
					"woe_id": -99,
					"adm0_a3_is": "UZB",
					"adm0_a3_us": "UZB",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Central Asia",
					"region_wb": "Europe & Central Asia",
					"name_len": 10,
					"long_len": 10,
					"abbrev_len": 4,
					"tiny": 5,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								-71.3315836249503,
								11.776284084515808
							],
							[
								-71.36000566271082,
								11.539993597861212
							],
							[
								-71.94704993354651,
								11.423282375530022
							],
							[
								-71.62086829292019,
								10.969459947142795
							],
							[
								-71.63306393094109,
								10.446494452349029
							],
							[
								-72.07417395698451,
								9.865651353388373
							],
							[
								-71.69564409044654,
								9.072263088411248
							],
							[
								-71.26455929226773,
								9.137194525585983
							],
							[
								-71.03999935574339,
								9.859992784052409
							],
							[
								-71.35008378771079,
								10.211935126176215
							],
							[
								-71.40062333849224,
								10.968969021036015
							],
							[
								-70.15529883490652,
								11.37548167566004
							],
							[
								-70.29384334988103,
								11.846822414594214
							],
							[
								-69.94324459499683,
								12.162307033736099
							],
							[
								-69.58430009629747,
								11.459610907431212
							],
							[
								-68.88299923366445,
								11.443384507691563
							],
							[
								-68.23327145045873,
								10.885744126829946
							],
							[
								-68.19412655299763,
								10.554653225135922
							],
							[
								-67.29624854192633,
								10.54586823164631
							],
							[
								-66.227864142508,
								10.648626817258688
							],
							[
								-65.65523759628175,
								10.200798855017323
							],
							[
								-64.89045223657817,
								10.0772146671913
							],
							[
								-64.32947872583374,
								10.38959870039568
							],
							[
								-64.31800655786495,
								10.64141795495398
							],
							[
								-63.07932247582873,
								10.7017243514386
							],
							[
								-61.880946010980196,
								10.715625311725104
							],
							[
								-62.73011898461641,
								10.420268662960906
							],
							[
								-62.388511928950976,
								9.94820445397464
							],
							[
								-61.58876746280194,
								9.873066921422264
							],
							[
								-60.83059668643172,
								9.381339829948942
							],
							[
								-60.67125240745973,
								8.580174261911878
							],
							[
								-60.15009558779618,
								8.602756862823426
							],
							[
								-59.758284878159195,
								8.367034816924047
							],
							[
								-60.5505879380582,
								7.779602972846178
							],
							[
								-60.637972785063766,
								7.4149999048108555
							],
							[
								-60.2956680975624,
								7.043911444522919
							],
							[
								-60.54399919294099,
								6.856584377464883
							],
							[
								-61.15933631045648,
								6.696077378766319
							],
							[
								-61.13941504580795,
								6.234296779806144
							],
							[
								-61.410302903881956,
								5.959068101419618
							],
							[
								-60.73357418480372,
								5.200277207861901
							],
							[
								-60.601179165271944,
								4.91809804933213
							],
							[
								-60.96689327660154,
								4.536467596856639
							],
							[
								-62.08542965355913,
								4.162123521334308
							],
							[
								-62.804533047116706,
								4.006965033377952
							],
							[
								-63.093197597899106,
								3.7705711938587854
							],
							[
								-63.88834286157416,
								4.020530096854571
							],
							[
								-64.62865943058755,
								4.14848094320925
							],
							[
								-64.81606401229402,
								4.056445217297423
							],
							[
								-64.3684944322141,
								3.797210394705246
							],
							[
								-64.40882788761792,
								3.126786200366624
							],
							[
								-64.2699991522658,
								2.497005520025567
							],
							[
								-63.42286739770512,
								2.4110676131241746
							],
							[
								-63.368788011311665,
								2.200899562993129
							],
							[
								-64.08308549666609,
								1.9163691267940803
							],
							[
								-64.19930579289051,
								1.49285492594602
							],
							[
								-64.61101192895987,
								1.3287305769870417
							],
							[
								-65.35471330428837,
								1.0952822941085003
							],
							[
								-65.54826738143757,
								0.7892544620760303
							],
							[
								-66.32576514348496,
								0.7244522159820121
							],
							[
								-66.87632585312258,
								1.253360500489336
							],
							[
								-67.18129431829307,
								2.250638129074062
							],
							[
								-67.44709204778631,
								2.6002808699608693
							],
							[
								-67.8099381171237,
								2.820655015469569
							],
							[
								-67.30317318385345,
								3.31845408773718
							],
							[
								-67.33756384954368,
								3.5423422306417223
							],
							[
								-67.62183590358129,
								3.8394817163199946
							],
							[
								-67.82301225449355,
								4.503937282728899
							],
							[
								-67.74469662135522,
								5.221128648291668
							],
							[
								-67.52153194850275,
								5.556870428891969
							],
							[
								-67.34143958196557,
								6.095468044454023
							],
							[
								-67.69508724635502,
								6.267318020040647
							],
							[
								-68.26505245631823,
								6.153268133972475
							],
							[
								-68.98531856960236,
								6.206804917826858
							],
							[
								-69.38947994655712,
								6.0998605411988365
							],
							[
								-70.09331295437242,
								6.96037649172311
							],
							[
								-70.67423356798152,
								7.087784735538719
							],
							[
								-71.96017574734864,
								6.991614895043539
							],
							[
								-72.19835242378188,
								7.340430813013683
							],
							[
								-72.44448727078807,
								7.423784898300482
							],
							[
								-72.47967892117885,
								7.632506008327354
							],
							[
								-72.36090064155597,
								8.002638454617895
							],
							[
								-72.43986223009796,
								8.405275376820029
							],
							[
								-72.6604947577681,
								8.625287787302682
							],
							[
								-72.7887298245004,
								9.085027167187334
							],
							[
								-73.30495154488005,
								9.151999823437606
							],
							[
								-73.02760413276957,
								9.736770331252444
							],
							[
								-72.9052860175347,
								10.450344346554772
							],
							[
								-72.61465776232521,
								10.821975409381778
							],
							[
								-72.22757544624294,
								11.10870209395324
							],
							[
								-71.97392167833829,
								11.60867157637712
							],
							[
								-71.3315836249503,
								11.776284084515808
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Venezuela",
					"sov_a3": "VEN",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Venezuela",
					"adm0_a3": "VEN",
					"geou_dif": 0,
					"geounit": "Venezuela",
					"gu_a3": "VEN",
					"su_dif": 0,
					"subunit": "Venezuela",
					"su_a3": "VEN",
					"brk_diff": 0,
					"name": "Venezuela",
					"name_long": "Venezuela",
					"brk_a3": "VEN",
					"brk_name": "Venezuela",
					"brk_group": "",
					"abbrev": "Ven.",
					"postal": "VE",
					"formal_en": "Bolivarian Republic of Venezuela",
					"formal_fr": "República Bolivariana de Venezuela",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Venezuela, RB",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 3,
					"mapcolor9": 1,
					"mapcolor13": 4,
					"pop_est": 26814843,
					"gdp_md_est": 357400,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "VE",
					"iso_a3": "VEN",
					"iso_n3": "862",
					"un_a3": "862",
					"wb_a2": "VE",
					"wb_a3": "VEN",
					"woe_id": -99,
					"adm0_a3_is": "VEN",
					"adm0_a3_us": "VEN",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "South America",
					"region_un": "Americas",
					"subregion": "South America",
					"region_wb": "Latin America & Caribbean",
					"name_len": 9,
					"long_len": 9,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								104.33433475140347,
								10.48654368737523
							],
							[
								105.19991499229235,
								10.889309800658097
							],
							[
								106.24967003786946,
								10.961811835163587
							],
							[
								105.81052371625313,
								11.567614650921229
							],
							[
								107.49140302941089,
								12.337205918827948
							],
							[
								107.61454796756243,
								13.535530707244206
							],
							[
								107.38272749230109,
								14.202440904186972
							],
							[
								107.5645251811039,
								15.20217316330556
							],
							[
								107.3127059265456,
								15.90853831630318
							],
							[
								106.55600792849569,
								16.604283962464805
							],
							[
								105.92576216026403,
								17.48531545660896
							],
							[
								105.09459842328152,
								18.66697459561108
							],
							[
								103.89653201702671,
								19.265180975821806
							],
							[
								104.18338789267894,
								19.62466807706022
							],
							[
								104.8225736836971,
								19.886641750563882
							],
							[
								104.43500044150805,
								20.75873322192153
							],
							[
								103.20386111858645,
								20.76656220141375
							],
							[
								102.75489627483466,
								21.675137233969465
							],
							[
								102.17043582561358,
								22.464753119389304
							],
							[
								102.7069922221001,
								22.708795070887675
							],
							[
								103.50451460166056,
								22.70375661873921
							],
							[
								104.47685835166448,
								22.819150092046968
							],
							[
								105.32920942588663,
								23.352063300056912
							],
							[
								105.81124718630522,
								22.976892401617903
							],
							[
								106.72540327354847,
								22.79426788989842
							],
							[
								106.56727339073532,
								22.21820486092477
							],
							[
								107.04342003787264,
								21.811898912029914
							],
							[
								108.05018029178294,
								21.55237986906012
							],
							[
								106.7150679870901,
								20.69685069425202
							],
							[
								105.88168216351903,
								19.752050482659698
							],
							[
								105.66200564984631,
								19.05816518806057
							],
							[
								106.42681684776602,
								18.004120998603227
							],
							[
								107.36195356651974,
								16.697456569887052
							],
							[
								108.26949507042963,
								16.07974233648615
							],
							[
								108.87710656131748,
								15.27669057867044
							],
							[
								109.33526981001722,
								13.426028347217724
							],
							[
								109.20013593957398,
								11.666859239137764
							],
							[
								108.36612999881545,
								11.008320624226272
							],
							[
								107.22092858279524,
								10.364483954301832
							],
							[
								106.40511274620343,
								9.53083974856932
							],
							[
								105.15826378786511,
								8.599759629750494
							],
							[
								104.79518517458239,
								9.241038316276502
							],
							[
								105.07620161338562,
								9.918490505406808
							],
							[
								104.33433475140347,
								10.48654368737523
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "Vietnam",
					"sov_a3": "VNM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Vietnam",
					"adm0_a3": "VNM",
					"geou_dif": 0,
					"geounit": "Vietnam",
					"gu_a3": "VNM",
					"su_dif": 0,
					"subunit": "Vietnam",
					"su_a3": "VNM",
					"brk_diff": 0,
					"name": "Vietnam",
					"name_long": "Vietnam",
					"brk_a3": "VNM",
					"brk_name": "Vietnam",
					"brk_group": "",
					"abbrev": "Viet.",
					"postal": "VN",
					"formal_en": "Socialist Republic of Vietnam",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Vietnam",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 6,
					"mapcolor9": 5,
					"mapcolor13": 4,
					"pop_est": 86967524,
					"gdp_md_est": 241700,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "VN",
					"iso_a3": "VNM",
					"iso_n3": "704",
					"un_a3": "704",
					"wb_a2": "VN",
					"wb_a3": "VNM",
					"woe_id": -99,
					"adm0_a3_is": "VNM",
					"adm0_a3_us": "VNM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "South-Eastern Asia",
					"region_wb": "East Asia & Pacific",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 5,
					"tiny": 2,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "MultiPolygon",
					"coordinates": [
						[
							[
								[
									167.8448767438451,
									-16.466333103097156
								],
								[
									167.5151811058229,
									-16.59784962327997
								],
								[
									167.18000776597782,
									-16.15999521247096
								],
								[
									167.21680138576963,
									-15.891846205308454
								],
								[
									167.8448767438451,
									-16.466333103097156
								]
							]
						],
						[
							[
								[
									167.1077124372015,
									-14.933920179913954
								],
								[
									167.27002811103026,
									-15.740020847234874
								],
								[
									167.00120731024796,
									-15.614602146062495
								],
								[
									166.79315799384088,
									-15.668810723536723
								],
								[
									166.64985924709558,
									-15.392703545801197
								],
								[
									166.62913699774649,
									-14.626497084209603
								],
								[
									167.1077124372015,
									-14.933920179913954
								]
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 4,
					"sovereignt": "Vanuatu",
					"sov_a3": "VUT",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Vanuatu",
					"adm0_a3": "VUT",
					"geou_dif": 0,
					"geounit": "Vanuatu",
					"gu_a3": "VUT",
					"su_dif": 0,
					"subunit": "Vanuatu",
					"su_a3": "VUT",
					"brk_diff": 0,
					"name": "Vanuatu",
					"name_long": "Vanuatu",
					"brk_a3": "VUT",
					"brk_name": "Vanuatu",
					"brk_group": "",
					"abbrev": "Van.",
					"postal": "VU",
					"formal_en": "Republic of Vanuatu",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Vanuatu",
					"name_alt": "",
					"mapcolor7": 6,
					"mapcolor8": 3,
					"mapcolor9": 7,
					"mapcolor13": 3,
					"pop_est": 218519,
					"gdp_md_est": 988.5,
					"pop_year": -99,
					"lastcensus": 2009,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "VU",
					"iso_a3": "VUT",
					"iso_n3": "548",
					"un_a3": "548",
					"wb_a2": "VU",
					"wb_a3": "VUT",
					"woe_id": -99,
					"adm0_a3_is": "VUT",
					"adm0_a3_us": "VUT",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Oceania",
					"region_un": "Oceania",
					"subregion": "Melanesia",
					"region_wb": "East Asia & Pacific",
					"name_len": 7,
					"long_len": 7,
					"abbrev_len": 4,
					"tiny": 2,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								42.77933230975097,
								16.347891343648683
							],
							[
								43.21837527850275,
								16.66688996018641
							],
							[
								43.11579756040336,
								17.088440456607373
							],
							[
								43.380794305196105,
								17.57998668056767
							],
							[
								43.79151858905192,
								17.31997671149111
							],
							[
								44.06261315285508,
								17.410358791569593
							],
							[
								45.21665123879719,
								17.433328965723334
							],
							[
								45.39999922056876,
								17.333335069238558
							],
							[
								46.366658563020536,
								17.233315334537636
							],
							[
								46.74999433776165,
								17.283338120996177
							],
							[
								47.000004917189756,
								16.949999294497445
							],
							[
								47.46669477721763,
								17.116681626854884
							],
							[
								48.18334354024134,
								18.166669216377315
							],
							[
								49.11667158386487,
								18.616667588774945
							],
							[
								52.00000980002224,
								19.000003363516058
							],
							[
								52.78218427919205,
								17.349742336491232
							],
							[
								53.10857262554751,
								16.651051133688952
							],
							[
								52.38520592632588,
								16.382411200419654
							],
							[
								52.19172936382509,
								15.93843313238402
							],
							[
								52.1681649107,
								15.597420355689948
							],
							[
								51.172515089732485,
								15.175249742081492
							],
							[
								49.57457645040315,
								14.708766587782748
							],
							[
								48.67923058451416,
								14.00320241948566
							],
							[
								48.23894738138742,
								13.948089504446372
							],
							[
								47.938914015500785,
								14.007233181204427
							],
							[
								47.354453566279716,
								13.592219753468383
							],
							[
								46.717076450391744,
								13.39969920496502
							],
							[
								45.87759280781027,
								13.347764390511685
							],
							[
								45.62505008319988,
								13.290946153206763
							],
							[
								45.406458774605255,
								13.026905422411433
							],
							[
								45.14435591002086,
								12.95393830001531
							],
							[
								44.989533318874415,
								12.69958690027471
							],
							[
								44.49457645038285,
								12.721652736863348
							],
							[
								44.17511274595449,
								12.585950425664876
							],
							[
								43.48295861183713,
								12.636800035040084
							],
							[
								43.22287112811213,
								13.220950425667425
							],
							[
								43.25144819516953,
								13.767583726450852
							],
							[
								43.08794396339806,
								14.06263031662131
							],
							[
								42.892245314308724,
								14.802249253798749
							],
							[
								42.60487267433362,
								15.213335272680595
							],
							[
								42.80501549660005,
								15.261962795467255
							],
							[
								42.70243777850066,
								15.718885809791999
							],
							[
								42.823670688657415,
								15.911742255105267
							],
							[
								42.77933230975097,
								16.347891343648683
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Yemen",
					"sov_a3": "YEM",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Yemen",
					"adm0_a3": "YEM",
					"geou_dif": 0,
					"geounit": "Yemen",
					"gu_a3": "YEM",
					"su_dif": 0,
					"subunit": "Yemen",
					"su_a3": "YEM",
					"brk_diff": 0,
					"name": "Yemen",
					"name_long": "Yemen",
					"brk_a3": "YEM",
					"brk_name": "Yemen",
					"brk_group": "",
					"abbrev": "Yem.",
					"postal": "YE",
					"formal_en": "Republic of Yemen",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Yemen, Rep.",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 3,
					"mapcolor9": 3,
					"mapcolor13": 11,
					"pop_est": 23822783,
					"gdp_md_est": 55280,
					"pop_year": -99,
					"lastcensus": 2004,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "YE",
					"iso_a3": "YEM",
					"iso_n3": "887",
					"un_a3": "887",
					"wb_a2": "RY",
					"wb_a3": "YEM",
					"woe_id": -99,
					"adm0_a3_is": "YEM",
					"adm0_a3_us": "YEM",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Asia",
					"region_un": "Asia",
					"subregion": "Western Asia",
					"region_wb": "Middle East & North Africa",
					"name_len": 5,
					"long_len": 5,
					"abbrev_len": 4,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								16.344976840895242,
								-28.5767050106977
							],
							[
								16.824017368240902,
								-28.08216155366447
							],
							[
								17.218928663815404,
								-28.35594329194681
							],
							[
								17.387497185951503,
								-28.78351409272978
							],
							[
								17.83615197110953,
								-28.85637786226132
							],
							[
								18.464899122804752,
								-29.04546192801728
							],
							[
								19.002127312911085,
								-28.972443129188868
							],
							[
								19.894734327888614,
								-28.461104831660776
							],
							[
								19.895767856534434,
								-24.76779021576059
							],
							[
								20.16572553882719,
								-24.91796192800077
							],
							[
								20.75860924651184,
								-25.86813648855145
							],
							[
								20.66647016773544,
								-26.477453301704923
							],
							[
								20.88960900237174,
								-26.828542982695915
							],
							[
								21.605896030369394,
								-26.726533705351756
							],
							[
								22.105968865657868,
								-26.280256036079138
							],
							[
								22.57953169118059,
								-25.979447523708146
							],
							[
								22.8242712745149,
								-25.50045867279477
							],
							[
								23.312096795350186,
								-25.26868987396572
							],
							[
								23.73356977712271,
								-25.390129489851617
							],
							[
								24.211266717228796,
								-25.670215752873574
							],
							[
								25.025170525825786,
								-25.7196700985769
							],
							[
								25.66466637543772,
								-25.486816094669713
							],
							[
								25.76584882986521,
								-25.17484547292368
							],
							[
								25.94165205252216,
								-24.69637338633322
							],
							[
								26.4857532081233,
								-24.616326592713104
							],
							[
								26.786406691197413,
								-24.240690606383485
							],
							[
								27.119409620886245,
								-23.574323011979775
							],
							[
								28.01723595552525,
								-22.82775359465908
							],
							[
								29.43218834810904,
								-22.091312758067588
							],
							[
								29.839036899542972,
								-22.102216485281176
							],
							[
								30.322883335091774,
								-22.271611830333935
							],
							[
								30.65986535006709,
								-22.151567478119915
							],
							[
								31.19140913262129,
								-22.2515096981724
							],
							[
								31.670397983534656,
								-23.658969008073864
							],
							[
								31.930588820124253,
								-24.36941659922254
							],
							[
								31.75240848158188,
								-25.484283949487413
							],
							[
								31.83777794772806,
								-25.84333180105135
							],
							[
								31.333157586397903,
								-25.66019052500895
							],
							[
								31.04407962415715,
								-25.731452325139443
							],
							[
								30.949666782359913,
								-26.02264902110415
							],
							[
								30.67660851412964,
								-26.398078301704608
							],
							[
								30.68596194837448,
								-26.743845310169533
							],
							[
								31.28277306491333,
								-27.285879408478998
							],
							[
								31.86806033705108,
								-27.177927341421277
							],
							[
								32.07166548028107,
								-26.73382008230491
							],
							[
								32.830120477028885,
								-26.742191664336197
							],
							[
								32.580264926897684,
								-27.470157566031816
							],
							[
								32.46213260267845,
								-28.301011244420557
							],
							[
								32.20338870619304,
								-28.75240488049007
							],
							[
								31.521001417778876,
								-29.257386976846256
							],
							[
								31.325561150851,
								-29.401977634398914
							],
							[
								30.901762729625347,
								-29.909956963828037
							],
							[
								30.62281334811382,
								-30.42377573010613
							],
							[
								30.05571618014278,
								-31.140269463832958
							],
							[
								28.92555260591954,
								-32.1720411109725
							],
							[
								28.2197558936771,
								-32.771952813448856
							],
							[
								27.464608188595975,
								-33.2269637997788
							],
							[
								26.419452345492825,
								-33.61495045342619
							],
							[
								25.90966434093349,
								-33.6670402971764
							],
							[
								25.780628289500697,
								-33.94464609144834
							],
							[
								25.172861769315972,
								-33.796851495093584
							],
							[
								24.677853224392123,
								-33.98717579522455
							],
							[
								23.594043409934642,
								-33.794474379208154
							],
							[
								22.988188917744736,
								-33.91643075941698
							],
							[
								22.574157342222236,
								-33.86408253350531
							],
							[
								21.542799106541025,
								-34.258838799782936
							],
							[
								20.689052768647002,
								-34.417175388325234
							],
							[
								20.071261020597632,
								-34.79513681410799
							],
							[
								19.61640506356457,
								-34.81916635512371
							],
							[
								19.193278435958717,
								-34.46259897230979
							],
							[
								18.85531456876987,
								-34.444305515278465
							],
							[
								18.42464318204938,
								-33.99787281670897
							],
							[
								18.377410922934615,
								-34.13652068454807
							],
							[
								18.24449913907992,
								-33.86775156019803
							],
							[
								18.250080193767445,
								-33.28143075941444
							],
							[
								17.92519046394844,
								-32.61129078545343
							],
							[
								18.247909783611192,
								-32.42913136162457
							],
							[
								18.22176150887148,
								-31.66163298922567
							],
							[
								17.56691775886887,
								-30.725721123987547
							],
							[
								17.064416131262703,
								-29.878641045859162
							],
							[
								17.062917514726223,
								-29.875953871379984
							],
							[
								16.344976840895242,
								-28.5767050106977
							]
						],
						[
							[
								28.978262566857243,
								-28.95559661226171
							],
							[
								28.541700066855498,
								-28.64750172293757
							],
							[
								28.074338413207784,
								-28.851468601193588
							],
							[
								27.532511020627478,
								-29.24271087007536
							],
							[
								26.999261915807637,
								-29.875953871379984
							],
							[
								27.749397006956485,
								-30.645105889612225
							],
							[
								28.107204624145425,
								-30.54573211031495
							],
							[
								28.29106937023991,
								-30.2262167294543
							],
							[
								28.84839969250774,
								-30.070050551068256
							],
							[
								29.018415154748027,
								-29.74376555757737
							],
							[
								29.32516645683259,
								-29.257386976846256
							],
							[
								28.978262566857243,
								-28.95559661226171
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 2,
					"sovereignt": "South Africa",
					"sov_a3": "ZAF",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "South Africa",
					"adm0_a3": "ZAF",
					"geou_dif": 0,
					"geounit": "South Africa",
					"gu_a3": "ZAF",
					"su_dif": 0,
					"subunit": "South Africa",
					"su_a3": "ZAF",
					"brk_diff": 0,
					"name": "South Africa",
					"name_long": "South Africa",
					"brk_a3": "ZAF",
					"brk_name": "South Africa",
					"brk_group": "",
					"abbrev": "S.Af.",
					"postal": "ZA",
					"formal_en": "Republic of South Africa",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "South Africa",
					"name_alt": "",
					"mapcolor7": 2,
					"mapcolor8": 3,
					"mapcolor9": 4,
					"mapcolor13": 2,
					"pop_est": 49052489,
					"gdp_md_est": 491000,
					"pop_year": -99,
					"lastcensus": 2001,
					"gdp_year": -99,
					"economy": "5. Emerging region: G20",
					"income_grp": "3. Upper middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "ZA",
					"iso_a3": "ZAF",
					"iso_n3": "710",
					"un_a3": "710",
					"wb_a2": "ZA",
					"wb_a3": "ZAF",
					"woe_id": -99,
					"adm0_a3_is": "ZAF",
					"adm0_a3_us": "ZAF",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Southern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 12,
					"long_len": 12,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								32.75937544122132,
								-9.23059905358906
							],
							[
								33.2313879737753,
								-9.6767216935648
							],
							[
								33.48568769708359,
								-10.525558770391115
							],
							[
								33.315310499817286,
								-10.796549981329697
							],
							[
								33.114289178201915,
								-11.607198174692314
							],
							[
								33.306422153463075,
								-12.435778090060218
							],
							[
								32.991764357237884,
								-12.783870537978274
							],
							[
								32.68816531752313,
								-13.712857761289277
							],
							[
								33.214024692525214,
								-13.971860039936153
							],
							[
								30.17948123548183,
								-14.796099134991529
							],
							[
								30.27425581230511,
								-15.507786960515213
							],
							[
								29.516834344203147,
								-15.644677829656388
							],
							[
								28.947463413211267,
								-16.04305144619444
							],
							[
								28.8258687680285,
								-16.389748630440614
							],
							[
								28.467906121542683,
								-16.468400160388846
							],
							[
								27.59824344250276,
								-17.290830580314008
							],
							[
								27.044427117630732,
								-17.938026218337434
							],
							[
								26.70677330903564,
								-17.961228936436484
							],
							[
								26.381935255648926,
								-17.8460421688579
							],
							[
								25.264225701608012,
								-17.736539808831417
							],
							[
								25.08444339366457,
								-17.661815687737374
							],
							[
								25.07695031098226,
								-17.57882333747662
							],
							[
								24.682349074001507,
								-17.353410739819473
							],
							[
								24.033861525170778,
								-17.295843194246324
							],
							[
								23.215048455506064,
								-17.523116143465984
							],
							[
								22.56247846852426,
								-16.898451429921813
							],
							[
								21.887842644953874,
								-16.08031015387688
							],
							[
								21.933886346125917,
								-12.898437188369359
							],
							[
								24.016136508894675,
								-12.911046237848574
							],
							[
								23.930922072045377,
								-12.565847670138856
							],
							[
								24.079905226342845,
								-12.191296888887365
							],
							[
								23.904153680118185,
								-11.722281589406322
							],
							[
								24.01789350759259,
								-11.23729827234709
							],
							[
								23.912215203555718,
								-10.926826267137514
							],
							[
								24.25715538910399,
								-10.951992689663657
							],
							[
								24.31451622894795,
								-11.26282642989927
							],
							[
								24.78316979340295,
								-11.238693536018964
							],
							[
								25.418118116973204,
								-11.330935967659961
							],
							[
								25.752309604604733,
								-11.784965101776358
							],
							[
								26.553087599399618,
								-11.924439792532127
							],
							[
								27.164419793412463,
								-11.608748467661075
							],
							[
								27.388798862423783,
								-12.132747491100666
							],
							[
								28.155108676879987,
								-12.272480564017897
							],
							[
								28.523561639121027,
								-12.698604424696683
							],
							[
								28.934285922976837,
								-13.248958428605135
							],
							[
								29.69961388521949,
								-13.257226657771831
							],
							[
								29.61600141777123,
								-12.178894545137311
							],
							[
								29.34154788586909,
								-12.360743910372413
							],
							[
								28.642417433392353,
								-11.971568698782315
							],
							[
								28.372253045370428,
								-11.793646742401393
							],
							[
								28.49606977714177,
								-10.789883721564046
							],
							[
								28.67368167492893,
								-9.605924981324932
							],
							[
								28.449871046672826,
								-9.164918308146085
							],
							[
								28.734866570762502,
								-8.526559340044578
							],
							[
								29.00291222506047,
								-8.407031752153472
							],
							[
								30.346086053190817,
								-8.238256524288218
							],
							[
								30.74001549655179,
								-8.340007419470915
							],
							[
								31.15775133695005,
								-8.594578747317366
							],
							[
								31.556348097466497,
								-8.762048841998642
							],
							[
								32.19186486179197,
								-8.930358981973278
							],
							[
								32.75937544122132,
								-9.23059905358906
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Zambia",
					"sov_a3": "ZMB",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Zambia",
					"adm0_a3": "ZMB",
					"geou_dif": 0,
					"geounit": "Zambia",
					"gu_a3": "ZMB",
					"su_dif": 0,
					"subunit": "Zambia",
					"su_a3": "ZMB",
					"brk_diff": 0,
					"name": "Zambia",
					"name_long": "Zambia",
					"brk_a3": "ZMB",
					"brk_name": "Zambia",
					"brk_group": "",
					"abbrev": "Zambia",
					"postal": "ZM",
					"formal_en": "Republic of Zambia",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Zambia",
					"name_alt": "",
					"mapcolor7": 5,
					"mapcolor8": 8,
					"mapcolor9": 5,
					"mapcolor13": 13,
					"pop_est": 11862740,
					"gdp_md_est": 17500,
					"pop_year": -99,
					"lastcensus": 2010,
					"gdp_year": -99,
					"economy": "7. Least developed region",
					"income_grp": "4. Lower middle income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "ZM",
					"iso_a3": "ZMB",
					"iso_n3": "894",
					"un_a3": "894",
					"wb_a2": "ZM",
					"wb_a3": "ZMB",
					"woe_id": -99,
					"adm0_a3_is": "ZMB",
					"adm0_a3_us": "ZMB",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 6,
					"long_len": 6,
					"abbrev_len": 6,
					"tiny": -99,
					"homepart": 1
				}
			},
			{
				"type": "Feature",
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								31.19140913262129,
								-22.2515096981724
							],
							[
								30.65986535006709,
								-22.151567478119915
							],
							[
								30.322883335091774,
								-22.271611830333935
							],
							[
								29.839036899542972,
								-22.102216485281176
							],
							[
								29.43218834810904,
								-22.091312758067588
							],
							[
								28.794656202924216,
								-21.63945403410745
							],
							[
								28.021370070108617,
								-21.485975030200585
							],
							[
								27.72722781750326,
								-20.851801853114715
							],
							[
								27.724747348753255,
								-20.49905852629039
							],
							[
								27.296504754350508,
								-20.391519870691
							],
							[
								26.164790887158485,
								-19.29308562589494
							],
							[
								25.85039147309473,
								-18.714412937090536
							],
							[
								25.649163445750162,
								-18.53602589281899
							],
							[
								25.264225701608012,
								-17.736539808831417
							],
							[
								26.381935255648926,
								-17.8460421688579
							],
							[
								26.70677330903564,
								-17.961228936436484
							],
							[
								27.044427117630732,
								-17.938026218337434
							],
							[
								27.59824344250276,
								-17.290830580314008
							],
							[
								28.467906121542683,
								-16.468400160388846
							],
							[
								28.8258687680285,
								-16.389748630440614
							],
							[
								28.947463413211267,
								-16.04305144619444
							],
							[
								29.516834344203147,
								-15.644677829656388
							],
							[
								30.27425581230511,
								-15.507786960515213
							],
							[
								30.338954705534544,
								-15.880839125230246
							],
							[
								31.17306399915768,
								-15.860943698797874
							],
							[
								31.636498243951195,
								-16.071990248277885
							],
							[
								31.8520406430406,
								-16.319417006091378
							],
							[
								32.32823896661023,
								-16.392074069893752
							],
							[
								32.847638787575846,
								-16.713398125884616
							],
							[
								32.84986087416439,
								-17.97905730557718
							],
							[
								32.65488569512715,
								-18.672089939043495
							],
							[
								32.61199425632489,
								-19.419382826416275
							],
							[
								32.772707960752626,
								-19.715592136313298
							],
							[
								32.65974327976258,
								-20.304290052982317
							],
							[
								32.50869306817344,
								-20.395292250248307
							],
							[
								32.244988234188014,
								-21.116488539313693
							],
							[
								31.19140913262129,
								-22.2515096981724
							]
						]
					]
				},
				"properties": {
					"scalerank": 1,
					"featurecla": "Admin-0 country",
					"labelrank": 3,
					"sovereignt": "Zimbabwe",
					"sov_a3": "ZWE",
					"adm0_dif": 0,
					"level": 2,
					"type": "Sovereign country",
					"admin": "Zimbabwe",
					"adm0_a3": "ZWE",
					"geou_dif": 0,
					"geounit": "Zimbabwe",
					"gu_a3": "ZWE",
					"su_dif": 0,
					"subunit": "Zimbabwe",
					"su_a3": "ZWE",
					"brk_diff": 0,
					"name": "Zimbabwe",
					"name_long": "Zimbabwe",
					"brk_a3": "ZWE",
					"brk_name": "Zimbabwe",
					"brk_group": "",
					"abbrev": "Zimb.",
					"postal": "ZW",
					"formal_en": "Republic of Zimbabwe",
					"formal_fr": "",
					"note_adm0": "",
					"note_brk": "",
					"name_sort": "Zimbabwe",
					"name_alt": "",
					"mapcolor7": 1,
					"mapcolor8": 5,
					"mapcolor9": 3,
					"mapcolor13": 9,
					"pop_est": 12619600,
					"gdp_md_est": 9323,
					"pop_year": 0,
					"lastcensus": 2002,
					"gdp_year": 0,
					"economy": "5. Emerging region: G20",
					"income_grp": "5. Low income",
					"wikipedia": -99,
					"fips_10": "",
					"iso_a2": "ZW",
					"iso_a3": "ZWE",
					"iso_n3": "716",
					"un_a3": "716",
					"wb_a2": "ZW",
					"wb_a3": "ZWE",
					"woe_id": -99,
					"adm0_a3_is": "ZWE",
					"adm0_a3_us": "ZWE",
					"adm0_a3_un": -99,
					"adm0_a3_wb": -99,
					"continent": "Africa",
					"region_un": "Africa",
					"subregion": "Eastern Africa",
					"region_wb": "Sub-Saharan Africa",
					"name_len": 8,
					"long_len": 8,
					"abbrev_len": 5,
					"tiny": -99,
					"homepart": 1
				}
			}
		]
	};

/***/ },
/* 636 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _react = __webpack_require__(1);

	var _react2 = _interopRequireDefault(_react);

	var _echarts = __webpack_require__(239);

	var _echarts2 = _interopRequireDefault(_echarts);

	var _home = __webpack_require__(234);

	var _home2 = _interopRequireDefault(_home);

	var _sp500hst = __webpack_require__(637);

	var _sp500hst2 = _interopRequireDefault(_sp500hst);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Lesson4 = function (_Component) {
	    _inherits(Lesson4, _Component);

	    function Lesson4() {
	        _classCallCheck(this, Lesson4);

	        return _possibleConstructorReturn(this, (Lesson4.__proto__ || Object.getPrototypeOf(Lesson4)).apply(this, arguments));
	    }

	    _createClass(Lesson4, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var myChart = _echarts2.default.init(this.refs.lesson4);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.createElement('div', { className: _home2.default.lesson, ref: 'lesson4' });
	        }
	    }]);

	    return Lesson4;
	}(_react.Component);

	exports.default = Lesson4;

/***/ },
/* 637 */
/***/ function(module, exports) {

	module.exports = [
		{
			"Date": "20090821",
			"Ticker": "A",
			"Open": "25.6",
			"High": "25.61",
			"Low": "25.22",
			"Close": "25.55",
			"Volume": "34758"
		},
		{
			"Date": "20090824",
			"Ticker": "A",
			"Open": "25.64",
			"High": "25.74",
			"Low": "25.33",
			"Close": "25.5",
			"Volume": "22247"
		},
		{
			"Date": "20090825",
			"Ticker": "A",
			"Open": "25.5",
			"High": "25.7",
			"Low": "25.225",
			"Close": "25.34",
			"Volume": "30891"
		},
		{
			"Date": "20090826",
			"Ticker": "A",
			"Open": "25.32",
			"High": "25.6425",
			"Low": "25.145",
			"Close": "25.48",
			"Volume": "33334"
		},
		{
			"Date": "20090827",
			"Ticker": "A",
			"Open": "25.5",
			"High": "25.57",
			"Low": "25.23",
			"Close": "25.54",
			"Volume": "70176"
		},
		{
			"Date": "20090828",
			"Ticker": "A",
			"Open": "25.67",
			"High": "26.05",
			"Low": "25.63",
			"Close": "25.83",
			"Volume": "39694"
		},
		{
			"Date": "20090831",
			"Ticker": "A",
			"Open": "25.45",
			"High": "25.74",
			"Low": "25.31",
			"Close": "25.68",
			"Volume": "51064"
		},
		{
			"Date": "20090901",
			"Ticker": "A",
			"Open": "25.51",
			"High": "26.33",
			"Low": "25.48",
			"Close": "25.85",
			"Volume": "66422"
		},
		{
			"Date": "20090902",
			"Ticker": "A",
			"Open": "25.97",
			"High": "25.97",
			"Low": "24.96",
			"Close": "25.22",
			"Volume": "64614"
		},
		{
			"Date": "20090903",
			"Ticker": "A",
			"Open": "25.47",
			"High": "25.54",
			"Low": "25",
			"Close": "25.29",
			"Volume": "46369"
		},
		{
			"Date": "20090904",
			"Ticker": "A",
			"Open": "25.37",
			"High": "25.92",
			"Low": "25.1475",
			"Close": "25.86",
			"Volume": "32556"
		},
		{
			"Date": "20090909",
			"Ticker": "A",
			"Open": "26.31",
			"High": "27.19",
			"Low": "26.16",
			"Close": "27.15",
			"Volume": "36764"
		},
		{
			"Date": "20090910",
			"Ticker": "A",
			"Open": "27.08",
			"High": "27.88",
			"Low": "26.94",
			"Close": "27.86",
			"Volume": "42987"
		},
		{
			"Date": "20090911",
			"Ticker": "A",
			"Open": "27.88",
			"High": "28.16",
			"Low": "27.75",
			"Close": "28.05",
			"Volume": "43907"
		},
		{
			"Date": "20090914",
			"Ticker": "A",
			"Open": "27.86",
			"High": "28.18",
			"Low": "27.64",
			"Close": "28.1",
			"Volume": "35156"
		},
		{
			"Date": "20090915",
			"Ticker": "A",
			"Open": "28.01",
			"High": "28.38",
			"Low": "27.65",
			"Close": "28.32",
			"Volume": "33180"
		},
		{
			"Date": "20090916",
			"Ticker": "A",
			"Open": "28.33",
			"High": "28.77",
			"Low": "28.33",
			"Close": "28.63",
			"Volume": "32339"
		},
		{
			"Date": "20090917",
			"Ticker": "A",
			"Open": "28.59",
			"High": "28.82",
			"Low": "28.175",
			"Close": "28.49",
			"Volume": "39189"
		},
		{
			"Date": "20090918",
			"Ticker": "A",
			"Open": "28.69",
			"High": "28.73",
			"Low": "27.82",
			"Close": "28.37",
			"Volume": "44366"
		},
		{
			"Date": "20090921",
			"Ticker": "A",
			"Open": "28.73",
			"High": "29.38",
			"Low": "28.62",
			"Close": "28.81",
			"Volume": "56186"
		},
		{
			"Date": "20090922",
			"Ticker": "A",
			"Open": "28.96",
			"High": "28.96",
			"Low": "28.39",
			"Close": "28.53",
			"Volume": "47308"
		},
		{
			"Date": "20090923",
			"Ticker": "A",
			"Open": "28.59",
			"High": "28.83",
			"Low": "28.15",
			"Close": "28.27",
			"Volume": "44547"
		},
		{
			"Date": "20090924",
			"Ticker": "A",
			"Open": "28.38",
			"High": "28.45",
			"Low": "27.58",
			"Close": "27.83",
			"Volume": "29750"
		},
		{
			"Date": "20090925",
			"Ticker": "A",
			"Open": "27.77",
			"High": "27.84",
			"Low": "27.48",
			"Close": "27.58",
			"Volume": "36891"
		},
		{
			"Date": "20090928",
			"Ticker": "A",
			"Open": "27.69",
			"High": "28.23",
			"Low": "27.49",
			"Close": "27.89",
			"Volume": "21000"
		},
		{
			"Date": "20090929",
			"Ticker": "A",
			"Open": "27.8",
			"High": "28.13",
			"Low": "27.705",
			"Close": "27.9",
			"Volume": "31254"
		},
		{
			"Date": "20090930",
			"Ticker": "A",
			"Open": "28.06",
			"High": "28.07",
			"Low": "27.51",
			"Close": "27.83",
			"Volume": "45318"
		},
		{
			"Date": "20091001",
			"Ticker": "A",
			"Open": "26.63",
			"High": "27.32",
			"Low": "26.31",
			"Close": "26.61",
			"Volume": "54585"
		},
		{
			"Date": "20091002",
			"Ticker": "A",
			"Open": "26.41",
			"High": "26.47",
			"Low": "25.95",
			"Close": "26.31",
			"Volume": "35743"
		},
		{
			"Date": "20091005",
			"Ticker": "A",
			"Open": "26.29",
			"High": "26.98",
			"Low": "26.21",
			"Close": "26.82",
			"Volume": "31912"
		},
		{
			"Date": "20091006",
			"Ticker": "A",
			"Open": "27.17",
			"High": "27.47",
			"Low": "26.92",
			"Close": "27.22",
			"Volume": "28873"
		},
		{
			"Date": "20091007",
			"Ticker": "A",
			"Open": "27.07",
			"High": "27.2",
			"Low": "26.8905",
			"Close": "27.1",
			"Volume": "15895"
		},
		{
			"Date": "20091008",
			"Ticker": "A",
			"Open": "27.5",
			"High": "27.75",
			"Low": "27.31",
			"Close": "27.4",
			"Volume": "33654"
		},
		{
			"Date": "20091009",
			"Ticker": "A",
			"Open": "27.38",
			"High": "27.54",
			"Low": "27.36",
			"Close": "27.47",
			"Volume": "20862"
		},
		{
			"Date": "20091012",
			"Ticker": "A",
			"Open": "27.59",
			"High": "27.71",
			"Low": "27.33",
			"Close": "27.46",
			"Volume": "18950"
		},
		{
			"Date": "20091013",
			"Ticker": "A",
			"Open": "27.41",
			"High": "27.53",
			"Low": "27.15",
			"Close": "27.29",
			"Volume": "14226"
		},
		{
			"Date": "20091014",
			"Ticker": "A",
			"Open": "27.68",
			"High": "27.73",
			"Low": "27.47",
			"Close": "27.59",
			"Volume": "27705"
		},
		{
			"Date": "20091015",
			"Ticker": "A",
			"Open": "27.49",
			"High": "27.665",
			"Low": "27.4",
			"Close": "27.62",
			"Volume": "28276"
		},
		{
			"Date": "20091016",
			"Ticker": "A",
			"Open": "27.42",
			"High": "27.49",
			"Low": "26.94",
			"Close": "27.21",
			"Volume": "30266"
		},
		{
			"Date": "20091019",
			"Ticker": "A",
			"Open": "27.34",
			"High": "27.55",
			"Low": "27.07",
			"Close": "27.4",
			"Volume": "20386"
		},
		{
			"Date": "20091020",
			"Ticker": "A",
			"Open": "27.31",
			"High": "27.38",
			"Low": "26.36",
			"Close": "26.47",
			"Volume": "39331"
		},
		{
			"Date": "20091021",
			"Ticker": "A",
			"Open": "26.49",
			"High": "27.2598",
			"Low": "26.42",
			"Close": "26.88",
			"Volume": "44314"
		},
		{
			"Date": "20091022",
			"Ticker": "A",
			"Open": "27.1",
			"High": "27.1",
			"Low": "26.34",
			"Close": "26.87",
			"Volume": "27662"
		},
		{
			"Date": "20091023",
			"Ticker": "A",
			"Open": "27.2",
			"High": "27.2",
			"Low": "26.04",
			"Close": "26.2",
			"Volume": "28112"
		},
		{
			"Date": "20091026",
			"Ticker": "A",
			"Open": "26.19",
			"High": "26.7",
			"Low": "25.68",
			"Close": "25.71",
			"Volume": "29056"
		},
		{
			"Date": "20091027",
			"Ticker": "A",
			"Open": "25.7",
			"High": "26.05",
			"Low": "25.54",
			"Close": "25.73",
			"Volume": "34348"
		},
		{
			"Date": "20091028",
			"Ticker": "A",
			"Open": "25.56",
			"High": "25.71",
			"Low": "25.2",
			"Close": "25.32",
			"Volume": "39358"
		},
		{
			"Date": "20091105",
			"Ticker": "A",
			"Open": "25.32",
			"High": "26.19",
			"Low": "25.3",
			"Close": "26.13",
			"Volume": "26405"
		},
		{
			"Date": "20091106",
			"Ticker": "A",
			"Open": "26.48",
			"High": "26.48",
			"Low": "25.94",
			"Close": "26.17",
			"Volume": "24434"
		},
		{
			"Date": "20091109",
			"Ticker": "A",
			"Open": "26.43",
			"High": "26.96",
			"Low": "26.35",
			"Close": "26.96",
			"Volume": "19037"
		},
		{
			"Date": "20091110",
			"Ticker": "A",
			"Open": "27.01",
			"High": "27.2",
			"Low": "26.79",
			"Close": "27",
			"Volume": "26442"
		},
		{
			"Date": "20091111",
			"Ticker": "A",
			"Open": "27.32",
			"High": "27.46",
			"Low": "27.02",
			"Close": "27.46",
			"Volume": "32347"
		},
		{
			"Date": "20091112",
			"Ticker": "A",
			"Open": "27.62",
			"High": "27.69",
			"Low": "27.2825",
			"Close": "27.43",
			"Volume": "34961"
		},
		{
			"Date": "20091113",
			"Ticker": "A",
			"Open": "27.97",
			"High": "28.89",
			"Low": "27.75",
			"Close": "28.61",
			"Volume": "62633"
		},
		{
			"Date": "20091116",
			"Ticker": "A",
			"Open": "28.25",
			"High": "29.5",
			"Low": "28.1",
			"Close": "29.37",
			"Volume": "44355"
		},
		{
			"Date": "20091117",
			"Ticker": "A",
			"Open": "29.05",
			"High": "29.7092",
			"Low": "29.05",
			"Close": "29.63",
			"Volume": "31726"
		},
		{
			"Date": "20091118",
			"Ticker": "A",
			"Open": "29.49",
			"High": "29.5",
			"Low": "29.14",
			"Close": "29.46",
			"Volume": "28067"
		},
		{
			"Date": "20091119",
			"Ticker": "A",
			"Open": "29.09",
			"High": "29.36",
			"Low": "28.67",
			"Close": "29.13",
			"Volume": "22134"
		},
		{
			"Date": "20091120",
			"Ticker": "A",
			"Open": "28.94",
			"High": "29.05",
			"Low": "28.67",
			"Close": "28.91",
			"Volume": "19779"
		},
		{
			"Date": "20091123",
			"Ticker": "A",
			"Open": "29.32",
			"High": "29.53",
			"Low": "29.1",
			"Close": "29.28",
			"Volume": "16790"
		},
		{
			"Date": "20091124",
			"Ticker": "A",
			"Open": "29.32",
			"High": "29.32",
			"Low": "28.88",
			"Close": "29.24",
			"Volume": "15502"
		},
		{
			"Date": "20091125",
			"Ticker": "A",
			"Open": "29.2",
			"High": "29.54",
			"Low": "29.2",
			"Close": "29.54",
			"Volume": "15054"
		},
		{
			"Date": "20091127",
			"Ticker": "A",
			"Open": "28.46",
			"High": "29.09",
			"Low": "28.01",
			"Close": "28.85",
			"Volume": "9224"
		},
		{
			"Date": "20091130",
			"Ticker": "A",
			"Open": "28.78",
			"High": "28.95",
			"Low": "28.555",
			"Close": "28.92",
			"Volume": "25551"
		},
		{
			"Date": "20091201",
			"Ticker": "A",
			"Open": "29.1",
			"High": "29.49",
			"Low": "29.08",
			"Close": "29.44",
			"Volume": "22685"
		},
		{
			"Date": "20091202",
			"Ticker": "A",
			"Open": "29.5",
			"High": "29.69",
			"Low": "29.35",
			"Close": "29.49",
			"Volume": "26293"
		},
		{
			"Date": "20091203",
			"Ticker": "A",
			"Open": "29.5",
			"High": "30.06",
			"Low": "29.5",
			"Close": "29.7",
			"Volume": "35836"
		},
		{
			"Date": "20091204",
			"Ticker": "A",
			"Open": "30",
			"High": "30.48",
			"Low": "29.445",
			"Close": "29.86",
			"Volume": "35369"
		},
		{
			"Date": "20091207",
			"Ticker": "A",
			"Open": "29.68",
			"High": "29.99",
			"Low": "29.66",
			"Close": "29.88",
			"Volume": "28895"
		},
		{
			"Date": "20091208",
			"Ticker": "A",
			"Open": "29.56",
			"High": "29.77",
			"Low": "29.22",
			"Close": "29.59",
			"Volume": "19153"
		},
		{
			"Date": "20091209",
			"Ticker": "A",
			"Open": "29.54",
			"High": "29.54",
			"Low": "28.98",
			"Close": "29.25",
			"Volume": "31112"
		},
		{
			"Date": "20091210",
			"Ticker": "A",
			"Open": "29.45",
			"High": "29.94",
			"Low": "29.38",
			"Close": "29.69",
			"Volume": "18353"
		},
		{
			"Date": "20091211",
			"Ticker": "A",
			"Open": "29.75",
			"High": "29.88",
			"Low": "29.56",
			"Close": "29.64",
			"Volume": "14075"
		},
		{
			"Date": "20091214",
			"Ticker": "A",
			"Open": "29.79",
			"High": "30",
			"Low": "29.72",
			"Close": "29.97",
			"Volume": "13341"
		},
		{
			"Date": "20091215",
			"Ticker": "A",
			"Open": "29.87",
			"High": "30.08",
			"Low": "29.7",
			"Close": "29.9",
			"Volume": "18719"
		},
		{
			"Date": "20091216",
			"Ticker": "A",
			"Open": "30",
			"High": "30.08",
			"Low": "29.67",
			"Close": "29.77",
			"Volume": "20507"
		},
		{
			"Date": "20091217",
			"Ticker": "A",
			"Open": "29.45",
			"High": "29.76",
			"Low": "29.34",
			"Close": "29.44",
			"Volume": "19306"
		},
		{
			"Date": "20091218",
			"Ticker": "A",
			"Open": "29.54",
			"High": "29.83",
			"Low": "29.23",
			"Close": "29.4",
			"Volume": "33034"
		},
		{
			"Date": "20091221",
			"Ticker": "A",
			"Open": "29.6",
			"High": "29.94",
			"Low": "29.3",
			"Close": "29.91",
			"Volume": "31485"
		},
		{
			"Date": "20091222",
			"Ticker": "A",
			"Open": "29.91",
			"High": "30.32",
			"Low": "29.82",
			"Close": "30.18",
			"Volume": "24818"
		},
		{
			"Date": "20091223",
			"Ticker": "A",
			"Open": "30.2",
			"High": "30.4",
			"Low": "30.15",
			"Close": "30.3",
			"Volume": "22183"
		},
		{
			"Date": "20091224",
			"Ticker": "A",
			"Open": "30.27",
			"High": "30.39",
			"Low": "30.2",
			"Close": "30.33",
			"Volume": "7567"
		},
		{
			"Date": "20091228",
			"Ticker": "A",
			"Open": "30.33",
			"High": "30.44",
			"Low": "30.23",
			"Close": "30.4",
			"Volume": "16792"
		},
		{
			"Date": "20091229",
			"Ticker": "A",
			"Open": "30.41",
			"High": "30.47",
			"Low": "30.22",
			"Close": "30.33",
			"Volume": "31071"
		},
		{
			"Date": "20091230",
			"Ticker": "A",
			"Open": "30.11",
			"High": "31.24",
			"Low": "29.92",
			"Close": "31.1",
			"Volume": "39949"
		},
		{
			"Date": "20091231",
			"Ticker": "A",
			"Open": "31.04",
			"High": "31.77",
			"Low": "30.93",
			"Close": "31.07",
			"Volume": "37371"
		},
		{
			"Date": "20100104",
			"Ticker": "A",
			"Open": "31.47",
			"High": "31.63",
			"Low": "31.1314",
			"Close": "31.3",
			"Volume": "27292"
		},
		{
			"Date": "20100105",
			"Ticker": "A",
			"Open": "31.21",
			"High": "31.22",
			"Low": "30.76",
			"Close": "30.96",
			"Volume": "29942"
		},
		{
			"Date": "20100106",
			"Ticker": "A",
			"Open": "30.85",
			"High": "31",
			"Low": "30.76",
			"Close": "30.85",
			"Volume": "23202"
		},
		{
			"Date": "20100107",
			"Ticker": "A",
			"Open": "30.78",
			"High": "30.82",
			"Low": "30.5",
			"Close": "30.81",
			"Volume": "22139"
		},
		{
			"Date": "20100108",
			"Ticker": "A",
			"Open": "30.64",
			"High": "30.85",
			"Low": "30.4",
			"Close": "30.8",
			"Volume": "26708"
		},
		{
			"Date": "20100111",
			"Ticker": "A",
			"Open": "30.88",
			"High": "31.05",
			"Low": "30.67",
			"Close": "30.82",
			"Volume": "34202"
		},
		{
			"Date": "20100112",
			"Ticker": "A",
			"Open": "30.65",
			"High": "30.65",
			"Low": "30.22",
			"Close": "30.45",
			"Volume": "20536"
		},
		{
			"Date": "20100113",
			"Ticker": "A",
			"Open": "30.47",
			"High": "30.78",
			"Low": "30.05",
			"Close": "30.69",
			"Volume": "24455"
		},
		{
			"Date": "20100114",
			"Ticker": "A",
			"Open": "30.59",
			"High": "31.24",
			"Low": "30.5",
			"Close": "31.15",
			"Volume": "44089"
		},
		{
			"Date": "20100115",
			"Ticker": "A",
			"Open": "31.22",
			"High": "31.36",
			"Low": "30.33",
			"Close": "30.43",
			"Volume": "33094"
		},
		{
			"Date": "20100119",
			"Ticker": "A",
			"Open": "30.36",
			"High": "30.83",
			"Low": "30.35",
			"Close": "30.8",
			"Volume": "25490"
		},
		{
			"Date": "20100120",
			"Ticker": "A",
			"Open": "30.53",
			"High": "30.67",
			"Low": "30.19",
			"Close": "30.63",
			"Volume": "32825"
		},
		{
			"Date": "20100121",
			"Ticker": "A",
			"Open": "31",
			"High": "31.11",
			"Low": "30.18",
			"Close": "30.52",
			"Volume": "43500"
		},
		{
			"Date": "20100122",
			"Ticker": "A",
			"Open": "30.3",
			"High": "30.35",
			"Low": "29.09",
			"Close": "29.17",
			"Volume": "30493"
		},
		{
			"Date": "20100125",
			"Ticker": "A",
			"Open": "29.42",
			"High": "29.65",
			"Low": "29.23",
			"Close": "29.45",
			"Volume": "25811"
		},
		{
			"Date": "20100126",
			"Ticker": "A",
			"Open": "29.37",
			"High": "29.5",
			"Low": "28.98",
			"Close": "29.29",
			"Volume": "19290"
		},
		{
			"Date": "20100127",
			"Ticker": "A",
			"Open": "29.2",
			"High": "29.29",
			"Low": "28.73",
			"Close": "29.17",
			"Volume": "31202"
		},
		{
			"Date": "20100128",
			"Ticker": "A",
			"Open": "29.13",
			"High": "29.37",
			"Low": "28.49",
			"Close": "28.69",
			"Volume": "35320"
		},
		{
			"Date": "20100129",
			"Ticker": "A",
			"Open": "28.93",
			"High": "29.17",
			"Low": "27.92",
			"Close": "28.03",
			"Volume": "42367"
		},
		{
			"Date": "20100201",
			"Ticker": "A",
			"Open": "28.16",
			"High": "29.32",
			"Low": "28.13",
			"Close": "29.13",
			"Volume": "40018"
		},
		{
			"Date": "20100202",
			"Ticker": "A",
			"Open": "29.22",
			"High": "29.59",
			"Low": "29.09",
			"Close": "29.5",
			"Volume": "42093"
		},
		{
			"Date": "20100203",
			"Ticker": "A",
			"Open": "29.39",
			"High": "29.89",
			"Low": "29.36",
			"Close": "29.54",
			"Volume": "43531"
		},
		{
			"Date": "20100204",
			"Ticker": "A",
			"Open": "29.3",
			"High": "29.45",
			"Low": "28.94",
			"Close": "29.07",
			"Volume": "47441"
		},
		{
			"Date": "20100205",
			"Ticker": "A",
			"Open": "28.91",
			"High": "29.26",
			"Low": "28.18",
			"Close": "29.17",
			"Volume": "68287"
		},
		{
			"Date": "20100208",
			"Ticker": "A",
			"Open": "29.21",
			"High": "29.68",
			"Low": "29.13",
			"Close": "29.2",
			"Volume": "49528"
		},
		{
			"Date": "20100209",
			"Ticker": "A",
			"Open": "29.53",
			"High": "29.72",
			"Low": "29.18",
			"Close": "29.41",
			"Volume": "36842"
		},
		{
			"Date": "20100210",
			"Ticker": "A",
			"Open": "29.46",
			"High": "29.49",
			"Low": "28.88",
			"Close": "29.25",
			"Volume": "23287"
		},
		{
			"Date": "20100211",
			"Ticker": "A",
			"Open": "29.25",
			"High": "29.61",
			"Low": "28.77",
			"Close": "29.36",
			"Volume": "49945"
		},
		{
			"Date": "20100212",
			"Ticker": "A",
			"Open": "30.65",
			"High": "30.74",
			"Low": "29.57",
			"Close": "29.98",
			"Volume": "81958"
		},
		{
			"Date": "20100216",
			"Ticker": "A",
			"Open": "30.24",
			"High": "30.34",
			"Low": "29.97",
			"Close": "30.25",
			"Volume": "46920"
		},
		{
			"Date": "20100217",
			"Ticker": "A",
			"Open": "30.36",
			"High": "30.74",
			"Low": "30.13",
			"Close": "30.63",
			"Volume": "34986"
		},
		{
			"Date": "20100218",
			"Ticker": "A",
			"Open": "30.57",
			"High": "31",
			"Low": "30.44",
			"Close": "30.98",
			"Volume": "23704"
		},
		{
			"Date": "20100219",
			"Ticker": "A",
			"Open": "30.84",
			"High": "31.27",
			"Low": "30.62",
			"Close": "31.2",
			"Volume": "29943"
		},
		{
			"Date": "20100222",
			"Ticker": "A",
			"Open": "31.29",
			"High": "31.29",
			"Low": "30.85",
			"Close": "31.15",
			"Volume": "28884"
		},
		{
			"Date": "20100223",
			"Ticker": "A",
			"Open": "31.09",
			"High": "31.16",
			"Low": "30.525",
			"Close": "30.85",
			"Volume": "31238"
		},
		{
			"Date": "20100224",
			"Ticker": "A",
			"Open": "30.97",
			"High": "31.24",
			"Low": "30.86",
			"Close": "31.23",
			"Volume": "28224"
		},
		{
			"Date": "20100225",
			"Ticker": "A",
			"Open": "30.84",
			"High": "31.13",
			"Low": "30.23",
			"Close": "31.09",
			"Volume": "34180"
		},
		{
			"Date": "20100226",
			"Ticker": "A",
			"Open": "31.17",
			"High": "31.52",
			"Low": "30.98",
			"Close": "31.46",
			"Volume": "33462"
		},
		{
			"Date": "20100301",
			"Ticker": "A",
			"Open": "31.43",
			"High": "32.13",
			"Low": "31.43",
			"Close": "32.09",
			"Volume": "33788"
		},
		{
			"Date": "20100302",
			"Ticker": "A",
			"Open": "32",
			"High": "32.54",
			"Low": "31.85",
			"Close": "32.36",
			"Volume": "43048"
		},
		{
			"Date": "20100303",
			"Ticker": "A",
			"Open": "32.37",
			"High": "32.54",
			"Low": "32.3",
			"Close": "32.44",
			"Volume": "45919"
		},
		{
			"Date": "20100304",
			"Ticker": "A",
			"Open": "32.46",
			"High": "32.46",
			"Low": "31.84",
			"Close": "32.26",
			"Volume": "43634"
		},
		{
			"Date": "20100305",
			"Ticker": "A",
			"Open": "32.83",
			"High": "33.25",
			"Low": "32.625",
			"Close": "33.16",
			"Volume": "55044"
		},
		{
			"Date": "20100308",
			"Ticker": "A",
			"Open": "33.11",
			"High": "33.15",
			"Low": "32.82",
			"Close": "33",
			"Volume": "50198"
		},
		{
			"Date": "20100309",
			"Ticker": "A",
			"Open": "32.93",
			"High": "33.33",
			"Low": "32.87",
			"Close": "33.27",
			"Volume": "50667"
		},
		{
			"Date": "20100310",
			"Ticker": "A",
			"Open": "33.2",
			"High": "33.75",
			"Low": "33.09",
			"Close": "33.66",
			"Volume": "33595"
		},
		{
			"Date": "20100311",
			"Ticker": "A",
			"Open": "33.38",
			"High": "33.6",
			"Low": "33.25",
			"Close": "33.58",
			"Volume": "28200"
		},
		{
			"Date": "20100312",
			"Ticker": "A",
			"Open": "33.62",
			"High": "33.77",
			"Low": "33.33",
			"Close": "33.42",
			"Volume": "28724"
		},
		{
			"Date": "20100315",
			"Ticker": "A",
			"Open": "33.32",
			"High": "33.5",
			"Low": "33.04",
			"Close": "33.31",
			"Volume": "25888"
		},
		{
			"Date": "20100316",
			"Ticker": "A",
			"Open": "33.39",
			"High": "33.58",
			"Low": "33.22",
			"Close": "33.42",
			"Volume": "23504"
		},
		{
			"Date": "20100317",
			"Ticker": "A",
			"Open": "33.44",
			"High": "33.64",
			"Low": "33.32",
			"Close": "33.38",
			"Volume": "28082"
		},
		{
			"Date": "20100318",
			"Ticker": "A",
			"Open": "33.3",
			"High": "33.58",
			"Low": "33.16",
			"Close": "33.46",
			"Volume": "32150"
		},
		{
			"Date": "20100319",
			"Ticker": "A",
			"Open": "33.53",
			"High": "33.66",
			"Low": "33.13",
			"Close": "33.42",
			"Volume": "42077"
		},
		{
			"Date": "20100322",
			"Ticker": "A",
			"Open": "33.26",
			"High": "33.83",
			"Low": "33.09",
			"Close": "33.72",
			"Volume": "28230"
		},
		{
			"Date": "20100323",
			"Ticker": "A",
			"Open": "33.78",
			"High": "34.2131",
			"Low": "33.66",
			"Close": "34.11",
			"Volume": "37165"
		},
		{
			"Date": "20100324",
			"Ticker": "A",
			"Open": "33.98",
			"High": "34.11",
			"Low": "33.86",
			"Close": "33.9",
			"Volume": "27120"
		},
		{
			"Date": "20100325",
			"Ticker": "A",
			"Open": "34.1",
			"High": "34.75",
			"Low": "34.07",
			"Close": "34.55",
			"Volume": "49651"
		},
		{
			"Date": "20100326",
			"Ticker": "A",
			"Open": "34.65",
			"High": "34.7",
			"Low": "34.11",
			"Close": "34.31",
			"Volume": "33660"
		},
		{
			"Date": "20100329",
			"Ticker": "A",
			"Open": "34.31",
			"High": "34.7",
			"Low": "34.28",
			"Close": "34.4",
			"Volume": "38466"
		},
		{
			"Date": "20100330",
			"Ticker": "A",
			"Open": "34.46",
			"High": "34.7",
			"Low": "34.45",
			"Close": "34.62",
			"Volume": "42777"
		},
		{
			"Date": "20100331",
			"Ticker": "A",
			"Open": "34.55",
			"High": "34.58",
			"Low": "34.285",
			"Close": "34.39",
			"Volume": "37863"
		},
		{
			"Date": "20100401",
			"Ticker": "A",
			"Open": "34.54",
			"High": "34.87",
			"Low": "34.25",
			"Close": "34.55",
			"Volume": "22210"
		},
		{
			"Date": "20100405",
			"Ticker": "A",
			"Open": "34.59",
			"High": "34.84",
			"Low": "34.54",
			"Close": "34.82",
			"Volume": "26694"
		},
		{
			"Date": "20100406",
			"Ticker": "A",
			"Open": "34.64",
			"High": "34.69",
			"Low": "34.42",
			"Close": "34.56",
			"Volume": "25028"
		},
		{
			"Date": "20100407",
			"Ticker": "A",
			"Open": "34.5",
			"High": "34.553",
			"Low": "34.13",
			"Close": "34.29",
			"Volume": "23386"
		},
		{
			"Date": "20100408",
			"Ticker": "A",
			"Open": "34.1",
			"High": "34.15",
			"Low": "33.5494",
			"Close": "33.99",
			"Volume": "30041"
		},
		{
			"Date": "20100409",
			"Ticker": "A",
			"Open": "34.04",
			"High": "34.23",
			"Low": "33.87",
			"Close": "34.23",
			"Volume": "27958"
		},
		{
			"Date": "20100412",
			"Ticker": "A",
			"Open": "34.21",
			"High": "34.33",
			"Low": "34.045",
			"Close": "34.21",
			"Volume": "29574"
		},
		{
			"Date": "20100413",
			"Ticker": "A",
			"Open": "34.15",
			"High": "34.23",
			"Low": "33.88",
			"Close": "33.9",
			"Volume": "25868"
		},
		{
			"Date": "20100414",
			"Ticker": "A",
			"Open": "33.94",
			"High": "34.6",
			"Low": "33.94",
			"Close": "34.41",
			"Volume": "83248"
		},
		{
			"Date": "20100415",
			"Ticker": "A",
			"Open": "34.45",
			"High": "35.91",
			"Low": "34.22",
			"Close": "35.63",
			"Volume": "91477"
		},
		{
			"Date": "20100416",
			"Ticker": "A",
			"Open": "35.54",
			"High": "35.9",
			"Low": "35.07",
			"Close": "35.27",
			"Volume": "57702"
		},
		{
			"Date": "20100419",
			"Ticker": "A",
			"Open": "35.34",
			"High": "35.44",
			"Low": "34.645",
			"Close": "35.16",
			"Volume": "28657"
		},
		{
			"Date": "20100420",
			"Ticker": "A",
			"Open": "35.38",
			"High": "36.475",
			"Low": "35.38",
			"Close": "36.29",
			"Volume": "49998"
		},
		{
			"Date": "20100421",
			"Ticker": "A",
			"Open": "36.18",
			"High": "36.39",
			"Low": "35.79",
			"Close": "36.13",
			"Volume": "22477"
		},
		{
			"Date": "20100422",
			"Ticker": "A",
			"Open": "35.8",
			"High": "36.48",
			"Low": "35.27",
			"Close": "36.44",
			"Volume": "33348"
		},
		{
			"Date": "20100423",
			"Ticker": "A",
			"Open": "36.39",
			"High": "36.68",
			"Low": "36.1",
			"Close": "36.64",
			"Volume": "26134"
		},
		{
			"Date": "20100426",
			"Ticker": "A",
			"Open": "36.67",
			"High": "36.99",
			"Low": "36.47",
			"Close": "36.82",
			"Volume": "28279"
		},
		{
			"Date": "20100427",
			"Ticker": "A",
			"Open": "36.6",
			"High": "36.96",
			"Low": "36.13",
			"Close": "36.22",
			"Volume": "43614"
		},
		{
			"Date": "20100428",
			"Ticker": "A",
			"Open": "36.47",
			"High": "36.85",
			"Low": "36.4",
			"Close": "36.64",
			"Volume": "31361"
		},
		{
			"Date": "20100429",
			"Ticker": "A",
			"Open": "36.93",
			"High": "37.4",
			"Low": "36.855",
			"Close": "37.23",
			"Volume": "23156"
		},
		{
			"Date": "20100430",
			"Ticker": "A",
			"Open": "37.25",
			"High": "37.43",
			"Low": "36.23",
			"Close": "36.26",
			"Volume": "30011"
		},
		{
			"Date": "20100503",
			"Ticker": "A",
			"Open": "36.5",
			"High": "36.89",
			"Low": "36.37",
			"Close": "36.77",
			"Volume": "18591"
		},
		{
			"Date": "20100504",
			"Ticker": "A",
			"Open": "36.36",
			"High": "36.36",
			"Low": "35.12",
			"Close": "35.36",
			"Volume": "32470"
		},
		{
			"Date": "20100505",
			"Ticker": "A",
			"Open": "34.92",
			"High": "35.31",
			"Low": "34.45",
			"Close": "34.76",
			"Volume": "32974"
		},
		{
			"Date": "20100506",
			"Ticker": "A",
			"Open": "34.52",
			"High": "34.82",
			"Low": "30.66",
			"Close": "33.28",
			"Volume": "64567"
		},
		{
			"Date": "20100507",
			"Ticker": "A",
			"Open": "33.09",
			"High": "33.28",
			"Low": "31.5",
			"Close": "31.87",
			"Volume": "79794"
		},
		{
			"Date": "20100510",
			"Ticker": "A",
			"Open": "33.17",
			"High": "34.22",
			"Low": "32.99",
			"Close": "34.19",
			"Volume": "40572"
		},
		{
			"Date": "20100511",
			"Ticker": "A",
			"Open": "33.68",
			"High": "34.52",
			"Low": "33.465",
			"Close": "34.07",
			"Volume": "33765"
		},
		{
			"Date": "20100512",
			"Ticker": "A",
			"Open": "34.16",
			"High": "34.99",
			"Low": "34.13",
			"Close": "34.81",
			"Volume": "28417"
		},
		{
			"Date": "20100513",
			"Ticker": "A",
			"Open": "34.83",
			"High": "35.29",
			"Low": "34.43",
			"Close": "34.78",
			"Volume": "43992"
		},
		{
			"Date": "20100514",
			"Ticker": "A",
			"Open": "34.39",
			"High": "34.71",
			"Low": "33.435",
			"Close": "33.86",
			"Volume": "33802"
		},
		{
			"Date": "20100517",
			"Ticker": "A",
			"Open": "34.02",
			"High": "34.5",
			"Low": "33.59",
			"Close": "34.19",
			"Volume": "41712"
		},
		{
			"Date": "20100518",
			"Ticker": "A",
			"Open": "34",
			"High": "34.05",
			"Low": "31.83",
			"Close": "32.07",
			"Volume": "118162"
		},
		{
			"Date": "20100519",
			"Ticker": "A",
			"Open": "32.01",
			"High": "32.75",
			"Low": "32",
			"Close": "32.59",
			"Volume": "51532"
		},
		{
			"Date": "20100520",
			"Ticker": "A",
			"Open": "31.73",
			"High": "31.94",
			"Low": "31",
			"Close": "31.04",
			"Volume": "47133"
		},
		{
			"Date": "20100521",
			"Ticker": "A",
			"Open": "30.32",
			"High": "31.79",
			"Low": "30.18",
			"Close": "31.34",
			"Volume": "59111"
		},
		{
			"Date": "20100524",
			"Ticker": "A",
			"Open": "31.24",
			"High": "31.62",
			"Low": "30.98",
			"Close": "31.4",
			"Volume": "37817"
		},
		{
			"Date": "20100525",
			"Ticker": "A",
			"Open": "30.49",
			"High": "31.25",
			"Low": "29.97",
			"Close": "31.24",
			"Volume": "38255"
		},
		{
			"Date": "20100526",
			"Ticker": "A",
			"Open": "31.51",
			"High": "32.25",
			"Low": "31.37",
			"Close": "31.49",
			"Volume": "38117"
		},
		{
			"Date": "20100527",
			"Ticker": "A",
			"Open": "32.21",
			"High": "32.78",
			"Low": "32.11",
			"Close": "32.75",
			"Volume": "26745"
		},
		{
			"Date": "20100528",
			"Ticker": "A",
			"Open": "32.76",
			"High": "32.85",
			"Low": "32.16",
			"Close": "32.36",
			"Volume": "24539"
		},
		{
			"Date": "20100601",
			"Ticker": "A",
			"Open": "32.09",
			"High": "32.37",
			"Low": "31.42",
			"Close": "31.48",
			"Volume": "27775"
		},
		{
			"Date": "20100602",
			"Ticker": "A",
			"Open": "31.7",
			"High": "32.22",
			"Low": "31.26",
			"Close": "32.22",
			"Volume": "25551"
		},
		{
			"Date": "20100603",
			"Ticker": "A",
			"Open": "32.34",
			"High": "32.55",
			"Low": "31.95",
			"Close": "32.4",
			"Volume": "26973"
		},
		{
			"Date": "20100604",
			"Ticker": "A",
			"Open": "31.61",
			"High": "31.7101",
			"Low": "30.21",
			"Close": "30.335",
			"Volume": "43342"
		},
		{
			"Date": "20100607",
			"Ticker": "A",
			"Open": "30.53",
			"High": "30.69",
			"Low": "30.07",
			"Close": "30.1",
			"Volume": "40776"
		},
		{
			"Date": "20100608",
			"Ticker": "A",
			"Open": "30.18",
			"High": "30.37",
			"Low": "29.31",
			"Close": "29.84",
			"Volume": "60028"
		},
		{
			"Date": "20100609",
			"Ticker": "A",
			"Open": "29.98",
			"High": "30.47",
			"Low": "29.4",
			"Close": "29.52",
			"Volume": "43290"
		},
		{
			"Date": "20100610",
			"Ticker": "A",
			"Open": "30.02",
			"High": "30.48",
			"Low": "29.77",
			"Close": "30.45",
			"Volume": "33616"
		},
		{
			"Date": "20100611",
			"Ticker": "A",
			"Open": "30.05",
			"High": "30.78",
			"Low": "30.05",
			"Close": "30.73",
			"Volume": "19359"
		},
		{
			"Date": "20100614",
			"Ticker": "A",
			"Open": "31.14",
			"High": "32",
			"Low": "30.96",
			"Close": "31.46",
			"Volume": "41637"
		},
		{
			"Date": "20100615",
			"Ticker": "A",
			"Open": "31.8",
			"High": "32.22",
			"Low": "31.55",
			"Close": "32.2",
			"Volume": "25583"
		},
		{
			"Date": "20100616",
			"Ticker": "A",
			"Open": "31.99",
			"High": "32.78",
			"Low": "31.79",
			"Close": "32.63",
			"Volume": "30620"
		},
		{
			"Date": "20100617",
			"Ticker": "A",
			"Open": "32.8",
			"High": "32.8",
			"Low": "32.023",
			"Close": "32.47",
			"Volume": "22711"
		},
		{
			"Date": "20100618",
			"Ticker": "A",
			"Open": "32.55",
			"High": "32.94",
			"Low": "32.4",
			"Close": "32.61",
			"Volume": "26668"
		},
		{
			"Date": "20100621",
			"Ticker": "A",
			"Open": "33.06",
			"High": "33.37",
			"Low": "32.22",
			"Close": "32.43",
			"Volume": "29298"
		},
		{
			"Date": "20100622",
			"Ticker": "A",
			"Open": "32.41",
			"High": "32.92",
			"Low": "31.99",
			"Close": "32.02",
			"Volume": "20420"
		},
		{
			"Date": "20100623",
			"Ticker": "A",
			"Open": "32.08",
			"High": "32.33",
			"Low": "31.48",
			"Close": "31.97",
			"Volume": "23055"
		},
		{
			"Date": "20100624",
			"Ticker": "A",
			"Open": "31.73",
			"High": "31.92",
			"Low": "30.64",
			"Close": "30.76",
			"Volume": "41534"
		},
		{
			"Date": "20100625",
			"Ticker": "A",
			"Open": "30.92",
			"High": "31.03",
			"Low": "30.44",
			"Close": "30.69",
			"Volume": "38338"
		},
		{
			"Date": "20100628",
			"Ticker": "A",
			"Open": "30.63",
			"High": "30.8625",
			"Low": "30.29",
			"Close": "30.58",
			"Volume": "22205"
		},
		{
			"Date": "20100629",
			"Ticker": "A",
			"Open": "30.09",
			"High": "30.19",
			"Low": "28.99",
			"Close": "29.21",
			"Volume": "47400"
		},
		{
			"Date": "20100630",
			"Ticker": "A",
			"Open": "29.16",
			"High": "29.49",
			"Low": "28.32",
			"Close": "28.43",
			"Volume": "37680"
		},
		{
			"Date": "20100701",
			"Ticker": "A",
			"Open": "28.5",
			"High": "28.61",
			"Low": "27.44",
			"Close": "28.28",
			"Volume": "50024"
		},
		{
			"Date": "20100702",
			"Ticker": "A",
			"Open": "28.36",
			"High": "28.39",
			"Low": "27.59",
			"Close": "27.79",
			"Volume": "33146"
		},
		{
			"Date": "20100706",
			"Ticker": "A",
			"Open": "28.35",
			"High": "28.57",
			"Low": "27.53",
			"Close": "27.75",
			"Volume": "37781"
		},
		{
			"Date": "20100707",
			"Ticker": "A",
			"Open": "27.72",
			"High": "28.64",
			"Low": "27.72",
			"Close": "28.57",
			"Volume": "33007"
		},
		{
			"Date": "20100708",
			"Ticker": "A",
			"Open": "28.79",
			"High": "28.95",
			"Low": "28.38",
			"Close": "28.81",
			"Volume": "36609"
		},
		{
			"Date": "20100709",
			"Ticker": "A",
			"Open": "28.88",
			"High": "28.95",
			"Low": "28.45",
			"Close": "28.65",
			"Volume": "23723"
		},
		{
			"Date": "20100712",
			"Ticker": "A",
			"Open": "28.51",
			"High": "28.72",
			"Low": "28.03",
			"Close": "28.2",
			"Volume": "37482"
		},
		{
			"Date": "20100713",
			"Ticker": "A",
			"Open": "28.47",
			"High": "28.95",
			"Low": "28.42",
			"Close": "28.75",
			"Volume": "40928"
		},
		{
			"Date": "20100714",
			"Ticker": "A",
			"Open": "28.63",
			"High": "29.25",
			"Low": "28.58",
			"Close": "28.69",
			"Volume": "42091"
		},
		{
			"Date": "20100715",
			"Ticker": "A",
			"Open": "28.62",
			"High": "28.73",
			"Low": "28.13",
			"Close": "28.4",
			"Volume": "41337"
		},
		{
			"Date": "20100716",
			"Ticker": "A",
			"Open": "28.2",
			"High": "28.29",
			"Low": "26.97",
			"Close": "27.03",
			"Volume": "63478"
		},
		{
			"Date": "20100719",
			"Ticker": "A",
			"Open": "27.29",
			"High": "27.71",
			"Low": "27.07",
			"Close": "27.54",
			"Volume": "56648"
		},
		{
			"Date": "20100720",
			"Ticker": "A",
			"Open": "27.03",
			"High": "27.55",
			"Low": "26.74",
			"Close": "27.52",
			"Volume": "43610"
		},
		{
			"Date": "20100721",
			"Ticker": "A",
			"Open": "27.68",
			"High": "28.2",
			"Low": "27.41",
			"Close": "27.58",
			"Volume": "44528"
		},
		{
			"Date": "20100722",
			"Ticker": "A",
			"Open": "27.95",
			"High": "28.87",
			"Low": "27.95",
			"Close": "28.72",
			"Volume": "36494"
		},
		{
			"Date": "20100723",
			"Ticker": "A",
			"Open": "28.56",
			"High": "29.41",
			"Low": "28.45",
			"Close": "29.3",
			"Volume": "37153"
		},
		{
			"Date": "20100726",
			"Ticker": "A",
			"Open": "29.22",
			"High": "29.67",
			"Low": "29.11",
			"Close": "29.64",
			"Volume": "21256"
		},
		{
			"Date": "20100727",
			"Ticker": "A",
			"Open": "29.73",
			"High": "29.73",
			"Low": "28.81",
			"Close": "28.87",
			"Volume": "33410"
		},
		{
			"Date": "20100728",
			"Ticker": "A",
			"Open": "28.79",
			"High": "29.27",
			"Low": "28.74",
			"Close": "28.78",
			"Volume": "31156"
		},
		{
			"Date": "20100729",
			"Ticker": "A",
			"Open": "28.97",
			"High": "29.15",
			"Low": "27.78",
			"Close": "28.15",
			"Volume": "44085"
		},
		{
			"Date": "20100730",
			"Ticker": "A",
			"Open": "27.78",
			"High": "28.17",
			"Low": "27.66",
			"Close": "27.93",
			"Volume": "36943"
		},
		{
			"Date": "20100802",
			"Ticker": "A",
			"Open": "28.35",
			"High": "28.97",
			"Low": "28.2",
			"Close": "28.82",
			"Volume": "28989"
		},
		{
			"Date": "20100803",
			"Ticker": "A",
			"Open": "28.7",
			"High": "28.73",
			"Low": "27.8",
			"Close": "27.84",
			"Volume": "42401"
		},
		{
			"Date": "20100804",
			"Ticker": "A",
			"Open": "27.86",
			"High": "28.35",
			"Low": "27.75",
			"Close": "28.29",
			"Volume": "23525"
		},
		{
			"Date": "20100805",
			"Ticker": "A",
			"Open": "28.03",
			"High": "28.63",
			"Low": "27.96",
			"Close": "28.46",
			"Volume": "20682"
		},
		{
			"Date": "20100806",
			"Ticker": "A",
			"Open": "28.18",
			"High": "28.75",
			"Low": "28.07",
			"Close": "28.73",
			"Volume": "33777"
		},
		{
			"Date": "20100809",
			"Ticker": "A",
			"Open": "28.92",
			"High": "29.87",
			"Low": "28.87",
			"Close": "29.82",
			"Volume": "36889"
		},
		{
			"Date": "20100810",
			"Ticker": "A",
			"Open": "29.44",
			"High": "29.68",
			"Low": "29.13",
			"Close": "29.46",
			"Volume": "34866"
		},
		{
			"Date": "20100811",
			"Ticker": "A",
			"Open": "28.86",
			"High": "28.9",
			"Low": "27.98",
			"Close": "28.22",
			"Volume": "28271"
		},
		{
			"Date": "20100812",
			"Ticker": "A",
			"Open": "27.65",
			"High": "27.78",
			"Low": "27.41",
			"Close": "27.53",
			"Volume": "32566"
		},
		{
			"Date": "20100813",
			"Ticker": "A",
			"Open": "27.39",
			"High": "27.85",
			"Low": "27.3",
			"Close": "27.35",
			"Volume": "24469"
		},
		{
			"Date": "20100816",
			"Ticker": "A",
			"Open": "27.11",
			"High": "27.68",
			"Low": "27",
			"Close": "27.16",
			"Volume": "33231"
		},
		{
			"Date": "20100817",
			"Ticker": "A",
			"Open": "28.87",
			"High": "29.53",
			"Low": "28.42",
			"Close": "29.28",
			"Volume": "73050"
		},
		{
			"Date": "20100819",
			"Ticker": "A",
			"Open": "29.25",
			"High": "29.26",
			"Low": "28.22",
			"Close": "28.54",
			"Volume": "33832"
		},
		{
			"Date": "20100820",
			"Ticker": "A",
			"Open": "28.26",
			"High": "28.66",
			"Low": "27.99",
			"Close": "28.56",
			"Volume": "33738"
		},
		{
			"Date": "20090821",
			"Ticker": "AA",
			"Open": "12.64",
			"High": "12.73",
			"Low": "12.49",
			"Close": "12.56",
			"Volume": "338295"
		},
		{
			"Date": "20090824",
			"Ticker": "AA",
			"Open": "12.76",
			"High": "12.83",
			"Low": "12.36",
			"Close": "12.42",
			"Volume": "307627"
		},
		{
			"Date": "20090825",
			"Ticker": "AA",
			"Open": "12.57",
			"High": "12.66",
			"Low": "12.3",
			"Close": "12.35",
			"Volume": "246836"
		},
		{
			"Date": "20090826",
			"Ticker": "AA",
			"Open": "12.28",
			"High": "12.47",
			"Low": "12.11",
			"Close": "12.26",
			"Volume": "286577"
		},
		{
			"Date": "20090827",
			"Ticker": "AA",
			"Open": "12.23",
			"High": "12.49",
			"Low": "12.02",
			"Close": "12.4",
			"Volume": "265027"
		},
		{
			"Date": "20090828",
			"Ticker": "AA",
			"Open": "12.66",
			"High": "12.77",
			"Low": "12.4",
			"Close": "12.5",
			"Volume": "203405"
		},
		{
			"Date": "20090831",
			"Ticker": "AA",
			"Open": "12.2",
			"High": "12.24",
			"Low": "12.03",
			"Close": "12.05",
			"Volume": "227035"
		},
		{
			"Date": "20090901",
			"Ticker": "AA",
			"Open": "12.05",
			"High": "12.24",
			"Low": "11.48",
			"Close": "11.59",
			"Volume": "330743"
		},
		{
			"Date": "20090902",
			"Ticker": "AA",
			"Open": "11.46",
			"High": "11.65",
			"Low": "11.29",
			"Close": "11.55",
			"Volume": "260225"
		},
		{
			"Date": "20090903",
			"Ticker": "AA",
			"Open": "11.95",
			"High": "12.06",
			"Low": "11.8299",
			"Close": "12.01",
			"Volume": "250746"
		},
		{
			"Date": "20090904",
			"Ticker": "AA",
			"Open": "12.18",
			"High": "12.22",
			"Low": "11.97",
			"Close": "12.18",
			"Volume": "177572"
		},
		{
			"Date": "20090909",
			"Ticker": "AA",
			"Open": "12.71",
			"High": "12.89",
			"Low": "12.62",
			"Close": "12.81",
			"Volume": "228106"
		},
		{
			"Date": "20090910",
			"Ticker": "AA",
			"Open": "12.8",
			"High": "12.9",
			"Low": "12.51",
			"Close": "12.84",
			"Volume": "217327"
		},
		{
			"Date": "20090911",
			"Ticker": "AA",
			"Open": "12.98",
			"High": "13.17",
			"Low": "12.86",
			"Close": "12.99",
			"Volume": "226136"
		},
		{
			"Date": "20090914",
			"Ticker": "AA",
			"Open": "12.63",
			"High": "12.95",
			"Low": "12.52",
			"Close": "12.94",
			"Volume": "203262"
		},
		{
			"Date": "20090915",
			"Ticker": "AA",
			"Open": "13.04",
			"High": "14.09",
			"Low": "13.0017",
			"Close": "13.99",
			"Volume": "498437"
		},
		{
			"Date": "20090916",
			"Ticker": "AA",
			"Open": "14.4",
			"High": "14.53",
			"Low": "13.05",
			"Close": "14.47",
			"Volume": "452153"
		},
		{
			"Date": "20090917",
			"Ticker": "AA",
			"Open": "14.5",
			"High": "14.84",
			"Low": "13.94",
			"Close": "14.05",
			"Volume": "404616"
		},
		{
			"Date": "20090918",
			"Ticker": "AA",
			"Open": "14.24",
			"High": "14.33",
			"Low": "13.86",
			"Close": "14.06",
			"Volume": "347642"
		},
		{
			"Date": "20090921",
			"Ticker": "AA",
			"Open": "13.73",
			"High": "13.99",
			"Low": "13.55",
			"Close": "13.94",
			"Volume": "219451"
		},
		{
			"Date": "20090922",
			"Ticker": "AA",
			"Open": "14.23",
			"High": "14.35",
			"Low": "14",
			"Close": "14.26",
			"Volume": "367999"
		},
		{
			"Date": "20090923",
			"Ticker": "AA",
			"Open": "14.39",
			"High": "14.62",
			"Low": "14.11",
			"Close": "14.14",
			"Volume": "241722"
		},
		{
			"Date": "20090924",
			"Ticker": "AA",
			"Open": "14.22",
			"High": "14.29",
			"Low": "13.41",
			"Close": "13.51",
			"Volume": "365988"
		},
		{
			"Date": "20090925",
			"Ticker": "AA",
			"Open": "13.36",
			"High": "13.46",
			"Low": "13",
			"Close": "13.08",
			"Volume": "302018"
		},
		{
			"Date": "20090928",
			"Ticker": "AA",
			"Open": "13.23",
			"High": "13.48",
			"Low": "13.1",
			"Close": "13.43",
			"Volume": "203827"
		},
		{
			"Date": "20090929",
			"Ticker": "AA",
			"Open": "13.56",
			"High": "13.7",
			"Low": "13.23",
			"Close": "13.31",
			"Volume": "226011"
		},
		{
			"Date": "20090930",
			"Ticker": "AA",
			"Open": "13.51",
			"High": "13.57",
			"Low": "13.02",
			"Close": "13.12",
			"Volume": "318860"
		},
		{
			"Date": "20091001",
			"Ticker": "AA",
			"Open": "13.36",
			"High": "13.62",
			"Low": "12.9",
			"Close": "12.92",
			"Volume": "517793"
		},
		{
			"Date": "20091002",
			"Ticker": "AA",
			"Open": "12.6",
			"High": "13.1",
			"Low": "12.51",
			"Close": "12.82",
			"Volume": "344827"
		},
		{
			"Date": "20091005",
			"Ticker": "AA",
			"Open": "13",
			"High": "13.49",
			"Low": "12.85",
			"Close": "13.42",
			"Volume": "321307"
		},
		{
			"Date": "20091006",
			"Ticker": "AA",
			"Open": "13.82",
			"High": "14.02",
			"Low": "13.64",
			"Close": "13.89",
			"Volume": "409203"
		},
		{
			"Date": "20091007",
			"Ticker": "AA",
			"Open": "14.04",
			"High": "14.24",
			"Low": "13.85",
			"Close": "14.2",
			"Volume": "543173"
		},
		{
			"Date": "20091008",
			"Ticker": "AA",
			"Open": "15.01",
			"High": "15.11",
			"Low": "14.29",
			"Close": "14.35",
			"Volume": "1208024"
		},
		{
			"Date": "20091009",
			"Ticker": "AA",
			"Open": "14.24",
			"High": "14.44",
			"Low": "14.11",
			"Close": "14.24",
			"Volume": "378109"
		},
		{
			"Date": "20091012",
			"Ticker": "AA",
			"Open": "14.35",
			"High": "14.46",
			"Low": "14.2",
			"Close": "14.25",
			"Volume": "271490"
		},
		{
			"Date": "20091013",
			"Ticker": "AA",
			"Open": "14.31",
			"High": "14.37",
			"Low": "14",
			"Close": "14.11",
			"Volume": "316382"
		},
		{
			"Date": "20091014",
			"Ticker": "AA",
			"Open": "14.36",
			"High": "14.38",
			"Low": "14.21",
			"Close": "14.32",
			"Volume": "289201"
		},
		{
			"Date": "20091015",
			"Ticker": "AA",
			"Open": "14.21",
			"High": "14.38",
			"Low": "14.08",
			"Close": "14.36",
			"Volume": "279387"
		},
		{
			"Date": "20091016",
			"Ticker": "AA",
			"Open": "14.28",
			"High": "14.28",
			"Low": "14",
			"Close": "14.04",
			"Volume": "296618"
		},
		{
			"Date": "20091019",
			"Ticker": "AA",
			"Open": "14.12",
			"High": "14.2",
			"Low": "14.01",
			"Close": "14.07",
			"Volume": "215704"
		},
		{
			"Date": "20091020",
			"Ticker": "AA",
			"Open": "14.2",
			"High": "14.23",
			"Low": "13.65",
			"Close": "13.79",
			"Volume": "366106"
		},
		{
			"Date": "20091021",
			"Ticker": "AA",
			"Open": "13.73",
			"High": "14.17",
			"Low": "13.68",
			"Close": "13.82",
			"Volume": "316831"
		},
		{
			"Date": "20091022",
			"Ticker": "AA",
			"Open": "13.85",
			"High": "14.15",
			"Low": "13.7",
			"Close": "14.04",
			"Volume": "245027"
		},
		{
			"Date": "20091023",
			"Ticker": "AA",
			"Open": "14.16",
			"High": "14.23",
			"Low": "13.66",
			"Close": "13.73",
			"Volume": "289307"
		},
		{
			"Date": "20091026",
			"Ticker": "AA",
			"Open": "13.78",
			"High": "14",
			"Low": "13.21",
			"Close": "13.28",
			"Volume": "309389"
		},
		{
			"Date": "20091027",
			"Ticker": "AA",
			"Open": "13.3",
			"High": "13.38",
			"Low": "12.78",
			"Close": "12.81",
			"Volume": "299080"
		},
		{
			"Date": "20091028",
			"Ticker": "AA",
			"Open": "12.75",
			"High": "12.77",
			"Low": "11.89",
			"Close": "11.93",
			"Volume": "536062"
		},
		{
			"Date": "20091105",
			"Ticker": "AA",
			"Open": "12.66",
			"High": "12.9",
			"Low": "12.61",
			"Close": "12.89",
			"Volume": "186393"
		},
		{
			"Date": "20091106",
			"Ticker": "AA",
			"Open": "12.71",
			"High": "13.1",
			"Low": "12.63",
			"Close": "12.89",
			"Volume": "197643"
		},
		{
			"Date": "20091109",
			"Ticker": "AA",
			"Open": "13.13",
			"High": "13.37",
			"Low": "13.11",
			"Close": "13.34",
			"Volume": "208096"
		},
		{
			"Date": "20091110",
			"Ticker": "AA",
			"Open": "13.27",
			"High": "13.58",
			"Low": "13.16",
			"Close": "13.47",
			"Volume": "253448"
		},
		{
			"Date": "20091111",
			"Ticker": "AA",
			"Open": "13.68",
			"High": "13.77",
			"Low": "13.35",
			"Close": "13.43",
			"Volume": "212731"
		},
		{
			"Date": "20091112",
			"Ticker": "AA",
			"Open": "13.33",
			"High": "13.65",
			"Low": "13.15",
			"Close": "13.2",
			"Volume": "223085"
		},
		{
			"Date": "20091113",
			"Ticker": "AA",
			"Open": "13.22",
			"High": "13.29",
			"Low": "13.01",
			"Close": "13.18",
			"Volume": "174425"
		},
		{
			"Date": "20091116",
			"Ticker": "AA",
			"Open": "13.36",
			"High": "13.73",
			"Low": "13.36",
			"Close": "13.61",
			"Volume": "231952"
		},
		{
			"Date": "20091117",
			"Ticker": "AA",
			"Open": "13.46",
			"High": "13.77",
			"Low": "13.32",
			"Close": "13.76",
			"Volume": "234178"
		},
		{
			"Date": "20091118",
			"Ticker": "AA",
			"Open": "13.76",
			"High": "13.8",
			"Low": "13.56",
			"Close": "13.76",
			"Volume": "206300"
		},
		{
			"Date": "20091119",
			"Ticker": "AA",
			"Open": "13.52",
			"High": "13.54",
			"Low": "13.08",
			"Close": "13.22",
			"Volume": "317893"
		},
		{
			"Date": "20091120",
			"Ticker": "AA",
			"Open": "13.04",
			"High": "13.15",
			"Low": "12.92",
			"Close": "13.13",
			"Volume": "223225"
		},
		{
			"Date": "20091123",
			"Ticker": "AA",
			"Open": "13.37",
			"High": "13.44",
			"Low": "13.02",
			"Close": "13.06",
			"Volume": "221442"
		},
		{
			"Date": "20091124",
			"Ticker": "AA",
			"Open": "13.03",
			"High": "13.06",
			"Low": "12.75",
			"Close": "12.92",
			"Volume": "317084"
		},
		{
			"Date": "20091125",
			"Ticker": "AA",
			"Open": "12.99",
			"High": "13.12",
			"Low": "12.92",
			"Close": "13",
			"Volume": "182169"
		},
		{
			"Date": "20091127",
			"Ticker": "AA",
			"Open": "12.52",
			"High": "12.8",
			"Low": "12.46",
			"Close": "12.66",
			"Volume": "155675"
		},
		{
			"Date": "20091130",
			"Ticker": "AA",
			"Open": "12.73",
			"High": "12.82",
			"Low": "12.48",
			"Close": "12.52",
			"Volume": "244137"
		},
		{
			"Date": "20091201",
			"Ticker": "AA",
			"Open": "12.75",
			"High": "12.96",
			"Low": "12.64",
			"Close": "12.8",
			"Volume": "264140"
		},
		{
			"Date": "20091202",
			"Ticker": "AA",
			"Open": "12.9",
			"High": "13.64",
			"Low": "12.89",
			"Close": "13.64",
			"Volume": "494175"
		},
		{
			"Date": "20091203",
			"Ticker": "AA",
			"Open": "13.65",
			"High": "13.65",
			"Low": "13.21",
			"Close": "13.27",
			"Volume": "334263"
		},
		{
			"Date": "20091204",
			"Ticker": "AA",
			"Open": "13.61",
			"High": "13.74",
			"Low": "12.71",
			"Close": "12.99",
			"Volume": "467771"
		},
		{
			"Date": "20091207",
			"Ticker": "AA",
			"Open": "12.91",
			"High": "13.28",
			"Low": "12.9",
			"Close": "13.05",
			"Volume": "222260"
		},
		{
			"Date": "20091208",
			"Ticker": "AA",
			"Open": "12.93",
			"High": "12.97",
			"Low": "12.79",
			"Close": "12.87",
			"Volume": "206941"
		},
		{
			"Date": "20091209",
			"Ticker": "AA",
			"Open": "12.87",
			"High": "13.1",
			"Low": "12.77",
			"Close": "13.08",
			"Volume": "252745"
		},
		{
			"Date": "20091210",
			"Ticker": "AA",
			"Open": "13.21",
			"High": "13.59",
			"Low": "13.19",
			"Close": "13.5",
			"Volume": "321248"
		},
		{
			"Date": "20091211",
			"Ticker": "AA",
			"Open": "13.8",
			"High": "14.69",
			"Low": "13.76",
			"Close": "14.61",
			"Volume": "751936"
		},
		{
			"Date": "20091214",
			"Ticker": "AA",
			"Open": "14.62",
			"High": "15",
			"Low": "14.54",
			"Close": "14.82",
			"Volume": "367498"
		},
		{
			"Date": "20091215",
			"Ticker": "AA",
			"Open": "14.57",
			"High": "14.88",
			"Low": "14.45",
			"Close": "14.68",
			"Volume": "199004"
		},
		{
			"Date": "20091216",
			"Ticker": "AA",
			"Open": "14.75",
			"High": "15.15",
			"Low": "14.75",
			"Close": "14.9",
			"Volume": "307624"
		},
		{
			"Date": "20091217",
			"Ticker": "AA",
			"Open": "14.7",
			"High": "14.8",
			"Low": "14.49",
			"Close": "14.5",
			"Volume": "203873"
		},
		{
			"Date": "20091218",
			"Ticker": "AA",
			"Open": "14.61",
			"High": "14.73",
			"Low": "14.26",
			"Close": "14.58",
			"Volume": "298588"
		},
		{
			"Date": "20091221",
			"Ticker": "AA",
			"Open": "15.14",
			"High": "15.98",
			"Low": "15.13",
			"Close": "15.73",
			"Volume": "609435"
		},
		{
			"Date": "20091222",
			"Ticker": "AA",
			"Open": "15.59",
			"High": "15.81",
			"Low": "15.51",
			"Close": "15.79",
			"Volume": "316790"
		},
		{
			"Date": "20091223",
			"Ticker": "AA",
			"Open": "15.86",
			"High": "16",
			"Low": "15.67",
			"Close": "16",
			"Volume": "261719"
		},
		{
			"Date": "20091224",
			"Ticker": "AA",
			"Open": "16.02",
			"High": "16.37",
			"Low": "16.01",
			"Close": "16.34",
			"Volume": "143272"
		},
		{
			"Date": "20091228",
			"Ticker": "AA",
			"Open": "16.49",
			"High": "16.51",
			"Low": "15.99",
			"Close": "16.1",
			"Volume": "190169"
		},
		{
			"Date": "20091229",
			"Ticker": "AA",
			"Open": "16.16",
			"High": "16.28",
			"Low": "15.96",
			"Close": "16.03",
			"Volume": "142751"
		},
		{
			"Date": "20091230",
			"Ticker": "AA",
			"Open": "15.93",
			"High": "16.35",
			"Low": "15.77",
			"Close": "16.3",
			"Volume": "183481"
		},
		{
			"Date": "20091231",
			"Ticker": "AA",
			"Open": "16.33",
			"High": "16.39",
			"Low": "16.1",
			"Close": "16.12",
			"Volume": "165002"
		},
		{
			"Date": "20100104",
			"Ticker": "AA",
			"Open": "16.47",
			"High": "16.89",
			"Low": "16.4",
			"Close": "16.65",
			"Volume": "258893"
		},
		{
			"Date": "20100105",
			"Ticker": "AA",
			"Open": "16.83",
			"High": "16.85",
			"Low": "16.03",
			"Close": "16.13",
			"Volume": "499275"
		},
		{
			"Date": "20100106",
			"Ticker": "AA",
			"Open": "16.31",
			"High": "17.06",
			"Low": "16.26",
			"Close": "16.97",
			"Volume": "467503"
		},
		{
			"Date": "20100107",
			"Ticker": "AA",
			"Open": "16.52",
			"High": "16.66",
			"Low": "16.3",
			"Close": "16.61",
			"Volume": "386415"
		},
		{
			"Date": "20100108",
			"Ticker": "AA",
			"Open": "16.46",
			"High": "17.02",
			"Low": "16.45",
			"Close": "17.02",
			"Volume": "332461"
		},
		{
			"Date": "20100111",
			"Ticker": "AA",
			"Open": "17.49",
			"High": "17.6",
			"Low": "17.13",
			"Close": "17.45",
			"Volume": "764418"
		},
		{
			"Date": "20100112",
			"Ticker": "AA",
			"Open": "16.12",
			"High": "16.25",
			"Low": "15.42",
			"Close": "15.52",
			"Volume": "1558986"
		},
		{
			"Date": "20100113",
			"Ticker": "AA",
			"Open": "15.77",
			"High": "15.99",
			"Low": "15.41",
			"Close": "15.98",
			"Volume": "586943"
		},
		{
			"Date": "20100114",
			"Ticker": "AA",
			"Open": "16",
			"High": "16.1",
			"Low": "15.79",
			"Close": "15.81",
			"Volume": "323829"
		},
		{
			"Date": "20100115",
			"Ticker": "AA",
			"Open": "15.76",
			"High": "15.85",
			"Low": "15.46",
			"Close": "15.63",
			"Volume": "334271"
		},
		{
			"Date": "20100119",
			"Ticker": "AA",
			"Open": "15.58",
			"High": "15.82",
			"Low": "15.46",
			"Close": "15.62",
			"Volume": "344253"
		},
		{
			"Date": "20100120",
			"Ticker": "AA",
			"Open": "15.42",
			"High": "15.47",
			"Low": "15.15",
			"Close": "15.23",
			"Volume": "356714"
		},
		{
			"Date": "20100121",
			"Ticker": "AA",
			"Open": "15.19",
			"High": "15.3",
			"Low": "14.22",
			"Close": "14.25",
			"Volume": "699305"
		},
		{
			"Date": "20100122",
			"Ticker": "AA",
			"Open": "14.18",
			"High": "14.18",
			"Low": "13.33",
			"Close": "13.4",
			"Volume": "844784"
		},
		{
			"Date": "20100125",
			"Ticker": "AA",
			"Open": "13.76",
			"High": "13.85",
			"Low": "13.31",
			"Close": "13.39",
			"Volume": "441903"
		},
		{
			"Date": "20100126",
			"Ticker": "AA",
			"Open": "13.45",
			"High": "13.95",
			"Low": "13.3",
			"Close": "13.54",
			"Volume": "439037"
		},
		{
			"Date": "20100127",
			"Ticker": "AA",
			"Open": "13.7",
			"High": "13.7",
			"Low": "12.96",
			"Close": "13.3",
			"Volume": "553738"
		},
		{
			"Date": "20100128",
			"Ticker": "AA",
			"Open": "13.42",
			"High": "13.47",
			"Low": "12.26",
			"Close": "12.92",
			"Volume": "537685"
		},
		{
			"Date": "20100129",
			"Ticker": "AA",
			"Open": "13.13",
			"High": "13.3",
			"Low": "12.61",
			"Close": "12.73",
			"Volume": "429498"
		},
		{
			"Date": "20100201",
			"Ticker": "AA",
			"Open": "12.99",
			"High": "13.39",
			"Low": "12.91",
			"Close": "13.36",
			"Volume": "400762"
		},
		{
			"Date": "20100202",
			"Ticker": "AA",
			"Open": "13.75",
			"High": "13.9",
			"Low": "13.52",
			"Close": "13.67",
			"Volume": "505768"
		},
		{
			"Date": "20100203",
			"Ticker": "AA",
			"Open": "13.6",
			"High": "13.89",
			"Low": "13.43",
			"Close": "13.49",
			"Volume": "360358"
		},
		{
			"Date": "20100204",
			"Ticker": "AA",
			"Open": "13.29",
			"High": "13.29",
			"Low": "12.9",
			"Close": "12.91",
			"Volume": "445871"
		},
		{
			"Date": "20100205",
			"Ticker": "AA",
			"Open": "12.91",
			"High": "13.19",
			"Low": "12.61",
			"Close": "13.18",
			"Volume": "439841"
		},
		{
			"Date": "20100208",
			"Ticker": "AA",
			"Open": "13.18",
			"High": "13.53",
			"Low": "12.93",
			"Close": "13.06",
			"Volume": "394057"
		},
		{
			"Date": "20100209",
			"Ticker": "AA",
			"Open": "13.36",
			"High": "13.5",
			"Low": "13.1",
			"Close": "13.28",
			"Volume": "440230"
		},
		{
			"Date": "20100210",
			"Ticker": "AA",
			"Open": "13.31",
			"High": "13.34",
			"Low": "13",
			"Close": "13.16",
			"Volume": "330490"
		},
		{
			"Date": "20100211",
			"Ticker": "AA",
			"Open": "13.19",
			"High": "13.65",
			"Low": "13.12",
			"Close": "13.58",
			"Volume": "342244"
		},
		{
			"Date": "20100212",
			"Ticker": "AA",
			"Open": "13.33",
			"High": "13.42",
			"Low": "13.19",
			"Close": "13.28",
			"Volume": "461584"
		},
		{
			"Date": "20100216",
			"Ticker": "AA",
			"Open": "13.53",
			"High": "13.75",
			"Low": "13.35",
			"Close": "13.74",
			"Volume": "371891"
		},
		{
			"Date": "20100217",
			"Ticker": "AA",
			"Open": "13.89",
			"High": "13.9",
			"Low": "13.51",
			"Close": "13.6",
			"Volume": "260527"
		},
		{
			"Date": "20100218",
			"Ticker": "AA",
			"Open": "13.45",
			"High": "13.66",
			"Low": "13.42",
			"Close": "13.61",
			"Volume": "275402"
		},
		{
			"Date": "20100219",
			"Ticker": "AA",
			"Open": "13.55",
			"High": "13.69",
			"Low": "13.45",
			"Close": "13.53",
			"Volume": "285754"
		},
		{
			"Date": "20100222",
			"Ticker": "AA",
			"Open": "13.68",
			"High": "13.7",
			"Low": "13.44",
			"Close": "13.54",
			"Volume": "231957"
		},
		{
			"Date": "20100223",
			"Ticker": "AA",
			"Open": "13.44",
			"High": "13.52",
			"Low": "13.05",
			"Close": "13.18",
			"Volume": "350319"
		},
		{
			"Date": "20100224",
			"Ticker": "AA",
			"Open": "13.18",
			"High": "13.29",
			"Low": "12.95",
			"Close": "13.06",
			"Volume": "362444"
		},
		{
			"Date": "20100225",
			"Ticker": "AA",
			"Open": "12.9",
			"High": "13.33",
			"Low": "12.8",
			"Close": "13.31",
			"Volume": "395519"
		},
		{
			"Date": "20100226",
			"Ticker": "AA",
			"Open": "13.36",
			"High": "13.37",
			"Low": "13.12",
			"Close": "13.3",
			"Volume": "247614"
		},
		{
			"Date": "20100301",
			"Ticker": "AA",
			"Open": "13.25",
			"High": "13.41",
			"Low": "13.19",
			"Close": "13.31",
			"Volume": "315896"
		},
		{
			"Date": "20100302",
			"Ticker": "AA",
			"Open": "13.41",
			"High": "13.52",
			"Low": "13.22",
			"Close": "13.24",
			"Volume": "325227"
		},
		{
			"Date": "20100303",
			"Ticker": "AA",
			"Open": "13.3",
			"High": "13.5",
			"Low": "13.23",
			"Close": "13.34",
			"Volume": "333070"
		},
		{
			"Date": "20100304",
			"Ticker": "AA",
			"Open": "13.36",
			"High": "13.54",
			"Low": "13.32",
			"Close": "13.43",
			"Volume": "294544"
		},
		{
			"Date": "20100305",
			"Ticker": "AA",
			"Open": "13.54",
			"High": "13.96",
			"Low": "13.49",
			"Close": "13.84",
			"Volume": "407486"
		},
		{
			"Date": "20100308",
			"Ticker": "AA",
			"Open": "14",
			"High": "14.02",
			"Low": "13.71",
			"Close": "13.78",
			"Volume": "324706"
		},
		{
			"Date": "20100309",
			"Ticker": "AA",
			"Open": "13.69",
			"High": "13.78",
			"Low": "13.6",
			"Close": "13.67",
			"Volume": "334797"
		},
		{
			"Date": "20100310",
			"Ticker": "AA",
			"Open": "13.75",
			"High": "13.77",
			"Low": "13.53",
			"Close": "13.57",
			"Volume": "320911"
		},
		{
			"Date": "20100311",
			"Ticker": "AA",
			"Open": "13.55",
			"High": "13.64",
			"Low": "13.44",
			"Close": "13.64",
			"Volume": "266185"
		},
		{
			"Date": "20100312",
			"Ticker": "AA",
			"Open": "13.75",
			"High": "13.85",
			"Low": "13.57",
			"Close": "13.6",
			"Volume": "288549"
		},
		{
			"Date": "20100315",
			"Ticker": "AA",
			"Open": "13.57",
			"High": "13.6",
			"Low": "13.35",
			"Close": "13.51",
			"Volume": "235115"
		},
		{
			"Date": "20100316",
			"Ticker": "AA",
			"Open": "13.57",
			"High": "13.8",
			"Low": "13.52",
			"Close": "13.8",
			"Volume": "308397"
		},
		{
			"Date": "20100317",
			"Ticker": "AA",
			"Open": "14.02",
			"High": "14.8",
			"Low": "14",
			"Close": "14.46",
			"Volume": "846535"
		},
		{
			"Date": "20100318",
			"Ticker": "AA",
			"Open": "14.48",
			"High": "14.82",
			"Low": "14.24",
			"Close": "14.3",
			"Volume": "484970"
		},
		{
			"Date": "20100319",
			"Ticker": "AA",
			"Open": "14.43",
			"High": "14.54",
			"Low": "14.07",
			"Close": "14.26",
			"Volume": "446355"
		},
		{
			"Date": "20100322",
			"Ticker": "AA",
			"Open": "14.06",
			"High": "14.45",
			"Low": "13.9",
			"Close": "14.34",
			"Volume": "310787"
		},
		{
			"Date": "20100323",
			"Ticker": "AA",
			"Open": "14.44",
			"High": "14.58",
			"Low": "14.24",
			"Close": "14.5",
			"Volume": "285441"
		},
		{
			"Date": "20100324",
			"Ticker": "AA",
			"Open": "14.4",
			"High": "14.5",
			"Low": "14.32",
			"Close": "14.32",
			"Volume": "352454"
		},
		{
			"Date": "20100325",
			"Ticker": "AA",
			"Open": "14.5",
			"High": "14.67",
			"Low": "14.08",
			"Close": "14.11",
			"Volume": "423804"
		},
		{
			"Date": "20100326",
			"Ticker": "AA",
			"Open": "14.285",
			"High": "14.44",
			"Low": "14.11",
			"Close": "14.27",
			"Volume": "321711"
		},
		{
			"Date": "20100329",
			"Ticker": "AA",
			"Open": "14.45",
			"High": "14.52",
			"Low": "14.33",
			"Close": "14.44",
			"Volume": "238356"
		},
		{
			"Date": "20100330",
			"Ticker": "AA",
			"Open": "14.46",
			"High": "14.51",
			"Low": "14.3063",
			"Close": "14.4",
			"Volume": "240176"
		},
		{
			"Date": "20100331",
			"Ticker": "AA",
			"Open": "14.3",
			"High": "14.44",
			"Low": "14.22",
			"Close": "14.24",
			"Volume": "233288"
		},
		{
			"Date": "20100401",
			"Ticker": "AA",
			"Open": "14.4",
			"High": "14.81",
			"Low": "14.38",
			"Close": "14.7",
			"Volume": "314982"
		},
		{
			"Date": "20100405",
			"Ticker": "AA",
			"Open": "14.57",
			"High": "14.8",
			"Low": "14.49",
			"Close": "14.73",
			"Volume": "312994"
		},
		{
			"Date": "20100406",
			"Ticker": "AA",
			"Open": "14.6",
			"High": "15.14",
			"Low": "14.56",
			"Close": "15.03",
			"Volume": "420678"
		},
		{
			"Date": "20100407",
			"Ticker": "AA",
			"Open": "15.01",
			"High": "15.15",
			"Low": "14.65",
			"Close": "14.74",
			"Volume": "317061"
		},
		{
			"Date": "20100408",
			"Ticker": "AA",
			"Open": "14.61",
			"High": "14.9",
			"Low": "14.5",
			"Close": "14.87",
			"Volume": "244217"
		},
		{
			"Date": "20100409",
			"Ticker": "AA",
			"Open": "14.7",
			"High": "14.74",
			"Low": "14.19",
			"Close": "14.39",
			"Volume": "562116"
		},
		{
			"Date": "20100412",
			"Ticker": "AA",
			"Open": "14.51",
			"High": "14.77",
			"Low": "14.45",
			"Close": "14.57",
			"Volume": "572085"
		},
		{
			"Date": "20100413",
			"Ticker": "AA",
			"Open": "14.3",
			"High": "14.39",
			"Low": "14.06",
			"Close": "14.34",
			"Volume": "1006917"
		},
		{
			"Date": "20100414",
			"Ticker": "AA",
			"Open": "14.39",
			"High": "14.47",
			"Low": "14.19",
			"Close": "14.43",
			"Volume": "351237"
		},
		{
			"Date": "20100415",
			"Ticker": "AA",
			"Open": "14.33",
			"High": "14.5",
			"Low": "14.26",
			"Close": "14.31",
			"Volume": "302926"
		},
		{
			"Date": "20100416",
			"Ticker": "AA",
			"Open": "14.22",
			"High": "14.26",
			"Low": "13.8",
			"Close": "13.91",
			"Volume": "520266"
		},
		{
			"Date": "20100419",
			"Ticker": "AA",
			"Open": "13.77",
			"High": "13.78",
			"Low": "13.49",
			"Close": "13.72",
			"Volume": "377087"
		},
		{
			"Date": "20100420",
			"Ticker": "AA",
			"Open": "13.89",
			"High": "13.98",
			"Low": "13.71",
			"Close": "13.75",
			"Volume": "237407"
		},
		{
			"Date": "20100421",
			"Ticker": "AA",
			"Open": "13.8",
			"High": "13.88",
			"Low": "13.56",
			"Close": "13.71",
			"Volume": "321215"
		},
		{
			"Date": "20100422",
			"Ticker": "AA",
			"Open": "13.62",
			"High": "13.89",
			"Low": "13.5",
			"Close": "13.85",
			"Volume": "254381"
		},
		{
			"Date": "20100423",
			"Ticker": "AA",
			"Open": "13.86",
			"High": "14.18",
			"Low": "13.76",
			"Close": "14.11",
			"Volume": "245235"
		},
		{
			"Date": "20100426",
			"Ticker": "AA",
			"Open": "14.16",
			"High": "14.29",
			"Low": "14.02",
			"Close": "14.05",
			"Volume": "217772"
		},
		{
			"Date": "20100427",
			"Ticker": "AA",
			"Open": "13.96",
			"High": "13.98",
			"Low": "13.41",
			"Close": "13.44",
			"Volume": "485827"
		},
		{
			"Date": "20100428",
			"Ticker": "AA",
			"Open": "13.47",
			"High": "13.64",
			"Low": "13.35",
			"Close": "13.57",
			"Volume": "325759"
		},
		{
			"Date": "20100429",
			"Ticker": "AA",
			"Open": "13.68",
			"High": "13.82",
			"Low": "13.6",
			"Close": "13.72",
			"Volume": "262253"
		},
		{
			"Date": "20100430",
			"Ticker": "AA",
			"Open": "13.73",
			"High": "13.78",
			"Low": "13.37",
			"Close": "13.43",
			"Volume": "293020"
		},
		{
			"Date": "20100503",
			"Ticker": "AA",
			"Open": "13.5",
			"High": "13.54",
			"Low": "12.97",
			"Close": "13.15",
			"Volume": "456021"
		},
		{
			"Date": "20100504",
			"Ticker": "AA",
			"Open": "12.94",
			"High": "12.94",
			"Low": "12.48",
			"Close": "12.58",
			"Volume": "552558"
		},
		{
			"Date": "20100505",
			"Ticker": "AA",
			"Open": "12.31",
			"High": "12.8",
			"Low": "12.09",
			"Close": "12.46",
			"Volume": "418459"
		},
		{
			"Date": "20100506",
			"Ticker": "AA",
			"Open": "12.34",
			"High": "12.64",
			"Low": "11.25",
			"Close": "11.94",
			"Volume": "590920"
		},
		{
			"Date": "20100507",
			"Ticker": "AA",
			"Open": "12.13",
			"High": "12.38",
			"Low": "11.72",
			"Close": "12",
			"Volume": "727928"
		},
		{
			"Date": "20100510",
			"Ticker": "AA",
			"Open": "12.53",
			"High": "12.66",
			"Low": "12.38",
			"Close": "12.59",
			"Volume": "389133"
		},
		{
			"Date": "20100511",
			"Ticker": "AA",
			"Open": "12.21",
			"High": "12.41",
			"Low": "12.07",
			"Close": "12.13",
			"Volume": "371967"
		},
		{
			"Date": "20100512",
			"Ticker": "AA",
			"Open": "12.2",
			"High": "12.5396",
			"Low": "12.16",
			"Close": "12.46",
			"Volume": "312240"
		},
		{
			"Date": "20100513",
			"Ticker": "AA",
			"Open": "12.61",
			"High": "13.24",
			"Low": "12.59",
			"Close": "12.8",
			"Volume": "456895"
		},
		{
			"Date": "20100514",
			"Ticker": "AA",
			"Open": "12.66",
			"High": "12.66",
			"Low": "12.22",
			"Close": "12.36",
			"Volume": "401899"
		},
		{
			"Date": "20100517",
			"Ticker": "AA",
			"Open": "12.29",
			"High": "12.33",
			"Low": "11.8",
			"Close": "12.1",
			"Volume": "388107"
		},
		{
			"Date": "20100518",
			"Ticker": "AA",
			"Open": "12.25",
			"High": "12.41",
			"Low": "11.8",
			"Close": "11.82",
			"Volume": "399788"
		},
		{
			"Date": "20100519",
			"Ticker": "AA",
			"Open": "11.75",
			"High": "11.98",
			"Low": "11.53",
			"Close": "11.78",
			"Volume": "450912"
		},
		{
			"Date": "20100520",
			"Ticker": "AA",
			"Open": "11.47",
			"High": "11.63",
			"Low": "11.01",
			"Close": "11.07",
			"Volume": "598487"
		},
		{
			"Date": "20100521",
			"Ticker": "AA",
			"Open": "10.89",
			"High": "11.45",
			"Low": "10.8",
			"Close": "11.35",
			"Volume": "436785"
		},
		{
			"Date": "20100524",
			"Ticker": "AA",
			"Open": "11.31",
			"High": "11.42",
			"Low": "11.07",
			"Close": "11.09",
			"Volume": "222848"
		},
		{
			"Date": "20100525",
			"Ticker": "AA",
			"Open": "10.6",
			"High": "11.35",
			"Low": "10.56",
			"Close": "11.3",
			"Volume": "485857"
		},
		{
			"Date": "20100526",
			"Ticker": "AA",
			"Open": "11.64",
			"High": "11.68",
			"Low": "11.2",
			"Close": "11.25",
			"Volume": "347645"
		},
		{
			"Date": "20100527",
			"Ticker": "AA",
			"Open": "11.62",
			"High": "11.84",
			"Low": "11.27",
			"Close": "11.82",
			"Volume": "256716"
		},
		{
			"Date": "20100528",
			"Ticker": "AA",
			"Open": "11.79",
			"High": "11.79",
			"Low": "11.5419",
			"Close": "11.64",
			"Volume": "210013"
		},
		{
			"Date": "20100601",
			"Ticker": "AA",
			"Open": "11.43",
			"High": "11.68",
			"Low": "11.18",
			"Close": "11.19",
			"Volume": "233952"
		},
		{
			"Date": "20100602",
			"Ticker": "AA",
			"Open": "11.29",
			"High": "11.49",
			"Low": "11.12",
			"Close": "11.48",
			"Volume": "262002"
		},
		{
			"Date": "20100603",
			"Ticker": "AA",
			"Open": "11.6",
			"High": "11.6",
			"Low": "11.12",
			"Close": "11.37",
			"Volume": "256174"
		},
		{
			"Date": "20100604",
			"Ticker": "AA",
			"Open": "11.04",
			"High": "11.26",
			"Low": "10.81",
			"Close": "10.84",
			"Volume": "304187"
		},
		{
			"Date": "20100607",
			"Ticker": "AA",
			"Open": "10.87",
			"High": "10.94",
			"Low": "10.5",
			"Close": "10.51",
			"Volume": "283628"
		},
		{
			"Date": "20100608",
			"Ticker": "AA",
			"Open": "10.55",
			"High": "10.8461",
			"Low": "10.49",
			"Close": "10.76",
			"Volume": "279544"
		},
		{
			"Date": "20100609",
			"Ticker": "AA",
			"Open": "10.93",
			"High": "11.11",
			"Low": "10.76",
			"Close": "10.8",
			"Volume": "261317"
		},
		{
			"Date": "20100610",
			"Ticker": "AA",
			"Open": "11.02",
			"High": "11.26",
			"Low": "11.01",
			"Close": "11.25",
			"Volume": "224594"
		},
		{
			"Date": "20100611",
			"Ticker": "AA",
			"Open": "11.15",
			"High": "11.39",
			"Low": "11.1",
			"Close": "11.36",
			"Volume": "183371"
		},
		{
			"Date": "20100614",
			"Ticker": "AA",
			"Open": "11.55",
			"High": "11.68",
			"Low": "11.31",
			"Close": "11.34",
			"Volume": "178324"
		},
		{
			"Date": "20100615",
			"Ticker": "AA",
			"Open": "11.47",
			"High": "11.62",
			"Low": "11.42",
			"Close": "11.59",
			"Volume": "220405"
		},
		{
			"Date": "20100616",
			"Ticker": "AA",
			"Open": "11.46",
			"High": "11.52",
			"Low": "11.35",
			"Close": "11.41",
			"Volume": "164565"
		},
		{
			"Date": "20100617",
			"Ticker": "AA",
			"Open": "11.45",
			"High": "11.4528",
			"Low": "11.09",
			"Close": "11.18",
			"Volume": "237833"
		},
		{
			"Date": "20100618",
			"Ticker": "AA",
			"Open": "11.19",
			"High": "11.28",
			"Low": "11.02",
			"Close": "11.11",
			"Volume": "214299"
		},
		{
			"Date": "20100621",
			"Ticker": "AA",
			"Open": "11.43",
			"High": "12.12",
			"Low": "11.42",
			"Close": "11.72",
			"Volume": "632612"
		},
		{
			"Date": "20100622",
			"Ticker": "AA",
			"Open": "11.76",
			"High": "11.8",
			"Low": "11.25",
			"Close": "11.29",
			"Volume": "318267"
		},
		{
			"Date": "20100623",
			"Ticker": "AA",
			"Open": "11.4",
			"High": "11.505",
			"Low": "11.18",
			"Close": "11.43",
			"Volume": "319541"
		},
		{
			"Date": "20100624",
			"Ticker": "AA",
			"Open": "11.31",
			"High": "11.37",
			"Low": "11.07",
			"Close": "11.11",
			"Volume": "252436"
		},
		{
			"Date": "20100625",
			"Ticker": "AA",
			"Open": "11.17",
			"High": "11.28",
			"Low": "10.99",
			"Close": "11.23",
			"Volume": "286687"
		},
		{
			"Date": "20100628",
			"Ticker": "AA",
			"Open": "11.2",
			"High": "11.27",
			"Low": "11",
			"Close": "11.03",
			"Volume": "191069"
		},
		{
			"Date": "20100629",
			"Ticker": "AA",
			"Open": "10.73",
			"High": "10.76",
			"Low": "10.28",
			"Close": "10.34",
			"Volume": "323843"
		},
		{
			"Date": "20100630",
			"Ticker": "AA",
			"Open": "10.38",
			"High": "10.55",
			"Low": "10.01",
			"Close": "10.06",
			"Volume": "344604"
		},
		{
			"Date": "20100701",
			"Ticker": "AA",
			"Open": "10.1",
			"High": "10.26",
			"Low": "9.81",
			"Close": "10.05",
			"Volume": "322111"
		},
		{
			"Date": "20100702",
			"Ticker": "AA",
			"Open": "10.18",
			"High": "10.18",
			"Low": "9.88",
			"Close": "10",
			"Volume": "154945"
		},
		{
			"Date": "20100706",
			"Ticker": "AA",
			"Open": "10.36",
			"High": "10.39",
			"Low": "10.1",
			"Close": "10.21",
			"Volume": "294443"
		},
		{
			"Date": "20100707",
			"Ticker": "AA",
			"Open": "10.24",
			"High": "10.55",
			"Low": "10.2",
			"Close": "10.55",
			"Volume": "217702"
		},
		{
			"Date": "20100708",
			"Ticker": "AA",
			"Open": "10.72",
			"High": "10.75",
			"Low": "10.4689",
			"Close": "10.72",
			"Volume": "210155"
		},
		{
			"Date": "20100709",
			"Ticker": "AA",
			"Open": "10.74",
			"High": "10.97",
			"Low": "10.67",
			"Close": "10.94",
			"Volume": "210494"
		},
		{
			"Date": "20100712",
			"Ticker": "AA",
			"Open": "11",
			"High": "11",
			"Low": "10.68",
			"Close": "10.87",
			"Volume": "391034"
		},
		{
			"Date": "20100713",
			"Ticker": "AA",
			"Open": "11.32",
			"High": "11.34",
			"Low": "10.87",
			"Close": "11",
			"Volume": "585630"
		},
		{
			"Date": "20100714",
			"Ticker": "AA",
			"Open": "11.01",
			"High": "11.11",
			"Low": "10.82",
			"Close": "10.91",
			"Volume": "258446"
		},
		{
			"Date": "20100715",
			"Ticker": "AA",
			"Open": "10.95",
			"High": "10.95",
			"Low": "10.61",
			"Close": "10.84",
			"Volume": "233940"
		},
		{
			"Date": "20100716",
			"Ticker": "AA",
			"Open": "10.72",
			"High": "10.75",
			"Low": "10.41",
			"Close": "10.41",
			"Volume": "282508"
		},
		{
			"Date": "20100719",
			"Ticker": "AA",
			"Open": "10.5",
			"High": "10.68",
			"Low": "10.31",
			"Close": "10.58",
			"Volume": "267170"
		},
		{
			"Date": "20100720",
			"Ticker": "AA",
			"Open": "10.4",
			"High": "10.87",
			"Low": "10.32",
			"Close": "10.85",
			"Volume": "289730"
		},
		{
			"Date": "20100721",
			"Ticker": "AA",
			"Open": "10.95",
			"High": "11.01",
			"Low": "10.53",
			"Close": "10.59",
			"Volume": "250893"
		},
		{
			"Date": "20100722",
			"Ticker": "AA",
			"Open": "10.8",
			"High": "10.99",
			"Low": "10.73",
			"Close": "10.82",
			"Volume": "258437"
		},
		{
			"Date": "20100723",
			"Ticker": "AA",
			"Open": "10.87",
			"High": "11.12",
			"Low": "10.67",
			"Close": "11.05",
			"Volume": "250988"
		},
		{
			"Date": "20100726",
			"Ticker": "AA",
			"Open": "11.14",
			"High": "11.37",
			"Low": "11.01",
			"Close": "11.23",
			"Volume": "264268"
		},
		{
			"Date": "20100727",
			"Ticker": "AA",
			"Open": "11.35",
			"High": "11.42",
			"Low": "11.11",
			"Close": "11.21",
			"Volume": "244525"
		},
		{
			"Date": "20100728",
			"Ticker": "AA",
			"Open": "11.14",
			"High": "11.28",
			"Low": "10.96",
			"Close": "11.04",
			"Volume": "187010"
		},
		{
			"Date": "20100729",
			"Ticker": "AA",
			"Open": "11.1",
			"High": "11.2",
			"Low": "10.87",
			"Close": "11.02",
			"Volume": "144207"
		},
		{
			"Date": "20100730",
			"Ticker": "AA",
			"Open": "10.95",
			"High": "11.28",
			"Low": "10.86",
			"Close": "11.17",
			"Volume": "226488"
		},
		{
			"Date": "20100802",
			"Ticker": "AA",
			"Open": "11.35",
			"High": "11.73",
			"Low": "11.33",
			"Close": "11.71",
			"Volume": "259331"
		},
		{
			"Date": "20100803",
			"Ticker": "AA",
			"Open": "11.66",
			"High": "11.78",
			"Low": "11.53",
			"Close": "11.56",
			"Volume": "283622"
		},
		{
			"Date": "20100804",
			"Ticker": "AA",
			"Open": "11.6",
			"High": "11.6",
			"Low": "11.38",
			"Close": "11.52",
			"Volume": "218948"
		},
		{
			"Date": "20100805",
			"Ticker": "AA",
			"Open": "11.45",
			"High": "11.63",
			"Low": "11.39",
			"Close": "11.58",
			"Volume": "155604"
		},
		{
			"Date": "20100806",
			"Ticker": "AA",
			"Open": "11.45",
			"High": "11.73",
			"Low": "11.45",
			"Close": "11.59",
			"Volume": "175617"
		},
		{
			"Date": "20100809",
			"Ticker": "AA",
			"Open": "11.62",
			"High": "11.75",
			"Low": "11.58",
			"Close": "11.66",
			"Volume": "145544"
		},
		{
			"Date": "20100810",
			"Ticker": "AA",
			"Open": "11.43",
			"High": "11.49",
			"Low": "11.18",
			"Close": "11.35",
			"Volume": "264545"
		},
		{
			"Date": "20100811",
			"Ticker": "AA",
			"Open": "11.11",
			"High": "11.13",
			"Low": "10.62",
			"Close": "10.66",
			"Volume": "334560"
		},
		{
			"Date": "20100812",
			"Ticker": "AA",
			"Open": "10.55",
			"High": "10.9",
			"Low": "10.47",
			"Close": "10.7295",
			"Volume": "194741"
		},
		{
			"Date": "20100813",
			"Ticker": "AA",
			"Open": "10.7",
			"High": "10.79",
			"Low": "10.575",
			"Close": "10.64",
			"Volume": "154397"
		},
		{
			"Date": "20100816",
			"Ticker": "AA",
			"Open": "10.56",
			"High": "10.69",
			"Low": "10.5",
			"Close": "10.6",
			"Volume": "145830"
		},
		{
			"Date": "20100817",
			"Ticker": "AA",
			"Open": "10.71",
			"High": "11.05",
			"Low": "10.69",
			"Close": "10.95",
			"Volume": "228152"
		},
		{
			"Date": "20100819",
			"Ticker": "AA",
			"Open": "10.86",
			"High": "10.925",
			"Low": "10.5",
			"Close": "10.66",
			"Volume": "264198"
		},
		{
			"Date": "20100820",
			"Ticker": "AA",
			"Open": "10.54",
			"High": "10.59",
			"Low": "10.45",
			"Close": "10.57",
			"Volume": "168391"
		},
		{
			"Date": "20090821",
			"Ticker": "AAPL",
			"Open": "167.81",
			"High": "169.37",
			"Low": "166.8",
			"Close": "169.22",
			"Volume": "148597"
		},
		{
			"Date": "20090824",
			"Ticker": "AAPL",
			"Open": "170",
			"High": "170.71",
			"Low": "168.27",
			"Close": "169.06",
			"Volume": "145331"
		},
		{
			"Date": "20090825",
			"Ticker": "AAPL",
			"Open": "169.43",
			"High": "170.94",
			"Low": "169.13",
			"Close": "169.4",
			"Volume": "115840"
		},
		{
			"Date": "20090826",
			"Ticker": "AAPL",
			"Open": "168.94",
			"High": "169.55",
			"Low": "166.76",
			"Close": "167.41",
			"Volume": "108570"
		},
		{
			"Date": "20090827",
			"Ticker": "AAPL",
			"Open": "168.59",
			"High": "169.57",
			"Low": "164.83",
			"Close": "169.45",
			"Volume": "160421"
		},
		{
			"Date": "20090828",
			"Ticker": "AAPL",
			"Open": "172.06",
			"High": "172.49",
			"Low": "168.53",
			"Close": "170.05",
			"Volume": "162092"
		},
		{
			"Date": "20090831",
			"Ticker": "AAPL",
			"Open": "168.09",
			"High": "168.85",
			"Low": "166.5",
			"Close": "168.21",
			"Volume": "111264"
		},
		{
			"Date": "20090901",
			"Ticker": "AAPL",
			"Open": "168.02",
			"High": "170",
			"Low": "164.94",
			"Close": "165.298",
			"Volume": "167509"
		},
		{
			"Date": "20090902",
			"Ticker": "AAPL",
			"Open": "164.5",
			"High": "167.61",
			"Low": "164.11",
			"Close": "165.18",
			"Volume": "130143"
		},
		{
			"Date": "20090903",
			"Ticker": "AAPL",
			"Open": "166.52",
			"High": "167.1",
			"Low": "165",
			"Close": "166.55",
			"Volume": "105036"
		},
		{
			"Date": "20090904",
			"Ticker": "AAPL",
			"Open": "167.2",
			"High": "170.7",
			"Low": "167.09",
			"Close": "170.31",
			"Volume": "133795"
		},
		{
			"Date": "20090909",
			"Ticker": "AAPL",
			"Open": "172.72",
			"High": "174.47",
			"Low": "169.7",
			"Close": "171.14",
			"Volume": "289746"
		},
		{
			"Date": "20090910",
			"Ticker": "AAPL",
			"Open": "172.03",
			"High": "173.25",
			"Low": "170.81",
			"Close": "172.56",
			"Volume": "175404"
		},
		{
			"Date": "20090911",
			"Ticker": "AAPL",
			"Open": "172.96",
			"High": "173.18",
			"Low": "170.87",
			"Close": "172.16",
			"Volume": "124628"
		},
		{
			"Date": "20090914",
			"Ticker": "AAPL",
			"Open": "170.85",
			"High": "173.9",
			"Low": "170.25",
			"Close": "173.72",
			"Volume": "115003"
		},
		{
			"Date": "20090915",
			"Ticker": "AAPL",
			"Open": "174.04",
			"High": "175.65",
			"Low": "173.59",
			"Close": "175.16",
			"Volume": "152310"
		},
		{
			"Date": "20090916",
			"Ticker": "AAPL",
			"Open": "178",
			"High": "182.75",
			"Low": "177.88",
			"Close": "181.87",
			"Volume": "269293"
		},
		{
			"Date": "20090917",
			"Ticker": "AAPL",
			"Open": "181.99",
			"High": "186.79",
			"Low": "181.97",
			"Close": "184.55",
			"Volume": "289489"
		},
		{
			"Date": "20090918",
			"Ticker": "AAPL",
			"Open": "185.9",
			"High": "186.55",
			"Low": "184.76",
			"Close": "185.02",
			"Volume": "214909"
		},
		{
			"Date": "20090921",
			"Ticker": "AAPL",
			"Open": "184.44",
			"High": "185.16",
			"Low": "181.62",
			"Close": "184.02",
			"Volume": "156327"
		},
		{
			"Date": "20090922",
			"Ticker": "AAPL",
			"Open": "185.1",
			"High": "185.38",
			"Low": "182.85",
			"Close": "184.48",
			"Volume": "127487"
		},
		{
			"Date": "20090923",
			"Ticker": "AAPL",
			"Open": "185.35",
			"High": "188.9",
			"Low": "185.03",
			"Close": "185.5",
			"Volume": "212157"
		},
		{
			"Date": "20090924",
			"Ticker": "AAPL",
			"Open": "187.28",
			"High": "187.7",
			"Low": "182.77",
			"Close": "183.82",
			"Volume": "196742"
		},
		{
			"Date": "20090925",
			"Ticker": "AAPL",
			"Open": "182.13",
			"High": "185.5",
			"Low": "181.44",
			"Close": "182.37",
			"Volume": "159102"
		},
		{
			"Date": "20090928",
			"Ticker": "AAPL",
			"Open": "183.83",
			"High": "186.68",
			"Low": "183.33",
			"Close": "186.1519",
			"Volume": "120588"
		},
		{
			"Date": "20090929",
			"Ticker": "AAPL",
			"Open": "186.66",
			"High": "187.4",
			"Low": "184.31",
			"Close": "185.38",
			"Volume": "123351"
		},
		{
			"Date": "20090930",
			"Ticker": "AAPL",
			"Open": "186.04",
			"High": "186.45",
			"Low": "182.6127",
			"Close": "185.35",
			"Volume": "192708"
		},
		{
			"Date": "20091001",
			"Ticker": "AAPL",
			"Open": "185.49",
			"High": "186.22",
			"Low": "180.7",
			"Close": "180.8599",
			"Volume": "187396"
		},
		{
			"Date": "20091002",
			"Ticker": "AAPL",
			"Open": "181.38",
			"High": "185.94",
			"Low": "181.35",
			"Close": "184.9",
			"Volume": "197655"
		},
		{
			"Date": "20091005",
			"Ticker": "AAPL",
			"Open": "186.2",
			"High": "186.86",
			"Low": "184.2701",
			"Close": "186.024",
			"Volume": "150152"
		},
		{
			"Date": "20091006",
			"Ticker": "AAPL",
			"Open": "187.73",
			"High": "190.01",
			"Low": "187.3",
			"Close": "190.01",
			"Volume": "216101"
		},
		{
			"Date": "20091007",
			"Ticker": "AAPL",
			"Open": "189.82",
			"High": "190.55",
			"Low": "189.032",
			"Close": "190.25",
			"Volume": "166309"
		},
		{
			"Date": "20091008",
			"Ticker": "AAPL",
			"Open": "190.8",
			"High": "191.45",
			"Low": "188.89",
			"Close": "189.27",
			"Volume": "156503"
		},
		{
			"Date": "20091009",
			"Ticker": "AAPL",
			"Open": "188.9",
			"High": "190.7",
			"Low": "188.62",
			"Close": "190.47",
			"Volume": "104783"
		},
		{
			"Date": "20091012",
			"Ticker": "AAPL",
			"Open": "190.97",
			"High": "191.51",
			"Low": "189.64",
			"Close": "190.81",
			"Volume": "102911"
		},
		{
			"Date": "20091013",
			"Ticker": "AAPL",
			"Open": "190.58",
			"High": "191.17",
			"Low": "189.7",
			"Close": "190.02",
			"Volume": "124292"
		},
		{
			"Date": "20091014",
			"Ticker": "AAPL",
			"Open": "192.2",
			"High": "192.32",
			"Low": "190.23",
			"Close": "191.29",
			"Volume": "134203"
		},
		{
			"Date": "20091015",
			"Ticker": "AAPL",
			"Open": "189.6",
			"High": "190.92",
			"Low": "189.53",
			"Close": "190.56",
			"Volume": "133412"
		},
		{
			"Date": "20091016",
			"Ticker": "AAPL",
			"Open": "189.25",
			"High": "190.36",
			"Low": "187.84",
			"Close": "188.05",
			"Volume": "154080"
		},
		{
			"Date": "20091019",
			"Ticker": "AAPL",
			"Open": "187.84",
			"High": "190",
			"Low": "185.55",
			"Close": "189.86",
			"Volume": "336510"
		},
		{
			"Date": "20091020",
			"Ticker": "AAPL",
			"Open": "200.47",
			"High": "201.75",
			"Low": "197.85",
			"Close": "198.76",
			"Volume": "407514"
		},
		{
			"Date": "20091021",
			"Ticker": "AAPL",
			"Open": "199.62",
			"High": "208.7099",
			"Low": "199.23",
			"Close": "204.92",
			"Volume": "426330"
		},
		{
			"Date": "20091022",
			"Ticker": "AAPL",
			"Open": "204.52",
			"High": "207.85",
			"Low": "202.51",
			"Close": "205.2",
			"Volume": "282639"
		},
		{
			"Date": "20091023",
			"Ticker": "AAPL",
			"Open": "205.74",
			"High": "205.8",
			"Low": "203.23",
			"Close": "203.94",
			"Volume": "150280"
		},
		{
			"Date": "20091026",
			"Ticker": "AAPL",
			"Open": "203.71",
			"High": "206.75",
			"Low": "200.1",
			"Close": "202.48",
			"Volume": "172977"
		},
		{
			"Date": "20091027",
			"Ticker": "AAPL",
			"Open": "201.64",
			"High": "202.81",
			"Low": "196.45",
			"Close": "197.37",
			"Volume": "270196"
		},
		{
			"Date": "20091028",
			"Ticker": "AAPL",
			"Open": "197.36",
			"High": "198.02",
			"Low": "191.1",
			"Close": "192.4",
			"Volume": "292280"
		},
		{
			"Date": "20091105",
			"Ticker": "AAPL",
			"Open": "192.7",
			"High": "195",
			"Low": "191.82",
			"Close": "194.0301",
			"Volume": "137472"
		},
		{
			"Date": "20091106",
			"Ticker": "AAPL",
			"Open": "193",
			"High": "195.19",
			"Low": "192.4",
			"Close": "194.34",
			"Volume": "105439"
		},
		{
			"Date": "20091109",
			"Ticker": "AAPL",
			"Open": "196.95",
			"High": "201.9",
			"Low": "196.26",
			"Close": "201.46",
			"Volume": "188876"
		},
		{
			"Date": "20091110",
			"Ticker": "AAPL",
			"Open": "201.07",
			"High": "204.98",
			"Low": "201.01",
			"Close": "202.98",
			"Volume": "143283"
		},
		{
			"Date": "20091111",
			"Ticker": "AAPL",
			"Open": "204.63",
			"High": "205",
			"Low": "201.83",
			"Close": "203.25",
			"Volume": "158599"
		},
		{
			"Date": "20091113",
			"Ticker": "AAPL",
			"Open": "202.97",
			"High": "204.83",
			"Low": "202.07",
			"Close": "204.45",
			"Volume": "122618"
		},
		{
			"Date": "20091116",
			"Ticker": "AAPL",
			"Open": "205.44",
			"High": "208",
			"Low": "205.01",
			"Close": "206.63",
			"Volume": "173287"
		},
		{
			"Date": "20091117",
			"Ticker": "AAPL",
			"Open": "206.07",
			"High": "207.44",
			"Low": "205",
			"Close": "207",
			"Volume": "141611"
		},
		{
			"Date": "20091118",
			"Ticker": "AAPL",
			"Open": "206.26",
			"High": "207",
			"Low": "204",
			"Close": "205.96",
			"Volume": "133685"
		},
		{
			"Date": "20091119",
			"Ticker": "AAPL",
			"Open": "204.51",
			"High": "204.61",
			"Low": "199.8",
			"Close": "200.51",
			"Volume": "193687"
		},
		{
			"Date": "20091120",
			"Ticker": "AAPL",
			"Open": "198.33",
			"High": "200.39",
			"Low": "197.76",
			"Close": "199.92",
			"Volume": "145317"
		},
		{
			"Date": "20091123",
			"Ticker": "AAPL",
			"Open": "203.12",
			"High": "206",
			"Low": "202.95",
			"Close": "205.88",
			"Volume": "169705"
		},
		{
			"Date": "20091124",
			"Ticker": "AAPL",
			"Open": "205.21",
			"High": "205.88",
			"Low": "202.9",
			"Close": "204.44",
			"Volume": "113727"
		},
		{
			"Date": "20091125",
			"Ticker": "AAPL",
			"Open": "205.5",
			"High": "205.65",
			"Low": "203.76",
			"Close": "204.19",
			"Volume": "102374"
		},
		{
			"Date": "20091127",
			"Ticker": "AAPL",
			"Open": "199.1",
			"High": "202.96",
			"Low": "198.37",
			"Close": "200.59",
			"Volume": "105448"
		},
		{
			"Date": "20091130",
			"Ticker": "AAPL",
			"Open": "200.91",
			"High": "201.68",
			"Low": "198.77",
			"Close": "199.91",
			"Volume": "151734"
		},
		{
			"Date": "20091201",
			"Ticker": "AAPL",
			"Open": "202.25",
			"High": "202.77",
			"Low": "196.83",
			"Close": "196.97",
			"Volume": "166343"
		},
		{
			"Date": "20091202",
			"Ticker": "AAPL",
			"Open": "199.05",
			"High": "201.42",
			"Low": "195.75",
			"Close": "196.23",
			"Volume": "255449"
		},
		{
			"Date": "20091203",
			"Ticker": "AAPL",
			"Open": "197.87",
			"High": "198.98",
			"Low": "196.27",
			"Close": "196.48",
			"Volume": "160256"
		},
		{
			"Date": "20091204",
			"Ticker": "AAPL",
			"Open": "199.7",
			"High": "199.88",
			"Low": "190.28",
			"Close": "193.32",
			"Volume": "295395"
		},
		{
			"Date": "20091207",
			"Ticker": "AAPL",
			"Open": "193.32",
			"High": "193.77",
			"Low": "188.68",
			"Close": "188.95",
			"Volume": "255270"
		},
		{
			"Date": "20091208",
			"Ticker": "AAPL",
			"Open": "189.04",
			"High": "192.35",
			"Low": "188.7",
			"Close": "189.87",
			"Volume": "246570"
		},
		{
			"Date": "20091209",
			"Ticker": "AAPL",
			"Open": "191.25",
			"High": "198.16",
			"Low": "190.31",
			"Close": "197.8",
			"Volume": "244564"
		},
		{
			"Date": "20091210",
			"Ticker": "AAPL",
			"Open": "199.69",
			"High": "199.7",
			"Low": "196.12",
			"Close": "196.43",
			"Volume": "174881"
		},
		{
			"Date": "20091211",
			"Ticker": "AAPL",
			"Open": "197.75",
			"High": "198",
			"Low": "193.43",
			"Close": "194.67",
			"Volume": "153490"
		},
		{
			"Date": "20091214",
			"Ticker": "AAPL",
			"Open": "195.47",
			"High": "197.43",
			"Low": "192.56",
			"Close": "196.98",
			"Volume": "177067"
		},
		{
			"Date": "20091215",
			"Ticker": "AAPL",
			"Open": "195.76",
			"High": "197.51",
			"Low": "193.27",
			"Close": "194.17",
			"Volume": "149897"
		},
		{
			"Date": "20091216",
			"Ticker": "AAPL",
			"Open": "195",
			"High": "196.5",
			"Low": "194.55",
			"Close": "195.03",
			"Volume": "126113"
		},
		{
			"Date": "20091217",
			"Ticker": "AAPL",
			"Open": "194.87",
			"High": "195",
			"Low": "191",
			"Close": "191.86",
			"Volume": "138870"
		},
		{
			"Date": "20091218",
			"Ticker": "AAPL",
			"Open": "193.1",
			"High": "195.503",
			"Low": "192.6",
			"Close": "195.43",
			"Volume": "217417"
		},
		{
			"Date": "20091221",
			"Ticker": "AAPL",
			"Open": "196",
			"High": "199.75",
			"Low": "195.67",
			"Close": "198.23",
			"Volume": "218704"
		},
		{
			"Date": "20091222",
			"Ticker": "AAPL",
			"Open": "199.79",
			"High": "200.85",
			"Low": "198.66",
			"Close": "200.36",
			"Volume": "124826"
		},
		{
			"Date": "20091223",
			"Ticker": "AAPL",
			"Open": "201.19",
			"High": "202.38",
			"Low": "200.81",
			"Close": "202.1",
			"Volume": "123401"
		},
		{
			"Date": "20091224",
			"Ticker": "AAPL",
			"Open": "203.43",
			"High": "209.35",
			"Low": "203.35",
			"Close": "209.04",
			"Volume": "178888"
		},
		{
			"Date": "20091228",
			"Ticker": "AAPL",
			"Open": "211.15",
			"High": "213.95",
			"Low": "209.611",
			"Close": "211.61",
			"Volume": "230201"
		},
		{
			"Date": "20091229",
			"Ticker": "AAPL",
			"Open": "212.65",
			"High": "212.72",
			"Low": "208.73",
			"Close": "209.1",
			"Volume": "159001"
		},
		{
			"Date": "20091230",
			"Ticker": "AAPL",
			"Open": "208.75",
			"High": "212",
			"Low": "208.31",
			"Close": "211.64",
			"Volume": "147172"
		},
		{
			"Date": "20091231",
			"Ticker": "AAPL",
			"Open": "213.11",
			"High": "213.35",
			"Low": "210.56",
			"Close": "210.732",
			"Volume": "125860"
		},
		{
			"Date": "20100104",
			"Ticker": "AAPL",
			"Open": "213.5",
			"High": "214.5",
			"Low": "212.38",
			"Close": "214.01",
			"Volume": "176331"
		},
		{
			"Date": "20100105",
			"Ticker": "AAPL",
			"Open": "214.79",
			"High": "215.59",
			"Low": "213.25",
			"Close": "214.38",
			"Volume": "214965"
		},
		{
			"Date": "20100106",
			"Ticker": "AAPL",
			"Open": "214.38",
			"High": "215.23",
			"Low": "210.75",
			"Close": "210.97",
			"Volume": "197199"
		},
		{
			"Date": "20100107",
			"Ticker": "AAPL",
			"Open": "211.68",
			"High": "212",
			"Low": "209.05",
			"Close": "210.58",
			"Volume": "170403"
		},
		{
			"Date": "20100108",
			"Ticker": "AAPL",
			"Open": "210.4",
			"High": "212",
			"Low": "209.06",
			"Close": "211.98",
			"Volume": "159955"
		},
		{
			"Date": "20100111",
			"Ticker": "AAPL",
			"Open": "212.97",
			"High": "213",
			"Low": "208.45",
			"Close": "210.11",
			"Volume": "165081"
		},
		{
			"Date": "20100112",
			"Ticker": "AAPL",
			"Open": "209.32",
			"High": "209.77",
			"Low": "206.42",
			"Close": "207.72",
			"Volume": "212306"
		},
		{
			"Date": "20100113",
			"Ticker": "AAPL",
			"Open": "208.12",
			"High": "210.93",
			"Low": "204.1",
			"Close": "210.65",
			"Volume": "216389"
		},
		{
			"Date": "20100114",
			"Ticker": "AAPL",
			"Open": "210.04",
			"High": "210.46",
			"Low": "209.02",
			"Close": "209.43",
			"Volume": "154697"
		},
		{
			"Date": "20100115",
			"Ticker": "AAPL",
			"Open": "211.4",
			"High": "211.6",
			"Low": "205.87",
			"Close": "205.93",
			"Volume": "212262"
		},
		{
			"Date": "20100119",
			"Ticker": "AAPL",
			"Open": "208.39",
			"High": "215.19",
			"Low": "207.24",
			"Close": "215.04",
			"Volume": "260716"
		},
		{
			"Date": "20100120",
			"Ticker": "AAPL",
			"Open": "214.91",
			"High": "215.55",
			"Low": "209.5",
			"Close": "211.725",
			"Volume": "218625"
		},
		{
			"Date": "20100121",
			"Ticker": "AAPL",
			"Open": "212.29",
			"High": "213.3138",
			"Low": "207.21",
			"Close": "208.072",
			"Volume": "217197"
		},
		{
			"Date": "20100122",
			"Ticker": "AAPL",
			"Open": "206.78",
			"High": "207.5",
			"Low": "197.16",
			"Close": "197.75",
			"Volume": "314916"
		},
		{
			"Date": "20100125",
			"Ticker": "AAPL",
			"Open": "202.83",
			"High": "204.7",
			"Low": "200.19",
			"Close": "203.075",
			"Volume": "380606"
		},
		{
			"Date": "20100126",
			"Ticker": "AAPL",
			"Open": "205.86",
			"High": "213.71",
			"Low": "202.58",
			"Close": "205.94",
			"Volume": "666824"
		},
		{
			"Date": "20100127",
			"Ticker": "AAPL",
			"Open": "206.81",
			"High": "210.58",
			"Low": "199.531",
			"Close": "207.884",
			"Volume": "615202"
		},
		{
			"Date": "20100128",
			"Ticker": "AAPL",
			"Open": "205.32",
			"High": "205.5",
			"Low": "198.7",
			"Close": "199.29",
			"Volume": "419107"
		},
		{
			"Date": "20100129",
			"Ticker": "AAPL",
			"Open": "201.33",
			"High": "202.2",
			"Low": "190.25",
			"Close": "192.063",
			"Volume": "444982"
		},
		{
			"Date": "20100201",
			"Ticker": "AAPL",
			"Open": "192.58",
			"High": "196",
			"Low": "191.3",
			"Close": "194.73",
			"Volume": "267812"
		},
		{
			"Date": "20100202",
			"Ticker": "AAPL",
			"Open": "195.93",
			"High": "196.32",
			"Low": "193.38",
			"Close": "195.86",
			"Volume": "249407"
		},
		{
			"Date": "20100203",
			"Ticker": "AAPL",
			"Open": "195.26",
			"High": "200.2",
			"Low": "194.42",
			"Close": "199.23",
			"Volume": "219759"
		},
		{
			"Date": "20100204",
			"Ticker": "AAPL",
			"Open": "196.85",
			"High": "198.37",
			"Low": "191.57",
			"Close": "192.05",
			"Volume": "270589"
		},
		{
			"Date": "20100205",
			"Ticker": "AAPL",
			"Open": "192.7",
			"High": "196",
			"Low": "190.85",
			"Close": "195.46",
			"Volume": "303680"
		},
		{
			"Date": "20100208",
			"Ticker": "AAPL",
			"Open": "195.68",
			"High": "197.88",
			"Low": "194",
			"Close": "194.12",
			"Volume": "170810"
		},
		{
			"Date": "20100209",
			"Ticker": "AAPL",
			"Open": "196.46",
			"High": "197.5",
			"Low": "194.75",
			"Close": "196.19",
			"Volume": "226030"
		},
		{
			"Date": "20100210",
			"Ticker": "AAPL",
			"Open": "195.82",
			"High": "196.6",
			"Low": "194.26",
			"Close": "195.116",
			"Volume": "132271"
		},
		{
			"Date": "20100211",
			"Ticker": "AAPL",
			"Open": "194.79",
			"High": "199.75",
			"Low": "194.06",
			"Close": "198.67",
			"Volume": "196551"
		},
		{
			"Date": "20100212",
			"Ticker": "AAPL",
			"Open": "198.17",
			"High": "201.64",
			"Low": "195.5",
			"Close": "200.38",
			"Volume": "234095"
		},
		{
			"Date": "20100216",
			"Ticker": "AAPL",
			"Open": "201.94",
			"High": "203.69",
			"Low": "201.52",
			"Close": "203.4",
			"Volume": "193437"
		},
		{
			"Date": "20100217",
			"Ticker": "AAPL",
			"Open": "204.25",
			"High": "204.31",
			"Low": "200.86",
			"Close": "202.55",
			"Volume": "155855"
		},
		{
			"Date": "20100218",
			"Ticker": "AAPL",
			"Open": "201.63",
			"High": "203.89",
			"Low": "200.92",
			"Close": "202.928",
			"Volume": "151008"
		},
		{
			"Date": "20100219",
			"Ticker": "AAPL",
			"Open": "201.85",
			"High": "203.2",
			"Low": "201.11",
			"Close": "201.67",
			"Volume": "148476"
		},
		{
			"Date": "20100222",
			"Ticker": "AAPL",
			"Open": "202.44",
			"High": "202.5",
			"Low": "199.19",
			"Close": "200.416",
			"Volume": "139580"
		},
		{
			"Date": "20100223",
			"Ticker": "AAPL",
			"Open": "199.91",
			"High": "201.33",
			"Low": "195.71",
			"Close": "197.059",
			"Volume": "205468"
		},
		{
			"Date": "20100224",
			"Ticker": "AAPL",
			"Open": "198.5",
			"High": "201.44",
			"Low": "197.84",
			"Close": "200.656",
			"Volume": "164487"
		},
		{
			"Date": "20100225",
			"Ticker": "AAPL",
			"Open": "197.38",
			"High": "202.86",
			"Low": "196.89",
			"Close": "202",
			"Volume": "237641"
		},
		{
			"Date": "20100226",
			"Ticker": "AAPL",
			"Open": "202.45",
			"High": "205.17",
			"Low": "202",
			"Close": "204.62",
			"Volume": "181235"
		},
		{
			"Date": "20100301",
			"Ticker": "AAPL",
			"Open": "205.75",
			"High": "209.5",
			"Low": "205.45",
			"Close": "208.99",
			"Volume": "196461"
		},
		{
			"Date": "20100302",
			"Ticker": "AAPL",
			"Open": "209.97",
			"High": "210.83",
			"Low": "207.74",
			"Close": "208.85",
			"Volume": "202337"
		},
		{
			"Date": "20100303",
			"Ticker": "AAPL",
			"Open": "209.16",
			"High": "209.87",
			"Low": "207.94",
			"Close": "209.33",
			"Volume": "132942"
		},
		{
			"Date": "20100304",
			"Ticker": "AAPL",
			"Open": "209.39",
			"High": "210.92",
			"Low": "208.63",
			"Close": "210.71",
			"Volume": "130728"
		},
		{
			"Date": "20100305",
			"Ticker": "AAPL",
			"Open": "215",
			"High": "219.7",
			"Low": "214.63",
			"Close": "218.95",
			"Volume": "321292"
		},
		{
			"Date": "20100308",
			"Ticker": "AAPL",
			"Open": "219.98",
			"High": "220.09",
			"Low": "218.25",
			"Close": "219.08",
			"Volume": "153531"
		},
		{
			"Date": "20100309",
			"Ticker": "AAPL",
			"Open": "218.15",
			"High": "225",
			"Low": "217.89",
			"Close": "223.02",
			"Volume": "328663"
		},
		{
			"Date": "20100310",
			"Ticker": "AAPL",
			"Open": "223.71",
			"High": "225.48",
			"Low": "223.2",
			"Close": "224.84",
			"Volume": "212934"
		},
		{
			"Date": "20100311",
			"Ticker": "AAPL",
			"Open": "223.86",
			"High": "225.5",
			"Low": "223.32",
			"Close": "225.5",
			"Volume": "144892"
		},
		{
			"Date": "20100312",
			"Ticker": "AAPL",
			"Open": "227.05",
			"High": "227.73",
			"Low": "225.75",
			"Close": "226.6",
			"Volume": "148686"
		},
		{
			"Date": "20100315",
			"Ticker": "AAPL",
			"Open": "225.5",
			"High": "225.5",
			"Low": "220.25",
			"Close": "223.84",
			"Volume": "176250"
		},
		{
			"Date": "20100316",
			"Ticker": "AAPL",
			"Open": "224.19",
			"High": "224.98",
			"Low": "222.51",
			"Close": "224.45",
			"Volume": "159609"
		},
		{
			"Date": "20100317",
			"Ticker": "AAPL",
			"Open": "224.79",
			"High": "226.45",
			"Low": "223.27",
			"Close": "224.12",
			"Volume": "161055"
		},
		{
			"Date": "20100318",
			"Ticker": "AAPL",
			"Open": "223.92",
			"High": "225",
			"Low": "222.61",
			"Close": "224.65",
			"Volume": "122181"
		},
		{
			"Date": "20100319",
			"Ticker": "AAPL",
			"Open": "225.16",
			"High": "225.24",
			"Low": "221.23",
			"Close": "222.2499",
			"Volume": "199801"
		},
		{
			"Date": "20100322",
			"Ticker": "AAPL",
			"Open": "220.5",
			"High": "226",
			"Low": "220.15",
			"Close": "224.75",
			"Volume": "163006"
		},
		{
			"Date": "20100323",
			"Ticker": "AAPL",
			"Open": "225.66",
			"High": "228.78",
			"Low": "224.1",
			"Close": "228.36",
			"Volume": "215153"
		},
		{
			"Date": "20100324",
			"Ticker": "AAPL",
			"Open": "227.85",
			"High": "230.2",
			"Low": "227.51",
			"Close": "229.37",
			"Volume": "213671"
		},
		{
			"Date": "20100325",
			"Ticker": "AAPL",
			"Open": "230.87",
			"High": "230.97",
			"Low": "226.25",
			"Close": "226.65",
			"Volume": "194023"
		},
		{
			"Date": "20100326",
			"Ticker": "AAPL",
			"Open": "228.98",
			"High": "231.95",
			"Low": "228.55",
			"Close": "230.9",
			"Volume": "228883"
		},
		{
			"Date": "20100329",
			"Ticker": "AAPL",
			"Open": "232.91",
			"High": "233.8699",
			"Low": "231.62",
			"Close": "232.39",
			"Volume": "193122"
		},
		{
			"Date": "20100330",
			"Ticker": "AAPL",
			"Open": "236.67",
			"High": "237.48",
			"Low": "234.25",
			"Close": "235.845",
			"Volume": "188324"
		},
		{
			"Date": "20100331",
			"Ticker": "AAPL",
			"Open": "235.85",
			"High": "236.61",
			"Low": "234.46",
			"Close": "235",
			"Volume": "153806"
		},
		{
			"Date": "20100401",
			"Ticker": "AAPL",
			"Open": "237.67",
			"High": "238.73",
			"Low": "232.75",
			"Close": "235.97",
			"Volume": "215408"
		},
		{
			"Date": "20100405",
			"Ticker": "AAPL",
			"Open": "234.99",
			"High": "238.51",
			"Low": "234.77",
			"Close": "238.49",
			"Volume": "244466"
		},
		{
			"Date": "20100406",
			"Ticker": "AAPL",
			"Open": "238.28",
			"High": "240.24",
			"Low": "237",
			"Close": "239.54",
			"Volume": "159648"
		},
		{
			"Date": "20100407",
			"Ticker": "AAPL",
			"Open": "239.72",
			"High": "241.92",
			"Low": "238.6601",
			"Close": "240.6",
			"Volume": "224464"
		},
		{
			"Date": "20100408",
			"Ticker": "AAPL",
			"Open": "240.4",
			"High": "241.54",
			"Low": "238.04",
			"Close": "239.95",
			"Volume": "204638"
		},
		{
			"Date": "20100409",
			"Ticker": "AAPL",
			"Open": "241.46",
			"High": "241.89",
			"Low": "240.46",
			"Close": "241.79",
			"Volume": "119350"
		},
		{
			"Date": "20100412",
			"Ticker": "AAPL",
			"Open": "242.9",
			"High": "243.07",
			"Low": "241.81",
			"Close": "242.29",
			"Volume": "119005"
		},
		{
			"Date": "20100413",
			"Ticker": "AAPL",
			"Open": "242.23",
			"High": "242.8",
			"Low": "241.11",
			"Close": "242.43",
			"Volume": "109360"
		},
		{
			"Date": "20100414",
			"Ticker": "AAPL",
			"Open": "245.17",
			"High": "245.81",
			"Low": "244.07",
			"Close": "245.69",
			"Volume": "144312"
		},
		{
			"Date": "20100415",
			"Ticker": "AAPL",
			"Open": "245.95",
			"High": "249.03",
			"Low": "245.51",
			"Close": "248.92",
			"Volume": "134565"
		},
		{
			"Date": "20100416",
			"Ticker": "AAPL",
			"Open": "248.99",
			"High": "251.14",
			"Low": "244.55",
			"Close": "247.4",
			"Volume": "268051"
		},
		{
			"Date": "20100419",
			"Ticker": "AAPL",
			"Open": "246.55",
			"High": "247.89",
			"Low": "241.77",
			"Close": "247.07",
			"Volume": "202472"
		},
		{
			"Date": "20100420",
			"Ticker": "AAPL",
			"Open": "249.24",
			"High": "249.25",
			"Low": "242.955",
			"Close": "244.59",
			"Volume": "263687"
		},
		{
			"Date": "20100421",
			"Ticker": "AAPL",
			"Open": "258.26",
			"High": "260.25",
			"Low": "255.73",
			"Close": "259.22",
			"Volume": "350854"
		},
		{
			"Date": "20100422",
			"Ticker": "AAPL",
			"Open": "258.18",
			"High": "266.75",
			"Low": "256.2",
			"Close": "266.4695",
			"Volume": "283365"
		},
		{
			"Date": "20100423",
			"Ticker": "AAPL",
			"Open": "267.01",
			"High": "272.18",
			"Low": "267",
			"Close": "270.83",
			"Volume": "284626"
		},
		{
			"Date": "20100426",
			"Ticker": "AAPL",
			"Open": "271.98",
			"High": "272.46",
			"Low": "268.19",
			"Close": "269.5",
			"Volume": "171095"
		},
		{
			"Date": "20100427",
			"Ticker": "AAPL",
			"Open": "267",
			"High": "267.84",
			"Low": "260.52",
			"Close": "262.04",
			"Volume": "253336"
		},
		{
			"Date": "20100428",
			"Ticker": "AAPL",
			"Open": "263",
			"High": "264",
			"Low": "256.41",
			"Close": "261.6",
			"Volume": "270857"
		},
		{
			"Date": "20100429",
			"Ticker": "AAPL",
			"Open": "263.05",
			"High": "270",
			"Low": "262.01",
			"Close": "268.64",
			"Volume": "199585"
		},
		{
			"Date": "20100430",
			"Ticker": "AAPL",
			"Open": "269.74",
			"High": "270.57",
			"Low": "261",
			"Close": "261.09",
			"Volume": "193736"
		},
		{
			"Date": "20100503",
			"Ticker": "AAPL",
			"Open": "264.42",
			"High": "267.88",
			"Low": "262.88",
			"Close": "266.35",
			"Volume": "162264"
		},
		{
			"Date": "20100504",
			"Ticker": "AAPL",
			"Open": "262.44",
			"High": "263.29",
			"Low": "256.75",
			"Close": "258.68",
			"Volume": "258506"
		},
		{
			"Date": "20100505",
			"Ticker": "AAPL",
			"Open": "252.88",
			"High": "258.14",
			"Low": "248.73",
			"Close": "255.985",
			"Volume": "315393"
		},
		{
			"Date": "20100506",
			"Ticker": "AAPL",
			"Open": "254",
			"High": "258.25",
			"Low": "199.25",
			"Close": "246.25",
			"Volume": "459235"
		},
		{
			"Date": "20100507",
			"Ticker": "AAPL",
			"Open": "244",
			"High": "246.57",
			"Low": "225.21",
			"Close": "235.86",
			"Volume": "598577"
		},
		{
			"Date": "20100510",
			"Ticker": "AAPL",
			"Open": "251.17",
			"High": "254.65",
			"Low": "248.53",
			"Close": "253.99",
			"Volume": "351537"
		},
		{
			"Date": "20100511",
			"Ticker": "AAPL",
			"Open": "252",
			"High": "259.89",
			"Low": "250.5",
			"Close": "256.52",
			"Volume": "303696"
		},
		{
			"Date": "20100512",
			"Ticker": "AAPL",
			"Open": "259.64",
			"High": "263.13",
			"Low": "258.7",
			"Close": "262.09",
			"Volume": "233706"
		},
		{
			"Date": "20100513",
			"Ticker": "AAPL",
			"Open": "263.26",
			"High": "265",
			"Low": "256.4",
			"Close": "258.36",
			"Volume": "214182"
		},
		{
			"Date": "20100514",
			"Ticker": "AAPL",
			"Open": "255.21",
			"High": "256.48",
			"Low": "249.5",
			"Close": "253.82",
			"Volume": "271200"
		},
		{
			"Date": "20100517",
			"Ticker": "AAPL",
			"Open": "254.16",
			"High": "256.18",
			"Low": "247.71",
			"Close": "254.22",
			"Volume": "272440"
		},
		{
			"Date": "20100518",
			"Ticker": "AAPL",
			"Open": "257.035",
			"High": "258.55",
			"Low": "250.26",
			"Close": "252.36",
			"Volume": "279527"
		},
		{
			"Date": "20100519",
			"Ticker": "AAPL",
			"Open": "249.48",
			"High": "252.92",
			"Low": "244.85",
			"Close": "248.34",
			"Volume": "366330"
		},
		{
			"Date": "20100520",
			"Ticker": "AAPL",
			"Open": "241.4",
			"High": "243.85",
			"Low": "236.21",
			"Close": "237.76",
			"Volume": "458183"
		},
		{
			"Date": "20100521",
			"Ticker": "AAPL",
			"Open": "231.65",
			"High": "244.5",
			"Low": "231.35",
			"Close": "242.32",
			"Volume": "437109"
		},
		{
			"Date": "20100524",
			"Ticker": "AAPL",
			"Open": "247.26",
			"High": "250.9",
			"Low": "246.26",
			"Close": "246.76",
			"Volume": "268394"
		},
		{
			"Date": "20100525",
			"Ticker": "AAPL",
			"Open": "239.9",
			"High": "246.76",
			"Low": "237.16",
			"Close": "245.22",
			"Volume": "374290"
		},
		{
			"Date": "20100526",
			"Ticker": "AAPL",
			"Open": "250.2",
			"High": "252.13",
			"Low": "243.75",
			"Close": "244.109",
			"Volume": "303805"
		},
		{
			"Date": "20100527",
			"Ticker": "AAPL",
			"Open": "250.73",
			"High": "253.89",
			"Low": "249.11",
			"Close": "253.35",
			"Volume": "237964"
		},
		{
			"Date": "20100528",
			"Ticker": "AAPL",
			"Open": "259.18",
			"High": "259.4",
			"Low": "253.35",
			"Close": "256.88",
			"Volume": "291290"
		},
		{
			"Date": "20100601",
			"Ticker": "AAPL",
			"Open": "259.7",
			"High": "265.94",
			"Low": "258.96",
			"Close": "260.83",
			"Volume": "313026"
		},
		{
			"Date": "20100602",
			"Ticker": "AAPL",
			"Open": "264.74",
			"High": "264.8",
			"Low": "260.335",
			"Close": "263.95",
			"Volume": "245909"
		},
		{
			"Date": "20100603",
			"Ticker": "AAPL",
			"Open": "265.2",
			"High": "265.55",
			"Low": "260.41",
			"Close": "263.12",
			"Volume": "232199"
		},
		{
			"Date": "20100604",
			"Ticker": "AAPL",
			"Open": "258.47",
			"High": "261.9",
			"Low": "254.63",
			"Close": "255.965",
			"Volume": "270872"
		},
		{
			"Date": "20100607",
			"Ticker": "AAPL",
			"Open": "258.37",
			"High": "259.15",
			"Low": "250.55",
			"Close": "250.94",
			"Volume": "316779"
		},
		{
			"Date": "20100608",
			"Ticker": "AAPL",
			"Open": "253.38",
			"High": "253.8",
			"Low": "245.65",
			"Close": "249.33",
			"Volume": "357417"
		},
		{
			"Date": "20100609",
			"Ticker": "AAPL",
			"Open": "251.56",
			"High": "251.9",
			"Low": "242.49",
			"Close": "243.2",
			"Volume": "305224"
		},
		{
			"Date": "20100610",
			"Ticker": "AAPL",
			"Open": "244.81",
			"High": "250.98",
			"Low": "242.2",
			"Close": "250.51",
			"Volume": "277269"
		},
		{
			"Date": "20100611",
			"Ticker": "AAPL",
			"Open": "248.17",
			"High": "253.86",
			"Low": "247.37",
			"Close": "253.51",
			"Volume": "194914"
		},
		{
			"Date": "20100614",
			"Ticker": "AAPL",
			"Open": "256.09",
			"High": "259.15",
			"Low": "254.01",
			"Close": "254.28",
			"Volume": "215343"
		},
		{
			"Date": "20100615",
			"Ticker": "AAPL",
			"Open": "255.6",
			"High": "259.85",
			"Low": "255.5",
			"Close": "259.69",
			"Volume": "208954"
		},
		{
			"Date": "20100616",
			"Ticker": "AAPL",
			"Open": "261",
			"High": "267.75",
			"Low": "260.6302",
			"Close": "267.25",
			"Volume": "279889"
		},
		{
			"Date": "20100617",
			"Ticker": "AAPL",
			"Open": "270.72",
			"High": "272.9",
			"Low": "269.5",
			"Close": "271.87",
			"Volume": "311950"
		},
		{
			"Date": "20100618",
			"Ticker": "AAPL",
			"Open": "272.23",
			"High": "275",
			"Low": "271.42",
			"Close": "274.074",
			"Volume": "280221"
		},
		{
			"Date": "20100621",
			"Ticker": "AAPL",
			"Open": "277.75",
			"High": "279.01",
			"Low": "268.73",
			"Close": "270.17",
			"Volume": "277317"
		},
		{
			"Date": "20100622",
			"Ticker": "AAPL",
			"Open": "272.24",
			"High": "275.97",
			"Low": "271.5",
			"Close": "273.85",
			"Volume": "256164"
		},
		{
			"Date": "20100623",
			"Ticker": "AAPL",
			"Open": "274.57",
			"High": "274.66",
			"Low": "267.9",
			"Close": "270.97",
			"Volume": "274448"
		},
		{
			"Date": "20100624",
			"Ticker": "AAPL",
			"Open": "270.97",
			"High": "273.195",
			"Low": "268.1",
			"Close": "269",
			"Volume": "255404"
		},
		{
			"Date": "20100625",
			"Ticker": "AAPL",
			"Open": "270.02",
			"High": "270.27",
			"Low": "265.81",
			"Close": "266.7",
			"Volume": "196407"
		},
		{
			"Date": "20100628",
			"Ticker": "AAPL",
			"Open": "266.99",
			"High": "269.75",
			"Low": "264.52",
			"Close": "268.3",
			"Volume": "209083"
		},
		{
			"Date": "20100630",
			"Ticker": "AAPL",
			"Open": "256.74",
			"High": "257.97",
			"Low": "250.01",
			"Close": "251.53",
			"Volume": "264095"
		},
		{
			"Date": "20100701",
			"Ticker": "AAPL",
			"Open": "254.11",
			"High": "254.8",
			"Low": "243.22",
			"Close": "248.48",
			"Volume": "365340"
		},
		{
			"Date": "20100702",
			"Ticker": "AAPL",
			"Open": "250.7",
			"High": "250.93",
			"Low": "243.2",
			"Close": "246.94",
			"Volume": "248034"
		},
		{
			"Date": "20100707",
			"Ticker": "AAPL",
			"Open": "250.62",
			"High": "258.77",
			"Low": "249.75",
			"Close": "258.665",
			"Volume": "233771"
		},
		{
			"Date": "20100708",
			"Ticker": "AAPL",
			"Open": "262.58",
			"High": "262.9",
			"Low": "254.89",
			"Close": "258.09",
			"Volume": "263625"
		},
		{
			"Date": "20100709",
			"Ticker": "AAPL",
			"Open": "256.9",
			"High": "259.9",
			"Low": "255.16",
			"Close": "259.62",
			"Volume": "154847"
		},
		{
			"Date": "20100712",
			"Ticker": "AAPL",
			"Open": "258.53",
			"High": "261.85",
			"Low": "254.86",
			"Close": "257.285",
			"Volume": "201027"
		},
		{
			"Date": "20100713",
			"Ticker": "AAPL",
			"Open": "256.21",
			"High": "256.4",
			"Low": "246.43",
			"Close": "251.798",
			"Volume": "425340"
		},
		{
			"Date": "20100714",
			"Ticker": "AAPL",
			"Open": "249.19",
			"High": "255.8",
			"Low": "249",
			"Close": "252.727",
			"Volume": "290061"
		},
		{
			"Date": "20100715",
			"Ticker": "AAPL",
			"Open": "248.27",
			"High": "256.97",
			"Low": "247.3",
			"Close": "251.45",
			"Volume": "294594"
		},
		{
			"Date": "20100716",
			"Ticker": "AAPL",
			"Open": "253.06",
			"High": "254.97",
			"Low": "248.41",
			"Close": "249.9",
			"Volume": "371377"
		},
		{
			"Date": "20100719",
			"Ticker": "AAPL",
			"Open": "249.74",
			"High": "249.88",
			"Low": "239.6",
			"Close": "245.58",
			"Volume": "365892"
		},
		{
			"Date": "20100720",
			"Ticker": "AAPL",
			"Open": "242.47",
			"High": "252.9",
			"Low": "240.01",
			"Close": "251.89",
			"Volume": "383910"
		},
		{
			"Date": "20100721",
			"Ticker": "AAPL",
			"Open": "264.99",
			"High": "265.15",
			"Low": "254",
			"Close": "254.24",
			"Volume": "423453"
		},
		{
			"Date": "20100722",
			"Ticker": "AAPL",
			"Open": "257.72",
			"High": "260",
			"Low": "255.31",
			"Close": "259.024",
			"Volume": "230470"
		},
		{
			"Date": "20100723",
			"Ticker": "AAPL",
			"Open": "257.21",
			"High": "260.38",
			"Low": "256.28",
			"Close": "259.94",
			"Volume": "190495"
		},
		{
			"Date": "20100726",
			"Ticker": "AAPL",
			"Open": "259.98",
			"High": "260.0998",
			"Low": "257.71",
			"Close": "259.28",
			"Volume": "150196"
		},
		{
			"Date": "20100727",
			"Ticker": "AAPL",
			"Open": "260.68",
			"High": "264.8",
			"Low": "260.3",
			"Close": "264.08",
			"Volume": "208846"
		},
		{
			"Date": "20100728",
			"Ticker": "AAPL",
			"Open": "263.67",
			"High": "265.99",
			"Low": "260.25",
			"Close": "260.96",
			"Volume": "185708"
		},
		{
			"Date": "20100729",
			"Ticker": "AAPL",
			"Open": "260.71",
			"High": "262.65",
			"Low": "256.1",
			"Close": "258.11",
			"Volume": "229930"
		},
		{
			"Date": "20100730",
			"Ticker": "AAPL",
			"Open": "255.75",
			"High": "259.7",
			"Low": "254.9",
			"Close": "257.25",
			"Volume": "160162"
		},
		{
			"Date": "20100802",
			"Ticker": "AAPL",
			"Open": "260.44",
			"High": "262.59",
			"Low": "259.62",
			"Close": "261.85",
			"Volume": "152887"
		},
		{
			"Date": "20100804",
			"Ticker": "AAPL",
			"Open": "262.77",
			"High": "264.28",
			"Low": "260.311",
			"Close": "262.98",
			"Volume": "150198"
		},
		{
			"Date": "20100805",
			"Ticker": "AAPL",
			"Open": "261.48",
			"High": "263.18",
			"Low": "260.55",
			"Close": "261.7",
			"Volume": "103343"
		},
		{
			"Date": "20100806",
			"Ticker": "AAPL",
			"Open": "259.7",
			"High": "261.49",
			"Low": "257.63",
			"Close": "260.091",
			"Volume": "158933"
		},
		{
			"Date": "20100809",
			"Ticker": "AAPL",
			"Open": "261.49",
			"High": "262.15",
			"Low": "259.57",
			"Close": "261.75",
			"Volume": "108259"
		},
		{
			"Date": "20100810",
			"Ticker": "AAPL",
			"Open": "259.85",
			"High": "260.45",
			"Low": "257.55",
			"Close": "259.41",
			"Volume": "161399"
		},
		{
			"Date": "20100811",
			"Ticker": "AAPL",
			"Open": "255.14",
			"High": "255.69",
			"Low": "249.81",
			"Close": "250.19",
			"Volume": "221447"
		},
		{
			"Date": "20100812",
			"Ticker": "AAPL",
			"Open": "246.6",
			"High": "253.1",
			"Low": "246.12",
			"Close": "251.79",
			"Volume": "191042"
		},
		{
			"Date": "20100813",
			"Ticker": "AAPL",
			"Open": "251.03",
			"High": "251.88",
			"Low": "249.09",
			"Close": "249.1",
			"Volume": "126738"
		},
		{
			"Date": "20100816",
			"Ticker": "AAPL",
			"Open": "247.72",
			"High": "250.01",
			"Low": "246.62",
			"Close": "247.64",
			"Volume": "113724"
		},
		{
			"Date": "20100817",
			"Ticker": "AAPL",
			"Open": "250.11",
			"High": "254.63",
			"Low": "249.2",
			"Close": "251.97",
			"Volume": "150946"
		},
		{
			"Date": "20100819",
			"Ticker": "AAPL",
			"Open": "252.78",
			"High": "253.48",
			"Low": "248.68",
			"Close": "249.88",
			"Volume": "152394"
		},
		{
			"Date": "20100820",
			"Ticker": "AAPL",
			"Open": "249.38",
			"High": "253.92",
			"Low": "249",
			"Close": "249.64",
			"Volume": "137224"
		},
		{
			"Date": "20090821",
			"Ticker": "ABC",
			"Open": "21.14",
			"High": "21.25",
			"Low": "20.9",
			"Close": "21.05",
			"Volume": "33179"
		},
		{
			"Date": "20090824",
			"Ticker": "ABC",
			"Open": "21.16",
			"High": "21.18",
			"Low": "20.71",
			"Close": "20.8",
			"Volume": "31084"
		},
		{
			"Date": "20090825",
			"Ticker": "ABC",
			"Open": "20.85",
			"High": "21.05",
			"Low": "20.8",
			"Close": "20.93",
			"Volume": "18321"
		},
		{
			"Date": "20090826",
			"Ticker": "ABC",
			"Open": "20.87",
			"High": "21.15",
			"Low": "20.77",
			"Close": "20.9",
			"Volume": "20001"
		},
		{
			"Date": "20090827",
			"Ticker": "ABC",
			"Open": "20.86",
			"High": "21.23",
			"Low": "20.72",
			"Close": "21.15",
			"Volume": "22949"
		},
		{
			"Date": "20090828",
			"Ticker": "ABC",
			"Open": "21.28",
			"High": "21.28",
			"Low": "21.09",
			"Close": "21.2",
			"Volume": "25090"
		},
		{
			"Date": "20090831",
			"Ticker": "ABC",
			"Open": "21.12",
			"High": "21.47",
			"Low": "21.08",
			"Close": "21.31",
			"Volume": "21147"
		},
		{
			"Date": "20090901",
			"Ticker": "ABC",
			"Open": "21.22",
			"High": "21.46",
			"Low": "21.09",
			"Close": "21.2",
			"Volume": "28763"
		},
		{
			"Date": "20090902",
			"Ticker": "ABC",
			"Open": "21.22",
			"High": "21.25",
			"Low": "20.98",
			"Close": "21.01",
			"Volume": "18158"
		},
		{
			"Date": "20090903",
			"Ticker": "ABC",
			"Open": "21.12",
			"High": "21.14",
			"Low": "20.87",
			"Close": "21.14",
			"Volume": "21759"
		},
		{
			"Date": "20090904",
			"Ticker": "ABC",
			"Open": "21.09",
			"High": "21.29",
			"Low": "21.08",
			"Close": "21.29",
			"Volume": "11347"
		},
		{
			"Date": "20090909",
			"Ticker": "ABC",
			"Open": "21.4",
			"High": "21.66",
			"Low": "21.04",
			"Close": "21.43",
			"Volume": "26644"
		},
		{
			"Date": "20090910",
			"Ticker": "ABC",
			"Open": "21.39",
			"High": "21.61",
			"Low": "21.25",
			"Close": "21.53",
			"Volume": "24091"
		},
		{
			"Date": "20090911",
			"Ticker": "ABC",
			"Open": "21.59",
			"High": "21.7",
			"Low": "21.505",
			"Close": "21.66",
			"Volume": "19521"
		},
		{
			"Date": "20090914",
			"Ticker": "ABC",
			"Open": "21.59",
			"High": "21.77",
			"Low": "21.43",
			"Close": "21.74",
			"Volume": "28536"
		},
		{
			"Date": "20090915",
			"Ticker": "ABC",
			"Open": "21.775",
			"High": "21.78",
			"Low": "21.38",
			"Close": "21.55",
			"Volume": "36350"
		},
		{
			"Date": "20090916",
			"Ticker": "ABC",
			"Open": "21.64",
			"High": "21.77",
			"Low": "21.29",
			"Close": "21.76",
			"Volume": "26017"
		},
		{
			"Date": "20090917",
			"Ticker": "ABC",
			"Open": "21.77",
			"High": "21.8",
			"Low": "21.54",
			"Close": "21.57",
			"Volume": "62094"
		},
		{
			"Date": "20090918",
			"Ticker": "ABC",
			"Open": "21.61",
			"High": "21.77",
			"Low": "21.5",
			"Close": "21.76",
			"Volume": "29090"
		},
		{
			"Date": "20090921",
			"Ticker": "ABC",
			"Open": "21.73",
			"High": "22.1",
			"Low": "21.58",
			"Close": "21.95",
			"Volume": "18337"
		},
		{
			"Date": "20090922",
			"Ticker": "ABC",
			"Open": "21.99",
			"High": "22",
			"Low": "21.65",
			"Close": "21.69",
			"Volume": "21562"
		},
		{
			"Date": "20090923",
			"Ticker": "ABC",
			"Open": "21.97",
			"High": "22.12",
			"Low": "21.63",
			"Close": "21.68",
			"Volume": "24674"
		},
		{
			"Date": "20090924",
			"Ticker": "ABC",
			"Open": "21.63",
			"High": "21.74",
			"Low": "21.35",
			"Close": "21.55",
			"Volume": "22904"
		},
		{
			"Date": "20090925",
			"Ticker": "ABC",
			"Open": "21.55",
			"High": "21.76",
			"Low": "21.44",
			"Close": "21.51",
			"Volume": "19092"
		},
		{
			"Date": "20090928",
			"Ticker": "ABC",
			"Open": "21.54",
			"High": "22.03",
			"Low": "21.51",
			"Close": "21.77",
			"Volume": "27318"
		},
		{
			"Date": "20090929",
			"Ticker": "ABC",
			"Open": "21.8",
			"High": "22.1",
			"Low": "21.72",
			"Close": "21.98",
			"Volume": "29941"
		},
		{
			"Date": "20090930",
			"Ticker": "ABC",
			"Open": "22.74",
			"High": "22.84",
			"Low": "22",
			"Close": "22.38",
			"Volume": "49182"
		},
		{
			"Date": "20091001",
			"Ticker": "ABC",
			"Open": "22.36",
			"High": "22.49",
			"Low": "21.85",
			"Close": "22.03",
			"Volume": "39694"
		},
		{
			"Date": "20091002",
			"Ticker": "ABC",
			"Open": "21.9",
			"High": "21.92",
			"Low": "21.57",
			"Close": "21.62",
			"Volume": "24508"
		},
		{
			"Date": "20091005",
			"Ticker": "ABC",
			"Open": "21.71",
			"High": "21.91",
			"Low": "21.44",
			"Close": "21.89",
			"Volume": "26341"
		},
		{
			"Date": "20091006",
			"Ticker": "ABC",
			"Open": "22.03",
			"High": "22.23",
			"Low": "21.76",
			"Close": "22.15",
			"Volume": "27829"
		},
		{
			"Date": "20091007",
			"Ticker": "ABC",
			"Open": "22.02",
			"High": "22.41",
			"Low": "21.93",
			"Close": "22.41",
			"Volume": "33876"
		},
		{
			"Date": "20091008",
			"Ticker": "ABC",
			"Open": "22.55",
			"High": "22.64",
			"Low": "22.38",
			"Close": "22.4",
			"Volume": "23914"
		},
		{
			"Date": "20091009",
			"Ticker": "ABC",
			"Open": "22.27",
			"High": "22.72",
			"Low": "22.15",
			"Close": "22.61",
			"Volume": "30089"
		},
		{
			"Date": "20091012",
			"Ticker": "ABC",
			"Open": "22.67",
			"High": "22.85",
			"Low": "22.61",
			"Close": "22.74",
			"Volume": "16556"
		},
		{
			"Date": "20091013",
			"Ticker": "ABC",
			"Open": "22.69",
			"High": "22.76",
			"Low": "22.53",
			"Close": "22.62",
			"Volume": "28239"
		},
		{
			"Date": "20091014",
			"Ticker": "ABC",
			"Open": "22.73",
			"High": "23.11",
			"Low": "22.63",
			"Close": "23.07",
			"Volume": "36307"
		},
		{
			"Date": "20091015",
			"Ticker": "ABC",
			"Open": "23.06",
			"High": "23.39",
			"Low": "22.95",
			"Close": "23.35",
			"Volume": "29219"
		},
		{
			"Date": "20091016",
			"Ticker": "ABC",
			"Open": "23.24",
			"High": "23.73",
			"Low": "23.24",
			"Close": "23.53",
			"Volume": "34848"
		},
		{
			"Date": "20091019",
			"Ticker": "ABC",
			"Open": "23.64",
			"High": "23.64",
			"Low": "23.31",
			"Close": "23.43",
			"Volume": "21381"
		},
		{
			"Date": "20091020",
			"Ticker": "ABC",
			"Open": "23.36",
			"High": "23.86",
			"Low": "23.36",
			"Close": "23.71",
			"Volume": "38365"
		},
		{
			"Date": "20091021",
			"Ticker": "ABC",
			"Open": "23.66",
			"High": "23.84",
			"Low": "23.46",
			"Close": "23.47",
			"Volume": "40156"
		},
		{
			"Date": "20091022",
			"Ticker": "ABC",
			"Open": "23.46",
			"High": "23.64",
			"Low": "23.33",
			"Close": "23.49",
			"Volume": "31989"
		},
		{
			"Date": "20091023",
			"Ticker": "ABC",
			"Open": "23.62",
			"High": "23.67",
			"Low": "23",
			"Close": "23.19",
			"Volume": "31327"
		},
		{
			"Date": "20091026",
			"Ticker": "ABC",
			"Open": "23.24",
			"High": "23.55",
			"Low": "22.86",
			"Close": "22.92",
			"Volume": "26715"
		},
		{
			"Date": "20091027",
			"Ticker": "ABC",
			"Open": "22.97",
			"High": "23.12",
			"Low": "22.75",
			"Close": "22.81",
			"Volume": "26266"
		},
		{
			"Date": "20091028",
			"Ticker": "ABC",
			"Open": "22.805",
			"High": "22.89",
			"Low": "22.28",
			"Close": "22.28",
			"Volume": "34237"
		},
		{
			"Date": "20091105",
			"Ticker": "ABC",
			"Open": "23.16",
			"High": "23.59",
			"Low": "23.14",
			"Close": "23.43",
			"Volume": "31501"
		},
		{
			"Date": "20091106",
			"Ticker": "ABC",
			"Open": "23.35",
			"High": "23.62",
			"Low": "23.1",
			"Close": "23.62",
			"Volume": "21197"
		},
		{
			"Date": "20091109",
			"Ticker": "ABC",
			"Open": "23.75",
			"High": "23.855",
			"Low": "23.53",
			"Close": "23.81",
			"Volume": "23858"
		},
		{
			"Date": "20091110",
			"Ticker": "ABC",
			"Open": "23.9",
			"High": "24.37",
			"Low": "23.79",
			"Close": "24.34",
			"Volume": "30846"
		},
		{
			"Date": "20091111",
			"Ticker": "ABC",
			"Open": "24.29",
			"High": "24.46",
			"Low": "24.05",
			"Close": "24.27",
			"Volume": "16878"
		},
		{
			"Date": "20091112",
			"Ticker": "ABC",
			"Open": "24.29",
			"High": "24.41",
			"Low": "23.95",
			"Close": "23.98",
			"Volume": "19918"
		},
		{
			"Date": "20091113",
			"Ticker": "ABC",
			"Open": "24.09",
			"High": "24.68",
			"Low": "24.09",
			"Close": "24.6",
			"Volume": "34179"
		},
		{
			"Date": "20091116",
			"Ticker": "ABC",
			"Open": "24.7",
			"High": "24.85",
			"Low": "24.48",
			"Close": "24.52",
			"Volume": "27667"
		},
		{
			"Date": "20091117",
			"Ticker": "ABC",
			"Open": "24.51",
			"High": "24.52",
			"Low": "24.21",
			"Close": "24.28",
			"Volume": "22480"
		},
		{
			"Date": "20091118",
			"Ticker": "ABC",
			"Open": "24.16",
			"High": "24.52",
			"Low": "24.11",
			"Close": "24.47",
			"Volume": "28734"
		},
		{
			"Date": "20091119",
			"Ticker": "ABC",
			"Open": "24.6",
			"High": "24.61",
			"Low": "24.12",
			"Close": "24.21",
			"Volume": "37158"
		},
		{
			"Date": "20091120",
			"Ticker": "ABC",
			"Open": "24.19",
			"High": "24.7",
			"Low": "24.17",
			"Close": "24.49",
			"Volume": "49072"
		},
		{
			"Date": "20091123",
			"Ticker": "ABC",
			"Open": "24.89",
			"High": "25.11",
			"Low": "24.67",
			"Close": "24.97",
			"Volume": "45500"
		},
		{
			"Date": "20091124",
			"Ticker": "ABC",
			"Open": "25.01",
			"High": "25.07",
			"Low": "24.81",
			"Close": "25.02",
			"Volume": "23413"
		},
		{
			"Date": "20091125",
			"Ticker": "ABC",
			"Open": "25.19",
			"High": "25.19",
			"Low": "24.96",
			"Close": "24.98",
			"Volume": "17760"
		},
		{
			"Date": "20091127",
			"Ticker": "ABC",
			"Open": "24.67",
			"High": "25.04",
			"Low": "24.49",
			"Close": "24.86",
			"Volume": "13724"
		},
		{
			"Date": "20091130",
			"Ticker": "ABC",
			"Open": "24.92",
			"High": "24.92",
			"Low": "24.48",
			"Close": "24.69",
			"Volume": "38127"
		},
		{
			"Date": "20091201",
			"Ticker": "ABC",
			"Open": "24.75",
			"High": "24.95",
			"Low": "24.7",
			"Close": "24.85",
			"Volume": "26291"
		},
		{
			"Date": "20091202",
			"Ticker": "ABC",
			"Open": "24.51",
			"High": "24.93",
			"Low": "24.51",
			"Close": "24.76",
			"Volume": "32246"
		},
		{
			"Date": "20091203",
			"Ticker": "ABC",
			"Open": "24.83",
			"High": "24.87",
			"Low": "24.57",
			"Close": "24.58",
			"Volume": "25985"
		},
		{
			"Date": "20091204",
			"Ticker": "ABC",
			"Open": "24.73",
			"High": "24.94",
			"Low": "24.43",
			"Close": "24.67",
			"Volume": "38588"
		},
		{
			"Date": "20091207",
			"Ticker": "ABC",
			"Open": "24.61",
			"High": "24.88",
			"Low": "24.54",
			"Close": "24.64",
			"Volume": "29340"
		},
		{
			"Date": "20091208",
			"Ticker": "ABC",
			"Open": "24.63",
			"High": "24.68",
			"Low": "24.2",
			"Close": "24.23",
			"Volume": "36184"
		},
		{
			"Date": "20091209",
			"Ticker": "ABC",
			"Open": "24.17",
			"High": "24.5",
			"Low": "24.14",
			"Close": "24.5",
			"Volume": "35504"
		},
		{
			"Date": "20091210",
			"Ticker": "ABC",
			"Open": "24.52",
			"High": "25.13",
			"Low": "24.5",
			"Close": "25.05",
			"Volume": "67026"
		},
		{
			"Date": "20091211",
			"Ticker": "ABC",
			"Open": "25.07",
			"High": "25.17",
			"Low": "24.75",
			"Close": "24.79",
			"Volume": "25183"
		},
		{
			"Date": "20091214",
			"Ticker": "ABC",
			"Open": "24.87",
			"High": "25.19",
			"Low": "24.87",
			"Close": "25",
			"Volume": "27382"
		},
		{
			"Date": "20091215",
			"Ticker": "ABC",
			"Open": "25.2",
			"High": "25.925",
			"Low": "25",
			"Close": "25.78",
			"Volume": "58322"
		},
		{
			"Date": "20091216",
			"Ticker": "ABC",
			"Open": "26.16",
			"High": "26.58",
			"Low": "26.08",
			"Close": "26.13",
			"Volume": "64152"
		},
		{
			"Date": "20091217",
			"Ticker": "ABC",
			"Open": "26.11",
			"High": "26.25",
			"Low": "25.86",
			"Close": "25.86",
			"Volume": "42083"
		},
		{
			"Date": "20091218",
			"Ticker": "ABC",
			"Open": "26",
			"High": "26.15",
			"Low": "25.78",
			"Close": "26.03",
			"Volume": "49903"
		},
		{
			"Date": "20091221",
			"Ticker": "ABC",
			"Open": "26.18",
			"High": "26.55",
			"Low": "26",
			"Close": "26.11",
			"Volume": "26451"
		},
		{
			"Date": "20091222",
			"Ticker": "ABC",
			"Open": "26.25",
			"High": "26.42",
			"Low": "26.14",
			"Close": "26.31",
			"Volume": "20217"
		},
		{
			"Date": "20091223",
			"Ticker": "ABC",
			"Open": "26.29",
			"High": "26.45",
			"Low": "26.2",
			"Close": "26.32",
			"Volume": "26096"
		},
		{
			"Date": "20091224",
			"Ticker": "ABC",
			"Open": "26.39",
			"High": "26.4552",
			"Low": "26.32",
			"Close": "26.34",
			"Volume": "4819"
		},
		{
			"Date": "20091228",
			"Ticker": "ABC",
			"Open": "26.39",
			"High": "26.53",
			"Low": "26.27",
			"Close": "26.41",
			"Volume": "11228"
		},
		{
			"Date": "20091229",
			"Ticker": "ABC",
			"Open": "26.41",
			"High": "26.56",
			"Low": "26.36",
			"Close": "26.37",
			"Volume": "14473"
		},
		{
			"Date": "20091230",
			"Ticker": "ABC",
			"Open": "26.29",
			"High": "26.38",
			"Low": "26.115",
			"Close": "26.31",
			"Volume": "16182"
		},
		{
			"Date": "20091231",
			"Ticker": "ABC",
			"Open": "26.39",
			"High": "26.42",
			"Low": "26.04",
			"Close": "26.07",
			"Volume": "14663"
		},
		{
			"Date": "20100104",
			"Ticker": "ABC",
			"Open": "26.29",
			"High": "26.69",
			"Low": "26.14",
			"Close": "26.63",
			"Volume": "24558"
		},
		{
			"Date": "20100105",
			"Ticker": "ABC",
			"Open": "26.65",
			"High": "26.65",
			"Low": "26.3793",
			"Close": "26.44",
			"Volume": "24767"
		},
		{
			"Date": "20100106",
			"Ticker": "ABC",
			"Open": "26.39",
			"High": "26.43",
			"Low": "26.08",
			"Close": "26.19",
			"Volume": "40399"
		},
		{
			"Date": "20100107",
			"Ticker": "ABC",
			"Open": "25.77",
			"High": "26.16",
			"Low": "25.66",
			"Close": "25.77",
			"Volume": "52446"
		},
		{
			"Date": "20100108",
			"Ticker": "ABC",
			"Open": "25.86",
			"High": "26.1",
			"Low": "25.68",
			"Close": "26.05",
			"Volume": "42774"
		},
		{
			"Date": "20100111",
			"Ticker": "ABC",
			"Open": "26.24",
			"High": "26.48",
			"Low": "26.11",
			"Close": "26.34",
			"Volume": "19143"
		},
		{
			"Date": "20100112",
			"Ticker": "ABC",
			"Open": "26.32",
			"High": "26.55",
			"Low": "26.19",
			"Close": "26.52",
			"Volume": "31425"
		},
		{
			"Date": "20100113",
			"Ticker": "ABC",
			"Open": "26.59",
			"High": "27.13",
			"Low": "26.59",
			"Close": "27.04",
			"Volume": "31502"
		},
		{
			"Date": "20100114",
			"Ticker": "ABC",
			"Open": "26.97",
			"High": "27.25",
			"Low": "26.85",
			"Close": "27.21",
			"Volume": "20542"
		},
		{
			"Date": "20100115",
			"Ticker": "ABC",
			"Open": "27.26",
			"High": "27.27",
			"Low": "26.81",
			"Close": "26.92",
			"Volume": "20763"
		},
		{
			"Date": "20100119",
			"Ticker": "ABC",
			"Open": "26.96",
			"High": "27.61",
			"Low": "26.92",
			"Close": "27.37",
			"Volume": "28261"
		},
		{
			"Date": "20100120",
			"Ticker": "ABC",
			"Open": "27.35",
			"High": "27.35",
			"Low": "26.76",
			"Close": "27.14",
			"Volume": "26836"
		},
		{
			"Date": "20100121",
			"Ticker": "ABC",
			"Open": "27.11",
			"High": "27.18",
			"Low": "26.25",
			"Close": "26.58",
			"Volume": "39609"
		},
		{
			"Date": "20100122",
			"Ticker": "ABC",
			"Open": "26.47",
			"High": "26.8",
			"Low": "26.02",
			"Close": "26.66",
			"Volume": "43215"
		},
		{
			"Date": "20100125",
			"Ticker": "ABC",
			"Open": "26.79",
			"High": "27.34",
			"Low": "26.68",
			"Close": "27.11",
			"Volume": "52850"
		},
		{
			"Date": "20100126",
			"Ticker": "ABC",
			"Open": "27.86",
			"High": "28",
			"Low": "27.34",
			"Close": "27.44",
			"Volume": "55306"
		},
		{
			"Date": "20100127",
			"Ticker": "ABC",
			"Open": "27.37",
			"High": "27.64",
			"Low": "27.04",
			"Close": "27.26",
			"Volume": "48850"
		},
		{
			"Date": "20100128",
			"Ticker": "ABC",
			"Open": "27.24",
			"High": "27.76",
			"Low": "27.24",
			"Close": "27.28",
			"Volume": "33778"
		},
		{
			"Date": "20100129",
			"Ticker": "ABC",
			"Open": "27.41",
			"High": "27.61",
			"Low": "27.23",
			"Close": "27.26",
			"Volume": "41371"
		},
		{
			"Date": "20100201",
			"Ticker": "ABC",
			"Open": "27.46",
			"High": "27.78",
			"Low": "27.08",
			"Close": "27.75",
			"Volume": "36851"
		},
		{
			"Date": "20100202",
			"Ticker": "ABC",
			"Open": "27.8",
			"High": "28.61",
			"Low": "27.66",
			"Close": "28.55",
			"Volume": "60125"
		},
		{
			"Date": "20100203",
			"Ticker": "ABC",
			"Open": "28.51",
			"High": "28.59",
			"Low": "28.03",
			"Close": "28.32",
			"Volume": "38010"
		},
		{
			"Date": "20100204",
			"Ticker": "ABC",
			"Open": "28.26",
			"High": "28.26",
			"Low": "27.42",
			"Close": "27.42",
			"Volume": "46074"
		},
		{
			"Date": "20100205",
			"Ticker": "ABC",
			"Open": "27.37",
			"High": "27.4",
			"Low": "26.65",
			"Close": "27.01",
			"Volume": "56375"
		},
		{
			"Date": "20100208",
			"Ticker": "ABC",
			"Open": "27.03",
			"High": "27.19",
			"Low": "26.82",
			"Close": "26.95",
			"Volume": "28112"
		},
		{
			"Date": "20100209",
			"Ticker": "ABC",
			"Open": "27.18",
			"High": "27.4",
			"Low": "27",
			"Close": "27.16",
			"Volume": "21675"
		},
		{
			"Date": "20100210",
			"Ticker": "ABC",
			"Open": "27.19",
			"High": "27.32",
			"Low": "26.68",
			"Close": "27.19",
			"Volume": "56552"
		},
		{
			"Date": "20100211",
			"Ticker": "ABC",
			"Open": "27.18",
			"High": "27.57",
			"Low": "26.95",
			"Close": "27.52",
			"Volume": "40937"
		},
		{
			"Date": "20100212",
			"Ticker": "ABC",
			"Open": "27.39",
			"High": "27.39",
			"Low": "27.02",
			"Close": "27.35",
			"Volume": "25876"
		},
		{
			"Date": "20100216",
			"Ticker": "ABC",
			"Open": "27.66",
			"High": "27.66",
			"Low": "27.31",
			"Close": "27.57",
			"Volume": "33288"
		},
		{
			"Date": "20100217",
			"Ticker": "ABC",
			"Open": "27.73",
			"High": "27.78",
			"Low": "27.06",
			"Close": "27.59",
			"Volume": "58689"
		},
		{
			"Date": "20100218",
			"Ticker": "ABC",
			"Open": "27.58",
			"High": "27.9",
			"Low": "27.5",
			"Close": "27.86",
			"Volume": "29311"
		},
		{
			"Date": "20100219",
			"Ticker": "ABC",
			"Open": "27.87",
			"High": "28.19",
			"Low": "27.6",
			"Close": "28.14",
			"Volume": "38623"
		},
		{
			"Date": "20100222",
			"Ticker": "ABC",
			"Open": "28.24",
			"High": "28.24",
			"Low": "27.76",
			"Close": "27.89",
			"Volume": "32561"
		},
		{
			"Date": "20100223",
			"Ticker": "ABC",
			"Open": "27.82",
			"High": "27.97",
			"Low": "27.57",
			"Close": "27.75",
			"Volume": "54070"
		},
		{
			"Date": "20100224",
			"Ticker": "ABC",
			"Open": "27.77",
			"High": "28.04",
			"Low": "27.76",
			"Close": "27.89",
			"Volume": "26524"
		},
		{
			"Date": "20100225",
			"Ticker": "ABC",
			"Open": "27.7",
			"High": "28.08",
			"Low": "27.58",
			"Close": "28.08",
			"Volume": "31683"
		},
		{
			"Date": "20100226",
			"Ticker": "ABC",
			"Open": "28.08",
			"High": "28.19",
			"Low": "27.89",
			"Close": "28.04",
			"Volume": "40366"
		},
		{
			"Date": "20100301",
			"Ticker": "ABC",
			"Open": "27.97",
			"High": "28.25",
			"Low": "27.75",
			"Close": "28.07",
			"Volume": "31167"
		},
		{
			"Date": "20100302",
			"Ticker": "ABC",
			"Open": "28.2",
			"High": "28.5",
			"Low": "28.08",
			"Close": "28.46",
			"Volume": "23662"
		},
		{
			"Date": "20100303",
			"Ticker": "ABC",
			"Open": "28.5",
			"High": "28.5",
			"Low": "27.97",
			"Close": "28",
			"Volume": "30902"
		},
		{
			"Date": "20100304",
			"Ticker": "ABC",
			"Open": "28.13",
			"High": "28.16",
			"Low": "27.91",
			"Close": "27.99",
			"Volume": "26593"
		},
		{
			"Date": "20100305",
			"Ticker": "ABC",
			"Open": "28.02",
			"High": "28.41",
			"Low": "27.98",
			"Close": "28.41",
			"Volume": "27158"
		},
		{
			"Date": "20100308",
			"Ticker": "ABC",
			"Open": "28.41",
			"High": "28.45",
			"Low": "28.05",
			"Close": "28.07",
			"Volume": "24699"
		},
		{
			"Date": "20100309",
			"Ticker": "ABC",
			"Open": "28.02",
			"High": "28.16",
			"Low": "27.9",
			"Close": "27.99",
			"Volume": "29078"
		},
		{
			"Date": "20100310",
			"Ticker": "ABC",
			"Open": "27.95",
			"High": "28.19",
			"Low": "27.88",
			"Close": "28.05",
			"Volume": "23645"
		},
		{
			"Date": "20100311",
			"Ticker": "ABC",
			"Open": "27.95",
			"High": "28.12",
			"Low": "27.8",
			"Close": "28.08",
			"Volume": "16787"
		},
		{
			"Date": "20100312",
			"Ticker": "ABC",
			"Open": "28.17",
			"High": "28.25",
			"Low": "27.8",
			"Close": "27.93",
			"Volume": "23371"
		},
		{
			"Date": "20100315",
			"Ticker": "ABC",
			"Open": "27.9",
			"High": "27.9",
			"Low": "27.61",
			"Close": "27.75",
			"Volume": "27551"
		},
		{
			"Date": "20100316",
			"Ticker": "ABC",
			"Open": "28.42",
			"High": "28.45",
			"Low": "27.93",
			"Close": "28.36",
			"Volume": "42108"
		},
		{
			"Date": "20100317",
			"Ticker": "ABC",
			"Open": "28.57",
			"High": "28.58",
			"Low": "28.18",
			"Close": "28.2",
			"Volume": "30884"
		},
		{
			"Date": "20100318",
			"Ticker": "ABC",
			"Open": "28.37",
			"High": "28.62",
			"Low": "28.19",
			"Close": "28.57",
			"Volume": "27565"
		},
		{
			"Date": "20100319",
			"Ticker": "ABC",
			"Open": "28.68",
			"High": "29.11",
			"Low": "28.27",
			"Close": "28.68",
			"Volume": "54685"
		},
		{
			"Date": "20100322",
			"Ticker": "ABC",
			"Open": "28.62",
			"High": "29.31",
			"Low": "28.5",
			"Close": "29.29",
			"Volume": "48487"
		},
		{
			"Date": "20100323",
			"Ticker": "ABC",
			"Open": "29.43",
			"High": "29.43",
			"Low": "28.9015",
			"Close": "29.21",
			"Volume": "23456"
		},
		{
			"Date": "20100324",
			"Ticker": "ABC",
			"Open": "29.27",
			"High": "29.3",
			"Low": "28.66",
			"Close": "28.72",
			"Volume": "21585"
		},
		{
			"Date": "20100325",
			"Ticker": "ABC",
			"Open": "28.89",
			"High": "28.895",
			"Low": "28.55",
			"Close": "28.6",
			"Volume": "26237"
		},
		{
			"Date": "20100326",
			"Ticker": "ABC",
			"Open": "28.63",
			"High": "28.72",
			"Low": "28.3",
			"Close": "28.59",
			"Volume": "25548"
		},
		{
			"Date": "20100329",
			"Ticker": "ABC",
			"Open": "28.76",
			"High": "28.93",
			"Low": "28.62",
			"Close": "28.84",
			"Volume": "20647"
		},
		{
			"Date": "20100330",
			"Ticker": "ABC",
			"Open": "28.93",
			"High": "29.33",
			"Low": "28.86",
			"Close": "29.28",
			"Volume": "27411"
		},
		{
			"Date": "20100331",
			"Ticker": "ABC",
			"Open": "29.27",
			"High": "29.27",
			"Low": "28.75",
			"Close": "28.92",
			"Volume": "24072"
		},
		{
			"Date": "20100401",
			"Ticker": "ABC",
			"Open": "28.99",
			"High": "29.13",
			"Low": "28.42",
			"Close": "28.59",
			"Volume": "36808"
		},
		{
			"Date": "20100405",
			"Ticker": "ABC",
			"Open": "28.63",
			"High": "29.02",
			"Low": "28.53",
			"Close": "28.92",
			"Volume": "23396"
		},
		{
			"Date": "20100406",
			"Ticker": "ABC",
			"Open": "28.92",
			"High": "29.14",
			"Low": "28.8",
			"Close": "29.03",
			"Volume": "17390"
		},
		{
			"Date": "20100407",
			"Ticker": "ABC",
			"Open": "29.07",
			"High": "29.07",
			"Low": "28.77",
			"Close": "29.04",
			"Volume": "31517"
		},
		{
			"Date": "20100408",
			"Ticker": "ABC",
			"Open": "29.58",
			"High": "29.58",
			"Low": "29.1",
			"Close": "29.18",
			"Volume": "37672"
		},
		{
			"Date": "20100409",
			"Ticker": "ABC",
			"Open": "29.26",
			"High": "29.48",
			"Low": "29.18",
			"Close": "29.47",
			"Volume": "20186"
		},
		{
			"Date": "20100412",
			"Ticker": "ABC",
			"Open": "29.49",
			"High": "29.51",
			"Low": "29.27",
			"Close": "29.34",
			"Volume": "18394"
		},
		{
			"Date": "20100413",
			"Ticker": "ABC",
			"Open": "29.24",
			"High": "29.5",
			"Low": "28.95",
			"Close": "29.46",
			"Volume": "27779"
		},
		{
			"Date": "20100414",
			"Ticker": "ABC",
			"Open": "29.49",
			"High": "29.5",
			"Low": "29.02",
			"Close": "29.2",
			"Volume": "27639"
		},
		{
			"Date": "20100415",
			"Ticker": "ABC",
			"Open": "29.19",
			"High": "29.5",
			"Low": "29.09",
			"Close": "29.49",
			"Volume": "22171"
		},
		{
			"Date": "20100416",
			"Ticker": "ABC",
			"Open": "29.5",
			"High": "29.92",
			"Low": "29.36",
			"Close": "29.88",
			"Volume": "59921"
		},
		{
			"Date": "20100419",
			"Ticker": "ABC",
			"Open": "29.89",
			"High": "29.99",
			"Low": "29.58",
			"Close": "29.82",
			"Volume": "43065"
		},
		{
			"Date": "20100420",
			"Ticker": "ABC",
			"Open": "29.93",
			"High": "30.49",
			"Low": "29.88",
			"Close": "30.38",
			"Volume": "41900"
		},
		{
			"Date": "20100421",
			"Ticker": "ABC",
			"Open": "30.43",
			"High": "30.59",
			"Low": "29.98",
			"Close": "30.36",
			"Volume": "59689"
		},
		{
			"Date": "20100422",
			"Ticker": "ABC",
			"Open": "31.29",
			"High": "31.791",
			"Low": "30.76",
			"Close": "31.41",
			"Volume": "84444"
		},
		{
			"Date": "20100423",
			"Ticker": "ABC",
			"Open": "31.5",
			"High": "31.57",
			"Low": "30.79",
			"Close": "31.13",
			"Volume": "49507"
		},
		{
			"Date": "20100426",
			"Ticker": "ABC",
			"Open": "31.1",
			"High": "31.44",
			"Low": "30.83",
			"Close": "31.23",
			"Volume": "42819"
		},
		{
			"Date": "20100427",
			"Ticker": "ABC",
			"Open": "31",
			"High": "31.39",
			"Low": "30.77",
			"Close": "30.86",
			"Volume": "35710"
		},
		{
			"Date": "20100428",
			"Ticker": "ABC",
			"Open": "30.91",
			"High": "31.15",
			"Low": "30.68",
			"Close": "30.79",
			"Volume": "30873"
		},
		{
			"Date": "20100429",
			"Ticker": "ABC",
			"Open": "30.97",
			"High": "31.64",
			"Low": "30.93",
			"Close": "31.36",
			"Volume": "39608"
		},
		{
			"Date": "20100430",
			"Ticker": "ABC",
			"Open": "31.42",
			"High": "31.6",
			"Low": "30.85",
			"Close": "30.85",
			"Volume": "33805"
		},
		{
			"Date": "20100503",
			"Ticker": "ABC",
			"Open": "31.03",
			"High": "31.36",
			"Low": "30.91",
			"Close": "31.28",
			"Volume": "24723"
		},
		{
			"Date": "20100504",
			"Ticker": "ABC",
			"Open": "31.05",
			"High": "31.18",
			"Low": "30.72",
			"Close": "30.97",
			"Volume": "28489"
		},
		{
			"Date": "20100505",
			"Ticker": "ABC",
			"Open": "30.53",
			"High": "31.2",
			"Low": "30.53",
			"Close": "31.03",
			"Volume": "36699"
		},
		{
			"Date": "20100506",
			"Ticker": "ABC",
			"Open": "30.87",
			"High": "31.43",
			"Low": "28.95",
			"Close": "30.75",
			"Volume": "60567"
		},
		{
			"Date": "20100507",
			"Ticker": "ABC",
			"Open": "30.56",
			"High": "30.61",
			"Low": "29.39",
			"Close": "29.91",
			"Volume": "62723"
		},
		{
			"Date": "20100510",
			"Ticker": "ABC",
			"Open": "30.83",
			"High": "31.32",
			"Low": "30.57",
			"Close": "31.06",
			"Volume": "39385"
		},
		{
			"Date": "20100511",
			"Ticker": "ABC",
			"Open": "30.63",
			"High": "31.5",
			"Low": "30.61",
			"Close": "31.22",
			"Volume": "40619"
		},
		{
			"Date": "20100512",
			"Ticker": "ABC",
			"Open": "31.27",
			"High": "31.84",
			"Low": "31.01",
			"Close": "31.79",
			"Volume": "31520"
		},
		{
			"Date": "20100513",
			"Ticker": "ABC",
			"Open": "31.92",
			"High": "31.96",
			"Low": "31.58",
			"Close": "31.6",
			"Volume": "39514"
		},
		{
			"Date": "20100514",
			"Ticker": "ABC",
			"Open": "31.49",
			"High": "31.56",
			"Low": "31.05",
			"Close": "31.31",
			"Volume": "35993"
		},
		{
			"Date": "20100517",
			"Ticker": "ABC",
			"Open": "31.34",
			"High": "31.71",
			"Low": "30.94",
			"Close": "31.4",
			"Volume": "37948"
		},
		{
			"Date": "20100518",
			"Ticker": "ABC",
			"Open": "31.72",
			"High": "31.96",
			"Low": "31.08",
			"Close": "31.29",
			"Volume": "45244"
		},
		{
			"Date": "20100519",
			"Ticker": "ABC",
			"Open": "31.14",
			"High": "31.58",
			"Low": "31",
			"Close": "31.42",
			"Volume": "40028"
		},
		{
			"Date": "20100520",
			"Ticker": "ABC",
			"Open": "31.03",
			"High": "31.26",
			"Low": "30.59",
			"Close": "30.68",
			"Volume": "64194"
		},
		{
			"Date": "20100521",
			"Ticker": "ABC",
			"Open": "30.07",
			"High": "30.98",
			"Low": "30.05",
			"Close": "30.83",
			"Volume": "65021"
		},
		{
			"Date": "20100524",
			"Ticker": "ABC",
			"Open": "30.8",
			"High": "31.07",
			"Low": "30.42",
			"Close": "30.7",
			"Volume": "51260"
		},
		{
			"Date": "20100525",
			"Ticker": "ABC",
			"Open": "30.03",
			"High": "30.3",
			"Low": "29.5",
			"Close": "30.27",
			"Volume": "60310"
		},
		{
			"Date": "20100526",
			"Ticker": "ABC",
			"Open": "30.57",
			"High": "30.98",
			"Low": "30.32",
			"Close": "30.44",
			"Volume": "49606"
		},
		{
			"Date": "20100527",
			"Ticker": "ABC",
			"Open": "30.88",
			"High": "31.59",
			"Low": "30.85",
			"Close": "31.57",
			"Volume": "41448"
		},
		{
			"Date": "20100528",
			"Ticker": "ABC",
			"Open": "31.54",
			"High": "31.7",
			"Low": "30.92",
			"Close": "31.28",
			"Volume": "48960"
		},
		{
			"Date": "20100601",
			"Ticker": "ABC",
			"Open": "31.03",
			"High": "31.4365",
			"Low": "30.73",
			"Close": "30.81",
			"Volume": "40957"
		},
		{
			"Date": "20100602",
			"Ticker": "ABC",
			"Open": "30.87",
			"High": "31.76",
			"Low": "30.73",
			"Close": "31.73",
			"Volume": "38924"
		},
		{
			"Date": "20100603",
			"Ticker": "ABC",
			"Open": "31.78",
			"High": "32.49",
			"Low": "31.76",
			"Close": "32.08",
			"Volume": "56393"
		},
		{
			"Date": "20100604",
			"Ticker": "ABC",
			"Open": "31.53",
			"High": "31.71",
			"Low": "30.66",
			"Close": "30.77",
			"Volume": "54587"
		},
		{
			"Date": "20100607",
			"Ticker": "ABC",
			"Open": "30.83",
			"High": "31.27",
			"Low": "30.5",
			"Close": "30.77",
			"Volume": "55584"
		},
		{
			"Date": "20100608",
			"Ticker": "ABC",
			"Open": "30.92",
			"High": "30.94",
			"Low": "30.31",
			"Close": "30.62",
			"Volume": "51671"
		},
		{
			"Date": "20100609",
			"Ticker": "ABC",
			"Open": "30.78",
			"High": "31.56",
			"Low": "30.75",
			"Close": "30.94",
			"Volume": "39994"
		},
		{
			"Date": "20100610",
			"Ticker": "ABC",
			"Open": "31.45",
			"High": "31.78",
			"Low": "31.29",
			"Close": "31.69",
			"Volume": "29488"
		},
		{
			"Date": "20100611",
			"Ticker": "ABC",
			"Open": "31.45",
			"High": "31.98",
			"Low": "31.36",
			"Close": "31.92",
			"Volume": "28442"
		},
		{
			"Date": "20100614",
			"Ticker": "ABC",
			"Open": "31.97",
			"High": "32.46",
			"Low": "31.97",
			"Close": "32.21",
			"Volume": "35151"
		},
		{
			"Date": "20100615",
			"Ticker": "ABC",
			"Open": "32.49",
			"High": "32.5",
			"Low": "32.21",
			"Close": "32.46",
			"Volume": "30134"
		},
		{
			"Date": "20100616",
			"Ticker": "ABC",
			"Open": "32.43",
			"High": "32.975",
			"Low": "32.33",
			"Close": "32.76",
			"Volume": "46022"
		},
		{
			"Date": "20100617",
			"Ticker": "ABC",
			"Open": "33.19",
			"High": "33.27",
			"Low": "32.62",
			"Close": "32.88",
			"Volume": "49440"
		},
		{
			"Date": "20100618",
			"Ticker": "ABC",
			"Open": "32.87",
			"High": "33.03",
			"Low": "32.5",
			"Close": "32.56",
			"Volume": "25854"
		},
		{
			"Date": "20100621",
			"Ticker": "ABC",
			"Open": "32.8",
			"High": "32.994",
			"Low": "32.29",
			"Close": "32.42",
			"Volume": "31694"
		},
		{
			"Date": "20100622",
			"Ticker": "ABC",
			"Open": "32.5",
			"High": "32.65",
			"Low": "31.9",
			"Close": "31.96",
			"Volume": "33832"
		},
		{
			"Date": "20100623",
			"Ticker": "ABC",
			"Open": "31.82",
			"High": "32.05",
			"Low": "31.51",
			"Close": "31.87",
			"Volume": "33149"
		},
		{
			"Date": "20100624",
			"Ticker": "ABC",
			"Open": "31.83",
			"High": "31.93",
			"Low": "31.45",
			"Close": "31.59",
			"Volume": "29398"
		},
		{
			"Date": "20100625",
			"Ticker": "ABC",
			"Open": "31.56",
			"High": "32",
			"Low": "31.43",
			"Close": "31.87",
			"Volume": "44071"
		},
		{
			"Date": "20100628",
			"Ticker": "ABC",
			"Open": "32.01",
			"High": "32.67",
			"Low": "31.64",
			"Close": "32.53",
			"Volume": "50448"
		},
		{
			"Date": "20100629",
			"Ticker": "ABC",
			"Open": "32.21",
			"High": "32.21",
			"Low": "31.6",
			"Close": "31.72",
			"Volume": "85269"
		},
		{
			"Date": "20100630",
			"Ticker": "ABC",
			"Open": "31.75",
			"High": "32.36",
			"Low": "31.46",
			"Close": "31.75",
			"Volume": "72558"
		},
		{
			"Date": "20100701",
			"Ticker": "ABC",
			"Open": "31.61",
			"High": "31.64",
			"Low": "30.31",
			"Close": "30.93",
			"Volume": "83483"
		},
		{
			"Date": "20100702",
			"Ticker": "ABC",
			"Open": "30.95",
			"High": "31.17",
			"Low": "30.725",
			"Close": "30.92",
			"Volume": "34520"
		},
		{
			"Date": "20100706",
			"Ticker": "ABC",
			"Open": "31.41",
			"High": "31.69",
			"Low": "31.12",
			"Close": "31.34",
			"Volume": "33230"
		},
		{
			"Date": "20100707",
			"Ticker": "ABC",
			"Open": "31.38",
			"High": "31.83",
			"Low": "31.02",
			"Close": "31.78",
			"Volume": "45471"
		},
		{
			"Date": "20100708",
			"Ticker": "ABC",
			"Open": "31.97",
			"High": "32.07",
			"Low": "31.725",
			"Close": "31.92",
			"Volume": "29203"
		},
		{
			"Date": "20100709",
			"Ticker": "ABC",
			"Open": "32.01",
			"High": "32.01",
			"Low": "31.72",
			"Close": "31.84",
			"Volume": "20593"
		},
		{
			"Date": "20100712",
			"Ticker": "ABC",
			"Open": "31.78",
			"High": "31.82",
			"Low": "31.58",
			"Close": "31.75",
			"Volume": "29045"
		},
		{
			"Date": "20100713",
			"Ticker": "ABC",
			"Open": "31.97",
			"High": "32.54",
			"Low": "31.97",
			"Close": "32.33",
			"Volume": "23028"
		},
		{
			"Date": "20100714",
			"Ticker": "ABC",
			"Open": "32.32",
			"High": "32.855",
			"Low": "32.05",
			"Close": "32.79",
			"Volume": "29910"
		},
		{
			"Date": "20100715",
			"Ticker": "ABC",
			"Open": "32.72",
			"High": "32.93",
			"Low": "32.5",
			"Close": "32.73",
			"Volume": "35728"
		},
		{
			"Date": "20100716",
			"Ticker": "ABC",
			"Open": "32.57",
			"High": "32.74",
			"Low": "32.1",
			"Close": "32.14",
			"Volume": "27193"
		},
		{
			"Date": "20100719",
			"Ticker": "ABC",
			"Open": "32.18",
			"High": "32.27",
			"Low": "31.8",
			"Close": "31.99",
			"Volume": "20453"
		},
		{
			"Date": "20100720",
			"Ticker": "ABC",
			"Open": "31.79",
			"High": "32.27",
			"Low": "31.61",
			"Close": "32.26",
			"Volume": "22522"
		},
		{
			"Date": "20100721",
			"Ticker": "ABC",
			"Open": "32.35",
			"High": "32.44",
			"Low": "31.85",
			"Close": "32.01",
			"Volume": "31942"
		},
		{
			"Date": "20100722",
			"Ticker": "ABC",
			"Open": "32.45",
			"High": "32.46",
			"Low": "29.53",
			"Close": "29.63",
			"Volume": "169784"
		},
		{
			"Date": "20100723",
			"Ticker": "ABC",
			"Open": "29.67",
			"High": "30.72",
			"Low": "28.95",
			"Close": "30.53",
			"Volume": "180316"
		},
		{
			"Date": "20100726",
			"Ticker": "ABC",
			"Open": "30.61",
			"High": "30.9",
			"Low": "29.95",
			"Close": "30.5",
			"Volume": "88487"
		},
		{
			"Date": "20100727",
			"Ticker": "ABC",
			"Open": "30.61",
			"High": "30.63",
			"Low": "27.82",
			"Close": "29.14",
			"Volume": "192412"
		},
		{
			"Date": "20100728",
			"Ticker": "ABC",
			"Open": "29.17",
			"High": "29.21",
			"Low": "28.14",
			"Close": "28.93",
			"Volume": "83817"
		},
		{
			"Date": "20100729",
			"Ticker": "ABC",
			"Open": "29.31",
			"High": "29.59",
			"Low": "28.63",
			"Close": "28.98",
			"Volume": "63594"
		},
		{
			"Date": "20100730",
			"Ticker": "ABC",
			"Open": "28.65",
			"High": "30.2",
			"Low": "28.53",
			"Close": "29.97",
			"Volume": "101242"
		},
		{
			"Date": "20100802",
			"Ticker": "ABC",
			"Open": "30.28",
			"High": "30.79",
			"Low": "30.19",
			"Close": "30.58",
			"Volume": "59208"
		},
		{
			"Date": "20100803",
			"Ticker": "ABC",
			"Open": "30.6",
			"High": "30.6",
			"Low": "29.93",
			"Close": "29.98",
			"Volume": "37422"
		},
		{
			"Date": "20100804",
			"Ticker": "ABC",
			"Open": "30.03",
			"High": "30.41",
			"Low": "29.95",
			"Close": "30.36",
			"Volume": "32138"
		},
		{
			"Date": "20100805",
			"Ticker": "ABC",
			"Open": "30.08",
			"High": "30.37",
			"Low": "29.9",
			"Close": "30.34",
			"Volume": "30316"
		},
		{
			"Date": "20100806",
			"Ticker": "ABC",
			"Open": "30.15",
			"High": "30.33",
			"Low": "29.83",
			"Close": "30.24",
			"Volume": "32527"
		},
		{
			"Date": "20100809",
			"Ticker": "ABC",
			"Open": "30.26",
			"High": "30.36",
			"Low": "29.89",
			"Close": "30.05",
			"Volume": "25345"
		},
		{
			"Date": "20100810",
			"Ticker": "ABC",
			"Open": "29.82",
			"High": "30.085",
			"Low": "29.65",
			"Close": "29.97",
			"Volume": "28542"
		},
		{
			"Date": "20100811",
			"Ticker": "ABC",
			"Open": "29.54",
			"High": "29.54",
			"Low": "29.05",
			"Close": "29.12",
			"Volume": "32602"
		},
		{
			"Date": "20100812",
			"Ticker": "ABC",
			"Open": "28.75",
			"High": "29.23",
			"Low": "28.59",
			"Close": "29.15",
			"Volume": "23014"
		},
		{
			"Date": "20100813",
			"Ticker": "ABC",
			"Open": "29.01",
			"High": "29.13",
			"Low": "28.69",
			"Close": "29.04",
			"Volume": "16196"
		},
		{
			"Date": "20100816",
			"Ticker": "ABC",
			"Open": "28.75",
			"High": "29.03",
			"Low": "28.51",
			"Close": "28.71",
			"Volume": "25859"
		},
		{
			"Date": "20100817",
			"Ticker": "ABC",
			"Open": "28.95",
			"High": "29.56",
			"Low": "28.73",
			"Close": "29.49",
			"Volume": "29097"
		},
		{
			"Date": "20100819",
			"Ticker": "ABC",
			"Open": "29.3",
			"High": "29.41",
			"Low": "28.75",
			"Close": "29.17",
			"Volume": "26471"
		},
		{
			"Date": "20100820",
			"Ticker": "ABC",
			"Open": "28.87",
			"High": "29.06",
			"Low": "28.72",
			"Close": "28.92",
			"Volume": "25710"
		},
		{
			"Date": "20090821",
			"Ticker": "ABT",
			"Open": "45.58",
			"High": "46",
			"Low": "45.315",
			"Close": "45.39",
			"Volume": "84699"
		},
		{
			"Date": "20090824",
			"Ticker": "ABT",
			"Open": "45.73",
			"High": "46.13",
			"Low": "45.25",
			"Close": "46.08",
			"Volume": "92196"
		},
		{
			"Date": "20090825",
			"Ticker": "ABT",
			"Open": "46.02",
			"High": "46.31",
			"Low": "45.9",
			"Close": "45.92",
			"Volume": "69281"
		},
		{
			"Date": "20090826",
			"Ticker": "ABT",
			"Open": "45.82",
			"High": "46.39",
			"Low": "45.75",
			"Close": "46.07",
			"Volume": "65988"
		},
		{
			"Date": "20090827",
			"Ticker": "ABT",
			"Open": "46.17",
			"High": "46.66",
			"Low": "45.91",
			"Close": "46.61",
			"Volume": "78030"
		},
		{
			"Date": "20090828",
			"Ticker": "ABT",
			"Open": "46.64",
			"High": "46.65",
			"Low": "45.69",
			"Close": "45.92",
			"Volume": "62828"
		},
		{
			"Date": "20090831",
			"Ticker": "ABT",
			"Open": "45.77",
			"High": "46.27",
			"Low": "45.02",
			"Close": "45.23",
			"Volume": "98505"
		},
		{
			"Date": "20090901",
			"Ticker": "ABT",
			"Open": "45.08",
			"High": "45.74",
			"Low": "44.84",
			"Close": "45.12",
			"Volume": "75161"
		},
		{
			"Date": "20090902",
			"Ticker": "ABT",
			"Open": "45.1",
			"High": "45.39",
			"Low": "44.72",
			"Close": "45",
			"Volume": "67755"
		},
		{
			"Date": "20090903",
			"Ticker": "ABT",
			"Open": "45.23",
			"High": "45.23",
			"Low": "44.75",
			"Close": "45.06",
			"Volume": "55229"
		},
		{
			"Date": "20090904",
			"Ticker": "ABT",
			"Open": "45.15",
			"High": "45.67",
			"Low": "44.89",
			"Close": "45.63",
			"Volume": "51186"
		},
		{
			"Date": "20090909",
			"Ticker": "ABT",
			"Open": "45.99",
			"High": "46.62",
			"Low": "45.86",
			"Close": "46.36",
			"Volume": "84107"
		},
		{
			"Date": "20090910",
			"Ticker": "ABT",
			"Open": "46.37",
			"High": "46.87",
			"Low": "45.81",
			"Close": "46.87",
			"Volume": "99143"
		},
		{
			"Date": "20090911",
			"Ticker": "ABT",
			"Open": "46.89",
			"High": "46.98",
			"Low": "46.56",
			"Close": "46.83",
			"Volume": "80041"
		},
		{
			"Date": "20090914",
			"Ticker": "ABT",
			"Open": "46.82",
			"High": "47.4599",
			"Low": "46.71",
			"Close": "47.33",
			"Volume": "102384"
		},
		{
			"Date": "20090915",
			"Ticker": "ABT",
			"Open": "47.34",
			"High": "47.5",
			"Low": "46.95",
			"Close": "47.09",
			"Volume": "71966"
		},
		{
			"Date": "20090916",
			"Ticker": "ABT",
			"Open": "47.28",
			"High": "47.28",
			"Low": "46.3",
			"Close": "46.72",
			"Volume": "76355"
		},
		{
			"Date": "20090917",
			"Ticker": "ABT",
			"Open": "46.74",
			"High": "47",
			"Low": "46.36",
			"Close": "46.36",
			"Volume": "69643"
		},
		{
			"Date": "20090918",
			"Ticker": "ABT",
			"Open": "46.47",
			"High": "46.47",
			"Low": "45.8",
			"Close": "45.97",
			"Volume": "150093"
		},
		{
			"Date": "20090921",
			"Ticker": "ABT",
			"Open": "45.81",
			"High": "46.65",
			"Low": "45.8",
			"Close": "46.52",
			"Volume": "71305"
		},
		{
			"Date": "20090922",
			"Ticker": "ABT",
			"Open": "46.67",
			"High": "46.93",
			"Low": "46.4",
			"Close": "46.73",
			"Volume": "82051"
		},
		{
			"Date": "20090923",
			"Ticker": "ABT",
			"Open": "46.87",
			"High": "46.87",
			"Low": "46.09",
			"Close": "46.13",
			"Volume": "61743"
		},
		{
			"Date": "20090924",
			"Ticker": "ABT",
			"Open": "46.29",
			"High": "47.02",
			"Low": "46.01",
			"Close": "46.94",
			"Volume": "118393"
		},
		{
			"Date": "20090925",
			"Ticker": "ABT",
			"Open": "46.76",
			"High": "47.78",
			"Low": "46.76",
			"Close": "47.33",
			"Volume": "114374"
		},
		{
			"Date": "20090928",
			"Ticker": "ABT",
			"Open": "49.15",
			"High": "49.69",
			"Low": "48.49",
			"Close": "48.58",
			"Volume": "185338"
		},
		{
			"Date": "20090929",
			"Ticker": "ABT",
			"Open": "48.98",
			"High": "49.58",
			"Low": "48.8",
			"Close": "49.1",
			"Volume": "118729"
		},
		{
			"Date": "20090930",
			"Ticker": "ABT",
			"Open": "49.15",
			"High": "49.53",
			"Low": "48.68",
			"Close": "49.47",
			"Volume": "104769"
		},
		{
			"Date": "20091001",
			"Ticker": "ABT",
			"Open": "49.46",
			"High": "49.75",
			"Low": "48.62",
			"Close": "48.68",
			"Volume": "108363"
		},
		{
			"Date": "20091002",
			"Ticker": "ABT",
			"Open": "48.41",
			"High": "50",
			"Low": "48.41",
			"Close": "49.84",
			"Volume": "128175"
		},
		{
			"Date": "20091005",
			"Ticker": "ABT",
			"Open": "49.93",
			"High": "50.43",
			"Low": "49.615",
			"Close": "50.33",
			"Volume": "113335"
		},
		{
			"Date": "20091006",
			"Ticker": "ABT",
			"Open": "50.5",
			"High": "50.71",
			"Low": "49.85",
			"Close": "50.18",
			"Volume": "88380"
		},
		{
			"Date": "20091007",
			"Ticker": "ABT",
			"Open": "50.09",
			"High": "52.1",
			"Low": "49.93",
			"Close": "50.04",
			"Volume": "57144"
		},
		{
			"Date": "20091008",
			"Ticker": "ABT",
			"Open": "50.33",
			"High": "50.75",
			"Low": "49.86",
			"Close": "50.11",
			"Volume": "59079"
		},
		{
			"Date": "20091009",
			"Ticker": "ABT",
			"Open": "50.05",
			"High": "50.45",
			"Low": "49.91",
			"Close": "50.08",
			"Volume": "54606"
		},
		{
			"Date": "20091012",
			"Ticker": "ABT",
			"Open": "50.43",
			"High": "50.43",
			"Low": "49.82",
			"Close": "50",
			"Volume": "72968"
		},
		{
			"Date": "20091013",
			"Ticker": "ABT",
			"Open": "49.77",
			"High": "49.96",
			"Low": "49.32",
			"Close": "49.65",
			"Volume": "81382"
		},
		{
			"Date": "20091014",
			"Ticker": "ABT",
			"Open": "50.72",
			"High": "51.49",
			"Low": "50.24",
			"Close": "51.2",
			"Volume": "133222"
		},
		{
			"Date": "20091015",
			"Ticker": "ABT",
			"Open": "51.42",
			"High": "52.16",
			"Low": "51.2",
			"Close": "51.91",
			"Volume": "100717"
		},
		{
			"Date": "20091016",
			"Ticker": "ABT",
			"Open": "51.62",
			"High": "51.88",
			"Low": "51.33",
			"Close": "51.43",
			"Volume": "86895"
		},
		{
			"Date": "20091019",
			"Ticker": "ABT",
			"Open": "51.46",
			"High": "52.36",
			"Low": "51.4",
			"Close": "52.23",
			"Volume": "86003"
		},
		{
			"Date": "20091020",
			"Ticker": "ABT",
			"Open": "51.98",
			"High": "52.31",
			"Low": "51.73",
			"Close": "51.86",
			"Volume": "77797"
		},
		{
			"Date": "20091021",
			"Ticker": "ABT",
			"Open": "51.91",
			"High": "51.96",
			"Low": "51.06",
			"Close": "51.15",
			"Volume": "70409"
		},
		{
			"Date": "20091022",
			"Ticker": "ABT",
			"Open": "51.12",
			"High": "52.31",
			"Low": "50.81",
			"Close": "52.17",
			"Volume": "74647"
		},
		{
			"Date": "20091023",
			"Ticker": "ABT",
			"Open": "51.98",
			"High": "52.17",
			"Low": "50.97",
			"Close": "51.31",
			"Volume": "59798"
		},
		{
			"Date": "20091026",
			"Ticker": "ABT",
			"Open": "51.38",
			"High": "51.72",
			"Low": "50.52",
			"Close": "50.89",
			"Volume": "60771"
		},
		{
			"Date": "20091027",
			"Ticker": "ABT",
			"Open": "50.52",
			"High": "51.5",
			"Low": "50.52",
			"Close": "51.22",
			"Volume": "58056"
		},
		{
			"Date": "20091028",
			"Ticker": "ABT",
			"Open": "51.13",
			"High": "51.59",
			"Low": "51",
			"Close": "51.02",
			"Volume": "57471"
		},
		{
			"Date": "20091105",
			"Ticker": "ABT",
			"Open": "51.04",
			"High": "51.77",
			"Low": "50.98",
			"Close": "51.62",
			"Volume": "49889"
		},
		{
			"Date": "20091106",
			"Ticker": "ABT",
			"Open": "51.45",
			"High": "51.593",
			"Low": "51.0701",
			"Close": "51.53",
			"Volume": "39947"
		},
		{
			"Date": "20091109",
			"Ticker": "ABT",
			"Open": "51.78",
			"High": "52.4",
			"Low": "51.55",
			"Close": "52.35",
			"Volume": "52152"
		},
		{
			"Date": "20091110",
			"Ticker": "ABT",
			"Open": "52.19",
			"High": "52.99",
			"Low": "52.15",
			"Close": "52.8",
			"Volume": "55401"
		},
		{
			"Date": "20091111",
			"Ticker": "ABT",
			"Open": "53.42",
			"High": "53.55",
			"Low": "53.01",
			"Close": "53.26",
			"Volume": "61467"
		},
		{
			"Date": "20091112",
			"Ticker": "ABT",
			"Open": "53.39",
			"High": "53.8",
			"Low": "53.01",
			"Close": "53.23",
			"Volume": "47802"
		},
		{
			"Date": "20091113",
			"Ticker": "ABT",
			"Open": "53.4",
			"High": "53.5",
			"Low": "52.78",
			"Close": "52.95",
			"Volume": "59574"
		},
		{
			"Date": "20091116",
			"Ticker": "ABT",
			"Open": "53.53",
			"High": "53.89",
			"Low": "53.14",
			"Close": "53.63",
			"Volume": "67849"
		},
		{
			"Date": "20091117",
			"Ticker": "ABT",
			"Open": "53.62",
			"High": "53.62",
			"Low": "53.08",
			"Close": "53.31",
			"Volume": "55927"
		},
		{
			"Date": "20091118",
			"Ticker": "ABT",
			"Open": "53.31",
			"High": "53.31",
			"Low": "52.5",
			"Close": "53.18",
			"Volume": "48318"
		},
		{
			"Date": "20091119",
			"Ticker": "ABT",
			"Open": "52.89",
			"High": "53.2",
			"Low": "52.57",
			"Close": "52.96",
			"Volume": "67418"
		},
		{
			"Date": "20091120",
			"Ticker": "ABT",
			"Open": "53.25",
			"High": "53.74",
			"Low": "52.84",
			"Close": "53.64",
			"Volume": "63979"
		},
		{
			"Date": "20091123",
			"Ticker": "ABT",
			"Open": "53.72",
			"High": "53.84",
			"Low": "52.9774",
			"Close": "53.13",
			"Volume": "93291"
		},
		{
			"Date": "20091124",
			"Ticker": "ABT",
			"Open": "53.22",
			"High": "54.495",
			"Low": "52.5",
			"Close": "54.24",
			"Volume": "86395"
		},
		{
			"Date": "20091125",
			"Ticker": "ABT",
			"Open": "54.3",
			"High": "54.59",
			"Low": "54.1104",
			"Close": "54.41",
			"Volume": "41868"
		},
		{
			"Date": "20091127",
			"Ticker": "ABT",
			"Open": "53.49",
			"High": "54.34",
			"Low": "53.29",
			"Close": "54.08",
			"Volume": "28898"
		},
		{
			"Date": "20091130",
			"Ticker": "ABT",
			"Open": "54.2",
			"High": "54.55",
			"Low": "53.69",
			"Close": "54.49",
			"Volume": "70463"
		},
		{
			"Date": "20091201",
			"Ticker": "ABT",
			"Open": "54.85",
			"High": "54.87",
			"Low": "54.22",
			"Close": "54.48",
			"Volume": "102148"
		},
		{
			"Date": "20091202",
			"Ticker": "ABT",
			"Open": "54.49",
			"High": "54.97",
			"Low": "54.24",
			"Close": "54.44",
			"Volume": "55592"
		},
		{
			"Date": "20091203",
			"Ticker": "ABT",
			"Open": "54.41",
			"High": "54.69",
			"Low": "54.13",
			"Close": "54.24",
			"Volume": "53473"
		},
		{
			"Date": "20091204",
			"Ticker": "ABT",
			"Open": "54.57",
			"High": "54.65",
			"Low": "53.4",
			"Close": "53.78",
			"Volume": "62962"
		},
		{
			"Date": "20091207",
			"Ticker": "ABT",
			"Open": "53.84",
			"High": "54.25",
			"Low": "53.62",
			"Close": "53.66",
			"Volume": "53366"
		},
		{
			"Date": "20091208",
			"Ticker": "ABT",
			"Open": "53.52",
			"High": "53.64",
			"Low": "52.94",
			"Close": "53.24",
			"Volume": "57863"
		},
		{
			"Date": "20091209",
			"Ticker": "ABT",
			"Open": "53.5",
			"High": "53.67",
			"Low": "53.14",
			"Close": "53.61",
			"Volume": "46151"
		},
		{
			"Date": "20091210",
			"Ticker": "ABT",
			"Open": "53.57",
			"High": "54.34",
			"Low": "53.53",
			"Close": "54.07",
			"Volume": "62687"
		},
		{
			"Date": "20091211",
			"Ticker": "ABT",
			"Open": "54",
			"High": "54.35",
			"Low": "53.65",
			"Close": "53.77",
			"Volume": "53468"
		},
		{
			"Date": "20091214",
			"Ticker": "ABT",
			"Open": "53.94",
			"High": "54.31",
			"Low": "53.75",
			"Close": "53.78",
			"Volume": "44918"
		},
		{
			"Date": "20091215",
			"Ticker": "ABT",
			"Open": "53.78",
			"High": "54.22",
			"Low": "53.52",
			"Close": "53.99",
			"Volume": "44118"
		},
		{
			"Date": "20091216",
			"Ticker": "ABT",
			"Open": "54.25",
			"High": "54.45",
			"Low": "53.77",
			"Close": "53.88",
			"Volume": "53956"
		},
		{
			"Date": "20091217",
			"Ticker": "ABT",
			"Open": "53.76",
			"High": "53.83",
			"Low": "53.16",
			"Close": "53.58",
			"Volume": "54068"
		},
		{
			"Date": "20091218",
			"Ticker": "ABT",
			"Open": "53.75",
			"High": "53.75",
			"Low": "53",
			"Close": "53.34",
			"Volume": "94109"
		},
		{
			"Date": "20091221",
			"Ticker": "ABT",
			"Open": "53.58",
			"High": "54.2",
			"Low": "53.42",
			"Close": "53.92",
			"Volume": "58808"
		},
		{
			"Date": "20091222",
			"Ticker": "ABT",
			"Open": "54.04",
			"High": "54.29",
			"Low": "54.016",
			"Close": "54.12",
			"Volume": "48578"
		},
		{
			"Date": "20091223",
			"Ticker": "ABT",
			"Open": "54.22",
			"High": "54.37",
			"Low": "53.97",
			"Close": "54.09",
			"Volume": "27577"
		},
		{
			"Date": "20091224",
			"Ticker": "ABT",
			"Open": "54.07",
			"High": "54.42",
			"Low": "54.04",
			"Close": "54.15",
			"Volume": "15193"
		},
		{
			"Date": "20091228",
			"Ticker": "ABT",
			"Open": "54.16",
			"High": "54.55",
			"Low": "54.055",
			"Close": "54.53",
			"Volume": "40865"
		},
		{
			"Date": "20091229",
			"Ticker": "ABT",
			"Open": "54.63",
			"High": "54.93",
			"Low": "54.22",
			"Close": "54.26",
			"Volume": "44526"
		},
		{
			"Date": "20091230",
			"Ticker": "ABT",
			"Open": "53.91",
			"High": "54.55",
			"Low": "53.9",
			"Close": "54.54",
			"Volume": "35904"
		},
		{
			"Date": "20091231",
			"Ticker": "ABT",
			"Open": "54.47",
			"High": "54.65",
			"Low": "53.94",
			"Close": "53.99",
			"Volume": "29933"
		},
		{
			"Date": "20100104",
			"Ticker": "ABT",
			"Open": "54.19",
			"High": "54.555",
			"Low": "53.92",
			"Close": "54.46",
			"Volume": "51957"
		},
		{
			"Date": "20100105",
			"Ticker": "ABT",
			"Open": "54.47",
			"High": "54.47",
			"Low": "53.75",
			"Close": "54.02",
			"Volume": "50677"
		},
		{
			"Date": "20100106",
			"Ticker": "ABT",
			"Open": "53.94",
			"High": "54.39",
			"Low": "53.85",
			"Close": "54.32",
			"Volume": "54703"
		},
		{
			"Date": "20100107",
			"Ticker": "ABT",
			"Open": "54.31",
			"High": "54.78",
			"Low": "54.07",
			"Close": "54.77",
			"Volume": "61690"
		},
		{
			"Date": "20100108",
			"Ticker": "ABT",
			"Open": "54.76",
			"High": "55.25",
			"Low": "54.68",
			"Close": "55.05",
			"Volume": "58289"
		},
		{
			"Date": "20100111",
			"Ticker": "ABT",
			"Open": "55.3",
			"High": "55.48",
			"Low": "55.07",
			"Close": "55.33",
			"Volume": "52525"
		},
		{
			"Date": "20100112",
			"Ticker": "ABT",
			"Open": "55.2",
			"High": "55.55",
			"Low": "55.03",
			"Close": "55.17",
			"Volume": "52486"
		},
		{
			"Date": "20100113",
			"Ticker": "ABT",
			"Open": "54.86",
			"High": "55.54",
			"Low": "54.85",
			"Close": "55.29",
			"Volume": "50566"
		},
		{
			"Date": "20100114",
			"Ticker": "ABT",
			"Open": "55.22",
			"High": "55.62",
			"Low": "55",
			"Close": "55.35",
			"Volume": "43097"
		},
		{
			"Date": "20100115",
			"Ticker": "ABT",
			"Open": "55.36",
			"High": "55.57",
			"Low": "55.16",
			"Close": "55.49",
			"Volume": "77404"
		},
		{
			"Date": "20100119",
			"Ticker": "ABT",
			"Open": "55.55",
			"High": "56.5",
			"Low": "55.51",
			"Close": "56.2",
			"Volume": "79952"
		},
		{
			"Date": "20100120",
			"Ticker": "ABT",
			"Open": "56.23",
			"High": "56.79",
			"Low": "55.61",
			"Close": "56.24",
			"Volume": "67560"
		},
		{
			"Date": "20100121",
			"Ticker": "ABT",
			"Open": "56.21",
			"High": "56.5",
			"Low": "55",
			"Close": "55.56",
			"Volume": "83087"
		},
		{
			"Date": "20100122",
			"Ticker": "ABT",
			"Open": "55.33",
			"High": "55.656",
			"Low": "54.4",
			"Close": "54.51",
			"Volume": "70049"
		},
		{
			"Date": "20100125",
			"Ticker": "ABT",
			"Open": "54.76",
			"High": "55.51",
			"Low": "54.53",
			"Close": "54.7",
			"Volume": "48504"
		},
		{
			"Date": "20100126",
			"Ticker": "ABT",
			"Open": "54.57",
			"High": "54.67",
			"Low": "54.26",
			"Close": "54.48",
			"Volume": "66281"
		},
		{
			"Date": "20100127",
			"Ticker": "ABT",
			"Open": "54.1",
			"High": "54.14",
			"Low": "53.15",
			"Close": "53.9",
			"Volume": "115668"
		},
		{
			"Date": "20100128",
			"Ticker": "ABT",
			"Open": "54.1",
			"High": "54.45",
			"Low": "53.64",
			"Close": "53.95",
			"Volume": "66514"
		},
		{
			"Date": "20100129",
			"Ticker": "ABT",
			"Open": "54.08",
			"High": "54.08",
			"Low": "52.89",
			"Close": "52.94",
			"Volume": "95154"
		},
		{
			"Date": "20100201",
			"Ticker": "ABT",
			"Open": "53.11",
			"High": "53.69",
			"Low": "53.08",
			"Close": "53.34",
			"Volume": "88173"
		},
		{
			"Date": "20100202",
			"Ticker": "ABT",
			"Open": "53.29",
			"High": "54.6",
			"Low": "53.2",
			"Close": "54.44",
			"Volume": "82593"
		},
		{
			"Date": "20100203",
			"Ticker": "ABT",
			"Open": "54.37",
			"High": "54.78",
			"Low": "54.1",
			"Close": "54.65",
			"Volume": "67933"
		},
		{
			"Date": "20100204",
			"Ticker": "ABT",
			"Open": "54.75",
			"High": "54.75",
			"Low": "53.79",
			"Close": "53.82",
			"Volume": "91980"
		},
		{
			"Date": "20100205",
			"Ticker": "ABT",
			"Open": "53.63",
			"High": "54.13",
			"Low": "53.3",
			"Close": "53.97",
			"Volume": "108175"
		},
		{
			"Date": "20100208",
			"Ticker": "ABT",
			"Open": "53.85",
			"High": "53.95",
			"Low": "53.31",
			"Close": "53.35",
			"Volume": "71303"
		},
		{
			"Date": "20100209",
			"Ticker": "ABT",
			"Open": "53.64",
			"High": "53.98",
			"Low": "53.34",
			"Close": "53.35",
			"Volume": "111454"
		},
		{
			"Date": "20100210",
			"Ticker": "ABT",
			"Open": "53.26",
			"High": "53.49",
			"Low": "52.67",
			"Close": "53.26",
			"Volume": "74273"
		},
		{
			"Date": "20100211",
			"Ticker": "ABT",
			"Open": "53.27",
			"High": "53.71",
			"Low": "52.93",
			"Close": "53.54",
			"Volume": "64358"
		},
		{
			"Date": "20100212",
			"Ticker": "ABT",
			"Open": "53.2",
			"High": "54",
			"Low": "53.11",
			"Close": "53.93",
			"Volume": "84281"
		},
		{
			"Date": "20100216",
			"Ticker": "ABT",
			"Open": "54.24",
			"High": "54.675",
			"Low": "53.77",
			"Close": "54.59",
			"Volume": "75530"
		},
		{
			"Date": "20100217",
			"Ticker": "ABT",
			"Open": "54.79",
			"High": "54.98",
			"Low": "54.57",
			"Close": "54.75",
			"Volume": "63756"
		},
		{
			"Date": "20100218",
			"Ticker": "ABT",
			"Open": "54.69",
			"High": "55",
			"Low": "54.67",
			"Close": "54.97",
			"Volume": "53599"
		},
		{
			"Date": "20100219",
			"Ticker": "ABT",
			"Open": "54.88",
			"High": "54.89",
			"Low": "54.08",
			"Close": "54.38",
			"Volume": "96520"
		},
		{
			"Date": "20100222",
			"Ticker": "ABT",
			"Open": "54.49",
			"High": "54.52",
			"Low": "53.96",
			"Close": "54.4",
			"Volume": "57417"
		},
		{
			"Date": "20100223",
			"Ticker": "ABT",
			"Open": "54.23",
			"High": "54.47",
			"Low": "53.75",
			"Close": "53.97",
			"Volume": "67020"
		},
		{
			"Date": "20100224",
			"Ticker": "ABT",
			"Open": "54.19",
			"High": "54.54",
			"Low": "53.91",
			"Close": "54.33",
			"Volume": "67849"
		},
		{
			"Date": "20100225",
			"Ticker": "ABT",
			"Open": "53.97",
			"High": "54.19",
			"Low": "53.61",
			"Close": "54.12",
			"Volume": "59042"
		},
		{
			"Date": "20100226",
			"Ticker": "ABT",
			"Open": "54.18",
			"High": "54.53",
			"Low": "53.85",
			"Close": "54.28",
			"Volume": "70411"
		},
		{
			"Date": "20100301",
			"Ticker": "ABT",
			"Open": "54.45",
			"High": "54.652",
			"Low": "54.14",
			"Close": "54.29",
			"Volume": "45590"
		},
		{
			"Date": "20100302",
			"Ticker": "ABT",
			"Open": "54.22",
			"High": "54.7",
			"Low": "54.13",
			"Close": "54.58",
			"Volume": "49991"
		},
		{
			"Date": "20100303",
			"Ticker": "ABT",
			"Open": "54.6",
			"High": "54.84",
			"Low": "53.92",
			"Close": "54.08",
			"Volume": "67055"
		},
		{
			"Date": "20100304",
			"Ticker": "ABT",
			"Open": "54.46",
			"High": "54.5",
			"Low": "53.91",
			"Close": "54.08",
			"Volume": "63617"
		},
		{
			"Date": "20100305",
			"Ticker": "ABT",
			"Open": "54.14",
			"High": "54.39",
			"Low": "54.12",
			"Close": "54.32",
			"Volume": "73369"
		},
		{
			"Date": "20100308",
			"Ticker": "ABT",
			"Open": "54.37",
			"High": "54.55",
			"Low": "54.12",
			"Close": "54.42",
			"Volume": "43116"
		},
		{
			"Date": "20100309",
			"Ticker": "ABT",
			"Open": "54.19",
			"High": "54.96",
			"Low": "54.13",
			"Close": "54.8",
			"Volume": "58972"
		},
		{
			"Date": "20100310",
			"Ticker": "ABT",
			"Open": "54.81",
			"High": "55.55",
			"Low": "54.72",
			"Close": "55.03",
			"Volume": "81570"
		},
		{
			"Date": "20100311",
			"Ticker": "ABT",
			"Open": "55.04",
			"High": "55.55",
			"Low": "54.85",
			"Close": "55.54",
			"Volume": "57120"
		},
		{
			"Date": "20100312",
			"Ticker": "ABT",
			"Open": "55.04",
			"High": "55.05",
			"Low": "53.72",
			"Close": "54.52",
			"Volume": "162312"
		},
		{
			"Date": "20100315",
			"Ticker": "ABT",
			"Open": "54.41",
			"High": "54.8",
			"Low": "54.12",
			"Close": "54.8",
			"Volume": "73924"
		},
		{
			"Date": "20100316",
			"Ticker": "ABT",
			"Open": "54.84",
			"High": "54.99",
			"Low": "54.47",
			"Close": "54.68",
			"Volume": "59597"
		},
		{
			"Date": "20100317",
			"Ticker": "ABT",
			"Open": "54.84",
			"High": "54.88",
			"Low": "54.3",
			"Close": "54.5",
			"Volume": "73727"
		},
		{
			"Date": "20100318",
			"Ticker": "ABT",
			"Open": "54.44",
			"High": "54.54",
			"Low": "53.61",
			"Close": "53.77",
			"Volume": "153751"
		},
		{
			"Date": "20100319",
			"Ticker": "ABT",
			"Open": "53.88",
			"High": "53.9",
			"Low": "53.19",
			"Close": "53.46",
			"Volume": "163286"
		},
		{
			"Date": "20100322",
			"Ticker": "ABT",
			"Open": "53.4",
			"High": "54.23",
			"Low": "53.3",
			"Close": "53.87",
			"Volume": "75170"
		},
		{
			"Date": "20100323",
			"Ticker": "ABT",
			"Open": "54.11",
			"High": "54.39",
			"Low": "53.82",
			"Close": "54.34",
			"Volume": "46564"
		},
		{
			"Date": "20100324",
			"Ticker": "ABT",
			"Open": "54.25",
			"High": "54.33",
			"Low": "53.76",
			"Close": "53.87",
			"Volume": "63360"
		},
		{
			"Date": "20100325",
			"Ticker": "ABT",
			"Open": "54.28",
			"High": "54.31",
			"Low": "53.5",
			"Close": "53.52",
			"Volume": "85108"
		},
		{
			"Date": "20100326",
			"Ticker": "ABT",
			"Open": "53.7",
			"High": "53.78",
			"Low": "52.44",
			"Close": "52.9",
			"Volume": "120039"
		},
		{
			"Date": "20100329",
			"Ticker": "ABT",
			"Open": "53.08",
			"High": "53.15",
			"Low": "52.73",
			"Close": "53.12",
			"Volume": "105573"
		},
		{
			"Date": "20100330",
			"Ticker": "ABT",
			"Open": "53.03",
			"High": "53.26",
			"Low": "52.49",
			"Close": "52.51",
			"Volume": "134290"
		},
		{
			"Date": "20100331",
			"Ticker": "ABT",
			"Open": "52.56",
			"High": "52.99",
			"Low": "52.21",
			"Close": "52.68",
			"Volume": "76146"
		},
		{
			"Date": "20100401",
			"Ticker": "ABT",
			"Open": "52.8",
			"High": "52.97",
			"Low": "52.58",
			"Close": "52.96",
			"Volume": "61918"
		},
		{
			"Date": "20100405",
			"Ticker": "ABT",
			"Open": "52.99",
			"High": "53.25",
			"Low": "52.7",
			"Close": "52.93",
			"Volume": "53405"
		},
		{
			"Date": "20100406",
			"Ticker": "ABT",
			"Open": "52.87",
			"High": "53.12",
			"Low": "52.58",
			"Close": "52.84",
			"Volume": "72460"
		},
		{
			"Date": "20100407",
			"Ticker": "ABT",
			"Open": "52.7",
			"High": "52.93",
			"Low": "52.38",
			"Close": "52.5",
			"Volume": "98729"
		},
		{
			"Date": "20100408",
			"Ticker": "ABT",
			"Open": "52.59",
			"High": "52.69",
			"Low": "52.2",
			"Close": "52.28",
			"Volume": "72510"
		},
		{
			"Date": "20100409",
			"Ticker": "ABT",
			"Open": "52.35",
			"High": "52.85",
			"Low": "52.28",
			"Close": "52.73",
			"Volume": "55836"
		},
		{
			"Date": "20100412",
			"Ticker": "ABT",
			"Open": "53",
			"High": "53",
			"Low": "52.39",
			"Close": "52.67",
			"Volume": "64583"
		},
		{
			"Date": "20100413",
			"Ticker": "ABT",
			"Open": "52.16",
			"High": "52.48",
			"Low": "52.16",
			"Close": "52.28",
			"Volume": "69292"
		},
		{
			"Date": "20100414",
			"Ticker": "ABT",
			"Open": "52.42",
			"High": "52.46",
			"Low": "51.93",
			"Close": "52.31",
			"Volume": "91301"
		},
		{
			"Date": "20100415",
			"Ticker": "ABT",
			"Open": "52.31",
			"High": "52.45",
			"Low": "52.07",
			"Close": "52.36",
			"Volume": "72035"
		},
		{
			"Date": "20100416",
			"Ticker": "ABT",
			"Open": "52.24",
			"High": "52.46",
			"Low": "52.02",
			"Close": "52.26",
			"Volume": "79485"
		},
		{
			"Date": "20100419",
			"Ticker": "ABT",
			"Open": "52.26",
			"High": "53.13",
			"Low": "52.065",
			"Close": "52.91",
			"Volume": "90839"
		},
		{
			"Date": "20100420",
			"Ticker": "ABT",
			"Open": "53.03",
			"High": "53.25",
			"Low": "52.92",
			"Close": "53.06",
			"Volume": "63824"
		},
		{
			"Date": "20100421",
			"Ticker": "ABT",
			"Open": "52.8",
			"High": "52.95",
			"Low": "51.47",
			"Close": "51.78",
			"Volume": "125615"
		},
		{
			"Date": "20100422",
			"Ticker": "ABT",
			"Open": "51.59",
			"High": "51.61",
			"Low": "50.84",
			"Close": "51.12",
			"Volume": "80598"
		},
		{
			"Date": "20100423",
			"Ticker": "ABT",
			"Open": "51.03",
			"High": "51.21",
			"Low": "50.27",
			"Close": "51.2",
			"Volume": "91950"
		},
		{
			"Date": "20100426",
			"Ticker": "ABT",
			"Open": "51.1",
			"High": "51.77",
			"Low": "50.06",
			"Close": "50.37",
			"Volume": "94317"
		},
		{
			"Date": "20100427",
			"Ticker": "ABT",
			"Open": "50.28",
			"High": "50.56",
			"Low": "49.68",
			"Close": "49.77",
			"Volume": "104488"
		},
		{
			"Date": "20100428",
			"Ticker": "ABT",
			"Open": "49.94",
			"High": "50.42",
			"Low": "49.41",
			"Close": "50.27",
			"Volume": "93110"
		},
		{
			"Date": "20100429",
			"Ticker": "ABT",
			"Open": "50.51",
			"High": "51.13",
			"Low": "50.34",
			"Close": "50.75",
			"Volume": "92723"
		},
		{
			"Date": "20100430",
			"Ticker": "ABT",
			"Open": "50.85",
			"High": "51.5",
			"Low": "50.63",
			"Close": "51.16",
			"Volume": "107046"
		},
		{
			"Date": "20100503",
			"Ticker": "ABT",
			"Open": "51.45",
			"High": "51.59",
			"Low": "50.545",
			"Close": "50.87",
			"Volume": "87976"
		},
		{
			"Date": "20100504",
			"Ticker": "ABT",
			"Open": "50.74",
			"High": "50.86",
			"Low": "49.72",
			"Close": "50.19",
			"Volume": "104175"
		},
		{
			"Date": "20100505",
			"Ticker": "ABT",
			"Open": "50.2",
			"High": "51.07",
			"Low": "49.75",
			"Close": "50.15",
			"Volume": "107308"
		},
		{
			"Date": "20100506",
			"Ticker": "ABT",
			"Open": "50.14",
			"High": "50.38",
			"Low": "45.6",
			"Close": "49",
			"Volume": "124990"
		},
		{
			"Date": "20100507",
			"Ticker": "ABT",
			"Open": "49.02",
			"High": "49.16",
			"Low": "48",
			"Close": "48.72",
			"Volume": "120561"
		},
		{
			"Date": "20100510",
			"Ticker": "ABT",
			"Open": "49.8",
			"High": "50.23",
			"Low": "49.24",
			"Close": "49.69",
			"Volume": "102725"
		},
		{
			"Date": "20100511",
			"Ticker": "ABT",
			"Open": "49.38",
			"High": "49.73",
			"Low": "49.24",
			"Close": "49.4",
			"Volume": "85663"
		},
		{
			"Date": "20100512",
			"Ticker": "ABT",
			"Open": "49.57",
			"High": "49.59",
			"Low": "48.89",
			"Close": "49.15",
			"Volume": "88454"
		},
		{
			"Date": "20100513",
			"Ticker": "ABT",
			"Open": "49.11",
			"High": "49.11",
			"Low": "48.21",
			"Close": "48.61",
			"Volume": "91831"
		},
		{
			"Date": "20100514",
			"Ticker": "ABT",
			"Open": "48.44",
			"High": "48.61",
			"Low": "47.78",
			"Close": "48.5",
			"Volume": "100088"
		},
		{
			"Date": "20100517",
			"Ticker": "ABT",
			"Open": "48.58",
			"High": "48.77",
			"Low": "47.88",
			"Close": "48.43",
			"Volume": "74303"
		},
		{
			"Date": "20100518",
			"Ticker": "ABT",
			"Open": "48.71",
			"High": "48.93",
			"Low": "48",
			"Close": "48.05",
			"Volume": "69687"
		},
		{
			"Date": "20100519",
			"Ticker": "ABT",
			"Open": "47.84",
			"High": "48.35",
			"Low": "47.81",
			"Close": "47.94",
			"Volume": "91881"
		},
		{
			"Date": "20100520",
			"Ticker": "ABT",
			"Open": "47.47",
			"High": "47.47",
			"Low": "46.47",
			"Close": "46.48",
			"Volume": "108628"
		},
		{
			"Date": "20100521",
			"Ticker": "ABT",
			"Open": "45.48",
			"High": "46.98",
			"Low": "45.26",
			"Close": "46.94",
			"Volume": "165447"
		},
		{
			"Date": "20100524",
			"Ticker": "ABT",
			"Open": "47.17",
			"High": "48.045",
			"Low": "46.87",
			"Close": "47.56",
			"Volume": "129378"
		},
		{
			"Date": "20100525",
			"Ticker": "ABT",
			"Open": "46.94",
			"High": "47.25",
			"Low": "46.31",
			"Close": "47.23",
			"Volume": "126695"
		},
		{
			"Date": "20100526",
			"Ticker": "ABT",
			"Open": "47.54",
			"High": "48",
			"Low": "46.94",
			"Close": "47.17",
			"Volume": "122533"
		},
		{
			"Date": "20100527",
			"Ticker": "ABT",
			"Open": "47.85",
			"High": "48.125",
			"Low": "47.26",
			"Close": "47.87",
			"Volume": "80501"
		},
		{
			"Date": "20100528",
			"Ticker": "ABT",
			"Open": "47.77",
			"High": "48.58",
			"Low": "47.5",
			"Close": "47.56",
			"Volume": "110758"
		},
		{
			"Date": "20100601",
			"Ticker": "ABT",
			"Open": "47.44",
			"High": "47.72",
			"Low": "46.9",
			"Close": "46.94",
			"Volume": "87571"
		},
		{
			"Date": "20100602",
			"Ticker": "ABT",
			"Open": "47",
			"High": "47.51",
			"Low": "46.51",
			"Close": "47.48",
			"Volume": "89894"
		},
		{
			"Date": "20100603",
			"Ticker": "ABT",
			"Open": "47.75",
			"High": "47.82",
			"Low": "47.47",
			"Close": "47.73",
			"Volume": "43438"
		},
		{
			"Date": "20100604",
			"Ticker": "ABT",
			"Open": "47.04",
			"High": "47.097",
			"Low": "46.37",
			"Close": "46.53",
			"Volume": "102878"
		},
		{
			"Date": "20100607",
			"Ticker": "ABT",
			"Open": "46.34",
			"High": "46.62",
			"Low": "46.19",
			"Close": "46.23",
			"Volume": "93146"
		},
		{
			"Date": "20100608",
			"Ticker": "ABT",
			"Open": "46.03",
			"High": "46.42",
			"Low": "45.6723",
			"Close": "46.31",
			"Volume": "109198"
		},
		{
			"Date": "20100609",
			"Ticker": "ABT",
			"Open": "46.39",
			"High": "46.55",
			"Low": "45.73",
			"Close": "45.86",
			"Volume": "87697"
		},
		{
			"Date": "20100610",
			"Ticker": "ABT",
			"Open": "46.38",
			"High": "47.47",
			"Low": "46.34",
			"Close": "47.2",
			"Volume": "91856"
		},
		{
			"Date": "20100611",
			"Ticker": "ABT",
			"Open": "47.09",
			"High": "47.4",
			"Low": "46.82",
			"Close": "47.2",
			"Volume": "59047"
		},
		{
			"Date": "20100614",
			"Ticker": "ABT",
			"Open": "47.44",
			"High": "47.65",
			"Low": "47.28",
			"Close": "47.33",
			"Volume": "67961"
		},
		{
			"Date": "20100615",
			"Ticker": "ABT",
			"Open": "47.54",
			"High": "48.21",
			"Low": "47.44",
			"Close": "48.17",
			"Volume": "95685"
		},
		{
			"Date": "20100616",
			"Ticker": "ABT",
			"Open": "47.79",
			"High": "48.87",
			"Low": "47.67",
			"Close": "48.79",
			"Volume": "94072"
		},
		{
			"Date": "20100617",
			"Ticker": "ABT",
			"Open": "48.84",
			"High": "48.85",
			"Low": "48.25",
			"Close": "48.63",
			"Volume": "78469"
		},
		{
			"Date": "20100618",
			"Ticker": "ABT",
			"Open": "48.86",
			"High": "49",
			"Low": "48.4",
			"Close": "48.77",
			"Volume": "89906"
		},
		{
			"Date": "20100621",
			"Ticker": "ABT",
			"Open": "49.16",
			"High": "49.23",
			"Low": "48.055",
			"Close": "48.3",
			"Volume": "76161"
		},
		{
			"Date": "20100622",
			"Ticker": "ABT",
			"Open": "48.32",
			"High": "48.705",
			"Low": "47.95",
			"Close": "47.99",
			"Volume": "59419"
		},
		{
			"Date": "20100623",
			"Ticker": "ABT",
			"Open": "48.09",
			"High": "48.16",
			"Low": "47.38",
			"Close": "47.56",
			"Volume": "64882"
		},
		{
			"Date": "20100624",
			"Ticker": "ABT",
			"Open": "47.38",
			"High": "47.86",
			"Low": "47.23",
			"Close": "47.46",
			"Volume": "70477"
		},
		{
			"Date": "20100625",
			"Ticker": "ABT",
			"Open": "47.62",
			"High": "47.64",
			"Low": "47.1",
			"Close": "47.19",
			"Volume": "137523"
		},
		{
			"Date": "20100628",
			"Ticker": "ABT",
			"Open": "47.25",
			"High": "47.6",
			"Low": "47.04",
			"Close": "47.18",
			"Volume": "54566"
		},
		{
			"Date": "20100629",
			"Ticker": "ABT",
			"Open": "46.89",
			"High": "47",
			"Low": "46.25",
			"Close": "46.65",
			"Volume": "83405"
		},
		{
			"Date": "20100630",
			"Ticker": "ABT",
			"Open": "46.66",
			"High": "47.24",
			"Low": "46.18",
			"Close": "46.78",
			"Volume": "102623"
		},
		{
			"Date": "20100701",
			"Ticker": "ABT",
			"Open": "46.58",
			"High": "46.66",
			"Low": "45.71",
			"Close": "46.46",
			"Volume": "86197"
		},
		{
			"Date": "20100702",
			"Ticker": "ABT",
			"Open": "46.48",
			"High": "46.76",
			"Low": "46.22",
			"Close": "46.46",
			"Volume": "56777"
		},
		{
			"Date": "20100706",
			"Ticker": "ABT",
			"Open": "46.78",
			"High": "46.97",
			"Low": "46.31",
			"Close": "46.69",
			"Volume": "96114"
		},
		{
			"Date": "20100707",
			"Ticker": "ABT",
			"Open": "46.74",
			"High": "47.77",
			"Low": "46.5895",
			"Close": "47.71",
			"Volume": "91219"
		},
		{
			"Date": "20100708",
			"Ticker": "ABT",
			"Open": "47.9",
			"High": "48.15",
			"Low": "47.68",
			"Close": "48.1",
			"Volume": "73371"
		},
		{
			"Date": "20100709",
			"Ticker": "ABT",
			"Open": "48.16",
			"High": "48.16",
			"Low": "47.52",
			"Close": "48.03",
			"Volume": "51999"
		},
		{
			"Date": "20100712",
			"Ticker": "ABT",
			"Open": "48.1",
			"High": "48.1",
			"Low": "47.6",
			"Close": "47.82",
			"Volume": "57468"
		},
		{
			"Date": "20100713",
			"Ticker": "ABT",
			"Open": "47.71",
			"High": "47.89",
			"Low": "47.62",
			"Close": "47.67",
			"Volume": "69203"
		},
		{
			"Date": "20100714",
			"Ticker": "ABT",
			"Open": "47.53",
			"High": "47.86",
			"Low": "47.17",
			"Close": "47.85",
			"Volume": "55520"
		},
		{
			"Date": "20100715",
			"Ticker": "ABT",
			"Open": "47.86",
			"High": "48.11",
			"Low": "47.68",
			"Close": "48.02",
			"Volume": "57975"
		},
		{
			"Date": "20100716",
			"Ticker": "ABT",
			"Open": "47.91",
			"High": "48.14",
			"Low": "47.02",
			"Close": "47.07",
			"Volume": "91383"
		},
		{
			"Date": "20100719",
			"Ticker": "ABT",
			"Open": "47.41",
			"High": "47.58",
			"Low": "47.25",
			"Close": "47.41",
			"Volume": "42000"
		},
		{
			"Date": "20100720",
			"Ticker": "ABT",
			"Open": "47.13",
			"High": "47.55",
			"Low": "46.86",
			"Close": "47.47",
			"Volume": "79075"
		},
		{
			"Date": "20100721",
			"Ticker": "ABT",
			"Open": "47.73",
			"High": "49.38",
			"Low": "44.59",
			"Close": "48.68",
			"Volume": "141958"
		},
		{
			"Date": "20100722",
			"Ticker": "ABT",
			"Open": "49.02",
			"High": "49.54",
			"Low": "48.36",
			"Close": "49.01",
			"Volume": "107537"
		},
		{
			"Date": "20100723",
			"Ticker": "ABT",
			"Open": "48.98",
			"High": "49.16",
			"Low": "48.58",
			"Close": "48.93",
			"Volume": "87209"
		},
		{
			"Date": "20100726",
			"Ticker": "ABT",
			"Open": "48.89",
			"High": "49.37",
			"Low": "48.82",
			"Close": "49.24",
			"Volume": "59181"
		},
		{
			"Date": "20100727",
			"Ticker": "ABT",
			"Open": "49.5",
			"High": "49.5",
			"Low": "48.96",
			"Close": "49.27",
			"Volume": "46365"
		},
		{
			"Date": "20100728",
			"Ticker": "ABT",
			"Open": "49.31",
			"High": "49.48",
			"Low": "48.85",
			"Close": "49.22",
			"Volume": "68566"
		},
		{
			"Date": "20100729",
			"Ticker": "ABT",
			"Open": "49.44",
			"High": "49.77",
			"Low": "48.93",
			"Close": "48.98",
			"Volume": "88464"
		},
		{
			"Date": "20100730",
			"Ticker": "ABT",
			"Open": "48.72",
			"High": "49.36",
			"Low": "48.3",
			"Close": "49.08",
			"Volume": "78200"
		},
		{
			"Date": "20100802",
			"Ticker": "ABT",
			"Open": "49.71",
			"High": "50",
			"Low": "49.62",
			"Close": "49.83",
			"Volume": "75095"
		},
		{
			"Date": "20100803",
			"Ticker": "ABT",
			"Open": "49.95",
			"High": "50.61",
			"Low": "49.76",
			"Close": "50",
			"Volume": "90784"
		},
		{
			"Date": "20100804",
			"Ticker": "ABT",
			"Open": "49.98",
			"High": "50.27",
			"Low": "49.79",
			"Close": "50.18",
			"Volume": "61689"
		},
		{
			"Date": "20100805",
			"Ticker": "ABT",
			"Open": "50.08",
			"High": "50.08",
			"Low": "49.72",
			"Close": "49.98",
			"Volume": "58971"
		},
		{
			"Date": "20100806",
			"Ticker": "ABT",
			"Open": "49.71",
			"High": "50.68",
			"Low": "49.71",
			"Close": "50.57",
			"Volume": "79949"
		},
		{
			"Date": "20100809",
			"Ticker": "ABT",
			"Open": "50.79",
			"High": "50.95",
			"Low": "50.43",
			"Close": "50.88",
			"Volume": "44984"
		},
		{
			"Date": "20100810",
			"Ticker": "ABT",
			"Open": "50.67",
			"High": "51.7",
			"Low": "50.59",
			"Close": "51.47",
			"Volume": "89666"
		},
		{
			"Date": "20100811",
			"Ticker": "ABT",
			"Open": "51.03",
			"High": "51.11",
			"Low": "50.27",
			"Close": "50.39",
			"Volume": "63216"
		},
		{
			"Date": "20100812",
			"Ticker": "ABT",
			"Open": "49.91",
			"High": "50.54",
			"Low": "49.73",
			"Close": "50.39",
			"Volume": "44189"
		},
		{
			"Date": "20100813",
			"Ticker": "ABT",
			"Open": "50.13",
			"High": "50.26",
			"Low": "49.91",
			"Close": "50.06",
			"Volume": "50879"
		},
		{
			"Date": "20100816",
			"Ticker": "ABT",
			"Open": "50.05",
			"High": "50.4297",
			"Low": "49.765",
			"Close": "50.34",
			"Volume": "47960"
		},
		{
			"Date": "20100817",
			"Ticker": "ABT",
			"Open": "50.5",
			"High": "50.89",
			"Low": "50.25",
			"Close": "50.69",
			"Volume": "60439"
		},
		{
			"Date": "20100819",
			"Ticker": "ABT",
			"Open": "50.16",
			"High": "50.21",
			"Low": "49.04",
			"Close": "49.32",
			"Volume": "102187"
		},
		{
			"Date": "20100820",
			"Ticker": "ABT",
			"Open": "49.04",
			"High": "49.43",
			"Low": "48.93",
			"Close": "49.34",
			"Volume": "64073"
		}
	];

/***/ }
]);